
FOS_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012468  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  080125f8  080125f8  000135f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ec0  08012ec0  00014308  2**0
                  CONTENTS
  4 .ARM          00000008  08012ec0  08012ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ec8  08012ec8  00014308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ec8  08012ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ecc  08012ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000308  20000000  08012ed0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014308  2**0
                  CONTENTS
 10 .bss          0000250c  20000308  20000308  00014308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002814  20002814  00014308  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cebc  00000000  00000000  00014338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004694  00000000  00000000  000311f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  00035888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001327  00000000  00000000  00037168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d0c  00000000  00000000  0003848f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020dea  00000000  00000000  0005d19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbe82  00000000  00000000  0007df85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149e07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e38  00000000  00000000  00149e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00151c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080125e0 	.word	0x080125e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	080125e0 	.word	0x080125e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <is_valid_number>:
 * @brief Checks whether a string contains only numeric digits.
 * @param s Pointer to null-terminated string to check.
 * @return 1 if the string is a valid number, 0 otherwise.
 */
uint8_t is_valid_number(const char *s)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    // Check for NULL or empty string
    if (s == NULL || *s == '\0')
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <is_valid_number+0x16>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <is_valid_number+0x1a>
    	return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e01a      	b.n	8000f88 <is_valid_number+0x50>

    // Iterate through each character to verify it's a digit
    for (int i = 0; s[i] != '\0'; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e010      	b.n	8000f7a <is_valid_number+0x42>
        if (s[i] < '0' || s[i] > '9')
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f62:	d905      	bls.n	8000f70 <is_valid_number+0x38>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b39      	cmp	r3, #57	@ 0x39
 8000f6e:	d901      	bls.n	8000f74 <is_valid_number+0x3c>
        	return 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e009      	b.n	8000f88 <is_valid_number+0x50>
    for (int i = 0; s[i] != '\0'; i++) {
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1e8      	bne.n	8000f58 <is_valid_number+0x20>
    }

    return 1;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HandleReceivedString>:
/**
 * @brief Handles a received string, parses it as an integer, and updates the sampling time.
 * @param str Pointer to the received null-terminated string.
 */
void HandleReceivedString(char *str)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	//char rxBuff[64];  // Buffer for optional debug response

    // Remove possible trailing \r or \n characters
    char *clean_str = str;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	613b      	str	r3, [r7, #16]

    // Trim line endings
    for (int i = 0; clean_str[i] != '\0'; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e014      	b.n	8000fd0 <HandleReceivedString+0x3c>
        if (clean_str[i] == '\r' || clean_str[i] == '\n') {
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b0d      	cmp	r3, #13
 8000fb0:	d005      	beq.n	8000fbe <HandleReceivedString+0x2a>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b0a      	cmp	r3, #10
 8000fbc:	d105      	bne.n	8000fca <HandleReceivedString+0x36>
            clean_str[i] = '\0';
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
            break;
 8000fc8:	e008      	b.n	8000fdc <HandleReceivedString+0x48>
    for (int i = 0; clean_str[i] != '\0'; i++) {
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e4      	bne.n	8000fa6 <HandleReceivedString+0x12>
        }
    }

    // Validate that input is numeric
	if (!is_valid_number(clean_str)) {
 8000fdc:	6938      	ldr	r0, [r7, #16]
 8000fde:	f7ff ffab 	bl	8000f38 <is_valid_number>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d010      	beq.n	800100a <HandleReceivedString+0x76>
		//CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));
		return;
	}

    // Convert string to unsigned integer
    uint32_t value = (uint32_t)strtoul(clean_str, NULL, 10);
 8000fe8:	220a      	movs	r2, #10
 8000fea:	2100      	movs	r1, #0
 8000fec:	6938      	ldr	r0, [r7, #16]
 8000fee:	f00d f849 	bl	800e084 <strtoul>
 8000ff2:	60f8      	str	r0, [r7, #12]

    // Check that value is in acceptable range
    if (value >= 0 && value <= 5000)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d806      	bhi.n	800100c <HandleReceivedString+0x78>
    {
        uint32_t parsed_value = value;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	60bb      	str	r3, [r7, #8]
        //sprintf(rxBuff, "ParsVal: %i", parsed_value);
        //CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));

        // Update global sampling time
        SAMPLE_TIME_MS_TOGGLE = parsed_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HandleReceivedString+0x80>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e000      	b.n	800100c <HandleReceivedString+0x78>
		return;
 800100a:	bf00      	nop
    else
    {
    	//sprintf(rxBuff, "Parsing error");
    	//CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));
    }
}
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008

08001018 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	887a      	ldrh	r2, [r7, #2]
 8001036:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a3a      	ldr	r2, [r7, #32]
 800103c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001042:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6858      	ldr	r0, [r3, #4]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	899b      	ldrh	r3, [r3, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	f004 f8ca 	bl	80051f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f003 f9f3 	bl	8004450 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	899b      	ldrh	r3, [r3, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	f004 f8bf 	bl	80051f8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800107a:	2032      	movs	r0, #50	@ 0x32
 800107c:	f003 f9e8 	bl	8004450 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8001080:	22b6      	movs	r2, #182	@ 0xb6
 8001082:	217e      	movs	r1, #126	@ 0x7e
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fa29 	bl	80014dc <BMI088_WriteAccRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	4413      	add	r3, r2
 8001092:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8001094:	2032      	movs	r0, #50	@ 0x32
 8001096:	f003 f9db 	bl	8004450 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800109a:	f107 0316 	add.w	r3, r7, #22
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f9a0 	bl	80013e8 <BMI088_ReadAccRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	4413      	add	r3, r2
 80010b0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f003 f9cc 	bl	8004450 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0x09); /* (no oversampling, ODR = 200 Hz, BW = ?? Hz /////////////////////////BW = 40 Hz) */
 80010b8:	2209      	movs	r2, #9
 80010ba:	2140      	movs	r1, #64	@ 0x40
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 fa0d 	bl	80014dc <BMI088_WriteAccRegister>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	4413      	add	r3, r2
 80010ca:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f003 f9bf 	bl	8004450 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x01); /* +- 6g range */
 80010d2:	2201      	movs	r2, #1
 80010d4:	2141      	movs	r1, #65	@ 0x41
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 fa00 	bl	80014dc <BMI088_WriteAccRegister>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	4413      	add	r3, r2
 80010e4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f003 f9b2 	bl	8004450 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80010ec:	220a      	movs	r2, #10
 80010ee:	2153      	movs	r1, #83	@ 0x53
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f000 f9f3 	bl	80014dc <BMI088_WriteAccRegister>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	4413      	add	r3, r2
 80010fe:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f003 f9a5 	bl	8004450 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8001106:	2204      	movs	r2, #4
 8001108:	2158      	movs	r1, #88	@ 0x58
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 f9e6 	bl	80014dc <BMI088_WriteAccRegister>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	4413      	add	r3, r2
 8001118:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800111a:	200a      	movs	r0, #10
 800111c:	f003 f998 	bl	8004450 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8001120:	2200      	movs	r2, #0
 8001122:	217c      	movs	r1, #124	@ 0x7c
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f9d9 	bl	80014dc <BMI088_WriteAccRegister>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	4413      	add	r3, r2
 8001132:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f003 f98b 	bl	8004450 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800113a:	2204      	movs	r2, #4
 800113c:	217d      	movs	r1, #125	@ 0x7d
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f9cc 	bl	80014dc <BMI088_WriteAccRegister>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	4413      	add	r3, r2
 800114c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f003 f97e 	bl	8004450 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a3a      	ldr	r2, [pc, #232]	@ (8001240 <BMI088_Init+0x228>)
 8001158:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2292      	movs	r2, #146	@ 0x92
 800115e:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	89db      	ldrh	r3, [r3, #14]
 8001168:	2201      	movs	r2, #1
 800116a:	4619      	mov	r1, r3
 800116c:	f004 f844 	bl	80051f8 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001170:	22b6      	movs	r2, #182	@ 0xb6
 8001172:	2114      	movs	r1, #20
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f9eb 	bl	8001550 <BMI088_WriteGyrRegister>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	4413      	add	r3, r2
 8001182:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001184:	20fa      	movs	r0, #250	@ 0xfa
 8001186:	f003 f963 	bl	8004450 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800118a:	f107 0316 	add.w	r3, r7, #22
 800118e:	461a      	mov	r2, r3
 8001190:	2100      	movs	r1, #0
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f966 	bl	8001464 <BMI088_ReadGyrRegister>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	4413      	add	r3, r2
 80011a0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f003 f954 	bl	8004450 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80011a8:	2201      	movs	r2, #1
 80011aa:	210f      	movs	r1, #15
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f000 f9cf 	bl	8001550 <BMI088_WriteGyrRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4413      	add	r3, r2
 80011ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f003 f947 	bl	8004450 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* ODR = 200 Hz, Filter bandwidth = 64 Hz */
 80011c2:	2206      	movs	r2, #6
 80011c4:	2110      	movs	r1, #16
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f9c2 	bl	8001550 <BMI088_WriteGyrRegister>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	4413      	add	r3, r2
 80011d4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f003 f93a 	bl	8004450 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	2115      	movs	r1, #21
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f9b5 	bl	8001550 <BMI088_WriteGyrRegister>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	4413      	add	r3, r2
 80011ee:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f003 f92d 	bl	8004450 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80011f6:	2201      	movs	r2, #1
 80011f8:	2116      	movs	r1, #22
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f9a8 	bl	8001550 <BMI088_WriteGyrRegister>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	4413      	add	r3, r2
 8001208:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f003 f920 	bl	8004450 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001210:	2201      	movs	r2, #1
 8001212:	2118      	movs	r1, #24
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f99b 	bl	8001550 <BMI088_WriteGyrRegister>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	4413      	add	r3, r2
 8001222:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001224:	200a      	movs	r0, #10
 8001226:	f003 f913 	bl	8004450 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <BMI088_Init+0x22c>)
 800122e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2282      	movs	r2, #130	@ 0x82
 8001234:	769a      	strb	r2, [r3, #26]

	return status;
 8001236:	7dfb      	ldrb	r3, [r7, #23]

}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	3a6b70a4 	.word	0x3a6b70a4
 8001244:	3a0ba058 	.word	0x3a0ba058

08001248 <Init_BMI088_Bias>:


void Init_BMI088_Bias(BMI088* imu, int cycles)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < cycles; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e044      	b.n	80012e2 <Init_BMI088_Bias+0x9a>
    {
        imu->gyr_bias[0] += imu->gyr_rps[0];
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        imu->gyr_bias[1] += imu->gyr_rps[1];
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        imu->gyr_bias[2] += imu->gyr_rps[2];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        imu->acc_bias[0] += imu->acc_mps2[0];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
        imu->acc_bias[1] += imu->acc_mps2[1];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        imu->acc_bias[2] += imu->acc_mps2[2];
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80012d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    for (int i = 0; i < cycles; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbb6      	blt.n	8001258 <Init_BMI088_Bias+0x10>
    }
    for (int i = 0; i < 3; i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	e02e      	b.n	800134e <Init_BMI088_Bias+0x106>
    {
    	imu->gyr_bias[i] = imu->gyr_bias[i] / cycles;
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3316      	adds	r3, #22
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3304      	adds	r3, #4
 80012fc:	edd3 6a00 	vldr	s13, [r3]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3316      	adds	r3, #22
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3304      	adds	r3, #4
 800131a:	edc3 7a00 	vstr	s15, [r3]
    	imu->acc_bias[i] = imu->acc_bias[i] / cycles;
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3314      	adds	r3, #20
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	edd3 6a00 	vldr	s13, [r3]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3314      	adds	r3, #20
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b02      	cmp	r3, #2
 8001352:	ddcd      	ble.n	80012f0 <Init_BMI088_Bias+0xa8>
    }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <Take_IMU_Measurements>:


/// Function to insert IMU measurements from memory to memory (data is adjusted)
void Take_IMU_Measurements(BMI088 *imu, BinaryPacket *pkt)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
	pkt->timestamp = HAL_GetTick();		// Timestamp when data is taken from memory to memory (not from BMI088 to memory!)
 800136c:	f003 f864 	bl	8004438 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	605a      	str	r2, [r3, #4]
	/* Here a sign and axis correction is applied.
	 * In the rest of the code I will use gyr and acc that are the shared variables
	 * elaborated by the algorithms while instead, in imu->___[__] there are pure values
	 * taken from the memory of the sensor BMI088
	 */
	pkt->gyr[0] = -imu->gyr_rps[1] + imu->gyr_bias[1];			// + 0.0051;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	ee17 2a90 	vmov	r2, s15
 800138c:	615a      	str	r2, [r3, #20]
	pkt->gyr[1] = imu->gyr_rps[0] - imu->gyr_bias[0];			// + 0.0025;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	ee17 2a90 	vmov	r2, s15
 80013a4:	619a      	str	r2, [r3, #24]
	pkt->gyr[2] = imu->gyr_rps[2] - imu->gyr_bias[2];			// + 0.0047;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	ee17 2a90 	vmov	r2, s15
 80013bc:	61da      	str	r2, [r3, #28]
	pkt->acc[0] = -imu->acc_mps2[1];
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80013c4:	eef1 7a67 	vneg.f32	s15, s15
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	ee17 2a90 	vmov	r2, s15
 80013ce:	621a      	str	r2, [r3, #32]
	pkt->acc[1] = imu->acc_mps2[0];
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24
	pkt->acc[2] = imu->acc_mps2[2];
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	460b      	mov	r3, r1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	753b      	strb	r3, [r7, #20]
 8001400:	2300      	movs	r3, #0
 8001402:	757b      	strb	r3, [r7, #21]
 8001404:	2300      	movs	r3, #0
 8001406:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6858      	ldr	r0, [r3, #4]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	899b      	ldrh	r3, [r3, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	f003 fef0 	bl	80051f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	f107 0210 	add.w	r2, r7, #16
 8001420:	f107 0114 	add.w	r1, r7, #20
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2303      	movs	r3, #3
 800142c:	f005 ffe5 	bl	80073fa <HAL_SPI_TransmitReceive>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6858      	ldr	r0, [r3, #4]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	899b      	ldrh	r3, [r3, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	4619      	mov	r1, r3
 800144a:	f003 fed5 	bl	80051f8 <HAL_GPIO_WritePin>

	if (status == 1) {
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001454:	7cba      	ldrb	r2, [r7, #18]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800145a:	7dfb      	ldrb	r3, [r7, #23]

}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af02      	add	r7, sp, #8
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	460b      	mov	r3, r1
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001478:	b2db      	uxtb	r3, r3
 800147a:	753b      	strb	r3, [r7, #20]
 800147c:	2300      	movs	r3, #0
 800147e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	89db      	ldrh	r3, [r3, #14]
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	f003 feb4 	bl	80051f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f107 0210 	add.w	r2, r7, #16
 8001498:	f107 0114 	add.w	r1, r7, #20
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2302      	movs	r3, #2
 80014a4:	f005 ffa9 	bl	80073fa <HAL_SPI_TransmitReceive>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf0c      	ite	eq
 80014ae:	2301      	moveq	r3, #1
 80014b0:	2300      	movne	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6898      	ldr	r0, [r3, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	89db      	ldrh	r3, [r3, #14]
 80014be:	2201      	movs	r2, #1
 80014c0:	4619      	mov	r1, r3
 80014c2:	f003 fe99 	bl	80051f8 <HAL_GPIO_WritePin>

	if (status == 1) {
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80014cc:	7c7a      	ldrb	r2, [r7, #17]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80014d2:	7dfb      	ldrb	r3, [r7, #23]

}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	4613      	mov	r3, r2
 80014ea:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	733b      	strb	r3, [r7, #12]
 80014f0:	78bb      	ldrb	r3, [r7, #2]
 80014f2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6858      	ldr	r0, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	899b      	ldrh	r3, [r3, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	f003 fe7a 	bl	80051f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f107 010c 	add.w	r1, r7, #12
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	2202      	movs	r2, #2
 8001512:	f005 fe2e 	bl	8007172 <HAL_SPI_Transmit>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001524:	bf00      	nop
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f006 fb26 	bl	8007b7c <HAL_SPI_GetState>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d1f7      	bne.n	8001526 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6858      	ldr	r0, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	899b      	ldrh	r3, [r3, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	f003 fe59 	bl	80051f8 <HAL_GPIO_WritePin>

	return status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]

}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
 800155c:	4613      	mov	r3, r2
 800155e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	78bb      	ldrb	r3, [r7, #2]
 8001566:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	89db      	ldrh	r3, [r3, #14]
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	f003 fe40 	bl	80051f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	2202      	movs	r2, #2
 8001586:	f005 fdf4 	bl	8007172 <HAL_SPI_Transmit>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001598:	bf00      	nop
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 faec 	bl	8007b7c <HAL_SPI_GetState>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d1f7      	bne.n	800159a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6898      	ldr	r0, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	89db      	ldrh	r3, [r3, #14]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4619      	mov	r1, r3
 80015b6:	f003 fe1f 	bl	80051f8 <HAL_GPIO_WritePin>

	return status;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]

}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

	if (imu->readingAcc)  // To not have double calls
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7c1b      	ldrb	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <BMI088_ReadAccelerometerDMA+0x14>
		return 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e023      	b.n	8001620 <BMI088_ReadAccelerometerDMA+0x5c>

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6858      	ldr	r0, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	899b      	ldrh	r3, [r3, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	f003 fe08 	bl	80051f8 <HAL_GPIO_WritePin>

	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f103 0112 	add.w	r1, r3, #18
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80015f8:	2308      	movs	r3, #8
 80015fa:	f006 f8a7 	bl	800774c <HAL_SPI_TransmitReceive_DMA>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d104      	bne.n	800160e <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	741a      	strb	r2, [r3, #16]
		return 1;
 800160a:	2301      	movs	r3, #1
 800160c:	e008      	b.n	8001620 <BMI088_ReadAccelerometerDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6858      	ldr	r0, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	899b      	ldrh	r3, [r3, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	f003 fded 	bl	80051f8 <HAL_GPIO_WritePin>
		return 0;
 800161e:	2300      	movs	r3, #0

	}

}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6858      	ldr	r0, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	899b      	ldrh	r3, [r3, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	4619      	mov	r1, r3
 800163c:	f003 fddc 	bl	80051f8 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800164c:	b2db      	uxtb	r3, r3
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001658:	b2db      	uxtb	r3, r3
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001666:	b2db      	uxtb	r3, r3
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001680:	b2db      	uxtb	r3, r3
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX * 2;		// *2 was added by Cristiano.
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800169a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY * 2;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80016ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ * 2;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80016da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

	if (imu->readingGyr)  // To not have double calls
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7c5b      	ldrb	r3, [r3, #17]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <BMI088_ReadGyroscopeDMA+0x14>
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e023      	b.n	8001758 <BMI088_ReadGyroscopeDMA+0x5c>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6898      	ldr	r0, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	89db      	ldrh	r3, [r3, #14]
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	f003 fd6c 	bl	80051f8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f103 011a 	add.w	r1, r3, #26
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001730:	2307      	movs	r3, #7
 8001732:	f006 f80b 	bl	800774c <HAL_SPI_TransmitReceive_DMA>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d104      	bne.n	8001746 <BMI088_ReadGyroscopeDMA+0x4a>

		imu->readingGyr = 1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	745a      	strb	r2, [r3, #17]
		return 1;
 8001742:	2301      	movs	r3, #1
 8001744:	e008      	b.n	8001758 <BMI088_ReadGyroscopeDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6898      	ldr	r0, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	89db      	ldrh	r3, [r3, #14]
 800174e:	2201      	movs	r2, #1
 8001750:	4619      	mov	r1, r3
 8001752:	f003 fd51 	bl	80051f8 <HAL_GPIO_WritePin>
		return 0;
 8001756:	2300      	movs	r3, #0

	}

}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6898      	ldr	r0, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	89db      	ldrh	r3, [r3, #14]
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	f003 fd40 	bl	80051f8 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001784:	b2db      	uxtb	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001790:	b2db      	uxtb	r3, r3
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80017ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800180a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <QuaternionToEuler>:
    NormalizeQuaternion(q_out);
}


// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b08c      	sub	sp, #48	@ 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	eeb0 6a40 	vmov.f32	s12, s0
 8001832:	eef0 6a60 	vmov.f32	s13, s1
 8001836:	eeb0 7a41 	vmov.f32	s14, s2
 800183a:	eef0 7a61 	vmov.f32	s15, s3
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	ed87 6a02 	vstr	s12, [r7, #8]
 8001844:	edc7 6a03 	vstr	s13, [r7, #12]
 8001848:	ed87 7a04 	vstr	s14, [r7, #16]
 800184c:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 8001850:	ed97 7a02 	vldr	s14, [r7, #8]
 8001854:	edd7 7a03 	vldr	s15, [r7, #12]
 8001858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001860:	edd7 7a05 	vldr	s15, [r7, #20]
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001870:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 8001874:	ed97 7a03 	vldr	s14, [r7, #12]
 8001878:	edd7 7a03 	vldr	s15, [r7, #12]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	edd7 6a04 	vldr	s13, [r7, #16]
 8001884:	edd7 7a04 	vldr	s15, [r7, #16]
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001890:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 80018a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	4604      	mov	r4, r0
 80018a8:	460d      	mov	r5, r1
 80018aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018ac:	f7fe fe4c 	bl	8000548 <__aeabi_f2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	ec43 2b11 	vmov	d1, r2, r3
 80018b8:	ec45 4b10 	vmov	d0, r4, r5
 80018bc:	f00f fa8c 	bl	8010dd8 <atan2>
 80018c0:	ec51 0b10 	vmov	r0, r1, d0
 80018c4:	a356      	add	r3, pc, #344	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f967 	bl	8000ba8 <__aeabi_d2f>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 80018e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80018e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ec:	edd7 6a05 	vldr	s13, [r7, #20]
 80018f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001900:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 8001904:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001908:	eef0 7ae7 	vabs.f32	s15, s15
 800190c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	db13      	blt.n	8001942 <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 800191a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800191c:	f7fe fe14 	bl	8000548 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	ec43 2b11 	vmov	d1, r2, r3
 8001928:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001a18 <QuaternionToEuler+0x1f0>
 800192c:	f00d f9d1 	bl	800ecd2 <copysign>
 8001930:	ec51 0b10 	vmov	r0, r1, d0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	1d1c      	adds	r4, r3, #4
 8001938:	f7ff f936 	bl	8000ba8 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	6023      	str	r3, [r4, #0]
 8001940:	e019      	b.n	8001976 <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 8001942:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001944:	f7fe fe00 	bl	8000548 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	ec43 2b10 	vmov	d0, r2, r3
 8001950:	f00f fa0e 	bl	8010d70 <asin>
 8001954:	ec51 0b10 	vmov	r0, r1, d0
 8001958:	a331      	add	r3, pc, #196	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe4b 	bl	80005f8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	1d1c      	adds	r4, r3, #4
 800196e:	f7ff f91b 	bl	8000ba8 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 8001976:	ed97 7a02 	vldr	s14, [r7, #8]
 800197a:	edd7 7a05 	vldr	s15, [r7, #20]
 800197e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001982:	edd7 6a03 	vldr	s13, [r7, #12]
 8001986:	edd7 7a04 	vldr	s15, [r7, #16]
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001996:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 800199a:	ed97 7a04 	vldr	s14, [r7, #16]
 800199e:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80019aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 80019c6:	6a38      	ldr	r0, [r7, #32]
 80019c8:	f7fe fdbe 	bl	8000548 <__aeabi_f2d>
 80019cc:	4604      	mov	r4, r0
 80019ce:	460d      	mov	r5, r1
 80019d0:	69f8      	ldr	r0, [r7, #28]
 80019d2:	f7fe fdb9 	bl	8000548 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ec43 2b11 	vmov	d1, r2, r3
 80019de:	ec45 4b10 	vmov	d0, r4, r5
 80019e2:	f00f f9f9 	bl	8010dd8 <atan2>
 80019e6:	ec51 0b10 	vmov	r0, r1, d0
 80019ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe02 	bl	80005f8 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0408 	add.w	r4, r3, #8
 8001a02:	f7ff f8d1 	bl	8000ba8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	@ 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40568000 	.word	0x40568000
 8001a20:	20000000 	.word	0x20000000
 8001a24:	404ca5dc 	.word	0x404ca5dc

08001a28 <SetQuaternionFromEuler>:


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a34:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a38:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 8001a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a40:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a48:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 8001a4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a50:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a58:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 8001a5c:	edd7 7a00 	vldr	s15, [r7]
 8001a60:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 8001a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f00f f9ec 	bl	8010e58 <cosf>
 8001a80:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 8001a84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	f00f fa2c 	bl	8010ef0 <sinf>
 8001a98:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 8001a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	f00f f9d4 	bl	8010e58 <cosf>
 8001ab0:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 8001ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f00f fa14 	bl	8010ef0 <sinf>
 8001ac8:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 8001acc:	edd7 7a00 	vldr	s15, [r7]
 8001ad0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f00f f9bc 	bl	8010e58 <cosf>
 8001ae0:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 8001ae4:	edd7 7a00 	vldr	s15, [r7]
 8001ae8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af0:	eeb0 0a67 	vmov.f32	s0, s15
 8001af4:	f00f f9fc 	bl	8010ef0 <sinf>
 8001af8:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 8001afc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 8001b2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001b46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 8001b60:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b74:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 8001b92:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b96:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001baa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	3c8efa39 	.word	0x3c8efa39

08001bd0 <Filter_Init>:
/// ######################################################################################################
/// ##### FILTER SECTION #################################################################################
/// ######################################################################################################

void Filter_Init(LPF_FILTER *filt, float f_LP_gyr, float f_LP_acc, float f_HP_gyr, float f_HP_acc, float f_LP_angles, float dt)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	61f8      	str	r0, [r7, #28]
 8001bd8:	ed87 0a06 	vstr	s0, [r7, #24]
 8001bdc:	edc7 0a05 	vstr	s1, [r7, #20]
 8001be0:	ed87 1a04 	vstr	s2, [r7, #16]
 8001be4:	edc7 1a03 	vstr	s3, [r7, #12]
 8001be8:	ed87 2a02 	vstr	s4, [r7, #8]
 8001bec:	edc7 2a01 	vstr	s5, [r7, #4]
	LPF_Init(filt, f_LP_gyr, f_LP_acc, f_LP_angles, dt);
 8001bf0:	edd7 1a01 	vldr	s3, [r7, #4]
 8001bf4:	ed97 1a02 	vldr	s2, [r7, #8]
 8001bf8:	edd7 0a05 	vldr	s1, [r7, #20]
 8001bfc:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c00:	69f8      	ldr	r0, [r7, #28]
 8001c02:	f000 f968 	bl	8001ed6 <LPF_Init>
	HPF_Init(filt, f_HP_gyr, f_HP_acc, dt);
 8001c06:	ed97 1a01 	vldr	s2, [r7, #4]
 8001c0a:	edd7 0a03 	vldr	s1, [r7, #12]
 8001c0e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c12:	69f8      	ldr	r0, [r7, #28]
 8001c14:	f000 fa65 	bl	80020e2 <HPF_Init>

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c1c:	e038      	b.n	8001c90 <Filter_Init+0xc0>
	{
		filt->filt_gyr_x[i] = 0.0f;					// filt_gyr_x[0] -> past filtered sample   //	filt_gyr_x[1] -> curr filtered sample
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c22:	3304      	adds	r3, #4
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_y[i] = 0.0f;					// filt_gyr_x[0] ==> y(n)
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	3306      	adds	r3, #6
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_z[i] = 0.0f;					// filt_gyr_x[1] ==> y(n-1)
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	3308      	adds	r3, #8
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
		filt->filt_acc_x[i] = 0.0f;
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c58:	330a      	adds	r3, #10
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
		filt->filt_acc_y[i] = 0.0f;
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	330c      	adds	r3, #12
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
		filt->filt_acc_z[i] = 0.0f;
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7c:	330e      	adds	r3, #14
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3304      	adds	r3, #4
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	ddc3      	ble.n	8001c1e <Filter_Init+0x4e>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c9a:	e038      	b.n	8001d0e <Filter_Init+0x13e>
	{
		filt->not_filt_gyr_x[i] = 0.0f;					// not_filt_gyr_x[0] -> past not filtered sample   //	not_filt_gyr_x[1] -> curr not filtered sample
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	3310      	adds	r3, #16
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_y[i] = 0.0f;					// not_filt_gyr_x[0] ==> x(n)
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb2:	3312      	adds	r3, #18
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_z[i] = 0.0f;					// not_filt_gyr_x[1] ==> x(n-1)
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_x[i] = 0.0f;
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd6:	3316      	adds	r3, #22
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_y[i] = 0.0f;
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce8:	3318      	adds	r3, #24
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_z[i] = 0.0f;
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfa:	331a      	adds	r3, #26
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	ddc3      	ble.n	8001c9c <Filter_Init+0xcc>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d18:	e01d      	b.n	8001d56 <Filter_Init+0x186>
	{
		filt->filt_ang_x[i] = 0.0f;
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	331c      	adds	r3, #28
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
		filt->filt_ang_y[i] = 0.0f;
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	331e      	adds	r3, #30
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
		filt->filt_ang_z[i] = 0.0f;
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	3320      	adds	r3, #32
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3304      	adds	r3, #4
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	3301      	adds	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	ddde      	ble.n	8001d1a <Filter_Init+0x14a>
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	@ 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <LPF_CalculateAlpha>:
/// ##### LOW PASS FILTER for GYRO&ACC SECTION ###########################################################
/// ######################################################################################################

/// Alpha calculation for LPF filter in general --> (GYR&ACC and ANGLES)
float LPF_CalculateAlpha(float f_cut, float dt)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d72:	edc7 0a00 	vstr	s1, [r7]
	float tau = 1.0f / (2.0f * M_PI * f_cut);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe fbe6 	bl	8000548 <__aeabi_f2d>
 8001d7c:	a313      	add	r3, pc, #76	@ (adr r3, 8001dcc <LPF_CalculateAlpha+0x64>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fc39 	bl	80005f8 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <LPF_CalculateAlpha+0x60>)
 8001d90:	f7fe fd5c 	bl	800084c <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe ff04 	bl	8000ba8 <__aeabi_d2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
	return dt / (tau + dt);
 8001da4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da8:	edd7 7a00 	vldr	s15, [r7]
 8001dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db0:	ed97 7a00 	vldr	s14, [r7]
 8001db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001db8:	eef0 7a66 	vmov.f32	s15, s13
}
 8001dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	3ff00000 	.word	0x3ff00000
 8001dcc:	54442d18 	.word	0x54442d18
 8001dd0:	401921fb 	.word	0x401921fb

08001dd4 <LPF_Update_Single>:

/// ------ LOW PF ILTER, 1° ORDER ------------------------------------------------------------------------------------
float LPF_Update_Single(LPF_FILTER *filt, float old_data, float data, float alpha)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001de0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001de4:	ed87 1a00 	vstr	s2, [r7]
	 return ( (alpha * data) + ((1-alpha) * old_data) );
 8001de8:	ed97 7a00 	vldr	s14, [r7]
 8001dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001df8:	edd7 7a00 	vldr	s15, [r7]
 8001dfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LPF_SetAlpha>:

/// ------ LPF set over boundaries coefficients ----------------------------------------------------------------------
void LPF_SetAlpha(LPF_FILTER *filt, float alpha_gyr, float alpha_acc, float coeff_filt_angl)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e26:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e2a:	ed87 1a00 	vstr	s2, [r7]
	// Alpha gyr COEFF
	if(alpha_gyr > 1.0f)
 8001e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	dd03      	ble.n	8001e48 <LPF_SetAlpha+0x2e>
		alpha_gyr = 1.0f;
 8001e40:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	e009      	b.n	8001e5c <LPF_SetAlpha+0x42>
	else if(alpha_gyr < 0.0f)
 8001e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	d502      	bpl.n	8001e5c <LPF_SetAlpha+0x42>
		alpha_gyr = 0.0f;
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
	// Alpha_acc COEFF
	if(alpha_acc > 1.0f)
 8001e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	dd03      	ble.n	8001e76 <LPF_SetAlpha+0x5c>
		alpha_acc = 1.0f;
 8001e6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	e009      	b.n	8001e8a <LPF_SetAlpha+0x70>
	else if(alpha_acc < 0.0f)
 8001e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d502      	bpl.n	8001e8a <LPF_SetAlpha+0x70>
		alpha_acc = 0.0f;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
	// coeff_filt_angl COEFF
	if(coeff_filt_angl > 1.0f)
 8001e8a:	edd7 7a00 	vldr	s15, [r7]
 8001e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	dd03      	ble.n	8001ea4 <LPF_SetAlpha+0x8a>
		coeff_filt_angl = 1.0f;
 8001e9c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	e009      	b.n	8001eb8 <LPF_SetAlpha+0x9e>
	else if(coeff_filt_angl < 0)
 8001ea4:	edd7 7a00 	vldr	s15, [r7]
 8001ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d502      	bpl.n	8001eb8 <LPF_SetAlpha+0x9e>
		coeff_filt_angl = 0.0f;
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	603b      	str	r3, [r7, #0]

	filt->alpha_gyr = alpha_gyr;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	601a      	str	r2, [r3, #0]
	filt->alpha_acc = alpha_acc;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	605a      	str	r2, [r3, #4]
	filt->coeff_filt_ang = coeff_filt_angl;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	611a      	str	r2, [r3, #16]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LPF_Init>:

void LPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float f_cut_angles, float dt)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b08a      	sub	sp, #40	@ 0x28
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6178      	str	r0, [r7, #20]
 8001ede:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ee2:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ee6:	ed87 1a02 	vstr	s2, [r7, #8]
 8001eea:	edc7 1a01 	vstr	s3, [r7, #4]
	// aplha for LPF settings
	float alpha_gyr = LPF_CalculateAlpha(f_cut_gyr, dt);
 8001eee:	edd7 0a01 	vldr	s1, [r7, #4]
 8001ef2:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ef6:	f7ff ff37 	bl	8001d68 <LPF_CalculateAlpha>
 8001efa:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float alpha_acc = LPF_CalculateAlpha(f_cut_acc, dt);
 8001efe:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f02:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f06:	f7ff ff2f 	bl	8001d68 <LPF_CalculateAlpha>
 8001f0a:	ed87 0a08 	vstr	s0, [r7, #32]
	float coeff_filt_angl = LPF_CalculateAlpha(f_cut_angles, dt);
 8001f0e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f12:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f16:	f7ff ff27 	bl	8001d68 <LPF_CalculateAlpha>
 8001f1a:	ed87 0a07 	vstr	s0, [r7, #28]
	LPF_SetAlpha(filt, alpha_gyr, alpha_acc, f_cut_angles);
 8001f1e:	ed97 1a02 	vldr	s2, [r7, #8]
 8001f22:	edd7 0a08 	vldr	s1, [r7, #32]
 8001f26:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff75 	bl	8001e1a <LPF_SetAlpha>

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <LPF_GyrAcc_Update_All>:


LPF_FILTER LPF_GyrAcc_Update_All(LPF_FILTER *filt, float *gyr, float *acc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
	/* I compute the LPF filter */
	filt->filt_gyr_x[0] = LPF_Update_Single(filt, filt->filt_gyr_x[1], gyr[0], filt->alpha_gyr);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	ed93 7a00 	vldr	s14, [r3]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	edd3 6a00 	vldr	s13, [r3]
 8001f58:	eeb0 1a66 	vmov.f32	s2, s13
 8001f5c:	eef0 0a47 	vmov.f32	s1, s14
 8001f60:	eeb0 0a67 	vmov.f32	s0, s15
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	f7ff ff35 	bl	8001dd4 <LPF_Update_Single>
 8001f6a:	eef0 7a40 	vmov.f32	s15, s0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	edc3 7a05 	vstr	s15, [r3, #20]
	filt->filt_gyr_y[0] = LPF_Update_Single(filt, filt->filt_gyr_y[1], gyr[1], filt->alpha_gyr);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	edd3 6a00 	vldr	s13, [r3]
 8001f88:	eeb0 1a66 	vmov.f32	s2, s13
 8001f8c:	eef0 0a47 	vmov.f32	s1, s14
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f7ff ff1d 	bl	8001dd4 <LPF_Update_Single>
 8001f9a:	eef0 7a40 	vmov.f32	s15, s0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->filt_gyr_z[0] = LPF_Update_Single(filt, filt->filt_gyr_z[1], gyr[2], filt->alpha_gyr);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3308      	adds	r3, #8
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	edd3 6a00 	vldr	s13, [r3]
 8001fb8:	eeb0 1a66 	vmov.f32	s2, s13
 8001fbc:	eef0 0a47 	vmov.f32	s1, s14
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	68b8      	ldr	r0, [r7, #8]
 8001fc6:	f7ff ff05 	bl	8001dd4 <LPF_Update_Single>
 8001fca:	eef0 7a40 	vmov.f32	s15, s0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	filt->filt_acc_x[0] = LPF_Update_Single(filt, filt->filt_acc_x[1], acc[0], filt->alpha_acc);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	ed93 7a00 	vldr	s14, [r3]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fe6:	eeb0 1a66 	vmov.f32	s2, s13
 8001fea:	eef0 0a47 	vmov.f32	s1, s14
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f7ff feee 	bl	8001dd4 <LPF_Update_Single>
 8001ff8:	eef0 7a40 	vmov.f32	s15, s0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	filt->filt_acc_y[0] = LPF_Update_Single(filt, filt->filt_acc_y[1], acc[1], filt->alpha_acc);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3304      	adds	r3, #4
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	edd3 6a01 	vldr	s13, [r3, #4]
 8002016:	eeb0 1a66 	vmov.f32	s2, s13
 800201a:	eef0 0a47 	vmov.f32	s1, s14
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	f7ff fed6 	bl	8001dd4 <LPF_Update_Single>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	filt->filt_acc_z[0] = LPF_Update_Single(filt, filt->filt_acc_z[1], acc[2], filt->alpha_acc);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3308      	adds	r3, #8
 800203c:	ed93 7a00 	vldr	s14, [r3]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	edd3 6a01 	vldr	s13, [r3, #4]
 8002046:	eeb0 1a66 	vmov.f32	s2, s13
 800204a:	eef0 0a47 	vmov.f32	s1, s14
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	68b8      	ldr	r0, [r7, #8]
 8002054:	f7ff febe 	bl	8001dd4 <LPF_Update_Single>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	/* the current sample will become the next old one */
	filt->filt_gyr_x[1] = filt->filt_gyr_x[0];
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	619a      	str	r2, [r3, #24]
	filt->filt_gyr_y[1] = filt->filt_gyr_y[0];
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	621a      	str	r2, [r3, #32]
	filt->filt_gyr_z[1] = filt->filt_gyr_z[0];
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28
	filt->filt_acc_x[1] = filt->filt_acc_x[0];
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
	filt->filt_acc_y[1] = filt->filt_acc_y[0];
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
	filt->filt_acc_z[1] = filt->filt_acc_z[0];
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40

	/* I update gyro and acc global variables */
	gyr[0] = filt->filt_gyr_x[0];
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
	gyr[1] = filt->filt_gyr_y[0];
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	69d2      	ldr	r2, [r2, #28]
 80020a2:	601a      	str	r2, [r3, #0]
	gyr[2] = filt->filt_gyr_z[0];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3308      	adds	r3, #8
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ac:	601a      	str	r2, [r3, #0]
	acc[0] = filt->filt_acc_x[0];
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	601a      	str	r2, [r3, #0]
	acc[1] = filt->filt_acc_y[0];
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3304      	adds	r3, #4
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020be:	601a      	str	r2, [r3, #0]
	acc[2] = filt->filt_acc_z[0];
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	3308      	adds	r3, #8
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020c8:	601a      	str	r2, [r3, #0]

	return *filt;
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	238c      	movs	r3, #140	@ 0x8c
 80020d4:	461a      	mov	r2, r3
 80020d6:	f00c fdee 	bl	800ecb6 <memcpy>
}
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HPF_Init>:
/// ##### HIGH PASS FILTER SECTION #######################################################################
/// ######################################################################################################


void HPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float dt)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	ed87 0a02 	vstr	s0, [r7, #8]
 80020ee:	edc7 0a01 	vstr	s1, [r7, #4]
 80020f2:	ed87 1a00 	vstr	s2, [r7]
	// beta for HPF settings
	float beta_gyr = HPF_CalculateBeta(f_cut_gyr, dt);
 80020f6:	edd7 0a00 	vldr	s1, [r7]
 80020fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80020fe:	f000 f815 	bl	800212c <HPF_CalculateBeta>
 8002102:	ed87 0a05 	vstr	s0, [r7, #20]
	float beta_acc = HPF_CalculateBeta(f_cut_acc, dt);
 8002106:	edd7 0a00 	vldr	s1, [r7]
 800210a:	ed97 0a01 	vldr	s0, [r7, #4]
 800210e:	f000 f80d 	bl	800212c <HPF_CalculateBeta>
 8002112:	ed87 0a04 	vstr	s0, [r7, #16]
	HPF_SetBeta(filt, beta_gyr, beta_acc);
 8002116:	edd7 0a04 	vldr	s1, [r7, #16]
 800211a:	ed97 0a05 	vldr	s0, [r7, #20]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f826 	bl	8002170 <HPF_SetBeta>

}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HPF_CalculateBeta>:


float HPF_CalculateBeta(float f_cut, float dt)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	ed87 0a01 	vstr	s0, [r7, #4]
 8002136:	edc7 0a00 	vstr	s1, [r7]
	return 1.0f - expf(-2.0f * (float)M_PI * f_cut * dt);
 800213a:	edd7 7a01 	vldr	s15, [r7, #4]
 800213e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800216c <HPF_CalculateBeta+0x40>
 8002142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002146:	edd7 7a00 	vldr	s15, [r7]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	f00e fe4b 	bl	8010dec <expf>
 8002156:	eef0 7a40 	vmov.f32	s15, s0
 800215a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	c0c90fdb 	.word	0xc0c90fdb

08002170 <HPF_SetBeta>:


void HPF_SetBeta(LPF_FILTER *filt, float beta_gyr, float beta_acc)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	ed87 0a02 	vstr	s0, [r7, #8]
 800217c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(beta_gyr > 1.0f)
 8002180:	edd7 7a02 	vldr	s15, [r7, #8]
 8002184:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	dd03      	ble.n	800219a <HPF_SetBeta+0x2a>
	{
		beta_gyr = 1.0f;
 8002192:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	e009      	b.n	80021ae <HPF_SetBeta+0x3e>
	}
	else if(beta_gyr < 0.0f)
 800219a:	edd7 7a02 	vldr	s15, [r7, #8]
 800219e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	d502      	bpl.n	80021ae <HPF_SetBeta+0x3e>
	{
		beta_gyr = 0.0f;
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
	}

	if(beta_acc > 1.0f)
 80021ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	dd03      	ble.n	80021c8 <HPF_SetBeta+0x58>
	{
		beta_acc = 1.0f;
 80021c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	e009      	b.n	80021dc <HPF_SetBeta+0x6c>
	}
	else if(beta_acc < 0.0f)
 80021c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	d502      	bpl.n	80021dc <HPF_SetBeta+0x6c>
	{
		beta_acc = 0.0f;
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
	}

	filt->beta_gyr = beta_gyr;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	609a      	str	r2, [r3, #8]
	filt->beta_acc = beta_acc;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sampleFreq) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b09e      	sub	sp, #120	@ 0x78
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	ed87 0a07 	vstr	s0, [r7, #28]
 80021fe:	edc7 0a06 	vstr	s1, [r7, #24]
 8002202:	ed87 1a05 	vstr	s2, [r7, #20]
 8002206:	edc7 1a04 	vstr	s3, [r7, #16]
 800220a:	ed87 2a03 	vstr	s4, [r7, #12]
 800220e:	edc7 2a02 	vstr	s5, [r7, #8]
 8002212:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002216:	4bec      	ldr	r3, [pc, #944]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eeb1 7a67 	vneg.f32	s14, s15
 8002220:	edd7 7a07 	vldr	s15, [r7, #28]
 8002224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002228:	4be8      	ldr	r3, [pc, #928]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800222a:	edd3 6a00 	vldr	s13, [r3]
 800222e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	ee37 7a67 	vsub.f32	s14, s14, s15
 800223a:	4be5      	ldr	r3, [pc, #916]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800223c:	edd3 6a00 	vldr	s13, [r3]
 8002240:	edd7 7a05 	vldr	s15, [r7, #20]
 8002244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002254:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002258:	4bde      	ldr	r3, [pc, #888]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002266:	4bd9      	ldr	r3, [pc, #868]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 8002268:	edd3 6a00 	vldr	s13, [r3]
 800226c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002278:	4bd5      	ldr	r3, [pc, #852]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800227a:	edd3 6a00 	vldr	s13, [r3]
 800227e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002296:	4bcf      	ldr	r3, [pc, #828]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 8002298:	ed93 7a00 	vldr	s14, [r3]
 800229c:	edd7 7a06 	vldr	s15, [r7, #24]
 80022a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a4:	4bc8      	ldr	r3, [pc, #800]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80022a6:	edd3 6a00 	vldr	s13, [r3]
 80022aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b6:	4bc6      	ldr	r3, [pc, #792]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 80022b8:	edd3 6a00 	vldr	s13, [r3]
 80022bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80022d4:	4bbf      	ldr	r3, [pc, #764]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 80022d6:	ed93 7a00 	vldr	s14, [r3]
 80022da:	edd7 7a05 	vldr	s15, [r7, #20]
 80022de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e2:	4bb9      	ldr	r3, [pc, #740]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e4:	edd3 6a00 	vldr	s13, [r3]
 80022e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f4:	4bb5      	ldr	r3, [pc, #724]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80022f6:	edd3 6a00 	vldr	s13, [r3]
 80022fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80022fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800230a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002312:	edd7 7a04 	vldr	s15, [r7, #16]
 8002316:	eef5 7a40 	vcmp.f32	s15, #0.0
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d10e      	bne.n	800233e <MadgwickAHRSupdateIMU+0x14a>
 8002320:	edd7 7a03 	vldr	s15, [r7, #12]
 8002324:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	d107      	bne.n	800233e <MadgwickAHRSupdateIMU+0x14a>
 800232e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002332:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	f000 81e5 	beq.w	8002708 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800233e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002342:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002346:	edd7 7a03 	vldr	s15, [r7, #12]
 800234a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800234e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002352:	edd7 7a02 	vldr	s15, [r7, #8]
 8002356:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	eeb0 0a67 	vmov.f32	s0, s15
 8002362:	f000 fa7b 	bl	800285c <invSqrt>
 8002366:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 800236a:	ed97 7a04 	vldr	s14, [r7, #16]
 800236e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002376:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 800237a:	ed97 7a03 	vldr	s14, [r7, #12]
 800237e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;
 800238a:	ed97 7a02 	vldr	s14, [r7, #8]
 800238e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800239a:	4b8e      	ldr	r3, [pc, #568]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023a4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 80023a8:	4b87      	ldr	r3, [pc, #540]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023b2:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 80023b6:	4b85      	ldr	r3, [pc, #532]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023c0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 80023c4:	4b82      	ldr	r3, [pc, #520]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ce:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 80023d2:	4b80      	ldr	r3, [pc, #512]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 80023e4:	4b78      	ldr	r3, [pc, #480]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 80023f6:	4b75      	ldr	r3, [pc, #468]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002404:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 8002408:	4b6f      	ldr	r3, [pc, #444]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 800241a:	4b6c      	ldr	r3, [pc, #432]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002428:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 800242c:	4b69      	ldr	r3, [pc, #420]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	4b68      	ldr	r3, [pc, #416]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 8002440:	4b61      	ldr	r3, [pc, #388]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002442:	ed93 7a00 	vldr	s14, [r3]
 8002446:	4b60      	ldr	r3, [pc, #384]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 8002454:	4b5d      	ldr	r3, [pc, #372]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 8002456:	ed93 7a00 	vldr	s14, [r3]
 800245a:	4b5c      	ldr	r3, [pc, #368]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 8002468:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800246a:	ed93 7a00 	vldr	s14, [r3]
 800246e:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002478:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800247c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002480:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002488:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800248c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002498:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800249c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a8:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80024ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80024bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80024c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c8:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80024cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024d8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024dc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80024e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024e4:	4b38      	ldr	r3, [pc, #224]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80024f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002502:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800250e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800251e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252a:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800252e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800253e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002542:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002546:	ee27 7a87 	vmul.f32	s14, s15, s14
 800254a:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002554:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8002558:	edd7 7a04 	vldr	s15, [r7, #16]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002564:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002568:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800256c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002574:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002578:	edd7 7a03 	vldr	s15, [r7, #12]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002584:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002588:	ee37 7a67 	vsub.f32	s14, s14, s15
 800258c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002590:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80025a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ac:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80025b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80025c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025c4:	e008      	b.n	80025d8 <MadgwickAHRSupdateIMU+0x3e4>
 80025c6:	bf00      	nop
 80025c8:	20000324 	.word	0x20000324
 80025cc:	20000328 	.word	0x20000328
 80025d0:	2000032c 	.word	0x2000032c
 80025d4:	20000004 	.word	0x20000004
 80025d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80025dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025e0:	4b99      	ldr	r3, [pc, #612]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ea:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80025ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025fe:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002602:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002606:	4b90      	ldr	r3, [pc, #576]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002614:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002618:	edd7 7a03 	vldr	s15, [r7, #12]
 800261c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002624:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002628:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800262c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002630:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002634:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002640:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	edd7 7a08 	vldr	s15, [r7, #32]
 800264c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	f000 f900 	bl	800285c <invSqrt>
 800265c:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 8002660:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002664:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 8002670:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002674:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 8002680:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002684:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 8002690:	ed97 7a08 	vldr	s14, [r7, #32]
 8002694:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 80026a0:	4b6a      	ldr	r3, [pc, #424]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026a2:	ed93 7a00 	vldr	s14, [r3]
 80026a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80026b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 80026ba:	4b64      	ldr	r3, [pc, #400]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026bc:	ed93 7a00 	vldr	s14, [r3]
 80026c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80026c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 80026d4:	4b5d      	ldr	r3, [pc, #372]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026d6:	ed93 7a00 	vldr	s14, [r3]
 80026da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80026e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ea:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 80026ee:	4b57      	ldr	r3, [pc, #348]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80026f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fc:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800270c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002714:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800271c:	4b4c      	ldr	r3, [pc, #304]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 8002728:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800272c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002730:	edd7 7a01 	vldr	s15, [r7, #4]
 8002734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002738:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	4b42      	ldr	r3, [pc, #264]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 800274c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002750:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002754:	edd7 7a01 	vldr	s15, [r7, #4]
 8002758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002764:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002770:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002778:	edd7 7a01 	vldr	s15, [r7, #4]
 800277c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002780:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	4b2f      	ldr	r3, [pc, #188]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 8002794:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 800279a:	ed93 7a00 	vldr	s14, [r3]
 800279e:	4b2c      	ldr	r3, [pc, #176]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 80027aa:	edd3 6a00 	vldr	s13, [r3]
 80027ae:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027bc:	4b26      	ldr	r3, [pc, #152]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 80027be:	edd3 6a00 	vldr	s13, [r3]
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80027d2:	edd3 6a00 	vldr	s13, [r3]
 80027d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	f000 f838 	bl	800285c <invSqrt>
 80027ec:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 80027f0:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 80027f2:	ed93 7a00 	vldr	s14, [r3]
 80027f6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 8002800:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002814:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 800281a:	ed93 7a00 	vldr	s14, [r3]
 800281e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800283c:	edc3 7a00 	vstr	s15, [r3]
}
 8002840:	bf00      	nop
 8002842:	3778      	adds	r7, #120	@ 0x78
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000032c 	.word	0x2000032c
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004
 8002854:	20000324 	.word	0x20000324
 8002858:	20000328 	.word	0x20000328

0800285c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002866:	edd7 7a01 	vldr	s15, [r7, #4]
 800286a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800286e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002872:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	105a      	asrs	r2, r3, #1
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <invSqrt+0x74>)
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002894:	ed97 7a04 	vldr	s14, [r7, #16]
 8002898:	edd7 7a05 	vldr	s15, [r7, #20]
 800289c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80028ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	ee07 3a90 	vmov	s15, r3
}
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	5f3759df 	.word	0x5f3759df

080028d4 <SetPriorities>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++ PRIORITIES SETTINGS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void SetPriorities(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	 HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80028d8:	2005      	movs	r0, #5
 80028da:	f001 fead 	bl	8004638 <HAL_NVIC_SetPriorityGrouping>

	  // DMA: max priority
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	2038      	movs	r0, #56	@ 0x38
 80028e4:	f001 feb3 	bl	800464e <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 2);
 80028e8:	2202      	movs	r2, #2
 80028ea:	2100      	movs	r1, #0
 80028ec:	203b      	movs	r0, #59	@ 0x3b
 80028ee:	f001 feae 	bl	800464e <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 1);   // RX SPI2
 80028f2:	2201      	movs	r2, #1
 80028f4:	2100      	movs	r1, #0
 80028f6:	200e      	movs	r0, #14
 80028f8:	f001 fea9 	bl	800464e <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 3);   // TX SPI2
 80028fc:	2203      	movs	r2, #3
 80028fe:	2100      	movs	r1, #0
 8002900:	200f      	movs	r0, #15
 8002902:	f001 fea4 	bl	800464e <HAL_NVIC_SetPriority>

	  // USB CDC (OTG_FS) - high but under DMA
	  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 4);
 8002906:	2204      	movs	r2, #4
 8002908:	2100      	movs	r1, #0
 800290a:	2043      	movs	r0, #67	@ 0x43
 800290c:	f001 fe9f 	bl	800464e <HAL_NVIC_SetPriority>

	  // EXTI (GPIO sensors)
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2101      	movs	r1, #1
 8002914:	2008      	movs	r0, #8
 8002916:	f001 fe9a 	bl	800464e <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 800291a:	2201      	movs	r2, #1
 800291c:	2101      	movs	r1, #1
 800291e:	2009      	movs	r0, #9
 8002920:	f001 fe95 	bl	800464e <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 2);
 8002924:	2202      	movs	r2, #2
 8002926:	2101      	movs	r1, #1
 8002928:	200a      	movs	r0, #10
 800292a:	f001 fe90 	bl	800464e <HAL_NVIC_SetPriority>

	  // UART (commands and debug)
	  HAL_NVIC_SetPriority(USART1_IRQn, 1, 2);
 800292e:	2202      	movs	r2, #2
 8002930:	2101      	movs	r1, #1
 8002932:	2025      	movs	r0, #37	@ 0x25
 8002934:	f001 fe8b 	bl	800464e <HAL_NVIC_SetPriority>

	  // Timer - low priority
	  HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2102      	movs	r1, #2
 800293c:	201e      	movs	r0, #30
 800293e:	f001 fe86 	bl	800464e <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 1);  // If we use TIM2
 8002942:	2201      	movs	r2, #1
 8002944:	2102      	movs	r1, #2
 8002946:	201c      	movs	r0, #28
 8002948:	f001 fe81 	bl	800464e <HAL_NVIC_SetPriority>

	  // Enable
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800294c:	2038      	movs	r0, #56	@ 0x38
 800294e:	f001 fe9a 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002952:	203b      	movs	r0, #59	@ 0x3b
 8002954:	f001 fe97 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002958:	200e      	movs	r0, #14
 800295a:	f001 fe94 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800295e:	200f      	movs	r0, #15
 8002960:	f001 fe91 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002964:	2043      	movs	r0, #67	@ 0x43
 8002966:	f001 fe8e 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800296a:	2008      	movs	r0, #8
 800296c:	f001 fe8b 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002970:	2009      	movs	r0, #9
 8002972:	f001 fe88 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002976:	200a      	movs	r0, #10
 8002978:	f001 fe85 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800297c:	2025      	movs	r0, #37	@ 0x25
 800297e:	f001 fe82 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002982:	201e      	movs	r0, #30
 8002984:	f001 fe7f 	bl	8004686 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002988:	201c      	movs	r0, #28
 800298a:	f001 fe7c 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <Toggle>:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++ DEBUG FUNCTIONS ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// Function that toggles the led of the board to show if the device is working
void Toggle(uint32_t waitingTime)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= waitingTime)
 800299c:	f001 fd4c 	bl	8004438 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <Toggle+0x40>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d808      	bhi.n	80029c0 <Toggle+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80029ae:	2110      	movs	r1, #16
 80029b0:	4809      	ldr	r0, [pc, #36]	@ (80029d8 <Toggle+0x44>)
 80029b2:	f002 fc3a 	bl	800522a <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 80029b6:	f001 fd3f 	bl	8004438 <HAL_GetTick>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <Toggle+0x40>)
 80029be:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 80029c0:	f001 fd3a 	bl	8004438 <HAL_GetTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <Toggle+0x48>)
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000874 	.word	0x20000874
 80029d8:	40020400 	.word	0x40020400
 80029dc:	20000870 	.word	0x20000870

080029e0 <HAL_UART_RxCpltCallback>:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++ CALLBACK FUNCTIONS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// UART CALLBACK FUNCTION
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	@ (8002a54 <HAL_UART_RxCpltCallback+0x74>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12c      	bne.n	8002a4c <HAL_UART_RxCpltCallback+0x6c>
    {
        if (rx_byte == '\n' || rx_byte == '\r')
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b0a      	cmp	r3, #10
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_RxCpltCallback+0x22>
 80029fa:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b0d      	cmp	r3, #13
 8002a00:	d10c      	bne.n	8002a1c <HAL_UART_RxCpltCallback+0x3c>
        {
            rx_uart_buff[rx_index] = '\0';  // termina stringa
 8002a02:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]
            HandleReceivedString((char*)rx_uart_buff);
 8002a0e:	4814      	ldr	r0, [pc, #80]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a10:	f7fe fac0 	bl	8000f94 <HandleReceivedString>
            rx_index = 0;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]
        {
 8002a1a:	e012      	b.n	8002a42 <HAL_UART_RxCpltCallback+0x62>
        }
        else
        {
            if (rx_index < UART_RX_BUFFER_SIZE - 1)
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a22:	d80b      	bhi.n	8002a3c <HAL_UART_RxCpltCallback+0x5c>
            {
                rx_uart_buff[rx_index++] = rx_byte;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	b291      	uxth	r1, r2
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a2e:	8011      	strh	r1, [r2, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 8002a34:	7819      	ldrb	r1, [r3, #0]
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	e002      	b.n	8002a42 <HAL_UART_RxCpltCallback+0x62>
            }
            else
            {
                rx_index = 0;  // overflow protection
 8002a3c:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	801a      	strh	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);  // restart interrupt
 8002a42:	2201      	movs	r2, #1
 8002a44:	4904      	ldr	r1, [pc, #16]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 8002a46:	4807      	ldr	r0, [pc, #28]	@ (8002a64 <HAL_UART_RxCpltCallback+0x84>)
 8002a48:	f006 fb56 	bl	80090f8 <HAL_UART_Receive_IT>
    }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40011000 	.word	0x40011000
 8002a58:	200008b8 	.word	0x200008b8
 8002a5c:	200008ba 	.word	0x200008ba
 8002a60:	20000878 	.word	0x20000878
 8002a64:	20000680 	.word	0x20000680

08002a68 <HAL_GPIO_EXTI_Callback>:



/// DMA Start Reading
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)				/// DMA2
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d107      	bne.n	8002a88 <HAL_GPIO_EXTI_Callback+0x20>
	{
		// we check if the interrupt pin is the accelerometer one
		if (!imu.readingAcc)
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a7a:	7c1b      	ldrb	r3, [r3, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d114      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
			BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8002a80:	480c      	ldr	r0, [pc, #48]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a82:	f7fe fd9f 	bl	80015c4 <BMI088_ReadAccelerometerDMA>
	}
	else if (GPIO_Pin == MCP3564_IRQ_Pin) {	/// DMA1
		MCP3561_StartReadADCData_DMA(&hspi2);			// Start reading with DMA1
		//allDiffCh = MCP3561_ReadADCData(&hspi2, pkt.adc);	// It read the value from the sensor MCP3564R and it writes into the variable adc[4] the measurements
	}
}
 8002a86:	e010      	b.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
	else if(GPIO_Pin == INT_GYR_Pin)	/// DMA2
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d107      	bne.n	8002a9e <HAL_GPIO_EXTI_Callback+0x36>
	if (!imu.readingGyr)
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a90:	7c5b      	ldrb	r3, [r3, #17]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
		BMI088_ReadGyroscopeDMA(&imu);
 8002a96:	4807      	ldr	r0, [pc, #28]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a98:	f7fe fe30 	bl	80016fc <BMI088_ReadGyroscopeDMA>
}
 8002a9c:	e005      	b.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
	else if (GPIO_Pin == MCP3564_IRQ_Pin) {	/// DMA1
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
		MCP3561_StartReadADCData_DMA(&hspi2);			// Start reading with DMA1
 8002aa4:	4804      	ldr	r0, [pc, #16]	@ (8002ab8 <HAL_GPIO_EXTI_Callback+0x50>)
 8002aa6:	f000 ff2f 	bl	8003908 <MCP3561_StartReadADCData_DMA>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000728 	.word	0x20000728
 8002ab8:	20000388 	.word	0x20000388

08002abc <HAL_SPI_TxRxCpltCallback>:


/// DMA CALLBACK
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)	// SPI1 used for Acc and Gyro
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <HAL_SPI_TxRxCpltCallback+0x88>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10d      	bne.n	8002aea <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 8002ace:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <HAL_SPI_TxRxCpltCallback+0x8c>)
 8002ad0:	7c1b      	ldrb	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8002ad6:	481c      	ldr	r0, [pc, #112]	@ (8002b48 <HAL_SPI_TxRxCpltCallback+0x8c>)
 8002ad8:	f7fe fda6 	bl	8001628 <BMI088_ReadAccelerometerDMA_Complete>

		}

		if (imu.readingGyr)
 8002adc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <HAL_SPI_TxRxCpltCallback+0x8c>)
 8002ade:	7c5b      	ldrb	r3, [r3, #17]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8002ae4:	4818      	ldr	r0, [pc, #96]	@ (8002b48 <HAL_SPI_TxRxCpltCallback+0x8c>)
 8002ae6:	f7fe fe3b 	bl	8001760 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
	if (hspi->Instance == SPI2)	// SPI2 used for MCP3564R sensor
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a17      	ldr	r2, [pc, #92]	@ (8002b4c <HAL_SPI_TxRxCpltCallback+0x90>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d122      	bne.n	8002b3a <HAL_SPI_TxRxCpltCallback+0x7e>
	{
		Toggle(SAMPLE_TIME_MS_TOGGLE);
 8002af4:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_SPI_TxRxCpltCallback+0x94>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff4b 	bl	8002994 <Toggle>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002afe:	2201      	movs	r2, #1
 8002b00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b04:	4813      	ldr	r0, [pc, #76]	@ (8002b54 <HAL_SPI_TxRxCpltCallback+0x98>)
 8002b06:	f002 fb77 	bl	80051f8 <HAL_GPIO_WritePin>
		allDiffCh = MCP3561_ReadADCData_DMA(&hspi2, adc);	// It change the global variable adc[4] with the update value
 8002b0a:	4913      	ldr	r1, [pc, #76]	@ (8002b58 <HAL_SPI_TxRxCpltCallback+0x9c>)
 8002b0c:	4813      	ldr	r0, [pc, #76]	@ (8002b5c <HAL_SPI_TxRxCpltCallback+0xa0>)
 8002b0e:	f000 ff15 	bl	800393c <MCP3561_ReadADCData_DMA>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_SPI_TxRxCpltCallback+0xa4>)
 8002b18:	701a      	strb	r2, [r3, #0]
		pkt.adc[0] = adc[0];
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <HAL_SPI_TxRxCpltCallback+0x9c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a11      	ldr	r2, [pc, #68]	@ (8002b64 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8002b20:	62d3      	str	r3, [r2, #44]	@ 0x2c
		pkt.adc[1] = adc[1];
 8002b22:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <HAL_SPI_TxRxCpltCallback+0x9c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a0f      	ldr	r2, [pc, #60]	@ (8002b64 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
		pkt.adc[2] = adc[2];
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_SPI_TxRxCpltCallback+0x9c>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8002b30:	6353      	str	r3, [r2, #52]	@ 0x34
		pkt.adc[3] = adc[3];
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_SPI_TxRxCpltCallback+0x9c>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a0b      	ldr	r2, [pc, #44]	@ (8002b64 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8002b38:	6393      	str	r3, [r2, #56]	@ 0x38
	}
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40013000 	.word	0x40013000
 8002b48:	20000728 	.word	0x20000728
 8002b4c:	40003800 	.word	0x40003800
 8002b50:	20000008 	.word	0x20000008
 8002b54:	40020400 	.word	0x40020400
 8002b58:	200008bc 	.word	0x200008bc
 8002b5c:	20000388 	.word	0x20000388
 8002b60:	200008cc 	.word	0x200008cc
 8002b64:	20000830 	.word	0x20000830

08002b68 <HAL_TIM_PeriodElapsedCallback>:


/// TIMERS CALLBACK
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6c:	b0d9      	sub	sp, #356	@ 0x164
 8002b6e:	af1e      	add	r7, sp, #120	@ 0x78
 8002b70:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
	// Calculate angles with quaternions
    if(htim->Instance == TIM2)
 8002b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7e:	d160      	bne.n	8002c42 <HAL_TIM_PeriodElapsedCallback+0xda>
    {
    	timestamp_TIM2++;	// how many times TIM2 is called (not used yet)
 8002b80:	4b8e      	ldr	r3, [pc, #568]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	4a8d      	ldr	r2, [pc, #564]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002b88:	6013      	str	r3, [r2, #0]
        // Code to execute at constant sample rate
        Take_IMU_Measurements(&imu, &pkt);
 8002b8a:	498d      	ldr	r1, [pc, #564]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002b8c:	488d      	ldr	r0, [pc, #564]	@ (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002b8e:	f7fe fbe8 	bl	8001362 <Take_IMU_Measurements>

        /// Filtering Gyro and Acc measurements
        filt = LPF_GyrAcc_Update_All(&filt, pkt.gyr, pkt.acc);
 8002b92:	4c8d      	ldr	r4, [pc, #564]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002b94:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002b98:	4b8c      	ldr	r3, [pc, #560]	@ (8002dcc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b9a:	4a8d      	ldr	r2, [pc, #564]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002b9c:	498a      	ldr	r1, [pc, #552]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002b9e:	f7ff f9cb 	bl	8001f38 <LPF_GyrAcc_Update_All>
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ba8:	228c      	movs	r2, #140	@ 0x8c
 8002baa:	4619      	mov	r1, r3
 8002bac:	f00c f883 	bl	800ecb6 <memcpy>

		/// Algorithm application to find angles
        MadgwickAHRSupdateIMU(pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2], F_TIM2);
 8002bb0:	4b83      	ldr	r3, [pc, #524]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002bb2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bb6:	4b82      	ldr	r3, [pc, #520]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002bb8:	ed93 7a06 	vldr	s14, [r3, #24]
 8002bbc:	4b80      	ldr	r3, [pc, #512]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002bbe:	edd3 6a07 	vldr	s13, [r3, #28]
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002bc4:	ed93 6a08 	vldr	s12, [r3, #32]
 8002bc8:	4b7d      	ldr	r3, [pc, #500]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002bca:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 8002bce:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002bd0:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
 8002bd4:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002bd6:	edd3 4a00 	vldr	s9, [r3]
 8002bda:	eeb0 3a64 	vmov.f32	s6, s9
 8002bde:	eef0 2a45 	vmov.f32	s5, s10
 8002be2:	eeb0 2a65 	vmov.f32	s4, s11
 8002be6:	eef0 1a46 	vmov.f32	s3, s12
 8002bea:	eeb0 1a66 	vmov.f32	s2, s13
 8002bee:	eef0 0a47 	vmov.f32	s1, s14
 8002bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf6:	f7ff fafd 	bl	80021f4 <MadgwickAHRSupdateIMU>
        q.w = q0; q.x = q1; q.y = q2; q.z = q3;
 8002bfa:	4b77      	ldr	r3, [pc, #476]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a77      	ldr	r2, [pc, #476]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b77      	ldr	r3, [pc, #476]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a75      	ldr	r2, [pc, #468]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002c08:	6053      	str	r3, [r2, #4]
 8002c0a:	4b76      	ldr	r3, [pc, #472]	@ (8002de4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a73      	ldr	r2, [pc, #460]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002c10:	6093      	str	r3, [r2, #8]
 8002c12:	4b75      	ldr	r3, [pc, #468]	@ (8002de8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a71      	ldr	r2, [pc, #452]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002c18:	60d3      	str	r3, [r2, #12]
        QuaternionToEuler(q, pkt.ang);
 8002c1a:	4b70      	ldr	r3, [pc, #448]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002c1c:	ed93 6a00 	vldr	s12, [r3]
 8002c20:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c24:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c28:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c2c:	486f      	ldr	r0, [pc, #444]	@ (8002dec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002c2e:	eeb0 0a46 	vmov.f32	s0, s12
 8002c32:	eef0 0a66 	vmov.f32	s1, s13
 8002c36:	eeb0 1a47 	vmov.f32	s2, s14
 8002c3a:	eef0 1a67 	vmov.f32	s3, s15
 8002c3e:	f7fe fdf3 	bl	8001828 <QuaternionToEuler>
        /* module of the acceleration vector (not used right now) */
        //pkt.abs_acc = sqrt(pow(pkt.acc[0],2)+pow(pkt.acc[1],2) + pow(pkt.acc[2],2));
    }

    // Send data with CDC_Transfer_FS if enabled!!!
    if(htim->Instance == TIM3)
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a69      	ldr	r2, [pc, #420]	@ (8002df0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	f040 80a5 	bne.w	8002d9a <HAL_TIM_PeriodElapsedCallback+0x232>
	{
    	timestamp_TIM3++;	// how many times TIM3 is called (not used yet)
 8002c50:	4b68      	ldr	r3, [pc, #416]	@ (8002df4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	4a67      	ldr	r2, [pc, #412]	@ (8002df4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002c58:	6013      	str	r3, [r2, #0]

    	// Send every data using just one string and one TX
		static char txBuff[256];
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c5a:	4b67      	ldr	r3, [pc, #412]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
					measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c60:	4b57      	ldr	r3, [pc, #348]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002c62:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc6f 	bl	8000548 <__aeabi_f2d>
 8002c6a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
					measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c6e:	4b54      	ldr	r3, [pc, #336]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002c70:	68db      	ldr	r3, [r3, #12]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc68 	bl	8000548 <__aeabi_f2d>
 8002c78:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
					measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c7c:	4b50      	ldr	r3, [pc, #320]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fc61 	bl	8000548 <__aeabi_f2d>
 8002c86:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8002c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	64b9      	str	r1, [r7, #72]	@ 0x48
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002c90:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002c92:	695b      	ldr	r3, [r3, #20]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc57 	bl	8000548 <__aeabi_f2d>
 8002c9a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002c9e:	4b48      	ldr	r3, [pc, #288]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc50 	bl	8000548 <__aeabi_f2d>
 8002ca8:	e9c7 0108 	strd	r0, r1, [r7, #32]
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002cac:	4b44      	ldr	r3, [pc, #272]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002cae:	69db      	ldr	r3, [r3, #28]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc49 	bl	8000548 <__aeabi_f2d>
 8002cb6:	e9c7 0106 	strd	r0, r1, [r7, #24]
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002cba:	4b41      	ldr	r3, [pc, #260]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc42 	bl	8000548 <__aeabi_f2d>
 8002cc4:	e9c7 0104 	strd	r0, r1, [r7, #16]
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc3b 	bl	8000548 <__aeabi_f2d>
 8002cd2:	e9c7 0102 	strd	r0, r1, [r7, #8]
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fc34 	bl	8000548 <__aeabi_f2d>
 8002ce0:	e9c7 0100 	strd	r0, r1, [r7]
 8002ce4:	4b44      	ldr	r3, [pc, #272]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002ce6:	681e      	ldr	r6, [r3, #0]
					measureTick, pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002ce8:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fc2b 	bl	8000548 <__aeabi_f2d>
 8002cf2:	4682      	mov	sl, r0
 8002cf4:	468b      	mov	fp, r1
					measureTick, pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002cf6:	4b32      	ldr	r3, [pc, #200]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fc24 	bl	8000548 <__aeabi_f2d>
 8002d00:	4680      	mov	r8, r0
 8002d02:	4689      	mov	r9, r1
					measureTick, pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002d04:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fc1d 	bl	8000548 <__aeabi_f2d>
 8002d0e:	4604      	mov	r4, r0
 8002d10:	460d      	mov	r5, r1
					measureTick, pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002d12:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fc16 	bl	8000548 <__aeabi_f2d>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8002d24:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
 8002d28:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
 8002d2c:	e9cd ab16 	strd	sl, fp, [sp, #88]	@ 0x58
 8002d30:	9614      	str	r6, [sp, #80]	@ 0x50
 8002d32:	ed97 7b00 	vldr	d7, [r7]
 8002d36:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8002d3a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d3e:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8002d42:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d46:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002d4a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d4e:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002d52:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d56:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002d5a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002d5e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002d62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d64:	9106      	str	r1, [sp, #24]
 8002d66:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002d6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d6e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002d72:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d76:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8002d7a:	ed8d 7b00 	vstr	d7, [sp]
 8002d7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d80:	491e      	ldr	r1, [pc, #120]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d82:	481f      	ldr	r0, [pc, #124]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d84:	f00b feb4 	bl	800eaf0 <siprintf>
				//measureTick, pkt.abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
		CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff));
 8002d88:	481d      	ldr	r0, [pc, #116]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d8a:	f7fd fa71 	bl	8000270 <strlen>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	4619      	mov	r1, r3
 8002d94:	481a      	ldr	r0, [pc, #104]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d96:	f00a fcab 	bl	800d6f0 <CDC_Transmit_FS>
	}

    if (htim->Instance == TIM4)
 8002d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a18      	ldr	r2, [pc, #96]	@ (8002e04 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d105      	bne.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x24a>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uartBuff, strlen(uartBuff));*/
		//CDC_Transmit_FS((uint8_t *) uartBuff, strlen(uartBuff));*/

    	/*------- SEND NUMBER --------------------------*/
    	pkt.header = PACKET_HEADER;
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002da8:	4a17      	ldr	r2, [pc, #92]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002daa:	601a      	str	r2, [r3, #0]
    	pkt.footer = PACKET_FOOTER;
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002dae:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002db0:	63da      	str	r2, [r3, #60]	@ 0x3c
    	//print_packet_hex(&pkt);		// Function to debug the sent HEX string
    	//HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&pkt, sizeof(pkt));


	}
}
 8002db2:	bf00      	nop
 8002db4:	37ec      	adds	r7, #236	@ 0xec
 8002db6:	46bd      	mov	sp, r7
 8002db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dbc:	20000828 	.word	0x20000828
 8002dc0:	20000830 	.word	0x20000830
 8002dc4:	20000728 	.word	0x20000728
 8002dc8:	20000790 	.word	0x20000790
 8002dcc:	20000850 	.word	0x20000850
 8002dd0:	20000844 	.word	0x20000844
 8002dd4:	20000820 	.word	0x20000820
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	20000324 	.word	0x20000324
 8002de4:	20000328 	.word	0x20000328
 8002de8:	2000032c 	.word	0x2000032c
 8002dec:	20000838 	.word	0x20000838
 8002df0:	40000400 	.word	0x40000400
 8002df4:	20000824 	.word	0x20000824
 8002df8:	2000082c 	.word	0x2000082c
 8002dfc:	0801260c 	.word	0x0801260c
 8002e00:	200009d4 	.word	0x200009d4
 8002e04:	40000800 	.word	0x40000800
 8002e08:	aabbccdd 	.word	0xaabbccdd
 8002e0c:	ee8899ff 	.word	0xee8899ff

08002e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e18:	f001 faa8 	bl	800436c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e1c:	f000 f8d8 	bl	8002fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e20:	f000 fb96 	bl	8003550 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e24:	f000 fb46 	bl	80034b4 <MX_DMA_Init>
  MX_SPI1_Init();
 8002e28:	f000 f93c 	bl	80030a4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002e2c:	f000 f9a6 	bl	800317c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002e30:	f00a fba0 	bl	800d574 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002e34:	f000 fa16 	bl	8003264 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002e38:	f000 fb12 	bl	8003460 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002e3c:	f000 fa60 	bl	8003300 <MX_TIM4_Init>
  MX_SPI2_Init();
 8002e40:	f000 f966 	bl	8003110 <MX_SPI2_Init>
  MX_TIM9_Init();
 8002e44:	f000 faaa 	bl	800339c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  SetPriorities();	// function to set priorities
 8002e48:	f7ff fd44 	bl	80028d4 <SetPriorities>

  HAL_Delay(500);
 8002e4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e50:	f001 fafe 	bl	8004450 <HAL_Delay>

  /* ----- BMI088 and MADGWICK SETUP ------------------------------------------*/
  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8002e54:	2310      	movs	r3, #16
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	4b46      	ldr	r3, [pc, #280]	@ (8002f74 <main+0x164>)
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	4a46      	ldr	r2, [pc, #280]	@ (8002f78 <main+0x168>)
 8002e60:	4946      	ldr	r1, [pc, #280]	@ (8002f7c <main+0x16c>)
 8002e62:	4847      	ldr	r0, [pc, #284]	@ (8002f80 <main+0x170>)
 8002e64:	f7fe f8d8 	bl	8001018 <BMI088_Init>
  SetQuaternionFromEuler(&q, 0, 0, 0);				// Angles on the starting position: roll=0, pitch=0, yaw=0
 8002e68:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 8002f84 <main+0x174>
 8002e6c:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8002f84 <main+0x174>
 8002e70:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8002f84 <main+0x174>
 8002e74:	4844      	ldr	r0, [pc, #272]	@ (8002f88 <main+0x178>)
 8002e76:	f7fe fdd7 	bl	8001a28 <SetQuaternionFromEuler>
  Filter_Init(&filt, f_LP_gyr, f_LP_acc, f_HP_gyr, f_HP_acc, f_LP_angles, T_TIM2);
 8002e7a:	4b44      	ldr	r3, [pc, #272]	@ (8002f8c <main+0x17c>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	4b43      	ldr	r3, [pc, #268]	@ (8002f90 <main+0x180>)
 8002e82:	ed93 7a00 	vldr	s14, [r3]
 8002e86:	4b43      	ldr	r3, [pc, #268]	@ (8002f94 <main+0x184>)
 8002e88:	edd3 6a00 	vldr	s13, [r3]
 8002e8c:	4b42      	ldr	r3, [pc, #264]	@ (8002f98 <main+0x188>)
 8002e8e:	ed93 6a00 	vldr	s12, [r3]
 8002e92:	4b42      	ldr	r3, [pc, #264]	@ (8002f9c <main+0x18c>)
 8002e94:	edd3 5a00 	vldr	s11, [r3]
 8002e98:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <main+0x190>)
 8002e9a:	ed93 5a00 	vldr	s10, [r3]
 8002e9e:	eef0 2a45 	vmov.f32	s5, s10
 8002ea2:	eeb0 2a65 	vmov.f32	s4, s11
 8002ea6:	eef0 1a46 	vmov.f32	s3, s12
 8002eaa:	eeb0 1a66 	vmov.f32	s2, s13
 8002eae:	eef0 0a47 	vmov.f32	s1, s14
 8002eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb6:	483b      	ldr	r0, [pc, #236]	@ (8002fa4 <main+0x194>)
 8002eb8:	f7fe fe8a 	bl	8001bd0 <Filter_Init>

  HAL_Delay(500);
 8002ebc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ec0:	f001 fac6 	bl	8004450 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim2);     // Start timer: calculation of the algorithm
 8002ec4:	4838      	ldr	r0, [pc, #224]	@ (8002fa8 <main+0x198>)
 8002ec6:	f005 f94d 	bl	8008164 <HAL_TIM_Base_Start_IT>
  Init_BMI088_Bias(&imu, 1000000);	 // the second passed variable is the number of iterations to find the offset
 8002eca:	4938      	ldr	r1, [pc, #224]	@ (8002fac <main+0x19c>)
 8002ecc:	482c      	ldr	r0, [pc, #176]	@ (8002f80 <main+0x170>)
 8002ece:	f7fe f9bb 	bl	8001248 <Init_BMI088_Bias>
  //HAL_TIM_Base_Start_IT(&htim3);   // Start timer: send data with CDC_Transmit_FS serial interface !!!!!!!! --> Not needed


  /* ----- MCP3564R SETUP ----------------------------------------------------- */
  HAL_TIM_Base_Start(&htim9);
 8002ed2:	4837      	ldr	r0, [pc, #220]	@ (8002fb0 <main+0x1a0>)
 8002ed4:	f005 f8de 	bl	8008094 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_1);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4835      	ldr	r0, [pc, #212]	@ (8002fb0 <main+0x1a0>)
 8002edc:	f005 fa0c 	bl	80082f8 <HAL_TIM_OC_Start>
  HAL_Delay(10);
 8002ee0:	200a      	movs	r0, #10
 8002ee2:	f001 fab5 	bl	8004450 <HAL_Delay>

  MCP3561_Reset(&hspi2);
 8002ee6:	4833      	ldr	r0, [pc, #204]	@ (8002fb4 <main+0x1a4>)
 8002ee8:	f000 fcfc 	bl	80038e4 <MCP3561_Reset>
  HAL_Delay(10);
 8002eec:	200a      	movs	r0, #10
 8002eee:	f001 faaf 	bl	8004450 <HAL_Delay>
  //MCP3561_PrintRegisters(&hspi2);
  //printf("\n");

  MCP3561_Init(&hspi2);
 8002ef2:	4830      	ldr	r0, [pc, #192]	@ (8002fb4 <main+0x1a4>)
 8002ef4:	f000 fc6c 	bl	80037d0 <MCP3561_Init>
  HAL_Delay(10);
 8002ef8:	200a      	movs	r0, #10
 8002efa:	f001 faa9 	bl	8004450 <HAL_Delay>
  //MCP3561_PrintRegisters(&hspi2);
  //printf("\n");
  HAL_Delay(2000);
 8002efe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002f02:	f001 faa5 	bl	8004450 <HAL_Delay>


  /* ----- START ESP32 TRANSMISSION --------------------------------------------*/
  HAL_TIM_Base_Start_IT(&htim4);     // Start the UART transmission to ESP32
 8002f06:	482c      	ldr	r0, [pc, #176]	@ (8002fb8 <main+0x1a8>)
 8002f08:	f005 f92c 	bl	8008164 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_uart_buff, 1);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	492b      	ldr	r1, [pc, #172]	@ (8002fbc <main+0x1ac>)
 8002f10:	482b      	ldr	r0, [pc, #172]	@ (8002fc0 <main+0x1b0>)
 8002f12:	f006 f8f1 	bl	80090f8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//MCP3561_PrintRegisters(&hspi2);
	if(allDiffCh)
 8002f16:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc4 <main+0x1b4>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0fb      	beq.n	8002f16 <main+0x106>
	{
		printf("%.3f\t%.3f\t%.3f\t%.3f\n", adc[0], adc[1], adc[2], adc[3]);
 8002f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc8 <main+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fb10 	bl	8000548 <__aeabi_f2d>
 8002f28:	4682      	mov	sl, r0
 8002f2a:	468b      	mov	fp, r1
 8002f2c:	4b26      	ldr	r3, [pc, #152]	@ (8002fc8 <main+0x1b8>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fb09 	bl	8000548 <__aeabi_f2d>
 8002f36:	4604      	mov	r4, r0
 8002f38:	460d      	mov	r5, r1
 8002f3a:	4b23      	ldr	r3, [pc, #140]	@ (8002fc8 <main+0x1b8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fb02 	bl	8000548 <__aeabi_f2d>
 8002f44:	4680      	mov	r8, r0
 8002f46:	4689      	mov	r9, r1
 8002f48:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <main+0x1b8>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fafb 	bl	8000548 <__aeabi_f2d>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f5a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f5e:	e9cd 4500 	strd	r4, r5, [sp]
 8002f62:	4652      	mov	r2, sl
 8002f64:	465b      	mov	r3, fp
 8002f66:	4819      	ldr	r0, [pc, #100]	@ (8002fcc <main+0x1bc>)
 8002f68:	f00b fdb0 	bl	800eacc <iprintf>
		allDiffCh = 0;
 8002f6c:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <main+0x1b4>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
	if(allDiffCh)
 8002f72:	e7d0      	b.n	8002f16 <main+0x106>
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	20000330 	.word	0x20000330
 8002f80:	20000728 	.word	0x20000728
 8002f84:	00000000 	.word	0x00000000
 8002f88:	2000000c 	.word	0x2000000c
 8002f8c:	2000001c 	.word	0x2000001c
 8002f90:	20000020 	.word	0x20000020
 8002f94:	20000028 	.word	0x20000028
 8002f98:	2000002c 	.word	0x2000002c
 8002f9c:	20000024 	.word	0x20000024
 8002fa0:	2000081c 	.word	0x2000081c
 8002fa4:	20000790 	.word	0x20000790
 8002fa8:	20000560 	.word	0x20000560
 8002fac:	000f4240 	.word	0x000f4240
 8002fb0:	20000638 	.word	0x20000638
 8002fb4:	20000388 	.word	0x20000388
 8002fb8:	200005f0 	.word	0x200005f0
 8002fbc:	20000878 	.word	0x20000878
 8002fc0:	20000680 	.word	0x20000680
 8002fc4:	200008cc 	.word	0x200008cc
 8002fc8:	200008bc 	.word	0x200008bc
 8002fcc:	08012664 	.word	0x08012664

08002fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b094      	sub	sp, #80	@ 0x50
 8002fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd6:	f107 0320 	add.w	r3, r7, #32
 8002fda:	2230      	movs	r2, #48	@ 0x30
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00b fde9 	bl	800ebb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	4b28      	ldr	r3, [pc, #160]	@ (800309c <SystemClock_Config+0xcc>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	4a27      	ldr	r2, [pc, #156]	@ (800309c <SystemClock_Config+0xcc>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	@ 0x40
 8003004:	4b25      	ldr	r3, [pc, #148]	@ (800309c <SystemClock_Config+0xcc>)
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003010:	2300      	movs	r3, #0
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <SystemClock_Config+0xd0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a21      	ldr	r2, [pc, #132]	@ (80030a0 <SystemClock_Config+0xd0>)
 800301a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b1f      	ldr	r3, [pc, #124]	@ (80030a0 <SystemClock_Config+0xd0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800302c:	2301      	movs	r3, #1
 800302e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003036:	2302      	movs	r3, #2
 8003038:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800303a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003040:	2308      	movs	r3, #8
 8003042:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003044:	23a8      	movs	r3, #168	@ 0xa8
 8003046:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003048:	2302      	movs	r3, #2
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800304c:	2307      	movs	r3, #7
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003050:	f107 0320 	add.w	r3, r7, #32
 8003054:	4618      	mov	r0, r3
 8003056:	f003 fb6d 	bl	8006734 <HAL_RCC_OscConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003060:	f000 fb78 	bl	8003754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003064:	230f      	movs	r3, #15
 8003066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003068:	2302      	movs	r3, #2
 800306a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003070:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800307a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	2105      	movs	r1, #5
 8003082:	4618      	mov	r0, r3
 8003084:	f003 fdce 	bl	8006c24 <HAL_RCC_ClockConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800308e:	f000 fb61 	bl	8003754 <Error_Handler>
  }
}
 8003092:	bf00      	nop
 8003094:	3750      	adds	r7, #80	@ 0x50
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000

080030a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030a8:	4b17      	ldr	r3, [pc, #92]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030aa:	4a18      	ldr	r2, [pc, #96]	@ (800310c <MX_SPI1_Init+0x68>)
 80030ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ae:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030bc:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80030d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030d8:	2210      	movs	r2, #16
 80030da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030de:	2200      	movs	r2, #0
 80030e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e8:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030f0:	220a      	movs	r2, #10
 80030f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030f4:	4804      	ldr	r0, [pc, #16]	@ (8003108 <MX_SPI1_Init+0x64>)
 80030f6:	f003 ffb3 	bl	8007060 <HAL_SPI_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003100:	f000 fb28 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003104:	bf00      	nop
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000330 	.word	0x20000330
 800310c:	40013000 	.word	0x40013000

08003110 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003114:	4b17      	ldr	r3, [pc, #92]	@ (8003174 <MX_SPI2_Init+0x64>)
 8003116:	4a18      	ldr	r2, [pc, #96]	@ (8003178 <MX_SPI2_Init+0x68>)
 8003118:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <MX_SPI2_Init+0x64>)
 800311c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003120:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003122:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <MX_SPI2_Init+0x64>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <MX_SPI2_Init+0x64>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800312e:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <MX_SPI2_Init+0x64>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003134:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <MX_SPI2_Init+0x64>)
 8003136:	2200      	movs	r2, #0
 8003138:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800313a:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <MX_SPI2_Init+0x64>)
 800313c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003140:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003142:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <MX_SPI2_Init+0x64>)
 8003144:	2218      	movs	r2, #24
 8003146:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003148:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <MX_SPI2_Init+0x64>)
 800314a:	2200      	movs	r2, #0
 800314c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800314e:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <MX_SPI2_Init+0x64>)
 8003150:	2200      	movs	r2, #0
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003154:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <MX_SPI2_Init+0x64>)
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <MX_SPI2_Init+0x64>)
 800315c:	220a      	movs	r2, #10
 800315e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003160:	4804      	ldr	r0, [pc, #16]	@ (8003174 <MX_SPI2_Init+0x64>)
 8003162:	f003 ff7d 	bl	8007060 <HAL_SPI_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800316c:	f000 faf2 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000388 	.word	0x20000388
 8003178:	40003800 	.word	0x40003800

0800317c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003190:	463b      	mov	r3, r7
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003198:	4b2e      	ldr	r3, [pc, #184]	@ (8003254 <MX_TIM2_Init+0xd8>)
 800319a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800319e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 80031a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003254 <MX_TIM2_Init+0xd8>)
 80031a2:	2229      	movs	r2, #41	@ 0x29
 80031a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003254 <MX_TIM2_Init+0xd8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80031ac:	4b29      	ldr	r3, [pc, #164]	@ (8003254 <MX_TIM2_Init+0xd8>)
 80031ae:	f242 720f 	movw	r2, #9999	@ 0x270f
 80031b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b4:	4b27      	ldr	r3, [pc, #156]	@ (8003254 <MX_TIM2_Init+0xd8>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ba:	4b26      	ldr	r3, [pc, #152]	@ (8003254 <MX_TIM2_Init+0xd8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031c0:	4824      	ldr	r0, [pc, #144]	@ (8003254 <MX_TIM2_Init+0xd8>)
 80031c2:	f004 ff17 	bl	8007ff4 <HAL_TIM_Base_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80031cc:	f000 fac2 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	4619      	mov	r1, r3
 80031dc:	481d      	ldr	r0, [pc, #116]	@ (8003254 <MX_TIM2_Init+0xd8>)
 80031de:	f005 fa9f 	bl	8008720 <HAL_TIM_ConfigClockSource>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80031e8:	f000 fab4 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031f4:	463b      	mov	r3, r7
 80031f6:	4619      	mov	r1, r3
 80031f8:	4816      	ldr	r0, [pc, #88]	@ (8003254 <MX_TIM2_Init+0xd8>)
 80031fa:	f005 fe9d 	bl	8008f38 <HAL_TIMEx_MasterConfigSynchronization>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003204:	f000 faa6 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* These following 2 lines calculate the Frequency and the Period of the Timer TIM2*/
	T_TIM2 = 1.0f / (f_CK / (float)((htim2.Init.Period +1 ) * htim2.Init.Prescaler + 1));
 8003208:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003258 <MX_TIM2_Init+0xdc>
 800320c:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <MX_TIM2_Init+0xd8>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	4a10      	ldr	r2, [pc, #64]	@ (8003254 <MX_TIM2_Init+0xd8>)
 8003214:	6852      	ldr	r2, [r2, #4]
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	3301      	adds	r3, #1
 800321c:	ee07 3a90 	vmov	s15, r3
 8003220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800322c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003230:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <MX_TIM2_Init+0xe0>)
 8003232:	edc3 7a00 	vstr	s15, [r3]
	F_TIM2 = 1 / T_TIM2;
 8003236:	4b09      	ldr	r3, [pc, #36]	@ (800325c <MX_TIM2_Init+0xe0>)
 8003238:	ed93 7a00 	vldr	s14, [r3]
 800323c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <MX_TIM2_Init+0xe4>)
 8003246:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM2_Init 2 */

}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000560 	.word	0x20000560
 8003258:	4ca037a0 	.word	0x4ca037a0
 800325c:	2000081c 	.word	0x2000081c
 8003260:	20000820 	.word	0x20000820

08003264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800326a:	f107 0308 	add.w	r3, r7, #8
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003278:	463b      	mov	r3, r7
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003280:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <MX_TIM3_Init+0x94>)
 8003282:	4a1e      	ldr	r2, [pc, #120]	@ (80032fc <MX_TIM3_Init+0x98>)
 8003284:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8003286:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <MX_TIM3_Init+0x94>)
 8003288:	2229      	movs	r2, #41	@ 0x29
 800328a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <MX_TIM3_Init+0x94>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8003292:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <MX_TIM3_Init+0x94>)
 8003294:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003298:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329a:	4b17      	ldr	r3, [pc, #92]	@ (80032f8 <MX_TIM3_Init+0x94>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a0:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <MX_TIM3_Init+0x94>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032a6:	4814      	ldr	r0, [pc, #80]	@ (80032f8 <MX_TIM3_Init+0x94>)
 80032a8:	f004 fea4 	bl	8007ff4 <HAL_TIM_Base_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80032b2:	f000 fa4f 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032bc:	f107 0308 	add.w	r3, r7, #8
 80032c0:	4619      	mov	r1, r3
 80032c2:	480d      	ldr	r0, [pc, #52]	@ (80032f8 <MX_TIM3_Init+0x94>)
 80032c4:	f005 fa2c 	bl	8008720 <HAL_TIM_ConfigClockSource>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80032ce:	f000 fa41 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032da:	463b      	mov	r3, r7
 80032dc:	4619      	mov	r1, r3
 80032de:	4806      	ldr	r0, [pc, #24]	@ (80032f8 <MX_TIM3_Init+0x94>)
 80032e0:	f005 fe2a 	bl	8008f38 <HAL_TIMEx_MasterConfigSynchronization>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80032ea:	f000 fa33 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200005a8 	.word	0x200005a8
 80032fc:	40000400 	.word	0x40000400

08003300 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003314:	463b      	mov	r3, r7
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800331c:	4b1d      	ldr	r3, [pc, #116]	@ (8003394 <MX_TIM4_Init+0x94>)
 800331e:	4a1e      	ldr	r2, [pc, #120]	@ (8003398 <MX_TIM4_Init+0x98>)
 8003320:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8003322:	4b1c      	ldr	r3, [pc, #112]	@ (8003394 <MX_TIM4_Init+0x94>)
 8003324:	2229      	movs	r2, #41	@ 0x29
 8003326:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003328:	4b1a      	ldr	r3, [pc, #104]	@ (8003394 <MX_TIM4_Init+0x94>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800332e:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <MX_TIM4_Init+0x94>)
 8003330:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003334:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003336:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <MX_TIM4_Init+0x94>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333c:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <MX_TIM4_Init+0x94>)
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003342:	4814      	ldr	r0, [pc, #80]	@ (8003394 <MX_TIM4_Init+0x94>)
 8003344:	f004 fe56 	bl	8007ff4 <HAL_TIM_Base_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800334e:	f000 fa01 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	4619      	mov	r1, r3
 800335e:	480d      	ldr	r0, [pc, #52]	@ (8003394 <MX_TIM4_Init+0x94>)
 8003360:	f005 f9de 	bl	8008720 <HAL_TIM_ConfigClockSource>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800336a:	f000 f9f3 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003376:	463b      	mov	r3, r7
 8003378:	4619      	mov	r1, r3
 800337a:	4806      	ldr	r0, [pc, #24]	@ (8003394 <MX_TIM4_Init+0x94>)
 800337c:	f005 fddc 	bl	8008f38 <HAL_TIMEx_MasterConfigSynchronization>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003386:	f000 f9e5 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200005f0 	.word	0x200005f0
 8003398:	40000800 	.word	0x40000800

0800339c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	@ 0x30
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033a2:	f107 0320 	add.w	r3, r7, #32
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	615a      	str	r2, [r3, #20]
 80033c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80033c2:	4b25      	ldr	r3, [pc, #148]	@ (8003458 <MX_TIM9_Init+0xbc>)
 80033c4:	4a25      	ldr	r2, [pc, #148]	@ (800345c <MX_TIM9_Init+0xc0>)
 80033c6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80033c8:	4b23      	ldr	r3, [pc, #140]	@ (8003458 <MX_TIM9_Init+0xbc>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ce:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <MX_TIM9_Init+0xbc>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 17-1;
 80033d4:	4b20      	ldr	r3, [pc, #128]	@ (8003458 <MX_TIM9_Init+0xbc>)
 80033d6:	2210      	movs	r2, #16
 80033d8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033da:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <MX_TIM9_Init+0xbc>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <MX_TIM9_Init+0xbc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80033e6:	481c      	ldr	r0, [pc, #112]	@ (8003458 <MX_TIM9_Init+0xbc>)
 80033e8:	f004 fe04 	bl	8007ff4 <HAL_TIM_Base_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 80033f2:	f000 f9af 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80033fc:	f107 0320 	add.w	r3, r7, #32
 8003400:	4619      	mov	r1, r3
 8003402:	4815      	ldr	r0, [pc, #84]	@ (8003458 <MX_TIM9_Init+0xbc>)
 8003404:	f005 f98c 	bl	8008720 <HAL_TIM_ConfigClockSource>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800340e:	f000 f9a1 	bl	8003754 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8003412:	4811      	ldr	r0, [pc, #68]	@ (8003458 <MX_TIM9_Init+0xbc>)
 8003414:	f004 ff16 	bl	8008244 <HAL_TIM_OC_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 800341e:	f000 f999 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003422:	2330      	movs	r3, #48	@ 0x30
 8003424:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2200      	movs	r2, #0
 8003436:	4619      	mov	r1, r3
 8003438:	4807      	ldr	r0, [pc, #28]	@ (8003458 <MX_TIM9_Init+0xbc>)
 800343a:	f005 f915 	bl	8008668 <HAL_TIM_OC_ConfigChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8003444:	f000 f986 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003448:	4803      	ldr	r0, [pc, #12]	@ (8003458 <MX_TIM9_Init+0xbc>)
 800344a:	f000 fd15 	bl	8003e78 <HAL_TIM_MspPostInit>

}
 800344e:	bf00      	nop
 8003450:	3730      	adds	r7, #48	@ 0x30
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000638 	.word	0x20000638
 800345c:	40014000 	.word	0x40014000

08003460 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 8003466:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <MX_USART1_UART_Init+0x50>)
 8003468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 800346c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003472:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003478:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 8003480:	2200      	movs	r2, #0
 8003482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 8003486:	220c      	movs	r2, #12
 8003488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003496:	4805      	ldr	r0, [pc, #20]	@ (80034ac <MX_USART1_UART_Init+0x4c>)
 8003498:	f005 fdde 	bl	8009058 <HAL_UART_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034a2:	f000 f957 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000680 	.word	0x20000680
 80034b0:	40011000 	.word	0x40011000

080034b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	4b23      	ldr	r3, [pc, #140]	@ (800354c <MX_DMA_Init+0x98>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	4a22      	ldr	r2, [pc, #136]	@ (800354c <MX_DMA_Init+0x98>)
 80034c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <MX_DMA_Init+0x98>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4b1c      	ldr	r3, [pc, #112]	@ (800354c <MX_DMA_Init+0x98>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <MX_DMA_Init+0x98>)
 80034e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e6:	4b19      	ldr	r3, [pc, #100]	@ (800354c <MX_DMA_Init+0x98>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2100      	movs	r1, #0
 80034f6:	200e      	movs	r0, #14
 80034f8:	f001 f8a9 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80034fc:	200e      	movs	r0, #14
 80034fe:	f001 f8c2 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	200f      	movs	r0, #15
 8003508:	f001 f8a1 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800350c:	200f      	movs	r0, #15
 800350e:	f001 f8ba 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2038      	movs	r0, #56	@ 0x38
 8003518:	f001 f899 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800351c:	2038      	movs	r0, #56	@ 0x38
 800351e:	f001 f8b2 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	203b      	movs	r0, #59	@ 0x3b
 8003528:	f001 f891 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800352c:	203b      	movs	r0, #59	@ 0x3b
 800352e:	f001 f8aa 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2100      	movs	r1, #0
 8003536:	2046      	movs	r0, #70	@ 0x46
 8003538:	f001 f889 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800353c:	2046      	movs	r0, #70	@ 0x46
 800353e:	f001 f8a2 	bl	8004686 <HAL_NVIC_EnableIRQ>

}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	4b53      	ldr	r3, [pc, #332]	@ (80036b8 <MX_GPIO_Init+0x168>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	4a52      	ldr	r2, [pc, #328]	@ (80036b8 <MX_GPIO_Init+0x168>)
 8003570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003574:	6313      	str	r3, [r2, #48]	@ 0x30
 8003576:	4b50      	ldr	r3, [pc, #320]	@ (80036b8 <MX_GPIO_Init+0x168>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b4c      	ldr	r3, [pc, #304]	@ (80036b8 <MX_GPIO_Init+0x168>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	4a4b      	ldr	r2, [pc, #300]	@ (80036b8 <MX_GPIO_Init+0x168>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	6313      	str	r3, [r2, #48]	@ 0x30
 8003592:	4b49      	ldr	r3, [pc, #292]	@ (80036b8 <MX_GPIO_Init+0x168>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b45      	ldr	r3, [pc, #276]	@ (80036b8 <MX_GPIO_Init+0x168>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	4a44      	ldr	r2, [pc, #272]	@ (80036b8 <MX_GPIO_Init+0x168>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ae:	4b42      	ldr	r3, [pc, #264]	@ (80036b8 <MX_GPIO_Init+0x168>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	4b3e      	ldr	r3, [pc, #248]	@ (80036b8 <MX_GPIO_Init+0x168>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	4a3d      	ldr	r2, [pc, #244]	@ (80036b8 <MX_GPIO_Init+0x168>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ca:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <MX_GPIO_Init+0x168>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2110      	movs	r1, #16
 80035da:	4838      	ldr	r0, [pc, #224]	@ (80036bc <MX_GPIO_Init+0x16c>)
 80035dc:	f001 fe0c 	bl	80051f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 80035e0:	2200      	movs	r2, #0
 80035e2:	2110      	movs	r1, #16
 80035e4:	4836      	ldr	r0, [pc, #216]	@ (80036c0 <MX_GPIO_Init+0x170>)
 80035e6:	f001 fe07 	bl	80051f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80035ea:	2200      	movs	r2, #0
 80035ec:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80035f0:	4834      	ldr	r0, [pc, #208]	@ (80036c4 <MX_GPIO_Init+0x174>)
 80035f2:	f001 fe01 	bl	80051f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 80035f6:	230c      	movs	r3, #12
 80035f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	482d      	ldr	r0, [pc, #180]	@ (80036c0 <MX_GPIO_Init+0x170>)
 800360c:	f001 fc58 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8003610:	2310      	movs	r3, #16
 8003612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003614:	2301      	movs	r3, #1
 8003616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4619      	mov	r1, r3
 8003626:	4825      	ldr	r0, [pc, #148]	@ (80036bc <MX_GPIO_Init+0x16c>)
 8003628:	f001 fc4a 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 800362c:	2310      	movs	r3, #16
 800362e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003630:	2301      	movs	r3, #1
 8003632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	4619      	mov	r1, r3
 8003642:	481f      	ldr	r0, [pc, #124]	@ (80036c0 <MX_GPIO_Init+0x170>)
 8003644:	f001 fc3c 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP3564_IRQ_Pin */
  GPIO_InitStruct.Pin = MCP3564_IRQ_Pin;
 8003648:	2301      	movs	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800364c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCP3564_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	4819      	ldr	r0, [pc, #100]	@ (80036c4 <MX_GPIO_Init+0x174>)
 800365e:	f001 fc2f 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin PB4 */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|GPIO_PIN_4;
 8003662:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8003666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003668:	2301      	movs	r3, #1
 800366a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003670:	2300      	movs	r3, #0
 8003672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	4619      	mov	r1, r3
 800367a:	4812      	ldr	r0, [pc, #72]	@ (80036c4 <MX_GPIO_Init+0x174>)
 800367c:	f001 fc20 	bl	8004ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003680:	2200      	movs	r2, #0
 8003682:	2100      	movs	r1, #0
 8003684:	2006      	movs	r0, #6
 8003686:	f000 ffe2 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800368a:	2006      	movs	r0, #6
 800368c:	f000 fffb 	bl	8004686 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	2008      	movs	r0, #8
 8003696:	f000 ffda 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800369a:	2008      	movs	r0, #8
 800369c:	f000 fff3 	bl	8004686 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2009      	movs	r0, #9
 80036a6:	f000 ffd2 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80036aa:	2009      	movs	r0, #9
 80036ac:	f000 ffeb 	bl	8004686 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036b0:	bf00      	nop
 80036b2:	3728      	adds	r7, #40	@ 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40020000 	.word	0x40020000
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40020400 	.word	0x40020400

080036c8 <__io_putchar>:
 * to output a single character. Characters are buffered and
 * transmitted when a newline is encountered or the buffer is full.
 * @param  ch: The character to be output.
 * @retval The character output.
 */
PUTCHAR_PROTOTYPE {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
    // Optional: Add carriage return before newline if only newline is received.
    // This ensures proper line ending (\r\n) for terminals expecting it
    // when printf only outputs '\n'.
    if (ch == '\n') {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b0a      	cmp	r3, #10
 80036d4:	d116      	bne.n	8003704 <__io_putchar+0x3c>
        if (s_printf_buffer_idx == 0 || s_printf_buffer[s_printf_buffer_idx - 1] != '\r') {
 80036d6:	4b1d      	ldr	r3, [pc, #116]	@ (800374c <__io_putchar+0x84>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <__io_putchar+0x24>
 80036de:	4b1b      	ldr	r3, [pc, #108]	@ (800374c <__io_putchar+0x84>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003750 <__io_putchar+0x88>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	2b0d      	cmp	r3, #13
 80036ea:	d00b      	beq.n	8003704 <__io_putchar+0x3c>
            // Ensure there's space for '\r' before adding it
            if (s_printf_buffer_idx < PRINTF_BUFFER_SIZE) {
 80036ec:	4b17      	ldr	r3, [pc, #92]	@ (800374c <__io_putchar+0x84>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2bff      	cmp	r3, #255	@ 0xff
 80036f2:	dc07      	bgt.n	8003704 <__io_putchar+0x3c>
                s_printf_buffer[s_printf_buffer_idx++] = '\r';
 80036f4:	4b15      	ldr	r3, [pc, #84]	@ (800374c <__io_putchar+0x84>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	4914      	ldr	r1, [pc, #80]	@ (800374c <__io_putchar+0x84>)
 80036fc:	600a      	str	r2, [r1, #0]
 80036fe:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <__io_putchar+0x88>)
 8003700:	210d      	movs	r1, #13
 8003702:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Store the current character in the buffer
    // Ensure there's space for the character before adding it
    if (s_printf_buffer_idx < PRINTF_BUFFER_SIZE) {
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <__io_putchar+0x84>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2bff      	cmp	r3, #255	@ 0xff
 800370a:	dc08      	bgt.n	800371e <__io_putchar+0x56>
        s_printf_buffer[s_printf_buffer_idx++] = (char)ch;
 800370c:	4b0f      	ldr	r3, [pc, #60]	@ (800374c <__io_putchar+0x84>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	490e      	ldr	r1, [pc, #56]	@ (800374c <__io_putchar+0x84>)
 8003714:	600a      	str	r2, [r1, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	b2d1      	uxtb	r1, r2
 800371a:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <__io_putchar+0x88>)
 800371c:	54d1      	strb	r1, [r2, r3]
    }

    // Check if the buffer is full or if a newline character was received.
    // If either condition is true, transmit the buffered data.
    if (s_printf_buffer_idx >= PRINTF_BUFFER_SIZE || ch == '\n') {
 800371e:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <__io_putchar+0x84>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2bff      	cmp	r3, #255	@ 0xff
 8003724:	dc02      	bgt.n	800372c <__io_putchar+0x64>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0a      	cmp	r3, #10
 800372a:	d109      	bne.n	8003740 <__io_putchar+0x78>
        // Transmit the buffered data via USB CDC
        // The CDC_Transmit_FS function will handle the actual USB transfer.
        CDC_Transmit_FS((uint8_t*)s_printf_buffer, s_printf_buffer_idx);
 800372c:	4b07      	ldr	r3, [pc, #28]	@ (800374c <__io_putchar+0x84>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	4619      	mov	r1, r3
 8003734:	4806      	ldr	r0, [pc, #24]	@ (8003750 <__io_putchar+0x88>)
 8003736:	f009 ffdb 	bl	800d6f0 <CDC_Transmit_FS>

        // Reset the buffer index after transmission
        s_printf_buffer_idx = 0;
 800373a:	4b04      	ldr	r3, [pc, #16]	@ (800374c <__io_putchar+0x84>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
    }

    return ch; // Return the character that was put
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200009d0 	.word	0x200009d0
 8003750:	200008d0 	.word	0x200008d0

08003754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b0a0      	sub	sp, #128	@ 0x80
 8003758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	char txBuff[128];
	sprintf(txBuff, "SPI Error!");
 800375a:	463b      	mov	r3, r7
 800375c:	490b      	ldr	r1, [pc, #44]	@ (800378c <Error_Handler+0x38>)
 800375e:	4618      	mov	r0, r3
 8003760:	f00b f9c6 	bl	800eaf0 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 8003764:	bf00      	nop
 8003766:	463b      	mov	r3, r7
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc fd81 	bl	8000270 <strlen>
 800376e:	4603      	mov	r3, r0
 8003770:	b29a      	uxth	r2, r3
 8003772:	463b      	mov	r3, r7
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f009 ffba 	bl	800d6f0 <CDC_Transmit_FS>
 800377c:	4603      	mov	r3, r0
 800377e:	2b02      	cmp	r3, #2
 8003780:	d0f1      	beq.n	8003766 <Error_Handler+0x12>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003782:	b672      	cpsid	i
}
 8003784:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003786:	bf00      	nop
 8003788:	e7fd      	b.n	8003786 <Error_Handler+0x32>
 800378a:	bf00      	nop
 800378c:	0801267c 	.word	0x0801267c

08003790 <_MCP3561_write>:
    MCP3561_SREAD_DATA_COMMAND,  // Comando di lettura
    0x00, 0x00, 0x00, 0x00, 0x00 // Padding
};
/* ----------------------------------------- */

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 800379e:	2200      	movs	r2, #0
 80037a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037a4:	4809      	ldr	r0, [pc, #36]	@ (80037cc <_MCP3561_write+0x3c>)
 80037a6:	f001 fd27 	bl	80051f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	2303      	movs	r3, #3
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f003 fcde 	bl	8007172 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 80037b6:	2201      	movs	r2, #1
 80037b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037bc:	4803      	ldr	r0, [pc, #12]	@ (80037cc <_MCP3561_write+0x3c>)
 80037be:	f001 fd1b 	bl	80051f8 <HAL_GPIO_WritePin>
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40020400 	.word	0x40020400

080037d0 <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]

	// be careful with the bitwise or operator "|"
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 80037dc:	2346      	movs	r3, #70	@ 0x46
 80037de:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG0_CLK_SEL_EXT;   // clock selection
 80037e0:	2300      	movs	r3, #0
 80037e2:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_ADC_MODE_CONV; // standby or converting
 80037e4:	7b7b      	ldrb	r3, [r7, #13]
 80037e6:	f043 0303 	orr.w	r3, r3, #3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_CS_SEL_NONE;   // input current
 80037ee:	7b7b      	ldrb	r3, [r7, #13]
 80037f0:	737b      	strb	r3, [r7, #13]
	cmd[1] |= (1 << 7);                      // Enable extern VREF (VREF_SEL = 1)	/* added by user*/
 80037f2:	7b7b      	ldrb	r3, [r7, #13]
 80037f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	2202      	movs	r2, #2
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ffc3 	bl	8003790 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 800380a:	234a      	movs	r3, #74	@ 0x4a
 800380c:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG1_OSR_256;       // over sampling rate
 800380e:	230c      	movs	r3, #12
 8003810:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG1_AMCLK_DIV8;    // sampling clock prescaler
 8003812:	7b7b      	ldrb	r3, [r7, #13]
 8003814:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8003818:	b2db      	uxtb	r3, r3
 800381a:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	2202      	movs	r2, #2
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ffb3 	bl	8003790 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 800382a:	234e      	movs	r3, #78	@ 0x4e
 800382c:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG2_BOOST_x1;   // Boost
 800382e:	2380      	movs	r3, #128	@ 0x80
 8003830:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_GAIN_x64;    // Gain
 8003832:	7b7b      	ldrb	r3, [r7, #13]
 8003834:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8003838:	b2db      	uxtb	r3, r3
 800383a:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_AZ_MUX_OFF; // offset cancellation algorithm
 800383c:	7b7b      	ldrb	r3, [r7, #13]
 800383e:	737b      	strb	r3, [r7, #13]
	cmd[1] += 3; // last two bytes must always be '11'
 8003840:	7b7b      	ldrb	r3, [r7, #13]
 8003842:	3303      	adds	r3, #3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	2202      	movs	r2, #2
 800384e:	4619      	mov	r1, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff9d 	bl	8003790 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8003856:	2352      	movs	r3, #82	@ 0x52
 8003858:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG3_CONV_MODE_CONTINUOUS; // conversion mode
 800385a:	23c0      	movs	r3, #192	@ 0xc0
 800385c:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_DATA_FORMAT_32BIT_CHID_SGN; 	//
 800385e:	7b7b      	ldrb	r3, [r7, #13]
 8003860:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003864:	b2db      	uxtb	r3, r3
 8003866:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_CRCCOM_OFF;            // CRC
 8003868:	7b7b      	ldrb	r3, [r7, #13]
 800386a:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_GAINCAL_OFF;          // gain calibration
 800386c:	7b7b      	ldrb	r3, [r7, #13]
 800386e:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_OFFCAL_OFF;           // offset calibration
 8003870:	7b7b      	ldrb	r3, [r7, #13]
 8003872:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	2202      	movs	r2, #2
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff87 	bl	8003790 <_MCP3561_write>


	cmd[0]  = MCP3561_IRQ_WRITE;
 8003882:	2356      	movs	r3, #86	@ 0x56
 8003884:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_IRQ_MODE_IRQ_HIGH;  // IRQ default pin state
 8003886:	2304      	movs	r3, #4
 8003888:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_FASTCMD_ON;     // fast commands
 800388a:	7b7b      	ldrb	r3, [r7, #13]
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	b2db      	uxtb	r3, r3
 8003892:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_STP_ON;         // start of conversion IRQ
 8003894:	7b7b      	ldrb	r3, [r7, #13]
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 800389e:	f107 030c 	add.w	r3, r7, #12
 80038a2:	2202      	movs	r2, #2
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff72 	bl	8003790 <_MCP3561_write>

	cmd[0]  = MCP3561_MUX_WRITE;
 80038ac:	235a      	movs	r3, #90	@ 0x5a
 80038ae:	733b      	strb	r3, [r7, #12]
	//cmd[1]  = (MCP3561_MUX_CH0 << 4) | MCP3561_MUX_CH1;   // [7..4] VIN+ / [3..0] VIN-
	//cmd[1]  = (MCP3561_MUX_CH_AVDD << _MCP3561_MUX_VIN_P_POS) | (MCP3561_MUX_CH_AGND << _MCP3561_MUX_VIN_N_POS);
	_MCP3561_write(hspi, cmd, 2);
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	2202      	movs	r2, #2
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff69 	bl	8003790 <_MCP3561_write>

	// configure SCAN mode to automatically cycle through channels
	// only available for MCP3562 and MCP356^4, and only for certain input combinations
	// @see Datasheet Table 5-14 on p. 54

	cmd[0] = MCP3561_SCAN_WRITE;
 80038be:	235e      	movs	r3, #94	@ 0x5e
 80038c0:	733b      	strb	r3, [r7, #12]
	cmd[1] = MCP3561_SCAN_DLY_NONE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0F;  // MBS
 80038c6:	230f      	movs	r3, #15
 80038c8:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x00;	// LSB
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
	_MCP3561_write(hspi, cmd, 4);
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	2204      	movs	r2, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ff5a 	bl	8003790 <_MCP3561_write>

}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 80038ec:	237a      	movs	r3, #122	@ 0x7a
 80038ee:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 80038f0:	f107 010f 	add.w	r1, r7, #15
 80038f4:	230a      	movs	r3, #10
 80038f6:	2201      	movs	r2, #1
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f003 fc3a 	bl	8007172 <HAL_SPI_Transmit>
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <MCP3561_StartReadADCData_DMA>:
	//printf("ch: %d\t V: %.6f V\n", channel_id, adc_volt[channel_id]);

}

void MCP3561_StartReadADCData_DMA(SPI_HandleTypeDef *hspi)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
    // CS pin low
    HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8003910:	2200      	movs	r2, #0
 8003912:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003916:	4806      	ldr	r0, [pc, #24]	@ (8003930 <MCP3561_StartReadADCData_DMA+0x28>)
 8003918:	f001 fc6e 	bl	80051f8 <HAL_GPIO_WritePin>
    // Start transmission
    HAL_SPI_TransmitReceive_DMA(hspi, mcp356x_tx_buf, mcp356x_rx_buf, MCP3561_DMA_RX_SIZE);
 800391c:	2306      	movs	r3, #6
 800391e:	4a05      	ldr	r2, [pc, #20]	@ (8003934 <MCP3561_StartReadADCData_DMA+0x2c>)
 8003920:	4905      	ldr	r1, [pc, #20]	@ (8003938 <MCP3561_StartReadADCData_DMA+0x30>)
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f003 ff12 	bl	800774c <HAL_SPI_TransmitReceive_DMA>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40020400 	.word	0x40020400
 8003934:	20000ad4 	.word	0x20000ad4
 8003938:	080126d0 	.word	0x080126d0

0800393c <MCP3561_ReadADCData_DMA>:
/**
 * @brief read 24 Bit left justified ADC register
 * @todo  how to read from other data formats?
 */
uint8_t MCP3561_ReadADCData_DMA(SPI_HandleTypeDef *hspi, float *adc_volt)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	uint8_t *val = mcp356x_rx_buf;
 8003946:	4b33      	ldr	r3, [pc, #204]	@ (8003a14 <MCP3561_ReadADCData_DMA+0xd8>)
 8003948:	60fb      	str	r3, [r7, #12]

	//printf("%02X %02X %02X %02X %02X %02X\t\t", val[0], val[1], val[2], val[3], val[4], val[5]);	// Debug received data

	// Extract 24 bit raw data values
	uint8_t channel_id = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
	uint32_t current_adc_raw_val = 0xFFFF;
 800394e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003952:	613b      	str	r3, [r7, #16]
	if(val[0] != 0x13)			// Delay with the transmission
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b13      	cmp	r3, #19
 800395a:	d01e      	beq.n	800399a <MCP3561_ReadADCData_DMA+0x5e>
	{
		if((val[2] & 0x80) != 0)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3302      	adds	r3, #2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	b25b      	sxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	da16      	bge.n	8003996 <MCP3561_ReadADCData_DMA+0x5a>
		{
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3303      	adds	r3, #3
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	041a      	lsls	r2, r3, #16
									((uint32_t)val[4] << 8)  |
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3304      	adds	r3, #4
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	021b      	lsls	r3, r3, #8
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 8003978:	4313      	orrs	r3, r2
									((uint32_t)val[5]);
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	3205      	adds	r2, #5
 800397e:	7812      	ldrb	r2, [r2, #0]
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
			// Find corresponding channel
			channel_id = (val[2] & 0x30) >> 4; // Extract the ID
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3302      	adds	r3, #2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	111b      	asrs	r3, r3, #4
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	75fb      	strb	r3, [r7, #23]
 8003994:	e026      	b.n	80039e4 <MCP3561_ReadADCData_DMA+0xa8>
		}
		else
		{
			return 0;
 8003996:	2300      	movs	r3, #0
 8003998:	e037      	b.n	8003a0a <MCP3561_ReadADCData_DMA+0xce>
		}
	}
	else if(val[0] == 0x13)		// if it's not 0x13 it is trush data
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b13      	cmp	r3, #19
 80039a0:	d11e      	bne.n	80039e0 <MCP3561_ReadADCData_DMA+0xa4>
	{
		if((val[1] & 0x80) != 0)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3301      	adds	r3, #1
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b25b      	sxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da16      	bge.n	80039dc <MCP3561_ReadADCData_DMA+0xa0>
		{
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3302      	adds	r3, #2
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	041a      	lsls	r2, r3, #16
									((uint32_t)val[3] << 8)  |
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3303      	adds	r3, #3
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	021b      	lsls	r3, r3, #8
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 80039be:	4313      	orrs	r3, r2
									((uint32_t)val[4]);
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	3204      	adds	r2, #4
 80039c4:	7812      	ldrb	r2, [r2, #0]
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
			// Find corresponding channel
			channel_id = (val[1] & 0x30) >> 4; // Extract the ID
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3301      	adds	r3, #1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	111b      	asrs	r3, r3, #4
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	75fb      	strb	r3, [r7, #23]
 80039da:	e003      	b.n	80039e4 <MCP3561_ReadADCData_DMA+0xa8>
		}
		else
		{
			return 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	e014      	b.n	8003a0a <MCP3561_ReadADCData_DMA+0xce>
		}
	}
	else
	{
		return 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e012      	b.n	8003a0a <MCP3561_ReadADCData_DMA+0xce>
	}

	// Convert from row data to float
	adc_volt[channel_id] = convertAdcToVoltage(current_adc_raw_val);
 80039e4:	6938      	ldr	r0, [r7, #16]
 80039e6:	f000 f817 	bl	8003a18 <convertAdcToVoltage>
 80039ea:	ec51 0b10 	vmov	r0, r1, d0
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	18d4      	adds	r4, r2, r3
 80039f6:	f7fd f8d7 	bl	8000ba8 <__aeabi_d2f>
 80039fa:	4603      	mov	r3, r0
 80039fc:	6023      	str	r3, [r4, #0]

	// If it is the channel 1 it means that we did an entire conversion of every differential channel
	if(channel_id == 0)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <MCP3561_ReadADCData_DMA+0xcc>
		return 1;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <MCP3561_ReadADCData_DMA+0xce>
	else
		return 0;
 8003a08:	2300      	movs	r3, #0

	printf("ch: %d\t V: %.6f V\n", channel_id, adc_volt[channel_id]);

}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000ad4 	.word	0x20000ad4

08003a18 <convertAdcToVoltage>:
}



// Function to convert a row value into float voltage
double convertAdcToVoltage(uint32_t raw_adc_value) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
    int32_t signed_adc_value;

    // Convert the unsigned 24-bit value (from uint32_t) to a signed 24-bit value (in int32_t)
    // If bit 23 is set (MSB of a 24-bit number), it is negative.
    if ((raw_adc_value & 0x00800000) != 0) { 						// If bit 23 is 1, it is a negative number
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <convertAdcToVoltage+0x1c>
        signed_adc_value = (int32_t)(raw_adc_value | 0xFF000000); 	// Extend the sign for the upper bits (only for display in int32_t)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e001      	b.n	8003a38 <convertAdcToVoltage+0x20>
    } else {
        signed_adc_value = (int32_t)raw_adc_value;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	617b      	str	r3, [r7, #20]
    }

    double voltage = ((double)signed_adc_value * VREF_VOLTAGE_V) / (ADC_MAX_COUNT * ADC_GAIN);
 8003a38:	6978      	ldr	r0, [r7, #20]
 8003a3a:	f7fc fd73 	bl	8000524 <__aeabi_i2d>
 8003a3e:	a30f      	add	r3, pc, #60	@ (adr r3, 8003a7c <convertAdcToVoltage+0x64>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc fdd8 	bl	80005f8 <__aeabi_dmul>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <convertAdcToVoltage+0x60>)
 8003a56:	f7fc fef9 	bl	800084c <__aeabi_ddiv>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return voltage;
 8003a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a66:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a6a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a6e:	eef0 0a67 	vmov.f32	s1, s15
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	41600000 	.word	0x41600000
 8003a7c:	66666666 	.word	0x66666666
 8003a80:	400a6666 	.word	0x400a6666

08003a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ad0 <HAL_MspInit+0x4c>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad0 <HAL_MspInit+0x4c>)
 8003a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <HAL_MspInit+0x4c>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <HAL_MspInit+0x4c>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	4a08      	ldr	r2, [pc, #32]	@ (8003ad0 <HAL_MspInit+0x4c>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab6:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_MspInit+0x4c>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800

08003ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	@ 0x30
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a98      	ldr	r2, [pc, #608]	@ (8003d54 <HAL_SPI_MspInit+0x280>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	f040 8093 	bne.w	8003c1e <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	4b96      	ldr	r3, [pc, #600]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	4a95      	ldr	r2, [pc, #596]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003b02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b06:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b08:	4b93      	ldr	r3, [pc, #588]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	4b8f      	ldr	r3, [pc, #572]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	4a8e      	ldr	r2, [pc, #568]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b24:	4b8c      	ldr	r3, [pc, #560]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b30:	23e0      	movs	r3, #224	@ 0xe0
 8003b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b34:	2302      	movs	r3, #2
 8003b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b40:	2305      	movs	r3, #5
 8003b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b44:	f107 031c 	add.w	r3, r7, #28
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4884      	ldr	r0, [pc, #528]	@ (8003d5c <HAL_SPI_MspInit+0x288>)
 8003b4c:	f001 f9b8 	bl	8004ec0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003b50:	4b83      	ldr	r3, [pc, #524]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b52:	4a84      	ldr	r2, [pc, #528]	@ (8003d64 <HAL_SPI_MspInit+0x290>)
 8003b54:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003b56:	4b82      	ldr	r3, [pc, #520]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b58:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003b5c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b5e:	4b80      	ldr	r3, [pc, #512]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b64:	4b7e      	ldr	r3, [pc, #504]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b70:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b72:	4b7b      	ldr	r3, [pc, #492]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b78:	4b79      	ldr	r3, [pc, #484]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003b7e:	4b78      	ldr	r3, [pc, #480]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003b84:	4b76      	ldr	r3, [pc, #472]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b8a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b8c:	4b74      	ldr	r3, [pc, #464]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003b92:	4873      	ldr	r0, [pc, #460]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003b94:	f000 fd92 	bl	80046bc <HAL_DMA_Init>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8003b9e:	f7ff fdd9 	bl	8003754 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003ba8:	4a6d      	ldr	r2, [pc, #436]	@ (8003d60 <HAL_SPI_MspInit+0x28c>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003bae:	4b6e      	ldr	r3, [pc, #440]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d6c <HAL_SPI_MspInit+0x298>)
 8003bb2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003bb4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bb6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003bba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bbe:	2240      	movs	r2, #64	@ 0x40
 8003bc0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bc2:	4b69      	ldr	r3, [pc, #420]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bc8:	4b67      	ldr	r3, [pc, #412]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bd0:	4b65      	ldr	r3, [pc, #404]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bd6:	4b64      	ldr	r3, [pc, #400]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003bdc:	4b62      	ldr	r3, [pc, #392]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003be2:	4b61      	ldr	r3, [pc, #388]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003be4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003be8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bea:	4b5f      	ldr	r3, [pc, #380]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003bf0:	485d      	ldr	r0, [pc, #372]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003bf2:	f000 fd63 	bl	80046bc <HAL_DMA_Init>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003bfc:	f7ff fdaa 	bl	8003754 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a59      	ldr	r2, [pc, #356]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003c04:	649a      	str	r2, [r3, #72]	@ 0x48
 8003c06:	4a58      	ldr	r2, [pc, #352]	@ (8003d68 <HAL_SPI_MspInit+0x294>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2100      	movs	r1, #0
 8003c10:	2023      	movs	r0, #35	@ 0x23
 8003c12:	f000 fd1c 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003c16:	2023      	movs	r0, #35	@ 0x23
 8003c18:	f000 fd35 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c1c:	e096      	b.n	8003d4c <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a53      	ldr	r2, [pc, #332]	@ (8003d70 <HAL_SPI_MspInit+0x29c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	f040 8091 	bne.w	8003d4c <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	4a49      	ldr	r2, [pc, #292]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3a:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	4b43      	ldr	r3, [pc, #268]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	4a42      	ldr	r2, [pc, #264]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c56:	4b40      	ldr	r3, [pc, #256]	@ (8003d58 <HAL_SPI_MspInit+0x284>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003c62:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8003c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c70:	2303      	movs	r3, #3
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c74:	2305      	movs	r3, #5
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c78:	f107 031c 	add.w	r3, r7, #28
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	483d      	ldr	r0, [pc, #244]	@ (8003d74 <HAL_SPI_MspInit+0x2a0>)
 8003c80:	f001 f91e 	bl	8004ec0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003c84:	4b3c      	ldr	r3, [pc, #240]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003c86:	4a3d      	ldr	r2, [pc, #244]	@ (8003d7c <HAL_SPI_MspInit+0x2a8>)
 8003c88:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c90:	4b39      	ldr	r3, [pc, #228]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c96:	4b38      	ldr	r3, [pc, #224]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c9c:	4b36      	ldr	r3, [pc, #216]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ca2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ca4:	4b34      	ldr	r3, [pc, #208]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003caa:	4b33      	ldr	r3, [pc, #204]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003cb0:	4b31      	ldr	r3, [pc, #196]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cb6:	4b30      	ldr	r3, [pc, #192]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003cb8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003cbc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003cc4:	482c      	ldr	r0, [pc, #176]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003cc6:	f000 fcf9 	bl	80046bc <HAL_DMA_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_SPI_MspInit+0x200>
      Error_Handler();
 8003cd0:	f7ff fd40 	bl	8003754 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a28      	ldr	r2, [pc, #160]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003cda:	4a27      	ldr	r2, [pc, #156]	@ (8003d78 <HAL_SPI_MspInit+0x2a4>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003ce0:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003ce2:	4a28      	ldr	r2, [pc, #160]	@ (8003d84 <HAL_SPI_MspInit+0x2b0>)
 8003ce4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003ce6:	4b26      	ldr	r3, [pc, #152]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cec:	4b24      	ldr	r3, [pc, #144]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003cee:	2240      	movs	r2, #64	@ 0x40
 8003cf0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cf2:	4b23      	ldr	r3, [pc, #140]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cf8:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cfe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d00:	4b1f      	ldr	r3, [pc, #124]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d06:	4b1e      	ldr	r3, [pc, #120]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d12:	4b1b      	ldr	r3, [pc, #108]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003d14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003d18:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d1a:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003d20:	4817      	ldr	r0, [pc, #92]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003d22:	f000 fccb 	bl	80046bc <HAL_DMA_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_SPI_MspInit+0x25c>
      Error_Handler();
 8003d2c:	f7ff fd12 	bl	8003754 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003d34:	649a      	str	r2, [r3, #72]	@ 0x48
 8003d36:	4a12      	ldr	r2, [pc, #72]	@ (8003d80 <HAL_SPI_MspInit+0x2ac>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	2024      	movs	r0, #36	@ 0x24
 8003d42:	f000 fc84 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003d46:	2024      	movs	r0, #36	@ 0x24
 8003d48:	f000 fc9d 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003d4c:	bf00      	nop
 8003d4e:	3730      	adds	r7, #48	@ 0x30
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40013000 	.word	0x40013000
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40020000 	.word	0x40020000
 8003d60:	200003e0 	.word	0x200003e0
 8003d64:	40026410 	.word	0x40026410
 8003d68:	20000440 	.word	0x20000440
 8003d6c:	40026458 	.word	0x40026458
 8003d70:	40003800 	.word	0x40003800
 8003d74:	40020400 	.word	0x40020400
 8003d78:	200004a0 	.word	0x200004a0
 8003d7c:	40026058 	.word	0x40026058
 8003d80:	20000500 	.word	0x20000500
 8003d84:	40026070 	.word	0x40026070

08003d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d98:	d116      	bne.n	8003dc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	4b32      	ldr	r3, [pc, #200]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	4a31      	ldr	r2, [pc, #196]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003daa:	4b2f      	ldr	r3, [pc, #188]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	201c      	movs	r0, #28
 8003dbc:	f000 fc47 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dc0:	201c      	movs	r0, #28
 8003dc2:	f000 fc60 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003dc6:	e04a      	b.n	8003e5e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a27      	ldr	r2, [pc, #156]	@ (8003e6c <HAL_TIM_Base_MspInit+0xe4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d116      	bne.n	8003e00 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	4a23      	ldr	r2, [pc, #140]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003de2:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	201d      	movs	r0, #29
 8003df4:	f000 fc2b 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003df8:	201d      	movs	r0, #29
 8003dfa:	f000 fc44 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003dfe:	e02e      	b.n	8003e5e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1a      	ldr	r2, [pc, #104]	@ (8003e70 <HAL_TIM_Base_MspInit+0xe8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d116      	bne.n	8003e38 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	4b16      	ldr	r3, [pc, #88]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	4a15      	ldr	r2, [pc, #84]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e1a:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2100      	movs	r1, #0
 8003e2a:	201e      	movs	r0, #30
 8003e2c:	f000 fc0f 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e30:	201e      	movs	r0, #30
 8003e32:	f000 fc28 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003e36:	e012      	b.n	8003e5e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e74 <HAL_TIM_Base_MspInit+0xec>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10d      	bne.n	8003e5e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	4b08      	ldr	r3, [pc, #32]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	4a07      	ldr	r2, [pc, #28]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e52:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_TIM_Base_MspInit+0xe0>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40014000 	.word	0x40014000

08003e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	f107 030c 	add.w	r3, r7, #12
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a12      	ldr	r2, [pc, #72]	@ (8003ee0 <HAL_TIM_MspPostInit+0x68>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d11d      	bne.n	8003ed6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <HAL_TIM_MspPostInit+0x6c>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	4a10      	ldr	r2, [pc, #64]	@ (8003ee4 <HAL_TIM_MspPostInit+0x6c>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee4 <HAL_TIM_MspPostInit+0x6c>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4805      	ldr	r0, [pc, #20]	@ (8003ee8 <HAL_TIM_MspPostInit+0x70>)
 8003ed2:	f000 fff5 	bl	8004ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003ed6:	bf00      	nop
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020000 	.word	0x40020000

08003eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	@ 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a34      	ldr	r2, [pc, #208]	@ (8003fdc <HAL_UART_MspInit+0xf0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d162      	bne.n	8003fd4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	4b33      	ldr	r3, [pc, #204]	@ (8003fe0 <HAL_UART_MspInit+0xf4>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	4a32      	ldr	r2, [pc, #200]	@ (8003fe0 <HAL_UART_MspInit+0xf4>)
 8003f18:	f043 0310 	orr.w	r3, r3, #16
 8003f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f1e:	4b30      	ldr	r3, [pc, #192]	@ (8003fe0 <HAL_UART_MspInit+0xf4>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe0 <HAL_UART_MspInit+0xf4>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe0 <HAL_UART_MspInit+0xf4>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f3a:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <HAL_UART_MspInit+0xf4>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f54:	2303      	movs	r3, #3
 8003f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f58:	2307      	movs	r3, #7
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5c:	f107 0314 	add.w	r3, r7, #20
 8003f60:	4619      	mov	r1, r3
 8003f62:	4820      	ldr	r0, [pc, #128]	@ (8003fe4 <HAL_UART_MspInit+0xf8>)
 8003f64:	f000 ffac 	bl	8004ec0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003f68:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f6a:	4a20      	ldr	r2, [pc, #128]	@ (8003fec <HAL_UART_MspInit+0x100>)
 8003f6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f70:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f74:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f76:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f78:	2240      	movs	r2, #64	@ 0x40
 8003f7a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f82:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f88:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f8a:	4b17      	ldr	r3, [pc, #92]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f90:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f96:	4b14      	ldr	r3, [pc, #80]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f9c:	4b12      	ldr	r3, [pc, #72]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fa2:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003fa8:	480f      	ldr	r0, [pc, #60]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003faa:	f000 fb87 	bl	80046bc <HAL_DMA_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003fb4:	f7ff fbce 	bl	8003754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003fbc:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <HAL_UART_MspInit+0xfc>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	2025      	movs	r0, #37	@ 0x25
 8003fca:	f000 fb40 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fce:	2025      	movs	r0, #37	@ 0x25
 8003fd0:	f000 fb59 	bl	8004686 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003fd4:	bf00      	nop
 8003fd6:	3728      	adds	r7, #40	@ 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40020000 	.word	0x40020000
 8003fe8:	200006c8 	.word	0x200006c8
 8003fec:	400264b8 	.word	0x400264b8

08003ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <NMI_Handler+0x4>

08003ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffc:	bf00      	nop
 8003ffe:	e7fd      	b.n	8003ffc <HardFault_Handler+0x4>

08004000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <MemManage_Handler+0x4>

08004008 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <BusFault_Handler+0x4>

08004010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <UsageFault_Handler+0x4>

08004018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004046:	f000 f9e3 	bl	8004410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}

0800404e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP3564_IRQ_Pin);
 8004052:	2001      	movs	r0, #1
 8004054:	f001 f904 	bl	8005260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004058:	bf00      	nop
 800405a:	bd80      	pop	{r7, pc}

0800405c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8004060:	2004      	movs	r0, #4
 8004062:	f001 f8fd 	bl	8005260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}

0800406a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 800406e:	2008      	movs	r0, #8
 8004070:	f001 f8f6 	bl	8005260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004074:	bf00      	nop
 8004076:	bd80      	pop	{r7, pc}

08004078 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800407c:	4802      	ldr	r0, [pc, #8]	@ (8004088 <DMA1_Stream3_IRQHandler+0x10>)
 800407e:	f000 fcb5 	bl	80049ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200004a0 	.word	0x200004a0

0800408c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004090:	4802      	ldr	r0, [pc, #8]	@ (800409c <DMA1_Stream4_IRQHandler+0x10>)
 8004092:	f000 fcab 	bl	80049ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000500 	.word	0x20000500

080040a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040a4:	4802      	ldr	r0, [pc, #8]	@ (80040b0 <TIM2_IRQHandler+0x10>)
 80040a6:	f004 f9ef 	bl	8008488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000560 	.word	0x20000560

080040b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80040b8:	4802      	ldr	r0, [pc, #8]	@ (80040c4 <TIM3_IRQHandler+0x10>)
 80040ba:	f004 f9e5 	bl	8008488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200005a8 	.word	0x200005a8

080040c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80040cc:	4802      	ldr	r0, [pc, #8]	@ (80040d8 <TIM4_IRQHandler+0x10>)
 80040ce:	f004 f9db 	bl	8008488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200005f0 	.word	0x200005f0

080040dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80040e0:	4802      	ldr	r0, [pc, #8]	@ (80040ec <SPI1_IRQHandler+0x10>)
 80040e2:	f003 fc2f 	bl	8007944 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000330 	.word	0x20000330

080040f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80040f4:	4802      	ldr	r0, [pc, #8]	@ (8004100 <SPI2_IRQHandler+0x10>)
 80040f6:	f003 fc25 	bl	8007944 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000388 	.word	0x20000388

08004104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004108:	4802      	ldr	r0, [pc, #8]	@ (8004114 <USART1_IRQHandler+0x10>)
 800410a:	f005 f81b 	bl	8009144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000680 	.word	0x20000680

08004118 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800411c:	4802      	ldr	r0, [pc, #8]	@ (8004128 <DMA2_Stream0_IRQHandler+0x10>)
 800411e:	f000 fc65 	bl	80049ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200003e0 	.word	0x200003e0

0800412c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004130:	4802      	ldr	r0, [pc, #8]	@ (800413c <DMA2_Stream3_IRQHandler+0x10>)
 8004132:	f000 fc5b 	bl	80049ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000440 	.word	0x20000440

08004140 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004144:	4802      	ldr	r0, [pc, #8]	@ (8004150 <OTG_FS_IRQHandler+0x10>)
 8004146:	f001 f9e7 	bl	8005518 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20001fc4 	.word	0x20001fc4

08004154 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004158:	4802      	ldr	r0, [pc, #8]	@ (8004164 <DMA2_Stream7_IRQHandler+0x10>)
 800415a:	f000 fc47 	bl	80049ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200006c8 	.word	0x200006c8

08004168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return 1;
 800416c:	2301      	movs	r3, #1
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_kill>:

int _kill(int pid, int sig)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004182:	f00a fd6b 	bl	800ec5c <__errno>
 8004186:	4603      	mov	r3, r0
 8004188:	2216      	movs	r2, #22
 800418a:	601a      	str	r2, [r3, #0]
  return -1;
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_exit>:

void _exit (int status)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041a0:	f04f 31ff 	mov.w	r1, #4294967295
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ffe7 	bl	8004178 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <_exit+0x12>

080041ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b086      	sub	sp, #24
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e00a      	b.n	80041d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041c0:	f3af 8000 	nop.w
 80041c4:	4601      	mov	r1, r0
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	60ba      	str	r2, [r7, #8]
 80041cc:	b2ca      	uxtb	r2, r1
 80041ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	3301      	adds	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	dbf0      	blt.n	80041c0 <_read+0x12>
  }

  return len;
 80041de:	687b      	ldr	r3, [r7, #4]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e009      	b.n	800420e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	60ba      	str	r2, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fa60 	bl	80036c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3301      	adds	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	dbf1      	blt.n	80041fa <_write+0x12>
  }
  return len;
 8004216:	687b      	ldr	r3, [r7, #4]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <_close>:

int _close(int file)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004248:	605a      	str	r2, [r3, #4]
  return 0;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <_isatty>:

int _isatty(int file)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004260:	2301      	movs	r3, #1
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004290:	4a14      	ldr	r2, [pc, #80]	@ (80042e4 <_sbrk+0x5c>)
 8004292:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <_sbrk+0x60>)
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <_sbrk+0x64>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042a4:	4b11      	ldr	r3, [pc, #68]	@ (80042ec <_sbrk+0x64>)
 80042a6:	4a12      	ldr	r2, [pc, #72]	@ (80042f0 <_sbrk+0x68>)
 80042a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042aa:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <_sbrk+0x64>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d207      	bcs.n	80042c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042b8:	f00a fcd0 	bl	800ec5c <__errno>
 80042bc:	4603      	mov	r3, r0
 80042be:	220c      	movs	r2, #12
 80042c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295
 80042c6:	e009      	b.n	80042dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042c8:	4b08      	ldr	r3, [pc, #32]	@ (80042ec <_sbrk+0x64>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ce:	4b07      	ldr	r3, [pc, #28]	@ (80042ec <_sbrk+0x64>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	4a05      	ldr	r2, [pc, #20]	@ (80042ec <_sbrk+0x64>)
 80042d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042da:	68fb      	ldr	r3, [r7, #12]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20020000 	.word	0x20020000
 80042e8:	00000400 	.word	0x00000400
 80042ec:	20000adc 	.word	0x20000adc
 80042f0:	20002818 	.word	0x20002818

080042f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <SystemInit+0x20>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fe:	4a05      	ldr	r2, [pc, #20]	@ (8004314 <SystemInit+0x20>)
 8004300:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004304:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004308:	bf00      	nop
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004318:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004350 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800431c:	f7ff ffea 	bl	80042f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004320:	480c      	ldr	r0, [pc, #48]	@ (8004354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004322:	490d      	ldr	r1, [pc, #52]	@ (8004358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004324:	4a0d      	ldr	r2, [pc, #52]	@ (800435c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004328:	e002      	b.n	8004330 <LoopCopyDataInit>

0800432a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800432a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800432c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800432e:	3304      	adds	r3, #4

08004330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004334:	d3f9      	bcc.n	800432a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004336:	4a0a      	ldr	r2, [pc, #40]	@ (8004360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004338:	4c0a      	ldr	r4, [pc, #40]	@ (8004364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800433a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800433c:	e001      	b.n	8004342 <LoopFillZerobss>

0800433e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800433e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004340:	3204      	adds	r2, #4

08004342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004344:	d3fb      	bcc.n	800433e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004346:	f00a fc8f 	bl	800ec68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800434a:	f7fe fd61 	bl	8002e10 <main>
  bx  lr    
 800434e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004358:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 800435c:	08012ed0 	.word	0x08012ed0
  ldr r2, =_sbss
 8004360:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8004364:	20002814 	.word	0x20002814

08004368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004368:	e7fe      	b.n	8004368 <ADC_IRQHandler>
	...

0800436c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004370:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <HAL_Init+0x40>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0d      	ldr	r2, [pc, #52]	@ (80043ac <HAL_Init+0x40>)
 8004376:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800437a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <HAL_Init+0x40>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0a      	ldr	r2, [pc, #40]	@ (80043ac <HAL_Init+0x40>)
 8004382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004388:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <HAL_Init+0x40>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a07      	ldr	r2, [pc, #28]	@ (80043ac <HAL_Init+0x40>)
 800438e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004394:	2003      	movs	r0, #3
 8004396:	f000 f94f 	bl	8004638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800439a:	200f      	movs	r0, #15
 800439c:	f000 f808 	bl	80043b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043a0:	f7ff fb70 	bl	8003a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023c00 	.word	0x40023c00

080043b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043b8:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <HAL_InitTick+0x54>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <HAL_InitTick+0x58>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f967 	bl	80046a2 <HAL_SYSTICK_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e00e      	b.n	80043fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b0f      	cmp	r3, #15
 80043e2:	d80a      	bhi.n	80043fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043e4:	2200      	movs	r2, #0
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	f000 f92f 	bl	800464e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043f0:	4a06      	ldr	r2, [pc, #24]	@ (800440c <HAL_InitTick+0x5c>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000030 	.word	0x20000030
 8004408:	20000038 	.word	0x20000038
 800440c:	20000034 	.word	0x20000034

08004410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004414:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <HAL_IncTick+0x20>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_IncTick+0x24>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4413      	add	r3, r2
 8004420:	4a04      	ldr	r2, [pc, #16]	@ (8004434 <HAL_IncTick+0x24>)
 8004422:	6013      	str	r3, [r2, #0]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000038 	.word	0x20000038
 8004434:	20000ae0 	.word	0x20000ae0

08004438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return uwTick;
 800443c:	4b03      	ldr	r3, [pc, #12]	@ (800444c <HAL_GetTick+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000ae0 	.word	0x20000ae0

08004450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7ff ffee 	bl	8004438 <HAL_GetTick>
 800445c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d005      	beq.n	8004476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800446a:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <HAL_Delay+0x44>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004476:	bf00      	nop
 8004478:	f7ff ffde 	bl	8004438 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d8f7      	bhi.n	8004478 <HAL_Delay+0x28>
  {
  }
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000038 	.word	0x20000038

08004498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a8:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044b4:	4013      	ands	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ca:	4a04      	ldr	r2, [pc, #16]	@ (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	60d3      	str	r3, [r2, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e4:	4b04      	ldr	r3, [pc, #16]	@ (80044f8 <__NVIC_GetPriorityGrouping+0x18>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 0307 	and.w	r3, r3, #7
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db0b      	blt.n	8004526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	4907      	ldr	r1, [pc, #28]	@ (8004534 <__NVIC_EnableIRQ+0x38>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2001      	movs	r0, #1
 800451e:	fa00 f202 	lsl.w	r2, r0, r2
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000e100 	.word	0xe000e100

08004538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db0a      	blt.n	8004562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	490c      	ldr	r1, [pc, #48]	@ (8004584 <__NVIC_SetPriority+0x4c>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	440b      	add	r3, r1
 800455c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004560:	e00a      	b.n	8004578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	4908      	ldr	r1, [pc, #32]	@ (8004588 <__NVIC_SetPriority+0x50>)
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	3b04      	subs	r3, #4
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	440b      	add	r3, r1
 8004576:	761a      	strb	r2, [r3, #24]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000e100 	.word	0xe000e100
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	@ 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f1c3 0307 	rsb	r3, r3, #7
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf28      	it	cs
 80045aa:	2304      	movcs	r3, #4
 80045ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d902      	bls.n	80045bc <NVIC_EncodePriority+0x30>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3b03      	subs	r3, #3
 80045ba:	e000      	b.n	80045be <NVIC_EncodePriority+0x32>
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	f04f 32ff 	mov.w	r2, #4294967295
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	401a      	ands	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d4:	f04f 31ff 	mov.w	r1, #4294967295
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	43d9      	mvns	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	4313      	orrs	r3, r2
         );
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	@ 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004604:	d301      	bcc.n	800460a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004606:	2301      	movs	r3, #1
 8004608:	e00f      	b.n	800462a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800460a:	4a0a      	ldr	r2, [pc, #40]	@ (8004634 <SysTick_Config+0x40>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004612:	210f      	movs	r1, #15
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	f7ff ff8e 	bl	8004538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <SysTick_Config+0x40>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004622:	4b04      	ldr	r3, [pc, #16]	@ (8004634 <SysTick_Config+0x40>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	e000e010 	.word	0xe000e010

08004638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff29 	bl	8004498 <__NVIC_SetPriorityGrouping>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004660:	f7ff ff3e 	bl	80044e0 <__NVIC_GetPriorityGrouping>
 8004664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	6978      	ldr	r0, [r7, #20]
 800466c:	f7ff ff8e 	bl	800458c <NVIC_EncodePriority>
 8004670:	4602      	mov	r2, r0
 8004672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff5d 	bl	8004538 <__NVIC_SetPriority>
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff31 	bl	80044fc <__NVIC_EnableIRQ>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ffa2 	bl	80045f4 <SysTick_Config>
 80046b0:	4603      	mov	r3, r0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046c8:	f7ff feb6 	bl	8004438 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e099      	b.n	800480c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f8:	e00f      	b.n	800471a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046fa:	f7ff fe9d 	bl	8004438 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b05      	cmp	r3, #5
 8004706:	d908      	bls.n	800471a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2203      	movs	r2, #3
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e078      	b.n	800480c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e8      	bne.n	80046fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4b38      	ldr	r3, [pc, #224]	@ (8004814 <HAL_DMA_Init+0x158>)
 8004734:	4013      	ands	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	2b04      	cmp	r3, #4
 8004772:	d107      	bne.n	8004784 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	4313      	orrs	r3, r2
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0307 	bic.w	r3, r3, #7
 800479a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d117      	bne.n	80047de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fb01 	bl	8004dc8 <DMA_CheckFifoParam>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2240      	movs	r2, #64	@ 0x40
 80047d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80047da:	2301      	movs	r3, #1
 80047dc:	e016      	b.n	800480c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fab8 	bl	8004d5c <DMA_CalcBaseAndBitshift>
 80047ec:	4603      	mov	r3, r0
 80047ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f4:	223f      	movs	r2, #63	@ 0x3f
 80047f6:	409a      	lsls	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	f010803f 	.word	0xf010803f

08004818 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_DMA_Start_IT+0x26>
 800483a:	2302      	movs	r3, #2
 800483c:	e040      	b.n	80048c0 <HAL_DMA_Start_IT+0xa8>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b01      	cmp	r3, #1
 8004850:	d12f      	bne.n	80048b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fa4a 	bl	8004d00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004870:	223f      	movs	r2, #63	@ 0x3f
 8004872:	409a      	lsls	r2, r3
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0216 	orr.w	r2, r2, #22
 8004886:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0208 	orr.w	r2, r2, #8
 800489e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e005      	b.n	80048be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
 80048bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048d6:	f7ff fdaf 	bl	8004438 <HAL_GetTick>
 80048da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d008      	beq.n	80048fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2280      	movs	r2, #128	@ 0x80
 80048ec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e052      	b.n	80049a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0216 	bic.w	r2, r2, #22
 8004908:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004918:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <HAL_DMA_Abort+0x62>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0208 	bic.w	r2, r2, #8
 8004938:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800494a:	e013      	b.n	8004974 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800494c:	f7ff fd74 	bl	8004438 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b05      	cmp	r3, #5
 8004958:	d90c      	bls.n	8004974 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2203      	movs	r2, #3
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e015      	b.n	80049a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e4      	bne.n	800494c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004986:	223f      	movs	r2, #63	@ 0x3f
 8004988:	409a      	lsls	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d004      	beq.n	80049c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2280      	movs	r2, #128	@ 0x80
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e00c      	b.n	80049e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2205      	movs	r2, #5
 80049ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049f8:	4b8e      	ldr	r3, [pc, #568]	@ (8004c34 <HAL_DMA_IRQHandler+0x248>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a8e      	ldr	r2, [pc, #568]	@ (8004c38 <HAL_DMA_IRQHandler+0x24c>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	0a9b      	lsrs	r3, r3, #10
 8004a04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a16:	2208      	movs	r2, #8
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01a      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0204 	bic.w	r2, r2, #4
 8004a3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	2208      	movs	r2, #8
 8004a46:	409a      	lsls	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a50:	f043 0201 	orr.w	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	f043 0202 	orr.w	r2, r3, #2
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	2204      	movs	r2, #4
 8004a94:	409a      	lsls	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d012      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00b      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abc:	f043 0204 	orr.w	r2, r3, #4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac8:	2210      	movs	r2, #16
 8004aca:	409a      	lsls	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d043      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d03c      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d018      	beq.n	8004b2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d024      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	e01f      	b.n	8004b5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
 8004b2c:	e016      	b.n	8004b5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d107      	bne.n	8004b4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0208 	bic.w	r2, r2, #8
 8004b4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b60:	2220      	movs	r2, #32
 8004b62:	409a      	lsls	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 808f 	beq.w	8004c8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8087 	beq.w	8004c8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b82:	2220      	movs	r2, #32
 8004b84:	409a      	lsls	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b05      	cmp	r3, #5
 8004b94:	d136      	bne.n	8004c04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0216 	bic.w	r2, r2, #22
 8004ba4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <HAL_DMA_IRQHandler+0x1da>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0208 	bic.w	r2, r2, #8
 8004bd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bda:	223f      	movs	r2, #63	@ 0x3f
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d07e      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
        }
        return;
 8004c02:	e079      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01d      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d031      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
 8004c30:	e02c      	b.n	8004c8c <HAL_DMA_IRQHandler+0x2a0>
 8004c32:	bf00      	nop
 8004c34:	20000030 	.word	0x20000030
 8004c38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d023      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4798      	blx	r3
 8004c4c:	e01e      	b.n	8004c8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10f      	bne.n	8004c7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0210 	bic.w	r2, r2, #16
 8004c6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d032      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d022      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2205      	movs	r2, #5
 8004ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d307      	bcc.n	8004cd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f2      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x2cc>
 8004cd2:	e000      	b.n	8004cd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004cd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
 8004cf6:	e000      	b.n	8004cfa <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cf8:	bf00      	nop
    }
  }
}
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d108      	bne.n	8004d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d3e:	e007      	b.n	8004d50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	3b10      	subs	r3, #16
 8004d6c:	4a14      	ldr	r2, [pc, #80]	@ (8004dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d76:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d909      	bls.n	8004d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d9c:	e007      	b.n	8004dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	aaaaaaab 	.word	0xaaaaaaab
 8004dc4:	080126f0 	.word	0x080126f0

08004dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d11f      	bne.n	8004e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d856      	bhi.n	8004e96 <DMA_CheckFifoParam+0xce>
 8004de8:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <DMA_CheckFifoParam+0x28>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e13 	.word	0x08004e13
 8004df8:	08004e01 	.word	0x08004e01
 8004dfc:	08004e97 	.word	0x08004e97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d046      	beq.n	8004e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e10:	e043      	b.n	8004e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e1a:	d140      	bne.n	8004e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e20:	e03d      	b.n	8004e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e2a:	d121      	bne.n	8004e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d837      	bhi.n	8004ea2 <DMA_CheckFifoParam+0xda>
 8004e32:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <DMA_CheckFifoParam+0x70>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e4f 	.word	0x08004e4f
 8004e40:	08004e49 	.word	0x08004e49
 8004e44:	08004e61 	.word	0x08004e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4c:	e030      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d025      	beq.n	8004ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5e:	e022      	b.n	8004ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e68:	d11f      	bne.n	8004eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e6e:	e01c      	b.n	8004eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d903      	bls.n	8004e7e <DMA_CheckFifoParam+0xb6>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d003      	beq.n	8004e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e7c:	e018      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
      break;
 8004e82:	e015      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      break;
 8004e94:	e00b      	b.n	8004eae <DMA_CheckFifoParam+0xe6>
      break;
 8004e96:	bf00      	nop
 8004e98:	e00a      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e008      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e006      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e004      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eae:	bf00      	nop
    }
  } 
  
  return status; 
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b089      	sub	sp, #36	@ 0x24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	e16b      	b.n	80051b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004edc:	2201      	movs	r2, #1
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4013      	ands	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	f040 815a 	bne.w	80051ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d005      	beq.n	8004f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d130      	bne.n	8004f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4013      	ands	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f48:	2201      	movs	r2, #1
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 0201 	and.w	r2, r3, #1
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d017      	beq.n	8004fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d123      	bne.n	8005004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	08da      	lsrs	r2, r3, #3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3208      	adds	r2, #8
 8004fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	220f      	movs	r2, #15
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	08da      	lsrs	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3208      	adds	r2, #8
 8004ffe:	69b9      	ldr	r1, [r7, #24]
 8005000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	2203      	movs	r2, #3
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0203 	and.w	r2, r3, #3
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80b4 	beq.w	80051ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	4b60      	ldr	r3, [pc, #384]	@ (80051cc <HAL_GPIO_Init+0x30c>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504e:	4a5f      	ldr	r2, [pc, #380]	@ (80051cc <HAL_GPIO_Init+0x30c>)
 8005050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005054:	6453      	str	r3, [r2, #68]	@ 0x44
 8005056:	4b5d      	ldr	r3, [pc, #372]	@ (80051cc <HAL_GPIO_Init+0x30c>)
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005062:	4a5b      	ldr	r2, [pc, #364]	@ (80051d0 <HAL_GPIO_Init+0x310>)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	089b      	lsrs	r3, r3, #2
 8005068:	3302      	adds	r3, #2
 800506a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	220f      	movs	r2, #15
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a52      	ldr	r2, [pc, #328]	@ (80051d4 <HAL_GPIO_Init+0x314>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d02b      	beq.n	80050e6 <HAL_GPIO_Init+0x226>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a51      	ldr	r2, [pc, #324]	@ (80051d8 <HAL_GPIO_Init+0x318>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d025      	beq.n	80050e2 <HAL_GPIO_Init+0x222>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a50      	ldr	r2, [pc, #320]	@ (80051dc <HAL_GPIO_Init+0x31c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01f      	beq.n	80050de <HAL_GPIO_Init+0x21e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a4f      	ldr	r2, [pc, #316]	@ (80051e0 <HAL_GPIO_Init+0x320>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d019      	beq.n	80050da <HAL_GPIO_Init+0x21a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a4e      	ldr	r2, [pc, #312]	@ (80051e4 <HAL_GPIO_Init+0x324>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_GPIO_Init+0x216>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a4d      	ldr	r2, [pc, #308]	@ (80051e8 <HAL_GPIO_Init+0x328>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00d      	beq.n	80050d2 <HAL_GPIO_Init+0x212>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a4c      	ldr	r2, [pc, #304]	@ (80051ec <HAL_GPIO_Init+0x32c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d007      	beq.n	80050ce <HAL_GPIO_Init+0x20e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a4b      	ldr	r2, [pc, #300]	@ (80051f0 <HAL_GPIO_Init+0x330>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d101      	bne.n	80050ca <HAL_GPIO_Init+0x20a>
 80050c6:	2307      	movs	r3, #7
 80050c8:	e00e      	b.n	80050e8 <HAL_GPIO_Init+0x228>
 80050ca:	2308      	movs	r3, #8
 80050cc:	e00c      	b.n	80050e8 <HAL_GPIO_Init+0x228>
 80050ce:	2306      	movs	r3, #6
 80050d0:	e00a      	b.n	80050e8 <HAL_GPIO_Init+0x228>
 80050d2:	2305      	movs	r3, #5
 80050d4:	e008      	b.n	80050e8 <HAL_GPIO_Init+0x228>
 80050d6:	2304      	movs	r3, #4
 80050d8:	e006      	b.n	80050e8 <HAL_GPIO_Init+0x228>
 80050da:	2303      	movs	r3, #3
 80050dc:	e004      	b.n	80050e8 <HAL_GPIO_Init+0x228>
 80050de:	2302      	movs	r3, #2
 80050e0:	e002      	b.n	80050e8 <HAL_GPIO_Init+0x228>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_GPIO_Init+0x228>
 80050e6:	2300      	movs	r3, #0
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	f002 0203 	and.w	r2, r2, #3
 80050ee:	0092      	lsls	r2, r2, #2
 80050f0:	4093      	lsls	r3, r2
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050f8:	4935      	ldr	r1, [pc, #212]	@ (80051d0 <HAL_GPIO_Init+0x310>)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	3302      	adds	r3, #2
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005106:	4b3b      	ldr	r3, [pc, #236]	@ (80051f4 <HAL_GPIO_Init+0x334>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800512a:	4a32      	ldr	r2, [pc, #200]	@ (80051f4 <HAL_GPIO_Init+0x334>)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005130:	4b30      	ldr	r3, [pc, #192]	@ (80051f4 <HAL_GPIO_Init+0x334>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005154:	4a27      	ldr	r2, [pc, #156]	@ (80051f4 <HAL_GPIO_Init+0x334>)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800515a:	4b26      	ldr	r3, [pc, #152]	@ (80051f4 <HAL_GPIO_Init+0x334>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800517e:	4a1d      	ldr	r2, [pc, #116]	@ (80051f4 <HAL_GPIO_Init+0x334>)
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005184:	4b1b      	ldr	r3, [pc, #108]	@ (80051f4 <HAL_GPIO_Init+0x334>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	43db      	mvns	r3, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4013      	ands	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051a8:	4a12      	ldr	r2, [pc, #72]	@ (80051f4 <HAL_GPIO_Init+0x334>)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3301      	adds	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	f67f ae90 	bls.w	8004edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	3724      	adds	r7, #36	@ 0x24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40013800 	.word	0x40013800
 80051d4:	40020000 	.word	0x40020000
 80051d8:	40020400 	.word	0x40020400
 80051dc:	40020800 	.word	0x40020800
 80051e0:	40020c00 	.word	0x40020c00
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40021400 	.word	0x40021400
 80051ec:	40021800 	.word	0x40021800
 80051f0:	40021c00 	.word	0x40021c00
 80051f4:	40013c00 	.word	0x40013c00

080051f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
 8005204:	4613      	mov	r3, r2
 8005206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005208:	787b      	ldrb	r3, [r7, #1]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005214:	e003      	b.n	800521e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005216:	887b      	ldrh	r3, [r7, #2]
 8005218:	041a      	lsls	r2, r3, #16
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	619a      	str	r2, [r3, #24]
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800523c:	887a      	ldrh	r2, [r7, #2]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4013      	ands	r3, r2
 8005242:	041a      	lsls	r2, r3, #16
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	43d9      	mvns	r1, r3
 8005248:	887b      	ldrh	r3, [r7, #2]
 800524a:	400b      	ands	r3, r1
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	619a      	str	r2, [r3, #24]
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800526a:	4b08      	ldr	r3, [pc, #32]	@ (800528c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800526c:	695a      	ldr	r2, [r3, #20]
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d006      	beq.n	8005284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005276:	4a05      	ldr	r2, [pc, #20]	@ (800528c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	4618      	mov	r0, r3
 8005280:	f7fd fbf2 	bl	8002a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40013c00 	.word	0x40013c00

08005290 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af02      	add	r7, sp, #8
 8005296:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e101      	b.n	80054a6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f008 fb5f 	bl	800d980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2203      	movs	r2, #3
 80052c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052d0:	d102      	bne.n	80052d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f004 ff46 	bl	800a16e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7c1a      	ldrb	r2, [r3, #16]
 80052ea:	f88d 2000 	strb.w	r2, [sp]
 80052ee:	3304      	adds	r3, #4
 80052f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052f2:	f004 fe25 	bl	8009f40 <USB_CoreInit>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0ce      	b.n	80054a6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f004 ff3e 	bl	800a190 <USB_SetCurrentMode>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e0bf      	b.n	80054a6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
 800532a:	e04a      	b.n	80053c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800532c:	7bfa      	ldrb	r2, [r7, #15]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	3315      	adds	r3, #21
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005340:	7bfa      	ldrb	r2, [r7, #15]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	3314      	adds	r3, #20
 8005350:	7bfa      	ldrb	r2, [r7, #15]
 8005352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005354:	7bfa      	ldrb	r2, [r7, #15]
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	b298      	uxth	r0, r3
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	332e      	adds	r3, #46	@ 0x2e
 8005368:	4602      	mov	r2, r0
 800536a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800536c:	7bfa      	ldrb	r2, [r7, #15]
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	3318      	adds	r3, #24
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	331c      	adds	r3, #28
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3320      	adds	r3, #32
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3324      	adds	r3, #36	@ 0x24
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	3301      	adds	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	791b      	ldrb	r3, [r3, #4]
 80053c6:	7bfa      	ldrb	r2, [r7, #15]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d3af      	bcc.n	800532c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e044      	b.n	800545c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800542a:	7bfa      	ldrb	r2, [r7, #15]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	3301      	adds	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	791b      	ldrb	r3, [r3, #4]
 8005460:	7bfa      	ldrb	r2, [r7, #15]
 8005462:	429a      	cmp	r2, r3
 8005464:	d3b5      	bcc.n	80053d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7c1a      	ldrb	r2, [r3, #16]
 800546e:	f88d 2000 	strb.w	r2, [sp]
 8005472:	3304      	adds	r3, #4
 8005474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005476:	f004 fed7 	bl	800a228 <USB_DevInit>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e00c      	b.n	80054a6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f005 ff21 	bl	800b2e6 <USB_DevDisconnect>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_PCD_Start+0x1c>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e022      	b.n	8005510 <HAL_PCD_Start+0x62>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d105      	bne.n	80054f2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f004 fe28 	bl	800a14c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f005 fecf 	bl	800b2a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b08d      	sub	sp, #52	@ 0x34
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f005 ff8d 	bl	800b44e <USB_GetMode>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	f040 848c 	bne.w	8005e54 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f005 fef1 	bl	800b328 <USB_ReadInterrupts>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8482 	beq.w	8005e52 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f005 fede 	bl	800b328 <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d107      	bne.n	8005586 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f002 0202 	and.w	r2, r2, #2
 8005584:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f005 fecc 	bl	800b328 <USB_ReadInterrupts>
 8005590:	4603      	mov	r3, r0
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b10      	cmp	r3, #16
 8005598:	d161      	bne.n	800565e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0210 	bic.w	r2, r2, #16
 80055a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f003 020f 	and.w	r2, r3, #15
 80055b6:	4613      	mov	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	3304      	adds	r3, #4
 80055c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	0c5b      	lsrs	r3, r3, #17
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d124      	bne.n	8005620 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d035      	beq.n	800564e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6a38      	ldr	r0, [r7, #32]
 80055f6:	f005 fd03 	bl	800b000 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005606:	441a      	add	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005618:	441a      	add	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	615a      	str	r2, [r3, #20]
 800561e:	e016      	b.n	800564e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	0c5b      	lsrs	r3, r3, #17
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2b06      	cmp	r3, #6
 800562a:	d110      	bne.n	800564e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005632:	2208      	movs	r2, #8
 8005634:	4619      	mov	r1, r3
 8005636:	6a38      	ldr	r0, [r7, #32]
 8005638:	f005 fce2 	bl	800b000 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	091b      	lsrs	r3, r3, #4
 8005644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005648:	441a      	add	r2, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0210 	orr.w	r2, r2, #16
 800565c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f005 fe60 	bl	800b328 <USB_ReadInterrupts>
 8005668:	4603      	mov	r3, r0
 800566a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800566e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005672:	f040 80a7 	bne.w	80057c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f005 fe65 	bl	800b34e <USB_ReadDevAllOutEpInterrupt>
 8005684:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005686:	e099      	b.n	80057bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 808e 	beq.w	80057b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	4611      	mov	r1, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	f005 fe89 	bl	800b3b6 <USB_ReadDevOutEPInterrupt>
 80056a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00c      	beq.n	80056ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056bc:	461a      	mov	r2, r3
 80056be:	2301      	movs	r3, #1
 80056c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80056c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fea3 	bl	8006410 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00c      	beq.n	80056ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	2308      	movs	r3, #8
 80056e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80056e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 ff79 	bl	80065e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005704:	461a      	mov	r2, r3
 8005706:	2310      	movs	r3, #16
 8005708:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d030      	beq.n	8005776 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b80      	cmp	r3, #128	@ 0x80
 800571e:	d109      	bne.n	8005734 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800572e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005732:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005736:	4613      	mov	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	4413      	add	r3, r2
 8005746:	3304      	adds	r3, #4
 8005748:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	78db      	ldrb	r3, [r3, #3]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d108      	bne.n	8005764 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	b2db      	uxtb	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f008 fa14 	bl	800db8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005770:	461a      	mov	r2, r3
 8005772:	2302      	movs	r3, #2
 8005774:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578c:	461a      	mov	r2, r3
 800578e:	2320      	movs	r3, #32
 8005790:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a8:	461a      	mov	r2, r3
 80057aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80057ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b2:	3301      	adds	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80057bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f47f af62 	bne.w	8005688 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f005 fdad 	bl	800b328 <USB_ReadInterrupts>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057d8:	f040 80db 	bne.w	8005992 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f005 fdce 	bl	800b382 <USB_ReadDevAllInEpInterrupt>
 80057e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80057ec:	e0cd      	b.n	800598a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80c2 	beq.w	800597e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f005 fdf4 	bl	800b3f2 <USB_ReadDevInEPInterrupt>
 800580a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d057      	beq.n	80058c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	2201      	movs	r2, #1
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	43db      	mvns	r3, r3
 8005830:	69f9      	ldr	r1, [r7, #28]
 8005832:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005836:	4013      	ands	r3, r2
 8005838:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005846:	461a      	mov	r2, r3
 8005848:	2301      	movs	r3, #1
 800584a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	799b      	ldrb	r3, [r3, #6]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d132      	bne.n	80058ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	3320      	adds	r3, #32
 8005864:	6819      	ldr	r1, [r3, #0]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4403      	add	r3, r0
 8005874:	331c      	adds	r3, #28
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4419      	add	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4403      	add	r3, r0
 8005888:	3320      	adds	r3, #32
 800588a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d113      	bne.n	80058ba <HAL_PCD_IRQHandler+0x3a2>
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005896:	4613      	mov	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	3324      	adds	r3, #36	@ 0x24
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d108      	bne.n	80058ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058b2:	461a      	mov	r2, r3
 80058b4:	2101      	movs	r1, #1
 80058b6:	f005 fdfb 	bl	800b4b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f008 f8de 	bl	800da82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058dc:	461a      	mov	r2, r3
 80058de:	2308      	movs	r3, #8
 80058e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f8:	461a      	mov	r2, r3
 80058fa:	2310      	movs	r3, #16
 80058fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005914:	461a      	mov	r2, r3
 8005916:	2340      	movs	r3, #64	@ 0x40
 8005918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d023      	beq.n	800596c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005926:	6a38      	ldr	r0, [r7, #32]
 8005928:	f004 fde2 	bl	800a4f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800592c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	3310      	adds	r3, #16
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	4413      	add	r3, r2
 800593c:	3304      	adds	r3, #4
 800593e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	78db      	ldrb	r3, [r3, #3]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d108      	bne.n	800595a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	b2db      	uxtb	r3, r3
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f008 f92b 	bl	800dbb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005966:	461a      	mov	r2, r3
 8005968:	2302      	movs	r3, #2
 800596a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005976:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fcbd 	bl	80062f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	3301      	adds	r3, #1
 8005982:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800598a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598c:	2b00      	cmp	r3, #0
 800598e:	f47f af2e 	bne.w	80057ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f005 fcc6 	bl	800b328 <USB_ReadInterrupts>
 800599c:	4603      	mov	r3, r0
 800599e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a6:	d122      	bne.n	80059ee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d108      	bne.n	80059d8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059ce:	2100      	movs	r1, #0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fea3 	bl	800671c <HAL_PCDEx_LPM_Callback>
 80059d6:	e002      	b.n	80059de <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f008 f8c9 	bl	800db70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80059ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f005 fc98 	bl	800b328 <USB_ReadInterrupts>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a02:	d112      	bne.n	8005a2a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d102      	bne.n	8005a1a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f008 f885 	bl	800db24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005a28:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f005 fc7a 	bl	800b328 <USB_ReadInterrupts>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3e:	f040 80b7 	bne.w	8005bb0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2110      	movs	r1, #16
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f004 fd47 	bl	800a4f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a66:	e046      	b.n	8005af6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a74:	461a      	mov	r2, r3
 8005a76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a7a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005aae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ace:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005aee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af2:	3301      	adds	r3, #1
 8005af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	791b      	ldrb	r3, [r3, #4]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d3b2      	bcc.n	8005a68 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b10:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005b14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7bdb      	ldrb	r3, [r3, #15]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d016      	beq.n	8005b4c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b2e:	f043 030b 	orr.w	r3, r3, #11
 8005b32:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b44:	f043 030b 	orr.w	r3, r3, #11
 8005b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b4a:	e015      	b.n	8005b78 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005b5e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005b62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b72:	f043 030b 	orr.w	r3, r3, #11
 8005b76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f005 fc88 	bl	800b4b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695a      	ldr	r2, [r3, #20]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f005 fbb7 	bl	800b328 <USB_ReadInterrupts>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc4:	d123      	bne.n	8005c0e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f005 fc4d 	bl	800b46a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f004 fd04 	bl	800a5e2 <USB_GetDevSpeed>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681c      	ldr	r4, [r3, #0]
 8005be6:	f001 fa07 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8005bea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f004 fa08 	bl	800a008 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f007 ff6a 	bl	800dad2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f005 fb88 	bl	800b328 <USB_ReadInterrupts>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d10a      	bne.n	8005c38 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f007 ff47 	bl	800dab6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f002 0208 	and.w	r2, r2, #8
 8005c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f005 fb73 	bl	800b328 <USB_ReadInterrupts>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c48:	2b80      	cmp	r3, #128	@ 0x80
 8005c4a:	d123      	bne.n	8005c94 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c58:	2301      	movs	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5c:	e014      	b.n	8005c88 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c62:	4613      	mov	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d105      	bne.n	8005c82 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fb0a 	bl	8006296 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	3301      	adds	r3, #1
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d3e4      	bcc.n	8005c5e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f005 fb45 	bl	800b328 <USB_ReadInterrupts>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ca4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca8:	d13c      	bne.n	8005d24 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005caa:	2301      	movs	r3, #1
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cae:	e02b      	b.n	8005d08 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	3318      	adds	r3, #24
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d115      	bne.n	8005d02 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005cd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da12      	bge.n	8005d02 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	440b      	add	r3, r1
 8005cea:	3317      	adds	r3, #23
 8005cec:	2201      	movs	r2, #1
 8005cee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 faca 	bl	8006296 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	3301      	adds	r3, #1
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	791b      	ldrb	r3, [r3, #4]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d3cd      	bcc.n	8005cb0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f005 fafd 	bl	800b328 <USB_ReadInterrupts>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d38:	d156      	bne.n	8005de8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d3e:	e045      	b.n	8005dcc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d54:	4613      	mov	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d12e      	bne.n	8005dc6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da2b      	bge.n	8005dc6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005d7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d121      	bne.n	8005dc6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d86:	4613      	mov	r3, r2
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005d94:	2201      	movs	r2, #1
 8005d96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dc2:	6053      	str	r3, [r2, #4]
            break;
 8005dc4:	e008      	b.n	8005dd8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	3301      	adds	r3, #1
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	791b      	ldrb	r3, [r3, #4]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d3b3      	bcc.n	8005d40 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f005 fa9b 	bl	800b328 <USB_ReadInterrupts>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfc:	d10a      	bne.n	8005e14 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f007 fee8 	bl	800dbd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f005 fa85 	bl	800b328 <USB_ReadInterrupts>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d115      	bne.n	8005e54 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f007 fed8 	bl	800dbf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6859      	ldr	r1, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
 8005e50:	e000      	b.n	8005e54 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005e52:	bf00      	nop
    }
  }
}
 8005e54:	3734      	adds	r7, #52	@ 0x34
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd90      	pop	{r4, r7, pc}

08005e5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_PCD_SetAddress+0x1a>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e012      	b.n	8005e9a <HAL_PCD_SetAddress+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	78fa      	ldrb	r2, [r7, #3]
 8005e80:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f005 f9e4 	bl	800b258 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	4608      	mov	r0, r1
 8005eac:	4611      	mov	r1, r2
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	70fb      	strb	r3, [r7, #3]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	803b      	strh	r3, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	da0f      	bge.n	8005ee8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	f003 020f 	and.w	r2, r3, #15
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	3310      	adds	r3, #16
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4413      	add	r3, r2
 8005edc:	3304      	adds	r3, #4
 8005ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	705a      	strb	r2, [r3, #1]
 8005ee6:	e00f      	b.n	8005f08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	f003 020f 	and.w	r2, r3, #15
 8005eee:	4613      	mov	r3, r2
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	3304      	adds	r3, #4
 8005f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005f14:	883b      	ldrh	r3, [r7, #0]
 8005f16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	78ba      	ldrb	r2, [r7, #2]
 8005f22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f36:	78bb      	ldrb	r3, [r7, #2]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d102      	bne.n	8005f42 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_PCD_EP_Open+0xae>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e00e      	b.n	8005f6e <HAL_PCD_EP_Open+0xcc>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68f9      	ldr	r1, [r7, #12]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 fb64 	bl	800a62c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da0f      	bge.n	8005faa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	f003 020f 	and.w	r2, r3, #15
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	3310      	adds	r3, #16
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	705a      	strb	r2, [r3, #1]
 8005fa8:	e00f      	b.n	8005fca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_PCD_EP_Close+0x6e>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e00e      	b.n	8006002 <HAL_PCD_EP_Close+0x8c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68f9      	ldr	r1, [r7, #12]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f004 fba2 	bl	800a73c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	460b      	mov	r3, r1
 8006018:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	f003 020f 	and.w	r2, r3, #15
 8006020:	4613      	mov	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	3304      	adds	r3, #4
 8006032:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2200      	movs	r2, #0
 800604a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800604c:	7afb      	ldrb	r3, [r7, #11]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	b2da      	uxtb	r2, r3
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	799b      	ldrb	r3, [r3, #6]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d102      	bne.n	8006066 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	799b      	ldrb	r3, [r3, #6]
 800606e:	461a      	mov	r2, r3
 8006070:	6979      	ldr	r1, [r7, #20]
 8006072:	f004 fc3f 	bl	800a8f4 <USB_EPStartXfer>

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80060a2:	681b      	ldr	r3, [r3, #0]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	460b      	mov	r3, r1
 80060be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	4613      	mov	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	3310      	adds	r3, #16
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	3304      	adds	r3, #4
 80060d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2200      	movs	r2, #0
 80060e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2201      	movs	r2, #1
 80060ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060f0:	7afb      	ldrb	r3, [r7, #11]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	799b      	ldrb	r3, [r3, #6]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d102      	bne.n	800610a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	799b      	ldrb	r3, [r3, #6]
 8006112:	461a      	mov	r2, r3
 8006114:	6979      	ldr	r1, [r7, #20]
 8006116:	f004 fbed 	bl	800a8f4 <USB_EPStartXfer>

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	7912      	ldrb	r2, [r2, #4]
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e04f      	b.n	80061e2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da0f      	bge.n	800616a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	4613      	mov	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3310      	adds	r3, #16
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	705a      	strb	r2, [r3, #1]
 8006168:	e00d      	b.n	8006186 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	4413      	add	r3, r2
 800617c:	3304      	adds	r3, #4
 800617e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	b2da      	uxtb	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_PCD_EP_SetStall+0x82>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e01d      	b.n	80061e2 <HAL_PCD_EP_SetStall+0xbe>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f004 ff7b 	bl	800b0b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7999      	ldrb	r1, [r3, #6]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061d2:	461a      	mov	r2, r3
 80061d4:	f005 f96c 	bl	800b4b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	7912      	ldrb	r2, [r2, #4]
 8006200:	4293      	cmp	r3, r2
 8006202:	d901      	bls.n	8006208 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e042      	b.n	800628e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800620c:	2b00      	cmp	r3, #0
 800620e:	da0f      	bge.n	8006230 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	f003 020f 	and.w	r2, r3, #15
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	3310      	adds	r3, #16
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	3304      	adds	r3, #4
 8006226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	705a      	strb	r2, [r3, #1]
 800622e:	e00f      	b.n	8006250 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	f003 020f 	and.w	r2, r3, #15
 8006236:	4613      	mov	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	3304      	adds	r3, #4
 8006248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_PCD_EP_ClrStall+0x86>
 800626c:	2302      	movs	r3, #2
 800626e:	e00e      	b.n	800628e <HAL_PCD_EP_ClrStall+0xa4>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68f9      	ldr	r1, [r7, #12]
 800627e:	4618      	mov	r0, r3
 8006280:	f004 ff84 	bl	800b18c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80062a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da0c      	bge.n	80062c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 020f 	and.w	r2, r3, #15
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	3310      	adds	r3, #16
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	3304      	adds	r3, #4
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e00c      	b.n	80062de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	f003 020f 	and.w	r2, r3, #15
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	4413      	add	r3, r2
 80062da:	3304      	adds	r3, #4
 80062dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68f9      	ldr	r1, [r7, #12]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f004 fda3 	bl	800ae30 <USB_EPStopXfer>
 80062ea:	4603      	mov	r3, r0
 80062ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80062ee:	7afb      	ldrb	r3, [r7, #11]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	@ 0x28
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	4613      	mov	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	3310      	adds	r3, #16
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4413      	add	r3, r2
 800631c:	3304      	adds	r3, #4
 800631e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	695a      	ldr	r2, [r3, #20]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	429a      	cmp	r2, r3
 800632a:	d901      	bls.n	8006330 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e06b      	b.n	8006408 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	429a      	cmp	r2, r3
 8006344:	d902      	bls.n	800634c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3303      	adds	r3, #3
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006354:	e02a      	b.n	80063ac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	429a      	cmp	r2, r3
 800636a:	d902      	bls.n	8006372 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3303      	adds	r3, #3
 8006376:	089b      	lsrs	r3, r3, #2
 8006378:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68d9      	ldr	r1, [r3, #12]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4603      	mov	r3, r0
 800638e:	6978      	ldr	r0, [r7, #20]
 8006390:	f004 fdf8 	bl	800af84 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	441a      	add	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	695a      	ldr	r2, [r3, #20]
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	441a      	add	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d809      	bhi.n	80063d6 <PCD_WriteEmptyTxFifo+0xde>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d203      	bcs.n	80063d6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1bf      	bne.n	8006356 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d811      	bhi.n	8006406 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	2201      	movs	r2, #1
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	43db      	mvns	r3, r3
 80063fc:	6939      	ldr	r1, [r7, #16]
 80063fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006402:	4013      	ands	r3, r2
 8006404:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3720      	adds	r7, #32
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	333c      	adds	r3, #60	@ 0x3c
 8006428:	3304      	adds	r3, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	799b      	ldrb	r3, [r3, #6]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d17b      	bne.n	800653e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d015      	beq.n	800647c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4a61      	ldr	r2, [pc, #388]	@ (80065d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	f240 80b9 	bls.w	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 80b3 	beq.w	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	461a      	mov	r2, r3
 8006474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006478:	6093      	str	r3, [r2, #8]
 800647a:	e0a7      	b.n	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006492:	461a      	mov	r2, r3
 8006494:	2320      	movs	r3, #32
 8006496:	6093      	str	r3, [r2, #8]
 8006498:	e098      	b.n	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 8093 	bne.w	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	4a4b      	ldr	r2, [pc, #300]	@ (80065d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d90f      	bls.n	80064ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c4:	461a      	mov	r2, r3
 80064c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ca:	6093      	str	r3, [r2, #8]
 80064cc:	e07e      	b.n	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	0159      	lsls	r1, r3, #5
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	440b      	add	r3, r1
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d114      	bne.n	8006530 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006518:	461a      	mov	r2, r3
 800651a:	2101      	movs	r1, #1
 800651c:	f004 ffc8 	bl	800b4b0 <USB_EP0_OutStart>
 8006520:	e006      	b.n	8006530 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	441a      	add	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f007 fa88 	bl	800da4c <HAL_PCD_DataOutStageCallback>
 800653c:	e046      	b.n	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4a26      	ldr	r2, [pc, #152]	@ (80065dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d124      	bne.n	8006590 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655c:	461a      	mov	r2, r3
 800655e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006562:	6093      	str	r3, [r2, #8]
 8006564:	e032      	b.n	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657c:	461a      	mov	r2, r3
 800657e:	2320      	movs	r3, #32
 8006580:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f007 fa5f 	bl	800da4c <HAL_PCD_DataOutStageCallback>
 800658e:	e01d      	b.n	80065cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d114      	bne.n	80065c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d108      	bne.n	80065c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065b8:	461a      	mov	r2, r3
 80065ba:	2100      	movs	r1, #0
 80065bc:	f004 ff78 	bl	800b4b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f007 fa40 	bl	800da4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	4f54300a 	.word	0x4f54300a
 80065dc:	4f54310a 	.word	0x4f54310a

080065e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	333c      	adds	r3, #60	@ 0x3c
 80065f8:	3304      	adds	r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a15      	ldr	r2, [pc, #84]	@ (8006668 <PCD_EP_OutSetupPacket_int+0x88>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d90e      	bls.n	8006634 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662c:	461a      	mov	r2, r3
 800662e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006632:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f007 f9f7 	bl	800da28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a0a      	ldr	r2, [pc, #40]	@ (8006668 <PCD_EP_OutSetupPacket_int+0x88>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d90c      	bls.n	800665c <PCD_EP_OutSetupPacket_int+0x7c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	799b      	ldrb	r3, [r3, #6]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d108      	bne.n	800665c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006654:	461a      	mov	r2, r3
 8006656:	2101      	movs	r1, #1
 8006658:	f004 ff2a 	bl	800b4b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	4f54300a 	.word	0x4f54300a

0800666c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
 8006678:	4613      	mov	r3, r2
 800667a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006682:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d107      	bne.n	800669a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800668a:	883b      	ldrh	r3, [r7, #0]
 800668c:	0419      	lsls	r1, r3, #16
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	430a      	orrs	r2, r1
 8006696:	629a      	str	r2, [r3, #40]	@ 0x28
 8006698:	e028      	b.n	80066ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	0c1b      	lsrs	r3, r3, #16
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	4413      	add	r3, r2
 80066a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	e00d      	b.n	80066ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	3340      	adds	r3, #64	@ 0x40
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	0c1b      	lsrs	r3, r3, #16
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	3301      	adds	r3, #1
 80066c8:	73fb      	strb	r3, [r7, #15]
 80066ca:	7bfa      	ldrb	r2, [r7, #15]
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d3ec      	bcc.n	80066ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066d4:	883b      	ldrh	r3, [r7, #0]
 80066d6:	0418      	lsls	r0, r3, #16
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6819      	ldr	r1, [r3, #0]
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	3b01      	subs	r3, #1
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	4302      	orrs	r2, r0
 80066e4:	3340      	adds	r3, #64	@ 0x40
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	887a      	ldrh	r2, [r7, #2]
 800670c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e267      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d075      	beq.n	800683e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006752:	4b88      	ldr	r3, [pc, #544]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
 800675a:	2b04      	cmp	r3, #4
 800675c:	d00c      	beq.n	8006778 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800675e:	4b85      	ldr	r3, [pc, #532]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006766:	2b08      	cmp	r3, #8
 8006768:	d112      	bne.n	8006790 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800676a:	4b82      	ldr	r3, [pc, #520]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006776:	d10b      	bne.n	8006790 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006778:	4b7e      	ldr	r3, [pc, #504]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d05b      	beq.n	800683c <HAL_RCC_OscConfig+0x108>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d157      	bne.n	800683c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e242      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006798:	d106      	bne.n	80067a8 <HAL_RCC_OscConfig+0x74>
 800679a:	4b76      	ldr	r3, [pc, #472]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a75      	ldr	r2, [pc, #468]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	e01d      	b.n	80067e4 <HAL_RCC_OscConfig+0xb0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067b0:	d10c      	bne.n	80067cc <HAL_RCC_OscConfig+0x98>
 80067b2:	4b70      	ldr	r3, [pc, #448]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a6f      	ldr	r2, [pc, #444]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	4b6d      	ldr	r3, [pc, #436]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a6c      	ldr	r2, [pc, #432]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	e00b      	b.n	80067e4 <HAL_RCC_OscConfig+0xb0>
 80067cc:	4b69      	ldr	r3, [pc, #420]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a68      	ldr	r2, [pc, #416]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	4b66      	ldr	r3, [pc, #408]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a65      	ldr	r2, [pc, #404]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80067de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d013      	beq.n	8006814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7fd fe24 	bl	8004438 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067f4:	f7fd fe20 	bl	8004438 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b64      	cmp	r3, #100	@ 0x64
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e207      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006806:	4b5b      	ldr	r3, [pc, #364]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0xc0>
 8006812:	e014      	b.n	800683e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006814:	f7fd fe10 	bl	8004438 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800681c:	f7fd fe0c 	bl	8004438 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b64      	cmp	r3, #100	@ 0x64
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e1f3      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800682e:	4b51      	ldr	r3, [pc, #324]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0xe8>
 800683a:	e000      	b.n	800683e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800683c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d063      	beq.n	8006912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800684a:	4b4a      	ldr	r3, [pc, #296]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 030c 	and.w	r3, r3, #12
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00b      	beq.n	800686e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006856:	4b47      	ldr	r3, [pc, #284]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800685e:	2b08      	cmp	r3, #8
 8006860:	d11c      	bne.n	800689c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006862:	4b44      	ldr	r3, [pc, #272]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d116      	bne.n	800689c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800686e:	4b41      	ldr	r3, [pc, #260]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_RCC_OscConfig+0x152>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d001      	beq.n	8006886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e1c7      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006886:	4b3b      	ldr	r3, [pc, #236]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4937      	ldr	r1, [pc, #220]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006896:	4313      	orrs	r3, r2
 8006898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800689a:	e03a      	b.n	8006912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d020      	beq.n	80068e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068a4:	4b34      	ldr	r3, [pc, #208]	@ (8006978 <HAL_RCC_OscConfig+0x244>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068aa:	f7fd fdc5 	bl	8004438 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068b2:	f7fd fdc1 	bl	8004438 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e1a8      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d0:	4b28      	ldr	r3, [pc, #160]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	4925      	ldr	r1, [pc, #148]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	600b      	str	r3, [r1, #0]
 80068e4:	e015      	b.n	8006912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068e6:	4b24      	ldr	r3, [pc, #144]	@ (8006978 <HAL_RCC_OscConfig+0x244>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fd fda4 	bl	8004438 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f4:	f7fd fda0 	bl	8004438 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e187      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006906:	4b1b      	ldr	r3, [pc, #108]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d036      	beq.n	800698c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d016      	beq.n	8006954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006926:	4b15      	ldr	r3, [pc, #84]	@ (800697c <HAL_RCC_OscConfig+0x248>)
 8006928:	2201      	movs	r2, #1
 800692a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692c:	f7fd fd84 	bl	8004438 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006934:	f7fd fd80 	bl	8004438 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e167      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006946:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <HAL_RCC_OscConfig+0x240>)
 8006948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f0      	beq.n	8006934 <HAL_RCC_OscConfig+0x200>
 8006952:	e01b      	b.n	800698c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006954:	4b09      	ldr	r3, [pc, #36]	@ (800697c <HAL_RCC_OscConfig+0x248>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800695a:	f7fd fd6d 	bl	8004438 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006960:	e00e      	b.n	8006980 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006962:	f7fd fd69 	bl	8004438 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d907      	bls.n	8006980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e150      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
 8006974:	40023800 	.word	0x40023800
 8006978:	42470000 	.word	0x42470000
 800697c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006980:	4b88      	ldr	r3, [pc, #544]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ea      	bne.n	8006962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8097 	beq.w	8006ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800699e:	4b81      	ldr	r3, [pc, #516]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10f      	bne.n	80069ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069aa:	2300      	movs	r3, #0
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	4b7d      	ldr	r3, [pc, #500]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 80069b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80069ba:	4b7a      	ldr	r3, [pc, #488]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069c6:	2301      	movs	r3, #1
 80069c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ca:	4b77      	ldr	r3, [pc, #476]	@ (8006ba8 <HAL_RCC_OscConfig+0x474>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d118      	bne.n	8006a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069d6:	4b74      	ldr	r3, [pc, #464]	@ (8006ba8 <HAL_RCC_OscConfig+0x474>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a73      	ldr	r2, [pc, #460]	@ (8006ba8 <HAL_RCC_OscConfig+0x474>)
 80069dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069e2:	f7fd fd29 	bl	8004438 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ea:	f7fd fd25 	bl	8004438 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e10c      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069fc:	4b6a      	ldr	r3, [pc, #424]	@ (8006ba8 <HAL_RCC_OscConfig+0x474>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0f0      	beq.n	80069ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCC_OscConfig+0x2ea>
 8006a10:	4b64      	ldr	r3, [pc, #400]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a14:	4a63      	ldr	r2, [pc, #396]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a1c:	e01c      	b.n	8006a58 <HAL_RCC_OscConfig+0x324>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b05      	cmp	r3, #5
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x30c>
 8006a26:	4b5f      	ldr	r3, [pc, #380]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2a:	4a5e      	ldr	r2, [pc, #376]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a2c:	f043 0304 	orr.w	r3, r3, #4
 8006a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a32:	4b5c      	ldr	r3, [pc, #368]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a36:	4a5b      	ldr	r2, [pc, #364]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a38:	f043 0301 	orr.w	r3, r3, #1
 8006a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a3e:	e00b      	b.n	8006a58 <HAL_RCC_OscConfig+0x324>
 8006a40:	4b58      	ldr	r3, [pc, #352]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a44:	4a57      	ldr	r2, [pc, #348]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a46:	f023 0301 	bic.w	r3, r3, #1
 8006a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a4c:	4b55      	ldr	r3, [pc, #340]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a50:	4a54      	ldr	r2, [pc, #336]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a52:	f023 0304 	bic.w	r3, r3, #4
 8006a56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d015      	beq.n	8006a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a60:	f7fd fcea 	bl	8004438 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a66:	e00a      	b.n	8006a7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a68:	f7fd fce6 	bl	8004438 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e0cb      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a7e:	4b49      	ldr	r3, [pc, #292]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0ee      	beq.n	8006a68 <HAL_RCC_OscConfig+0x334>
 8006a8a:	e014      	b.n	8006ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a8c:	f7fd fcd4 	bl	8004438 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a94:	f7fd fcd0 	bl	8004438 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e0b5      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1ee      	bne.n	8006a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d105      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006abc:	4b39      	ldr	r3, [pc, #228]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	4a38      	ldr	r2, [pc, #224]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ac6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80a1 	beq.w	8006c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ad2:	4b34      	ldr	r3, [pc, #208]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 030c 	and.w	r3, r3, #12
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d05c      	beq.n	8006b98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d141      	bne.n	8006b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ae6:	4b31      	ldr	r3, [pc, #196]	@ (8006bac <HAL_RCC_OscConfig+0x478>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aec:	f7fd fca4 	bl	8004438 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af4:	f7fd fca0 	bl	8004438 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e087      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b06:	4b27      	ldr	r3, [pc, #156]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f0      	bne.n	8006af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69da      	ldr	r2, [r3, #28]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b20:	019b      	lsls	r3, r3, #6
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	041b      	lsls	r3, r3, #16
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	491b      	ldr	r1, [pc, #108]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bac <HAL_RCC_OscConfig+0x478>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b42:	f7fd fc79 	bl	8004438 <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b4a:	f7fd fc75 	bl	8004438 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e05c      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x416>
 8006b68:	e054      	b.n	8006c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b6a:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <HAL_RCC_OscConfig+0x478>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b70:	f7fd fc62 	bl	8004438 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b78:	f7fd fc5e 	bl	8004438 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e045      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <HAL_RCC_OscConfig+0x470>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f0      	bne.n	8006b78 <HAL_RCC_OscConfig+0x444>
 8006b96:	e03d      	b.n	8006c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d107      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e038      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	40007000 	.word	0x40007000
 8006bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c20 <HAL_RCC_OscConfig+0x4ec>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d028      	beq.n	8006c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d121      	bne.n	8006c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d11a      	bne.n	8006c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006be0:	4013      	ands	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d111      	bne.n	8006c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d107      	bne.n	8006c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d001      	beq.n	8006c14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800

08006c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0cc      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c38:	4b68      	ldr	r3, [pc, #416]	@ (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d90c      	bls.n	8006c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c46:	4b65      	ldr	r3, [pc, #404]	@ (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4e:	4b63      	ldr	r3, [pc, #396]	@ (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0b8      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c78:	4b59      	ldr	r3, [pc, #356]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4a58      	ldr	r2, [pc, #352]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c90:	4b53      	ldr	r3, [pc, #332]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	4a52      	ldr	r2, [pc, #328]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c9c:	4b50      	ldr	r3, [pc, #320]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	494d      	ldr	r1, [pc, #308]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d044      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d107      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cc2:	4b47      	ldr	r3, [pc, #284]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d119      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e07f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e06f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e067      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d02:	4b37      	ldr	r3, [pc, #220]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f023 0203 	bic.w	r2, r3, #3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4934      	ldr	r1, [pc, #208]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d14:	f7fd fb90 	bl	8004438 <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1a:	e00a      	b.n	8006d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d1c:	f7fd fb8c 	bl	8004438 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e04f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d32:	4b2b      	ldr	r3, [pc, #172]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 020c 	and.w	r2, r3, #12
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d1eb      	bne.n	8006d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d44:	4b25      	ldr	r3, [pc, #148]	@ (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d20c      	bcs.n	8006d6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d52:	4b22      	ldr	r3, [pc, #136]	@ (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5a:	4b20      	ldr	r3, [pc, #128]	@ (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e032      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d78:	4b19      	ldr	r3, [pc, #100]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4916      	ldr	r1, [pc, #88]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d96:	4b12      	ldr	r3, [pc, #72]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	490e      	ldr	r1, [pc, #56]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006daa:	f000 f821 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8006dae:	4602      	mov	r2, r0
 8006db0:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	091b      	lsrs	r3, r3, #4
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	490a      	ldr	r1, [pc, #40]	@ (8006de4 <HAL_RCC_ClockConfig+0x1c0>)
 8006dbc:	5ccb      	ldrb	r3, [r1, r3]
 8006dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc2:	4a09      	ldr	r2, [pc, #36]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006dc6:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <HAL_RCC_ClockConfig+0x1c8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fd faf0 	bl	80043b0 <HAL_InitTick>

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40023c00 	.word	0x40023c00
 8006de0:	40023800 	.word	0x40023800
 8006de4:	080126d8 	.word	0x080126d8
 8006de8:	20000030 	.word	0x20000030
 8006dec:	20000034 	.word	0x20000034

08006df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df4:	b094      	sub	sp, #80	@ 0x50
 8006df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e08:	4b79      	ldr	r3, [pc, #484]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 030c 	and.w	r3, r3, #12
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d00d      	beq.n	8006e30 <HAL_RCC_GetSysClockFreq+0x40>
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	f200 80e1 	bhi.w	8006fdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0x34>
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d003      	beq.n	8006e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e22:	e0db      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e24:	4b73      	ldr	r3, [pc, #460]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e28:	e0db      	b.n	8006fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e2a:	4b72      	ldr	r3, [pc, #456]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e2e:	e0d8      	b.n	8006fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e30:	4b6f      	ldr	r3, [pc, #444]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d063      	beq.n	8006f0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e46:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	099b      	lsrs	r3, r3, #6
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e62:	4622      	mov	r2, r4
 8006e64:	462b      	mov	r3, r5
 8006e66:	f04f 0000 	mov.w	r0, #0
 8006e6a:	f04f 0100 	mov.w	r1, #0
 8006e6e:	0159      	lsls	r1, r3, #5
 8006e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e74:	0150      	lsls	r0, r2, #5
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	1a51      	subs	r1, r2, r1
 8006e7e:	6139      	str	r1, [r7, #16]
 8006e80:	4629      	mov	r1, r5
 8006e82:	eb63 0301 	sbc.w	r3, r3, r1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e94:	4659      	mov	r1, fp
 8006e96:	018b      	lsls	r3, r1, #6
 8006e98:	4651      	mov	r1, sl
 8006e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e9e:	4651      	mov	r1, sl
 8006ea0:	018a      	lsls	r2, r1, #6
 8006ea2:	4651      	mov	r1, sl
 8006ea4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ea8:	4659      	mov	r1, fp
 8006eaa:	eb63 0901 	sbc.w	r9, r3, r1
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ec2:	4690      	mov	r8, r2
 8006ec4:	4699      	mov	r9, r3
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	eb18 0303 	adds.w	r3, r8, r3
 8006ecc:	60bb      	str	r3, [r7, #8]
 8006ece:	462b      	mov	r3, r5
 8006ed0:	eb49 0303 	adc.w	r3, r9, r3
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	028b      	lsls	r3, r1, #10
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006eec:	4621      	mov	r1, r4
 8006eee:	028a      	lsls	r2, r1, #10
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006efa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f00:	f7f9 fea2 	bl	8000c48 <__aeabi_uldivmod>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4613      	mov	r3, r2
 8006f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f0c:	e058      	b.n	8006fc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f0e:	4b38      	ldr	r3, [pc, #224]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	099b      	lsrs	r3, r3, #6
 8006f14:	2200      	movs	r2, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	4611      	mov	r1, r2
 8006f1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f1e:	623b      	str	r3, [r7, #32]
 8006f20:	2300      	movs	r3, #0
 8006f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	f04f 0000 	mov.w	r0, #0
 8006f30:	f04f 0100 	mov.w	r1, #0
 8006f34:	0159      	lsls	r1, r3, #5
 8006f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f3a:	0150      	lsls	r0, r2, #5
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4641      	mov	r1, r8
 8006f42:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f46:	4649      	mov	r1, r9
 8006f48:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f60:	ebb2 040a 	subs.w	r4, r2, sl
 8006f64:	eb63 050b 	sbc.w	r5, r3, fp
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	00eb      	lsls	r3, r5, #3
 8006f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f76:	00e2      	lsls	r2, r4, #3
 8006f78:	4614      	mov	r4, r2
 8006f7a:	461d      	mov	r5, r3
 8006f7c:	4643      	mov	r3, r8
 8006f7e:	18e3      	adds	r3, r4, r3
 8006f80:	603b      	str	r3, [r7, #0]
 8006f82:	464b      	mov	r3, r9
 8006f84:	eb45 0303 	adc.w	r3, r5, r3
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f96:	4629      	mov	r1, r5
 8006f98:	028b      	lsls	r3, r1, #10
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	028a      	lsls	r2, r1, #10
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006faa:	2200      	movs	r2, #0
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	61fa      	str	r2, [r7, #28]
 8006fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fb4:	f7f9 fe48 	bl	8000c48 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	0c1b      	lsrs	r3, r3, #16
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	3301      	adds	r3, #1
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006fd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fda:	e002      	b.n	8006fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fdc:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3750      	adds	r7, #80	@ 0x50
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fee:	bf00      	nop
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	00f42400 	.word	0x00f42400

08006ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ffc:	4b03      	ldr	r3, [pc, #12]	@ (800700c <HAL_RCC_GetHCLKFreq+0x14>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
}
 8007000:	4618      	mov	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20000030 	.word	0x20000030

08007010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007014:	f7ff fff0 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8007018:	4602      	mov	r2, r0
 800701a:	4b05      	ldr	r3, [pc, #20]	@ (8007030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	0a9b      	lsrs	r3, r3, #10
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	4903      	ldr	r1, [pc, #12]	@ (8007034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007026:	5ccb      	ldrb	r3, [r1, r3]
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40023800 	.word	0x40023800
 8007034:	080126e8 	.word	0x080126e8

08007038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800703c:	f7ff ffdc 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	0b5b      	lsrs	r3, r3, #13
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4903      	ldr	r1, [pc, #12]	@ (800705c <HAL_RCC_GetPCLK2Freq+0x24>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40023800 	.word	0x40023800
 800705c:	080126e8 	.word	0x080126e8

08007060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e07b      	b.n	800716a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007076:	2b00      	cmp	r3, #0
 8007078:	d108      	bne.n	800708c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007082:	d009      	beq.n	8007098 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	61da      	str	r2, [r3, #28]
 800708a:	e005      	b.n	8007098 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fc fd0e 	bl	8003ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800711c:	ea42 0103 	orr.w	r1, r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	f003 0104 	and.w	r1, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	f003 0210 	and.w	r2, r3, #16
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69da      	ldr	r2, [r3, #28]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007158:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b088      	sub	sp, #32
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	4613      	mov	r3, r2
 8007180:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007182:	f7fd f959 	bl	8004438 <HAL_GetTick>
 8007186:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d001      	beq.n	800719c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
 800719a:	e12a      	b.n	80073f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_SPI_Transmit+0x36>
 80071a2:	88fb      	ldrh	r3, [r7, #6]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e122      	b.n	80073f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_SPI_Transmit+0x48>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e11b      	b.n	80073f2 <HAL_SPI_Transmit+0x280>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2203      	movs	r2, #3
 80071c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	88fa      	ldrh	r2, [r7, #6]
 80071da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007208:	d10f      	bne.n	800722a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007218:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007228:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007234:	2b40      	cmp	r3, #64	@ 0x40
 8007236:	d007      	beq.n	8007248 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007246:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007250:	d152      	bne.n	80072f8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_SPI_Transmit+0xee>
 800725a:	8b7b      	ldrh	r3, [r7, #26]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d145      	bne.n	80072ec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007264:	881a      	ldrh	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	1c9a      	adds	r2, r3, #2
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007284:	e032      	b.n	80072ec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b02      	cmp	r3, #2
 8007292:	d112      	bne.n	80072ba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007298:	881a      	ldrh	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a4:	1c9a      	adds	r2, r3, #2
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072b8:	e018      	b.n	80072ec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ba:	f7fd f8bd 	bl	8004438 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d803      	bhi.n	80072d2 <HAL_SPI_Transmit+0x160>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d102      	bne.n	80072d8 <HAL_SPI_Transmit+0x166>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e082      	b.n	80073f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1c7      	bne.n	8007286 <HAL_SPI_Transmit+0x114>
 80072f6:	e053      	b.n	80073a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <HAL_SPI_Transmit+0x194>
 8007300:	8b7b      	ldrh	r3, [r7, #26]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d147      	bne.n	8007396 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	330c      	adds	r3, #12
 8007310:	7812      	ldrb	r2, [r2, #0]
 8007312:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800732c:	e033      	b.n	8007396 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b02      	cmp	r3, #2
 800733a:	d113      	bne.n	8007364 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007362:	e018      	b.n	8007396 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007364:	f7fd f868 	bl	8004438 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d803      	bhi.n	800737c <HAL_SPI_Transmit+0x20a>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d102      	bne.n	8007382 <HAL_SPI_Transmit+0x210>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e02d      	b.n	80073f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1c6      	bne.n	800732e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fdd1 	bl	8007f4c <SPI_EndRxTxTransaction>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e000      	b.n	80073f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80073f0:	2300      	movs	r3, #0
  }
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3720      	adds	r7, #32
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b08a      	sub	sp, #40	@ 0x28
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007408:	2301      	movs	r3, #1
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800740c:	f7fd f814 	bl	8004438 <HAL_GetTick>
 8007410:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007418:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007420:	887b      	ldrh	r3, [r7, #2]
 8007422:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007424:	7ffb      	ldrb	r3, [r7, #31]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d00c      	beq.n	8007444 <HAL_SPI_TransmitReceive+0x4a>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007430:	d106      	bne.n	8007440 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <HAL_SPI_TransmitReceive+0x46>
 800743a:	7ffb      	ldrb	r3, [r7, #31]
 800743c:	2b04      	cmp	r3, #4
 800743e:	d001      	beq.n	8007444 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007440:	2302      	movs	r3, #2
 8007442:	e17f      	b.n	8007744 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_SPI_TransmitReceive+0x5c>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_SPI_TransmitReceive+0x5c>
 8007450:	887b      	ldrh	r3, [r7, #2]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e174      	b.n	8007744 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_SPI_TransmitReceive+0x6e>
 8007464:	2302      	movs	r3, #2
 8007466:	e16d      	b.n	8007744 <HAL_SPI_TransmitReceive+0x34a>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b04      	cmp	r3, #4
 800747a:	d003      	beq.n	8007484 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2205      	movs	r2, #5
 8007480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	887a      	ldrh	r2, [r7, #2]
 8007494:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	887a      	ldrh	r2, [r7, #2]
 800749a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	887a      	ldrh	r2, [r7, #2]
 80074a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	887a      	ldrh	r2, [r7, #2]
 80074ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c4:	2b40      	cmp	r3, #64	@ 0x40
 80074c6:	d007      	beq.n	80074d8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e0:	d17e      	bne.n	80075e0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <HAL_SPI_TransmitReceive+0xf6>
 80074ea:	8afb      	ldrh	r3, [r7, #22]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d16c      	bne.n	80075ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f4:	881a      	ldrh	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007500:	1c9a      	adds	r2, r3, #2
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007514:	e059      	b.n	80075ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b02      	cmp	r3, #2
 8007522:	d11b      	bne.n	800755c <HAL_SPI_TransmitReceive+0x162>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d016      	beq.n	800755c <HAL_SPI_TransmitReceive+0x162>
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	2b01      	cmp	r3, #1
 8007532:	d113      	bne.n	800755c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007538:	881a      	ldrh	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007544:	1c9a      	adds	r2, r3, #2
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b01      	cmp	r3, #1
 8007568:	d119      	bne.n	800759e <HAL_SPI_TransmitReceive+0x1a4>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d014      	beq.n	800759e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757e:	b292      	uxth	r2, r2
 8007580:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	1c9a      	adds	r2, r3, #2
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800759a:	2301      	movs	r3, #1
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800759e:	f7fc ff4b 	bl	8004438 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d80d      	bhi.n	80075ca <HAL_SPI_TransmitReceive+0x1d0>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d009      	beq.n	80075ca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e0bc      	b.n	8007744 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1a0      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x11c>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d19b      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x11c>
 80075de:	e082      	b.n	80076e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_SPI_TransmitReceive+0x1f4>
 80075e8:	8afb      	ldrh	r3, [r7, #22]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d171      	bne.n	80076d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007614:	e05d      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b02      	cmp	r3, #2
 8007622:	d11c      	bne.n	800765e <HAL_SPI_TransmitReceive+0x264>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d017      	beq.n	800765e <HAL_SPI_TransmitReceive+0x264>
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	2b01      	cmp	r3, #1
 8007632:	d114      	bne.n	800765e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330c      	adds	r3, #12
 800763e:	7812      	ldrb	r2, [r2, #0]
 8007640:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b01      	cmp	r3, #1
 800766a:	d119      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x2a6>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d014      	beq.n	80076a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800769c:	2301      	movs	r3, #1
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076a0:	f7fc feca 	bl	8004438 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d803      	bhi.n	80076b8 <HAL_SPI_TransmitReceive+0x2be>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d102      	bne.n	80076be <HAL_SPI_TransmitReceive+0x2c4>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e038      	b.n	8007744 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d19c      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x21c>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d197      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076e6:	6a3a      	ldr	r2, [r7, #32]
 80076e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fc2e 	bl	8007f4c <SPI_EndRxTxTransaction>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d008      	beq.n	8007708 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2220      	movs	r2, #32
 80076fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e01d      	b.n	8007744 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007742:	2300      	movs	r3, #0
  }
}
 8007744:	4618      	mov	r0, r3
 8007746:	3728      	adds	r7, #40	@ 0x28
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007760:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d00c      	beq.n	8007788 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007774:	d106      	bne.n	8007784 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <HAL_SPI_TransmitReceive_DMA+0x38>
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	2b04      	cmp	r3, #4
 8007782:	d001      	beq.n	8007788 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8007784:	2302      	movs	r3, #2
 8007786:	e0cf      	b.n	8007928 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007794:	887b      	ldrh	r3, [r7, #2]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e0c4      	b.n	8007928 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_SPI_TransmitReceive_DMA+0x60>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e0bd      	b.n	8007928 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d003      	beq.n	80077c8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2205      	movs	r2, #5
 80077c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	887a      	ldrh	r2, [r7, #2]
 80077d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	887a      	ldrh	r2, [r7, #2]
 80077de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	887a      	ldrh	r2, [r7, #2]
 80077ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	887a      	ldrh	r2, [r7, #2]
 80077f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b04      	cmp	r3, #4
 8007808:	d108      	bne.n	800781c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800780e:	4a48      	ldr	r2, [pc, #288]	@ (8007930 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007810:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007816:	4a47      	ldr	r2, [pc, #284]	@ (8007934 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007818:	63da      	str	r2, [r3, #60]	@ 0x3c
 800781a:	e007      	b.n	800782c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007820:	4a45      	ldr	r2, [pc, #276]	@ (8007938 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8007822:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007828:	4a44      	ldr	r2, [pc, #272]	@ (800793c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800782a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007830:	4a43      	ldr	r2, [pc, #268]	@ (8007940 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007832:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007838:	2200      	movs	r2, #0
 800783a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	4619      	mov	r1, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007852:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007854:	f7fc ffe0 	bl	8004818 <HAL_DMA_Start_IT>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007862:	f043 0210 	orr.w	r2, r3, #16
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e058      	b.n	8007928 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0201 	orr.w	r2, r2, #1
 8007884:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788a:	2200      	movs	r2, #0
 800788c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007892:	2200      	movs	r2, #0
 8007894:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800789a:	2200      	movs	r2, #0
 800789c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078a2:	2200      	movs	r2, #0
 80078a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ae:	4619      	mov	r1, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	330c      	adds	r3, #12
 80078b6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078be:	f7fc ffab 	bl	8004818 <HAL_DMA_Start_IT>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078cc:	f043 0210 	orr.w	r2, r3, #16
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e023      	b.n	8007928 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ea:	2b40      	cmp	r3, #64	@ 0x40
 80078ec:	d007      	beq.n	80078fe <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078fc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0220 	orr.w	r2, r2, #32
 8007914:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0202 	orr.w	r2, r2, #2
 8007924:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	08007cd1 	.word	0x08007cd1
 8007934:	08007b99 	.word	0x08007b99
 8007938:	08007ced 	.word	0x08007ced
 800793c:	08007c41 	.word	0x08007c41
 8007940:	08007d09 	.word	0x08007d09

08007944 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10e      	bne.n	8007984 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
    return;
 8007982:	e0ce      	b.n	8007b22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <HAL_SPI_IRQHandler+0x5e>
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
    return;
 80079a0:	e0bf      	b.n	8007b22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <HAL_SPI_IRQHandler+0x7e>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80b0 	beq.w	8007b22 <HAL_SPI_IRQHandler+0x1de>
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80aa 	beq.w	8007b22 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d023      	beq.n	8007a20 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d011      	beq.n	8007a08 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e8:	f043 0204 	orr.w	r2, r3, #4
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	e00b      	b.n	8007a20 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
        return;
 8007a1e:	e080      	b.n	8007b22 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d014      	beq.n	8007a54 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a2e:	f043 0201 	orr.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00c      	beq.n	8007a78 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a62:	f043 0208 	orr.w	r2, r3, #8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d04f      	beq.n	8007b20 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <HAL_SPI_IRQHandler+0x168>
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d034      	beq.n	8007b16 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0203 	bic.w	r2, r2, #3
 8007aba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d011      	beq.n	8007ae8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ac8:	4a17      	ldr	r2, [pc, #92]	@ (8007b28 <HAL_SPI_IRQHandler+0x1e4>)
 8007aca:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fc ff69 	bl	80049a8 <HAL_DMA_Abort_IT>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d016      	beq.n	8007b1e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af4:	4a0c      	ldr	r2, [pc, #48]	@ (8007b28 <HAL_SPI_IRQHandler+0x1e4>)
 8007af6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fc ff53 	bl	80049a8 <HAL_DMA_Abort_IT>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007b14:	e003      	b.n	8007b1e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f826 	bl	8007b68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b1c:	e000      	b.n	8007b20 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007b1e:	bf00      	nop
    return;
 8007b20:	bf00      	nop
  }
}
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	08007d49 	.word	0x08007d49

08007b2c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b8a:	b2db      	uxtb	r3, r3
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ba6:	f7fc fc47 	bl	8004438 <HAL_GetTick>
 8007baa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bba:	d03b      	beq.n	8007c34 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0220 	bic.w	r2, r2, #32
 8007bca:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10d      	bne.n	8007bf0 <SPI_DMAReceiveCplt+0x58>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bdc:	d108      	bne.n	8007bf0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0203 	bic.w	r2, r2, #3
 8007bec:	605a      	str	r2, [r3, #4]
 8007bee:	e007      	b.n	8007c00 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0201 	bic.w	r2, r2, #1
 8007bfe:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	2164      	movs	r1, #100	@ 0x64
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f93b 	bl	8007e80 <SPI_EndRxTransaction>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2220      	movs	r2, #32
 8007c14:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff ff9b 	bl	8007b68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007c32:	e002      	b.n	8007c3a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff ff79 	bl	8007b2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c4e:	f7fc fbf3 	bl	8004438 <HAL_GetTick>
 8007c52:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c62:	d02f      	beq.n	8007cc4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0220 	bic.w	r2, r2, #32
 8007c72:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	2164      	movs	r1, #100	@ 0x64
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f967 	bl	8007f4c <SPI_EndRxTxTransaction>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c88:	f043 0220 	orr.w	r2, r3, #32
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0203 	bic.w	r2, r2, #3
 8007c9e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff ff53 	bl	8007b68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007cc2:	e002      	b.n	8007cca <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7fa fef9 	bl	8002abc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cdc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff ff2e 	bl	8007b40 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff ff2a 	bl	8007b54 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0203 	bic.w	r2, r2, #3
 8007d24:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2a:	f043 0210 	orr.w	r2, r3, #16
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff ff14 	bl	8007b68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff ff00 	bl	8007b68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d80:	f7fc fb5a 	bl	8004438 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d90:	f7fc fb52 	bl	8004438 <HAL_GetTick>
 8007d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d96:	4b39      	ldr	r3, [pc, #228]	@ (8007e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	015b      	lsls	r3, r3, #5
 8007d9c:	0d1b      	lsrs	r3, r3, #20
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	fb02 f303 	mul.w	r3, r2, r3
 8007da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007da6:	e054      	b.n	8007e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dae:	d050      	beq.n	8007e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007db0:	f7fc fb42 	bl	8004438 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d902      	bls.n	8007dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d13d      	bne.n	8007e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dde:	d111      	bne.n	8007e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007de8:	d004      	beq.n	8007df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007df2:	d107      	bne.n	8007e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e0c:	d10f      	bne.n	8007e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e017      	b.n	8007e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	bf0c      	ite	eq
 8007e62:	2301      	moveq	r3, #1
 8007e64:	2300      	movne	r3, #0
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	461a      	mov	r2, r3
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d19b      	bne.n	8007da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000030 	.word	0x20000030

08007e80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e94:	d111      	bne.n	8007eba <SPI_EndRxTransaction+0x3a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e9e:	d004      	beq.n	8007eaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea8:	d107      	bne.n	8007eba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ec2:	d12a      	bne.n	8007f1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ecc:	d012      	beq.n	8007ef4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2180      	movs	r1, #128	@ 0x80
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7ff ff49 	bl	8007d70 <SPI_WaitFlagStateUntilTimeout>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d02d      	beq.n	8007f40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee8:	f043 0220 	orr.w	r2, r3, #32
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e026      	b.n	8007f42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	2101      	movs	r1, #1
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff ff36 	bl	8007d70 <SPI_WaitFlagStateUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01a      	beq.n	8007f40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f0e:	f043 0220 	orr.w	r2, r3, #32
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e013      	b.n	8007f42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2200      	movs	r2, #0
 8007f22:	2101      	movs	r1, #1
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f7ff ff23 	bl	8007d70 <SPI_WaitFlagStateUntilTimeout>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f34:	f043 0220 	orr.w	r2, r3, #32
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e000      	b.n	8007f42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	2102      	movs	r1, #2
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff ff04 	bl	8007d70 <SPI_WaitFlagStateUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f72:	f043 0220 	orr.w	r2, r3, #32
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e032      	b.n	8007fe4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007fec <SPI_EndRxTxTransaction+0xa0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff0 <SPI_EndRxTxTransaction+0xa4>)
 8007f84:	fba2 2303 	umull	r2, r3, r2, r3
 8007f88:	0d5b      	lsrs	r3, r3, #21
 8007f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
 8007f92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f9c:	d112      	bne.n	8007fc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2180      	movs	r1, #128	@ 0x80
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff fee1 	bl	8007d70 <SPI_WaitFlagStateUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d016      	beq.n	8007fe2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb8:	f043 0220 	orr.w	r2, r3, #32
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e00f      	b.n	8007fe4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fda:	2b80      	cmp	r3, #128	@ 0x80
 8007fdc:	d0f2      	beq.n	8007fc4 <SPI_EndRxTxTransaction+0x78>
 8007fde:	e000      	b.n	8007fe2 <SPI_EndRxTxTransaction+0x96>
        break;
 8007fe0:	bf00      	nop
  }

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20000030 	.word	0x20000030
 8007ff0:	165e9f81 	.word	0x165e9f81

08007ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e041      	b.n	800808a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fb feb4 	bl	8003d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3304      	adds	r3, #4
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f000 fc64 	bl	8008900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d001      	beq.n	80080ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e046      	b.n	800813a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a23      	ldr	r2, [pc, #140]	@ (8008148 <HAL_TIM_Base_Start+0xb4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d022      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c6:	d01d      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1f      	ldr	r2, [pc, #124]	@ (800814c <HAL_TIM_Base_Start+0xb8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d018      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008150 <HAL_TIM_Base_Start+0xbc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d013      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008154 <HAL_TIM_Base_Start+0xc0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00e      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008158 <HAL_TIM_Base_Start+0xc4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d009      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a19      	ldr	r2, [pc, #100]	@ (800815c <HAL_TIM_Base_Start+0xc8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d004      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a18      	ldr	r2, [pc, #96]	@ (8008160 <HAL_TIM_Base_Start+0xcc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d111      	bne.n	8008128 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b06      	cmp	r3, #6
 8008114:	d010      	beq.n	8008138 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008126:	e007      	b.n	8008138 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40010000 	.word	0x40010000
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800
 8008154:	40000c00 	.word	0x40000c00
 8008158:	40010400 	.word	0x40010400
 800815c:	40014000 	.word	0x40014000
 8008160:	40001800 	.word	0x40001800

08008164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b01      	cmp	r3, #1
 8008176:	d001      	beq.n	800817c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e04e      	b.n	800821a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0201 	orr.w	r2, r2, #1
 8008192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a23      	ldr	r2, [pc, #140]	@ (8008228 <HAL_TIM_Base_Start_IT+0xc4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d022      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081a6:	d01d      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1f      	ldr	r2, [pc, #124]	@ (800822c <HAL_TIM_Base_Start_IT+0xc8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d018      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008230 <HAL_TIM_Base_Start_IT+0xcc>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d013      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008234 <HAL_TIM_Base_Start_IT+0xd0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00e      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008238 <HAL_TIM_Base_Start_IT+0xd4>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d009      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a19      	ldr	r2, [pc, #100]	@ (800823c <HAL_TIM_Base_Start_IT+0xd8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d004      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a18      	ldr	r2, [pc, #96]	@ (8008240 <HAL_TIM_Base_Start_IT+0xdc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d111      	bne.n	8008208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b06      	cmp	r3, #6
 80081f4:	d010      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f042 0201 	orr.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008206:	e007      	b.n	8008218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0201 	orr.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	40010000 	.word	0x40010000
 800822c:	40000400 	.word	0x40000400
 8008230:	40000800 	.word	0x40000800
 8008234:	40000c00 	.word	0x40000c00
 8008238:	40010400 	.word	0x40010400
 800823c:	40014000 	.word	0x40014000
 8008240:	40001800 	.word	0x40001800

08008244 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e041      	b.n	80082da <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f839 	bl	80082e2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2202      	movs	r2, #2
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3304      	adds	r3, #4
 8008280:	4619      	mov	r1, r3
 8008282:	4610      	mov	r0, r2
 8008284:	f000 fb3c 	bl	8008900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
	...

080082f8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d109      	bne.n	800831c <HAL_TIM_OC_Start+0x24>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b01      	cmp	r3, #1
 8008312:	bf14      	ite	ne
 8008314:	2301      	movne	r3, #1
 8008316:	2300      	moveq	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	e022      	b.n	8008362 <HAL_TIM_OC_Start+0x6a>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b04      	cmp	r3, #4
 8008320:	d109      	bne.n	8008336 <HAL_TIM_OC_Start+0x3e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b01      	cmp	r3, #1
 800832c:	bf14      	ite	ne
 800832e:	2301      	movne	r3, #1
 8008330:	2300      	moveq	r3, #0
 8008332:	b2db      	uxtb	r3, r3
 8008334:	e015      	b.n	8008362 <HAL_TIM_OC_Start+0x6a>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b08      	cmp	r3, #8
 800833a:	d109      	bne.n	8008350 <HAL_TIM_OC_Start+0x58>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b01      	cmp	r3, #1
 8008346:	bf14      	ite	ne
 8008348:	2301      	movne	r3, #1
 800834a:	2300      	moveq	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	e008      	b.n	8008362 <HAL_TIM_OC_Start+0x6a>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b01      	cmp	r3, #1
 800835a:	bf14      	ite	ne
 800835c:	2301      	movne	r3, #1
 800835e:	2300      	moveq	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e07c      	b.n	8008464 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <HAL_TIM_OC_Start+0x82>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008378:	e013      	b.n	80083a2 <HAL_TIM_OC_Start+0xaa>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b04      	cmp	r3, #4
 800837e:	d104      	bne.n	800838a <HAL_TIM_OC_Start+0x92>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008388:	e00b      	b.n	80083a2 <HAL_TIM_OC_Start+0xaa>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b08      	cmp	r3, #8
 800838e:	d104      	bne.n	800839a <HAL_TIM_OC_Start+0xa2>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008398:	e003      	b.n	80083a2 <HAL_TIM_OC_Start+0xaa>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2202      	movs	r2, #2
 800839e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2201      	movs	r2, #1
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fd9e 	bl	8008eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a2d      	ldr	r2, [pc, #180]	@ (800846c <HAL_TIM_OC_Start+0x174>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d004      	beq.n	80083c4 <HAL_TIM_OC_Start+0xcc>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a2c      	ldr	r2, [pc, #176]	@ (8008470 <HAL_TIM_OC_Start+0x178>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d101      	bne.n	80083c8 <HAL_TIM_OC_Start+0xd0>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <HAL_TIM_OC_Start+0xd2>
 80083c8:	2300      	movs	r3, #0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a22      	ldr	r2, [pc, #136]	@ (800846c <HAL_TIM_OC_Start+0x174>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d022      	beq.n	800842e <HAL_TIM_OC_Start+0x136>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f0:	d01d      	beq.n	800842e <HAL_TIM_OC_Start+0x136>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008474 <HAL_TIM_OC_Start+0x17c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d018      	beq.n	800842e <HAL_TIM_OC_Start+0x136>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1d      	ldr	r2, [pc, #116]	@ (8008478 <HAL_TIM_OC_Start+0x180>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <HAL_TIM_OC_Start+0x136>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1c      	ldr	r2, [pc, #112]	@ (800847c <HAL_TIM_OC_Start+0x184>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00e      	beq.n	800842e <HAL_TIM_OC_Start+0x136>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a16      	ldr	r2, [pc, #88]	@ (8008470 <HAL_TIM_OC_Start+0x178>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d009      	beq.n	800842e <HAL_TIM_OC_Start+0x136>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a18      	ldr	r2, [pc, #96]	@ (8008480 <HAL_TIM_OC_Start+0x188>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d004      	beq.n	800842e <HAL_TIM_OC_Start+0x136>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a16      	ldr	r2, [pc, #88]	@ (8008484 <HAL_TIM_OC_Start+0x18c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d111      	bne.n	8008452 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b06      	cmp	r3, #6
 800843e:	d010      	beq.n	8008462 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008450:	e007      	b.n	8008462 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0201 	orr.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	40010000 	.word	0x40010000
 8008470:	40010400 	.word	0x40010400
 8008474:	40000400 	.word	0x40000400
 8008478:	40000800 	.word	0x40000800
 800847c:	40000c00 	.word	0x40000c00
 8008480:	40014000 	.word	0x40014000
 8008484:	40001800 	.word	0x40001800

08008488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d020      	beq.n	80084ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01b      	beq.n	80084ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0202 	mvn.w	r2, #2
 80084bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f9f5 	bl	80088c2 <HAL_TIM_IC_CaptureCallback>
 80084d8:	e005      	b.n	80084e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f9e7 	bl	80088ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9f8 	bl	80088d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d020      	beq.n	8008538 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01b      	beq.n	8008538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f06f 0204 	mvn.w	r2, #4
 8008508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2202      	movs	r2, #2
 800850e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f9cf 	bl	80088c2 <HAL_TIM_IC_CaptureCallback>
 8008524:	e005      	b.n	8008532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f9c1 	bl	80088ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f9d2 	bl	80088d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f003 0308 	and.w	r3, r3, #8
 800853e:	2b00      	cmp	r3, #0
 8008540:	d020      	beq.n	8008584 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01b      	beq.n	8008584 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0208 	mvn.w	r2, #8
 8008554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f9a9 	bl	80088c2 <HAL_TIM_IC_CaptureCallback>
 8008570:	e005      	b.n	800857e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f99b 	bl	80088ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f9ac 	bl	80088d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b00      	cmp	r3, #0
 800858c:	d020      	beq.n	80085d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f003 0310 	and.w	r3, r3, #16
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01b      	beq.n	80085d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0210 	mvn.w	r2, #16
 80085a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2208      	movs	r2, #8
 80085a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f983 	bl	80088c2 <HAL_TIM_IC_CaptureCallback>
 80085bc:	e005      	b.n	80085ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f975 	bl	80088ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f986 	bl	80088d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00c      	beq.n	80085f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f06f 0201 	mvn.w	r2, #1
 80085ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7fa faba 	bl	8002b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00c      	beq.n	8008618 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008604:	2b00      	cmp	r3, #0
 8008606:	d007      	beq.n	8008618 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fd16 	bl	8009044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00c      	beq.n	800863c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f957 	bl	80088ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00c      	beq.n	8008660 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0220 	mvn.w	r2, #32
 8008658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fce8 	bl	8009030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008660:	bf00      	nop
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008682:	2302      	movs	r3, #2
 8008684:	e048      	b.n	8008718 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b0c      	cmp	r3, #12
 8008692:	d839      	bhi.n	8008708 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008694:	a201      	add	r2, pc, #4	@ (adr r2, 800869c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086d1 	.word	0x080086d1
 80086a0:	08008709 	.word	0x08008709
 80086a4:	08008709 	.word	0x08008709
 80086a8:	08008709 	.word	0x08008709
 80086ac:	080086df 	.word	0x080086df
 80086b0:	08008709 	.word	0x08008709
 80086b4:	08008709 	.word	0x08008709
 80086b8:	08008709 	.word	0x08008709
 80086bc:	080086ed 	.word	0x080086ed
 80086c0:	08008709 	.word	0x08008709
 80086c4:	08008709 	.word	0x08008709
 80086c8:	08008709 	.word	0x08008709
 80086cc:	080086fb 	.word	0x080086fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68b9      	ldr	r1, [r7, #8]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f9be 	bl	8008a58 <TIM_OC1_SetConfig>
      break;
 80086dc:	e017      	b.n	800870e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fa27 	bl	8008b38 <TIM_OC2_SetConfig>
      break;
 80086ea:	e010      	b.n	800870e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fa96 	bl	8008c24 <TIM_OC3_SetConfig>
      break;
 80086f8:	e009      	b.n	800870e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fb03 	bl	8008d0c <TIM_OC4_SetConfig>
      break;
 8008706:	e002      	b.n	800870e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	75fb      	strb	r3, [r7, #23]
      break;
 800870c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008716:	7dfb      	ldrb	r3, [r7, #23]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_TIM_ConfigClockSource+0x1c>
 8008738:	2302      	movs	r3, #2
 800873a:	e0b4      	b.n	80088a6 <HAL_TIM_ConfigClockSource+0x186>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800875a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008774:	d03e      	beq.n	80087f4 <HAL_TIM_ConfigClockSource+0xd4>
 8008776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800877a:	f200 8087 	bhi.w	800888c <HAL_TIM_ConfigClockSource+0x16c>
 800877e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008782:	f000 8086 	beq.w	8008892 <HAL_TIM_ConfigClockSource+0x172>
 8008786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800878a:	d87f      	bhi.n	800888c <HAL_TIM_ConfigClockSource+0x16c>
 800878c:	2b70      	cmp	r3, #112	@ 0x70
 800878e:	d01a      	beq.n	80087c6 <HAL_TIM_ConfigClockSource+0xa6>
 8008790:	2b70      	cmp	r3, #112	@ 0x70
 8008792:	d87b      	bhi.n	800888c <HAL_TIM_ConfigClockSource+0x16c>
 8008794:	2b60      	cmp	r3, #96	@ 0x60
 8008796:	d050      	beq.n	800883a <HAL_TIM_ConfigClockSource+0x11a>
 8008798:	2b60      	cmp	r3, #96	@ 0x60
 800879a:	d877      	bhi.n	800888c <HAL_TIM_ConfigClockSource+0x16c>
 800879c:	2b50      	cmp	r3, #80	@ 0x50
 800879e:	d03c      	beq.n	800881a <HAL_TIM_ConfigClockSource+0xfa>
 80087a0:	2b50      	cmp	r3, #80	@ 0x50
 80087a2:	d873      	bhi.n	800888c <HAL_TIM_ConfigClockSource+0x16c>
 80087a4:	2b40      	cmp	r3, #64	@ 0x40
 80087a6:	d058      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x13a>
 80087a8:	2b40      	cmp	r3, #64	@ 0x40
 80087aa:	d86f      	bhi.n	800888c <HAL_TIM_ConfigClockSource+0x16c>
 80087ac:	2b30      	cmp	r3, #48	@ 0x30
 80087ae:	d064      	beq.n	800887a <HAL_TIM_ConfigClockSource+0x15a>
 80087b0:	2b30      	cmp	r3, #48	@ 0x30
 80087b2:	d86b      	bhi.n	800888c <HAL_TIM_ConfigClockSource+0x16c>
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d060      	beq.n	800887a <HAL_TIM_ConfigClockSource+0x15a>
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d867      	bhi.n	800888c <HAL_TIM_ConfigClockSource+0x16c>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d05c      	beq.n	800887a <HAL_TIM_ConfigClockSource+0x15a>
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d05a      	beq.n	800887a <HAL_TIM_ConfigClockSource+0x15a>
 80087c4:	e062      	b.n	800888c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087d6:	f000 fb69 	bl	8008eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	609a      	str	r2, [r3, #8]
      break;
 80087f2:	e04f      	b.n	8008894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008804:	f000 fb52 	bl	8008eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008816:	609a      	str	r2, [r3, #8]
      break;
 8008818:	e03c      	b.n	8008894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008826:	461a      	mov	r2, r3
 8008828:	f000 fac6 	bl	8008db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2150      	movs	r1, #80	@ 0x50
 8008832:	4618      	mov	r0, r3
 8008834:	f000 fb1f 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 8008838:	e02c      	b.n	8008894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008846:	461a      	mov	r2, r3
 8008848:	f000 fae5 	bl	8008e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2160      	movs	r1, #96	@ 0x60
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fb0f 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 8008858:	e01c      	b.n	8008894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008866:	461a      	mov	r2, r3
 8008868:	f000 faa6 	bl	8008db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2140      	movs	r1, #64	@ 0x40
 8008872:	4618      	mov	r0, r3
 8008874:	f000 faff 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 8008878:	e00c      	b.n	8008894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f000 faf6 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 800888a:	e003      	b.n	8008894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
      break;
 8008890:	e000      	b.n	8008894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088de:	bf00      	nop
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a46      	ldr	r2, [pc, #280]	@ (8008a2c <TIM_Base_SetConfig+0x12c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d013      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800891e:	d00f      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a43      	ldr	r2, [pc, #268]	@ (8008a30 <TIM_Base_SetConfig+0x130>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d00b      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a42      	ldr	r2, [pc, #264]	@ (8008a34 <TIM_Base_SetConfig+0x134>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d007      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a41      	ldr	r2, [pc, #260]	@ (8008a38 <TIM_Base_SetConfig+0x138>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d003      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a40      	ldr	r2, [pc, #256]	@ (8008a3c <TIM_Base_SetConfig+0x13c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d108      	bne.n	8008952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a35      	ldr	r2, [pc, #212]	@ (8008a2c <TIM_Base_SetConfig+0x12c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d02b      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008960:	d027      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a32      	ldr	r2, [pc, #200]	@ (8008a30 <TIM_Base_SetConfig+0x130>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d023      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a31      	ldr	r2, [pc, #196]	@ (8008a34 <TIM_Base_SetConfig+0x134>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d01f      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a30      	ldr	r2, [pc, #192]	@ (8008a38 <TIM_Base_SetConfig+0x138>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d01b      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a2f      	ldr	r2, [pc, #188]	@ (8008a3c <TIM_Base_SetConfig+0x13c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d017      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a2e      	ldr	r2, [pc, #184]	@ (8008a40 <TIM_Base_SetConfig+0x140>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d013      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a2d      	ldr	r2, [pc, #180]	@ (8008a44 <TIM_Base_SetConfig+0x144>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00f      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a2c      	ldr	r2, [pc, #176]	@ (8008a48 <TIM_Base_SetConfig+0x148>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d00b      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a2b      	ldr	r2, [pc, #172]	@ (8008a4c <TIM_Base_SetConfig+0x14c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d007      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a2a      	ldr	r2, [pc, #168]	@ (8008a50 <TIM_Base_SetConfig+0x150>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d003      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a29      	ldr	r2, [pc, #164]	@ (8008a54 <TIM_Base_SetConfig+0x154>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d108      	bne.n	80089c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a10      	ldr	r2, [pc, #64]	@ (8008a2c <TIM_Base_SetConfig+0x12c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_Base_SetConfig+0xf8>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a12      	ldr	r2, [pc, #72]	@ (8008a3c <TIM_Base_SetConfig+0x13c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d103      	bne.n	8008a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d105      	bne.n	8008a1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f023 0201 	bic.w	r2, r3, #1
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	611a      	str	r2, [r3, #16]
  }
}
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40000800 	.word	0x40000800
 8008a38:	40000c00 	.word	0x40000c00
 8008a3c:	40010400 	.word	0x40010400
 8008a40:	40014000 	.word	0x40014000
 8008a44:	40014400 	.word	0x40014400
 8008a48:	40014800 	.word	0x40014800
 8008a4c:	40001800 	.word	0x40001800
 8008a50:	40001c00 	.word	0x40001c00
 8008a54:	40002000 	.word	0x40002000

08008a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f023 0201 	bic.w	r2, r3, #1
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0303 	bic.w	r3, r3, #3
 8008a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f023 0302 	bic.w	r3, r3, #2
 8008aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a20      	ldr	r2, [pc, #128]	@ (8008b30 <TIM_OC1_SetConfig+0xd8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d003      	beq.n	8008abc <TIM_OC1_SetConfig+0x64>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8008b34 <TIM_OC1_SetConfig+0xdc>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d10c      	bne.n	8008ad6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f023 0308 	bic.w	r3, r3, #8
 8008ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f023 0304 	bic.w	r3, r3, #4
 8008ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a15      	ldr	r2, [pc, #84]	@ (8008b30 <TIM_OC1_SetConfig+0xd8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d003      	beq.n	8008ae6 <TIM_OC1_SetConfig+0x8e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a14      	ldr	r2, [pc, #80]	@ (8008b34 <TIM_OC1_SetConfig+0xdc>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d111      	bne.n	8008b0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	621a      	str	r2, [r3, #32]
}
 8008b24:	bf00      	nop
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	40010000 	.word	0x40010000
 8008b34:	40010400 	.word	0x40010400

08008b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	f023 0210 	bic.w	r2, r3, #16
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0320 	bic.w	r3, r3, #32
 8008b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a22      	ldr	r2, [pc, #136]	@ (8008c1c <TIM_OC2_SetConfig+0xe4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_OC2_SetConfig+0x68>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a21      	ldr	r2, [pc, #132]	@ (8008c20 <TIM_OC2_SetConfig+0xe8>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d10d      	bne.n	8008bbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	011b      	lsls	r3, r3, #4
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a17      	ldr	r2, [pc, #92]	@ (8008c1c <TIM_OC2_SetConfig+0xe4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d003      	beq.n	8008bcc <TIM_OC2_SetConfig+0x94>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a16      	ldr	r2, [pc, #88]	@ (8008c20 <TIM_OC2_SetConfig+0xe8>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d113      	bne.n	8008bf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	621a      	str	r2, [r3, #32]
}
 8008c0e:	bf00      	nop
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40010000 	.word	0x40010000
 8008c20:	40010400 	.word	0x40010400

08008c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 0303 	bic.w	r3, r3, #3
 8008c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a21      	ldr	r2, [pc, #132]	@ (8008d04 <TIM_OC3_SetConfig+0xe0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d003      	beq.n	8008c8a <TIM_OC3_SetConfig+0x66>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a20      	ldr	r2, [pc, #128]	@ (8008d08 <TIM_OC3_SetConfig+0xe4>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d10d      	bne.n	8008ca6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	021b      	lsls	r3, r3, #8
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a16      	ldr	r2, [pc, #88]	@ (8008d04 <TIM_OC3_SetConfig+0xe0>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d003      	beq.n	8008cb6 <TIM_OC3_SetConfig+0x92>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a15      	ldr	r2, [pc, #84]	@ (8008d08 <TIM_OC3_SetConfig+0xe4>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d113      	bne.n	8008cde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	621a      	str	r2, [r3, #32]
}
 8008cf8:	bf00      	nop
 8008cfa:	371c      	adds	r7, #28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	40010000 	.word	0x40010000
 8008d08:	40010400 	.word	0x40010400

08008d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	021b      	lsls	r3, r3, #8
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	031b      	lsls	r3, r3, #12
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a12      	ldr	r2, [pc, #72]	@ (8008db0 <TIM_OC4_SetConfig+0xa4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d003      	beq.n	8008d74 <TIM_OC4_SetConfig+0x68>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a11      	ldr	r2, [pc, #68]	@ (8008db4 <TIM_OC4_SetConfig+0xa8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d109      	bne.n	8008d88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	019b      	lsls	r3, r3, #6
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	621a      	str	r2, [r3, #32]
}
 8008da2:	bf00      	nop
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40010000 	.word	0x40010000
 8008db4:	40010400 	.word	0x40010400

08008db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f023 0201 	bic.w	r2, r3, #1
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f023 030a 	bic.w	r3, r3, #10
 8008df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b087      	sub	sp, #28
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	f023 0210 	bic.w	r2, r3, #16
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	031b      	lsls	r3, r3, #12
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	621a      	str	r2, [r3, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	f043 0307 	orr.w	r3, r3, #7
 8008e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	609a      	str	r2, [r3, #8]
}
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	021a      	lsls	r2, r3, #8
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	609a      	str	r2, [r3, #8]
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f003 031f 	and.w	r3, r3, #31
 8008efe:	2201      	movs	r2, #1
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6a1a      	ldr	r2, [r3, #32]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	401a      	ands	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a1a      	ldr	r2, [r3, #32]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	fa01 f303 	lsl.w	r3, r1, r3
 8008f24:	431a      	orrs	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	621a      	str	r2, [r3, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e05a      	b.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a21      	ldr	r2, [pc, #132]	@ (8009014 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d022      	beq.n	8008fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f9c:	d01d      	beq.n	8008fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8009018 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d018      	beq.n	8008fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a1b      	ldr	r2, [pc, #108]	@ (800901c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d013      	beq.n	8008fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8009020 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00e      	beq.n	8008fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a18      	ldr	r2, [pc, #96]	@ (8009024 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d009      	beq.n	8008fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a17      	ldr	r2, [pc, #92]	@ (8009028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d004      	beq.n	8008fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a15      	ldr	r2, [pc, #84]	@ (800902c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d10c      	bne.n	8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	40010000 	.word	0x40010000
 8009018:	40000400 	.word	0x40000400
 800901c:	40000800 	.word	0x40000800
 8009020:	40000c00 	.word	0x40000c00
 8009024:	40010400 	.word	0x40010400
 8009028:	40014000 	.word	0x40014000
 800902c:	40001800 	.word	0x40001800

08009030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e042      	b.n	80090f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d106      	bne.n	8009084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7fa ff34 	bl	8003eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2224      	movs	r2, #36	@ 0x24
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800909a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fcdb 	bl	8009a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	695a      	ldr	r2, [r3, #20]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2220      	movs	r2, #32
 80090e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b20      	cmp	r3, #32
 8009110:	d112      	bne.n	8009138 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <HAL_UART_Receive_IT+0x26>
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e00b      	b.n	800913a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009128:	88fb      	ldrh	r3, [r7, #6]
 800912a:	461a      	mov	r2, r3
 800912c:	68b9      	ldr	r1, [r7, #8]
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 faba 	bl	80096a8 <UART_Start_Receive_IT>
 8009134:	4603      	mov	r3, r0
 8009136:	e000      	b.n	800913a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009138:	2302      	movs	r3, #2
  }
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b0ba      	sub	sp, #232	@ 0xe8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800916a:	2300      	movs	r3, #0
 800916c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009170:	2300      	movs	r3, #0
 8009172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009182:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10f      	bne.n	80091aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800918a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b00      	cmp	r3, #0
 8009194:	d009      	beq.n	80091aa <HAL_UART_IRQHandler+0x66>
 8009196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fb99 	bl	80098da <UART_Receive_IT>
      return;
 80091a8:	e25b      	b.n	8009662 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 80de 	beq.w	8009370 <HAL_UART_IRQHandler+0x22c>
 80091b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d106      	bne.n	80091ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 80d1 	beq.w	8009370 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00b      	beq.n	80091f2 <HAL_UART_IRQHandler+0xae>
 80091da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d005      	beq.n	80091f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ea:	f043 0201 	orr.w	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00b      	beq.n	8009216 <HAL_UART_IRQHandler+0xd2>
 80091fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d005      	beq.n	8009216 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800920e:	f043 0202 	orr.w	r2, r3, #2
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <HAL_UART_IRQHandler+0xf6>
 8009222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009232:	f043 0204 	orr.w	r2, r3, #4
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800923a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <HAL_UART_IRQHandler+0x126>
 8009246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800924a:	f003 0320 	and.w	r3, r3, #32
 800924e:	2b00      	cmp	r3, #0
 8009250:	d105      	bne.n	800925e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d005      	beq.n	800926a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009262:	f043 0208 	orr.w	r2, r3, #8
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 81f2 	beq.w	8009658 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d008      	beq.n	8009292 <HAL_UART_IRQHandler+0x14e>
 8009280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fb24 	bl	80098da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929c:	2b40      	cmp	r3, #64	@ 0x40
 800929e:	bf0c      	ite	eq
 80092a0:	2301      	moveq	r3, #1
 80092a2:	2300      	movne	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ae:	f003 0308 	and.w	r3, r3, #8
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d103      	bne.n	80092be <HAL_UART_IRQHandler+0x17a>
 80092b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d04f      	beq.n	800935e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fa2c 	bl	800971c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b40      	cmp	r3, #64	@ 0x40
 80092d0:	d141      	bne.n	8009356 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3314      	adds	r3, #20
 80092d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3314      	adds	r3, #20
 80092fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009302:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800930a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1d9      	bne.n	80092d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d013      	beq.n	800934e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932a:	4a7e      	ldr	r2, [pc, #504]	@ (8009524 <HAL_UART_IRQHandler+0x3e0>)
 800932c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009332:	4618      	mov	r0, r3
 8009334:	f7fb fb38 	bl	80049a8 <HAL_DMA_Abort_IT>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d016      	beq.n	800936c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934c:	e00e      	b.n	800936c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f994 	bl	800967c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009354:	e00a      	b.n	800936c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f990 	bl	800967c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935c:	e006      	b.n	800936c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f98c 	bl	800967c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800936a:	e175      	b.n	8009658 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800936c:	bf00      	nop
    return;
 800936e:	e173      	b.n	8009658 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009374:	2b01      	cmp	r3, #1
 8009376:	f040 814f 	bne.w	8009618 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800937a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800937e:	f003 0310 	and.w	r3, r3, #16
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 8148 	beq.w	8009618 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 8141 	beq.w	8009618 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009396:	2300      	movs	r3, #0
 8009398:	60bb      	str	r3, [r7, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60bb      	str	r3, [r7, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	60bb      	str	r3, [r7, #8]
 80093aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b6:	2b40      	cmp	r3, #64	@ 0x40
 80093b8:	f040 80b6 	bne.w	8009528 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 8145 	beq.w	800965c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093da:	429a      	cmp	r2, r3
 80093dc:	f080 813e 	bcs.w	800965c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f2:	f000 8088 	beq.w	8009506 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	330c      	adds	r3, #12
 80093fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800940c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	330c      	adds	r3, #12
 800941e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009422:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800942e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800943a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1d9      	bne.n	80093f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3314      	adds	r3, #20
 8009448:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009454:	f023 0301 	bic.w	r3, r3, #1
 8009458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3314      	adds	r3, #20
 8009462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009466:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800946a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800946e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e1      	bne.n	8009442 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3314      	adds	r3, #20
 8009484:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800948e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3314      	adds	r3, #20
 800949e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e3      	bne.n	800947e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	330c      	adds	r3, #12
 80094ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094d6:	f023 0310 	bic.w	r3, r3, #16
 80094da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	330c      	adds	r3, #12
 80094e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80094e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80094ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e3      	bne.n	80094c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009500:	4618      	mov	r0, r3
 8009502:	f7fb f9e1 	bl	80048c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2202      	movs	r2, #2
 800950a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009514:	b29b      	uxth	r3, r3
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	b29b      	uxth	r3, r3
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f8b7 	bl	8009690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009522:	e09b      	b.n	800965c <HAL_UART_IRQHandler+0x518>
 8009524:	080097e3 	.word	0x080097e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009530:	b29b      	uxth	r3, r3
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800953c:	b29b      	uxth	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 808e 	beq.w	8009660 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 8089 	beq.w	8009660 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	330c      	adds	r3, #12
 8009554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800955e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009564:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	330c      	adds	r3, #12
 800956e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009572:	647a      	str	r2, [r7, #68]	@ 0x44
 8009574:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e3      	bne.n	800954e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3314      	adds	r3, #20
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	623b      	str	r3, [r7, #32]
   return(result);
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	f023 0301 	bic.w	r3, r3, #1
 800959c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3314      	adds	r3, #20
 80095a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80095ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e3      	bne.n	8009586 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	330c      	adds	r3, #12
 80095d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	60fb      	str	r3, [r7, #12]
   return(result);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 0310 	bic.w	r3, r3, #16
 80095e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	330c      	adds	r3, #12
 80095ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80095f0:	61fa      	str	r2, [r7, #28]
 80095f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	69b9      	ldr	r1, [r7, #24]
 80095f6:	69fa      	ldr	r2, [r7, #28]
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	617b      	str	r3, [r7, #20]
   return(result);
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e3      	bne.n	80095cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800960a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f83d 	bl	8009690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009616:	e023      	b.n	8009660 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009620:	2b00      	cmp	r3, #0
 8009622:	d009      	beq.n	8009638 <HAL_UART_IRQHandler+0x4f4>
 8009624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8ea 	bl	800980a <UART_Transmit_IT>
    return;
 8009636:	e014      	b.n	8009662 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800963c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00e      	beq.n	8009662 <HAL_UART_IRQHandler+0x51e>
 8009644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800964c:	2b00      	cmp	r3, #0
 800964e:	d008      	beq.n	8009662 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f92a 	bl	80098aa <UART_EndTransmit_IT>
    return;
 8009656:	e004      	b.n	8009662 <HAL_UART_IRQHandler+0x51e>
    return;
 8009658:	bf00      	nop
 800965a:	e002      	b.n	8009662 <HAL_UART_IRQHandler+0x51e>
      return;
 800965c:	bf00      	nop
 800965e:	e000      	b.n	8009662 <HAL_UART_IRQHandler+0x51e>
      return;
 8009660:	bf00      	nop
  }
}
 8009662:	37e8      	adds	r7, #232	@ 0xe8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4613      	mov	r3, r2
 80096b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	88fa      	ldrh	r2, [r7, #6]
 80096c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	88fa      	ldrh	r2, [r7, #6]
 80096c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2222      	movs	r2, #34	@ 0x22
 80096d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d007      	beq.n	80096ee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	695a      	ldr	r2, [r3, #20]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f042 0201 	orr.w	r2, r2, #1
 80096fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68da      	ldr	r2, [r3, #12]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0220 	orr.w	r2, r2, #32
 800970c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800971c:	b480      	push	{r7}
 800971e:	b095      	sub	sp, #84	@ 0x54
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	330c      	adds	r3, #12
 800972a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972e:	e853 3f00 	ldrex	r3, [r3]
 8009732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800973a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	330c      	adds	r3, #12
 8009742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009744:	643a      	str	r2, [r7, #64]	@ 0x40
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009748:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800974a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800974c:	e841 2300 	strex	r3, r2, [r1]
 8009750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1e5      	bne.n	8009724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3314      	adds	r3, #20
 800975e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	e853 3f00 	ldrex	r3, [r3]
 8009766:	61fb      	str	r3, [r7, #28]
   return(result);
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f023 0301 	bic.w	r3, r3, #1
 800976e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3314      	adds	r3, #20
 8009776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800977a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800977e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009780:	e841 2300 	strex	r3, r2, [r1]
 8009784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1e5      	bne.n	8009758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009790:	2b01      	cmp	r3, #1
 8009792:	d119      	bne.n	80097c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	330c      	adds	r3, #12
 800979a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	e853 3f00 	ldrex	r3, [r3]
 80097a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f023 0310 	bic.w	r3, r3, #16
 80097aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	330c      	adds	r3, #12
 80097b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097b4:	61ba      	str	r2, [r7, #24]
 80097b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b8:	6979      	ldr	r1, [r7, #20]
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	e841 2300 	strex	r3, r2, [r1]
 80097c0:	613b      	str	r3, [r7, #16]
   return(result);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e5      	bne.n	8009794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80097d6:	bf00      	nop
 80097d8:	3754      	adds	r7, #84	@ 0x54
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7ff ff3d 	bl	800967c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800980a:	b480      	push	{r7}
 800980c:	b085      	sub	sp, #20
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b21      	cmp	r3, #33	@ 0x21
 800981c:	d13e      	bne.n	800989c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009826:	d114      	bne.n	8009852 <UART_Transmit_IT+0x48>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d110      	bne.n	8009852 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009844:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	1c9a      	adds	r2, r3, #2
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	621a      	str	r2, [r3, #32]
 8009850:	e008      	b.n	8009864 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	1c59      	adds	r1, r3, #1
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6211      	str	r1, [r2, #32]
 800985c:	781a      	ldrb	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009868:	b29b      	uxth	r3, r3
 800986a:	3b01      	subs	r3, #1
 800986c:	b29b      	uxth	r3, r3
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4619      	mov	r1, r3
 8009872:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10f      	bne.n	8009898 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009886:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009896:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	e000      	b.n	800989e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800989c:	2302      	movs	r3, #2
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7ff fecc 	bl	8009668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b08c      	sub	sp, #48	@ 0x30
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b22      	cmp	r3, #34	@ 0x22
 80098ec:	f040 80ae 	bne.w	8009a4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f8:	d117      	bne.n	800992a <UART_Receive_IT+0x50>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d113      	bne.n	800992a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009902:	2300      	movs	r3, #0
 8009904:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009918:	b29a      	uxth	r2, r3
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009922:	1c9a      	adds	r2, r3, #2
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	629a      	str	r2, [r3, #40]	@ 0x28
 8009928:	e026      	b.n	8009978 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800993c:	d007      	beq.n	800994e <UART_Receive_IT+0x74>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10a      	bne.n	800995c <UART_Receive_IT+0x82>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	b2da      	uxtb	r2, r3
 8009956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	e008      	b.n	800996e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009968:	b2da      	uxtb	r2, r3
 800996a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29b      	uxth	r3, r3
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4619      	mov	r1, r3
 8009986:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009988:	2b00      	cmp	r3, #0
 800998a:	d15d      	bne.n	8009a48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0220 	bic.w	r2, r2, #32
 800999a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80099aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0201 	bic.w	r2, r2, #1
 80099ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d135      	bne.n	8009a3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	613b      	str	r3, [r7, #16]
   return(result);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f023 0310 	bic.w	r3, r3, #16
 80099ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	330c      	adds	r3, #12
 80099f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099f8:	623a      	str	r2, [r7, #32]
 80099fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	69f9      	ldr	r1, [r7, #28]
 80099fe:	6a3a      	ldr	r2, [r7, #32]
 8009a00:	e841 2300 	strex	r3, r2, [r1]
 8009a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e5      	bne.n	80099d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	d10a      	bne.n	8009a30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60fb      	str	r3, [r7, #12]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	60fb      	str	r3, [r7, #12]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff fe2a 	bl	8009690 <HAL_UARTEx_RxEventCallback>
 8009a3c:	e002      	b.n	8009a44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7f8 ffce 	bl	80029e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e002      	b.n	8009a4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e000      	b.n	8009a4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009a4c:	2302      	movs	r3, #2
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3730      	adds	r7, #48	@ 0x30
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a5c:	b0c0      	sub	sp, #256	@ 0x100
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a74:	68d9      	ldr	r1, [r3, #12]
 8009a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	ea40 0301 	orr.w	r3, r0, r1
 8009a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009ab0:	f021 010c 	bic.w	r1, r1, #12
 8009ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ad2:	6999      	ldr	r1, [r3, #24]
 8009ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	ea40 0301 	orr.w	r3, r0, r1
 8009ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	4b8f      	ldr	r3, [pc, #572]	@ (8009d24 <UART_SetConfig+0x2cc>)
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d005      	beq.n	8009af8 <UART_SetConfig+0xa0>
 8009aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	4b8d      	ldr	r3, [pc, #564]	@ (8009d28 <UART_SetConfig+0x2d0>)
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d104      	bne.n	8009b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009af8:	f7fd fa9e 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 8009afc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009b00:	e003      	b.n	8009b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b02:	f7fd fa85 	bl	8007010 <HAL_RCC_GetPCLK1Freq>
 8009b06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0e:	69db      	ldr	r3, [r3, #28]
 8009b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b14:	f040 810c 	bne.w	8009d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009b2a:	4622      	mov	r2, r4
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	1891      	adds	r1, r2, r2
 8009b30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009b32:	415b      	adcs	r3, r3
 8009b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	eb12 0801 	adds.w	r8, r2, r1
 8009b40:	4629      	mov	r1, r5
 8009b42:	eb43 0901 	adc.w	r9, r3, r1
 8009b46:	f04f 0200 	mov.w	r2, #0
 8009b4a:	f04f 0300 	mov.w	r3, #0
 8009b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b5a:	4690      	mov	r8, r2
 8009b5c:	4699      	mov	r9, r3
 8009b5e:	4623      	mov	r3, r4
 8009b60:	eb18 0303 	adds.w	r3, r8, r3
 8009b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b68:	462b      	mov	r3, r5
 8009b6a:	eb49 0303 	adc.w	r3, r9, r3
 8009b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b86:	460b      	mov	r3, r1
 8009b88:	18db      	adds	r3, r3, r3
 8009b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	eb42 0303 	adc.w	r3, r2, r3
 8009b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009b9c:	f7f7 f854 	bl	8000c48 <__aeabi_uldivmod>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4b61      	ldr	r3, [pc, #388]	@ (8009d2c <UART_SetConfig+0x2d4>)
 8009ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8009baa:	095b      	lsrs	r3, r3, #5
 8009bac:	011c      	lsls	r4, r3, #4
 8009bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	1891      	adds	r1, r2, r2
 8009bc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009bc8:	415b      	adcs	r3, r3
 8009bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bf0:	4692      	mov	sl, r2
 8009bf2:	469b      	mov	fp, r3
 8009bf4:	4643      	mov	r3, r8
 8009bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8009bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009bfe:	464b      	mov	r3, r9
 8009c00:	eb4b 0303 	adc.w	r3, fp, r3
 8009c04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	18db      	adds	r3, r3, r3
 8009c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c22:	4613      	mov	r3, r2
 8009c24:	eb42 0303 	adc.w	r3, r2, r3
 8009c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009c32:	f7f7 f809 	bl	8000c48 <__aeabi_uldivmod>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8009d2c <UART_SetConfig+0x2d4>)
 8009c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8009c42:	095b      	lsrs	r3, r3, #5
 8009c44:	2264      	movs	r2, #100	@ 0x64
 8009c46:	fb02 f303 	mul.w	r3, r2, r3
 8009c4a:	1acb      	subs	r3, r1, r3
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009c52:	4b36      	ldr	r3, [pc, #216]	@ (8009d2c <UART_SetConfig+0x2d4>)
 8009c54:	fba3 2302 	umull	r2, r3, r3, r2
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009c60:	441c      	add	r4, r3
 8009c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009c74:	4642      	mov	r2, r8
 8009c76:	464b      	mov	r3, r9
 8009c78:	1891      	adds	r1, r2, r2
 8009c7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009c7c:	415b      	adcs	r3, r3
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009c84:	4641      	mov	r1, r8
 8009c86:	1851      	adds	r1, r2, r1
 8009c88:	6339      	str	r1, [r7, #48]	@ 0x30
 8009c8a:	4649      	mov	r1, r9
 8009c8c:	414b      	adcs	r3, r1
 8009c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c90:	f04f 0200 	mov.w	r2, #0
 8009c94:	f04f 0300 	mov.w	r3, #0
 8009c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	00cb      	lsls	r3, r1, #3
 8009ca0:	4651      	mov	r1, sl
 8009ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ca6:	4651      	mov	r1, sl
 8009ca8:	00ca      	lsls	r2, r1, #3
 8009caa:	4610      	mov	r0, r2
 8009cac:	4619      	mov	r1, r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	189b      	adds	r3, r3, r2
 8009cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cb8:	464b      	mov	r3, r9
 8009cba:	460a      	mov	r2, r1
 8009cbc:	eb42 0303 	adc.w	r3, r2, r3
 8009cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009cd8:	460b      	mov	r3, r1
 8009cda:	18db      	adds	r3, r3, r3
 8009cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cde:	4613      	mov	r3, r2
 8009ce0:	eb42 0303 	adc.w	r3, r2, r3
 8009ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009cee:	f7f6 ffab 	bl	8000c48 <__aeabi_uldivmod>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <UART_SetConfig+0x2d4>)
 8009cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8009cfc:	095b      	lsrs	r3, r3, #5
 8009cfe:	2164      	movs	r1, #100	@ 0x64
 8009d00:	fb01 f303 	mul.w	r3, r1, r3
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	3332      	adds	r3, #50	@ 0x32
 8009d0a:	4a08      	ldr	r2, [pc, #32]	@ (8009d2c <UART_SetConfig+0x2d4>)
 8009d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d10:	095b      	lsrs	r3, r3, #5
 8009d12:	f003 0207 	and.w	r2, r3, #7
 8009d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4422      	add	r2, r4
 8009d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d20:	e106      	b.n	8009f30 <UART_SetConfig+0x4d8>
 8009d22:	bf00      	nop
 8009d24:	40011000 	.word	0x40011000
 8009d28:	40011400 	.word	0x40011400
 8009d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009d42:	4642      	mov	r2, r8
 8009d44:	464b      	mov	r3, r9
 8009d46:	1891      	adds	r1, r2, r2
 8009d48:	6239      	str	r1, [r7, #32]
 8009d4a:	415b      	adcs	r3, r3
 8009d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d52:	4641      	mov	r1, r8
 8009d54:	1854      	adds	r4, r2, r1
 8009d56:	4649      	mov	r1, r9
 8009d58:	eb43 0501 	adc.w	r5, r3, r1
 8009d5c:	f04f 0200 	mov.w	r2, #0
 8009d60:	f04f 0300 	mov.w	r3, #0
 8009d64:	00eb      	lsls	r3, r5, #3
 8009d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d6a:	00e2      	lsls	r2, r4, #3
 8009d6c:	4614      	mov	r4, r2
 8009d6e:	461d      	mov	r5, r3
 8009d70:	4643      	mov	r3, r8
 8009d72:	18e3      	adds	r3, r4, r3
 8009d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d78:	464b      	mov	r3, r9
 8009d7a:	eb45 0303 	adc.w	r3, r5, r3
 8009d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d92:	f04f 0200 	mov.w	r2, #0
 8009d96:	f04f 0300 	mov.w	r3, #0
 8009d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009d9e:	4629      	mov	r1, r5
 8009da0:	008b      	lsls	r3, r1, #2
 8009da2:	4621      	mov	r1, r4
 8009da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009da8:	4621      	mov	r1, r4
 8009daa:	008a      	lsls	r2, r1, #2
 8009dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009db0:	f7f6 ff4a 	bl	8000c48 <__aeabi_uldivmod>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4b60      	ldr	r3, [pc, #384]	@ (8009f3c <UART_SetConfig+0x4e4>)
 8009dba:	fba3 2302 	umull	r2, r3, r3, r2
 8009dbe:	095b      	lsrs	r3, r3, #5
 8009dc0:	011c      	lsls	r4, r3, #4
 8009dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009dcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	1891      	adds	r1, r2, r2
 8009dda:	61b9      	str	r1, [r7, #24]
 8009ddc:	415b      	adcs	r3, r3
 8009dde:	61fb      	str	r3, [r7, #28]
 8009de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009de4:	4641      	mov	r1, r8
 8009de6:	1851      	adds	r1, r2, r1
 8009de8:	6139      	str	r1, [r7, #16]
 8009dea:	4649      	mov	r1, r9
 8009dec:	414b      	adcs	r3, r1
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009dfc:	4659      	mov	r1, fp
 8009dfe:	00cb      	lsls	r3, r1, #3
 8009e00:	4651      	mov	r1, sl
 8009e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e06:	4651      	mov	r1, sl
 8009e08:	00ca      	lsls	r2, r1, #3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4642      	mov	r2, r8
 8009e12:	189b      	adds	r3, r3, r2
 8009e14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e18:	464b      	mov	r3, r9
 8009e1a:	460a      	mov	r2, r1
 8009e1c:	eb42 0303 	adc.w	r3, r2, r3
 8009e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	f04f 0300 	mov.w	r3, #0
 8009e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	008b      	lsls	r3, r1, #2
 8009e40:	4641      	mov	r1, r8
 8009e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e46:	4641      	mov	r1, r8
 8009e48:	008a      	lsls	r2, r1, #2
 8009e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009e4e:	f7f6 fefb 	bl	8000c48 <__aeabi_uldivmod>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4611      	mov	r1, r2
 8009e58:	4b38      	ldr	r3, [pc, #224]	@ (8009f3c <UART_SetConfig+0x4e4>)
 8009e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	2264      	movs	r2, #100	@ 0x64
 8009e62:	fb02 f303 	mul.w	r3, r2, r3
 8009e66:	1acb      	subs	r3, r1, r3
 8009e68:	011b      	lsls	r3, r3, #4
 8009e6a:	3332      	adds	r3, #50	@ 0x32
 8009e6c:	4a33      	ldr	r2, [pc, #204]	@ (8009f3c <UART_SetConfig+0x4e4>)
 8009e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e72:	095b      	lsrs	r3, r3, #5
 8009e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e78:	441c      	add	r4, r3
 8009e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e7e:	2200      	movs	r2, #0
 8009e80:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e82:	677a      	str	r2, [r7, #116]	@ 0x74
 8009e84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	1891      	adds	r1, r2, r2
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	415b      	adcs	r3, r3
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e98:	4641      	mov	r1, r8
 8009e9a:	1851      	adds	r1, r2, r1
 8009e9c:	6039      	str	r1, [r7, #0]
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	414b      	adcs	r3, r1
 8009ea2:	607b      	str	r3, [r7, #4]
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009eb0:	4659      	mov	r1, fp
 8009eb2:	00cb      	lsls	r3, r1, #3
 8009eb4:	4651      	mov	r1, sl
 8009eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eba:	4651      	mov	r1, sl
 8009ebc:	00ca      	lsls	r2, r1, #3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	189b      	adds	r3, r3, r2
 8009ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009eca:	464b      	mov	r3, r9
 8009ecc:	460a      	mov	r2, r1
 8009ece:	eb42 0303 	adc.w	r3, r2, r3
 8009ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ede:	667a      	str	r2, [r7, #100]	@ 0x64
 8009ee0:	f04f 0200 	mov.w	r2, #0
 8009ee4:	f04f 0300 	mov.w	r3, #0
 8009ee8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009eec:	4649      	mov	r1, r9
 8009eee:	008b      	lsls	r3, r1, #2
 8009ef0:	4641      	mov	r1, r8
 8009ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ef6:	4641      	mov	r1, r8
 8009ef8:	008a      	lsls	r2, r1, #2
 8009efa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009efe:	f7f6 fea3 	bl	8000c48 <__aeabi_uldivmod>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4b0d      	ldr	r3, [pc, #52]	@ (8009f3c <UART_SetConfig+0x4e4>)
 8009f08:	fba3 1302 	umull	r1, r3, r3, r2
 8009f0c:	095b      	lsrs	r3, r3, #5
 8009f0e:	2164      	movs	r1, #100	@ 0x64
 8009f10:	fb01 f303 	mul.w	r3, r1, r3
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	011b      	lsls	r3, r3, #4
 8009f18:	3332      	adds	r3, #50	@ 0x32
 8009f1a:	4a08      	ldr	r2, [pc, #32]	@ (8009f3c <UART_SetConfig+0x4e4>)
 8009f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	f003 020f 	and.w	r2, r3, #15
 8009f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4422      	add	r2, r4
 8009f2e:	609a      	str	r2, [r3, #8]
}
 8009f30:	bf00      	nop
 8009f32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009f36:	46bd      	mov	sp, r7
 8009f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f3c:	51eb851f 	.word	0x51eb851f

08009f40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f40:	b084      	sub	sp, #16
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	f107 001c 	add.w	r0, r7, #28
 8009f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d123      	bne.n	8009fa2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d105      	bne.n	8009f96 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 fae8 	bl	800b56c <USB_CoreReset>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]
 8009fa0:	e01b      	b.n	8009fda <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fadc 	bl	800b56c <USB_CoreReset>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009fb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d106      	bne.n	8009fce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	639a      	str	r2, [r3, #56]	@ 0x38
 8009fcc:	e005      	b.n	8009fda <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009fda:	7fbb      	ldrb	r3, [r7, #30]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10b      	bne.n	8009ff8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f043 0206 	orr.w	r2, r3, #6
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f043 0220 	orr.w	r2, r3, #32
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a004:	b004      	add	sp, #16
 800a006:	4770      	bx	lr

0800a008 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a016:	79fb      	ldrb	r3, [r7, #7]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d165      	bne.n	800a0e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4a41      	ldr	r2, [pc, #260]	@ (800a124 <USB_SetTurnaroundTime+0x11c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d906      	bls.n	800a032 <USB_SetTurnaroundTime+0x2a>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	4a40      	ldr	r2, [pc, #256]	@ (800a128 <USB_SetTurnaroundTime+0x120>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d202      	bcs.n	800a032 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a02c:	230f      	movs	r3, #15
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	e062      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4a3c      	ldr	r2, [pc, #240]	@ (800a128 <USB_SetTurnaroundTime+0x120>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d306      	bcc.n	800a048 <USB_SetTurnaroundTime+0x40>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4a3b      	ldr	r2, [pc, #236]	@ (800a12c <USB_SetTurnaroundTime+0x124>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d202      	bcs.n	800a048 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a042:	230e      	movs	r3, #14
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	e057      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4a38      	ldr	r2, [pc, #224]	@ (800a12c <USB_SetTurnaroundTime+0x124>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d306      	bcc.n	800a05e <USB_SetTurnaroundTime+0x56>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	4a37      	ldr	r2, [pc, #220]	@ (800a130 <USB_SetTurnaroundTime+0x128>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d202      	bcs.n	800a05e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a058:	230d      	movs	r3, #13
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e04c      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4a33      	ldr	r2, [pc, #204]	@ (800a130 <USB_SetTurnaroundTime+0x128>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d306      	bcc.n	800a074 <USB_SetTurnaroundTime+0x6c>
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	4a32      	ldr	r2, [pc, #200]	@ (800a134 <USB_SetTurnaroundTime+0x12c>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d802      	bhi.n	800a074 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a06e:	230c      	movs	r3, #12
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	e041      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4a2f      	ldr	r2, [pc, #188]	@ (800a134 <USB_SetTurnaroundTime+0x12c>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d906      	bls.n	800a08a <USB_SetTurnaroundTime+0x82>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4a2e      	ldr	r2, [pc, #184]	@ (800a138 <USB_SetTurnaroundTime+0x130>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d802      	bhi.n	800a08a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a084:	230b      	movs	r3, #11
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	e036      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	4a2a      	ldr	r2, [pc, #168]	@ (800a138 <USB_SetTurnaroundTime+0x130>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d906      	bls.n	800a0a0 <USB_SetTurnaroundTime+0x98>
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	4a29      	ldr	r2, [pc, #164]	@ (800a13c <USB_SetTurnaroundTime+0x134>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d802      	bhi.n	800a0a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a09a:	230a      	movs	r3, #10
 800a09c:	617b      	str	r3, [r7, #20]
 800a09e:	e02b      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4a26      	ldr	r2, [pc, #152]	@ (800a13c <USB_SetTurnaroundTime+0x134>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d906      	bls.n	800a0b6 <USB_SetTurnaroundTime+0xae>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4a25      	ldr	r2, [pc, #148]	@ (800a140 <USB_SetTurnaroundTime+0x138>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d202      	bcs.n	800a0b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a0b0:	2309      	movs	r3, #9
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e020      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	4a21      	ldr	r2, [pc, #132]	@ (800a140 <USB_SetTurnaroundTime+0x138>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d306      	bcc.n	800a0cc <USB_SetTurnaroundTime+0xc4>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	4a20      	ldr	r2, [pc, #128]	@ (800a144 <USB_SetTurnaroundTime+0x13c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d802      	bhi.n	800a0cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a0c6:	2308      	movs	r3, #8
 800a0c8:	617b      	str	r3, [r7, #20]
 800a0ca:	e015      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a144 <USB_SetTurnaroundTime+0x13c>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d906      	bls.n	800a0e2 <USB_SetTurnaroundTime+0xda>
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a148 <USB_SetTurnaroundTime+0x140>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d202      	bcs.n	800a0e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a0dc:	2307      	movs	r3, #7
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	e00a      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a0e2:	2306      	movs	r3, #6
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	e007      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d102      	bne.n	800a0f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a0ee:	2309      	movs	r3, #9
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	e001      	b.n	800a0f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a0f4:	2309      	movs	r3, #9
 800a0f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	029b      	lsls	r3, r3, #10
 800a10c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a110:	431a      	orrs	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	00d8acbf 	.word	0x00d8acbf
 800a128:	00e4e1c0 	.word	0x00e4e1c0
 800a12c:	00f42400 	.word	0x00f42400
 800a130:	01067380 	.word	0x01067380
 800a134:	011a499f 	.word	0x011a499f
 800a138:	01312cff 	.word	0x01312cff
 800a13c:	014ca43f 	.word	0x014ca43f
 800a140:	016e3600 	.word	0x016e3600
 800a144:	01a6ab1f 	.word	0x01a6ab1f
 800a148:	01e84800 	.word	0x01e84800

0800a14c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f043 0201 	orr.w	r2, r3, #1
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f023 0201 	bic.w	r2, r3, #1
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a19c:	2300      	movs	r3, #0
 800a19e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d115      	bne.n	800a1de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a1be:	200a      	movs	r0, #10
 800a1c0:	f7fa f946 	bl	8004450 <HAL_Delay>
      ms += 10U;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	330a      	adds	r3, #10
 800a1c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 f93f 	bl	800b44e <USB_GetMode>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d01e      	beq.n	800a214 <USB_SetCurrentMode+0x84>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a1da:	d9f0      	bls.n	800a1be <USB_SetCurrentMode+0x2e>
 800a1dc:	e01a      	b.n	800a214 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a1de:	78fb      	ldrb	r3, [r7, #3]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d115      	bne.n	800a210 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a1f0:	200a      	movs	r0, #10
 800a1f2:	f7fa f92d 	bl	8004450 <HAL_Delay>
      ms += 10U;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	330a      	adds	r3, #10
 800a1fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 f926 	bl	800b44e <USB_GetMode>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <USB_SetCurrentMode+0x84>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a20c:	d9f0      	bls.n	800a1f0 <USB_SetCurrentMode+0x60>
 800a20e:	e001      	b.n	800a214 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e005      	b.n	800a220 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2bc8      	cmp	r3, #200	@ 0xc8
 800a218:	d101      	bne.n	800a21e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e000      	b.n	800a220 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a228:	b084      	sub	sp, #16
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b086      	sub	sp, #24
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a242:	2300      	movs	r3, #0
 800a244:	613b      	str	r3, [r7, #16]
 800a246:	e009      	b.n	800a25c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3340      	adds	r3, #64	@ 0x40
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	2200      	movs	r2, #0
 800a254:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	3301      	adds	r3, #1
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b0e      	cmp	r3, #14
 800a260:	d9f2      	bls.n	800a248 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a262:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a266:	2b00      	cmp	r3, #0
 800a268:	d11c      	bne.n	800a2a4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a278:	f043 0302 	orr.w	r3, r3, #2
 800a27c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a282:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	639a      	str	r2, [r3, #56]	@ 0x38
 800a2a2:	e00b      	b.n	800a2bc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d10d      	bne.n	800a2ec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f968 	bl	800a5b0 <USB_SetDevSpeed>
 800a2e0:	e008      	b.n	800a2f4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f963 	bl	800a5b0 <USB_SetDevSpeed>
 800a2ea:	e003      	b.n	800a2f4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a2ec:	2103      	movs	r1, #3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f95e 	bl	800a5b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2f4:	2110      	movs	r1, #16
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f8fa 	bl	800a4f0 <USB_FlushTxFifo>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f924 	bl	800a554 <USB_FlushRxFifo>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a31c:	461a      	mov	r2, r3
 800a31e:	2300      	movs	r3, #0
 800a320:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a328:	461a      	mov	r2, r3
 800a32a:	2300      	movs	r3, #0
 800a32c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a334:	461a      	mov	r2, r3
 800a336:	2300      	movs	r3, #0
 800a338:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a33a:	2300      	movs	r3, #0
 800a33c:	613b      	str	r3, [r7, #16]
 800a33e:	e043      	b.n	800a3c8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a352:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a356:	d118      	bne.n	800a38a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10a      	bne.n	800a374 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36a:	461a      	mov	r2, r3
 800a36c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a370:	6013      	str	r3, [r2, #0]
 800a372:	e013      	b.n	800a39c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a380:	461a      	mov	r2, r3
 800a382:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	e008      	b.n	800a39c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a396:	461a      	mov	r2, r3
 800a398:	2300      	movs	r3, #0
 800a39a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	015a      	lsls	r2, r3, #5
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a3c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	613b      	str	r3, [r7, #16]
 800a3c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d3b5      	bcc.n	800a340 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	613b      	str	r3, [r7, #16]
 800a3d8:	e043      	b.n	800a462 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3f0:	d118      	bne.n	800a424 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a404:	461a      	mov	r2, r3
 800a406:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	e013      	b.n	800a436 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a41a:	461a      	mov	r2, r3
 800a41c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	e008      	b.n	800a436 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a430:	461a      	mov	r2, r3
 800a432:	2300      	movs	r3, #0
 800a434:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a442:	461a      	mov	r2, r3
 800a444:	2300      	movs	r3, #0
 800a446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a454:	461a      	mov	r2, r3
 800a456:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a45a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	3301      	adds	r3, #1
 800a460:	613b      	str	r3, [r7, #16]
 800a462:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a466:	461a      	mov	r2, r3
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d3b5      	bcc.n	800a3da <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a47c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a480:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a48e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a490:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a494:	2b00      	cmp	r3, #0
 800a496:	d105      	bne.n	800a4a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	f043 0210 	orr.w	r2, r3, #16
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	699a      	ldr	r2, [r3, #24]
 800a4a8:	4b10      	ldr	r3, [pc, #64]	@ (800a4ec <USB_DevInit+0x2c4>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a4b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d005      	beq.n	800a4c4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	f043 0208 	orr.w	r2, r3, #8
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a4c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d107      	bne.n	800a4dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4d4:	f043 0304 	orr.w	r3, r3, #4
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4e8:	b004      	add	sp, #16
 800a4ea:	4770      	bx	lr
 800a4ec:	803c3800 	.word	0x803c3800

0800a4f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3301      	adds	r3, #1
 800a502:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a50a:	d901      	bls.n	800a510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e01b      	b.n	800a548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	daf2      	bge.n	800a4fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	019b      	lsls	r3, r3, #6
 800a520:	f043 0220 	orr.w	r2, r3, #32
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3301      	adds	r3, #1
 800a52c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a534:	d901      	bls.n	800a53a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e006      	b.n	800a548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b20      	cmp	r3, #32
 800a544:	d0f0      	beq.n	800a528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	3301      	adds	r3, #1
 800a564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a56c:	d901      	bls.n	800a572 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e018      	b.n	800a5a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	daf2      	bge.n	800a560 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2210      	movs	r2, #16
 800a582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3301      	adds	r3, #1
 800a588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a590:	d901      	bls.n	800a596 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e006      	b.n	800a5a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	f003 0310 	and.w	r3, r3, #16
 800a59e:	2b10      	cmp	r3, #16
 800a5a0:	d0f0      	beq.n	800a584 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	68f9      	ldr	r1, [r7, #12]
 800a5cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b087      	sub	sp, #28
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f003 0306 	and.w	r3, r3, #6
 800a5fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d102      	bne.n	800a608 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a602:	2300      	movs	r3, #0
 800a604:	75fb      	strb	r3, [r7, #23]
 800a606:	e00a      	b.n	800a61e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d002      	beq.n	800a614 <USB_GetDevSpeed+0x32>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b06      	cmp	r3, #6
 800a612:	d102      	bne.n	800a61a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a614:	2302      	movs	r3, #2
 800a616:	75fb      	strb	r3, [r7, #23]
 800a618:	e001      	b.n	800a61e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a61a:	230f      	movs	r3, #15
 800a61c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a620:	4618      	mov	r0, r3
 800a622:	371c      	adds	r7, #28
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	785b      	ldrb	r3, [r3, #1]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d13a      	bne.n	800a6be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a64e:	69da      	ldr	r2, [r3, #28]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	f003 030f 	and.w	r3, r3, #15
 800a658:	2101      	movs	r1, #1
 800a65a:	fa01 f303 	lsl.w	r3, r1, r3
 800a65e:	b29b      	uxth	r3, r3
 800a660:	68f9      	ldr	r1, [r7, #12]
 800a662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a666:	4313      	orrs	r3, r2
 800a668:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d155      	bne.n	800a72c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	791b      	ldrb	r3, [r3, #4]
 800a69a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a69c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	059b      	lsls	r3, r3, #22
 800a6a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	0151      	lsls	r1, r2, #5
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	440a      	add	r2, r1
 800a6ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	e036      	b.n	800a72c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6c4:	69da      	ldr	r2, [r3, #28]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	f003 030f 	and.w	r3, r3, #15
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d4:	041b      	lsls	r3, r3, #16
 800a6d6:	68f9      	ldr	r1, [r7, #12]
 800a6d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d11a      	bne.n	800a72c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	791b      	ldrb	r3, [r3, #4]
 800a710:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a712:	430b      	orrs	r3, r1
 800a714:	4313      	orrs	r3, r2
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	0151      	lsls	r1, r2, #5
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	440a      	add	r2, r1
 800a71e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a72a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	785b      	ldrb	r3, [r3, #1]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d161      	bne.n	800a81c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a76a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a76e:	d11f      	bne.n	800a7b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	0151      	lsls	r1, r2, #5
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	440a      	add	r2, r1
 800a786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a78a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a78e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	f003 030f 	and.w	r3, r3, #15
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	43db      	mvns	r3, r3
 800a7ca:	68f9      	ldr	r1, [r7, #12]
 800a7cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7da:	69da      	ldr	r2, [r3, #28]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	f003 030f 	and.w	r3, r3, #15
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	43db      	mvns	r3, r3
 800a7ee:	68f9      	ldr	r1, [r7, #12]
 800a7f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	0159      	lsls	r1, r3, #5
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	440b      	add	r3, r1
 800a80e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a812:	4619      	mov	r1, r3
 800a814:	4b35      	ldr	r3, [pc, #212]	@ (800a8ec <USB_DeactivateEndpoint+0x1b0>)
 800a816:	4013      	ands	r3, r2
 800a818:	600b      	str	r3, [r1, #0]
 800a81a:	e060      	b.n	800a8de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a82e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a832:	d11f      	bne.n	800a874 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	015a      	lsls	r2, r3, #5
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	4413      	add	r3, r2
 800a83c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	0151      	lsls	r1, r2, #5
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	440a      	add	r2, r1
 800a84a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a84e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a852:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	0151      	lsls	r1, r2, #5
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	440a      	add	r2, r1
 800a86a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a86e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a872:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a87a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 030f 	and.w	r3, r3, #15
 800a884:	2101      	movs	r1, #1
 800a886:	fa01 f303 	lsl.w	r3, r1, r3
 800a88a:	041b      	lsls	r3, r3, #16
 800a88c:	43db      	mvns	r3, r3
 800a88e:	68f9      	ldr	r1, [r7, #12]
 800a890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a894:	4013      	ands	r3, r2
 800a896:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a89e:	69da      	ldr	r2, [r3, #28]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 030f 	and.w	r3, r3, #15
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ae:	041b      	lsls	r3, r3, #16
 800a8b0:	43db      	mvns	r3, r3
 800a8b2:	68f9      	ldr	r1, [r7, #12]
 800a8b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	0159      	lsls	r1, r3, #5
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	440b      	add	r3, r1
 800a8d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4b05      	ldr	r3, [pc, #20]	@ (800a8f0 <USB_DeactivateEndpoint+0x1b4>)
 800a8da:	4013      	ands	r3, r2
 800a8dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	ec337800 	.word	0xec337800
 800a8f0:	eff37800 	.word	0xeff37800

0800a8f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08a      	sub	sp, #40	@ 0x28
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	4613      	mov	r3, r2
 800a900:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b01      	cmp	r3, #1
 800a912:	f040 817f 	bne.w	800ac14 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d132      	bne.n	800a984 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	69ba      	ldr	r2, [r7, #24]
 800a92e:	0151      	lsls	r1, r2, #5
 800a930:	69fa      	ldr	r2, [r7, #28]
 800a932:	440a      	add	r2, r1
 800a934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a938:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a93c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	69ba      	ldr	r2, [r7, #24]
 800a952:	0151      	lsls	r1, r2, #5
 800a954:	69fa      	ldr	r2, [r7, #28]
 800a956:	440a      	add	r2, r1
 800a958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a95c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a960:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	69ba      	ldr	r2, [r7, #24]
 800a972:	0151      	lsls	r1, r2, #5
 800a974:	69fa      	ldr	r2, [r7, #28]
 800a976:	440a      	add	r2, r1
 800a978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a97c:	0cdb      	lsrs	r3, r3, #19
 800a97e:	04db      	lsls	r3, r3, #19
 800a980:	6113      	str	r3, [r2, #16]
 800a982:	e097      	b.n	800aab4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	0151      	lsls	r1, r2, #5
 800a996:	69fa      	ldr	r2, [r7, #28]
 800a998:	440a      	add	r2, r1
 800a99a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a99e:	0cdb      	lsrs	r3, r3, #19
 800a9a0:	04db      	lsls	r3, r3, #19
 800a9a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	0151      	lsls	r1, r2, #5
 800a9b6:	69fa      	ldr	r2, [r7, #28]
 800a9b8:	440a      	add	r2, r1
 800a9ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a9c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a9c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d11a      	bne.n	800aa04 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	691a      	ldr	r2, [r3, #16]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d903      	bls.n	800a9e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	689a      	ldr	r2, [r3, #8]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	0151      	lsls	r1, r2, #5
 800a9f4:	69fa      	ldr	r2, [r7, #28]
 800a9f6:	440a      	add	r2, r1
 800a9f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa00:	6113      	str	r3, [r2, #16]
 800aa02:	e044      	b.n	800aa8e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	691a      	ldr	r2, [r3, #16]
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	1e5a      	subs	r2, r3, #1
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa18:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa26:	691a      	ldr	r2, [r3, #16]
 800aa28:	8afb      	ldrh	r3, [r7, #22]
 800aa2a:	04d9      	lsls	r1, r3, #19
 800aa2c:	4ba4      	ldr	r3, [pc, #656]	@ (800acc0 <USB_EPStartXfer+0x3cc>)
 800aa2e:	400b      	ands	r3, r1
 800aa30:	69b9      	ldr	r1, [r7, #24]
 800aa32:	0148      	lsls	r0, r1, #5
 800aa34:	69f9      	ldr	r1, [r7, #28]
 800aa36:	4401      	add	r1, r0
 800aa38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	791b      	ldrb	r3, [r3, #4]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d122      	bne.n	800aa8e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	0151      	lsls	r1, r2, #5
 800aa5a:	69fa      	ldr	r2, [r7, #28]
 800aa5c:	440a      	add	r2, r1
 800aa5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa62:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800aa66:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa74:	691a      	ldr	r2, [r3, #16]
 800aa76:	8afb      	ldrh	r3, [r7, #22]
 800aa78:	075b      	lsls	r3, r3, #29
 800aa7a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800aa7e:	69b9      	ldr	r1, [r7, #24]
 800aa80:	0148      	lsls	r0, r1, #5
 800aa82:	69f9      	ldr	r1, [r7, #28]
 800aa84:	4401      	add	r1, r0
 800aa86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9a:	691a      	ldr	r2, [r3, #16]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaa4:	69b9      	ldr	r1, [r7, #24]
 800aaa6:	0148      	lsls	r0, r1, #5
 800aaa8:	69f9      	ldr	r1, [r7, #28]
 800aaaa:	4401      	add	r1, r0
 800aaac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aab0:	4313      	orrs	r3, r2
 800aab2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d14b      	bne.n	800ab52 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d009      	beq.n	800aad6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aace:	461a      	mov	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	791b      	ldrb	r3, [r3, #4]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d128      	bne.n	800ab30 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d110      	bne.n	800ab10 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	0151      	lsls	r1, r2, #5
 800ab00:	69fa      	ldr	r2, [r7, #28]
 800ab02:	440a      	add	r2, r1
 800ab04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	e00f      	b.n	800ab30 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	69fa      	ldr	r2, [r7, #28]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab2e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	0151      	lsls	r1, r2, #5
 800ab42:	69fa      	ldr	r2, [r7, #28]
 800ab44:	440a      	add	r2, r1
 800ab46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	e166      	b.n	800ae20 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	0151      	lsls	r1, r2, #5
 800ab64:	69fa      	ldr	r2, [r7, #28]
 800ab66:	440a      	add	r2, r1
 800ab68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ab70:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	791b      	ldrb	r3, [r3, #4]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d015      	beq.n	800aba6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 814e 	beq.w	800ae20 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 030f 	and.w	r3, r3, #15
 800ab94:	2101      	movs	r1, #1
 800ab96:	fa01 f303 	lsl.w	r3, r1, r3
 800ab9a:	69f9      	ldr	r1, [r7, #28]
 800ab9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aba0:	4313      	orrs	r3, r2
 800aba2:	634b      	str	r3, [r1, #52]	@ 0x34
 800aba4:	e13c      	b.n	800ae20 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d110      	bne.n	800abd8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	e00f      	b.n	800abf8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	0151      	lsls	r1, r2, #5
 800abea:	69fa      	ldr	r2, [r7, #28]
 800abec:	440a      	add	r2, r1
 800abee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abf6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	68d9      	ldr	r1, [r3, #12]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	781a      	ldrb	r2, [r3, #0]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	b298      	uxth	r0, r3
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 f9b9 	bl	800af84 <USB_WritePacket>
 800ac12:	e105      	b.n	800ae20 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	69ba      	ldr	r2, [r7, #24]
 800ac24:	0151      	lsls	r1, r2, #5
 800ac26:	69fa      	ldr	r2, [r7, #28]
 800ac28:	440a      	add	r2, r1
 800ac2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac2e:	0cdb      	lsrs	r3, r3, #19
 800ac30:	04db      	lsls	r3, r3, #19
 800ac32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	69ba      	ldr	r2, [r7, #24]
 800ac44:	0151      	lsls	r1, r2, #5
 800ac46:	69fa      	ldr	r2, [r7, #28]
 800ac48:	440a      	add	r2, r1
 800ac4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ac52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac56:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d132      	bne.n	800acc4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	689a      	ldr	r2, [r3, #8]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac82:	691a      	ldr	r2, [r3, #16]
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac8c:	69b9      	ldr	r1, [r7, #24]
 800ac8e:	0148      	lsls	r0, r1, #5
 800ac90:	69f9      	ldr	r1, [r7, #28]
 800ac92:	4401      	add	r1, r0
 800ac94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	015a      	lsls	r2, r3, #5
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	0151      	lsls	r1, r2, #5
 800acae:	69fa      	ldr	r2, [r7, #28]
 800acb0:	440a      	add	r2, r1
 800acb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800acba:	6113      	str	r3, [r2, #16]
 800acbc:	e062      	b.n	800ad84 <USB_EPStartXfer+0x490>
 800acbe:	bf00      	nop
 800acc0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d123      	bne.n	800ad14 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd8:	691a      	ldr	r2, [r3, #16]
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ace2:	69b9      	ldr	r1, [r7, #24]
 800ace4:	0148      	lsls	r0, r1, #5
 800ace6:	69f9      	ldr	r1, [r7, #28]
 800ace8:	4401      	add	r1, r0
 800acea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800acee:	4313      	orrs	r3, r2
 800acf0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	0151      	lsls	r1, r2, #5
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	440a      	add	r2, r1
 800ad08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad10:	6113      	str	r3, [r2, #16]
 800ad12:	e037      	b.n	800ad84 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	691a      	ldr	r2, [r3, #16]
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	1e5a      	subs	r2, r3, #1
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad28:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	8afa      	ldrh	r2, [r7, #22]
 800ad30:	fb03 f202 	mul.w	r2, r3, r2
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad44:	691a      	ldr	r2, [r3, #16]
 800ad46:	8afb      	ldrh	r3, [r7, #22]
 800ad48:	04d9      	lsls	r1, r3, #19
 800ad4a:	4b38      	ldr	r3, [pc, #224]	@ (800ae2c <USB_EPStartXfer+0x538>)
 800ad4c:	400b      	ands	r3, r1
 800ad4e:	69b9      	ldr	r1, [r7, #24]
 800ad50:	0148      	lsls	r0, r1, #5
 800ad52:	69f9      	ldr	r1, [r7, #28]
 800ad54:	4401      	add	r1, r0
 800ad56:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	015a      	lsls	r2, r3, #5
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	4413      	add	r3, r2
 800ad66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad6a:	691a      	ldr	r2, [r3, #16]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad74:	69b9      	ldr	r1, [r7, #24]
 800ad76:	0148      	lsls	r0, r1, #5
 800ad78:	69f9      	ldr	r1, [r7, #28]
 800ad7a:	4401      	add	r1, r0
 800ad7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad80:	4313      	orrs	r3, r2
 800ad82:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ad84:	79fb      	ldrb	r3, [r7, #7]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d10d      	bne.n	800ada6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d009      	beq.n	800ada6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	68d9      	ldr	r1, [r3, #12]
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada2:	460a      	mov	r2, r1
 800ada4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	791b      	ldrb	r3, [r3, #4]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d128      	bne.n	800ae00 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d110      	bne.n	800ade0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	0151      	lsls	r1, r2, #5
 800add0:	69fa      	ldr	r2, [r7, #28]
 800add2:	440a      	add	r2, r1
 800add4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800add8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	e00f      	b.n	800ae00 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	69ba      	ldr	r2, [r7, #24]
 800adf0:	0151      	lsls	r1, r2, #5
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	440a      	add	r2, r1
 800adf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	69ba      	ldr	r2, [r7, #24]
 800ae10:	0151      	lsls	r1, r2, #5
 800ae12:	69fa      	ldr	r2, [r7, #28]
 800ae14:	440a      	add	r2, r1
 800ae16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3720      	adds	r7, #32
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	1ff80000 	.word	0x1ff80000

0800ae30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	785b      	ldrb	r3, [r3, #1]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d14a      	bne.n	800aee4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae66:	f040 8086 	bne.w	800af76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	7812      	ldrb	r2, [r2, #0]
 800ae7e:	0151      	lsls	r1, r2, #5
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	440a      	add	r2, r1
 800ae84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	7812      	ldrb	r2, [r2, #0]
 800aea2:	0151      	lsls	r1, r2, #5
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	440a      	add	r2, r1
 800aea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aeb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d902      	bls.n	800aec8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	75fb      	strb	r3, [r7, #23]
          break;
 800aec6:	e056      	b.n	800af76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	015a      	lsls	r2, r3, #5
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	4413      	add	r3, r2
 800aed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aedc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aee0:	d0e7      	beq.n	800aeb2 <USB_EPStopXfer+0x82>
 800aee2:	e048      	b.n	800af76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	015a      	lsls	r2, r3, #5
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	4413      	add	r3, r2
 800aeee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aefc:	d13b      	bne.n	800af76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	7812      	ldrb	r2, [r2, #0]
 800af12:	0151      	lsls	r1, r2, #5
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	440a      	add	r2, r1
 800af18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	015a      	lsls	r2, r3, #5
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	7812      	ldrb	r2, [r2, #0]
 800af36:	0151      	lsls	r1, r2, #5
 800af38:	693a      	ldr	r2, [r7, #16]
 800af3a:	440a      	add	r2, r1
 800af3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3301      	adds	r3, #1
 800af4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800af52:	4293      	cmp	r3, r2
 800af54:	d902      	bls.n	800af5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	75fb      	strb	r3, [r7, #23]
          break;
 800af5a:	e00c      	b.n	800af76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	4413      	add	r3, r2
 800af66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af74:	d0e7      	beq.n	800af46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800af84:	b480      	push	{r7}
 800af86:	b089      	sub	sp, #36	@ 0x24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4611      	mov	r1, r2
 800af90:	461a      	mov	r2, r3
 800af92:	460b      	mov	r3, r1
 800af94:	71fb      	strb	r3, [r7, #7]
 800af96:	4613      	mov	r3, r2
 800af98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800afa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d123      	bne.n	800aff2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800afaa:	88bb      	ldrh	r3, [r7, #4]
 800afac:	3303      	adds	r3, #3
 800afae:	089b      	lsrs	r3, r3, #2
 800afb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800afb2:	2300      	movs	r3, #0
 800afb4:	61bb      	str	r3, [r7, #24]
 800afb6:	e018      	b.n	800afea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800afb8:	79fb      	ldrb	r3, [r7, #7]
 800afba:	031a      	lsls	r2, r3, #12
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afc4:	461a      	mov	r2, r3
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	3301      	adds	r3, #1
 800afd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	3301      	adds	r3, #1
 800afd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	3301      	adds	r3, #1
 800afdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	3301      	adds	r3, #1
 800afe2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	3301      	adds	r3, #1
 800afe8:	61bb      	str	r3, [r7, #24]
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d3e2      	bcc.n	800afb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3724      	adds	r7, #36	@ 0x24
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b000:	b480      	push	{r7}
 800b002:	b08b      	sub	sp, #44	@ 0x2c
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	089b      	lsrs	r3, r3, #2
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b01e:	88fb      	ldrh	r3, [r7, #6]
 800b020:	f003 0303 	and.w	r3, r3, #3
 800b024:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b026:	2300      	movs	r3, #0
 800b028:	623b      	str	r3, [r7, #32]
 800b02a:	e014      	b.n	800b056 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b036:	601a      	str	r2, [r3, #0]
    pDest++;
 800b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03a:	3301      	adds	r3, #1
 800b03c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	3301      	adds	r3, #1
 800b042:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b046:	3301      	adds	r3, #1
 800b048:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04c:	3301      	adds	r3, #1
 800b04e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	3301      	adds	r3, #1
 800b054:	623b      	str	r3, [r7, #32]
 800b056:	6a3a      	ldr	r2, [r7, #32]
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d3e6      	bcc.n	800b02c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b05e:	8bfb      	ldrh	r3, [r7, #30]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01e      	beq.n	800b0a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b06e:	461a      	mov	r2, r3
 800b070:	f107 0310 	add.w	r3, r7, #16
 800b074:	6812      	ldr	r2, [r2, #0]
 800b076:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
 800b084:	b2da      	uxtb	r2, r3
 800b086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b088:	701a      	strb	r2, [r3, #0]
      i++;
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	3301      	adds	r3, #1
 800b08e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	3301      	adds	r3, #1
 800b094:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b096:	8bfb      	ldrh	r3, [r7, #30]
 800b098:	3b01      	subs	r3, #1
 800b09a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b09c:	8bfb      	ldrh	r3, [r7, #30]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1ea      	bne.n	800b078 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	372c      	adds	r7, #44	@ 0x2c
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d12c      	bne.n	800b126 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	db12      	blt.n	800b104 <USB_EPSetStall+0x54>
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00f      	beq.n	800b104 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	015a      	lsls	r2, r3, #5
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	0151      	lsls	r1, r2, #5
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	440a      	add	r2, r1
 800b0fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b102:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	0151      	lsls	r1, r2, #5
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	440a      	add	r2, r1
 800b11a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b11e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	e02b      	b.n	800b17e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	015a      	lsls	r2, r3, #5
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4413      	add	r3, r2
 800b12e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	db12      	blt.n	800b15e <USB_EPSetStall+0xae>
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00f      	beq.n	800b15e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	015a      	lsls	r2, r3, #5
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	4413      	add	r3, r2
 800b146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	0151      	lsls	r1, r2, #5
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	440a      	add	r2, r1
 800b154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b158:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b15c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b178:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b17c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	785b      	ldrb	r3, [r3, #1]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d128      	bne.n	800b1fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	0151      	lsls	r1, r2, #5
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	440a      	add	r2, r1
 800b1be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b1c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	791b      	ldrb	r3, [r3, #4]
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	d003      	beq.n	800b1d8 <USB_EPClearStall+0x4c>
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	791b      	ldrb	r3, [r3, #4]
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d138      	bne.n	800b24a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	0151      	lsls	r1, r2, #5
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	440a      	add	r2, r1
 800b1ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1f6:	6013      	str	r3, [r2, #0]
 800b1f8:	e027      	b.n	800b24a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	015a      	lsls	r2, r3, #5
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	4413      	add	r3, r2
 800b202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	0151      	lsls	r1, r2, #5
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	440a      	add	r2, r1
 800b210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b214:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b218:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	791b      	ldrb	r3, [r3, #4]
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d003      	beq.n	800b22a <USB_EPClearStall+0x9e>
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	791b      	ldrb	r3, [r3, #4]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d10f      	bne.n	800b24a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b248:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b276:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b27a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	78fb      	ldrb	r3, [r7, #3]
 800b286:	011b      	lsls	r3, r3, #4
 800b288:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b28c:	68f9      	ldr	r1, [r7, #12]
 800b28e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b292:	4313      	orrs	r3, r2
 800b294:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b2be:	f023 0303 	bic.w	r3, r3, #3
 800b2c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2d2:	f023 0302 	bic.w	r3, r3, #2
 800b2d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b085      	sub	sp, #20
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b300:	f023 0303 	bic.w	r3, r3, #3
 800b304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b314:	f043 0302 	orr.w	r3, r3, #2
 800b318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4013      	ands	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b340:	68fb      	ldr	r3, [r7, #12]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b34e:	b480      	push	{r7}
 800b350:	b085      	sub	sp, #20
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	4013      	ands	r3, r2
 800b370:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	0c1b      	lsrs	r3, r3, #16
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b382:	b480      	push	{r7}
 800b384:	b085      	sub	sp, #20
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	b29b      	uxth	r3, r3
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b3c6:	78fb      	ldrb	r3, [r7, #3]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b087      	sub	sp, #28
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b414:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	f003 030f 	and.w	r3, r3, #15
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	fa22 f303 	lsr.w	r3, r2, r3
 800b422:	01db      	lsls	r3, r3, #7
 800b424:	b2db      	uxtb	r3, r3
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	4413      	add	r3, r2
 800b434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	4013      	ands	r3, r2
 800b43e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b440:	68bb      	ldr	r3, [r7, #8]
}
 800b442:	4618      	mov	r0, r3
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	f003 0301 	and.w	r3, r3, #1
}
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b085      	sub	sp, #20
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b484:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b488:	f023 0307 	bic.w	r3, r3, #7
 800b48c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b49c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b087      	sub	sp, #28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	333c      	adds	r3, #60	@ 0x3c
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	4a26      	ldr	r2, [pc, #152]	@ (800b568 <USB_EP0_OutStart+0xb8>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d90a      	bls.n	800b4ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4e4:	d101      	bne.n	800b4ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e037      	b.n	800b55a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b504:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b518:	f043 0318 	orr.w	r3, r3, #24
 800b51c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b52c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b530:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b532:	7afb      	ldrb	r3, [r7, #11]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d10f      	bne.n	800b558 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b53e:	461a      	mov	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b552:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b556:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	371c      	adds	r7, #28
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	4f54300a 	.word	0x4f54300a

0800b56c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3301      	adds	r3, #1
 800b57c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b584:	d901      	bls.n	800b58a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b586:	2303      	movs	r3, #3
 800b588:	e01b      	b.n	800b5c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	daf2      	bge.n	800b578 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b592:	2300      	movs	r3, #0
 800b594:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	f043 0201 	orr.w	r2, r3, #1
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5ae:	d901      	bls.n	800b5b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e006      	b.n	800b5c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d0f0      	beq.n	800b5a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b5dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b5e0:	f002 fc9e 	bl	800df20 <USBD_static_malloc>
 800b5e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d109      	bne.n	800b600 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	32b0      	adds	r2, #176	@ 0xb0
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	e0d4      	b.n	800b7aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b600:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b604:	2100      	movs	r1, #0
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f003 fad5 	bl	800ebb6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	32b0      	adds	r2, #176	@ 0xb0
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	32b0      	adds	r2, #176	@ 0xb0
 800b626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7c1b      	ldrb	r3, [r3, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d138      	bne.n	800b6aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b638:	4b5e      	ldr	r3, [pc, #376]	@ (800b7b4 <USBD_CDC_Init+0x1e4>)
 800b63a:	7819      	ldrb	r1, [r3, #0]
 800b63c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b640:	2202      	movs	r2, #2
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f002 fb49 	bl	800dcda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b648:	4b5a      	ldr	r3, [pc, #360]	@ (800b7b4 <USBD_CDC_Init+0x1e4>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	f003 020f 	and.w	r2, r3, #15
 800b650:	6879      	ldr	r1, [r7, #4]
 800b652:	4613      	mov	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	440b      	add	r3, r1
 800b65c:	3324      	adds	r3, #36	@ 0x24
 800b65e:	2201      	movs	r2, #1
 800b660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b662:	4b55      	ldr	r3, [pc, #340]	@ (800b7b8 <USBD_CDC_Init+0x1e8>)
 800b664:	7819      	ldrb	r1, [r3, #0]
 800b666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b66a:	2202      	movs	r2, #2
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f002 fb34 	bl	800dcda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b672:	4b51      	ldr	r3, [pc, #324]	@ (800b7b8 <USBD_CDC_Init+0x1e8>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	f003 020f 	and.w	r2, r3, #15
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	440b      	add	r3, r1
 800b686:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b68a:	2201      	movs	r2, #1
 800b68c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b68e:	4b4b      	ldr	r3, [pc, #300]	@ (800b7bc <USBD_CDC_Init+0x1ec>)
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	f003 020f 	and.w	r2, r3, #15
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	4613      	mov	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4413      	add	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	440b      	add	r3, r1
 800b6a2:	3326      	adds	r3, #38	@ 0x26
 800b6a4:	2210      	movs	r2, #16
 800b6a6:	801a      	strh	r2, [r3, #0]
 800b6a8:	e035      	b.n	800b716 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b6aa:	4b42      	ldr	r3, [pc, #264]	@ (800b7b4 <USBD_CDC_Init+0x1e4>)
 800b6ac:	7819      	ldrb	r1, [r3, #0]
 800b6ae:	2340      	movs	r3, #64	@ 0x40
 800b6b0:	2202      	movs	r2, #2
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f002 fb11 	bl	800dcda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b6b8:	4b3e      	ldr	r3, [pc, #248]	@ (800b7b4 <USBD_CDC_Init+0x1e4>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	f003 020f 	and.w	r2, r3, #15
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	440b      	add	r3, r1
 800b6cc:	3324      	adds	r3, #36	@ 0x24
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b6d2:	4b39      	ldr	r3, [pc, #228]	@ (800b7b8 <USBD_CDC_Init+0x1e8>)
 800b6d4:	7819      	ldrb	r1, [r3, #0]
 800b6d6:	2340      	movs	r3, #64	@ 0x40
 800b6d8:	2202      	movs	r2, #2
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f002 fafd 	bl	800dcda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b6e0:	4b35      	ldr	r3, [pc, #212]	@ (800b7b8 <USBD_CDC_Init+0x1e8>)
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	f003 020f 	and.w	r2, r3, #15
 800b6e8:	6879      	ldr	r1, [r7, #4]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	440b      	add	r3, r1
 800b6f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800b7bc <USBD_CDC_Init+0x1ec>)
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	f003 020f 	and.w	r2, r3, #15
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	4613      	mov	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	440b      	add	r3, r1
 800b710:	3326      	adds	r3, #38	@ 0x26
 800b712:	2210      	movs	r2, #16
 800b714:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b716:	4b29      	ldr	r3, [pc, #164]	@ (800b7bc <USBD_CDC_Init+0x1ec>)
 800b718:	7819      	ldrb	r1, [r3, #0]
 800b71a:	2308      	movs	r3, #8
 800b71c:	2203      	movs	r2, #3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f002 fadb 	bl	800dcda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b724:	4b25      	ldr	r3, [pc, #148]	@ (800b7bc <USBD_CDC_Init+0x1ec>)
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	f003 020f 	and.w	r2, r3, #15
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	440b      	add	r3, r1
 800b738:	3324      	adds	r3, #36	@ 0x24
 800b73a:	2201      	movs	r2, #1
 800b73c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	33b0      	adds	r3, #176	@ 0xb0
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b774:	2302      	movs	r3, #2
 800b776:	e018      	b.n	800b7aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	7c1b      	ldrb	r3, [r3, #16]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b780:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b8 <USBD_CDC_Init+0x1e8>)
 800b782:	7819      	ldrb	r1, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b78a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f002 fb92 	bl	800deb8 <USBD_LL_PrepareReceive>
 800b794:	e008      	b.n	800b7a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b796:	4b08      	ldr	r3, [pc, #32]	@ (800b7b8 <USBD_CDC_Init+0x1e8>)
 800b798:	7819      	ldrb	r1, [r3, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7a0:	2340      	movs	r3, #64	@ 0x40
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f002 fb88 	bl	800deb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200000c3 	.word	0x200000c3
 800b7b8:	200000c4 	.word	0x200000c4
 800b7bc:	200000c5 	.word	0x200000c5

0800b7c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b7cc:	4b3a      	ldr	r3, [pc, #232]	@ (800b8b8 <USBD_CDC_DeInit+0xf8>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f002 faa7 	bl	800dd26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b7d8:	4b37      	ldr	r3, [pc, #220]	@ (800b8b8 <USBD_CDC_DeInit+0xf8>)
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	f003 020f 	and.w	r2, r3, #15
 800b7e0:	6879      	ldr	r1, [r7, #4]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	440b      	add	r3, r1
 800b7ec:	3324      	adds	r3, #36	@ 0x24
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b7f2:	4b32      	ldr	r3, [pc, #200]	@ (800b8bc <USBD_CDC_DeInit+0xfc>)
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f002 fa94 	bl	800dd26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b7fe:	4b2f      	ldr	r3, [pc, #188]	@ (800b8bc <USBD_CDC_DeInit+0xfc>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	f003 020f 	and.w	r2, r3, #15
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	440b      	add	r3, r1
 800b812:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b816:	2200      	movs	r2, #0
 800b818:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b81a:	4b29      	ldr	r3, [pc, #164]	@ (800b8c0 <USBD_CDC_DeInit+0x100>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f002 fa80 	bl	800dd26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b826:	4b26      	ldr	r3, [pc, #152]	@ (800b8c0 <USBD_CDC_DeInit+0x100>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	f003 020f 	and.w	r2, r3, #15
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	440b      	add	r3, r1
 800b83a:	3324      	adds	r3, #36	@ 0x24
 800b83c:	2200      	movs	r2, #0
 800b83e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b840:	4b1f      	ldr	r3, [pc, #124]	@ (800b8c0 <USBD_CDC_DeInit+0x100>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f003 020f 	and.w	r2, r3, #15
 800b848:	6879      	ldr	r1, [r7, #4]
 800b84a:	4613      	mov	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	440b      	add	r3, r1
 800b854:	3326      	adds	r3, #38	@ 0x26
 800b856:	2200      	movs	r2, #0
 800b858:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	32b0      	adds	r2, #176	@ 0xb0
 800b864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d01f      	beq.n	800b8ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	33b0      	adds	r3, #176	@ 0xb0
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	32b0      	adds	r2, #176	@ 0xb0
 800b88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88e:	4618      	mov	r0, r3
 800b890:	f002 fb54 	bl	800df3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	32b0      	adds	r2, #176	@ 0xb0
 800b89e:	2100      	movs	r1, #0
 800b8a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	200000c3 	.word	0x200000c3
 800b8bc:	200000c4 	.word	0x200000c4
 800b8c0:	200000c5 	.word	0x200000c5

0800b8c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	32b0      	adds	r2, #176	@ 0xb0
 800b8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d101      	bne.n	800b8f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	e0bf      	b.n	800ba74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d050      	beq.n	800b9a2 <USBD_CDC_Setup+0xde>
 800b900:	2b20      	cmp	r3, #32
 800b902:	f040 80af 	bne.w	800ba64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	88db      	ldrh	r3, [r3, #6]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d03a      	beq.n	800b984 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	b25b      	sxtb	r3, r3
 800b914:	2b00      	cmp	r3, #0
 800b916:	da1b      	bge.n	800b950 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	33b0      	adds	r3, #176	@ 0xb0
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b92e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	88d2      	ldrh	r2, [r2, #6]
 800b934:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	88db      	ldrh	r3, [r3, #6]
 800b93a:	2b07      	cmp	r3, #7
 800b93c:	bf28      	it	cs
 800b93e:	2307      	movcs	r3, #7
 800b940:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	89fa      	ldrh	r2, [r7, #14]
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 fd93 	bl	800d474 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b94e:	e090      	b.n	800ba72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	785a      	ldrb	r2, [r3, #1]
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	88db      	ldrh	r3, [r3, #6]
 800b95e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b960:	d803      	bhi.n	800b96a <USBD_CDC_Setup+0xa6>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	88db      	ldrh	r3, [r3, #6]
 800b966:	b2da      	uxtb	r2, r3
 800b968:	e000      	b.n	800b96c <USBD_CDC_Setup+0xa8>
 800b96a:	2240      	movs	r2, #64	@ 0x40
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b972:	6939      	ldr	r1, [r7, #16]
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b97a:	461a      	mov	r2, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 fda5 	bl	800d4cc <USBD_CtlPrepareRx>
      break;
 800b982:	e076      	b.n	800ba72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	33b0      	adds	r3, #176	@ 0xb0
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	7850      	ldrb	r0, [r2, #1]
 800b99a:	2200      	movs	r2, #0
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	4798      	blx	r3
      break;
 800b9a0:	e067      	b.n	800ba72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	785b      	ldrb	r3, [r3, #1]
 800b9a6:	2b0b      	cmp	r3, #11
 800b9a8:	d851      	bhi.n	800ba4e <USBD_CDC_Setup+0x18a>
 800b9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b0 <USBD_CDC_Setup+0xec>)
 800b9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b0:	0800b9e1 	.word	0x0800b9e1
 800b9b4:	0800ba5d 	.word	0x0800ba5d
 800b9b8:	0800ba4f 	.word	0x0800ba4f
 800b9bc:	0800ba4f 	.word	0x0800ba4f
 800b9c0:	0800ba4f 	.word	0x0800ba4f
 800b9c4:	0800ba4f 	.word	0x0800ba4f
 800b9c8:	0800ba4f 	.word	0x0800ba4f
 800b9cc:	0800ba4f 	.word	0x0800ba4f
 800b9d0:	0800ba4f 	.word	0x0800ba4f
 800b9d4:	0800ba4f 	.word	0x0800ba4f
 800b9d8:	0800ba0b 	.word	0x0800ba0b
 800b9dc:	0800ba35 	.word	0x0800ba35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d107      	bne.n	800b9fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9ec:	f107 030a 	add.w	r3, r7, #10
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f001 fd3d 	bl	800d474 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9fa:	e032      	b.n	800ba62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f001 fcbb 	bl	800d37a <USBD_CtlError>
            ret = USBD_FAIL;
 800ba04:	2303      	movs	r3, #3
 800ba06:	75fb      	strb	r3, [r7, #23]
          break;
 800ba08:	e02b      	b.n	800ba62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d107      	bne.n	800ba26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ba16:	f107 030d 	add.w	r3, r7, #13
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f001 fd28 	bl	800d474 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba24:	e01d      	b.n	800ba62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f001 fca6 	bl	800d37a <USBD_CtlError>
            ret = USBD_FAIL;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	75fb      	strb	r3, [r7, #23]
          break;
 800ba32:	e016      	b.n	800ba62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d00f      	beq.n	800ba60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f001 fc99 	bl	800d37a <USBD_CtlError>
            ret = USBD_FAIL;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ba4c:	e008      	b.n	800ba60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f001 fc92 	bl	800d37a <USBD_CtlError>
          ret = USBD_FAIL;
 800ba56:	2303      	movs	r3, #3
 800ba58:	75fb      	strb	r3, [r7, #23]
          break;
 800ba5a:	e002      	b.n	800ba62 <USBD_CDC_Setup+0x19e>
          break;
 800ba5c:	bf00      	nop
 800ba5e:	e008      	b.n	800ba72 <USBD_CDC_Setup+0x1ae>
          break;
 800ba60:	bf00      	nop
      }
      break;
 800ba62:	e006      	b.n	800ba72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 fc87 	bl	800d37a <USBD_CtlError>
      ret = USBD_FAIL;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba70:	bf00      	nop
  }

  return (uint8_t)ret;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	32b0      	adds	r2, #176	@ 0xb0
 800ba9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e065      	b.n	800bb72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	32b0      	adds	r2, #176	@ 0xb0
 800bab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bab6:	78fb      	ldrb	r3, [r7, #3]
 800bab8:	f003 020f 	and.w	r2, r3, #15
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	4613      	mov	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	440b      	add	r3, r1
 800bac8:	3318      	adds	r3, #24
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d02f      	beq.n	800bb30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	f003 020f 	and.w	r2, r3, #15
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	4613      	mov	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4413      	add	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	440b      	add	r3, r1
 800bae2:	3318      	adds	r3, #24
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	78fb      	ldrb	r3, [r7, #3]
 800bae8:	f003 010f 	and.w	r1, r3, #15
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	460b      	mov	r3, r1
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	440b      	add	r3, r1
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4403      	add	r3, r0
 800baf8:	331c      	adds	r3, #28
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bb00:	fb01 f303 	mul.w	r3, r1, r3
 800bb04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d112      	bne.n	800bb30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bb0a:	78fb      	ldrb	r3, [r7, #3]
 800bb0c:	f003 020f 	and.w	r2, r3, #15
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	4613      	mov	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	440b      	add	r3, r1
 800bb1c:	3318      	adds	r3, #24
 800bb1e:	2200      	movs	r2, #0
 800bb20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bb22:	78f9      	ldrb	r1, [r7, #3]
 800bb24:	2300      	movs	r3, #0
 800bb26:	2200      	movs	r2, #0
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f002 f9a4 	bl	800de76 <USBD_LL_Transmit>
 800bb2e:	e01f      	b.n	800bb70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	33b0      	adds	r3, #176	@ 0xb0
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d010      	beq.n	800bb70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	33b0      	adds	r3, #176	@ 0xb0
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bb6c:	78fa      	ldrb	r2, [r7, #3]
 800bb6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	32b0      	adds	r2, #176	@ 0xb0
 800bb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	32b0      	adds	r2, #176	@ 0xb0
 800bba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e01a      	b.n	800bbe2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bbac:	78fb      	ldrb	r3, [r7, #3]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f002 f9a2 	bl	800defa <USBD_LL_GetRxDataSize>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	33b0      	adds	r3, #176	@ 0xb0
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	32b0      	adds	r2, #176	@ 0xb0
 800bbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e024      	b.n	800bc56 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	33b0      	adds	r3, #176	@ 0xb0
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d019      	beq.n	800bc54 <USBD_CDC_EP0_RxReady+0x6a>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bc26:	2bff      	cmp	r3, #255	@ 0xff
 800bc28:	d014      	beq.n	800bc54 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	33b0      	adds	r3, #176	@ 0xb0
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bc42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bc4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	22ff      	movs	r2, #255	@ 0xff
 800bc50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
	...

0800bc60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc68:	2182      	movs	r1, #130	@ 0x82
 800bc6a:	4818      	ldr	r0, [pc, #96]	@ (800bccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc6c:	f000 fd4f 	bl	800c70e <USBD_GetEpDesc>
 800bc70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc72:	2101      	movs	r1, #1
 800bc74:	4815      	ldr	r0, [pc, #84]	@ (800bccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc76:	f000 fd4a 	bl	800c70e <USBD_GetEpDesc>
 800bc7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc7c:	2181      	movs	r1, #129	@ 0x81
 800bc7e:	4813      	ldr	r0, [pc, #76]	@ (800bccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc80:	f000 fd45 	bl	800c70e <USBD_GetEpDesc>
 800bc84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	2210      	movs	r2, #16
 800bc90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d006      	beq.n	800bca6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bca0:	711a      	strb	r2, [r3, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d006      	beq.n	800bcba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcb4:	711a      	strb	r2, [r3, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2243      	movs	r2, #67	@ 0x43
 800bcbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bcc0:	4b02      	ldr	r3, [pc, #8]	@ (800bccc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20000080 	.word	0x20000080

0800bcd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bcd8:	2182      	movs	r1, #130	@ 0x82
 800bcda:	4818      	ldr	r0, [pc, #96]	@ (800bd3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bcdc:	f000 fd17 	bl	800c70e <USBD_GetEpDesc>
 800bce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bce2:	2101      	movs	r1, #1
 800bce4:	4815      	ldr	r0, [pc, #84]	@ (800bd3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bce6:	f000 fd12 	bl	800c70e <USBD_GetEpDesc>
 800bcea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bcec:	2181      	movs	r1, #129	@ 0x81
 800bcee:	4813      	ldr	r0, [pc, #76]	@ (800bd3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bcf0:	f000 fd0d 	bl	800c70e <USBD_GetEpDesc>
 800bcf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2210      	movs	r2, #16
 800bd00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d006      	beq.n	800bd16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	711a      	strb	r2, [r3, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f042 0202 	orr.w	r2, r2, #2
 800bd14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d006      	beq.n	800bd2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	711a      	strb	r2, [r3, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f042 0202 	orr.w	r2, r2, #2
 800bd28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2243      	movs	r2, #67	@ 0x43
 800bd2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bd30:	4b02      	ldr	r3, [pc, #8]	@ (800bd3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20000080 	.word	0x20000080

0800bd40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd48:	2182      	movs	r1, #130	@ 0x82
 800bd4a:	4818      	ldr	r0, [pc, #96]	@ (800bdac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd4c:	f000 fcdf 	bl	800c70e <USBD_GetEpDesc>
 800bd50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd52:	2101      	movs	r1, #1
 800bd54:	4815      	ldr	r0, [pc, #84]	@ (800bdac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd56:	f000 fcda 	bl	800c70e <USBD_GetEpDesc>
 800bd5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd5c:	2181      	movs	r1, #129	@ 0x81
 800bd5e:	4813      	ldr	r0, [pc, #76]	@ (800bdac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd60:	f000 fcd5 	bl	800c70e <USBD_GetEpDesc>
 800bd64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	2210      	movs	r2, #16
 800bd70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d006      	beq.n	800bd86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd80:	711a      	strb	r2, [r3, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d006      	beq.n	800bd9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd94:	711a      	strb	r2, [r3, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2243      	movs	r2, #67	@ 0x43
 800bd9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bda0:	4b02      	ldr	r3, [pc, #8]	@ (800bdac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	20000080 	.word	0x20000080

0800bdb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	220a      	movs	r2, #10
 800bdbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bdbe:	4b03      	ldr	r3, [pc, #12]	@ (800bdcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	2000003c 	.word	0x2000003c

0800bdd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d101      	bne.n	800bde4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e009      	b.n	800bdf8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	33b0      	adds	r3, #176	@ 0xb0
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800be04:	b480      	push	{r7}
 800be06:	b087      	sub	sp, #28
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	32b0      	adds	r2, #176	@ 0xb0
 800be1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d101      	bne.n	800be2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800be26:	2303      	movs	r3, #3
 800be28:	e008      	b.n	800be3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	371c      	adds	r7, #28
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	32b0      	adds	r2, #176	@ 0xb0
 800be5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800be68:	2303      	movs	r3, #3
 800be6a:	e004      	b.n	800be76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
	...

0800be84 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	32b0      	adds	r2, #176	@ 0xb0
 800be96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800be9c:	2301      	movs	r3, #1
 800be9e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bea6:	2303      	movs	r3, #3
 800bea8:	e025      	b.n	800bef6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d11f      	bne.n	800bef4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bebc:	4b10      	ldr	r3, [pc, #64]	@ (800bf00 <USBD_CDC_TransmitPacket+0x7c>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 020f 	and.w	r2, r3, #15
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4403      	add	r3, r0
 800bed6:	3318      	adds	r3, #24
 800bed8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800beda:	4b09      	ldr	r3, [pc, #36]	@ (800bf00 <USBD_CDC_TransmitPacket+0x7c>)
 800bedc:	7819      	ldrb	r1, [r3, #0]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f001 ffc3 	bl	800de76 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	200000c3 	.word	0x200000c3

0800bf04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	32b0      	adds	r2, #176	@ 0xb0
 800bf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	32b0      	adds	r2, #176	@ 0xb0
 800bf26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e018      	b.n	800bf64 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	7c1b      	ldrb	r3, [r3, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10a      	bne.n	800bf50 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf3a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf6c <USBD_CDC_ReceivePacket+0x68>)
 800bf3c:	7819      	ldrb	r1, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bf44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 ffb5 	bl	800deb8 <USBD_LL_PrepareReceive>
 800bf4e:	e008      	b.n	800bf62 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf50:	4b06      	ldr	r3, [pc, #24]	@ (800bf6c <USBD_CDC_ReceivePacket+0x68>)
 800bf52:	7819      	ldrb	r1, [r3, #0]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bf5a:	2340      	movs	r3, #64	@ 0x40
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f001 ffab 	bl	800deb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	200000c4 	.word	0x200000c4

0800bf70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d101      	bne.n	800bf88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e01f      	b.n	800bfc8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	79fa      	ldrb	r2, [r7, #7]
 800bfba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f001 fe25 	bl	800dc0c <USBD_LL_Init>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d101      	bne.n	800bfe8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e025      	b.n	800c034 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	32ae      	adds	r2, #174	@ 0xae
 800bffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00f      	beq.n	800c024 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	32ae      	adds	r2, #174	@ 0xae
 800c00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c014:	f107 020e 	add.w	r2, r7, #14
 800c018:	4610      	mov	r0, r2
 800c01a:	4798      	blx	r3
 800c01c:	4602      	mov	r2, r0
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f001 fe2d 	bl	800dca4 <USBD_LL_Start>
 800c04a:	4603      	mov	r3, r0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c05c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c05e:	4618      	mov	r0, r3
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	460b      	mov	r3, r1
 800c074:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c080:	2b00      	cmp	r3, #0
 800c082:	d009      	beq.n	800c098 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	78fa      	ldrb	r2, [r7, #3]
 800c08e:	4611      	mov	r1, r2
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	4798      	blx	r3
 800c094:	4603      	mov	r3, r0
 800c096:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c098:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	78fa      	ldrb	r2, [r7, #3]
 800c0bc:	4611      	mov	r1, r2
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	4798      	blx	r3
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f001 f90c 	bl	800d306 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c10a:	f003 031f 	and.w	r3, r3, #31
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d01a      	beq.n	800c148 <USBD_LL_SetupStage+0x72>
 800c112:	2b02      	cmp	r3, #2
 800c114:	d822      	bhi.n	800c15c <USBD_LL_SetupStage+0x86>
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <USBD_LL_SetupStage+0x4a>
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d00a      	beq.n	800c134 <USBD_LL_SetupStage+0x5e>
 800c11e:	e01d      	b.n	800c15c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fb63 	bl	800c7f4 <USBD_StdDevReq>
 800c12e:	4603      	mov	r3, r0
 800c130:	73fb      	strb	r3, [r7, #15]
      break;
 800c132:	e020      	b.n	800c176 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fbcb 	bl	800c8d8 <USBD_StdItfReq>
 800c142:	4603      	mov	r3, r0
 800c144:	73fb      	strb	r3, [r7, #15]
      break;
 800c146:	e016      	b.n	800c176 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c14e:	4619      	mov	r1, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fc2d 	bl	800c9b0 <USBD_StdEPReq>
 800c156:	4603      	mov	r3, r0
 800c158:	73fb      	strb	r3, [r7, #15]
      break;
 800c15a:	e00c      	b.n	800c176 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c162:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c166:	b2db      	uxtb	r3, r3
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f001 fdfa 	bl	800dd64 <USBD_LL_StallEP>
 800c170:	4603      	mov	r3, r0
 800c172:	73fb      	strb	r3, [r7, #15]
      break;
 800c174:	bf00      	nop
  }

  return ret;
 800c176:	7bfb      	ldrb	r3, [r7, #15]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	460b      	mov	r3, r1
 800c18a:	607a      	str	r2, [r7, #4]
 800c18c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d16e      	bne.n	800c276 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c19e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	f040 8098 	bne.w	800c2dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d913      	bls.n	800c1e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	689a      	ldr	r2, [r3, #8]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	1ad2      	subs	r2, r2, r3
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	68da      	ldr	r2, [r3, #12]
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	bf28      	it	cs
 800c1d2:	4613      	movcs	r3, r2
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f001 f994 	bl	800d506 <USBD_CtlContinueRx>
 800c1de:	e07d      	b.n	800c2dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c1e6:	f003 031f 	and.w	r3, r3, #31
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d014      	beq.n	800c218 <USBD_LL_DataOutStage+0x98>
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d81d      	bhi.n	800c22e <USBD_LL_DataOutStage+0xae>
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d002      	beq.n	800c1fc <USBD_LL_DataOutStage+0x7c>
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d003      	beq.n	800c202 <USBD_LL_DataOutStage+0x82>
 800c1fa:	e018      	b.n	800c22e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	75bb      	strb	r3, [r7, #22]
            break;
 800c200:	e018      	b.n	800c234 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	4619      	mov	r1, r3
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 fa64 	bl	800c6da <USBD_CoreFindIF>
 800c212:	4603      	mov	r3, r0
 800c214:	75bb      	strb	r3, [r7, #22]
            break;
 800c216:	e00d      	b.n	800c234 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	4619      	mov	r1, r3
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f000 fa66 	bl	800c6f4 <USBD_CoreFindEP>
 800c228:	4603      	mov	r3, r0
 800c22a:	75bb      	strb	r3, [r7, #22]
            break;
 800c22c:	e002      	b.n	800c234 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c22e:	2300      	movs	r3, #0
 800c230:	75bb      	strb	r3, [r7, #22]
            break;
 800c232:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c234:	7dbb      	ldrb	r3, [r7, #22]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d119      	bne.n	800c26e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b03      	cmp	r3, #3
 800c244:	d113      	bne.n	800c26e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c246:	7dba      	ldrb	r2, [r7, #22]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	32ae      	adds	r2, #174	@ 0xae
 800c24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00b      	beq.n	800c26e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c256:	7dba      	ldrb	r2, [r7, #22]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c25e:	7dba      	ldrb	r2, [r7, #22]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	32ae      	adds	r2, #174	@ 0xae
 800c264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f001 f95a 	bl	800d528 <USBD_CtlSendStatus>
 800c274:	e032      	b.n	800c2dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c276:	7afb      	ldrb	r3, [r7, #11]
 800c278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	4619      	mov	r1, r3
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f000 fa37 	bl	800c6f4 <USBD_CoreFindEP>
 800c286:	4603      	mov	r3, r0
 800c288:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c28a:	7dbb      	ldrb	r3, [r7, #22]
 800c28c:	2bff      	cmp	r3, #255	@ 0xff
 800c28e:	d025      	beq.n	800c2dc <USBD_LL_DataOutStage+0x15c>
 800c290:	7dbb      	ldrb	r3, [r7, #22]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d122      	bne.n	800c2dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d117      	bne.n	800c2d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c2a2:	7dba      	ldrb	r2, [r7, #22]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	32ae      	adds	r2, #174	@ 0xae
 800c2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00f      	beq.n	800c2d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c2b2:	7dba      	ldrb	r2, [r7, #22]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c2ba:	7dba      	ldrb	r2, [r7, #22]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	32ae      	adds	r2, #174	@ 0xae
 800c2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c4:	699b      	ldr	r3, [r3, #24]
 800c2c6:	7afa      	ldrb	r2, [r7, #11]
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	4798      	blx	r3
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d001      	beq.n	800c2dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
 800c2da:	e000      	b.n	800c2de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b086      	sub	sp, #24
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	607a      	str	r2, [r7, #4]
 800c2f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d16f      	bne.n	800c3da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3314      	adds	r3, #20
 800c2fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c306:	2b02      	cmp	r3, #2
 800c308:	d15a      	bne.n	800c3c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	689a      	ldr	r2, [r3, #8]
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	429a      	cmp	r2, r3
 800c314:	d914      	bls.n	800c340 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	689a      	ldr	r2, [r3, #8]
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	461a      	mov	r2, r3
 800c32a:	6879      	ldr	r1, [r7, #4]
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f001 f8bc 	bl	800d4aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c332:	2300      	movs	r3, #0
 800c334:	2200      	movs	r2, #0
 800c336:	2100      	movs	r1, #0
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f001 fdbd 	bl	800deb8 <USBD_LL_PrepareReceive>
 800c33e:	e03f      	b.n	800c3c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	68da      	ldr	r2, [r3, #12]
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d11c      	bne.n	800c386 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c354:	429a      	cmp	r2, r3
 800c356:	d316      	bcc.n	800c386 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c362:	429a      	cmp	r2, r3
 800c364:	d20f      	bcs.n	800c386 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c366:	2200      	movs	r2, #0
 800c368:	2100      	movs	r1, #0
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f001 f89d 	bl	800d4aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c378:	2300      	movs	r3, #0
 800c37a:	2200      	movs	r2, #0
 800c37c:	2100      	movs	r1, #0
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f001 fd9a 	bl	800deb8 <USBD_LL_PrepareReceive>
 800c384:	e01c      	b.n	800c3c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d10f      	bne.n	800c3b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d009      	beq.n	800c3b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3b2:	2180      	movs	r1, #128	@ 0x80
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f001 fcd5 	bl	800dd64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f001 f8c7 	bl	800d54e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d03a      	beq.n	800c440 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f7ff fe42 	bl	800c054 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c3d8:	e032      	b.n	800c440 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c3da:	7afb      	ldrb	r3, [r7, #11]
 800c3dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 f985 	bl	800c6f4 <USBD_CoreFindEP>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	2bff      	cmp	r3, #255	@ 0xff
 800c3f2:	d025      	beq.n	800c440 <USBD_LL_DataInStage+0x15a>
 800c3f4:	7dfb      	ldrb	r3, [r7, #23]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d122      	bne.n	800c440 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b03      	cmp	r3, #3
 800c404:	d11c      	bne.n	800c440 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c406:	7dfa      	ldrb	r2, [r7, #23]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	32ae      	adds	r2, #174	@ 0xae
 800c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d014      	beq.n	800c440 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c416:	7dfa      	ldrb	r2, [r7, #23]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c41e:	7dfa      	ldrb	r2, [r7, #23]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	32ae      	adds	r2, #174	@ 0xae
 800c424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	7afa      	ldrb	r2, [r7, #11]
 800c42c:	4611      	mov	r1, r2
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	4798      	blx	r3
 800c432:	4603      	mov	r3, r0
 800c434:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c436:	7dbb      	ldrb	r3, [r7, #22]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c43c:	7dbb      	ldrb	r3, [r7, #22]
 800c43e:	e000      	b.n	800c442 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3718      	adds	r7, #24
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b084      	sub	sp, #16
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c482:	2b00      	cmp	r3, #0
 800c484:	d014      	beq.n	800c4b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00e      	beq.n	800c4b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	6852      	ldr	r2, [r2, #4]
 800c49e:	b2d2      	uxtb	r2, r2
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	4798      	blx	r3
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4b0:	2340      	movs	r3, #64	@ 0x40
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f001 fc0f 	bl	800dcda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2240      	movs	r2, #64	@ 0x40
 800c4c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4cc:	2340      	movs	r3, #64	@ 0x40
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	2180      	movs	r1, #128	@ 0x80
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f001 fc01 	bl	800dcda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2240      	movs	r2, #64	@ 0x40
 800c4e2:	621a      	str	r2, [r3, #32]

  return ret;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b083      	sub	sp, #12
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	78fa      	ldrb	r2, [r7, #3]
 800c4fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c50e:	b480      	push	{r7}
 800c510:	b083      	sub	sp, #12
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b04      	cmp	r3, #4
 800c520:	d006      	beq.n	800c530 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c528:	b2da      	uxtb	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2204      	movs	r2, #4
 800c534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	370c      	adds	r7, #12
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b04      	cmp	r3, #4
 800c558:	d106      	bne.n	800c568 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c560:	b2da      	uxtb	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr

0800c576 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b03      	cmp	r3, #3
 800c588:	d110      	bne.n	800c5ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	32ae      	adds	r2, #174	@ 0xae
 800c5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	e01c      	b.n	800c612 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	2b03      	cmp	r3, #3
 800c5e2:	d115      	bne.n	800c610 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	32ae      	adds	r2, #174	@ 0xae
 800c5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f2:	6a1b      	ldr	r3, [r3, #32]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00b      	beq.n	800c610 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	32ae      	adds	r2, #174	@ 0xae
 800c602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	78fa      	ldrb	r2, [r7, #3]
 800c60a:	4611      	mov	r1, r2
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b082      	sub	sp, #8
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	460b      	mov	r3, r1
 800c624:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	32ae      	adds	r2, #174	@ 0xae
 800c630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c638:	2303      	movs	r3, #3
 800c63a:	e01c      	b.n	800c676 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b03      	cmp	r3, #3
 800c646:	d115      	bne.n	800c674 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	32ae      	adds	r2, #174	@ 0xae
 800c652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00b      	beq.n	800c674 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	32ae      	adds	r2, #174	@ 0xae
 800c666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66c:	78fa      	ldrb	r2, [r7, #3]
 800c66e:	4611      	mov	r1, r2
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c67e:	b480      	push	{r7}
 800c680:	b083      	sub	sp, #12
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00e      	beq.n	800c6d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	6852      	ldr	r2, [r2, #4]
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	4798      	blx	r3
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b083      	sub	sp, #12
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c6e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c700:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c702:	4618      	mov	r0, r3
 800c704:	370c      	adds	r7, #12
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b086      	sub	sp, #24
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c722:	2300      	movs	r3, #0
 800c724:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	885b      	ldrh	r3, [r3, #2]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	7812      	ldrb	r2, [r2, #0]
 800c730:	4293      	cmp	r3, r2
 800c732:	d91f      	bls.n	800c774 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c73a:	e013      	b.n	800c764 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c73c:	f107 030a 	add.w	r3, r7, #10
 800c740:	4619      	mov	r1, r3
 800c742:	6978      	ldr	r0, [r7, #20]
 800c744:	f000 f81b 	bl	800c77e <USBD_GetNextDesc>
 800c748:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	785b      	ldrb	r3, [r3, #1]
 800c74e:	2b05      	cmp	r3, #5
 800c750:	d108      	bne.n	800c764 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	789b      	ldrb	r3, [r3, #2]
 800c75a:	78fa      	ldrb	r2, [r7, #3]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d008      	beq.n	800c772 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c760:	2300      	movs	r3, #0
 800c762:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	885b      	ldrh	r3, [r3, #2]
 800c768:	b29a      	uxth	r2, r3
 800c76a:	897b      	ldrh	r3, [r7, #10]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d8e5      	bhi.n	800c73c <USBD_GetEpDesc+0x2e>
 800c770:	e000      	b.n	800c774 <USBD_GetEpDesc+0x66>
          break;
 800c772:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c774:	693b      	ldr	r3, [r7, #16]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}

0800c77e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c77e:	b480      	push	{r7}
 800c780:	b085      	sub	sp, #20
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	7812      	ldrb	r2, [r2, #0]
 800c794:	4413      	add	r3, r2
 800c796:	b29a      	uxth	r2, r3
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b087      	sub	sp, #28
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c7d4:	8a3b      	ldrh	r3, [r7, #16]
 800c7d6:	021b      	lsls	r3, r3, #8
 800c7d8:	b21a      	sxth	r2, r3
 800c7da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	b21b      	sxth	r3, r3
 800c7e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c7e4:	89fb      	ldrh	r3, [r7, #14]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c80a:	2b40      	cmp	r3, #64	@ 0x40
 800c80c:	d005      	beq.n	800c81a <USBD_StdDevReq+0x26>
 800c80e:	2b40      	cmp	r3, #64	@ 0x40
 800c810:	d857      	bhi.n	800c8c2 <USBD_StdDevReq+0xce>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00f      	beq.n	800c836 <USBD_StdDevReq+0x42>
 800c816:	2b20      	cmp	r3, #32
 800c818:	d153      	bne.n	800c8c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	32ae      	adds	r2, #174	@ 0xae
 800c824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	4798      	blx	r3
 800c830:	4603      	mov	r3, r0
 800c832:	73fb      	strb	r3, [r7, #15]
      break;
 800c834:	e04a      	b.n	800c8cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	785b      	ldrb	r3, [r3, #1]
 800c83a:	2b09      	cmp	r3, #9
 800c83c:	d83b      	bhi.n	800c8b6 <USBD_StdDevReq+0xc2>
 800c83e:	a201      	add	r2, pc, #4	@ (adr r2, 800c844 <USBD_StdDevReq+0x50>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c899 	.word	0x0800c899
 800c848:	0800c8ad 	.word	0x0800c8ad
 800c84c:	0800c8b7 	.word	0x0800c8b7
 800c850:	0800c8a3 	.word	0x0800c8a3
 800c854:	0800c8b7 	.word	0x0800c8b7
 800c858:	0800c877 	.word	0x0800c877
 800c85c:	0800c86d 	.word	0x0800c86d
 800c860:	0800c8b7 	.word	0x0800c8b7
 800c864:	0800c88f 	.word	0x0800c88f
 800c868:	0800c881 	.word	0x0800c881
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c86c:	6839      	ldr	r1, [r7, #0]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fa3c 	bl	800ccec <USBD_GetDescriptor>
          break;
 800c874:	e024      	b.n	800c8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c876:	6839      	ldr	r1, [r7, #0]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fba1 	bl	800cfc0 <USBD_SetAddress>
          break;
 800c87e:	e01f      	b.n	800c8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c880:	6839      	ldr	r1, [r7, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fbe0 	bl	800d048 <USBD_SetConfig>
 800c888:	4603      	mov	r3, r0
 800c88a:	73fb      	strb	r3, [r7, #15]
          break;
 800c88c:	e018      	b.n	800c8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 fc83 	bl	800d19c <USBD_GetConfig>
          break;
 800c896:	e013      	b.n	800c8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fcb4 	bl	800d208 <USBD_GetStatus>
          break;
 800c8a0:	e00e      	b.n	800c8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fce3 	bl	800d270 <USBD_SetFeature>
          break;
 800c8aa:	e009      	b.n	800c8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fd07 	bl	800d2c2 <USBD_ClrFeature>
          break;
 800c8b4:	e004      	b.n	800c8c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fd5e 	bl	800d37a <USBD_CtlError>
          break;
 800c8be:	bf00      	nop
      }
      break;
 800c8c0:	e004      	b.n	800c8cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fd58 	bl	800d37a <USBD_CtlError>
      break;
 800c8ca:	bf00      	nop
  }

  return ret;
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop

0800c8d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c8ee:	2b40      	cmp	r3, #64	@ 0x40
 800c8f0:	d005      	beq.n	800c8fe <USBD_StdItfReq+0x26>
 800c8f2:	2b40      	cmp	r3, #64	@ 0x40
 800c8f4:	d852      	bhi.n	800c99c <USBD_StdItfReq+0xc4>
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <USBD_StdItfReq+0x26>
 800c8fa:	2b20      	cmp	r3, #32
 800c8fc:	d14e      	bne.n	800c99c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c904:	b2db      	uxtb	r3, r3
 800c906:	3b01      	subs	r3, #1
 800c908:	2b02      	cmp	r3, #2
 800c90a:	d840      	bhi.n	800c98e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	889b      	ldrh	r3, [r3, #4]
 800c910:	b2db      	uxtb	r3, r3
 800c912:	2b01      	cmp	r3, #1
 800c914:	d836      	bhi.n	800c984 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	889b      	ldrh	r3, [r3, #4]
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	4619      	mov	r1, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7ff fedb 	bl	800c6da <USBD_CoreFindIF>
 800c924:	4603      	mov	r3, r0
 800c926:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c928:	7bbb      	ldrb	r3, [r7, #14]
 800c92a:	2bff      	cmp	r3, #255	@ 0xff
 800c92c:	d01d      	beq.n	800c96a <USBD_StdItfReq+0x92>
 800c92e:	7bbb      	ldrb	r3, [r7, #14]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d11a      	bne.n	800c96a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c934:	7bba      	ldrb	r2, [r7, #14]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	32ae      	adds	r2, #174	@ 0xae
 800c93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00f      	beq.n	800c964 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c944:	7bba      	ldrb	r2, [r7, #14]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c94c:	7bba      	ldrb	r2, [r7, #14]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	32ae      	adds	r2, #174	@ 0xae
 800c952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	4798      	blx	r3
 800c95e:	4603      	mov	r3, r0
 800c960:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c962:	e004      	b.n	800c96e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c964:	2303      	movs	r3, #3
 800c966:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c968:	e001      	b.n	800c96e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c96a:	2303      	movs	r3, #3
 800c96c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	88db      	ldrh	r3, [r3, #6]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d110      	bne.n	800c998 <USBD_StdItfReq+0xc0>
 800c976:	7bfb      	ldrb	r3, [r7, #15]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10d      	bne.n	800c998 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fdd3 	bl	800d528 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c982:	e009      	b.n	800c998 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fcf7 	bl	800d37a <USBD_CtlError>
          break;
 800c98c:	e004      	b.n	800c998 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fcf2 	bl	800d37a <USBD_CtlError>
          break;
 800c996:	e000      	b.n	800c99a <USBD_StdItfReq+0xc2>
          break;
 800c998:	bf00      	nop
      }
      break;
 800c99a:	e004      	b.n	800c9a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fceb 	bl	800d37a <USBD_CtlError>
      break;
 800c9a4:	bf00      	nop
  }

  return ret;
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	889b      	ldrh	r3, [r3, #4]
 800c9c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9cc:	2b40      	cmp	r3, #64	@ 0x40
 800c9ce:	d007      	beq.n	800c9e0 <USBD_StdEPReq+0x30>
 800c9d0:	2b40      	cmp	r3, #64	@ 0x40
 800c9d2:	f200 817f 	bhi.w	800ccd4 <USBD_StdEPReq+0x324>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d02a      	beq.n	800ca30 <USBD_StdEPReq+0x80>
 800c9da:	2b20      	cmp	r3, #32
 800c9dc:	f040 817a 	bne.w	800ccd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c9e0:	7bbb      	ldrb	r3, [r7, #14]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7ff fe85 	bl	800c6f4 <USBD_CoreFindEP>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9ee:	7b7b      	ldrb	r3, [r7, #13]
 800c9f0:	2bff      	cmp	r3, #255	@ 0xff
 800c9f2:	f000 8174 	beq.w	800ccde <USBD_StdEPReq+0x32e>
 800c9f6:	7b7b      	ldrb	r3, [r7, #13]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f040 8170 	bne.w	800ccde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c9fe:	7b7a      	ldrb	r2, [r7, #13]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ca06:	7b7a      	ldrb	r2, [r7, #13]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	32ae      	adds	r2, #174	@ 0xae
 800ca0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f000 8163 	beq.w	800ccde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ca18:	7b7a      	ldrb	r2, [r7, #13]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	32ae      	adds	r2, #174	@ 0xae
 800ca1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	4798      	blx	r3
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca2e:	e156      	b.n	800ccde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	785b      	ldrb	r3, [r3, #1]
 800ca34:	2b03      	cmp	r3, #3
 800ca36:	d008      	beq.n	800ca4a <USBD_StdEPReq+0x9a>
 800ca38:	2b03      	cmp	r3, #3
 800ca3a:	f300 8145 	bgt.w	800ccc8 <USBD_StdEPReq+0x318>
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 809b 	beq.w	800cb7a <USBD_StdEPReq+0x1ca>
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d03c      	beq.n	800cac2 <USBD_StdEPReq+0x112>
 800ca48:	e13e      	b.n	800ccc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d002      	beq.n	800ca5c <USBD_StdEPReq+0xac>
 800ca56:	2b03      	cmp	r3, #3
 800ca58:	d016      	beq.n	800ca88 <USBD_StdEPReq+0xd8>
 800ca5a:	e02c      	b.n	800cab6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00d      	beq.n	800ca7e <USBD_StdEPReq+0xce>
 800ca62:	7bbb      	ldrb	r3, [r7, #14]
 800ca64:	2b80      	cmp	r3, #128	@ 0x80
 800ca66:	d00a      	beq.n	800ca7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 f979 	bl	800dd64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca72:	2180      	movs	r1, #128	@ 0x80
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f001 f975 	bl	800dd64 <USBD_LL_StallEP>
 800ca7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca7c:	e020      	b.n	800cac0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ca7e:	6839      	ldr	r1, [r7, #0]
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 fc7a 	bl	800d37a <USBD_CtlError>
              break;
 800ca86:	e01b      	b.n	800cac0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	885b      	ldrh	r3, [r3, #2]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10e      	bne.n	800caae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca90:	7bbb      	ldrb	r3, [r7, #14]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00b      	beq.n	800caae <USBD_StdEPReq+0xfe>
 800ca96:	7bbb      	ldrb	r3, [r7, #14]
 800ca98:	2b80      	cmp	r3, #128	@ 0x80
 800ca9a:	d008      	beq.n	800caae <USBD_StdEPReq+0xfe>
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	88db      	ldrh	r3, [r3, #6]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d104      	bne.n	800caae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f001 f95b 	bl	800dd64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fd3a 	bl	800d528 <USBD_CtlSendStatus>

              break;
 800cab4:	e004      	b.n	800cac0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fc5e 	bl	800d37a <USBD_CtlError>
              break;
 800cabe:	bf00      	nop
          }
          break;
 800cac0:	e107      	b.n	800ccd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d002      	beq.n	800cad4 <USBD_StdEPReq+0x124>
 800cace:	2b03      	cmp	r3, #3
 800cad0:	d016      	beq.n	800cb00 <USBD_StdEPReq+0x150>
 800cad2:	e04b      	b.n	800cb6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00d      	beq.n	800caf6 <USBD_StdEPReq+0x146>
 800cada:	7bbb      	ldrb	r3, [r7, #14]
 800cadc:	2b80      	cmp	r3, #128	@ 0x80
 800cade:	d00a      	beq.n	800caf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f001 f93d 	bl	800dd64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800caea:	2180      	movs	r1, #128	@ 0x80
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f001 f939 	bl	800dd64 <USBD_LL_StallEP>
 800caf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800caf4:	e040      	b.n	800cb78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fc3e 	bl	800d37a <USBD_CtlError>
              break;
 800cafe:	e03b      	b.n	800cb78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	885b      	ldrh	r3, [r3, #2]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d136      	bne.n	800cb76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d004      	beq.n	800cb1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb12:	7bbb      	ldrb	r3, [r7, #14]
 800cb14:	4619      	mov	r1, r3
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 f943 	bl	800dda2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fd03 	bl	800d528 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb22:	7bbb      	ldrb	r3, [r7, #14]
 800cb24:	4619      	mov	r1, r3
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f7ff fde4 	bl	800c6f4 <USBD_CoreFindEP>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb30:	7b7b      	ldrb	r3, [r7, #13]
 800cb32:	2bff      	cmp	r3, #255	@ 0xff
 800cb34:	d01f      	beq.n	800cb76 <USBD_StdEPReq+0x1c6>
 800cb36:	7b7b      	ldrb	r3, [r7, #13]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d11c      	bne.n	800cb76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cb3c:	7b7a      	ldrb	r2, [r7, #13]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cb44:	7b7a      	ldrb	r2, [r7, #13]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	32ae      	adds	r2, #174	@ 0xae
 800cb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d010      	beq.n	800cb76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb54:	7b7a      	ldrb	r2, [r7, #13]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	32ae      	adds	r2, #174	@ 0xae
 800cb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	4798      	blx	r3
 800cb66:	4603      	mov	r3, r0
 800cb68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cb6a:	e004      	b.n	800cb76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fc03 	bl	800d37a <USBD_CtlError>
              break;
 800cb74:	e000      	b.n	800cb78 <USBD_StdEPReq+0x1c8>
              break;
 800cb76:	bf00      	nop
          }
          break;
 800cb78:	e0ab      	b.n	800ccd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d002      	beq.n	800cb8c <USBD_StdEPReq+0x1dc>
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	d032      	beq.n	800cbf0 <USBD_StdEPReq+0x240>
 800cb8a:	e097      	b.n	800ccbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d007      	beq.n	800cba2 <USBD_StdEPReq+0x1f2>
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	2b80      	cmp	r3, #128	@ 0x80
 800cb96:	d004      	beq.n	800cba2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 fbed 	bl	800d37a <USBD_CtlError>
                break;
 800cba0:	e091      	b.n	800ccc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	da0b      	bge.n	800cbc2 <USBD_StdEPReq+0x212>
 800cbaa:	7bbb      	ldrb	r3, [r7, #14]
 800cbac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	3310      	adds	r3, #16
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	e00b      	b.n	800cbda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbc2:	7bbb      	ldrb	r3, [r7, #14]
 800cbc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbc8:	4613      	mov	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4413      	add	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	3304      	adds	r3, #4
 800cbda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fc43 	bl	800d474 <USBD_CtlSendData>
              break;
 800cbee:	e06a      	b.n	800ccc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cbf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	da11      	bge.n	800cc1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	f003 020f 	and.w	r2, r3, #15
 800cbfe:	6879      	ldr	r1, [r7, #4]
 800cc00:	4613      	mov	r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	440b      	add	r3, r1
 800cc0a:	3324      	adds	r3, #36	@ 0x24
 800cc0c:	881b      	ldrh	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d117      	bne.n	800cc42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 fbb0 	bl	800d37a <USBD_CtlError>
                  break;
 800cc1a:	e054      	b.n	800ccc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	f003 020f 	and.w	r2, r3, #15
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	4613      	mov	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	440b      	add	r3, r1
 800cc2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d104      	bne.n	800cc42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc38:	6839      	ldr	r1, [r7, #0]
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fb9d 	bl	800d37a <USBD_CtlError>
                  break;
 800cc40:	e041      	b.n	800ccc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	da0b      	bge.n	800cc62 <USBD_StdEPReq+0x2b2>
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc50:	4613      	mov	r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	3310      	adds	r3, #16
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	3304      	adds	r3, #4
 800cc60:	e00b      	b.n	800cc7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc68:	4613      	mov	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	4413      	add	r3, r2
 800cc78:	3304      	adds	r3, #4
 800cc7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <USBD_StdEPReq+0x2d8>
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
 800cc84:	2b80      	cmp	r3, #128	@ 0x80
 800cc86:	d103      	bne.n	800cc90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	601a      	str	r2, [r3, #0]
 800cc8e:	e00e      	b.n	800ccae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
 800cc92:	4619      	mov	r1, r3
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f001 f8a3 	bl	800dde0 <USBD_LL_IsStallEP>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d003      	beq.n	800cca8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2201      	movs	r2, #1
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	e002      	b.n	800ccae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	2202      	movs	r2, #2
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fbdd 	bl	800d474 <USBD_CtlSendData>
              break;
 800ccba:	e004      	b.n	800ccc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fb5b 	bl	800d37a <USBD_CtlError>
              break;
 800ccc4:	bf00      	nop
          }
          break;
 800ccc6:	e004      	b.n	800ccd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fb55 	bl	800d37a <USBD_CtlError>
          break;
 800ccd0:	bf00      	nop
      }
      break;
 800ccd2:	e005      	b.n	800cce0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fb4f 	bl	800d37a <USBD_CtlError>
      break;
 800ccdc:	e000      	b.n	800cce0 <USBD_StdEPReq+0x330>
      break;
 800ccde:	bf00      	nop
  }

  return ret;
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
	...

0800ccec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	885b      	ldrh	r3, [r3, #2]
 800cd06:	0a1b      	lsrs	r3, r3, #8
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	2b06      	cmp	r3, #6
 800cd0e:	f200 8128 	bhi.w	800cf62 <USBD_GetDescriptor+0x276>
 800cd12:	a201      	add	r2, pc, #4	@ (adr r2, 800cd18 <USBD_GetDescriptor+0x2c>)
 800cd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd18:	0800cd35 	.word	0x0800cd35
 800cd1c:	0800cd4d 	.word	0x0800cd4d
 800cd20:	0800cd8d 	.word	0x0800cd8d
 800cd24:	0800cf63 	.word	0x0800cf63
 800cd28:	0800cf63 	.word	0x0800cf63
 800cd2c:	0800cf03 	.word	0x0800cf03
 800cd30:	0800cf2f 	.word	0x0800cf2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	7c12      	ldrb	r2, [r2, #16]
 800cd40:	f107 0108 	add.w	r1, r7, #8
 800cd44:	4610      	mov	r0, r2
 800cd46:	4798      	blx	r3
 800cd48:	60f8      	str	r0, [r7, #12]
      break;
 800cd4a:	e112      	b.n	800cf72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	7c1b      	ldrb	r3, [r3, #16]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10d      	bne.n	800cd70 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd5c:	f107 0208 	add.w	r2, r7, #8
 800cd60:	4610      	mov	r0, r2
 800cd62:	4798      	blx	r3
 800cd64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd6e:	e100      	b.n	800cf72 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd78:	f107 0208 	add.w	r2, r7, #8
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	4798      	blx	r3
 800cd80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3301      	adds	r3, #1
 800cd86:	2202      	movs	r2, #2
 800cd88:	701a      	strb	r2, [r3, #0]
      break;
 800cd8a:	e0f2      	b.n	800cf72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	885b      	ldrh	r3, [r3, #2]
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	2b05      	cmp	r3, #5
 800cd94:	f200 80ac 	bhi.w	800cef0 <USBD_GetDescriptor+0x204>
 800cd98:	a201      	add	r2, pc, #4	@ (adr r2, 800cda0 <USBD_GetDescriptor+0xb4>)
 800cd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9e:	bf00      	nop
 800cda0:	0800cdb9 	.word	0x0800cdb9
 800cda4:	0800cded 	.word	0x0800cded
 800cda8:	0800ce21 	.word	0x0800ce21
 800cdac:	0800ce55 	.word	0x0800ce55
 800cdb0:	0800ce89 	.word	0x0800ce89
 800cdb4:	0800cebd 	.word	0x0800cebd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00b      	beq.n	800cddc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	7c12      	ldrb	r2, [r2, #16]
 800cdd0:	f107 0108 	add.w	r1, r7, #8
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	4798      	blx	r3
 800cdd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdda:	e091      	b.n	800cf00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 facb 	bl	800d37a <USBD_CtlError>
            err++;
 800cde4:	7afb      	ldrb	r3, [r7, #11]
 800cde6:	3301      	adds	r3, #1
 800cde8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdea:	e089      	b.n	800cf00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00b      	beq.n	800ce10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	7c12      	ldrb	r2, [r2, #16]
 800ce04:	f107 0108 	add.w	r1, r7, #8
 800ce08:	4610      	mov	r0, r2
 800ce0a:	4798      	blx	r3
 800ce0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce0e:	e077      	b.n	800cf00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fab1 	bl	800d37a <USBD_CtlError>
            err++;
 800ce18:	7afb      	ldrb	r3, [r7, #11]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce1e:	e06f      	b.n	800cf00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	7c12      	ldrb	r2, [r2, #16]
 800ce38:	f107 0108 	add.w	r1, r7, #8
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	4798      	blx	r3
 800ce40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce42:	e05d      	b.n	800cf00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fa97 	bl	800d37a <USBD_CtlError>
            err++;
 800ce4c:	7afb      	ldrb	r3, [r7, #11]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	72fb      	strb	r3, [r7, #11]
          break;
 800ce52:	e055      	b.n	800cf00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00b      	beq.n	800ce78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	7c12      	ldrb	r2, [r2, #16]
 800ce6c:	f107 0108 	add.w	r1, r7, #8
 800ce70:	4610      	mov	r0, r2
 800ce72:	4798      	blx	r3
 800ce74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce76:	e043      	b.n	800cf00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fa7d 	bl	800d37a <USBD_CtlError>
            err++;
 800ce80:	7afb      	ldrb	r3, [r7, #11]
 800ce82:	3301      	adds	r3, #1
 800ce84:	72fb      	strb	r3, [r7, #11]
          break;
 800ce86:	e03b      	b.n	800cf00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00b      	beq.n	800ceac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	7c12      	ldrb	r2, [r2, #16]
 800cea0:	f107 0108 	add.w	r1, r7, #8
 800cea4:	4610      	mov	r0, r2
 800cea6:	4798      	blx	r3
 800cea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceaa:	e029      	b.n	800cf00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fa63 	bl	800d37a <USBD_CtlError>
            err++;
 800ceb4:	7afb      	ldrb	r3, [r7, #11]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	72fb      	strb	r3, [r7, #11]
          break;
 800ceba:	e021      	b.n	800cf00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cec2:	699b      	ldr	r3, [r3, #24]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00b      	beq.n	800cee0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	7c12      	ldrb	r2, [r2, #16]
 800ced4:	f107 0108 	add.w	r1, r7, #8
 800ced8:	4610      	mov	r0, r2
 800ceda:	4798      	blx	r3
 800cedc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cede:	e00f      	b.n	800cf00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fa49 	bl	800d37a <USBD_CtlError>
            err++;
 800cee8:	7afb      	ldrb	r3, [r7, #11]
 800ceea:	3301      	adds	r3, #1
 800ceec:	72fb      	strb	r3, [r7, #11]
          break;
 800ceee:	e007      	b.n	800cf00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cef0:	6839      	ldr	r1, [r7, #0]
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 fa41 	bl	800d37a <USBD_CtlError>
          err++;
 800cef8:	7afb      	ldrb	r3, [r7, #11]
 800cefa:	3301      	adds	r3, #1
 800cefc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cefe:	bf00      	nop
      }
      break;
 800cf00:	e037      	b.n	800cf72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	7c1b      	ldrb	r3, [r3, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d109      	bne.n	800cf1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf12:	f107 0208 	add.w	r2, r7, #8
 800cf16:	4610      	mov	r0, r2
 800cf18:	4798      	blx	r3
 800cf1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf1c:	e029      	b.n	800cf72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 fa2a 	bl	800d37a <USBD_CtlError>
        err++;
 800cf26:	7afb      	ldrb	r3, [r7, #11]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf2c:	e021      	b.n	800cf72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	7c1b      	ldrb	r3, [r3, #16]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10d      	bne.n	800cf52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf3e:	f107 0208 	add.w	r2, r7, #8
 800cf42:	4610      	mov	r0, r2
 800cf44:	4798      	blx	r3
 800cf46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	2207      	movs	r2, #7
 800cf4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf50:	e00f      	b.n	800cf72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fa10 	bl	800d37a <USBD_CtlError>
        err++;
 800cf5a:	7afb      	ldrb	r3, [r7, #11]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf60:	e007      	b.n	800cf72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fa08 	bl	800d37a <USBD_CtlError>
      err++;
 800cf6a:	7afb      	ldrb	r3, [r7, #11]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf70:	bf00      	nop
  }

  if (err != 0U)
 800cf72:	7afb      	ldrb	r3, [r7, #11]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d11e      	bne.n	800cfb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	88db      	ldrh	r3, [r3, #6]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d016      	beq.n	800cfae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cf80:	893b      	ldrh	r3, [r7, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00e      	beq.n	800cfa4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	88da      	ldrh	r2, [r3, #6]
 800cf8a:	893b      	ldrh	r3, [r7, #8]
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	bf28      	it	cs
 800cf90:	4613      	movcs	r3, r2
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf96:	893b      	ldrh	r3, [r7, #8]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	68f9      	ldr	r1, [r7, #12]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fa69 	bl	800d474 <USBD_CtlSendData>
 800cfa2:	e009      	b.n	800cfb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f9e7 	bl	800d37a <USBD_CtlError>
 800cfac:	e004      	b.n	800cfb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 faba 	bl	800d528 <USBD_CtlSendStatus>
 800cfb4:	e000      	b.n	800cfb8 <USBD_GetDescriptor+0x2cc>
    return;
 800cfb6:	bf00      	nop
  }
}
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop

0800cfc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	889b      	ldrh	r3, [r3, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d131      	bne.n	800d036 <USBD_SetAddress+0x76>
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	88db      	ldrh	r3, [r3, #6]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d12d      	bne.n	800d036 <USBD_SetAddress+0x76>
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	885b      	ldrh	r3, [r3, #2]
 800cfde:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfe0:	d829      	bhi.n	800d036 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	885b      	ldrh	r3, [r3, #2]
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d104      	bne.n	800d004 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 f9bc 	bl	800d37a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d002:	e01d      	b.n	800d040 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	7bfa      	ldrb	r2, [r7, #15]
 800d008:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
 800d00e:	4619      	mov	r1, r3
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 ff11 	bl	800de38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 fa86 	bl	800d528 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d004      	beq.n	800d02c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2202      	movs	r2, #2
 800d026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d02a:	e009      	b.n	800d040 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d034:	e004      	b.n	800d040 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d036:	6839      	ldr	r1, [r7, #0]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 f99e 	bl	800d37a <USBD_CtlError>
  }
}
 800d03e:	bf00      	nop
 800d040:	bf00      	nop
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	885b      	ldrh	r3, [r3, #2]
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	4b4e      	ldr	r3, [pc, #312]	@ (800d198 <USBD_SetConfig+0x150>)
 800d05e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d060:	4b4d      	ldr	r3, [pc, #308]	@ (800d198 <USBD_SetConfig+0x150>)
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d905      	bls.n	800d074 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f985 	bl	800d37a <USBD_CtlError>
    return USBD_FAIL;
 800d070:	2303      	movs	r3, #3
 800d072:	e08c      	b.n	800d18e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d002      	beq.n	800d086 <USBD_SetConfig+0x3e>
 800d080:	2b03      	cmp	r3, #3
 800d082:	d029      	beq.n	800d0d8 <USBD_SetConfig+0x90>
 800d084:	e075      	b.n	800d172 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d086:	4b44      	ldr	r3, [pc, #272]	@ (800d198 <USBD_SetConfig+0x150>)
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d020      	beq.n	800d0d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d08e:	4b42      	ldr	r3, [pc, #264]	@ (800d198 <USBD_SetConfig+0x150>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d098:	4b3f      	ldr	r3, [pc, #252]	@ (800d198 <USBD_SetConfig+0x150>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	4619      	mov	r1, r3
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7fe ffe3 	bl	800c06a <USBD_SetClassConfig>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d008      	beq.n	800d0c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d0ae:	6839      	ldr	r1, [r7, #0]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 f962 	bl	800d37a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2202      	movs	r2, #2
 800d0ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0be:	e065      	b.n	800d18c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 fa31 	bl	800d528 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2203      	movs	r2, #3
 800d0ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d0ce:	e05d      	b.n	800d18c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fa29 	bl	800d528 <USBD_CtlSendStatus>
      break;
 800d0d6:	e059      	b.n	800d18c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d0d8:	4b2f      	ldr	r3, [pc, #188]	@ (800d198 <USBD_SetConfig+0x150>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d112      	bne.n	800d106 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2202      	movs	r2, #2
 800d0e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d0e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d198 <USBD_SetConfig+0x150>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0f2:	4b29      	ldr	r3, [pc, #164]	@ (800d198 <USBD_SetConfig+0x150>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7fe ffd2 	bl	800c0a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fa12 	bl	800d528 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d104:	e042      	b.n	800d18c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d106:	4b24      	ldr	r3, [pc, #144]	@ (800d198 <USBD_SetConfig+0x150>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	461a      	mov	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d02a      	beq.n	800d16a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	4619      	mov	r1, r3
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7fe ffc0 	bl	800c0a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d122:	4b1d      	ldr	r3, [pc, #116]	@ (800d198 <USBD_SetConfig+0x150>)
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d12c:	4b1a      	ldr	r3, [pc, #104]	@ (800d198 <USBD_SetConfig+0x150>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	4619      	mov	r1, r3
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7fe ff99 	bl	800c06a <USBD_SetClassConfig>
 800d138:	4603      	mov	r3, r0
 800d13a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00f      	beq.n	800d162 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d142:	6839      	ldr	r1, [r7, #0]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f918 	bl	800d37a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	4619      	mov	r1, r3
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7fe ffa5 	bl	800c0a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2202      	movs	r2, #2
 800d15c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d160:	e014      	b.n	800d18c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f9e0 	bl	800d528 <USBD_CtlSendStatus>
      break;
 800d168:	e010      	b.n	800d18c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f9dc 	bl	800d528 <USBD_CtlSendStatus>
      break;
 800d170:	e00c      	b.n	800d18c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d172:	6839      	ldr	r1, [r7, #0]
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f900 	bl	800d37a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d17a:	4b07      	ldr	r3, [pc, #28]	@ (800d198 <USBD_SetConfig+0x150>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	4619      	mov	r1, r3
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7fe ff8e 	bl	800c0a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d186:	2303      	movs	r3, #3
 800d188:	73fb      	strb	r3, [r7, #15]
      break;
 800d18a:	bf00      	nop
  }

  return ret;
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	20000ae4 	.word	0x20000ae4

0800d19c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	88db      	ldrh	r3, [r3, #6]
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d004      	beq.n	800d1b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 f8e2 	bl	800d37a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1b6:	e023      	b.n	800d200 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	dc02      	bgt.n	800d1ca <USBD_GetConfig+0x2e>
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	dc03      	bgt.n	800d1d0 <USBD_GetConfig+0x34>
 800d1c8:	e015      	b.n	800d1f6 <USBD_GetConfig+0x5a>
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d00b      	beq.n	800d1e6 <USBD_GetConfig+0x4a>
 800d1ce:	e012      	b.n	800d1f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	3308      	adds	r3, #8
 800d1da:	2201      	movs	r2, #1
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 f948 	bl	800d474 <USBD_CtlSendData>
        break;
 800d1e4:	e00c      	b.n	800d200 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f940 	bl	800d474 <USBD_CtlSendData>
        break;
 800d1f4:	e004      	b.n	800d200 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f8be 	bl	800d37a <USBD_CtlError>
        break;
 800d1fe:	bf00      	nop
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d81e      	bhi.n	800d25e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	88db      	ldrh	r3, [r3, #6]
 800d224:	2b02      	cmp	r3, #2
 800d226:	d004      	beq.n	800d232 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f8a5 	bl	800d37a <USBD_CtlError>
        break;
 800d230:	e01a      	b.n	800d268 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d005      	beq.n	800d24e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	f043 0202 	orr.w	r2, r3, #2
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	330c      	adds	r3, #12
 800d252:	2202      	movs	r2, #2
 800d254:	4619      	mov	r1, r3
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f90c 	bl	800d474 <USBD_CtlSendData>
      break;
 800d25c:	e004      	b.n	800d268 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f88a 	bl	800d37a <USBD_CtlError>
      break;
 800d266:	bf00      	nop
  }
}
 800d268:	bf00      	nop
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	885b      	ldrh	r3, [r3, #2]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d107      	bne.n	800d292 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f94c 	bl	800d528 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d290:	e013      	b.n	800d2ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	885b      	ldrh	r3, [r3, #2]
 800d296:	2b02      	cmp	r3, #2
 800d298:	d10b      	bne.n	800d2b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	889b      	ldrh	r3, [r3, #4]
 800d29e:	0a1b      	lsrs	r3, r3, #8
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f93c 	bl	800d528 <USBD_CtlSendStatus>
}
 800d2b0:	e003      	b.n	800d2ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 f860 	bl	800d37a <USBD_CtlError>
}
 800d2ba:	bf00      	nop
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b082      	sub	sp, #8
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	3b01      	subs	r3, #1
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d80b      	bhi.n	800d2f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	885b      	ldrh	r3, [r3, #2]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d10c      	bne.n	800d2fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f91c 	bl	800d528 <USBD_CtlSendStatus>
      }
      break;
 800d2f0:	e004      	b.n	800d2fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f840 	bl	800d37a <USBD_CtlError>
      break;
 800d2fa:	e000      	b.n	800d2fe <USBD_ClrFeature+0x3c>
      break;
 800d2fc:	bf00      	nop
  }
}
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	781a      	ldrb	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	3301      	adds	r3, #1
 800d320:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	781a      	ldrb	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3301      	adds	r3, #1
 800d32e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7ff fa40 	bl	800c7b6 <SWAPBYTE>
 800d336:	4603      	mov	r3, r0
 800d338:	461a      	mov	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3301      	adds	r3, #1
 800d342:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3301      	adds	r3, #1
 800d348:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f7ff fa33 	bl	800c7b6 <SWAPBYTE>
 800d350:	4603      	mov	r3, r0
 800d352:	461a      	mov	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3301      	adds	r3, #1
 800d35c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3301      	adds	r3, #1
 800d362:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f7ff fa26 	bl	800c7b6 <SWAPBYTE>
 800d36a:	4603      	mov	r3, r0
 800d36c:	461a      	mov	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	80da      	strh	r2, [r3, #6]
}
 800d372:	bf00      	nop
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b082      	sub	sp, #8
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d384:	2180      	movs	r1, #128	@ 0x80
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fcec 	bl	800dd64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d38c:	2100      	movs	r1, #0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 fce8 	bl	800dd64 <USBD_LL_StallEP>
}
 800d394:	bf00      	nop
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d042      	beq.n	800d438 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d3b6:	6938      	ldr	r0, [r7, #16]
 800d3b8:	f000 f842 	bl	800d440 <USBD_GetLen>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	3301      	adds	r3, #1
 800d3c0:	005b      	lsls	r3, r3, #1
 800d3c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3c6:	d808      	bhi.n	800d3da <USBD_GetString+0x3e>
 800d3c8:	6938      	ldr	r0, [r7, #16]
 800d3ca:	f000 f839 	bl	800d440 <USBD_GetLen>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	e001      	b.n	800d3de <USBD_GetString+0x42>
 800d3da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	7812      	ldrb	r2, [r2, #0]
 800d3ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3ee:	7dfb      	ldrb	r3, [r7, #23]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d3f4:	7dfb      	ldrb	r3, [r7, #23]
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	2203      	movs	r2, #3
 800d3fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
 800d400:	3301      	adds	r3, #1
 800d402:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d404:	e013      	b.n	800d42e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d406:	7dfb      	ldrb	r3, [r7, #23]
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	4413      	add	r3, r2
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	7812      	ldrb	r2, [r2, #0]
 800d410:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	3301      	adds	r3, #1
 800d416:	613b      	str	r3, [r7, #16]
    idx++;
 800d418:	7dfb      	ldrb	r3, [r7, #23]
 800d41a:	3301      	adds	r3, #1
 800d41c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	4413      	add	r3, r2
 800d424:	2200      	movs	r2, #0
 800d426:	701a      	strb	r2, [r3, #0]
    idx++;
 800d428:	7dfb      	ldrb	r3, [r7, #23]
 800d42a:	3301      	adds	r3, #1
 800d42c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1e7      	bne.n	800d406 <USBD_GetString+0x6a>
 800d436:	e000      	b.n	800d43a <USBD_GetString+0x9e>
    return;
 800d438:	bf00      	nop
  }
}
 800d43a:	3718      	adds	r7, #24
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d440:	b480      	push	{r7}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d448:	2300      	movs	r3, #0
 800d44a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d450:	e005      	b.n	800d45e <USBD_GetLen+0x1e>
  {
    len++;
 800d452:	7bfb      	ldrb	r3, [r7, #15]
 800d454:	3301      	adds	r3, #1
 800d456:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	3301      	adds	r3, #1
 800d45c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1f5      	bne.n	800d452 <USBD_GetLen+0x12>
  }

  return len;
 800d466:	7bfb      	ldrb	r3, [r7, #15]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3714      	adds	r7, #20
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2202      	movs	r2, #2
 800d484:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	2100      	movs	r1, #0
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f000 fceb 	bl	800de76 <USBD_LL_Transmit>

  return USBD_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	68f8      	ldr	r0, [r7, #12]
 800d4be:	f000 fcda 	bl	800de76 <USBD_LL_Transmit>

  return USBD_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2203      	movs	r2, #3
 800d4dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f000 fcde 	bl	800deb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b084      	sub	sp, #16
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	60f8      	str	r0, [r7, #12]
 800d50e:	60b9      	str	r1, [r7, #8]
 800d510:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	68ba      	ldr	r2, [r7, #8]
 800d516:	2100      	movs	r1, #0
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 fccd 	bl	800deb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2204      	movs	r2, #4
 800d534:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d538:	2300      	movs	r3, #0
 800d53a:	2200      	movs	r2, #0
 800d53c:	2100      	movs	r1, #0
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fc99 	bl	800de76 <USBD_LL_Transmit>

  return USBD_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3708      	adds	r7, #8
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b082      	sub	sp, #8
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2205      	movs	r2, #5
 800d55a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d55e:	2300      	movs	r3, #0
 800d560:	2200      	movs	r2, #0
 800d562:	2100      	movs	r1, #0
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fca7 	bl	800deb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d578:	2200      	movs	r2, #0
 800d57a:	4912      	ldr	r1, [pc, #72]	@ (800d5c4 <MX_USB_DEVICE_Init+0x50>)
 800d57c:	4812      	ldr	r0, [pc, #72]	@ (800d5c8 <MX_USB_DEVICE_Init+0x54>)
 800d57e:	f7fe fcf7 	bl	800bf70 <USBD_Init>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d588:	f7f6 f8e4 	bl	8003754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d58c:	490f      	ldr	r1, [pc, #60]	@ (800d5cc <MX_USB_DEVICE_Init+0x58>)
 800d58e:	480e      	ldr	r0, [pc, #56]	@ (800d5c8 <MX_USB_DEVICE_Init+0x54>)
 800d590:	f7fe fd1e 	bl	800bfd0 <USBD_RegisterClass>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d59a:	f7f6 f8db 	bl	8003754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d59e:	490c      	ldr	r1, [pc, #48]	@ (800d5d0 <MX_USB_DEVICE_Init+0x5c>)
 800d5a0:	4809      	ldr	r0, [pc, #36]	@ (800d5c8 <MX_USB_DEVICE_Init+0x54>)
 800d5a2:	f7fe fc15 	bl	800bdd0 <USBD_CDC_RegisterInterface>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d001      	beq.n	800d5b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d5ac:	f7f6 f8d2 	bl	8003754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d5b0:	4805      	ldr	r0, [pc, #20]	@ (800d5c8 <MX_USB_DEVICE_Init+0x54>)
 800d5b2:	f7fe fd43 	bl	800c03c <USBD_Start>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d001      	beq.n	800d5c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d5bc:	f7f6 f8ca 	bl	8003754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d5c0:	bf00      	nop
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	200000dc 	.word	0x200000dc
 800d5c8:	20000ae8 	.word	0x20000ae8
 800d5cc:	20000048 	.word	0x20000048
 800d5d0:	200000c8 	.word	0x200000c8

0800d5d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d5d8:	2200      	movs	r2, #0
 800d5da:	4905      	ldr	r1, [pc, #20]	@ (800d5f0 <CDC_Init_FS+0x1c>)
 800d5dc:	4805      	ldr	r0, [pc, #20]	@ (800d5f4 <CDC_Init_FS+0x20>)
 800d5de:	f7fe fc11 	bl	800be04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d5e2:	4905      	ldr	r1, [pc, #20]	@ (800d5f8 <CDC_Init_FS+0x24>)
 800d5e4:	4803      	ldr	r0, [pc, #12]	@ (800d5f4 <CDC_Init_FS+0x20>)
 800d5e6:	f7fe fc2f 	bl	800be48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d5ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	200015c4 	.word	0x200015c4
 800d5f4:	20000ae8 	.word	0x20000ae8
 800d5f8:	20000dc4 	.word	0x20000dc4

0800d5fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d600:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d602:	4618      	mov	r0, r3
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	6039      	str	r1, [r7, #0]
 800d616:	71fb      	strb	r3, [r7, #7]
 800d618:	4613      	mov	r3, r2
 800d61a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d61c:	79fb      	ldrb	r3, [r7, #7]
 800d61e:	2b23      	cmp	r3, #35	@ 0x23
 800d620:	d84a      	bhi.n	800d6b8 <CDC_Control_FS+0xac>
 800d622:	a201      	add	r2, pc, #4	@ (adr r2, 800d628 <CDC_Control_FS+0x1c>)
 800d624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d628:	0800d6b9 	.word	0x0800d6b9
 800d62c:	0800d6b9 	.word	0x0800d6b9
 800d630:	0800d6b9 	.word	0x0800d6b9
 800d634:	0800d6b9 	.word	0x0800d6b9
 800d638:	0800d6b9 	.word	0x0800d6b9
 800d63c:	0800d6b9 	.word	0x0800d6b9
 800d640:	0800d6b9 	.word	0x0800d6b9
 800d644:	0800d6b9 	.word	0x0800d6b9
 800d648:	0800d6b9 	.word	0x0800d6b9
 800d64c:	0800d6b9 	.word	0x0800d6b9
 800d650:	0800d6b9 	.word	0x0800d6b9
 800d654:	0800d6b9 	.word	0x0800d6b9
 800d658:	0800d6b9 	.word	0x0800d6b9
 800d65c:	0800d6b9 	.word	0x0800d6b9
 800d660:	0800d6b9 	.word	0x0800d6b9
 800d664:	0800d6b9 	.word	0x0800d6b9
 800d668:	0800d6b9 	.word	0x0800d6b9
 800d66c:	0800d6b9 	.word	0x0800d6b9
 800d670:	0800d6b9 	.word	0x0800d6b9
 800d674:	0800d6b9 	.word	0x0800d6b9
 800d678:	0800d6b9 	.word	0x0800d6b9
 800d67c:	0800d6b9 	.word	0x0800d6b9
 800d680:	0800d6b9 	.word	0x0800d6b9
 800d684:	0800d6b9 	.word	0x0800d6b9
 800d688:	0800d6b9 	.word	0x0800d6b9
 800d68c:	0800d6b9 	.word	0x0800d6b9
 800d690:	0800d6b9 	.word	0x0800d6b9
 800d694:	0800d6b9 	.word	0x0800d6b9
 800d698:	0800d6b9 	.word	0x0800d6b9
 800d69c:	0800d6b9 	.word	0x0800d6b9
 800d6a0:	0800d6b9 	.word	0x0800d6b9
 800d6a4:	0800d6b9 	.word	0x0800d6b9
 800d6a8:	0800d6b9 	.word	0x0800d6b9
 800d6ac:	0800d6b9 	.word	0x0800d6b9
 800d6b0:	0800d6b9 	.word	0x0800d6b9
 800d6b4:	0800d6b9 	.word	0x0800d6b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d6b8:	bf00      	nop
  }

  return (USBD_OK);
 800d6ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	4805      	ldr	r0, [pc, #20]	@ (800d6ec <CDC_Receive_FS+0x24>)
 800d6d6:	f7fe fbb7 	bl	800be48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d6da:	4804      	ldr	r0, [pc, #16]	@ (800d6ec <CDC_Receive_FS+0x24>)
 800d6dc:	f7fe fc12 	bl	800bf04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d6e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20000ae8 	.word	0x20000ae8

0800d6f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d700:	4b0d      	ldr	r3, [pc, #52]	@ (800d738 <CDC_Transmit_FS+0x48>)
 800d702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d706:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d712:	2301      	movs	r3, #1
 800d714:	e00b      	b.n	800d72e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d716:	887b      	ldrh	r3, [r7, #2]
 800d718:	461a      	mov	r2, r3
 800d71a:	6879      	ldr	r1, [r7, #4]
 800d71c:	4806      	ldr	r0, [pc, #24]	@ (800d738 <CDC_Transmit_FS+0x48>)
 800d71e:	f7fe fb71 	bl	800be04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d722:	4805      	ldr	r0, [pc, #20]	@ (800d738 <CDC_Transmit_FS+0x48>)
 800d724:	f7fe fbae 	bl	800be84 <USBD_CDC_TransmitPacket>
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	20000ae8 	.word	0x20000ae8

0800d73c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b087      	sub	sp, #28
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	4613      	mov	r3, r2
 800d748:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d74a:	2300      	movs	r3, #0
 800d74c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d74e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d752:	4618      	mov	r0, r3
 800d754:	371c      	adds	r7, #28
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
	...

0800d760 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	4603      	mov	r3, r0
 800d768:	6039      	str	r1, [r7, #0]
 800d76a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2212      	movs	r2, #18
 800d770:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d772:	4b03      	ldr	r3, [pc, #12]	@ (800d780 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d774:	4618      	mov	r0, r3
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	200000f8 	.word	0x200000f8

0800d784 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4603      	mov	r3, r0
 800d78c:	6039      	str	r1, [r7, #0]
 800d78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2204      	movs	r2, #4
 800d794:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d796:	4b03      	ldr	r3, [pc, #12]	@ (800d7a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d798:	4618      	mov	r0, r3
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	2000010c 	.word	0x2000010c

0800d7a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	6039      	str	r1, [r7, #0]
 800d7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7b4:	79fb      	ldrb	r3, [r7, #7]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d105      	bne.n	800d7c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	4907      	ldr	r1, [pc, #28]	@ (800d7dc <USBD_FS_ProductStrDescriptor+0x34>)
 800d7be:	4808      	ldr	r0, [pc, #32]	@ (800d7e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7c0:	f7ff fdec 	bl	800d39c <USBD_GetString>
 800d7c4:	e004      	b.n	800d7d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	4904      	ldr	r1, [pc, #16]	@ (800d7dc <USBD_FS_ProductStrDescriptor+0x34>)
 800d7ca:	4805      	ldr	r0, [pc, #20]	@ (800d7e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7cc:	f7ff fde6 	bl	800d39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7d0:	4b02      	ldr	r3, [pc, #8]	@ (800d7dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	20001dc4 	.word	0x20001dc4
 800d7e0:	08012688 	.word	0x08012688

0800d7e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	6039      	str	r1, [r7, #0]
 800d7ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d7f0:	683a      	ldr	r2, [r7, #0]
 800d7f2:	4904      	ldr	r1, [pc, #16]	@ (800d804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d7f4:	4804      	ldr	r0, [pc, #16]	@ (800d808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d7f6:	f7ff fdd1 	bl	800d39c <USBD_GetString>
  return USBD_StrDesc;
 800d7fa:	4b02      	ldr	r3, [pc, #8]	@ (800d804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	20001dc4 	.word	0x20001dc4
 800d808:	080126a0 	.word	0x080126a0

0800d80c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	6039      	str	r1, [r7, #0]
 800d816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	221a      	movs	r2, #26
 800d81c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d81e:	f000 f843 	bl	800d8a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d822:	4b02      	ldr	r3, [pc, #8]	@ (800d82c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	20000110 	.word	0x20000110

0800d830 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	4603      	mov	r3, r0
 800d838:	6039      	str	r1, [r7, #0]
 800d83a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d83c:	79fb      	ldrb	r3, [r7, #7]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d105      	bne.n	800d84e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	4907      	ldr	r1, [pc, #28]	@ (800d864 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d846:	4808      	ldr	r0, [pc, #32]	@ (800d868 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d848:	f7ff fda8 	bl	800d39c <USBD_GetString>
 800d84c:	e004      	b.n	800d858 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d84e:	683a      	ldr	r2, [r7, #0]
 800d850:	4904      	ldr	r1, [pc, #16]	@ (800d864 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d852:	4805      	ldr	r0, [pc, #20]	@ (800d868 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d854:	f7ff fda2 	bl	800d39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d858:	4b02      	ldr	r3, [pc, #8]	@ (800d864 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	20001dc4 	.word	0x20001dc4
 800d868:	080126b4 	.word	0x080126b4

0800d86c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	6039      	str	r1, [r7, #0]
 800d876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d878:	79fb      	ldrb	r3, [r7, #7]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d105      	bne.n	800d88a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	4907      	ldr	r1, [pc, #28]	@ (800d8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d882:	4808      	ldr	r0, [pc, #32]	@ (800d8a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d884:	f7ff fd8a 	bl	800d39c <USBD_GetString>
 800d888:	e004      	b.n	800d894 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d88a:	683a      	ldr	r2, [r7, #0]
 800d88c:	4904      	ldr	r1, [pc, #16]	@ (800d8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d88e:	4805      	ldr	r0, [pc, #20]	@ (800d8a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d890:	f7ff fd84 	bl	800d39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d894:	4b02      	ldr	r3, [pc, #8]	@ (800d8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d896:	4618      	mov	r0, r3
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	20001dc4 	.word	0x20001dc4
 800d8a4:	080126c0 	.word	0x080126c0

0800d8a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d8ec <Get_SerialNum+0x44>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f0 <Get_SerialNum+0x48>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f4 <Get_SerialNum+0x4c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d009      	beq.n	800d8e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8ce:	2208      	movs	r2, #8
 800d8d0:	4909      	ldr	r1, [pc, #36]	@ (800d8f8 <Get_SerialNum+0x50>)
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f000 f814 	bl	800d900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8d8:	2204      	movs	r2, #4
 800d8da:	4908      	ldr	r1, [pc, #32]	@ (800d8fc <Get_SerialNum+0x54>)
 800d8dc:	68b8      	ldr	r0, [r7, #8]
 800d8de:	f000 f80f 	bl	800d900 <IntToUnicode>
  }
}
 800d8e2:	bf00      	nop
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	1fff7a10 	.word	0x1fff7a10
 800d8f0:	1fff7a14 	.word	0x1fff7a14
 800d8f4:	1fff7a18 	.word	0x1fff7a18
 800d8f8:	20000112 	.word	0x20000112
 800d8fc:	20000122 	.word	0x20000122

0800d900 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d900:	b480      	push	{r7}
 800d902:	b087      	sub	sp, #28
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	4613      	mov	r3, r2
 800d90c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d912:	2300      	movs	r3, #0
 800d914:	75fb      	strb	r3, [r7, #23]
 800d916:	e027      	b.n	800d968 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	0f1b      	lsrs	r3, r3, #28
 800d91c:	2b09      	cmp	r3, #9
 800d91e:	d80b      	bhi.n	800d938 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	0f1b      	lsrs	r3, r3, #28
 800d924:	b2da      	uxtb	r2, r3
 800d926:	7dfb      	ldrb	r3, [r7, #23]
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	4619      	mov	r1, r3
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	440b      	add	r3, r1
 800d930:	3230      	adds	r2, #48	@ 0x30
 800d932:	b2d2      	uxtb	r2, r2
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	e00a      	b.n	800d94e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	0f1b      	lsrs	r3, r3, #28
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	4619      	mov	r1, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	440b      	add	r3, r1
 800d948:	3237      	adds	r2, #55	@ 0x37
 800d94a:	b2d2      	uxtb	r2, r2
 800d94c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	011b      	lsls	r3, r3, #4
 800d952:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d954:	7dfb      	ldrb	r3, [r7, #23]
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	3301      	adds	r3, #1
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	4413      	add	r3, r2
 800d95e:	2200      	movs	r2, #0
 800d960:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d962:	7dfb      	ldrb	r3, [r7, #23]
 800d964:	3301      	adds	r3, #1
 800d966:	75fb      	strb	r3, [r7, #23]
 800d968:	7dfa      	ldrb	r2, [r7, #23]
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d3d3      	bcc.n	800d918 <IntToUnicode+0x18>
  }
}
 800d970:	bf00      	nop
 800d972:	bf00      	nop
 800d974:	371c      	adds	r7, #28
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr
	...

0800d980 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b08a      	sub	sp, #40	@ 0x28
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d988:	f107 0314 	add.w	r3, r7, #20
 800d98c:	2200      	movs	r2, #0
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	605a      	str	r2, [r3, #4]
 800d992:	609a      	str	r2, [r3, #8]
 800d994:	60da      	str	r2, [r3, #12]
 800d996:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9a0:	d13a      	bne.n	800da18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	613b      	str	r3, [r7, #16]
 800d9a6:	4b1e      	ldr	r3, [pc, #120]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9aa:	4a1d      	ldr	r2, [pc, #116]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9ac:	f043 0301 	orr.w	r3, r3, #1
 800d9b0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9b2:	4b1b      	ldr	r3, [pc, #108]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	613b      	str	r3, [r7, #16]
 800d9bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d9be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d9c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d9d0:	230a      	movs	r3, #10
 800d9d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9d4:	f107 0314 	add.w	r3, r7, #20
 800d9d8:	4619      	mov	r1, r3
 800d9da:	4812      	ldr	r0, [pc, #72]	@ (800da24 <HAL_PCD_MspInit+0xa4>)
 800d9dc:	f7f7 fa70 	bl	8004ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9e4:	4a0e      	ldr	r2, [pc, #56]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ea:	6353      	str	r3, [r2, #52]	@ 0x34
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	4b0b      	ldr	r3, [pc, #44]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9f4:	4a0a      	ldr	r2, [pc, #40]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d9fa:	6453      	str	r3, [r2, #68]	@ 0x44
 800d9fc:	4b08      	ldr	r3, [pc, #32]	@ (800da20 <HAL_PCD_MspInit+0xa0>)
 800d9fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da08:	2200      	movs	r2, #0
 800da0a:	2100      	movs	r1, #0
 800da0c:	2043      	movs	r0, #67	@ 0x43
 800da0e:	f7f6 fe1e 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da12:	2043      	movs	r0, #67	@ 0x43
 800da14:	f7f6 fe37 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da18:	bf00      	nop
 800da1a:	3728      	adds	r7, #40	@ 0x28
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	40023800 	.word	0x40023800
 800da24:	40020000 	.word	0x40020000

0800da28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800da3c:	4619      	mov	r1, r3
 800da3e:	4610      	mov	r0, r2
 800da40:	f7fe fb49 	bl	800c0d6 <USBD_LL_SetupStage>
}
 800da44:	bf00      	nop
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	460b      	mov	r3, r1
 800da56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800da5e:	78fa      	ldrb	r2, [r7, #3]
 800da60:	6879      	ldr	r1, [r7, #4]
 800da62:	4613      	mov	r3, r2
 800da64:	00db      	lsls	r3, r3, #3
 800da66:	4413      	add	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	440b      	add	r3, r1
 800da6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	78fb      	ldrb	r3, [r7, #3]
 800da74:	4619      	mov	r1, r3
 800da76:	f7fe fb83 	bl	800c180 <USBD_LL_DataOutStage>
}
 800da7a:	bf00      	nop
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b082      	sub	sp, #8
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
 800da8a:	460b      	mov	r3, r1
 800da8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800da94:	78fa      	ldrb	r2, [r7, #3]
 800da96:	6879      	ldr	r1, [r7, #4]
 800da98:	4613      	mov	r3, r2
 800da9a:	00db      	lsls	r3, r3, #3
 800da9c:	4413      	add	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	440b      	add	r3, r1
 800daa2:	3320      	adds	r3, #32
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	78fb      	ldrb	r3, [r7, #3]
 800daa8:	4619      	mov	r1, r3
 800daaa:	f7fe fc1c 	bl	800c2e6 <USBD_LL_DataInStage>
}
 800daae:	bf00      	nop
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b082      	sub	sp, #8
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe fd56 	bl	800c576 <USBD_LL_SOF>
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b084      	sub	sp, #16
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dada:	2301      	movs	r3, #1
 800dadc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	79db      	ldrb	r3, [r3, #7]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73fb      	strb	r3, [r7, #15]
 800daea:	e008      	b.n	800dafe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	79db      	ldrb	r3, [r3, #7]
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d102      	bne.n	800dafa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800daf4:	2301      	movs	r3, #1
 800daf6:	73fb      	strb	r3, [r7, #15]
 800daf8:	e001      	b.n	800dafe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dafa:	f7f5 fe2b 	bl	8003754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db04:	7bfa      	ldrb	r2, [r7, #15]
 800db06:	4611      	mov	r1, r2
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe fcf0 	bl	800c4ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe fc98 	bl	800c44a <USBD_LL_Reset>
}
 800db1a:	bf00      	nop
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db32:	4618      	mov	r0, r3
 800db34:	f7fe fceb 	bl	800c50e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	6812      	ldr	r2, [r2, #0]
 800db46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7adb      	ldrb	r3, [r3, #11]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d005      	beq.n	800db64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db58:	4b04      	ldr	r3, [pc, #16]	@ (800db6c <HAL_PCD_SuspendCallback+0x48>)
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	4a03      	ldr	r2, [pc, #12]	@ (800db6c <HAL_PCD_SuspendCallback+0x48>)
 800db5e:	f043 0306 	orr.w	r3, r3, #6
 800db62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db64:	bf00      	nop
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	e000ed00 	.word	0xe000ed00

0800db70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fe fce1 	bl	800c546 <USBD_LL_Resume>
}
 800db84:	bf00      	nop
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	460b      	mov	r3, r1
 800db96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db9e:	78fa      	ldrb	r2, [r7, #3]
 800dba0:	4611      	mov	r1, r2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe fd39 	bl	800c61a <USBD_LL_IsoOUTIncomplete>
}
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbc2:	78fa      	ldrb	r2, [r7, #3]
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fe fcf5 	bl	800c5b6 <USBD_LL_IsoINIncomplete>
}
 800dbcc:	bf00      	nop
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fe fd4b 	bl	800c67e <USBD_LL_DevConnected>
}
 800dbe8:	bf00      	nop
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fe fd48 	bl	800c694 <USBD_LL_DevDisconnected>
}
 800dc04:	bf00      	nop
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d13c      	bne.n	800dc96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc1c:	4a20      	ldr	r2, [pc, #128]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a1e      	ldr	r2, [pc, #120]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc28:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc2c:	4b1c      	ldr	r3, [pc, #112]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dc32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dc34:	4b1a      	ldr	r3, [pc, #104]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc36:	2204      	movs	r2, #4
 800dc38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc3a:	4b19      	ldr	r3, [pc, #100]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc40:	4b17      	ldr	r3, [pc, #92]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc46:	4b16      	ldr	r3, [pc, #88]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc48:	2202      	movs	r2, #2
 800dc4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc4c:	4b14      	ldr	r3, [pc, #80]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dc52:	4b13      	ldr	r3, [pc, #76]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dc58:	4b11      	ldr	r3, [pc, #68]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc5e:	4b10      	ldr	r3, [pc, #64]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc64:	4b0e      	ldr	r3, [pc, #56]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc6a:	480d      	ldr	r0, [pc, #52]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc6c:	f7f7 fb10 	bl	8005290 <HAL_PCD_Init>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dc76:	f7f5 fd6d 	bl	8003754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dc7a:	2180      	movs	r1, #128	@ 0x80
 800dc7c:	4808      	ldr	r0, [pc, #32]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc7e:	f7f8 fd3c 	bl	80066fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc82:	2240      	movs	r2, #64	@ 0x40
 800dc84:	2100      	movs	r1, #0
 800dc86:	4806      	ldr	r0, [pc, #24]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc88:	f7f8 fcf0 	bl	800666c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc8c:	2280      	movs	r2, #128	@ 0x80
 800dc8e:	2101      	movs	r1, #1
 800dc90:	4803      	ldr	r0, [pc, #12]	@ (800dca0 <USBD_LL_Init+0x94>)
 800dc92:	f7f8 fceb 	bl	800666c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20001fc4 	.word	0x20001fc4

0800dca4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcac:	2300      	movs	r3, #0
 800dcae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7f7 fbf7 	bl	80054ae <HAL_PCD_Start>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 f942 	bl	800df50 <USBD_Get_USB_Status>
 800dccc:	4603      	mov	r3, r0
 800dcce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	4608      	mov	r0, r1
 800dce4:	4611      	mov	r1, r2
 800dce6:	461a      	mov	r2, r3
 800dce8:	4603      	mov	r3, r0
 800dcea:	70fb      	strb	r3, [r7, #3]
 800dcec:	460b      	mov	r3, r1
 800dcee:	70bb      	strb	r3, [r7, #2]
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dd02:	78bb      	ldrb	r3, [r7, #2]
 800dd04:	883a      	ldrh	r2, [r7, #0]
 800dd06:	78f9      	ldrb	r1, [r7, #3]
 800dd08:	f7f8 f8cb 	bl	8005ea2 <HAL_PCD_EP_Open>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 f91c 	bl	800df50 <USBD_Get_USB_Status>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
 800dd2e:	460b      	mov	r3, r1
 800dd30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd40:	78fa      	ldrb	r2, [r7, #3]
 800dd42:	4611      	mov	r1, r2
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7f8 f916 	bl	8005f76 <HAL_PCD_EP_Close>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f000 f8fd 	bl	800df50 <USBD_Get_USB_Status>
 800dd56:	4603      	mov	r3, r0
 800dd58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd70:	2300      	movs	r3, #0
 800dd72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd7e:	78fa      	ldrb	r2, [r7, #3]
 800dd80:	4611      	mov	r1, r2
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7f8 f9ce 	bl	8006124 <HAL_PCD_EP_SetStall>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 f8de 	bl	800df50 <USBD_Get_USB_Status>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddbc:	78fa      	ldrb	r2, [r7, #3]
 800ddbe:	4611      	mov	r1, r2
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7f8 fa12 	bl	80061ea <HAL_PCD_EP_ClrStall>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddca:	7bfb      	ldrb	r3, [r7, #15]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f000 f8bf 	bl	800df50 <USBD_Get_USB_Status>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	460b      	mov	r3, r1
 800ddea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ddf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	da0b      	bge.n	800de14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ddfc:	78fb      	ldrb	r3, [r7, #3]
 800ddfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de02:	68f9      	ldr	r1, [r7, #12]
 800de04:	4613      	mov	r3, r2
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	4413      	add	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	440b      	add	r3, r1
 800de0e:	3316      	adds	r3, #22
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	e00b      	b.n	800de2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de14:	78fb      	ldrb	r3, [r7, #3]
 800de16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de1a:	68f9      	ldr	r1, [r7, #12]
 800de1c:	4613      	mov	r3, r2
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	4413      	add	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	440b      	add	r3, r1
 800de26:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800de2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3714      	adds	r7, #20
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	460b      	mov	r3, r1
 800de42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de44:	2300      	movs	r3, #0
 800de46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de52:	78fa      	ldrb	r2, [r7, #3]
 800de54:	4611      	mov	r1, r2
 800de56:	4618      	mov	r0, r3
 800de58:	f7f7 ffff 	bl	8005e5a <HAL_PCD_SetAddress>
 800de5c:	4603      	mov	r3, r0
 800de5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de60:	7bfb      	ldrb	r3, [r7, #15]
 800de62:	4618      	mov	r0, r3
 800de64:	f000 f874 	bl	800df50 <USBD_Get_USB_Status>
 800de68:	4603      	mov	r3, r0
 800de6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b086      	sub	sp, #24
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	60f8      	str	r0, [r7, #12]
 800de7e:	607a      	str	r2, [r7, #4]
 800de80:	603b      	str	r3, [r7, #0]
 800de82:	460b      	mov	r3, r1
 800de84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de94:	7af9      	ldrb	r1, [r7, #11]
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	f7f8 f909 	bl	80060b0 <HAL_PCD_EP_Transmit>
 800de9e:	4603      	mov	r3, r0
 800dea0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f853 	bl	800df50 <USBD_Get_USB_Status>
 800deaa:	4603      	mov	r3, r0
 800deac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800deae:	7dbb      	ldrb	r3, [r7, #22]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b086      	sub	sp, #24
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	607a      	str	r2, [r7, #4]
 800dec2:	603b      	str	r3, [r7, #0]
 800dec4:	460b      	mov	r3, r1
 800dec6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ded6:	7af9      	ldrb	r1, [r7, #11]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	f7f8 f895 	bl	800600a <HAL_PCD_EP_Receive>
 800dee0:	4603      	mov	r3, r0
 800dee2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 f832 	bl	800df50 <USBD_Get_USB_Status>
 800deec:	4603      	mov	r3, r0
 800deee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800def0:	7dbb      	ldrb	r3, [r7, #22]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b082      	sub	sp, #8
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	460b      	mov	r3, r1
 800df04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df0c:	78fa      	ldrb	r2, [r7, #3]
 800df0e:	4611      	mov	r1, r2
 800df10:	4618      	mov	r0, r3
 800df12:	f7f8 f8b5 	bl	8006080 <HAL_PCD_EP_GetRxCount>
 800df16:	4603      	mov	r3, r0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df28:	4b03      	ldr	r3, [pc, #12]	@ (800df38 <USBD_static_malloc+0x18>)
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	200024a8 	.word	0x200024a8

0800df3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]

}
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	4603      	mov	r3, r0
 800df58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df5a:	2300      	movs	r3, #0
 800df5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df5e:	79fb      	ldrb	r3, [r7, #7]
 800df60:	2b03      	cmp	r3, #3
 800df62:	d817      	bhi.n	800df94 <USBD_Get_USB_Status+0x44>
 800df64:	a201      	add	r2, pc, #4	@ (adr r2, 800df6c <USBD_Get_USB_Status+0x1c>)
 800df66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6a:	bf00      	nop
 800df6c:	0800df7d 	.word	0x0800df7d
 800df70:	0800df83 	.word	0x0800df83
 800df74:	0800df89 	.word	0x0800df89
 800df78:	0800df8f 	.word	0x0800df8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]
    break;
 800df80:	e00b      	b.n	800df9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df82:	2303      	movs	r3, #3
 800df84:	73fb      	strb	r3, [r7, #15]
    break;
 800df86:	e008      	b.n	800df9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df88:	2301      	movs	r3, #1
 800df8a:	73fb      	strb	r3, [r7, #15]
    break;
 800df8c:	e005      	b.n	800df9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df8e:	2303      	movs	r3, #3
 800df90:	73fb      	strb	r3, [r7, #15]
    break;
 800df92:	e002      	b.n	800df9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df94:	2303      	movs	r3, #3
 800df96:	73fb      	strb	r3, [r7, #15]
    break;
 800df98:	bf00      	nop
  }
  return usb_status;
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <_strtoul_l.constprop.0>:
 800dfa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfac:	4e34      	ldr	r6, [pc, #208]	@ (800e080 <_strtoul_l.constprop.0+0xd8>)
 800dfae:	4686      	mov	lr, r0
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfb8:	5d37      	ldrb	r7, [r6, r4]
 800dfba:	f017 0708 	ands.w	r7, r7, #8
 800dfbe:	d1f8      	bne.n	800dfb2 <_strtoul_l.constprop.0+0xa>
 800dfc0:	2c2d      	cmp	r4, #45	@ 0x2d
 800dfc2:	d12f      	bne.n	800e024 <_strtoul_l.constprop.0+0x7c>
 800dfc4:	782c      	ldrb	r4, [r5, #0]
 800dfc6:	2701      	movs	r7, #1
 800dfc8:	1c85      	adds	r5, r0, #2
 800dfca:	f033 0010 	bics.w	r0, r3, #16
 800dfce:	d109      	bne.n	800dfe4 <_strtoul_l.constprop.0+0x3c>
 800dfd0:	2c30      	cmp	r4, #48	@ 0x30
 800dfd2:	d12c      	bne.n	800e02e <_strtoul_l.constprop.0+0x86>
 800dfd4:	7828      	ldrb	r0, [r5, #0]
 800dfd6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800dfda:	2858      	cmp	r0, #88	@ 0x58
 800dfdc:	d127      	bne.n	800e02e <_strtoul_l.constprop.0+0x86>
 800dfde:	786c      	ldrb	r4, [r5, #1]
 800dfe0:	2310      	movs	r3, #16
 800dfe2:	3502      	adds	r5, #2
 800dfe4:	f04f 38ff 	mov.w	r8, #4294967295
 800dfe8:	2600      	movs	r6, #0
 800dfea:	fbb8 f8f3 	udiv	r8, r8, r3
 800dfee:	fb03 f908 	mul.w	r9, r3, r8
 800dff2:	ea6f 0909 	mvn.w	r9, r9
 800dff6:	4630      	mov	r0, r6
 800dff8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800dffc:	f1bc 0f09 	cmp.w	ip, #9
 800e000:	d81c      	bhi.n	800e03c <_strtoul_l.constprop.0+0x94>
 800e002:	4664      	mov	r4, ip
 800e004:	42a3      	cmp	r3, r4
 800e006:	dd2a      	ble.n	800e05e <_strtoul_l.constprop.0+0xb6>
 800e008:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e00c:	d007      	beq.n	800e01e <_strtoul_l.constprop.0+0x76>
 800e00e:	4580      	cmp	r8, r0
 800e010:	d322      	bcc.n	800e058 <_strtoul_l.constprop.0+0xb0>
 800e012:	d101      	bne.n	800e018 <_strtoul_l.constprop.0+0x70>
 800e014:	45a1      	cmp	r9, r4
 800e016:	db1f      	blt.n	800e058 <_strtoul_l.constprop.0+0xb0>
 800e018:	fb00 4003 	mla	r0, r0, r3, r4
 800e01c:	2601      	movs	r6, #1
 800e01e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e022:	e7e9      	b.n	800dff8 <_strtoul_l.constprop.0+0x50>
 800e024:	2c2b      	cmp	r4, #43	@ 0x2b
 800e026:	bf04      	itt	eq
 800e028:	782c      	ldrbeq	r4, [r5, #0]
 800e02a:	1c85      	addeq	r5, r0, #2
 800e02c:	e7cd      	b.n	800dfca <_strtoul_l.constprop.0+0x22>
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1d8      	bne.n	800dfe4 <_strtoul_l.constprop.0+0x3c>
 800e032:	2c30      	cmp	r4, #48	@ 0x30
 800e034:	bf0c      	ite	eq
 800e036:	2308      	moveq	r3, #8
 800e038:	230a      	movne	r3, #10
 800e03a:	e7d3      	b.n	800dfe4 <_strtoul_l.constprop.0+0x3c>
 800e03c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e040:	f1bc 0f19 	cmp.w	ip, #25
 800e044:	d801      	bhi.n	800e04a <_strtoul_l.constprop.0+0xa2>
 800e046:	3c37      	subs	r4, #55	@ 0x37
 800e048:	e7dc      	b.n	800e004 <_strtoul_l.constprop.0+0x5c>
 800e04a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e04e:	f1bc 0f19 	cmp.w	ip, #25
 800e052:	d804      	bhi.n	800e05e <_strtoul_l.constprop.0+0xb6>
 800e054:	3c57      	subs	r4, #87	@ 0x57
 800e056:	e7d5      	b.n	800e004 <_strtoul_l.constprop.0+0x5c>
 800e058:	f04f 36ff 	mov.w	r6, #4294967295
 800e05c:	e7df      	b.n	800e01e <_strtoul_l.constprop.0+0x76>
 800e05e:	1c73      	adds	r3, r6, #1
 800e060:	d106      	bne.n	800e070 <_strtoul_l.constprop.0+0xc8>
 800e062:	2322      	movs	r3, #34	@ 0x22
 800e064:	f8ce 3000 	str.w	r3, [lr]
 800e068:	4630      	mov	r0, r6
 800e06a:	b932      	cbnz	r2, 800e07a <_strtoul_l.constprop.0+0xd2>
 800e06c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e070:	b107      	cbz	r7, 800e074 <_strtoul_l.constprop.0+0xcc>
 800e072:	4240      	negs	r0, r0
 800e074:	2a00      	cmp	r2, #0
 800e076:	d0f9      	beq.n	800e06c <_strtoul_l.constprop.0+0xc4>
 800e078:	b106      	cbz	r6, 800e07c <_strtoul_l.constprop.0+0xd4>
 800e07a:	1e69      	subs	r1, r5, #1
 800e07c:	6011      	str	r1, [r2, #0]
 800e07e:	e7f5      	b.n	800e06c <_strtoul_l.constprop.0+0xc4>
 800e080:	080126f9 	.word	0x080126f9

0800e084 <strtoul>:
 800e084:	4613      	mov	r3, r2
 800e086:	460a      	mov	r2, r1
 800e088:	4601      	mov	r1, r0
 800e08a:	4802      	ldr	r0, [pc, #8]	@ (800e094 <strtoul+0x10>)
 800e08c:	6800      	ldr	r0, [r0, #0]
 800e08e:	f7ff bf8b 	b.w	800dfa8 <_strtoul_l.constprop.0>
 800e092:	bf00      	nop
 800e094:	20000138 	.word	0x20000138

0800e098 <__cvt>:
 800e098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e09c:	ec57 6b10 	vmov	r6, r7, d0
 800e0a0:	2f00      	cmp	r7, #0
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	463b      	mov	r3, r7
 800e0a8:	bfbb      	ittet	lt
 800e0aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e0ae:	461f      	movlt	r7, r3
 800e0b0:	2300      	movge	r3, #0
 800e0b2:	232d      	movlt	r3, #45	@ 0x2d
 800e0b4:	700b      	strb	r3, [r1, #0]
 800e0b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e0bc:	4691      	mov	r9, r2
 800e0be:	f023 0820 	bic.w	r8, r3, #32
 800e0c2:	bfbc      	itt	lt
 800e0c4:	4632      	movlt	r2, r6
 800e0c6:	4616      	movlt	r6, r2
 800e0c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0cc:	d005      	beq.n	800e0da <__cvt+0x42>
 800e0ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e0d2:	d100      	bne.n	800e0d6 <__cvt+0x3e>
 800e0d4:	3401      	adds	r4, #1
 800e0d6:	2102      	movs	r1, #2
 800e0d8:	e000      	b.n	800e0dc <__cvt+0x44>
 800e0da:	2103      	movs	r1, #3
 800e0dc:	ab03      	add	r3, sp, #12
 800e0de:	9301      	str	r3, [sp, #4]
 800e0e0:	ab02      	add	r3, sp, #8
 800e0e2:	9300      	str	r3, [sp, #0]
 800e0e4:	ec47 6b10 	vmov	d0, r6, r7
 800e0e8:	4653      	mov	r3, sl
 800e0ea:	4622      	mov	r2, r4
 800e0ec:	f000 fe8c 	bl	800ee08 <_dtoa_r>
 800e0f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	d119      	bne.n	800e12c <__cvt+0x94>
 800e0f8:	f019 0f01 	tst.w	r9, #1
 800e0fc:	d00e      	beq.n	800e11c <__cvt+0x84>
 800e0fe:	eb00 0904 	add.w	r9, r0, r4
 800e102:	2200      	movs	r2, #0
 800e104:	2300      	movs	r3, #0
 800e106:	4630      	mov	r0, r6
 800e108:	4639      	mov	r1, r7
 800e10a:	f7f2 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800e10e:	b108      	cbz	r0, 800e114 <__cvt+0x7c>
 800e110:	f8cd 900c 	str.w	r9, [sp, #12]
 800e114:	2230      	movs	r2, #48	@ 0x30
 800e116:	9b03      	ldr	r3, [sp, #12]
 800e118:	454b      	cmp	r3, r9
 800e11a:	d31e      	bcc.n	800e15a <__cvt+0xc2>
 800e11c:	9b03      	ldr	r3, [sp, #12]
 800e11e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e120:	1b5b      	subs	r3, r3, r5
 800e122:	4628      	mov	r0, r5
 800e124:	6013      	str	r3, [r2, #0]
 800e126:	b004      	add	sp, #16
 800e128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e130:	eb00 0904 	add.w	r9, r0, r4
 800e134:	d1e5      	bne.n	800e102 <__cvt+0x6a>
 800e136:	7803      	ldrb	r3, [r0, #0]
 800e138:	2b30      	cmp	r3, #48	@ 0x30
 800e13a:	d10a      	bne.n	800e152 <__cvt+0xba>
 800e13c:	2200      	movs	r2, #0
 800e13e:	2300      	movs	r3, #0
 800e140:	4630      	mov	r0, r6
 800e142:	4639      	mov	r1, r7
 800e144:	f7f2 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e148:	b918      	cbnz	r0, 800e152 <__cvt+0xba>
 800e14a:	f1c4 0401 	rsb	r4, r4, #1
 800e14e:	f8ca 4000 	str.w	r4, [sl]
 800e152:	f8da 3000 	ldr.w	r3, [sl]
 800e156:	4499      	add	r9, r3
 800e158:	e7d3      	b.n	800e102 <__cvt+0x6a>
 800e15a:	1c59      	adds	r1, r3, #1
 800e15c:	9103      	str	r1, [sp, #12]
 800e15e:	701a      	strb	r2, [r3, #0]
 800e160:	e7d9      	b.n	800e116 <__cvt+0x7e>

0800e162 <__exponent>:
 800e162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e164:	2900      	cmp	r1, #0
 800e166:	bfba      	itte	lt
 800e168:	4249      	neglt	r1, r1
 800e16a:	232d      	movlt	r3, #45	@ 0x2d
 800e16c:	232b      	movge	r3, #43	@ 0x2b
 800e16e:	2909      	cmp	r1, #9
 800e170:	7002      	strb	r2, [r0, #0]
 800e172:	7043      	strb	r3, [r0, #1]
 800e174:	dd29      	ble.n	800e1ca <__exponent+0x68>
 800e176:	f10d 0307 	add.w	r3, sp, #7
 800e17a:	461d      	mov	r5, r3
 800e17c:	270a      	movs	r7, #10
 800e17e:	461a      	mov	r2, r3
 800e180:	fbb1 f6f7 	udiv	r6, r1, r7
 800e184:	fb07 1416 	mls	r4, r7, r6, r1
 800e188:	3430      	adds	r4, #48	@ 0x30
 800e18a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e18e:	460c      	mov	r4, r1
 800e190:	2c63      	cmp	r4, #99	@ 0x63
 800e192:	f103 33ff 	add.w	r3, r3, #4294967295
 800e196:	4631      	mov	r1, r6
 800e198:	dcf1      	bgt.n	800e17e <__exponent+0x1c>
 800e19a:	3130      	adds	r1, #48	@ 0x30
 800e19c:	1e94      	subs	r4, r2, #2
 800e19e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e1a2:	1c41      	adds	r1, r0, #1
 800e1a4:	4623      	mov	r3, r4
 800e1a6:	42ab      	cmp	r3, r5
 800e1a8:	d30a      	bcc.n	800e1c0 <__exponent+0x5e>
 800e1aa:	f10d 0309 	add.w	r3, sp, #9
 800e1ae:	1a9b      	subs	r3, r3, r2
 800e1b0:	42ac      	cmp	r4, r5
 800e1b2:	bf88      	it	hi
 800e1b4:	2300      	movhi	r3, #0
 800e1b6:	3302      	adds	r3, #2
 800e1b8:	4403      	add	r3, r0
 800e1ba:	1a18      	subs	r0, r3, r0
 800e1bc:	b003      	add	sp, #12
 800e1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e1c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e1c8:	e7ed      	b.n	800e1a6 <__exponent+0x44>
 800e1ca:	2330      	movs	r3, #48	@ 0x30
 800e1cc:	3130      	adds	r1, #48	@ 0x30
 800e1ce:	7083      	strb	r3, [r0, #2]
 800e1d0:	70c1      	strb	r1, [r0, #3]
 800e1d2:	1d03      	adds	r3, r0, #4
 800e1d4:	e7f1      	b.n	800e1ba <__exponent+0x58>
	...

0800e1d8 <_printf_float>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	b08d      	sub	sp, #52	@ 0x34
 800e1de:	460c      	mov	r4, r1
 800e1e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e1e4:	4616      	mov	r6, r2
 800e1e6:	461f      	mov	r7, r3
 800e1e8:	4605      	mov	r5, r0
 800e1ea:	f000 fced 	bl	800ebc8 <_localeconv_r>
 800e1ee:	6803      	ldr	r3, [r0, #0]
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7f2 f83c 	bl	8000270 <strlen>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e200:	9005      	str	r0, [sp, #20]
 800e202:	3307      	adds	r3, #7
 800e204:	f023 0307 	bic.w	r3, r3, #7
 800e208:	f103 0208 	add.w	r2, r3, #8
 800e20c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e210:	f8d4 b000 	ldr.w	fp, [r4]
 800e214:	f8c8 2000 	str.w	r2, [r8]
 800e218:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e21c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e220:	9307      	str	r3, [sp, #28]
 800e222:	f8cd 8018 	str.w	r8, [sp, #24]
 800e226:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e22a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e22e:	4b9c      	ldr	r3, [pc, #624]	@ (800e4a0 <_printf_float+0x2c8>)
 800e230:	f04f 32ff 	mov.w	r2, #4294967295
 800e234:	f7f2 fc7a 	bl	8000b2c <__aeabi_dcmpun>
 800e238:	bb70      	cbnz	r0, 800e298 <_printf_float+0xc0>
 800e23a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e23e:	4b98      	ldr	r3, [pc, #608]	@ (800e4a0 <_printf_float+0x2c8>)
 800e240:	f04f 32ff 	mov.w	r2, #4294967295
 800e244:	f7f2 fc54 	bl	8000af0 <__aeabi_dcmple>
 800e248:	bb30      	cbnz	r0, 800e298 <_printf_float+0xc0>
 800e24a:	2200      	movs	r2, #0
 800e24c:	2300      	movs	r3, #0
 800e24e:	4640      	mov	r0, r8
 800e250:	4649      	mov	r1, r9
 800e252:	f7f2 fc43 	bl	8000adc <__aeabi_dcmplt>
 800e256:	b110      	cbz	r0, 800e25e <_printf_float+0x86>
 800e258:	232d      	movs	r3, #45	@ 0x2d
 800e25a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e25e:	4a91      	ldr	r2, [pc, #580]	@ (800e4a4 <_printf_float+0x2cc>)
 800e260:	4b91      	ldr	r3, [pc, #580]	@ (800e4a8 <_printf_float+0x2d0>)
 800e262:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e266:	bf94      	ite	ls
 800e268:	4690      	movls	r8, r2
 800e26a:	4698      	movhi	r8, r3
 800e26c:	2303      	movs	r3, #3
 800e26e:	6123      	str	r3, [r4, #16]
 800e270:	f02b 0304 	bic.w	r3, fp, #4
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	f04f 0900 	mov.w	r9, #0
 800e27a:	9700      	str	r7, [sp, #0]
 800e27c:	4633      	mov	r3, r6
 800e27e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e280:	4621      	mov	r1, r4
 800e282:	4628      	mov	r0, r5
 800e284:	f000 f9d2 	bl	800e62c <_printf_common>
 800e288:	3001      	adds	r0, #1
 800e28a:	f040 808d 	bne.w	800e3a8 <_printf_float+0x1d0>
 800e28e:	f04f 30ff 	mov.w	r0, #4294967295
 800e292:	b00d      	add	sp, #52	@ 0x34
 800e294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e298:	4642      	mov	r2, r8
 800e29a:	464b      	mov	r3, r9
 800e29c:	4640      	mov	r0, r8
 800e29e:	4649      	mov	r1, r9
 800e2a0:	f7f2 fc44 	bl	8000b2c <__aeabi_dcmpun>
 800e2a4:	b140      	cbz	r0, 800e2b8 <_printf_float+0xe0>
 800e2a6:	464b      	mov	r3, r9
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	bfbc      	itt	lt
 800e2ac:	232d      	movlt	r3, #45	@ 0x2d
 800e2ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e2b2:	4a7e      	ldr	r2, [pc, #504]	@ (800e4ac <_printf_float+0x2d4>)
 800e2b4:	4b7e      	ldr	r3, [pc, #504]	@ (800e4b0 <_printf_float+0x2d8>)
 800e2b6:	e7d4      	b.n	800e262 <_printf_float+0x8a>
 800e2b8:	6863      	ldr	r3, [r4, #4]
 800e2ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e2be:	9206      	str	r2, [sp, #24]
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	d13b      	bne.n	800e33c <_printf_float+0x164>
 800e2c4:	2306      	movs	r3, #6
 800e2c6:	6063      	str	r3, [r4, #4]
 800e2c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	6022      	str	r2, [r4, #0]
 800e2d0:	9303      	str	r3, [sp, #12]
 800e2d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800e2d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e2d8:	ab09      	add	r3, sp, #36	@ 0x24
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	6861      	ldr	r1, [r4, #4]
 800e2de:	ec49 8b10 	vmov	d0, r8, r9
 800e2e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	f7ff fed6 	bl	800e098 <__cvt>
 800e2ec:	9b06      	ldr	r3, [sp, #24]
 800e2ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2f0:	2b47      	cmp	r3, #71	@ 0x47
 800e2f2:	4680      	mov	r8, r0
 800e2f4:	d129      	bne.n	800e34a <_printf_float+0x172>
 800e2f6:	1cc8      	adds	r0, r1, #3
 800e2f8:	db02      	blt.n	800e300 <_printf_float+0x128>
 800e2fa:	6863      	ldr	r3, [r4, #4]
 800e2fc:	4299      	cmp	r1, r3
 800e2fe:	dd41      	ble.n	800e384 <_printf_float+0x1ac>
 800e300:	f1aa 0a02 	sub.w	sl, sl, #2
 800e304:	fa5f fa8a 	uxtb.w	sl, sl
 800e308:	3901      	subs	r1, #1
 800e30a:	4652      	mov	r2, sl
 800e30c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e310:	9109      	str	r1, [sp, #36]	@ 0x24
 800e312:	f7ff ff26 	bl	800e162 <__exponent>
 800e316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e318:	1813      	adds	r3, r2, r0
 800e31a:	2a01      	cmp	r2, #1
 800e31c:	4681      	mov	r9, r0
 800e31e:	6123      	str	r3, [r4, #16]
 800e320:	dc02      	bgt.n	800e328 <_printf_float+0x150>
 800e322:	6822      	ldr	r2, [r4, #0]
 800e324:	07d2      	lsls	r2, r2, #31
 800e326:	d501      	bpl.n	800e32c <_printf_float+0x154>
 800e328:	3301      	adds	r3, #1
 800e32a:	6123      	str	r3, [r4, #16]
 800e32c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e330:	2b00      	cmp	r3, #0
 800e332:	d0a2      	beq.n	800e27a <_printf_float+0xa2>
 800e334:	232d      	movs	r3, #45	@ 0x2d
 800e336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e33a:	e79e      	b.n	800e27a <_printf_float+0xa2>
 800e33c:	9a06      	ldr	r2, [sp, #24]
 800e33e:	2a47      	cmp	r2, #71	@ 0x47
 800e340:	d1c2      	bne.n	800e2c8 <_printf_float+0xf0>
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1c0      	bne.n	800e2c8 <_printf_float+0xf0>
 800e346:	2301      	movs	r3, #1
 800e348:	e7bd      	b.n	800e2c6 <_printf_float+0xee>
 800e34a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e34e:	d9db      	bls.n	800e308 <_printf_float+0x130>
 800e350:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e354:	d118      	bne.n	800e388 <_printf_float+0x1b0>
 800e356:	2900      	cmp	r1, #0
 800e358:	6863      	ldr	r3, [r4, #4]
 800e35a:	dd0b      	ble.n	800e374 <_printf_float+0x19c>
 800e35c:	6121      	str	r1, [r4, #16]
 800e35e:	b913      	cbnz	r3, 800e366 <_printf_float+0x18e>
 800e360:	6822      	ldr	r2, [r4, #0]
 800e362:	07d0      	lsls	r0, r2, #31
 800e364:	d502      	bpl.n	800e36c <_printf_float+0x194>
 800e366:	3301      	adds	r3, #1
 800e368:	440b      	add	r3, r1
 800e36a:	6123      	str	r3, [r4, #16]
 800e36c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e36e:	f04f 0900 	mov.w	r9, #0
 800e372:	e7db      	b.n	800e32c <_printf_float+0x154>
 800e374:	b913      	cbnz	r3, 800e37c <_printf_float+0x1a4>
 800e376:	6822      	ldr	r2, [r4, #0]
 800e378:	07d2      	lsls	r2, r2, #31
 800e37a:	d501      	bpl.n	800e380 <_printf_float+0x1a8>
 800e37c:	3302      	adds	r3, #2
 800e37e:	e7f4      	b.n	800e36a <_printf_float+0x192>
 800e380:	2301      	movs	r3, #1
 800e382:	e7f2      	b.n	800e36a <_printf_float+0x192>
 800e384:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e38a:	4299      	cmp	r1, r3
 800e38c:	db05      	blt.n	800e39a <_printf_float+0x1c2>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	6121      	str	r1, [r4, #16]
 800e392:	07d8      	lsls	r0, r3, #31
 800e394:	d5ea      	bpl.n	800e36c <_printf_float+0x194>
 800e396:	1c4b      	adds	r3, r1, #1
 800e398:	e7e7      	b.n	800e36a <_printf_float+0x192>
 800e39a:	2900      	cmp	r1, #0
 800e39c:	bfd4      	ite	le
 800e39e:	f1c1 0202 	rsble	r2, r1, #2
 800e3a2:	2201      	movgt	r2, #1
 800e3a4:	4413      	add	r3, r2
 800e3a6:	e7e0      	b.n	800e36a <_printf_float+0x192>
 800e3a8:	6823      	ldr	r3, [r4, #0]
 800e3aa:	055a      	lsls	r2, r3, #21
 800e3ac:	d407      	bmi.n	800e3be <_printf_float+0x1e6>
 800e3ae:	6923      	ldr	r3, [r4, #16]
 800e3b0:	4642      	mov	r2, r8
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	47b8      	blx	r7
 800e3b8:	3001      	adds	r0, #1
 800e3ba:	d12b      	bne.n	800e414 <_printf_float+0x23c>
 800e3bc:	e767      	b.n	800e28e <_printf_float+0xb6>
 800e3be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e3c2:	f240 80dd 	bls.w	800e580 <_printf_float+0x3a8>
 800e3c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f7f2 fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d033      	beq.n	800e43e <_printf_float+0x266>
 800e3d6:	4a37      	ldr	r2, [pc, #220]	@ (800e4b4 <_printf_float+0x2dc>)
 800e3d8:	2301      	movs	r3, #1
 800e3da:	4631      	mov	r1, r6
 800e3dc:	4628      	mov	r0, r5
 800e3de:	47b8      	blx	r7
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	f43f af54 	beq.w	800e28e <_printf_float+0xb6>
 800e3e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e3ea:	4543      	cmp	r3, r8
 800e3ec:	db02      	blt.n	800e3f4 <_printf_float+0x21c>
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	07d8      	lsls	r0, r3, #31
 800e3f2:	d50f      	bpl.n	800e414 <_printf_float+0x23c>
 800e3f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	47b8      	blx	r7
 800e3fe:	3001      	adds	r0, #1
 800e400:	f43f af45 	beq.w	800e28e <_printf_float+0xb6>
 800e404:	f04f 0900 	mov.w	r9, #0
 800e408:	f108 38ff 	add.w	r8, r8, #4294967295
 800e40c:	f104 0a1a 	add.w	sl, r4, #26
 800e410:	45c8      	cmp	r8, r9
 800e412:	dc09      	bgt.n	800e428 <_printf_float+0x250>
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	079b      	lsls	r3, r3, #30
 800e418:	f100 8103 	bmi.w	800e622 <_printf_float+0x44a>
 800e41c:	68e0      	ldr	r0, [r4, #12]
 800e41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e420:	4298      	cmp	r0, r3
 800e422:	bfb8      	it	lt
 800e424:	4618      	movlt	r0, r3
 800e426:	e734      	b.n	800e292 <_printf_float+0xba>
 800e428:	2301      	movs	r3, #1
 800e42a:	4652      	mov	r2, sl
 800e42c:	4631      	mov	r1, r6
 800e42e:	4628      	mov	r0, r5
 800e430:	47b8      	blx	r7
 800e432:	3001      	adds	r0, #1
 800e434:	f43f af2b 	beq.w	800e28e <_printf_float+0xb6>
 800e438:	f109 0901 	add.w	r9, r9, #1
 800e43c:	e7e8      	b.n	800e410 <_printf_float+0x238>
 800e43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e440:	2b00      	cmp	r3, #0
 800e442:	dc39      	bgt.n	800e4b8 <_printf_float+0x2e0>
 800e444:	4a1b      	ldr	r2, [pc, #108]	@ (800e4b4 <_printf_float+0x2dc>)
 800e446:	2301      	movs	r3, #1
 800e448:	4631      	mov	r1, r6
 800e44a:	4628      	mov	r0, r5
 800e44c:	47b8      	blx	r7
 800e44e:	3001      	adds	r0, #1
 800e450:	f43f af1d 	beq.w	800e28e <_printf_float+0xb6>
 800e454:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e458:	ea59 0303 	orrs.w	r3, r9, r3
 800e45c:	d102      	bne.n	800e464 <_printf_float+0x28c>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	07d9      	lsls	r1, r3, #31
 800e462:	d5d7      	bpl.n	800e414 <_printf_float+0x23c>
 800e464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e468:	4631      	mov	r1, r6
 800e46a:	4628      	mov	r0, r5
 800e46c:	47b8      	blx	r7
 800e46e:	3001      	adds	r0, #1
 800e470:	f43f af0d 	beq.w	800e28e <_printf_float+0xb6>
 800e474:	f04f 0a00 	mov.w	sl, #0
 800e478:	f104 0b1a 	add.w	fp, r4, #26
 800e47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e47e:	425b      	negs	r3, r3
 800e480:	4553      	cmp	r3, sl
 800e482:	dc01      	bgt.n	800e488 <_printf_float+0x2b0>
 800e484:	464b      	mov	r3, r9
 800e486:	e793      	b.n	800e3b0 <_printf_float+0x1d8>
 800e488:	2301      	movs	r3, #1
 800e48a:	465a      	mov	r2, fp
 800e48c:	4631      	mov	r1, r6
 800e48e:	4628      	mov	r0, r5
 800e490:	47b8      	blx	r7
 800e492:	3001      	adds	r0, #1
 800e494:	f43f aefb 	beq.w	800e28e <_printf_float+0xb6>
 800e498:	f10a 0a01 	add.w	sl, sl, #1
 800e49c:	e7ee      	b.n	800e47c <_printf_float+0x2a4>
 800e49e:	bf00      	nop
 800e4a0:	7fefffff 	.word	0x7fefffff
 800e4a4:	080127f9 	.word	0x080127f9
 800e4a8:	080127fd 	.word	0x080127fd
 800e4ac:	08012801 	.word	0x08012801
 800e4b0:	08012805 	.word	0x08012805
 800e4b4:	08012809 	.word	0x08012809
 800e4b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4be:	4553      	cmp	r3, sl
 800e4c0:	bfa8      	it	ge
 800e4c2:	4653      	movge	r3, sl
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	4699      	mov	r9, r3
 800e4c8:	dc36      	bgt.n	800e538 <_printf_float+0x360>
 800e4ca:	f04f 0b00 	mov.w	fp, #0
 800e4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4d2:	f104 021a 	add.w	r2, r4, #26
 800e4d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4d8:	9306      	str	r3, [sp, #24]
 800e4da:	eba3 0309 	sub.w	r3, r3, r9
 800e4de:	455b      	cmp	r3, fp
 800e4e0:	dc31      	bgt.n	800e546 <_printf_float+0x36e>
 800e4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4e4:	459a      	cmp	sl, r3
 800e4e6:	dc3a      	bgt.n	800e55e <_printf_float+0x386>
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	07da      	lsls	r2, r3, #31
 800e4ec:	d437      	bmi.n	800e55e <_printf_float+0x386>
 800e4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4f0:	ebaa 0903 	sub.w	r9, sl, r3
 800e4f4:	9b06      	ldr	r3, [sp, #24]
 800e4f6:	ebaa 0303 	sub.w	r3, sl, r3
 800e4fa:	4599      	cmp	r9, r3
 800e4fc:	bfa8      	it	ge
 800e4fe:	4699      	movge	r9, r3
 800e500:	f1b9 0f00 	cmp.w	r9, #0
 800e504:	dc33      	bgt.n	800e56e <_printf_float+0x396>
 800e506:	f04f 0800 	mov.w	r8, #0
 800e50a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e50e:	f104 0b1a 	add.w	fp, r4, #26
 800e512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e514:	ebaa 0303 	sub.w	r3, sl, r3
 800e518:	eba3 0309 	sub.w	r3, r3, r9
 800e51c:	4543      	cmp	r3, r8
 800e51e:	f77f af79 	ble.w	800e414 <_printf_float+0x23c>
 800e522:	2301      	movs	r3, #1
 800e524:	465a      	mov	r2, fp
 800e526:	4631      	mov	r1, r6
 800e528:	4628      	mov	r0, r5
 800e52a:	47b8      	blx	r7
 800e52c:	3001      	adds	r0, #1
 800e52e:	f43f aeae 	beq.w	800e28e <_printf_float+0xb6>
 800e532:	f108 0801 	add.w	r8, r8, #1
 800e536:	e7ec      	b.n	800e512 <_printf_float+0x33a>
 800e538:	4642      	mov	r2, r8
 800e53a:	4631      	mov	r1, r6
 800e53c:	4628      	mov	r0, r5
 800e53e:	47b8      	blx	r7
 800e540:	3001      	adds	r0, #1
 800e542:	d1c2      	bne.n	800e4ca <_printf_float+0x2f2>
 800e544:	e6a3      	b.n	800e28e <_printf_float+0xb6>
 800e546:	2301      	movs	r3, #1
 800e548:	4631      	mov	r1, r6
 800e54a:	4628      	mov	r0, r5
 800e54c:	9206      	str	r2, [sp, #24]
 800e54e:	47b8      	blx	r7
 800e550:	3001      	adds	r0, #1
 800e552:	f43f ae9c 	beq.w	800e28e <_printf_float+0xb6>
 800e556:	9a06      	ldr	r2, [sp, #24]
 800e558:	f10b 0b01 	add.w	fp, fp, #1
 800e55c:	e7bb      	b.n	800e4d6 <_printf_float+0x2fe>
 800e55e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e562:	4631      	mov	r1, r6
 800e564:	4628      	mov	r0, r5
 800e566:	47b8      	blx	r7
 800e568:	3001      	adds	r0, #1
 800e56a:	d1c0      	bne.n	800e4ee <_printf_float+0x316>
 800e56c:	e68f      	b.n	800e28e <_printf_float+0xb6>
 800e56e:	9a06      	ldr	r2, [sp, #24]
 800e570:	464b      	mov	r3, r9
 800e572:	4442      	add	r2, r8
 800e574:	4631      	mov	r1, r6
 800e576:	4628      	mov	r0, r5
 800e578:	47b8      	blx	r7
 800e57a:	3001      	adds	r0, #1
 800e57c:	d1c3      	bne.n	800e506 <_printf_float+0x32e>
 800e57e:	e686      	b.n	800e28e <_printf_float+0xb6>
 800e580:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e584:	f1ba 0f01 	cmp.w	sl, #1
 800e588:	dc01      	bgt.n	800e58e <_printf_float+0x3b6>
 800e58a:	07db      	lsls	r3, r3, #31
 800e58c:	d536      	bpl.n	800e5fc <_printf_float+0x424>
 800e58e:	2301      	movs	r3, #1
 800e590:	4642      	mov	r2, r8
 800e592:	4631      	mov	r1, r6
 800e594:	4628      	mov	r0, r5
 800e596:	47b8      	blx	r7
 800e598:	3001      	adds	r0, #1
 800e59a:	f43f ae78 	beq.w	800e28e <_printf_float+0xb6>
 800e59e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5a2:	4631      	mov	r1, r6
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	47b8      	blx	r7
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	f43f ae70 	beq.w	800e28e <_printf_float+0xb6>
 800e5ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5ba:	f7f2 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5be:	b9c0      	cbnz	r0, 800e5f2 <_printf_float+0x41a>
 800e5c0:	4653      	mov	r3, sl
 800e5c2:	f108 0201 	add.w	r2, r8, #1
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	47b8      	blx	r7
 800e5cc:	3001      	adds	r0, #1
 800e5ce:	d10c      	bne.n	800e5ea <_printf_float+0x412>
 800e5d0:	e65d      	b.n	800e28e <_printf_float+0xb6>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	465a      	mov	r2, fp
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	4628      	mov	r0, r5
 800e5da:	47b8      	blx	r7
 800e5dc:	3001      	adds	r0, #1
 800e5de:	f43f ae56 	beq.w	800e28e <_printf_float+0xb6>
 800e5e2:	f108 0801 	add.w	r8, r8, #1
 800e5e6:	45d0      	cmp	r8, sl
 800e5e8:	dbf3      	blt.n	800e5d2 <_printf_float+0x3fa>
 800e5ea:	464b      	mov	r3, r9
 800e5ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e5f0:	e6df      	b.n	800e3b2 <_printf_float+0x1da>
 800e5f2:	f04f 0800 	mov.w	r8, #0
 800e5f6:	f104 0b1a 	add.w	fp, r4, #26
 800e5fa:	e7f4      	b.n	800e5e6 <_printf_float+0x40e>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	4642      	mov	r2, r8
 800e600:	e7e1      	b.n	800e5c6 <_printf_float+0x3ee>
 800e602:	2301      	movs	r3, #1
 800e604:	464a      	mov	r2, r9
 800e606:	4631      	mov	r1, r6
 800e608:	4628      	mov	r0, r5
 800e60a:	47b8      	blx	r7
 800e60c:	3001      	adds	r0, #1
 800e60e:	f43f ae3e 	beq.w	800e28e <_printf_float+0xb6>
 800e612:	f108 0801 	add.w	r8, r8, #1
 800e616:	68e3      	ldr	r3, [r4, #12]
 800e618:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e61a:	1a5b      	subs	r3, r3, r1
 800e61c:	4543      	cmp	r3, r8
 800e61e:	dcf0      	bgt.n	800e602 <_printf_float+0x42a>
 800e620:	e6fc      	b.n	800e41c <_printf_float+0x244>
 800e622:	f04f 0800 	mov.w	r8, #0
 800e626:	f104 0919 	add.w	r9, r4, #25
 800e62a:	e7f4      	b.n	800e616 <_printf_float+0x43e>

0800e62c <_printf_common>:
 800e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e630:	4616      	mov	r6, r2
 800e632:	4698      	mov	r8, r3
 800e634:	688a      	ldr	r2, [r1, #8]
 800e636:	690b      	ldr	r3, [r1, #16]
 800e638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e63c:	4293      	cmp	r3, r2
 800e63e:	bfb8      	it	lt
 800e640:	4613      	movlt	r3, r2
 800e642:	6033      	str	r3, [r6, #0]
 800e644:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e648:	4607      	mov	r7, r0
 800e64a:	460c      	mov	r4, r1
 800e64c:	b10a      	cbz	r2, 800e652 <_printf_common+0x26>
 800e64e:	3301      	adds	r3, #1
 800e650:	6033      	str	r3, [r6, #0]
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	0699      	lsls	r1, r3, #26
 800e656:	bf42      	ittt	mi
 800e658:	6833      	ldrmi	r3, [r6, #0]
 800e65a:	3302      	addmi	r3, #2
 800e65c:	6033      	strmi	r3, [r6, #0]
 800e65e:	6825      	ldr	r5, [r4, #0]
 800e660:	f015 0506 	ands.w	r5, r5, #6
 800e664:	d106      	bne.n	800e674 <_printf_common+0x48>
 800e666:	f104 0a19 	add.w	sl, r4, #25
 800e66a:	68e3      	ldr	r3, [r4, #12]
 800e66c:	6832      	ldr	r2, [r6, #0]
 800e66e:	1a9b      	subs	r3, r3, r2
 800e670:	42ab      	cmp	r3, r5
 800e672:	dc26      	bgt.n	800e6c2 <_printf_common+0x96>
 800e674:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e678:	6822      	ldr	r2, [r4, #0]
 800e67a:	3b00      	subs	r3, #0
 800e67c:	bf18      	it	ne
 800e67e:	2301      	movne	r3, #1
 800e680:	0692      	lsls	r2, r2, #26
 800e682:	d42b      	bmi.n	800e6dc <_printf_common+0xb0>
 800e684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e688:	4641      	mov	r1, r8
 800e68a:	4638      	mov	r0, r7
 800e68c:	47c8      	blx	r9
 800e68e:	3001      	adds	r0, #1
 800e690:	d01e      	beq.n	800e6d0 <_printf_common+0xa4>
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	6922      	ldr	r2, [r4, #16]
 800e696:	f003 0306 	and.w	r3, r3, #6
 800e69a:	2b04      	cmp	r3, #4
 800e69c:	bf02      	ittt	eq
 800e69e:	68e5      	ldreq	r5, [r4, #12]
 800e6a0:	6833      	ldreq	r3, [r6, #0]
 800e6a2:	1aed      	subeq	r5, r5, r3
 800e6a4:	68a3      	ldr	r3, [r4, #8]
 800e6a6:	bf0c      	ite	eq
 800e6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6ac:	2500      	movne	r5, #0
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	bfc4      	itt	gt
 800e6b2:	1a9b      	subgt	r3, r3, r2
 800e6b4:	18ed      	addgt	r5, r5, r3
 800e6b6:	2600      	movs	r6, #0
 800e6b8:	341a      	adds	r4, #26
 800e6ba:	42b5      	cmp	r5, r6
 800e6bc:	d11a      	bne.n	800e6f4 <_printf_common+0xc8>
 800e6be:	2000      	movs	r0, #0
 800e6c0:	e008      	b.n	800e6d4 <_printf_common+0xa8>
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	4652      	mov	r2, sl
 800e6c6:	4641      	mov	r1, r8
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	47c8      	blx	r9
 800e6cc:	3001      	adds	r0, #1
 800e6ce:	d103      	bne.n	800e6d8 <_printf_common+0xac>
 800e6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d8:	3501      	adds	r5, #1
 800e6da:	e7c6      	b.n	800e66a <_printf_common+0x3e>
 800e6dc:	18e1      	adds	r1, r4, r3
 800e6de:	1c5a      	adds	r2, r3, #1
 800e6e0:	2030      	movs	r0, #48	@ 0x30
 800e6e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6e6:	4422      	add	r2, r4
 800e6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6f0:	3302      	adds	r3, #2
 800e6f2:	e7c7      	b.n	800e684 <_printf_common+0x58>
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	4641      	mov	r1, r8
 800e6fa:	4638      	mov	r0, r7
 800e6fc:	47c8      	blx	r9
 800e6fe:	3001      	adds	r0, #1
 800e700:	d0e6      	beq.n	800e6d0 <_printf_common+0xa4>
 800e702:	3601      	adds	r6, #1
 800e704:	e7d9      	b.n	800e6ba <_printf_common+0x8e>
	...

0800e708 <_printf_i>:
 800e708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e70c:	7e0f      	ldrb	r7, [r1, #24]
 800e70e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e710:	2f78      	cmp	r7, #120	@ 0x78
 800e712:	4691      	mov	r9, r2
 800e714:	4680      	mov	r8, r0
 800e716:	460c      	mov	r4, r1
 800e718:	469a      	mov	sl, r3
 800e71a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e71e:	d807      	bhi.n	800e730 <_printf_i+0x28>
 800e720:	2f62      	cmp	r7, #98	@ 0x62
 800e722:	d80a      	bhi.n	800e73a <_printf_i+0x32>
 800e724:	2f00      	cmp	r7, #0
 800e726:	f000 80d2 	beq.w	800e8ce <_printf_i+0x1c6>
 800e72a:	2f58      	cmp	r7, #88	@ 0x58
 800e72c:	f000 80b9 	beq.w	800e8a2 <_printf_i+0x19a>
 800e730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e734:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e738:	e03a      	b.n	800e7b0 <_printf_i+0xa8>
 800e73a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e73e:	2b15      	cmp	r3, #21
 800e740:	d8f6      	bhi.n	800e730 <_printf_i+0x28>
 800e742:	a101      	add	r1, pc, #4	@ (adr r1, 800e748 <_printf_i+0x40>)
 800e744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e748:	0800e7a1 	.word	0x0800e7a1
 800e74c:	0800e7b5 	.word	0x0800e7b5
 800e750:	0800e731 	.word	0x0800e731
 800e754:	0800e731 	.word	0x0800e731
 800e758:	0800e731 	.word	0x0800e731
 800e75c:	0800e731 	.word	0x0800e731
 800e760:	0800e7b5 	.word	0x0800e7b5
 800e764:	0800e731 	.word	0x0800e731
 800e768:	0800e731 	.word	0x0800e731
 800e76c:	0800e731 	.word	0x0800e731
 800e770:	0800e731 	.word	0x0800e731
 800e774:	0800e8b5 	.word	0x0800e8b5
 800e778:	0800e7df 	.word	0x0800e7df
 800e77c:	0800e86f 	.word	0x0800e86f
 800e780:	0800e731 	.word	0x0800e731
 800e784:	0800e731 	.word	0x0800e731
 800e788:	0800e8d7 	.word	0x0800e8d7
 800e78c:	0800e731 	.word	0x0800e731
 800e790:	0800e7df 	.word	0x0800e7df
 800e794:	0800e731 	.word	0x0800e731
 800e798:	0800e731 	.word	0x0800e731
 800e79c:	0800e877 	.word	0x0800e877
 800e7a0:	6833      	ldr	r3, [r6, #0]
 800e7a2:	1d1a      	adds	r2, r3, #4
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	6032      	str	r2, [r6, #0]
 800e7a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	e09d      	b.n	800e8f0 <_printf_i+0x1e8>
 800e7b4:	6833      	ldr	r3, [r6, #0]
 800e7b6:	6820      	ldr	r0, [r4, #0]
 800e7b8:	1d19      	adds	r1, r3, #4
 800e7ba:	6031      	str	r1, [r6, #0]
 800e7bc:	0606      	lsls	r6, r0, #24
 800e7be:	d501      	bpl.n	800e7c4 <_printf_i+0xbc>
 800e7c0:	681d      	ldr	r5, [r3, #0]
 800e7c2:	e003      	b.n	800e7cc <_printf_i+0xc4>
 800e7c4:	0645      	lsls	r5, r0, #25
 800e7c6:	d5fb      	bpl.n	800e7c0 <_printf_i+0xb8>
 800e7c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7cc:	2d00      	cmp	r5, #0
 800e7ce:	da03      	bge.n	800e7d8 <_printf_i+0xd0>
 800e7d0:	232d      	movs	r3, #45	@ 0x2d
 800e7d2:	426d      	negs	r5, r5
 800e7d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7d8:	4859      	ldr	r0, [pc, #356]	@ (800e940 <_printf_i+0x238>)
 800e7da:	230a      	movs	r3, #10
 800e7dc:	e011      	b.n	800e802 <_printf_i+0xfa>
 800e7de:	6821      	ldr	r1, [r4, #0]
 800e7e0:	6833      	ldr	r3, [r6, #0]
 800e7e2:	0608      	lsls	r0, r1, #24
 800e7e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7e8:	d402      	bmi.n	800e7f0 <_printf_i+0xe8>
 800e7ea:	0649      	lsls	r1, r1, #25
 800e7ec:	bf48      	it	mi
 800e7ee:	b2ad      	uxthmi	r5, r5
 800e7f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7f2:	4853      	ldr	r0, [pc, #332]	@ (800e940 <_printf_i+0x238>)
 800e7f4:	6033      	str	r3, [r6, #0]
 800e7f6:	bf14      	ite	ne
 800e7f8:	230a      	movne	r3, #10
 800e7fa:	2308      	moveq	r3, #8
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e802:	6866      	ldr	r6, [r4, #4]
 800e804:	60a6      	str	r6, [r4, #8]
 800e806:	2e00      	cmp	r6, #0
 800e808:	bfa2      	ittt	ge
 800e80a:	6821      	ldrge	r1, [r4, #0]
 800e80c:	f021 0104 	bicge.w	r1, r1, #4
 800e810:	6021      	strge	r1, [r4, #0]
 800e812:	b90d      	cbnz	r5, 800e818 <_printf_i+0x110>
 800e814:	2e00      	cmp	r6, #0
 800e816:	d04b      	beq.n	800e8b0 <_printf_i+0x1a8>
 800e818:	4616      	mov	r6, r2
 800e81a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e81e:	fb03 5711 	mls	r7, r3, r1, r5
 800e822:	5dc7      	ldrb	r7, [r0, r7]
 800e824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e828:	462f      	mov	r7, r5
 800e82a:	42bb      	cmp	r3, r7
 800e82c:	460d      	mov	r5, r1
 800e82e:	d9f4      	bls.n	800e81a <_printf_i+0x112>
 800e830:	2b08      	cmp	r3, #8
 800e832:	d10b      	bne.n	800e84c <_printf_i+0x144>
 800e834:	6823      	ldr	r3, [r4, #0]
 800e836:	07df      	lsls	r7, r3, #31
 800e838:	d508      	bpl.n	800e84c <_printf_i+0x144>
 800e83a:	6923      	ldr	r3, [r4, #16]
 800e83c:	6861      	ldr	r1, [r4, #4]
 800e83e:	4299      	cmp	r1, r3
 800e840:	bfde      	ittt	le
 800e842:	2330      	movle	r3, #48	@ 0x30
 800e844:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e848:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e84c:	1b92      	subs	r2, r2, r6
 800e84e:	6122      	str	r2, [r4, #16]
 800e850:	f8cd a000 	str.w	sl, [sp]
 800e854:	464b      	mov	r3, r9
 800e856:	aa03      	add	r2, sp, #12
 800e858:	4621      	mov	r1, r4
 800e85a:	4640      	mov	r0, r8
 800e85c:	f7ff fee6 	bl	800e62c <_printf_common>
 800e860:	3001      	adds	r0, #1
 800e862:	d14a      	bne.n	800e8fa <_printf_i+0x1f2>
 800e864:	f04f 30ff 	mov.w	r0, #4294967295
 800e868:	b004      	add	sp, #16
 800e86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86e:	6823      	ldr	r3, [r4, #0]
 800e870:	f043 0320 	orr.w	r3, r3, #32
 800e874:	6023      	str	r3, [r4, #0]
 800e876:	4833      	ldr	r0, [pc, #204]	@ (800e944 <_printf_i+0x23c>)
 800e878:	2778      	movs	r7, #120	@ 0x78
 800e87a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e87e:	6823      	ldr	r3, [r4, #0]
 800e880:	6831      	ldr	r1, [r6, #0]
 800e882:	061f      	lsls	r7, r3, #24
 800e884:	f851 5b04 	ldr.w	r5, [r1], #4
 800e888:	d402      	bmi.n	800e890 <_printf_i+0x188>
 800e88a:	065f      	lsls	r7, r3, #25
 800e88c:	bf48      	it	mi
 800e88e:	b2ad      	uxthmi	r5, r5
 800e890:	6031      	str	r1, [r6, #0]
 800e892:	07d9      	lsls	r1, r3, #31
 800e894:	bf44      	itt	mi
 800e896:	f043 0320 	orrmi.w	r3, r3, #32
 800e89a:	6023      	strmi	r3, [r4, #0]
 800e89c:	b11d      	cbz	r5, 800e8a6 <_printf_i+0x19e>
 800e89e:	2310      	movs	r3, #16
 800e8a0:	e7ac      	b.n	800e7fc <_printf_i+0xf4>
 800e8a2:	4827      	ldr	r0, [pc, #156]	@ (800e940 <_printf_i+0x238>)
 800e8a4:	e7e9      	b.n	800e87a <_printf_i+0x172>
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	f023 0320 	bic.w	r3, r3, #32
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	e7f6      	b.n	800e89e <_printf_i+0x196>
 800e8b0:	4616      	mov	r6, r2
 800e8b2:	e7bd      	b.n	800e830 <_printf_i+0x128>
 800e8b4:	6833      	ldr	r3, [r6, #0]
 800e8b6:	6825      	ldr	r5, [r4, #0]
 800e8b8:	6961      	ldr	r1, [r4, #20]
 800e8ba:	1d18      	adds	r0, r3, #4
 800e8bc:	6030      	str	r0, [r6, #0]
 800e8be:	062e      	lsls	r6, r5, #24
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	d501      	bpl.n	800e8c8 <_printf_i+0x1c0>
 800e8c4:	6019      	str	r1, [r3, #0]
 800e8c6:	e002      	b.n	800e8ce <_printf_i+0x1c6>
 800e8c8:	0668      	lsls	r0, r5, #25
 800e8ca:	d5fb      	bpl.n	800e8c4 <_printf_i+0x1bc>
 800e8cc:	8019      	strh	r1, [r3, #0]
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	6123      	str	r3, [r4, #16]
 800e8d2:	4616      	mov	r6, r2
 800e8d4:	e7bc      	b.n	800e850 <_printf_i+0x148>
 800e8d6:	6833      	ldr	r3, [r6, #0]
 800e8d8:	1d1a      	adds	r2, r3, #4
 800e8da:	6032      	str	r2, [r6, #0]
 800e8dc:	681e      	ldr	r6, [r3, #0]
 800e8de:	6862      	ldr	r2, [r4, #4]
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	f7f1 fc74 	bl	80001d0 <memchr>
 800e8e8:	b108      	cbz	r0, 800e8ee <_printf_i+0x1e6>
 800e8ea:	1b80      	subs	r0, r0, r6
 800e8ec:	6060      	str	r0, [r4, #4]
 800e8ee:	6863      	ldr	r3, [r4, #4]
 800e8f0:	6123      	str	r3, [r4, #16]
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8f8:	e7aa      	b.n	800e850 <_printf_i+0x148>
 800e8fa:	6923      	ldr	r3, [r4, #16]
 800e8fc:	4632      	mov	r2, r6
 800e8fe:	4649      	mov	r1, r9
 800e900:	4640      	mov	r0, r8
 800e902:	47d0      	blx	sl
 800e904:	3001      	adds	r0, #1
 800e906:	d0ad      	beq.n	800e864 <_printf_i+0x15c>
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	079b      	lsls	r3, r3, #30
 800e90c:	d413      	bmi.n	800e936 <_printf_i+0x22e>
 800e90e:	68e0      	ldr	r0, [r4, #12]
 800e910:	9b03      	ldr	r3, [sp, #12]
 800e912:	4298      	cmp	r0, r3
 800e914:	bfb8      	it	lt
 800e916:	4618      	movlt	r0, r3
 800e918:	e7a6      	b.n	800e868 <_printf_i+0x160>
 800e91a:	2301      	movs	r3, #1
 800e91c:	4632      	mov	r2, r6
 800e91e:	4649      	mov	r1, r9
 800e920:	4640      	mov	r0, r8
 800e922:	47d0      	blx	sl
 800e924:	3001      	adds	r0, #1
 800e926:	d09d      	beq.n	800e864 <_printf_i+0x15c>
 800e928:	3501      	adds	r5, #1
 800e92a:	68e3      	ldr	r3, [r4, #12]
 800e92c:	9903      	ldr	r1, [sp, #12]
 800e92e:	1a5b      	subs	r3, r3, r1
 800e930:	42ab      	cmp	r3, r5
 800e932:	dcf2      	bgt.n	800e91a <_printf_i+0x212>
 800e934:	e7eb      	b.n	800e90e <_printf_i+0x206>
 800e936:	2500      	movs	r5, #0
 800e938:	f104 0619 	add.w	r6, r4, #25
 800e93c:	e7f5      	b.n	800e92a <_printf_i+0x222>
 800e93e:	bf00      	nop
 800e940:	0801280b 	.word	0x0801280b
 800e944:	0801281c 	.word	0x0801281c

0800e948 <std>:
 800e948:	2300      	movs	r3, #0
 800e94a:	b510      	push	{r4, lr}
 800e94c:	4604      	mov	r4, r0
 800e94e:	e9c0 3300 	strd	r3, r3, [r0]
 800e952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e956:	6083      	str	r3, [r0, #8]
 800e958:	8181      	strh	r1, [r0, #12]
 800e95a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e95c:	81c2      	strh	r2, [r0, #14]
 800e95e:	6183      	str	r3, [r0, #24]
 800e960:	4619      	mov	r1, r3
 800e962:	2208      	movs	r2, #8
 800e964:	305c      	adds	r0, #92	@ 0x5c
 800e966:	f000 f926 	bl	800ebb6 <memset>
 800e96a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a0 <std+0x58>)
 800e96c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e96e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a4 <std+0x5c>)
 800e970:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e972:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a8 <std+0x60>)
 800e974:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e976:	4b0d      	ldr	r3, [pc, #52]	@ (800e9ac <std+0x64>)
 800e978:	6323      	str	r3, [r4, #48]	@ 0x30
 800e97a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9b0 <std+0x68>)
 800e97c:	6224      	str	r4, [r4, #32]
 800e97e:	429c      	cmp	r4, r3
 800e980:	d006      	beq.n	800e990 <std+0x48>
 800e982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e986:	4294      	cmp	r4, r2
 800e988:	d002      	beq.n	800e990 <std+0x48>
 800e98a:	33d0      	adds	r3, #208	@ 0xd0
 800e98c:	429c      	cmp	r4, r3
 800e98e:	d105      	bne.n	800e99c <std+0x54>
 800e990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e998:	f000 b98a 	b.w	800ecb0 <__retarget_lock_init_recursive>
 800e99c:	bd10      	pop	{r4, pc}
 800e99e:	bf00      	nop
 800e9a0:	0800eb31 	.word	0x0800eb31
 800e9a4:	0800eb53 	.word	0x0800eb53
 800e9a8:	0800eb8b 	.word	0x0800eb8b
 800e9ac:	0800ebaf 	.word	0x0800ebaf
 800e9b0:	200026c8 	.word	0x200026c8

0800e9b4 <stdio_exit_handler>:
 800e9b4:	4a02      	ldr	r2, [pc, #8]	@ (800e9c0 <stdio_exit_handler+0xc>)
 800e9b6:	4903      	ldr	r1, [pc, #12]	@ (800e9c4 <stdio_exit_handler+0x10>)
 800e9b8:	4803      	ldr	r0, [pc, #12]	@ (800e9c8 <stdio_exit_handler+0x14>)
 800e9ba:	f000 b869 	b.w	800ea90 <_fwalk_sglue>
 800e9be:	bf00      	nop
 800e9c0:	2000012c 	.word	0x2000012c
 800e9c4:	080108d1 	.word	0x080108d1
 800e9c8:	2000013c 	.word	0x2000013c

0800e9cc <cleanup_stdio>:
 800e9cc:	6841      	ldr	r1, [r0, #4]
 800e9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800ea00 <cleanup_stdio+0x34>)
 800e9d0:	4299      	cmp	r1, r3
 800e9d2:	b510      	push	{r4, lr}
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	d001      	beq.n	800e9dc <cleanup_stdio+0x10>
 800e9d8:	f001 ff7a 	bl	80108d0 <_fflush_r>
 800e9dc:	68a1      	ldr	r1, [r4, #8]
 800e9de:	4b09      	ldr	r3, [pc, #36]	@ (800ea04 <cleanup_stdio+0x38>)
 800e9e0:	4299      	cmp	r1, r3
 800e9e2:	d002      	beq.n	800e9ea <cleanup_stdio+0x1e>
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f001 ff73 	bl	80108d0 <_fflush_r>
 800e9ea:	68e1      	ldr	r1, [r4, #12]
 800e9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ea08 <cleanup_stdio+0x3c>)
 800e9ee:	4299      	cmp	r1, r3
 800e9f0:	d004      	beq.n	800e9fc <cleanup_stdio+0x30>
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9f8:	f001 bf6a 	b.w	80108d0 <_fflush_r>
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	bf00      	nop
 800ea00:	200026c8 	.word	0x200026c8
 800ea04:	20002730 	.word	0x20002730
 800ea08:	20002798 	.word	0x20002798

0800ea0c <global_stdio_init.part.0>:
 800ea0c:	b510      	push	{r4, lr}
 800ea0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea3c <global_stdio_init.part.0+0x30>)
 800ea10:	4c0b      	ldr	r4, [pc, #44]	@ (800ea40 <global_stdio_init.part.0+0x34>)
 800ea12:	4a0c      	ldr	r2, [pc, #48]	@ (800ea44 <global_stdio_init.part.0+0x38>)
 800ea14:	601a      	str	r2, [r3, #0]
 800ea16:	4620      	mov	r0, r4
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2104      	movs	r1, #4
 800ea1c:	f7ff ff94 	bl	800e948 <std>
 800ea20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea24:	2201      	movs	r2, #1
 800ea26:	2109      	movs	r1, #9
 800ea28:	f7ff ff8e 	bl	800e948 <std>
 800ea2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea30:	2202      	movs	r2, #2
 800ea32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea36:	2112      	movs	r1, #18
 800ea38:	f7ff bf86 	b.w	800e948 <std>
 800ea3c:	20002800 	.word	0x20002800
 800ea40:	200026c8 	.word	0x200026c8
 800ea44:	0800e9b5 	.word	0x0800e9b5

0800ea48 <__sfp_lock_acquire>:
 800ea48:	4801      	ldr	r0, [pc, #4]	@ (800ea50 <__sfp_lock_acquire+0x8>)
 800ea4a:	f000 b932 	b.w	800ecb2 <__retarget_lock_acquire_recursive>
 800ea4e:	bf00      	nop
 800ea50:	20002809 	.word	0x20002809

0800ea54 <__sfp_lock_release>:
 800ea54:	4801      	ldr	r0, [pc, #4]	@ (800ea5c <__sfp_lock_release+0x8>)
 800ea56:	f000 b92d 	b.w	800ecb4 <__retarget_lock_release_recursive>
 800ea5a:	bf00      	nop
 800ea5c:	20002809 	.word	0x20002809

0800ea60 <__sinit>:
 800ea60:	b510      	push	{r4, lr}
 800ea62:	4604      	mov	r4, r0
 800ea64:	f7ff fff0 	bl	800ea48 <__sfp_lock_acquire>
 800ea68:	6a23      	ldr	r3, [r4, #32]
 800ea6a:	b11b      	cbz	r3, 800ea74 <__sinit+0x14>
 800ea6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea70:	f7ff bff0 	b.w	800ea54 <__sfp_lock_release>
 800ea74:	4b04      	ldr	r3, [pc, #16]	@ (800ea88 <__sinit+0x28>)
 800ea76:	6223      	str	r3, [r4, #32]
 800ea78:	4b04      	ldr	r3, [pc, #16]	@ (800ea8c <__sinit+0x2c>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d1f5      	bne.n	800ea6c <__sinit+0xc>
 800ea80:	f7ff ffc4 	bl	800ea0c <global_stdio_init.part.0>
 800ea84:	e7f2      	b.n	800ea6c <__sinit+0xc>
 800ea86:	bf00      	nop
 800ea88:	0800e9cd 	.word	0x0800e9cd
 800ea8c:	20002800 	.word	0x20002800

0800ea90 <_fwalk_sglue>:
 800ea90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea94:	4607      	mov	r7, r0
 800ea96:	4688      	mov	r8, r1
 800ea98:	4614      	mov	r4, r2
 800ea9a:	2600      	movs	r6, #0
 800ea9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eaa0:	f1b9 0901 	subs.w	r9, r9, #1
 800eaa4:	d505      	bpl.n	800eab2 <_fwalk_sglue+0x22>
 800eaa6:	6824      	ldr	r4, [r4, #0]
 800eaa8:	2c00      	cmp	r4, #0
 800eaaa:	d1f7      	bne.n	800ea9c <_fwalk_sglue+0xc>
 800eaac:	4630      	mov	r0, r6
 800eaae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eab2:	89ab      	ldrh	r3, [r5, #12]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d907      	bls.n	800eac8 <_fwalk_sglue+0x38>
 800eab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eabc:	3301      	adds	r3, #1
 800eabe:	d003      	beq.n	800eac8 <_fwalk_sglue+0x38>
 800eac0:	4629      	mov	r1, r5
 800eac2:	4638      	mov	r0, r7
 800eac4:	47c0      	blx	r8
 800eac6:	4306      	orrs	r6, r0
 800eac8:	3568      	adds	r5, #104	@ 0x68
 800eaca:	e7e9      	b.n	800eaa0 <_fwalk_sglue+0x10>

0800eacc <iprintf>:
 800eacc:	b40f      	push	{r0, r1, r2, r3}
 800eace:	b507      	push	{r0, r1, r2, lr}
 800ead0:	4906      	ldr	r1, [pc, #24]	@ (800eaec <iprintf+0x20>)
 800ead2:	ab04      	add	r3, sp, #16
 800ead4:	6808      	ldr	r0, [r1, #0]
 800ead6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eada:	6881      	ldr	r1, [r0, #8]
 800eadc:	9301      	str	r3, [sp, #4]
 800eade:	f001 fd5b 	bl	8010598 <_vfiprintf_r>
 800eae2:	b003      	add	sp, #12
 800eae4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eae8:	b004      	add	sp, #16
 800eaea:	4770      	bx	lr
 800eaec:	20000138 	.word	0x20000138

0800eaf0 <siprintf>:
 800eaf0:	b40e      	push	{r1, r2, r3}
 800eaf2:	b500      	push	{lr}
 800eaf4:	b09c      	sub	sp, #112	@ 0x70
 800eaf6:	ab1d      	add	r3, sp, #116	@ 0x74
 800eaf8:	9002      	str	r0, [sp, #8]
 800eafa:	9006      	str	r0, [sp, #24]
 800eafc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb00:	4809      	ldr	r0, [pc, #36]	@ (800eb28 <siprintf+0x38>)
 800eb02:	9107      	str	r1, [sp, #28]
 800eb04:	9104      	str	r1, [sp, #16]
 800eb06:	4909      	ldr	r1, [pc, #36]	@ (800eb2c <siprintf+0x3c>)
 800eb08:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb0c:	9105      	str	r1, [sp, #20]
 800eb0e:	6800      	ldr	r0, [r0, #0]
 800eb10:	9301      	str	r3, [sp, #4]
 800eb12:	a902      	add	r1, sp, #8
 800eb14:	f001 fc1a 	bl	801034c <_svfiprintf_r>
 800eb18:	9b02      	ldr	r3, [sp, #8]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	701a      	strb	r2, [r3, #0]
 800eb1e:	b01c      	add	sp, #112	@ 0x70
 800eb20:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb24:	b003      	add	sp, #12
 800eb26:	4770      	bx	lr
 800eb28:	20000138 	.word	0x20000138
 800eb2c:	ffff0208 	.word	0xffff0208

0800eb30 <__sread>:
 800eb30:	b510      	push	{r4, lr}
 800eb32:	460c      	mov	r4, r1
 800eb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb38:	f000 f86c 	bl	800ec14 <_read_r>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	bfab      	itete	ge
 800eb40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb42:	89a3      	ldrhlt	r3, [r4, #12]
 800eb44:	181b      	addge	r3, r3, r0
 800eb46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb4a:	bfac      	ite	ge
 800eb4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb4e:	81a3      	strhlt	r3, [r4, #12]
 800eb50:	bd10      	pop	{r4, pc}

0800eb52 <__swrite>:
 800eb52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb56:	461f      	mov	r7, r3
 800eb58:	898b      	ldrh	r3, [r1, #12]
 800eb5a:	05db      	lsls	r3, r3, #23
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	460c      	mov	r4, r1
 800eb60:	4616      	mov	r6, r2
 800eb62:	d505      	bpl.n	800eb70 <__swrite+0x1e>
 800eb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb68:	2302      	movs	r3, #2
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f000 f840 	bl	800ebf0 <_lseek_r>
 800eb70:	89a3      	ldrh	r3, [r4, #12]
 800eb72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb7a:	81a3      	strh	r3, [r4, #12]
 800eb7c:	4632      	mov	r2, r6
 800eb7e:	463b      	mov	r3, r7
 800eb80:	4628      	mov	r0, r5
 800eb82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb86:	f000 b857 	b.w	800ec38 <_write_r>

0800eb8a <__sseek>:
 800eb8a:	b510      	push	{r4, lr}
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb92:	f000 f82d 	bl	800ebf0 <_lseek_r>
 800eb96:	1c43      	adds	r3, r0, #1
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	bf15      	itete	ne
 800eb9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eba6:	81a3      	strheq	r3, [r4, #12]
 800eba8:	bf18      	it	ne
 800ebaa:	81a3      	strhne	r3, [r4, #12]
 800ebac:	bd10      	pop	{r4, pc}

0800ebae <__sclose>:
 800ebae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb2:	f000 b80d 	b.w	800ebd0 <_close_r>

0800ebb6 <memset>:
 800ebb6:	4402      	add	r2, r0
 800ebb8:	4603      	mov	r3, r0
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d100      	bne.n	800ebc0 <memset+0xa>
 800ebbe:	4770      	bx	lr
 800ebc0:	f803 1b01 	strb.w	r1, [r3], #1
 800ebc4:	e7f9      	b.n	800ebba <memset+0x4>
	...

0800ebc8 <_localeconv_r>:
 800ebc8:	4800      	ldr	r0, [pc, #0]	@ (800ebcc <_localeconv_r+0x4>)
 800ebca:	4770      	bx	lr
 800ebcc:	20000278 	.word	0x20000278

0800ebd0 <_close_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4d06      	ldr	r5, [pc, #24]	@ (800ebec <_close_r+0x1c>)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	4608      	mov	r0, r1
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	f7f5 fb20 	bl	8004220 <_close>
 800ebe0:	1c43      	adds	r3, r0, #1
 800ebe2:	d102      	bne.n	800ebea <_close_r+0x1a>
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	b103      	cbz	r3, 800ebea <_close_r+0x1a>
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	20002804 	.word	0x20002804

0800ebf0 <_lseek_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4d07      	ldr	r5, [pc, #28]	@ (800ec10 <_lseek_r+0x20>)
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	4608      	mov	r0, r1
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	602a      	str	r2, [r5, #0]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	f7f5 fb35 	bl	800426e <_lseek>
 800ec04:	1c43      	adds	r3, r0, #1
 800ec06:	d102      	bne.n	800ec0e <_lseek_r+0x1e>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	b103      	cbz	r3, 800ec0e <_lseek_r+0x1e>
 800ec0c:	6023      	str	r3, [r4, #0]
 800ec0e:	bd38      	pop	{r3, r4, r5, pc}
 800ec10:	20002804 	.word	0x20002804

0800ec14 <_read_r>:
 800ec14:	b538      	push	{r3, r4, r5, lr}
 800ec16:	4d07      	ldr	r5, [pc, #28]	@ (800ec34 <_read_r+0x20>)
 800ec18:	4604      	mov	r4, r0
 800ec1a:	4608      	mov	r0, r1
 800ec1c:	4611      	mov	r1, r2
 800ec1e:	2200      	movs	r2, #0
 800ec20:	602a      	str	r2, [r5, #0]
 800ec22:	461a      	mov	r2, r3
 800ec24:	f7f5 fac3 	bl	80041ae <_read>
 800ec28:	1c43      	adds	r3, r0, #1
 800ec2a:	d102      	bne.n	800ec32 <_read_r+0x1e>
 800ec2c:	682b      	ldr	r3, [r5, #0]
 800ec2e:	b103      	cbz	r3, 800ec32 <_read_r+0x1e>
 800ec30:	6023      	str	r3, [r4, #0]
 800ec32:	bd38      	pop	{r3, r4, r5, pc}
 800ec34:	20002804 	.word	0x20002804

0800ec38 <_write_r>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	4d07      	ldr	r5, [pc, #28]	@ (800ec58 <_write_r+0x20>)
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	4608      	mov	r0, r1
 800ec40:	4611      	mov	r1, r2
 800ec42:	2200      	movs	r2, #0
 800ec44:	602a      	str	r2, [r5, #0]
 800ec46:	461a      	mov	r2, r3
 800ec48:	f7f5 face 	bl	80041e8 <_write>
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d102      	bne.n	800ec56 <_write_r+0x1e>
 800ec50:	682b      	ldr	r3, [r5, #0]
 800ec52:	b103      	cbz	r3, 800ec56 <_write_r+0x1e>
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	20002804 	.word	0x20002804

0800ec5c <__errno>:
 800ec5c:	4b01      	ldr	r3, [pc, #4]	@ (800ec64 <__errno+0x8>)
 800ec5e:	6818      	ldr	r0, [r3, #0]
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	20000138 	.word	0x20000138

0800ec68 <__libc_init_array>:
 800ec68:	b570      	push	{r4, r5, r6, lr}
 800ec6a:	4d0d      	ldr	r5, [pc, #52]	@ (800eca0 <__libc_init_array+0x38>)
 800ec6c:	4c0d      	ldr	r4, [pc, #52]	@ (800eca4 <__libc_init_array+0x3c>)
 800ec6e:	1b64      	subs	r4, r4, r5
 800ec70:	10a4      	asrs	r4, r4, #2
 800ec72:	2600      	movs	r6, #0
 800ec74:	42a6      	cmp	r6, r4
 800ec76:	d109      	bne.n	800ec8c <__libc_init_array+0x24>
 800ec78:	4d0b      	ldr	r5, [pc, #44]	@ (800eca8 <__libc_init_array+0x40>)
 800ec7a:	4c0c      	ldr	r4, [pc, #48]	@ (800ecac <__libc_init_array+0x44>)
 800ec7c:	f003 fcb0 	bl	80125e0 <_init>
 800ec80:	1b64      	subs	r4, r4, r5
 800ec82:	10a4      	asrs	r4, r4, #2
 800ec84:	2600      	movs	r6, #0
 800ec86:	42a6      	cmp	r6, r4
 800ec88:	d105      	bne.n	800ec96 <__libc_init_array+0x2e>
 800ec8a:	bd70      	pop	{r4, r5, r6, pc}
 800ec8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec90:	4798      	blx	r3
 800ec92:	3601      	adds	r6, #1
 800ec94:	e7ee      	b.n	800ec74 <__libc_init_array+0xc>
 800ec96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec9a:	4798      	blx	r3
 800ec9c:	3601      	adds	r6, #1
 800ec9e:	e7f2      	b.n	800ec86 <__libc_init_array+0x1e>
 800eca0:	08012ec8 	.word	0x08012ec8
 800eca4:	08012ec8 	.word	0x08012ec8
 800eca8:	08012ec8 	.word	0x08012ec8
 800ecac:	08012ecc 	.word	0x08012ecc

0800ecb0 <__retarget_lock_init_recursive>:
 800ecb0:	4770      	bx	lr

0800ecb2 <__retarget_lock_acquire_recursive>:
 800ecb2:	4770      	bx	lr

0800ecb4 <__retarget_lock_release_recursive>:
 800ecb4:	4770      	bx	lr

0800ecb6 <memcpy>:
 800ecb6:	440a      	add	r2, r1
 800ecb8:	4291      	cmp	r1, r2
 800ecba:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecbe:	d100      	bne.n	800ecc2 <memcpy+0xc>
 800ecc0:	4770      	bx	lr
 800ecc2:	b510      	push	{r4, lr}
 800ecc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eccc:	4291      	cmp	r1, r2
 800ecce:	d1f9      	bne.n	800ecc4 <memcpy+0xe>
 800ecd0:	bd10      	pop	{r4, pc}

0800ecd2 <copysign>:
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	ec51 0b10 	vmov	r0, r1, d0
 800ecd8:	ed8d 1b00 	vstr	d1, [sp]
 800ecdc:	4602      	mov	r2, r0
 800ecde:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800ece2:	9901      	ldr	r1, [sp, #4]
 800ece4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800ece8:	ea40 0301 	orr.w	r3, r0, r1
 800ecec:	ec43 2b10 	vmov	d0, r2, r3
 800ecf0:	b002      	add	sp, #8
 800ecf2:	4770      	bx	lr

0800ecf4 <quorem>:
 800ecf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf8:	6903      	ldr	r3, [r0, #16]
 800ecfa:	690c      	ldr	r4, [r1, #16]
 800ecfc:	42a3      	cmp	r3, r4
 800ecfe:	4607      	mov	r7, r0
 800ed00:	db7e      	blt.n	800ee00 <quorem+0x10c>
 800ed02:	3c01      	subs	r4, #1
 800ed04:	f101 0814 	add.w	r8, r1, #20
 800ed08:	00a3      	lsls	r3, r4, #2
 800ed0a:	f100 0514 	add.w	r5, r0, #20
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed14:	9301      	str	r3, [sp, #4]
 800ed16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	429a      	cmp	r2, r3
 800ed22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed26:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed2a:	d32e      	bcc.n	800ed8a <quorem+0x96>
 800ed2c:	f04f 0a00 	mov.w	sl, #0
 800ed30:	46c4      	mov	ip, r8
 800ed32:	46ae      	mov	lr, r5
 800ed34:	46d3      	mov	fp, sl
 800ed36:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed3a:	b298      	uxth	r0, r3
 800ed3c:	fb06 a000 	mla	r0, r6, r0, sl
 800ed40:	0c02      	lsrs	r2, r0, #16
 800ed42:	0c1b      	lsrs	r3, r3, #16
 800ed44:	fb06 2303 	mla	r3, r6, r3, r2
 800ed48:	f8de 2000 	ldr.w	r2, [lr]
 800ed4c:	b280      	uxth	r0, r0
 800ed4e:	b292      	uxth	r2, r2
 800ed50:	1a12      	subs	r2, r2, r0
 800ed52:	445a      	add	r2, fp
 800ed54:	f8de 0000 	ldr.w	r0, [lr]
 800ed58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ed62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ed66:	b292      	uxth	r2, r2
 800ed68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ed6c:	45e1      	cmp	r9, ip
 800ed6e:	f84e 2b04 	str.w	r2, [lr], #4
 800ed72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ed76:	d2de      	bcs.n	800ed36 <quorem+0x42>
 800ed78:	9b00      	ldr	r3, [sp, #0]
 800ed7a:	58eb      	ldr	r3, [r5, r3]
 800ed7c:	b92b      	cbnz	r3, 800ed8a <quorem+0x96>
 800ed7e:	9b01      	ldr	r3, [sp, #4]
 800ed80:	3b04      	subs	r3, #4
 800ed82:	429d      	cmp	r5, r3
 800ed84:	461a      	mov	r2, r3
 800ed86:	d32f      	bcc.n	800ede8 <quorem+0xf4>
 800ed88:	613c      	str	r4, [r7, #16]
 800ed8a:	4638      	mov	r0, r7
 800ed8c:	f001 f97a 	bl	8010084 <__mcmp>
 800ed90:	2800      	cmp	r0, #0
 800ed92:	db25      	blt.n	800ede0 <quorem+0xec>
 800ed94:	4629      	mov	r1, r5
 800ed96:	2000      	movs	r0, #0
 800ed98:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed9c:	f8d1 c000 	ldr.w	ip, [r1]
 800eda0:	fa1f fe82 	uxth.w	lr, r2
 800eda4:	fa1f f38c 	uxth.w	r3, ip
 800eda8:	eba3 030e 	sub.w	r3, r3, lr
 800edac:	4403      	add	r3, r0
 800edae:	0c12      	lsrs	r2, r2, #16
 800edb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800edb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800edb8:	b29b      	uxth	r3, r3
 800edba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edbe:	45c1      	cmp	r9, r8
 800edc0:	f841 3b04 	str.w	r3, [r1], #4
 800edc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800edc8:	d2e6      	bcs.n	800ed98 <quorem+0xa4>
 800edca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edd2:	b922      	cbnz	r2, 800edde <quorem+0xea>
 800edd4:	3b04      	subs	r3, #4
 800edd6:	429d      	cmp	r5, r3
 800edd8:	461a      	mov	r2, r3
 800edda:	d30b      	bcc.n	800edf4 <quorem+0x100>
 800eddc:	613c      	str	r4, [r7, #16]
 800edde:	3601      	adds	r6, #1
 800ede0:	4630      	mov	r0, r6
 800ede2:	b003      	add	sp, #12
 800ede4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede8:	6812      	ldr	r2, [r2, #0]
 800edea:	3b04      	subs	r3, #4
 800edec:	2a00      	cmp	r2, #0
 800edee:	d1cb      	bne.n	800ed88 <quorem+0x94>
 800edf0:	3c01      	subs	r4, #1
 800edf2:	e7c6      	b.n	800ed82 <quorem+0x8e>
 800edf4:	6812      	ldr	r2, [r2, #0]
 800edf6:	3b04      	subs	r3, #4
 800edf8:	2a00      	cmp	r2, #0
 800edfa:	d1ef      	bne.n	800eddc <quorem+0xe8>
 800edfc:	3c01      	subs	r4, #1
 800edfe:	e7ea      	b.n	800edd6 <quorem+0xe2>
 800ee00:	2000      	movs	r0, #0
 800ee02:	e7ee      	b.n	800ede2 <quorem+0xee>
 800ee04:	0000      	movs	r0, r0
	...

0800ee08 <_dtoa_r>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	69c7      	ldr	r7, [r0, #28]
 800ee0e:	b099      	sub	sp, #100	@ 0x64
 800ee10:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee14:	ec55 4b10 	vmov	r4, r5, d0
 800ee18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ee1a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee1c:	4683      	mov	fp, r0
 800ee1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee22:	b97f      	cbnz	r7, 800ee44 <_dtoa_r+0x3c>
 800ee24:	2010      	movs	r0, #16
 800ee26:	f000 fdfd 	bl	800fa24 <malloc>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ee30:	b920      	cbnz	r0, 800ee3c <_dtoa_r+0x34>
 800ee32:	4ba7      	ldr	r3, [pc, #668]	@ (800f0d0 <_dtoa_r+0x2c8>)
 800ee34:	21ef      	movs	r1, #239	@ 0xef
 800ee36:	48a7      	ldr	r0, [pc, #668]	@ (800f0d4 <_dtoa_r+0x2cc>)
 800ee38:	f001 fe30 	bl	8010a9c <__assert_func>
 800ee3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee40:	6007      	str	r7, [r0, #0]
 800ee42:	60c7      	str	r7, [r0, #12]
 800ee44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee48:	6819      	ldr	r1, [r3, #0]
 800ee4a:	b159      	cbz	r1, 800ee64 <_dtoa_r+0x5c>
 800ee4c:	685a      	ldr	r2, [r3, #4]
 800ee4e:	604a      	str	r2, [r1, #4]
 800ee50:	2301      	movs	r3, #1
 800ee52:	4093      	lsls	r3, r2
 800ee54:	608b      	str	r3, [r1, #8]
 800ee56:	4658      	mov	r0, fp
 800ee58:	f000 feda 	bl	800fc10 <_Bfree>
 800ee5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee60:	2200      	movs	r2, #0
 800ee62:	601a      	str	r2, [r3, #0]
 800ee64:	1e2b      	subs	r3, r5, #0
 800ee66:	bfb9      	ittee	lt
 800ee68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ee6c:	9303      	strlt	r3, [sp, #12]
 800ee6e:	2300      	movge	r3, #0
 800ee70:	6033      	strge	r3, [r6, #0]
 800ee72:	9f03      	ldr	r7, [sp, #12]
 800ee74:	4b98      	ldr	r3, [pc, #608]	@ (800f0d8 <_dtoa_r+0x2d0>)
 800ee76:	bfbc      	itt	lt
 800ee78:	2201      	movlt	r2, #1
 800ee7a:	6032      	strlt	r2, [r6, #0]
 800ee7c:	43bb      	bics	r3, r7
 800ee7e:	d112      	bne.n	800eea6 <_dtoa_r+0x9e>
 800ee80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ee82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ee86:	6013      	str	r3, [r2, #0]
 800ee88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee8c:	4323      	orrs	r3, r4
 800ee8e:	f000 854d 	beq.w	800f92c <_dtoa_r+0xb24>
 800ee92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f0ec <_dtoa_r+0x2e4>
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 854f 	beq.w	800f93c <_dtoa_r+0xb34>
 800ee9e:	f10a 0303 	add.w	r3, sl, #3
 800eea2:	f000 bd49 	b.w	800f938 <_dtoa_r+0xb30>
 800eea6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	ec51 0b17 	vmov	r0, r1, d7
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800eeb6:	f7f1 fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 800eeba:	4680      	mov	r8, r0
 800eebc:	b158      	cbz	r0, 800eed6 <_dtoa_r+0xce>
 800eebe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eec0:	2301      	movs	r3, #1
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eec6:	b113      	cbz	r3, 800eece <_dtoa_r+0xc6>
 800eec8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eeca:	4b84      	ldr	r3, [pc, #528]	@ (800f0dc <_dtoa_r+0x2d4>)
 800eecc:	6013      	str	r3, [r2, #0]
 800eece:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f0f0 <_dtoa_r+0x2e8>
 800eed2:	f000 bd33 	b.w	800f93c <_dtoa_r+0xb34>
 800eed6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eeda:	aa16      	add	r2, sp, #88	@ 0x58
 800eedc:	a917      	add	r1, sp, #92	@ 0x5c
 800eede:	4658      	mov	r0, fp
 800eee0:	f001 f980 	bl	80101e4 <__d2b>
 800eee4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eee8:	4681      	mov	r9, r0
 800eeea:	2e00      	cmp	r6, #0
 800eeec:	d077      	beq.n	800efde <_dtoa_r+0x1d6>
 800eeee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eef0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800eef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eefc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ef00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ef04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ef08:	4619      	mov	r1, r3
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4b74      	ldr	r3, [pc, #464]	@ (800f0e0 <_dtoa_r+0x2d8>)
 800ef0e:	f7f1 f9bb 	bl	8000288 <__aeabi_dsub>
 800ef12:	a369      	add	r3, pc, #420	@ (adr r3, 800f0b8 <_dtoa_r+0x2b0>)
 800ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	a368      	add	r3, pc, #416	@ (adr r3, 800f0c0 <_dtoa_r+0x2b8>)
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	f7f1 f9b3 	bl	800028c <__adddf3>
 800ef26:	4604      	mov	r4, r0
 800ef28:	4630      	mov	r0, r6
 800ef2a:	460d      	mov	r5, r1
 800ef2c:	f7f1 fafa 	bl	8000524 <__aeabi_i2d>
 800ef30:	a365      	add	r3, pc, #404	@ (adr r3, 800f0c8 <_dtoa_r+0x2c0>)
 800ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef36:	f7f1 fb5f 	bl	80005f8 <__aeabi_dmul>
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4620      	mov	r0, r4
 800ef40:	4629      	mov	r1, r5
 800ef42:	f7f1 f9a3 	bl	800028c <__adddf3>
 800ef46:	4604      	mov	r4, r0
 800ef48:	460d      	mov	r5, r1
 800ef4a:	f7f1 fe05 	bl	8000b58 <__aeabi_d2iz>
 800ef4e:	2200      	movs	r2, #0
 800ef50:	4607      	mov	r7, r0
 800ef52:	2300      	movs	r3, #0
 800ef54:	4620      	mov	r0, r4
 800ef56:	4629      	mov	r1, r5
 800ef58:	f7f1 fdc0 	bl	8000adc <__aeabi_dcmplt>
 800ef5c:	b140      	cbz	r0, 800ef70 <_dtoa_r+0x168>
 800ef5e:	4638      	mov	r0, r7
 800ef60:	f7f1 fae0 	bl	8000524 <__aeabi_i2d>
 800ef64:	4622      	mov	r2, r4
 800ef66:	462b      	mov	r3, r5
 800ef68:	f7f1 fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef6c:	b900      	cbnz	r0, 800ef70 <_dtoa_r+0x168>
 800ef6e:	3f01      	subs	r7, #1
 800ef70:	2f16      	cmp	r7, #22
 800ef72:	d851      	bhi.n	800f018 <_dtoa_r+0x210>
 800ef74:	4b5b      	ldr	r3, [pc, #364]	@ (800f0e4 <_dtoa_r+0x2dc>)
 800ef76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef82:	f7f1 fdab 	bl	8000adc <__aeabi_dcmplt>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d048      	beq.n	800f01c <_dtoa_r+0x214>
 800ef8a:	3f01      	subs	r7, #1
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ef92:	1b9b      	subs	r3, r3, r6
 800ef94:	1e5a      	subs	r2, r3, #1
 800ef96:	bf44      	itt	mi
 800ef98:	f1c3 0801 	rsbmi	r8, r3, #1
 800ef9c:	2300      	movmi	r3, #0
 800ef9e:	9208      	str	r2, [sp, #32]
 800efa0:	bf54      	ite	pl
 800efa2:	f04f 0800 	movpl.w	r8, #0
 800efa6:	9308      	strmi	r3, [sp, #32]
 800efa8:	2f00      	cmp	r7, #0
 800efaa:	db39      	blt.n	800f020 <_dtoa_r+0x218>
 800efac:	9b08      	ldr	r3, [sp, #32]
 800efae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800efb0:	443b      	add	r3, r7
 800efb2:	9308      	str	r3, [sp, #32]
 800efb4:	2300      	movs	r3, #0
 800efb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800efb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efba:	2b09      	cmp	r3, #9
 800efbc:	d864      	bhi.n	800f088 <_dtoa_r+0x280>
 800efbe:	2b05      	cmp	r3, #5
 800efc0:	bfc4      	itt	gt
 800efc2:	3b04      	subgt	r3, #4
 800efc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800efc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efc8:	f1a3 0302 	sub.w	r3, r3, #2
 800efcc:	bfcc      	ite	gt
 800efce:	2400      	movgt	r4, #0
 800efd0:	2401      	movle	r4, #1
 800efd2:	2b03      	cmp	r3, #3
 800efd4:	d863      	bhi.n	800f09e <_dtoa_r+0x296>
 800efd6:	e8df f003 	tbb	[pc, r3]
 800efda:	372a      	.short	0x372a
 800efdc:	5535      	.short	0x5535
 800efde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800efe2:	441e      	add	r6, r3
 800efe4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800efe8:	2b20      	cmp	r3, #32
 800efea:	bfc1      	itttt	gt
 800efec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eff0:	409f      	lslgt	r7, r3
 800eff2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eff6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800effa:	bfd6      	itet	le
 800effc:	f1c3 0320 	rsble	r3, r3, #32
 800f000:	ea47 0003 	orrgt.w	r0, r7, r3
 800f004:	fa04 f003 	lslle.w	r0, r4, r3
 800f008:	f7f1 fa7c 	bl	8000504 <__aeabi_ui2d>
 800f00c:	2201      	movs	r2, #1
 800f00e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f012:	3e01      	subs	r6, #1
 800f014:	9214      	str	r2, [sp, #80]	@ 0x50
 800f016:	e777      	b.n	800ef08 <_dtoa_r+0x100>
 800f018:	2301      	movs	r3, #1
 800f01a:	e7b8      	b.n	800ef8e <_dtoa_r+0x186>
 800f01c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f01e:	e7b7      	b.n	800ef90 <_dtoa_r+0x188>
 800f020:	427b      	negs	r3, r7
 800f022:	930a      	str	r3, [sp, #40]	@ 0x28
 800f024:	2300      	movs	r3, #0
 800f026:	eba8 0807 	sub.w	r8, r8, r7
 800f02a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f02c:	e7c4      	b.n	800efb8 <_dtoa_r+0x1b0>
 800f02e:	2300      	movs	r3, #0
 800f030:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f034:	2b00      	cmp	r3, #0
 800f036:	dc35      	bgt.n	800f0a4 <_dtoa_r+0x29c>
 800f038:	2301      	movs	r3, #1
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	9307      	str	r3, [sp, #28]
 800f03e:	461a      	mov	r2, r3
 800f040:	920e      	str	r2, [sp, #56]	@ 0x38
 800f042:	e00b      	b.n	800f05c <_dtoa_r+0x254>
 800f044:	2301      	movs	r3, #1
 800f046:	e7f3      	b.n	800f030 <_dtoa_r+0x228>
 800f048:	2300      	movs	r3, #0
 800f04a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f04c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f04e:	18fb      	adds	r3, r7, r3
 800f050:	9300      	str	r3, [sp, #0]
 800f052:	3301      	adds	r3, #1
 800f054:	2b01      	cmp	r3, #1
 800f056:	9307      	str	r3, [sp, #28]
 800f058:	bfb8      	it	lt
 800f05a:	2301      	movlt	r3, #1
 800f05c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f060:	2100      	movs	r1, #0
 800f062:	2204      	movs	r2, #4
 800f064:	f102 0514 	add.w	r5, r2, #20
 800f068:	429d      	cmp	r5, r3
 800f06a:	d91f      	bls.n	800f0ac <_dtoa_r+0x2a4>
 800f06c:	6041      	str	r1, [r0, #4]
 800f06e:	4658      	mov	r0, fp
 800f070:	f000 fd8e 	bl	800fb90 <_Balloc>
 800f074:	4682      	mov	sl, r0
 800f076:	2800      	cmp	r0, #0
 800f078:	d13c      	bne.n	800f0f4 <_dtoa_r+0x2ec>
 800f07a:	4b1b      	ldr	r3, [pc, #108]	@ (800f0e8 <_dtoa_r+0x2e0>)
 800f07c:	4602      	mov	r2, r0
 800f07e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f082:	e6d8      	b.n	800ee36 <_dtoa_r+0x2e>
 800f084:	2301      	movs	r3, #1
 800f086:	e7e0      	b.n	800f04a <_dtoa_r+0x242>
 800f088:	2401      	movs	r4, #1
 800f08a:	2300      	movs	r3, #0
 800f08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f08e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f090:	f04f 33ff 	mov.w	r3, #4294967295
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	9307      	str	r3, [sp, #28]
 800f098:	2200      	movs	r2, #0
 800f09a:	2312      	movs	r3, #18
 800f09c:	e7d0      	b.n	800f040 <_dtoa_r+0x238>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0a2:	e7f5      	b.n	800f090 <_dtoa_r+0x288>
 800f0a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	9307      	str	r3, [sp, #28]
 800f0aa:	e7d7      	b.n	800f05c <_dtoa_r+0x254>
 800f0ac:	3101      	adds	r1, #1
 800f0ae:	0052      	lsls	r2, r2, #1
 800f0b0:	e7d8      	b.n	800f064 <_dtoa_r+0x25c>
 800f0b2:	bf00      	nop
 800f0b4:	f3af 8000 	nop.w
 800f0b8:	636f4361 	.word	0x636f4361
 800f0bc:	3fd287a7 	.word	0x3fd287a7
 800f0c0:	8b60c8b3 	.word	0x8b60c8b3
 800f0c4:	3fc68a28 	.word	0x3fc68a28
 800f0c8:	509f79fb 	.word	0x509f79fb
 800f0cc:	3fd34413 	.word	0x3fd34413
 800f0d0:	0801283a 	.word	0x0801283a
 800f0d4:	08012851 	.word	0x08012851
 800f0d8:	7ff00000 	.word	0x7ff00000
 800f0dc:	0801280a 	.word	0x0801280a
 800f0e0:	3ff80000 	.word	0x3ff80000
 800f0e4:	08012948 	.word	0x08012948
 800f0e8:	080128a9 	.word	0x080128a9
 800f0ec:	08012836 	.word	0x08012836
 800f0f0:	08012809 	.word	0x08012809
 800f0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0f8:	6018      	str	r0, [r3, #0]
 800f0fa:	9b07      	ldr	r3, [sp, #28]
 800f0fc:	2b0e      	cmp	r3, #14
 800f0fe:	f200 80a4 	bhi.w	800f24a <_dtoa_r+0x442>
 800f102:	2c00      	cmp	r4, #0
 800f104:	f000 80a1 	beq.w	800f24a <_dtoa_r+0x442>
 800f108:	2f00      	cmp	r7, #0
 800f10a:	dd33      	ble.n	800f174 <_dtoa_r+0x36c>
 800f10c:	4bad      	ldr	r3, [pc, #692]	@ (800f3c4 <_dtoa_r+0x5bc>)
 800f10e:	f007 020f 	and.w	r2, r7, #15
 800f112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f116:	ed93 7b00 	vldr	d7, [r3]
 800f11a:	05f8      	lsls	r0, r7, #23
 800f11c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f120:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f124:	d516      	bpl.n	800f154 <_dtoa_r+0x34c>
 800f126:	4ba8      	ldr	r3, [pc, #672]	@ (800f3c8 <_dtoa_r+0x5c0>)
 800f128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f12c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f130:	f7f1 fb8c 	bl	800084c <__aeabi_ddiv>
 800f134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f138:	f004 040f 	and.w	r4, r4, #15
 800f13c:	2603      	movs	r6, #3
 800f13e:	4da2      	ldr	r5, [pc, #648]	@ (800f3c8 <_dtoa_r+0x5c0>)
 800f140:	b954      	cbnz	r4, 800f158 <_dtoa_r+0x350>
 800f142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f14a:	f7f1 fb7f 	bl	800084c <__aeabi_ddiv>
 800f14e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f152:	e028      	b.n	800f1a6 <_dtoa_r+0x39e>
 800f154:	2602      	movs	r6, #2
 800f156:	e7f2      	b.n	800f13e <_dtoa_r+0x336>
 800f158:	07e1      	lsls	r1, r4, #31
 800f15a:	d508      	bpl.n	800f16e <_dtoa_r+0x366>
 800f15c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f160:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f164:	f7f1 fa48 	bl	80005f8 <__aeabi_dmul>
 800f168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f16c:	3601      	adds	r6, #1
 800f16e:	1064      	asrs	r4, r4, #1
 800f170:	3508      	adds	r5, #8
 800f172:	e7e5      	b.n	800f140 <_dtoa_r+0x338>
 800f174:	f000 80d2 	beq.w	800f31c <_dtoa_r+0x514>
 800f178:	427c      	negs	r4, r7
 800f17a:	4b92      	ldr	r3, [pc, #584]	@ (800f3c4 <_dtoa_r+0x5bc>)
 800f17c:	4d92      	ldr	r5, [pc, #584]	@ (800f3c8 <_dtoa_r+0x5c0>)
 800f17e:	f004 020f 	and.w	r2, r4, #15
 800f182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f18e:	f7f1 fa33 	bl	80005f8 <__aeabi_dmul>
 800f192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f196:	1124      	asrs	r4, r4, #4
 800f198:	2300      	movs	r3, #0
 800f19a:	2602      	movs	r6, #2
 800f19c:	2c00      	cmp	r4, #0
 800f19e:	f040 80b2 	bne.w	800f306 <_dtoa_r+0x4fe>
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1d3      	bne.n	800f14e <_dtoa_r+0x346>
 800f1a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f000 80b7 	beq.w	800f320 <_dtoa_r+0x518>
 800f1b2:	4b86      	ldr	r3, [pc, #536]	@ (800f3cc <_dtoa_r+0x5c4>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	4629      	mov	r1, r5
 800f1ba:	f7f1 fc8f 	bl	8000adc <__aeabi_dcmplt>
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	f000 80ae 	beq.w	800f320 <_dtoa_r+0x518>
 800f1c4:	9b07      	ldr	r3, [sp, #28]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f000 80aa 	beq.w	800f320 <_dtoa_r+0x518>
 800f1cc:	9b00      	ldr	r3, [sp, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	dd37      	ble.n	800f242 <_dtoa_r+0x43a>
 800f1d2:	1e7b      	subs	r3, r7, #1
 800f1d4:	9304      	str	r3, [sp, #16]
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	4b7d      	ldr	r3, [pc, #500]	@ (800f3d0 <_dtoa_r+0x5c8>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	4629      	mov	r1, r5
 800f1de:	f7f1 fa0b 	bl	80005f8 <__aeabi_dmul>
 800f1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1e6:	9c00      	ldr	r4, [sp, #0]
 800f1e8:	3601      	adds	r6, #1
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7f1 f99a 	bl	8000524 <__aeabi_i2d>
 800f1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1f4:	f7f1 fa00 	bl	80005f8 <__aeabi_dmul>
 800f1f8:	4b76      	ldr	r3, [pc, #472]	@ (800f3d4 <_dtoa_r+0x5cc>)
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f7f1 f846 	bl	800028c <__adddf3>
 800f200:	4605      	mov	r5, r0
 800f202:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f206:	2c00      	cmp	r4, #0
 800f208:	f040 808d 	bne.w	800f326 <_dtoa_r+0x51e>
 800f20c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f210:	4b71      	ldr	r3, [pc, #452]	@ (800f3d8 <_dtoa_r+0x5d0>)
 800f212:	2200      	movs	r2, #0
 800f214:	f7f1 f838 	bl	8000288 <__aeabi_dsub>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f220:	462a      	mov	r2, r5
 800f222:	4633      	mov	r3, r6
 800f224:	f7f1 fc78 	bl	8000b18 <__aeabi_dcmpgt>
 800f228:	2800      	cmp	r0, #0
 800f22a:	f040 828b 	bne.w	800f744 <_dtoa_r+0x93c>
 800f22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f232:	462a      	mov	r2, r5
 800f234:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f238:	f7f1 fc50 	bl	8000adc <__aeabi_dcmplt>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	f040 8128 	bne.w	800f492 <_dtoa_r+0x68a>
 800f242:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f246:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f24a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f2c0 815a 	blt.w	800f506 <_dtoa_r+0x6fe>
 800f252:	2f0e      	cmp	r7, #14
 800f254:	f300 8157 	bgt.w	800f506 <_dtoa_r+0x6fe>
 800f258:	4b5a      	ldr	r3, [pc, #360]	@ (800f3c4 <_dtoa_r+0x5bc>)
 800f25a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f25e:	ed93 7b00 	vldr	d7, [r3]
 800f262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f264:	2b00      	cmp	r3, #0
 800f266:	ed8d 7b00 	vstr	d7, [sp]
 800f26a:	da03      	bge.n	800f274 <_dtoa_r+0x46c>
 800f26c:	9b07      	ldr	r3, [sp, #28]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	f340 8101 	ble.w	800f476 <_dtoa_r+0x66e>
 800f274:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f278:	4656      	mov	r6, sl
 800f27a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f27e:	4620      	mov	r0, r4
 800f280:	4629      	mov	r1, r5
 800f282:	f7f1 fae3 	bl	800084c <__aeabi_ddiv>
 800f286:	f7f1 fc67 	bl	8000b58 <__aeabi_d2iz>
 800f28a:	4680      	mov	r8, r0
 800f28c:	f7f1 f94a 	bl	8000524 <__aeabi_i2d>
 800f290:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f294:	f7f1 f9b0 	bl	80005f8 <__aeabi_dmul>
 800f298:	4602      	mov	r2, r0
 800f29a:	460b      	mov	r3, r1
 800f29c:	4620      	mov	r0, r4
 800f29e:	4629      	mov	r1, r5
 800f2a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f2a4:	f7f0 fff0 	bl	8000288 <__aeabi_dsub>
 800f2a8:	f806 4b01 	strb.w	r4, [r6], #1
 800f2ac:	9d07      	ldr	r5, [sp, #28]
 800f2ae:	eba6 040a 	sub.w	r4, r6, sl
 800f2b2:	42a5      	cmp	r5, r4
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	f040 8117 	bne.w	800f4ea <_dtoa_r+0x6e2>
 800f2bc:	f7f0 ffe6 	bl	800028c <__adddf3>
 800f2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	460d      	mov	r5, r1
 800f2c8:	f7f1 fc26 	bl	8000b18 <__aeabi_dcmpgt>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	f040 80f9 	bne.w	800f4c4 <_dtoa_r+0x6bc>
 800f2d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	4629      	mov	r1, r5
 800f2da:	f7f1 fbf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2de:	b118      	cbz	r0, 800f2e8 <_dtoa_r+0x4e0>
 800f2e0:	f018 0f01 	tst.w	r8, #1
 800f2e4:	f040 80ee 	bne.w	800f4c4 <_dtoa_r+0x6bc>
 800f2e8:	4649      	mov	r1, r9
 800f2ea:	4658      	mov	r0, fp
 800f2ec:	f000 fc90 	bl	800fc10 <_Bfree>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	7033      	strb	r3, [r6, #0]
 800f2f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2f6:	3701      	adds	r7, #1
 800f2f8:	601f      	str	r7, [r3, #0]
 800f2fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f000 831d 	beq.w	800f93c <_dtoa_r+0xb34>
 800f302:	601e      	str	r6, [r3, #0]
 800f304:	e31a      	b.n	800f93c <_dtoa_r+0xb34>
 800f306:	07e2      	lsls	r2, r4, #31
 800f308:	d505      	bpl.n	800f316 <_dtoa_r+0x50e>
 800f30a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f30e:	f7f1 f973 	bl	80005f8 <__aeabi_dmul>
 800f312:	3601      	adds	r6, #1
 800f314:	2301      	movs	r3, #1
 800f316:	1064      	asrs	r4, r4, #1
 800f318:	3508      	adds	r5, #8
 800f31a:	e73f      	b.n	800f19c <_dtoa_r+0x394>
 800f31c:	2602      	movs	r6, #2
 800f31e:	e742      	b.n	800f1a6 <_dtoa_r+0x39e>
 800f320:	9c07      	ldr	r4, [sp, #28]
 800f322:	9704      	str	r7, [sp, #16]
 800f324:	e761      	b.n	800f1ea <_dtoa_r+0x3e2>
 800f326:	4b27      	ldr	r3, [pc, #156]	@ (800f3c4 <_dtoa_r+0x5bc>)
 800f328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f32a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f32e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f332:	4454      	add	r4, sl
 800f334:	2900      	cmp	r1, #0
 800f336:	d053      	beq.n	800f3e0 <_dtoa_r+0x5d8>
 800f338:	4928      	ldr	r1, [pc, #160]	@ (800f3dc <_dtoa_r+0x5d4>)
 800f33a:	2000      	movs	r0, #0
 800f33c:	f7f1 fa86 	bl	800084c <__aeabi_ddiv>
 800f340:	4633      	mov	r3, r6
 800f342:	462a      	mov	r2, r5
 800f344:	f7f0 ffa0 	bl	8000288 <__aeabi_dsub>
 800f348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f34c:	4656      	mov	r6, sl
 800f34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f352:	f7f1 fc01 	bl	8000b58 <__aeabi_d2iz>
 800f356:	4605      	mov	r5, r0
 800f358:	f7f1 f8e4 	bl	8000524 <__aeabi_i2d>
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f364:	f7f0 ff90 	bl	8000288 <__aeabi_dsub>
 800f368:	3530      	adds	r5, #48	@ 0x30
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f372:	f806 5b01 	strb.w	r5, [r6], #1
 800f376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f37a:	f7f1 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d171      	bne.n	800f466 <_dtoa_r+0x65e>
 800f382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f386:	4911      	ldr	r1, [pc, #68]	@ (800f3cc <_dtoa_r+0x5c4>)
 800f388:	2000      	movs	r0, #0
 800f38a:	f7f0 ff7d 	bl	8000288 <__aeabi_dsub>
 800f38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f392:	f7f1 fba3 	bl	8000adc <__aeabi_dcmplt>
 800f396:	2800      	cmp	r0, #0
 800f398:	f040 8095 	bne.w	800f4c6 <_dtoa_r+0x6be>
 800f39c:	42a6      	cmp	r6, r4
 800f39e:	f43f af50 	beq.w	800f242 <_dtoa_r+0x43a>
 800f3a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d0 <_dtoa_r+0x5c8>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f7f1 f925 	bl	80005f8 <__aeabi_dmul>
 800f3ae:	4b08      	ldr	r3, [pc, #32]	@ (800f3d0 <_dtoa_r+0x5c8>)
 800f3b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3ba:	f7f1 f91d 	bl	80005f8 <__aeabi_dmul>
 800f3be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3c2:	e7c4      	b.n	800f34e <_dtoa_r+0x546>
 800f3c4:	08012948 	.word	0x08012948
 800f3c8:	08012920 	.word	0x08012920
 800f3cc:	3ff00000 	.word	0x3ff00000
 800f3d0:	40240000 	.word	0x40240000
 800f3d4:	401c0000 	.word	0x401c0000
 800f3d8:	40140000 	.word	0x40140000
 800f3dc:	3fe00000 	.word	0x3fe00000
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	f7f1 f908 	bl	80005f8 <__aeabi_dmul>
 800f3e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800f3ee:	4656      	mov	r6, sl
 800f3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3f4:	f7f1 fbb0 	bl	8000b58 <__aeabi_d2iz>
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	f7f1 f893 	bl	8000524 <__aeabi_i2d>
 800f3fe:	4602      	mov	r2, r0
 800f400:	460b      	mov	r3, r1
 800f402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f406:	f7f0 ff3f 	bl	8000288 <__aeabi_dsub>
 800f40a:	3530      	adds	r5, #48	@ 0x30
 800f40c:	f806 5b01 	strb.w	r5, [r6], #1
 800f410:	4602      	mov	r2, r0
 800f412:	460b      	mov	r3, r1
 800f414:	42a6      	cmp	r6, r4
 800f416:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f41a:	f04f 0200 	mov.w	r2, #0
 800f41e:	d124      	bne.n	800f46a <_dtoa_r+0x662>
 800f420:	4bac      	ldr	r3, [pc, #688]	@ (800f6d4 <_dtoa_r+0x8cc>)
 800f422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f426:	f7f0 ff31 	bl	800028c <__adddf3>
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f432:	f7f1 fb71 	bl	8000b18 <__aeabi_dcmpgt>
 800f436:	2800      	cmp	r0, #0
 800f438:	d145      	bne.n	800f4c6 <_dtoa_r+0x6be>
 800f43a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f43e:	49a5      	ldr	r1, [pc, #660]	@ (800f6d4 <_dtoa_r+0x8cc>)
 800f440:	2000      	movs	r0, #0
 800f442:	f7f0 ff21 	bl	8000288 <__aeabi_dsub>
 800f446:	4602      	mov	r2, r0
 800f448:	460b      	mov	r3, r1
 800f44a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f44e:	f7f1 fb45 	bl	8000adc <__aeabi_dcmplt>
 800f452:	2800      	cmp	r0, #0
 800f454:	f43f aef5 	beq.w	800f242 <_dtoa_r+0x43a>
 800f458:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f45a:	1e73      	subs	r3, r6, #1
 800f45c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f45e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f462:	2b30      	cmp	r3, #48	@ 0x30
 800f464:	d0f8      	beq.n	800f458 <_dtoa_r+0x650>
 800f466:	9f04      	ldr	r7, [sp, #16]
 800f468:	e73e      	b.n	800f2e8 <_dtoa_r+0x4e0>
 800f46a:	4b9b      	ldr	r3, [pc, #620]	@ (800f6d8 <_dtoa_r+0x8d0>)
 800f46c:	f7f1 f8c4 	bl	80005f8 <__aeabi_dmul>
 800f470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f474:	e7bc      	b.n	800f3f0 <_dtoa_r+0x5e8>
 800f476:	d10c      	bne.n	800f492 <_dtoa_r+0x68a>
 800f478:	4b98      	ldr	r3, [pc, #608]	@ (800f6dc <_dtoa_r+0x8d4>)
 800f47a:	2200      	movs	r2, #0
 800f47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f480:	f7f1 f8ba 	bl	80005f8 <__aeabi_dmul>
 800f484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f488:	f7f1 fb3c 	bl	8000b04 <__aeabi_dcmpge>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	f000 8157 	beq.w	800f740 <_dtoa_r+0x938>
 800f492:	2400      	movs	r4, #0
 800f494:	4625      	mov	r5, r4
 800f496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f498:	43db      	mvns	r3, r3
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	4656      	mov	r6, sl
 800f49e:	2700      	movs	r7, #0
 800f4a0:	4621      	mov	r1, r4
 800f4a2:	4658      	mov	r0, fp
 800f4a4:	f000 fbb4 	bl	800fc10 <_Bfree>
 800f4a8:	2d00      	cmp	r5, #0
 800f4aa:	d0dc      	beq.n	800f466 <_dtoa_r+0x65e>
 800f4ac:	b12f      	cbz	r7, 800f4ba <_dtoa_r+0x6b2>
 800f4ae:	42af      	cmp	r7, r5
 800f4b0:	d003      	beq.n	800f4ba <_dtoa_r+0x6b2>
 800f4b2:	4639      	mov	r1, r7
 800f4b4:	4658      	mov	r0, fp
 800f4b6:	f000 fbab 	bl	800fc10 <_Bfree>
 800f4ba:	4629      	mov	r1, r5
 800f4bc:	4658      	mov	r0, fp
 800f4be:	f000 fba7 	bl	800fc10 <_Bfree>
 800f4c2:	e7d0      	b.n	800f466 <_dtoa_r+0x65e>
 800f4c4:	9704      	str	r7, [sp, #16]
 800f4c6:	4633      	mov	r3, r6
 800f4c8:	461e      	mov	r6, r3
 800f4ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4ce:	2a39      	cmp	r2, #57	@ 0x39
 800f4d0:	d107      	bne.n	800f4e2 <_dtoa_r+0x6da>
 800f4d2:	459a      	cmp	sl, r3
 800f4d4:	d1f8      	bne.n	800f4c8 <_dtoa_r+0x6c0>
 800f4d6:	9a04      	ldr	r2, [sp, #16]
 800f4d8:	3201      	adds	r2, #1
 800f4da:	9204      	str	r2, [sp, #16]
 800f4dc:	2230      	movs	r2, #48	@ 0x30
 800f4de:	f88a 2000 	strb.w	r2, [sl]
 800f4e2:	781a      	ldrb	r2, [r3, #0]
 800f4e4:	3201      	adds	r2, #1
 800f4e6:	701a      	strb	r2, [r3, #0]
 800f4e8:	e7bd      	b.n	800f466 <_dtoa_r+0x65e>
 800f4ea:	4b7b      	ldr	r3, [pc, #492]	@ (800f6d8 <_dtoa_r+0x8d0>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f7f1 f883 	bl	80005f8 <__aeabi_dmul>
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	460d      	mov	r5, r1
 800f4fa:	f7f1 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4fe:	2800      	cmp	r0, #0
 800f500:	f43f aebb 	beq.w	800f27a <_dtoa_r+0x472>
 800f504:	e6f0      	b.n	800f2e8 <_dtoa_r+0x4e0>
 800f506:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f508:	2a00      	cmp	r2, #0
 800f50a:	f000 80db 	beq.w	800f6c4 <_dtoa_r+0x8bc>
 800f50e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f510:	2a01      	cmp	r2, #1
 800f512:	f300 80bf 	bgt.w	800f694 <_dtoa_r+0x88c>
 800f516:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f518:	2a00      	cmp	r2, #0
 800f51a:	f000 80b7 	beq.w	800f68c <_dtoa_r+0x884>
 800f51e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f522:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f524:	4646      	mov	r6, r8
 800f526:	9a08      	ldr	r2, [sp, #32]
 800f528:	2101      	movs	r1, #1
 800f52a:	441a      	add	r2, r3
 800f52c:	4658      	mov	r0, fp
 800f52e:	4498      	add	r8, r3
 800f530:	9208      	str	r2, [sp, #32]
 800f532:	f000 fc21 	bl	800fd78 <__i2b>
 800f536:	4605      	mov	r5, r0
 800f538:	b15e      	cbz	r6, 800f552 <_dtoa_r+0x74a>
 800f53a:	9b08      	ldr	r3, [sp, #32]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	dd08      	ble.n	800f552 <_dtoa_r+0x74a>
 800f540:	42b3      	cmp	r3, r6
 800f542:	9a08      	ldr	r2, [sp, #32]
 800f544:	bfa8      	it	ge
 800f546:	4633      	movge	r3, r6
 800f548:	eba8 0803 	sub.w	r8, r8, r3
 800f54c:	1af6      	subs	r6, r6, r3
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	9308      	str	r3, [sp, #32]
 800f552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f554:	b1f3      	cbz	r3, 800f594 <_dtoa_r+0x78c>
 800f556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f000 80b7 	beq.w	800f6cc <_dtoa_r+0x8c4>
 800f55e:	b18c      	cbz	r4, 800f584 <_dtoa_r+0x77c>
 800f560:	4629      	mov	r1, r5
 800f562:	4622      	mov	r2, r4
 800f564:	4658      	mov	r0, fp
 800f566:	f000 fcc7 	bl	800fef8 <__pow5mult>
 800f56a:	464a      	mov	r2, r9
 800f56c:	4601      	mov	r1, r0
 800f56e:	4605      	mov	r5, r0
 800f570:	4658      	mov	r0, fp
 800f572:	f000 fc17 	bl	800fda4 <__multiply>
 800f576:	4649      	mov	r1, r9
 800f578:	9004      	str	r0, [sp, #16]
 800f57a:	4658      	mov	r0, fp
 800f57c:	f000 fb48 	bl	800fc10 <_Bfree>
 800f580:	9b04      	ldr	r3, [sp, #16]
 800f582:	4699      	mov	r9, r3
 800f584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f586:	1b1a      	subs	r2, r3, r4
 800f588:	d004      	beq.n	800f594 <_dtoa_r+0x78c>
 800f58a:	4649      	mov	r1, r9
 800f58c:	4658      	mov	r0, fp
 800f58e:	f000 fcb3 	bl	800fef8 <__pow5mult>
 800f592:	4681      	mov	r9, r0
 800f594:	2101      	movs	r1, #1
 800f596:	4658      	mov	r0, fp
 800f598:	f000 fbee 	bl	800fd78 <__i2b>
 800f59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f59e:	4604      	mov	r4, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	f000 81cf 	beq.w	800f944 <_dtoa_r+0xb3c>
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	4601      	mov	r1, r0
 800f5aa:	4658      	mov	r0, fp
 800f5ac:	f000 fca4 	bl	800fef8 <__pow5mult>
 800f5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	f300 8095 	bgt.w	800f6e4 <_dtoa_r+0x8dc>
 800f5ba:	9b02      	ldr	r3, [sp, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f040 8087 	bne.w	800f6d0 <_dtoa_r+0x8c8>
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f040 8089 	bne.w	800f6e0 <_dtoa_r+0x8d8>
 800f5ce:	9b03      	ldr	r3, [sp, #12]
 800f5d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f5d4:	0d1b      	lsrs	r3, r3, #20
 800f5d6:	051b      	lsls	r3, r3, #20
 800f5d8:	b12b      	cbz	r3, 800f5e6 <_dtoa_r+0x7de>
 800f5da:	9b08      	ldr	r3, [sp, #32]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	9308      	str	r3, [sp, #32]
 800f5e0:	f108 0801 	add.w	r8, r8, #1
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f000 81b0 	beq.w	800f950 <_dtoa_r+0xb48>
 800f5f0:	6923      	ldr	r3, [r4, #16]
 800f5f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f5f6:	6918      	ldr	r0, [r3, #16]
 800f5f8:	f000 fb72 	bl	800fce0 <__hi0bits>
 800f5fc:	f1c0 0020 	rsb	r0, r0, #32
 800f600:	9b08      	ldr	r3, [sp, #32]
 800f602:	4418      	add	r0, r3
 800f604:	f010 001f 	ands.w	r0, r0, #31
 800f608:	d077      	beq.n	800f6fa <_dtoa_r+0x8f2>
 800f60a:	f1c0 0320 	rsb	r3, r0, #32
 800f60e:	2b04      	cmp	r3, #4
 800f610:	dd6b      	ble.n	800f6ea <_dtoa_r+0x8e2>
 800f612:	9b08      	ldr	r3, [sp, #32]
 800f614:	f1c0 001c 	rsb	r0, r0, #28
 800f618:	4403      	add	r3, r0
 800f61a:	4480      	add	r8, r0
 800f61c:	4406      	add	r6, r0
 800f61e:	9308      	str	r3, [sp, #32]
 800f620:	f1b8 0f00 	cmp.w	r8, #0
 800f624:	dd05      	ble.n	800f632 <_dtoa_r+0x82a>
 800f626:	4649      	mov	r1, r9
 800f628:	4642      	mov	r2, r8
 800f62a:	4658      	mov	r0, fp
 800f62c:	f000 fcbe 	bl	800ffac <__lshift>
 800f630:	4681      	mov	r9, r0
 800f632:	9b08      	ldr	r3, [sp, #32]
 800f634:	2b00      	cmp	r3, #0
 800f636:	dd05      	ble.n	800f644 <_dtoa_r+0x83c>
 800f638:	4621      	mov	r1, r4
 800f63a:	461a      	mov	r2, r3
 800f63c:	4658      	mov	r0, fp
 800f63e:	f000 fcb5 	bl	800ffac <__lshift>
 800f642:	4604      	mov	r4, r0
 800f644:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f646:	2b00      	cmp	r3, #0
 800f648:	d059      	beq.n	800f6fe <_dtoa_r+0x8f6>
 800f64a:	4621      	mov	r1, r4
 800f64c:	4648      	mov	r0, r9
 800f64e:	f000 fd19 	bl	8010084 <__mcmp>
 800f652:	2800      	cmp	r0, #0
 800f654:	da53      	bge.n	800f6fe <_dtoa_r+0x8f6>
 800f656:	1e7b      	subs	r3, r7, #1
 800f658:	9304      	str	r3, [sp, #16]
 800f65a:	4649      	mov	r1, r9
 800f65c:	2300      	movs	r3, #0
 800f65e:	220a      	movs	r2, #10
 800f660:	4658      	mov	r0, fp
 800f662:	f000 faf7 	bl	800fc54 <__multadd>
 800f666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f668:	4681      	mov	r9, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f000 8172 	beq.w	800f954 <_dtoa_r+0xb4c>
 800f670:	2300      	movs	r3, #0
 800f672:	4629      	mov	r1, r5
 800f674:	220a      	movs	r2, #10
 800f676:	4658      	mov	r0, fp
 800f678:	f000 faec 	bl	800fc54 <__multadd>
 800f67c:	9b00      	ldr	r3, [sp, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	4605      	mov	r5, r0
 800f682:	dc67      	bgt.n	800f754 <_dtoa_r+0x94c>
 800f684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f686:	2b02      	cmp	r3, #2
 800f688:	dc41      	bgt.n	800f70e <_dtoa_r+0x906>
 800f68a:	e063      	b.n	800f754 <_dtoa_r+0x94c>
 800f68c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f68e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f692:	e746      	b.n	800f522 <_dtoa_r+0x71a>
 800f694:	9b07      	ldr	r3, [sp, #28]
 800f696:	1e5c      	subs	r4, r3, #1
 800f698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f69a:	42a3      	cmp	r3, r4
 800f69c:	bfbf      	itttt	lt
 800f69e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f6a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f6a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f6a4:	1ae3      	sublt	r3, r4, r3
 800f6a6:	bfb4      	ite	lt
 800f6a8:	18d2      	addlt	r2, r2, r3
 800f6aa:	1b1c      	subge	r4, r3, r4
 800f6ac:	9b07      	ldr	r3, [sp, #28]
 800f6ae:	bfbc      	itt	lt
 800f6b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f6b2:	2400      	movlt	r4, #0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	bfb5      	itete	lt
 800f6b8:	eba8 0603 	sublt.w	r6, r8, r3
 800f6bc:	9b07      	ldrge	r3, [sp, #28]
 800f6be:	2300      	movlt	r3, #0
 800f6c0:	4646      	movge	r6, r8
 800f6c2:	e730      	b.n	800f526 <_dtoa_r+0x71e>
 800f6c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f6c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f6c8:	4646      	mov	r6, r8
 800f6ca:	e735      	b.n	800f538 <_dtoa_r+0x730>
 800f6cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6ce:	e75c      	b.n	800f58a <_dtoa_r+0x782>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	e788      	b.n	800f5e6 <_dtoa_r+0x7de>
 800f6d4:	3fe00000 	.word	0x3fe00000
 800f6d8:	40240000 	.word	0x40240000
 800f6dc:	40140000 	.word	0x40140000
 800f6e0:	9b02      	ldr	r3, [sp, #8]
 800f6e2:	e780      	b.n	800f5e6 <_dtoa_r+0x7de>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6e8:	e782      	b.n	800f5f0 <_dtoa_r+0x7e8>
 800f6ea:	d099      	beq.n	800f620 <_dtoa_r+0x818>
 800f6ec:	9a08      	ldr	r2, [sp, #32]
 800f6ee:	331c      	adds	r3, #28
 800f6f0:	441a      	add	r2, r3
 800f6f2:	4498      	add	r8, r3
 800f6f4:	441e      	add	r6, r3
 800f6f6:	9208      	str	r2, [sp, #32]
 800f6f8:	e792      	b.n	800f620 <_dtoa_r+0x818>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	e7f6      	b.n	800f6ec <_dtoa_r+0x8e4>
 800f6fe:	9b07      	ldr	r3, [sp, #28]
 800f700:	9704      	str	r7, [sp, #16]
 800f702:	2b00      	cmp	r3, #0
 800f704:	dc20      	bgt.n	800f748 <_dtoa_r+0x940>
 800f706:	9300      	str	r3, [sp, #0]
 800f708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	dd1e      	ble.n	800f74c <_dtoa_r+0x944>
 800f70e:	9b00      	ldr	r3, [sp, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	f47f aec0 	bne.w	800f496 <_dtoa_r+0x68e>
 800f716:	4621      	mov	r1, r4
 800f718:	2205      	movs	r2, #5
 800f71a:	4658      	mov	r0, fp
 800f71c:	f000 fa9a 	bl	800fc54 <__multadd>
 800f720:	4601      	mov	r1, r0
 800f722:	4604      	mov	r4, r0
 800f724:	4648      	mov	r0, r9
 800f726:	f000 fcad 	bl	8010084 <__mcmp>
 800f72a:	2800      	cmp	r0, #0
 800f72c:	f77f aeb3 	ble.w	800f496 <_dtoa_r+0x68e>
 800f730:	4656      	mov	r6, sl
 800f732:	2331      	movs	r3, #49	@ 0x31
 800f734:	f806 3b01 	strb.w	r3, [r6], #1
 800f738:	9b04      	ldr	r3, [sp, #16]
 800f73a:	3301      	adds	r3, #1
 800f73c:	9304      	str	r3, [sp, #16]
 800f73e:	e6ae      	b.n	800f49e <_dtoa_r+0x696>
 800f740:	9c07      	ldr	r4, [sp, #28]
 800f742:	9704      	str	r7, [sp, #16]
 800f744:	4625      	mov	r5, r4
 800f746:	e7f3      	b.n	800f730 <_dtoa_r+0x928>
 800f748:	9b07      	ldr	r3, [sp, #28]
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f000 8104 	beq.w	800f95c <_dtoa_r+0xb54>
 800f754:	2e00      	cmp	r6, #0
 800f756:	dd05      	ble.n	800f764 <_dtoa_r+0x95c>
 800f758:	4629      	mov	r1, r5
 800f75a:	4632      	mov	r2, r6
 800f75c:	4658      	mov	r0, fp
 800f75e:	f000 fc25 	bl	800ffac <__lshift>
 800f762:	4605      	mov	r5, r0
 800f764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f766:	2b00      	cmp	r3, #0
 800f768:	d05a      	beq.n	800f820 <_dtoa_r+0xa18>
 800f76a:	6869      	ldr	r1, [r5, #4]
 800f76c:	4658      	mov	r0, fp
 800f76e:	f000 fa0f 	bl	800fb90 <_Balloc>
 800f772:	4606      	mov	r6, r0
 800f774:	b928      	cbnz	r0, 800f782 <_dtoa_r+0x97a>
 800f776:	4b84      	ldr	r3, [pc, #528]	@ (800f988 <_dtoa_r+0xb80>)
 800f778:	4602      	mov	r2, r0
 800f77a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f77e:	f7ff bb5a 	b.w	800ee36 <_dtoa_r+0x2e>
 800f782:	692a      	ldr	r2, [r5, #16]
 800f784:	3202      	adds	r2, #2
 800f786:	0092      	lsls	r2, r2, #2
 800f788:	f105 010c 	add.w	r1, r5, #12
 800f78c:	300c      	adds	r0, #12
 800f78e:	f7ff fa92 	bl	800ecb6 <memcpy>
 800f792:	2201      	movs	r2, #1
 800f794:	4631      	mov	r1, r6
 800f796:	4658      	mov	r0, fp
 800f798:	f000 fc08 	bl	800ffac <__lshift>
 800f79c:	f10a 0301 	add.w	r3, sl, #1
 800f7a0:	9307      	str	r3, [sp, #28]
 800f7a2:	9b00      	ldr	r3, [sp, #0]
 800f7a4:	4453      	add	r3, sl
 800f7a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7a8:	9b02      	ldr	r3, [sp, #8]
 800f7aa:	f003 0301 	and.w	r3, r3, #1
 800f7ae:	462f      	mov	r7, r5
 800f7b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7b2:	4605      	mov	r5, r0
 800f7b4:	9b07      	ldr	r3, [sp, #28]
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	4648      	mov	r0, r9
 800f7bc:	9300      	str	r3, [sp, #0]
 800f7be:	f7ff fa99 	bl	800ecf4 <quorem>
 800f7c2:	4639      	mov	r1, r7
 800f7c4:	9002      	str	r0, [sp, #8]
 800f7c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f7ca:	4648      	mov	r0, r9
 800f7cc:	f000 fc5a 	bl	8010084 <__mcmp>
 800f7d0:	462a      	mov	r2, r5
 800f7d2:	9008      	str	r0, [sp, #32]
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	4658      	mov	r0, fp
 800f7d8:	f000 fc70 	bl	80100bc <__mdiff>
 800f7dc:	68c2      	ldr	r2, [r0, #12]
 800f7de:	4606      	mov	r6, r0
 800f7e0:	bb02      	cbnz	r2, 800f824 <_dtoa_r+0xa1c>
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	4648      	mov	r0, r9
 800f7e6:	f000 fc4d 	bl	8010084 <__mcmp>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4658      	mov	r0, fp
 800f7f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7f2:	f000 fa0d 	bl	800fc10 <_Bfree>
 800f7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7fa:	9e07      	ldr	r6, [sp, #28]
 800f7fc:	ea43 0102 	orr.w	r1, r3, r2
 800f800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f802:	4319      	orrs	r1, r3
 800f804:	d110      	bne.n	800f828 <_dtoa_r+0xa20>
 800f806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f80a:	d029      	beq.n	800f860 <_dtoa_r+0xa58>
 800f80c:	9b08      	ldr	r3, [sp, #32]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	dd02      	ble.n	800f818 <_dtoa_r+0xa10>
 800f812:	9b02      	ldr	r3, [sp, #8]
 800f814:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f818:	9b00      	ldr	r3, [sp, #0]
 800f81a:	f883 8000 	strb.w	r8, [r3]
 800f81e:	e63f      	b.n	800f4a0 <_dtoa_r+0x698>
 800f820:	4628      	mov	r0, r5
 800f822:	e7bb      	b.n	800f79c <_dtoa_r+0x994>
 800f824:	2201      	movs	r2, #1
 800f826:	e7e1      	b.n	800f7ec <_dtoa_r+0x9e4>
 800f828:	9b08      	ldr	r3, [sp, #32]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	db04      	blt.n	800f838 <_dtoa_r+0xa30>
 800f82e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f830:	430b      	orrs	r3, r1
 800f832:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f834:	430b      	orrs	r3, r1
 800f836:	d120      	bne.n	800f87a <_dtoa_r+0xa72>
 800f838:	2a00      	cmp	r2, #0
 800f83a:	dded      	ble.n	800f818 <_dtoa_r+0xa10>
 800f83c:	4649      	mov	r1, r9
 800f83e:	2201      	movs	r2, #1
 800f840:	4658      	mov	r0, fp
 800f842:	f000 fbb3 	bl	800ffac <__lshift>
 800f846:	4621      	mov	r1, r4
 800f848:	4681      	mov	r9, r0
 800f84a:	f000 fc1b 	bl	8010084 <__mcmp>
 800f84e:	2800      	cmp	r0, #0
 800f850:	dc03      	bgt.n	800f85a <_dtoa_r+0xa52>
 800f852:	d1e1      	bne.n	800f818 <_dtoa_r+0xa10>
 800f854:	f018 0f01 	tst.w	r8, #1
 800f858:	d0de      	beq.n	800f818 <_dtoa_r+0xa10>
 800f85a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f85e:	d1d8      	bne.n	800f812 <_dtoa_r+0xa0a>
 800f860:	9a00      	ldr	r2, [sp, #0]
 800f862:	2339      	movs	r3, #57	@ 0x39
 800f864:	7013      	strb	r3, [r2, #0]
 800f866:	4633      	mov	r3, r6
 800f868:	461e      	mov	r6, r3
 800f86a:	3b01      	subs	r3, #1
 800f86c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f870:	2a39      	cmp	r2, #57	@ 0x39
 800f872:	d052      	beq.n	800f91a <_dtoa_r+0xb12>
 800f874:	3201      	adds	r2, #1
 800f876:	701a      	strb	r2, [r3, #0]
 800f878:	e612      	b.n	800f4a0 <_dtoa_r+0x698>
 800f87a:	2a00      	cmp	r2, #0
 800f87c:	dd07      	ble.n	800f88e <_dtoa_r+0xa86>
 800f87e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f882:	d0ed      	beq.n	800f860 <_dtoa_r+0xa58>
 800f884:	9a00      	ldr	r2, [sp, #0]
 800f886:	f108 0301 	add.w	r3, r8, #1
 800f88a:	7013      	strb	r3, [r2, #0]
 800f88c:	e608      	b.n	800f4a0 <_dtoa_r+0x698>
 800f88e:	9b07      	ldr	r3, [sp, #28]
 800f890:	9a07      	ldr	r2, [sp, #28]
 800f892:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f898:	4293      	cmp	r3, r2
 800f89a:	d028      	beq.n	800f8ee <_dtoa_r+0xae6>
 800f89c:	4649      	mov	r1, r9
 800f89e:	2300      	movs	r3, #0
 800f8a0:	220a      	movs	r2, #10
 800f8a2:	4658      	mov	r0, fp
 800f8a4:	f000 f9d6 	bl	800fc54 <__multadd>
 800f8a8:	42af      	cmp	r7, r5
 800f8aa:	4681      	mov	r9, r0
 800f8ac:	f04f 0300 	mov.w	r3, #0
 800f8b0:	f04f 020a 	mov.w	r2, #10
 800f8b4:	4639      	mov	r1, r7
 800f8b6:	4658      	mov	r0, fp
 800f8b8:	d107      	bne.n	800f8ca <_dtoa_r+0xac2>
 800f8ba:	f000 f9cb 	bl	800fc54 <__multadd>
 800f8be:	4607      	mov	r7, r0
 800f8c0:	4605      	mov	r5, r0
 800f8c2:	9b07      	ldr	r3, [sp, #28]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	9307      	str	r3, [sp, #28]
 800f8c8:	e774      	b.n	800f7b4 <_dtoa_r+0x9ac>
 800f8ca:	f000 f9c3 	bl	800fc54 <__multadd>
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	4607      	mov	r7, r0
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	220a      	movs	r2, #10
 800f8d6:	4658      	mov	r0, fp
 800f8d8:	f000 f9bc 	bl	800fc54 <__multadd>
 800f8dc:	4605      	mov	r5, r0
 800f8de:	e7f0      	b.n	800f8c2 <_dtoa_r+0xaba>
 800f8e0:	9b00      	ldr	r3, [sp, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	bfcc      	ite	gt
 800f8e6:	461e      	movgt	r6, r3
 800f8e8:	2601      	movle	r6, #1
 800f8ea:	4456      	add	r6, sl
 800f8ec:	2700      	movs	r7, #0
 800f8ee:	4649      	mov	r1, r9
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	4658      	mov	r0, fp
 800f8f4:	f000 fb5a 	bl	800ffac <__lshift>
 800f8f8:	4621      	mov	r1, r4
 800f8fa:	4681      	mov	r9, r0
 800f8fc:	f000 fbc2 	bl	8010084 <__mcmp>
 800f900:	2800      	cmp	r0, #0
 800f902:	dcb0      	bgt.n	800f866 <_dtoa_r+0xa5e>
 800f904:	d102      	bne.n	800f90c <_dtoa_r+0xb04>
 800f906:	f018 0f01 	tst.w	r8, #1
 800f90a:	d1ac      	bne.n	800f866 <_dtoa_r+0xa5e>
 800f90c:	4633      	mov	r3, r6
 800f90e:	461e      	mov	r6, r3
 800f910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f914:	2a30      	cmp	r2, #48	@ 0x30
 800f916:	d0fa      	beq.n	800f90e <_dtoa_r+0xb06>
 800f918:	e5c2      	b.n	800f4a0 <_dtoa_r+0x698>
 800f91a:	459a      	cmp	sl, r3
 800f91c:	d1a4      	bne.n	800f868 <_dtoa_r+0xa60>
 800f91e:	9b04      	ldr	r3, [sp, #16]
 800f920:	3301      	adds	r3, #1
 800f922:	9304      	str	r3, [sp, #16]
 800f924:	2331      	movs	r3, #49	@ 0x31
 800f926:	f88a 3000 	strb.w	r3, [sl]
 800f92a:	e5b9      	b.n	800f4a0 <_dtoa_r+0x698>
 800f92c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f92e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f98c <_dtoa_r+0xb84>
 800f932:	b11b      	cbz	r3, 800f93c <_dtoa_r+0xb34>
 800f934:	f10a 0308 	add.w	r3, sl, #8
 800f938:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f93a:	6013      	str	r3, [r2, #0]
 800f93c:	4650      	mov	r0, sl
 800f93e:	b019      	add	sp, #100	@ 0x64
 800f940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f946:	2b01      	cmp	r3, #1
 800f948:	f77f ae37 	ble.w	800f5ba <_dtoa_r+0x7b2>
 800f94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f94e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f950:	2001      	movs	r0, #1
 800f952:	e655      	b.n	800f600 <_dtoa_r+0x7f8>
 800f954:	9b00      	ldr	r3, [sp, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	f77f aed6 	ble.w	800f708 <_dtoa_r+0x900>
 800f95c:	4656      	mov	r6, sl
 800f95e:	4621      	mov	r1, r4
 800f960:	4648      	mov	r0, r9
 800f962:	f7ff f9c7 	bl	800ecf4 <quorem>
 800f966:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f96a:	f806 8b01 	strb.w	r8, [r6], #1
 800f96e:	9b00      	ldr	r3, [sp, #0]
 800f970:	eba6 020a 	sub.w	r2, r6, sl
 800f974:	4293      	cmp	r3, r2
 800f976:	ddb3      	ble.n	800f8e0 <_dtoa_r+0xad8>
 800f978:	4649      	mov	r1, r9
 800f97a:	2300      	movs	r3, #0
 800f97c:	220a      	movs	r2, #10
 800f97e:	4658      	mov	r0, fp
 800f980:	f000 f968 	bl	800fc54 <__multadd>
 800f984:	4681      	mov	r9, r0
 800f986:	e7ea      	b.n	800f95e <_dtoa_r+0xb56>
 800f988:	080128a9 	.word	0x080128a9
 800f98c:	0801282d 	.word	0x0801282d

0800f990 <_free_r>:
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	4605      	mov	r5, r0
 800f994:	2900      	cmp	r1, #0
 800f996:	d041      	beq.n	800fa1c <_free_r+0x8c>
 800f998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f99c:	1f0c      	subs	r4, r1, #4
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	bfb8      	it	lt
 800f9a2:	18e4      	addlt	r4, r4, r3
 800f9a4:	f000 f8e8 	bl	800fb78 <__malloc_lock>
 800f9a8:	4a1d      	ldr	r2, [pc, #116]	@ (800fa20 <_free_r+0x90>)
 800f9aa:	6813      	ldr	r3, [r2, #0]
 800f9ac:	b933      	cbnz	r3, 800f9bc <_free_r+0x2c>
 800f9ae:	6063      	str	r3, [r4, #4]
 800f9b0:	6014      	str	r4, [r2, #0]
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9b8:	f000 b8e4 	b.w	800fb84 <__malloc_unlock>
 800f9bc:	42a3      	cmp	r3, r4
 800f9be:	d908      	bls.n	800f9d2 <_free_r+0x42>
 800f9c0:	6820      	ldr	r0, [r4, #0]
 800f9c2:	1821      	adds	r1, r4, r0
 800f9c4:	428b      	cmp	r3, r1
 800f9c6:	bf01      	itttt	eq
 800f9c8:	6819      	ldreq	r1, [r3, #0]
 800f9ca:	685b      	ldreq	r3, [r3, #4]
 800f9cc:	1809      	addeq	r1, r1, r0
 800f9ce:	6021      	streq	r1, [r4, #0]
 800f9d0:	e7ed      	b.n	800f9ae <_free_r+0x1e>
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	b10b      	cbz	r3, 800f9dc <_free_r+0x4c>
 800f9d8:	42a3      	cmp	r3, r4
 800f9da:	d9fa      	bls.n	800f9d2 <_free_r+0x42>
 800f9dc:	6811      	ldr	r1, [r2, #0]
 800f9de:	1850      	adds	r0, r2, r1
 800f9e0:	42a0      	cmp	r0, r4
 800f9e2:	d10b      	bne.n	800f9fc <_free_r+0x6c>
 800f9e4:	6820      	ldr	r0, [r4, #0]
 800f9e6:	4401      	add	r1, r0
 800f9e8:	1850      	adds	r0, r2, r1
 800f9ea:	4283      	cmp	r3, r0
 800f9ec:	6011      	str	r1, [r2, #0]
 800f9ee:	d1e0      	bne.n	800f9b2 <_free_r+0x22>
 800f9f0:	6818      	ldr	r0, [r3, #0]
 800f9f2:	685b      	ldr	r3, [r3, #4]
 800f9f4:	6053      	str	r3, [r2, #4]
 800f9f6:	4408      	add	r0, r1
 800f9f8:	6010      	str	r0, [r2, #0]
 800f9fa:	e7da      	b.n	800f9b2 <_free_r+0x22>
 800f9fc:	d902      	bls.n	800fa04 <_free_r+0x74>
 800f9fe:	230c      	movs	r3, #12
 800fa00:	602b      	str	r3, [r5, #0]
 800fa02:	e7d6      	b.n	800f9b2 <_free_r+0x22>
 800fa04:	6820      	ldr	r0, [r4, #0]
 800fa06:	1821      	adds	r1, r4, r0
 800fa08:	428b      	cmp	r3, r1
 800fa0a:	bf04      	itt	eq
 800fa0c:	6819      	ldreq	r1, [r3, #0]
 800fa0e:	685b      	ldreq	r3, [r3, #4]
 800fa10:	6063      	str	r3, [r4, #4]
 800fa12:	bf04      	itt	eq
 800fa14:	1809      	addeq	r1, r1, r0
 800fa16:	6021      	streq	r1, [r4, #0]
 800fa18:	6054      	str	r4, [r2, #4]
 800fa1a:	e7ca      	b.n	800f9b2 <_free_r+0x22>
 800fa1c:	bd38      	pop	{r3, r4, r5, pc}
 800fa1e:	bf00      	nop
 800fa20:	20002810 	.word	0x20002810

0800fa24 <malloc>:
 800fa24:	4b02      	ldr	r3, [pc, #8]	@ (800fa30 <malloc+0xc>)
 800fa26:	4601      	mov	r1, r0
 800fa28:	6818      	ldr	r0, [r3, #0]
 800fa2a:	f000 b825 	b.w	800fa78 <_malloc_r>
 800fa2e:	bf00      	nop
 800fa30:	20000138 	.word	0x20000138

0800fa34 <sbrk_aligned>:
 800fa34:	b570      	push	{r4, r5, r6, lr}
 800fa36:	4e0f      	ldr	r6, [pc, #60]	@ (800fa74 <sbrk_aligned+0x40>)
 800fa38:	460c      	mov	r4, r1
 800fa3a:	6831      	ldr	r1, [r6, #0]
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	b911      	cbnz	r1, 800fa46 <sbrk_aligned+0x12>
 800fa40:	f001 f81c 	bl	8010a7c <_sbrk_r>
 800fa44:	6030      	str	r0, [r6, #0]
 800fa46:	4621      	mov	r1, r4
 800fa48:	4628      	mov	r0, r5
 800fa4a:	f001 f817 	bl	8010a7c <_sbrk_r>
 800fa4e:	1c43      	adds	r3, r0, #1
 800fa50:	d103      	bne.n	800fa5a <sbrk_aligned+0x26>
 800fa52:	f04f 34ff 	mov.w	r4, #4294967295
 800fa56:	4620      	mov	r0, r4
 800fa58:	bd70      	pop	{r4, r5, r6, pc}
 800fa5a:	1cc4      	adds	r4, r0, #3
 800fa5c:	f024 0403 	bic.w	r4, r4, #3
 800fa60:	42a0      	cmp	r0, r4
 800fa62:	d0f8      	beq.n	800fa56 <sbrk_aligned+0x22>
 800fa64:	1a21      	subs	r1, r4, r0
 800fa66:	4628      	mov	r0, r5
 800fa68:	f001 f808 	bl	8010a7c <_sbrk_r>
 800fa6c:	3001      	adds	r0, #1
 800fa6e:	d1f2      	bne.n	800fa56 <sbrk_aligned+0x22>
 800fa70:	e7ef      	b.n	800fa52 <sbrk_aligned+0x1e>
 800fa72:	bf00      	nop
 800fa74:	2000280c 	.word	0x2000280c

0800fa78 <_malloc_r>:
 800fa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa7c:	1ccd      	adds	r5, r1, #3
 800fa7e:	f025 0503 	bic.w	r5, r5, #3
 800fa82:	3508      	adds	r5, #8
 800fa84:	2d0c      	cmp	r5, #12
 800fa86:	bf38      	it	cc
 800fa88:	250c      	movcc	r5, #12
 800fa8a:	2d00      	cmp	r5, #0
 800fa8c:	4606      	mov	r6, r0
 800fa8e:	db01      	blt.n	800fa94 <_malloc_r+0x1c>
 800fa90:	42a9      	cmp	r1, r5
 800fa92:	d904      	bls.n	800fa9e <_malloc_r+0x26>
 800fa94:	230c      	movs	r3, #12
 800fa96:	6033      	str	r3, [r6, #0]
 800fa98:	2000      	movs	r0, #0
 800fa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fb74 <_malloc_r+0xfc>
 800faa2:	f000 f869 	bl	800fb78 <__malloc_lock>
 800faa6:	f8d8 3000 	ldr.w	r3, [r8]
 800faaa:	461c      	mov	r4, r3
 800faac:	bb44      	cbnz	r4, 800fb00 <_malloc_r+0x88>
 800faae:	4629      	mov	r1, r5
 800fab0:	4630      	mov	r0, r6
 800fab2:	f7ff ffbf 	bl	800fa34 <sbrk_aligned>
 800fab6:	1c43      	adds	r3, r0, #1
 800fab8:	4604      	mov	r4, r0
 800faba:	d158      	bne.n	800fb6e <_malloc_r+0xf6>
 800fabc:	f8d8 4000 	ldr.w	r4, [r8]
 800fac0:	4627      	mov	r7, r4
 800fac2:	2f00      	cmp	r7, #0
 800fac4:	d143      	bne.n	800fb4e <_malloc_r+0xd6>
 800fac6:	2c00      	cmp	r4, #0
 800fac8:	d04b      	beq.n	800fb62 <_malloc_r+0xea>
 800faca:	6823      	ldr	r3, [r4, #0]
 800facc:	4639      	mov	r1, r7
 800face:	4630      	mov	r0, r6
 800fad0:	eb04 0903 	add.w	r9, r4, r3
 800fad4:	f000 ffd2 	bl	8010a7c <_sbrk_r>
 800fad8:	4581      	cmp	r9, r0
 800fada:	d142      	bne.n	800fb62 <_malloc_r+0xea>
 800fadc:	6821      	ldr	r1, [r4, #0]
 800fade:	1a6d      	subs	r5, r5, r1
 800fae0:	4629      	mov	r1, r5
 800fae2:	4630      	mov	r0, r6
 800fae4:	f7ff ffa6 	bl	800fa34 <sbrk_aligned>
 800fae8:	3001      	adds	r0, #1
 800faea:	d03a      	beq.n	800fb62 <_malloc_r+0xea>
 800faec:	6823      	ldr	r3, [r4, #0]
 800faee:	442b      	add	r3, r5
 800faf0:	6023      	str	r3, [r4, #0]
 800faf2:	f8d8 3000 	ldr.w	r3, [r8]
 800faf6:	685a      	ldr	r2, [r3, #4]
 800faf8:	bb62      	cbnz	r2, 800fb54 <_malloc_r+0xdc>
 800fafa:	f8c8 7000 	str.w	r7, [r8]
 800fafe:	e00f      	b.n	800fb20 <_malloc_r+0xa8>
 800fb00:	6822      	ldr	r2, [r4, #0]
 800fb02:	1b52      	subs	r2, r2, r5
 800fb04:	d420      	bmi.n	800fb48 <_malloc_r+0xd0>
 800fb06:	2a0b      	cmp	r2, #11
 800fb08:	d917      	bls.n	800fb3a <_malloc_r+0xc2>
 800fb0a:	1961      	adds	r1, r4, r5
 800fb0c:	42a3      	cmp	r3, r4
 800fb0e:	6025      	str	r5, [r4, #0]
 800fb10:	bf18      	it	ne
 800fb12:	6059      	strne	r1, [r3, #4]
 800fb14:	6863      	ldr	r3, [r4, #4]
 800fb16:	bf08      	it	eq
 800fb18:	f8c8 1000 	streq.w	r1, [r8]
 800fb1c:	5162      	str	r2, [r4, r5]
 800fb1e:	604b      	str	r3, [r1, #4]
 800fb20:	4630      	mov	r0, r6
 800fb22:	f000 f82f 	bl	800fb84 <__malloc_unlock>
 800fb26:	f104 000b 	add.w	r0, r4, #11
 800fb2a:	1d23      	adds	r3, r4, #4
 800fb2c:	f020 0007 	bic.w	r0, r0, #7
 800fb30:	1ac2      	subs	r2, r0, r3
 800fb32:	bf1c      	itt	ne
 800fb34:	1a1b      	subne	r3, r3, r0
 800fb36:	50a3      	strne	r3, [r4, r2]
 800fb38:	e7af      	b.n	800fa9a <_malloc_r+0x22>
 800fb3a:	6862      	ldr	r2, [r4, #4]
 800fb3c:	42a3      	cmp	r3, r4
 800fb3e:	bf0c      	ite	eq
 800fb40:	f8c8 2000 	streq.w	r2, [r8]
 800fb44:	605a      	strne	r2, [r3, #4]
 800fb46:	e7eb      	b.n	800fb20 <_malloc_r+0xa8>
 800fb48:	4623      	mov	r3, r4
 800fb4a:	6864      	ldr	r4, [r4, #4]
 800fb4c:	e7ae      	b.n	800faac <_malloc_r+0x34>
 800fb4e:	463c      	mov	r4, r7
 800fb50:	687f      	ldr	r7, [r7, #4]
 800fb52:	e7b6      	b.n	800fac2 <_malloc_r+0x4a>
 800fb54:	461a      	mov	r2, r3
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	42a3      	cmp	r3, r4
 800fb5a:	d1fb      	bne.n	800fb54 <_malloc_r+0xdc>
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	6053      	str	r3, [r2, #4]
 800fb60:	e7de      	b.n	800fb20 <_malloc_r+0xa8>
 800fb62:	230c      	movs	r3, #12
 800fb64:	6033      	str	r3, [r6, #0]
 800fb66:	4630      	mov	r0, r6
 800fb68:	f000 f80c 	bl	800fb84 <__malloc_unlock>
 800fb6c:	e794      	b.n	800fa98 <_malloc_r+0x20>
 800fb6e:	6005      	str	r5, [r0, #0]
 800fb70:	e7d6      	b.n	800fb20 <_malloc_r+0xa8>
 800fb72:	bf00      	nop
 800fb74:	20002810 	.word	0x20002810

0800fb78 <__malloc_lock>:
 800fb78:	4801      	ldr	r0, [pc, #4]	@ (800fb80 <__malloc_lock+0x8>)
 800fb7a:	f7ff b89a 	b.w	800ecb2 <__retarget_lock_acquire_recursive>
 800fb7e:	bf00      	nop
 800fb80:	20002808 	.word	0x20002808

0800fb84 <__malloc_unlock>:
 800fb84:	4801      	ldr	r0, [pc, #4]	@ (800fb8c <__malloc_unlock+0x8>)
 800fb86:	f7ff b895 	b.w	800ecb4 <__retarget_lock_release_recursive>
 800fb8a:	bf00      	nop
 800fb8c:	20002808 	.word	0x20002808

0800fb90 <_Balloc>:
 800fb90:	b570      	push	{r4, r5, r6, lr}
 800fb92:	69c6      	ldr	r6, [r0, #28]
 800fb94:	4604      	mov	r4, r0
 800fb96:	460d      	mov	r5, r1
 800fb98:	b976      	cbnz	r6, 800fbb8 <_Balloc+0x28>
 800fb9a:	2010      	movs	r0, #16
 800fb9c:	f7ff ff42 	bl	800fa24 <malloc>
 800fba0:	4602      	mov	r2, r0
 800fba2:	61e0      	str	r0, [r4, #28]
 800fba4:	b920      	cbnz	r0, 800fbb0 <_Balloc+0x20>
 800fba6:	4b18      	ldr	r3, [pc, #96]	@ (800fc08 <_Balloc+0x78>)
 800fba8:	4818      	ldr	r0, [pc, #96]	@ (800fc0c <_Balloc+0x7c>)
 800fbaa:	216b      	movs	r1, #107	@ 0x6b
 800fbac:	f000 ff76 	bl	8010a9c <__assert_func>
 800fbb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbb4:	6006      	str	r6, [r0, #0]
 800fbb6:	60c6      	str	r6, [r0, #12]
 800fbb8:	69e6      	ldr	r6, [r4, #28]
 800fbba:	68f3      	ldr	r3, [r6, #12]
 800fbbc:	b183      	cbz	r3, 800fbe0 <_Balloc+0x50>
 800fbbe:	69e3      	ldr	r3, [r4, #28]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbc6:	b9b8      	cbnz	r0, 800fbf8 <_Balloc+0x68>
 800fbc8:	2101      	movs	r1, #1
 800fbca:	fa01 f605 	lsl.w	r6, r1, r5
 800fbce:	1d72      	adds	r2, r6, #5
 800fbd0:	0092      	lsls	r2, r2, #2
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f000 ff80 	bl	8010ad8 <_calloc_r>
 800fbd8:	b160      	cbz	r0, 800fbf4 <_Balloc+0x64>
 800fbda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbde:	e00e      	b.n	800fbfe <_Balloc+0x6e>
 800fbe0:	2221      	movs	r2, #33	@ 0x21
 800fbe2:	2104      	movs	r1, #4
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 ff77 	bl	8010ad8 <_calloc_r>
 800fbea:	69e3      	ldr	r3, [r4, #28]
 800fbec:	60f0      	str	r0, [r6, #12]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d1e4      	bne.n	800fbbe <_Balloc+0x2e>
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	bd70      	pop	{r4, r5, r6, pc}
 800fbf8:	6802      	ldr	r2, [r0, #0]
 800fbfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc04:	e7f7      	b.n	800fbf6 <_Balloc+0x66>
 800fc06:	bf00      	nop
 800fc08:	0801283a 	.word	0x0801283a
 800fc0c:	080128ba 	.word	0x080128ba

0800fc10 <_Bfree>:
 800fc10:	b570      	push	{r4, r5, r6, lr}
 800fc12:	69c6      	ldr	r6, [r0, #28]
 800fc14:	4605      	mov	r5, r0
 800fc16:	460c      	mov	r4, r1
 800fc18:	b976      	cbnz	r6, 800fc38 <_Bfree+0x28>
 800fc1a:	2010      	movs	r0, #16
 800fc1c:	f7ff ff02 	bl	800fa24 <malloc>
 800fc20:	4602      	mov	r2, r0
 800fc22:	61e8      	str	r0, [r5, #28]
 800fc24:	b920      	cbnz	r0, 800fc30 <_Bfree+0x20>
 800fc26:	4b09      	ldr	r3, [pc, #36]	@ (800fc4c <_Bfree+0x3c>)
 800fc28:	4809      	ldr	r0, [pc, #36]	@ (800fc50 <_Bfree+0x40>)
 800fc2a:	218f      	movs	r1, #143	@ 0x8f
 800fc2c:	f000 ff36 	bl	8010a9c <__assert_func>
 800fc30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc34:	6006      	str	r6, [r0, #0]
 800fc36:	60c6      	str	r6, [r0, #12]
 800fc38:	b13c      	cbz	r4, 800fc4a <_Bfree+0x3a>
 800fc3a:	69eb      	ldr	r3, [r5, #28]
 800fc3c:	6862      	ldr	r2, [r4, #4]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc44:	6021      	str	r1, [r4, #0]
 800fc46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc4a:	bd70      	pop	{r4, r5, r6, pc}
 800fc4c:	0801283a 	.word	0x0801283a
 800fc50:	080128ba 	.word	0x080128ba

0800fc54 <__multadd>:
 800fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc58:	690d      	ldr	r5, [r1, #16]
 800fc5a:	4607      	mov	r7, r0
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	461e      	mov	r6, r3
 800fc60:	f101 0c14 	add.w	ip, r1, #20
 800fc64:	2000      	movs	r0, #0
 800fc66:	f8dc 3000 	ldr.w	r3, [ip]
 800fc6a:	b299      	uxth	r1, r3
 800fc6c:	fb02 6101 	mla	r1, r2, r1, r6
 800fc70:	0c1e      	lsrs	r6, r3, #16
 800fc72:	0c0b      	lsrs	r3, r1, #16
 800fc74:	fb02 3306 	mla	r3, r2, r6, r3
 800fc78:	b289      	uxth	r1, r1
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc80:	4285      	cmp	r5, r0
 800fc82:	f84c 1b04 	str.w	r1, [ip], #4
 800fc86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc8a:	dcec      	bgt.n	800fc66 <__multadd+0x12>
 800fc8c:	b30e      	cbz	r6, 800fcd2 <__multadd+0x7e>
 800fc8e:	68a3      	ldr	r3, [r4, #8]
 800fc90:	42ab      	cmp	r3, r5
 800fc92:	dc19      	bgt.n	800fcc8 <__multadd+0x74>
 800fc94:	6861      	ldr	r1, [r4, #4]
 800fc96:	4638      	mov	r0, r7
 800fc98:	3101      	adds	r1, #1
 800fc9a:	f7ff ff79 	bl	800fb90 <_Balloc>
 800fc9e:	4680      	mov	r8, r0
 800fca0:	b928      	cbnz	r0, 800fcae <__multadd+0x5a>
 800fca2:	4602      	mov	r2, r0
 800fca4:	4b0c      	ldr	r3, [pc, #48]	@ (800fcd8 <__multadd+0x84>)
 800fca6:	480d      	ldr	r0, [pc, #52]	@ (800fcdc <__multadd+0x88>)
 800fca8:	21ba      	movs	r1, #186	@ 0xba
 800fcaa:	f000 fef7 	bl	8010a9c <__assert_func>
 800fcae:	6922      	ldr	r2, [r4, #16]
 800fcb0:	3202      	adds	r2, #2
 800fcb2:	f104 010c 	add.w	r1, r4, #12
 800fcb6:	0092      	lsls	r2, r2, #2
 800fcb8:	300c      	adds	r0, #12
 800fcba:	f7fe fffc 	bl	800ecb6 <memcpy>
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	4638      	mov	r0, r7
 800fcc2:	f7ff ffa5 	bl	800fc10 <_Bfree>
 800fcc6:	4644      	mov	r4, r8
 800fcc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fccc:	3501      	adds	r5, #1
 800fcce:	615e      	str	r6, [r3, #20]
 800fcd0:	6125      	str	r5, [r4, #16]
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd8:	080128a9 	.word	0x080128a9
 800fcdc:	080128ba 	.word	0x080128ba

0800fce0 <__hi0bits>:
 800fce0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fce4:	4603      	mov	r3, r0
 800fce6:	bf36      	itet	cc
 800fce8:	0403      	lslcc	r3, r0, #16
 800fcea:	2000      	movcs	r0, #0
 800fcec:	2010      	movcc	r0, #16
 800fcee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fcf2:	bf3c      	itt	cc
 800fcf4:	021b      	lslcc	r3, r3, #8
 800fcf6:	3008      	addcc	r0, #8
 800fcf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcfc:	bf3c      	itt	cc
 800fcfe:	011b      	lslcc	r3, r3, #4
 800fd00:	3004      	addcc	r0, #4
 800fd02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd06:	bf3c      	itt	cc
 800fd08:	009b      	lslcc	r3, r3, #2
 800fd0a:	3002      	addcc	r0, #2
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	db05      	blt.n	800fd1c <__hi0bits+0x3c>
 800fd10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd14:	f100 0001 	add.w	r0, r0, #1
 800fd18:	bf08      	it	eq
 800fd1a:	2020      	moveq	r0, #32
 800fd1c:	4770      	bx	lr

0800fd1e <__lo0bits>:
 800fd1e:	6803      	ldr	r3, [r0, #0]
 800fd20:	4602      	mov	r2, r0
 800fd22:	f013 0007 	ands.w	r0, r3, #7
 800fd26:	d00b      	beq.n	800fd40 <__lo0bits+0x22>
 800fd28:	07d9      	lsls	r1, r3, #31
 800fd2a:	d421      	bmi.n	800fd70 <__lo0bits+0x52>
 800fd2c:	0798      	lsls	r0, r3, #30
 800fd2e:	bf49      	itett	mi
 800fd30:	085b      	lsrmi	r3, r3, #1
 800fd32:	089b      	lsrpl	r3, r3, #2
 800fd34:	2001      	movmi	r0, #1
 800fd36:	6013      	strmi	r3, [r2, #0]
 800fd38:	bf5c      	itt	pl
 800fd3a:	6013      	strpl	r3, [r2, #0]
 800fd3c:	2002      	movpl	r0, #2
 800fd3e:	4770      	bx	lr
 800fd40:	b299      	uxth	r1, r3
 800fd42:	b909      	cbnz	r1, 800fd48 <__lo0bits+0x2a>
 800fd44:	0c1b      	lsrs	r3, r3, #16
 800fd46:	2010      	movs	r0, #16
 800fd48:	b2d9      	uxtb	r1, r3
 800fd4a:	b909      	cbnz	r1, 800fd50 <__lo0bits+0x32>
 800fd4c:	3008      	adds	r0, #8
 800fd4e:	0a1b      	lsrs	r3, r3, #8
 800fd50:	0719      	lsls	r1, r3, #28
 800fd52:	bf04      	itt	eq
 800fd54:	091b      	lsreq	r3, r3, #4
 800fd56:	3004      	addeq	r0, #4
 800fd58:	0799      	lsls	r1, r3, #30
 800fd5a:	bf04      	itt	eq
 800fd5c:	089b      	lsreq	r3, r3, #2
 800fd5e:	3002      	addeq	r0, #2
 800fd60:	07d9      	lsls	r1, r3, #31
 800fd62:	d403      	bmi.n	800fd6c <__lo0bits+0x4e>
 800fd64:	085b      	lsrs	r3, r3, #1
 800fd66:	f100 0001 	add.w	r0, r0, #1
 800fd6a:	d003      	beq.n	800fd74 <__lo0bits+0x56>
 800fd6c:	6013      	str	r3, [r2, #0]
 800fd6e:	4770      	bx	lr
 800fd70:	2000      	movs	r0, #0
 800fd72:	4770      	bx	lr
 800fd74:	2020      	movs	r0, #32
 800fd76:	4770      	bx	lr

0800fd78 <__i2b>:
 800fd78:	b510      	push	{r4, lr}
 800fd7a:	460c      	mov	r4, r1
 800fd7c:	2101      	movs	r1, #1
 800fd7e:	f7ff ff07 	bl	800fb90 <_Balloc>
 800fd82:	4602      	mov	r2, r0
 800fd84:	b928      	cbnz	r0, 800fd92 <__i2b+0x1a>
 800fd86:	4b05      	ldr	r3, [pc, #20]	@ (800fd9c <__i2b+0x24>)
 800fd88:	4805      	ldr	r0, [pc, #20]	@ (800fda0 <__i2b+0x28>)
 800fd8a:	f240 1145 	movw	r1, #325	@ 0x145
 800fd8e:	f000 fe85 	bl	8010a9c <__assert_func>
 800fd92:	2301      	movs	r3, #1
 800fd94:	6144      	str	r4, [r0, #20]
 800fd96:	6103      	str	r3, [r0, #16]
 800fd98:	bd10      	pop	{r4, pc}
 800fd9a:	bf00      	nop
 800fd9c:	080128a9 	.word	0x080128a9
 800fda0:	080128ba 	.word	0x080128ba

0800fda4 <__multiply>:
 800fda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda8:	4614      	mov	r4, r2
 800fdaa:	690a      	ldr	r2, [r1, #16]
 800fdac:	6923      	ldr	r3, [r4, #16]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	bfa8      	it	ge
 800fdb2:	4623      	movge	r3, r4
 800fdb4:	460f      	mov	r7, r1
 800fdb6:	bfa4      	itt	ge
 800fdb8:	460c      	movge	r4, r1
 800fdba:	461f      	movge	r7, r3
 800fdbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fdc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fdc4:	68a3      	ldr	r3, [r4, #8]
 800fdc6:	6861      	ldr	r1, [r4, #4]
 800fdc8:	eb0a 0609 	add.w	r6, sl, r9
 800fdcc:	42b3      	cmp	r3, r6
 800fdce:	b085      	sub	sp, #20
 800fdd0:	bfb8      	it	lt
 800fdd2:	3101      	addlt	r1, #1
 800fdd4:	f7ff fedc 	bl	800fb90 <_Balloc>
 800fdd8:	b930      	cbnz	r0, 800fde8 <__multiply+0x44>
 800fdda:	4602      	mov	r2, r0
 800fddc:	4b44      	ldr	r3, [pc, #272]	@ (800fef0 <__multiply+0x14c>)
 800fdde:	4845      	ldr	r0, [pc, #276]	@ (800fef4 <__multiply+0x150>)
 800fde0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fde4:	f000 fe5a 	bl	8010a9c <__assert_func>
 800fde8:	f100 0514 	add.w	r5, r0, #20
 800fdec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fdf0:	462b      	mov	r3, r5
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	4543      	cmp	r3, r8
 800fdf6:	d321      	bcc.n	800fe3c <__multiply+0x98>
 800fdf8:	f107 0114 	add.w	r1, r7, #20
 800fdfc:	f104 0214 	add.w	r2, r4, #20
 800fe00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fe04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fe08:	9302      	str	r3, [sp, #8]
 800fe0a:	1b13      	subs	r3, r2, r4
 800fe0c:	3b15      	subs	r3, #21
 800fe0e:	f023 0303 	bic.w	r3, r3, #3
 800fe12:	3304      	adds	r3, #4
 800fe14:	f104 0715 	add.w	r7, r4, #21
 800fe18:	42ba      	cmp	r2, r7
 800fe1a:	bf38      	it	cc
 800fe1c:	2304      	movcc	r3, #4
 800fe1e:	9301      	str	r3, [sp, #4]
 800fe20:	9b02      	ldr	r3, [sp, #8]
 800fe22:	9103      	str	r1, [sp, #12]
 800fe24:	428b      	cmp	r3, r1
 800fe26:	d80c      	bhi.n	800fe42 <__multiply+0x9e>
 800fe28:	2e00      	cmp	r6, #0
 800fe2a:	dd03      	ble.n	800fe34 <__multiply+0x90>
 800fe2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d05b      	beq.n	800feec <__multiply+0x148>
 800fe34:	6106      	str	r6, [r0, #16]
 800fe36:	b005      	add	sp, #20
 800fe38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3c:	f843 2b04 	str.w	r2, [r3], #4
 800fe40:	e7d8      	b.n	800fdf4 <__multiply+0x50>
 800fe42:	f8b1 a000 	ldrh.w	sl, [r1]
 800fe46:	f1ba 0f00 	cmp.w	sl, #0
 800fe4a:	d024      	beq.n	800fe96 <__multiply+0xf2>
 800fe4c:	f104 0e14 	add.w	lr, r4, #20
 800fe50:	46a9      	mov	r9, r5
 800fe52:	f04f 0c00 	mov.w	ip, #0
 800fe56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe5a:	f8d9 3000 	ldr.w	r3, [r9]
 800fe5e:	fa1f fb87 	uxth.w	fp, r7
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	fb0a 330b 	mla	r3, sl, fp, r3
 800fe68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fe6c:	f8d9 7000 	ldr.w	r7, [r9]
 800fe70:	4463      	add	r3, ip
 800fe72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe76:	fb0a c70b 	mla	r7, sl, fp, ip
 800fe7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe84:	4572      	cmp	r2, lr
 800fe86:	f849 3b04 	str.w	r3, [r9], #4
 800fe8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe8e:	d8e2      	bhi.n	800fe56 <__multiply+0xb2>
 800fe90:	9b01      	ldr	r3, [sp, #4]
 800fe92:	f845 c003 	str.w	ip, [r5, r3]
 800fe96:	9b03      	ldr	r3, [sp, #12]
 800fe98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe9c:	3104      	adds	r1, #4
 800fe9e:	f1b9 0f00 	cmp.w	r9, #0
 800fea2:	d021      	beq.n	800fee8 <__multiply+0x144>
 800fea4:	682b      	ldr	r3, [r5, #0]
 800fea6:	f104 0c14 	add.w	ip, r4, #20
 800feaa:	46ae      	mov	lr, r5
 800feac:	f04f 0a00 	mov.w	sl, #0
 800feb0:	f8bc b000 	ldrh.w	fp, [ip]
 800feb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800feb8:	fb09 770b 	mla	r7, r9, fp, r7
 800febc:	4457      	add	r7, sl
 800febe:	b29b      	uxth	r3, r3
 800fec0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fec4:	f84e 3b04 	str.w	r3, [lr], #4
 800fec8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fecc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fed0:	f8be 3000 	ldrh.w	r3, [lr]
 800fed4:	fb09 330a 	mla	r3, r9, sl, r3
 800fed8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fedc:	4562      	cmp	r2, ip
 800fede:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fee2:	d8e5      	bhi.n	800feb0 <__multiply+0x10c>
 800fee4:	9f01      	ldr	r7, [sp, #4]
 800fee6:	51eb      	str	r3, [r5, r7]
 800fee8:	3504      	adds	r5, #4
 800feea:	e799      	b.n	800fe20 <__multiply+0x7c>
 800feec:	3e01      	subs	r6, #1
 800feee:	e79b      	b.n	800fe28 <__multiply+0x84>
 800fef0:	080128a9 	.word	0x080128a9
 800fef4:	080128ba 	.word	0x080128ba

0800fef8 <__pow5mult>:
 800fef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fefc:	4615      	mov	r5, r2
 800fefe:	f012 0203 	ands.w	r2, r2, #3
 800ff02:	4607      	mov	r7, r0
 800ff04:	460e      	mov	r6, r1
 800ff06:	d007      	beq.n	800ff18 <__pow5mult+0x20>
 800ff08:	4c25      	ldr	r4, [pc, #148]	@ (800ffa0 <__pow5mult+0xa8>)
 800ff0a:	3a01      	subs	r2, #1
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff12:	f7ff fe9f 	bl	800fc54 <__multadd>
 800ff16:	4606      	mov	r6, r0
 800ff18:	10ad      	asrs	r5, r5, #2
 800ff1a:	d03d      	beq.n	800ff98 <__pow5mult+0xa0>
 800ff1c:	69fc      	ldr	r4, [r7, #28]
 800ff1e:	b97c      	cbnz	r4, 800ff40 <__pow5mult+0x48>
 800ff20:	2010      	movs	r0, #16
 800ff22:	f7ff fd7f 	bl	800fa24 <malloc>
 800ff26:	4602      	mov	r2, r0
 800ff28:	61f8      	str	r0, [r7, #28]
 800ff2a:	b928      	cbnz	r0, 800ff38 <__pow5mult+0x40>
 800ff2c:	4b1d      	ldr	r3, [pc, #116]	@ (800ffa4 <__pow5mult+0xac>)
 800ff2e:	481e      	ldr	r0, [pc, #120]	@ (800ffa8 <__pow5mult+0xb0>)
 800ff30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ff34:	f000 fdb2 	bl	8010a9c <__assert_func>
 800ff38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff3c:	6004      	str	r4, [r0, #0]
 800ff3e:	60c4      	str	r4, [r0, #12]
 800ff40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ff44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff48:	b94c      	cbnz	r4, 800ff5e <__pow5mult+0x66>
 800ff4a:	f240 2171 	movw	r1, #625	@ 0x271
 800ff4e:	4638      	mov	r0, r7
 800ff50:	f7ff ff12 	bl	800fd78 <__i2b>
 800ff54:	2300      	movs	r3, #0
 800ff56:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	6003      	str	r3, [r0, #0]
 800ff5e:	f04f 0900 	mov.w	r9, #0
 800ff62:	07eb      	lsls	r3, r5, #31
 800ff64:	d50a      	bpl.n	800ff7c <__pow5mult+0x84>
 800ff66:	4631      	mov	r1, r6
 800ff68:	4622      	mov	r2, r4
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	f7ff ff1a 	bl	800fda4 <__multiply>
 800ff70:	4631      	mov	r1, r6
 800ff72:	4680      	mov	r8, r0
 800ff74:	4638      	mov	r0, r7
 800ff76:	f7ff fe4b 	bl	800fc10 <_Bfree>
 800ff7a:	4646      	mov	r6, r8
 800ff7c:	106d      	asrs	r5, r5, #1
 800ff7e:	d00b      	beq.n	800ff98 <__pow5mult+0xa0>
 800ff80:	6820      	ldr	r0, [r4, #0]
 800ff82:	b938      	cbnz	r0, 800ff94 <__pow5mult+0x9c>
 800ff84:	4622      	mov	r2, r4
 800ff86:	4621      	mov	r1, r4
 800ff88:	4638      	mov	r0, r7
 800ff8a:	f7ff ff0b 	bl	800fda4 <__multiply>
 800ff8e:	6020      	str	r0, [r4, #0]
 800ff90:	f8c0 9000 	str.w	r9, [r0]
 800ff94:	4604      	mov	r4, r0
 800ff96:	e7e4      	b.n	800ff62 <__pow5mult+0x6a>
 800ff98:	4630      	mov	r0, r6
 800ff9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff9e:	bf00      	nop
 800ffa0:	08012914 	.word	0x08012914
 800ffa4:	0801283a 	.word	0x0801283a
 800ffa8:	080128ba 	.word	0x080128ba

0800ffac <__lshift>:
 800ffac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffb0:	460c      	mov	r4, r1
 800ffb2:	6849      	ldr	r1, [r1, #4]
 800ffb4:	6923      	ldr	r3, [r4, #16]
 800ffb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffba:	68a3      	ldr	r3, [r4, #8]
 800ffbc:	4607      	mov	r7, r0
 800ffbe:	4691      	mov	r9, r2
 800ffc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffc4:	f108 0601 	add.w	r6, r8, #1
 800ffc8:	42b3      	cmp	r3, r6
 800ffca:	db0b      	blt.n	800ffe4 <__lshift+0x38>
 800ffcc:	4638      	mov	r0, r7
 800ffce:	f7ff fddf 	bl	800fb90 <_Balloc>
 800ffd2:	4605      	mov	r5, r0
 800ffd4:	b948      	cbnz	r0, 800ffea <__lshift+0x3e>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	4b28      	ldr	r3, [pc, #160]	@ (801007c <__lshift+0xd0>)
 800ffda:	4829      	ldr	r0, [pc, #164]	@ (8010080 <__lshift+0xd4>)
 800ffdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ffe0:	f000 fd5c 	bl	8010a9c <__assert_func>
 800ffe4:	3101      	adds	r1, #1
 800ffe6:	005b      	lsls	r3, r3, #1
 800ffe8:	e7ee      	b.n	800ffc8 <__lshift+0x1c>
 800ffea:	2300      	movs	r3, #0
 800ffec:	f100 0114 	add.w	r1, r0, #20
 800fff0:	f100 0210 	add.w	r2, r0, #16
 800fff4:	4618      	mov	r0, r3
 800fff6:	4553      	cmp	r3, sl
 800fff8:	db33      	blt.n	8010062 <__lshift+0xb6>
 800fffa:	6920      	ldr	r0, [r4, #16]
 800fffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010000:	f104 0314 	add.w	r3, r4, #20
 8010004:	f019 091f 	ands.w	r9, r9, #31
 8010008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801000c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010010:	d02b      	beq.n	801006a <__lshift+0xbe>
 8010012:	f1c9 0e20 	rsb	lr, r9, #32
 8010016:	468a      	mov	sl, r1
 8010018:	2200      	movs	r2, #0
 801001a:	6818      	ldr	r0, [r3, #0]
 801001c:	fa00 f009 	lsl.w	r0, r0, r9
 8010020:	4310      	orrs	r0, r2
 8010022:	f84a 0b04 	str.w	r0, [sl], #4
 8010026:	f853 2b04 	ldr.w	r2, [r3], #4
 801002a:	459c      	cmp	ip, r3
 801002c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010030:	d8f3      	bhi.n	801001a <__lshift+0x6e>
 8010032:	ebac 0304 	sub.w	r3, ip, r4
 8010036:	3b15      	subs	r3, #21
 8010038:	f023 0303 	bic.w	r3, r3, #3
 801003c:	3304      	adds	r3, #4
 801003e:	f104 0015 	add.w	r0, r4, #21
 8010042:	4584      	cmp	ip, r0
 8010044:	bf38      	it	cc
 8010046:	2304      	movcc	r3, #4
 8010048:	50ca      	str	r2, [r1, r3]
 801004a:	b10a      	cbz	r2, 8010050 <__lshift+0xa4>
 801004c:	f108 0602 	add.w	r6, r8, #2
 8010050:	3e01      	subs	r6, #1
 8010052:	4638      	mov	r0, r7
 8010054:	612e      	str	r6, [r5, #16]
 8010056:	4621      	mov	r1, r4
 8010058:	f7ff fdda 	bl	800fc10 <_Bfree>
 801005c:	4628      	mov	r0, r5
 801005e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010062:	f842 0f04 	str.w	r0, [r2, #4]!
 8010066:	3301      	adds	r3, #1
 8010068:	e7c5      	b.n	800fff6 <__lshift+0x4a>
 801006a:	3904      	subs	r1, #4
 801006c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010070:	f841 2f04 	str.w	r2, [r1, #4]!
 8010074:	459c      	cmp	ip, r3
 8010076:	d8f9      	bhi.n	801006c <__lshift+0xc0>
 8010078:	e7ea      	b.n	8010050 <__lshift+0xa4>
 801007a:	bf00      	nop
 801007c:	080128a9 	.word	0x080128a9
 8010080:	080128ba 	.word	0x080128ba

08010084 <__mcmp>:
 8010084:	690a      	ldr	r2, [r1, #16]
 8010086:	4603      	mov	r3, r0
 8010088:	6900      	ldr	r0, [r0, #16]
 801008a:	1a80      	subs	r0, r0, r2
 801008c:	b530      	push	{r4, r5, lr}
 801008e:	d10e      	bne.n	80100ae <__mcmp+0x2a>
 8010090:	3314      	adds	r3, #20
 8010092:	3114      	adds	r1, #20
 8010094:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010098:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801009c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80100a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80100a4:	4295      	cmp	r5, r2
 80100a6:	d003      	beq.n	80100b0 <__mcmp+0x2c>
 80100a8:	d205      	bcs.n	80100b6 <__mcmp+0x32>
 80100aa:	f04f 30ff 	mov.w	r0, #4294967295
 80100ae:	bd30      	pop	{r4, r5, pc}
 80100b0:	42a3      	cmp	r3, r4
 80100b2:	d3f3      	bcc.n	801009c <__mcmp+0x18>
 80100b4:	e7fb      	b.n	80100ae <__mcmp+0x2a>
 80100b6:	2001      	movs	r0, #1
 80100b8:	e7f9      	b.n	80100ae <__mcmp+0x2a>
	...

080100bc <__mdiff>:
 80100bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c0:	4689      	mov	r9, r1
 80100c2:	4606      	mov	r6, r0
 80100c4:	4611      	mov	r1, r2
 80100c6:	4648      	mov	r0, r9
 80100c8:	4614      	mov	r4, r2
 80100ca:	f7ff ffdb 	bl	8010084 <__mcmp>
 80100ce:	1e05      	subs	r5, r0, #0
 80100d0:	d112      	bne.n	80100f8 <__mdiff+0x3c>
 80100d2:	4629      	mov	r1, r5
 80100d4:	4630      	mov	r0, r6
 80100d6:	f7ff fd5b 	bl	800fb90 <_Balloc>
 80100da:	4602      	mov	r2, r0
 80100dc:	b928      	cbnz	r0, 80100ea <__mdiff+0x2e>
 80100de:	4b3f      	ldr	r3, [pc, #252]	@ (80101dc <__mdiff+0x120>)
 80100e0:	f240 2137 	movw	r1, #567	@ 0x237
 80100e4:	483e      	ldr	r0, [pc, #248]	@ (80101e0 <__mdiff+0x124>)
 80100e6:	f000 fcd9 	bl	8010a9c <__assert_func>
 80100ea:	2301      	movs	r3, #1
 80100ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100f0:	4610      	mov	r0, r2
 80100f2:	b003      	add	sp, #12
 80100f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f8:	bfbc      	itt	lt
 80100fa:	464b      	movlt	r3, r9
 80100fc:	46a1      	movlt	r9, r4
 80100fe:	4630      	mov	r0, r6
 8010100:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010104:	bfba      	itte	lt
 8010106:	461c      	movlt	r4, r3
 8010108:	2501      	movlt	r5, #1
 801010a:	2500      	movge	r5, #0
 801010c:	f7ff fd40 	bl	800fb90 <_Balloc>
 8010110:	4602      	mov	r2, r0
 8010112:	b918      	cbnz	r0, 801011c <__mdiff+0x60>
 8010114:	4b31      	ldr	r3, [pc, #196]	@ (80101dc <__mdiff+0x120>)
 8010116:	f240 2145 	movw	r1, #581	@ 0x245
 801011a:	e7e3      	b.n	80100e4 <__mdiff+0x28>
 801011c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010120:	6926      	ldr	r6, [r4, #16]
 8010122:	60c5      	str	r5, [r0, #12]
 8010124:	f109 0310 	add.w	r3, r9, #16
 8010128:	f109 0514 	add.w	r5, r9, #20
 801012c:	f104 0e14 	add.w	lr, r4, #20
 8010130:	f100 0b14 	add.w	fp, r0, #20
 8010134:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010138:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801013c:	9301      	str	r3, [sp, #4]
 801013e:	46d9      	mov	r9, fp
 8010140:	f04f 0c00 	mov.w	ip, #0
 8010144:	9b01      	ldr	r3, [sp, #4]
 8010146:	f85e 0b04 	ldr.w	r0, [lr], #4
 801014a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801014e:	9301      	str	r3, [sp, #4]
 8010150:	fa1f f38a 	uxth.w	r3, sl
 8010154:	4619      	mov	r1, r3
 8010156:	b283      	uxth	r3, r0
 8010158:	1acb      	subs	r3, r1, r3
 801015a:	0c00      	lsrs	r0, r0, #16
 801015c:	4463      	add	r3, ip
 801015e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010162:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010166:	b29b      	uxth	r3, r3
 8010168:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801016c:	4576      	cmp	r6, lr
 801016e:	f849 3b04 	str.w	r3, [r9], #4
 8010172:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010176:	d8e5      	bhi.n	8010144 <__mdiff+0x88>
 8010178:	1b33      	subs	r3, r6, r4
 801017a:	3b15      	subs	r3, #21
 801017c:	f023 0303 	bic.w	r3, r3, #3
 8010180:	3415      	adds	r4, #21
 8010182:	3304      	adds	r3, #4
 8010184:	42a6      	cmp	r6, r4
 8010186:	bf38      	it	cc
 8010188:	2304      	movcc	r3, #4
 801018a:	441d      	add	r5, r3
 801018c:	445b      	add	r3, fp
 801018e:	461e      	mov	r6, r3
 8010190:	462c      	mov	r4, r5
 8010192:	4544      	cmp	r4, r8
 8010194:	d30e      	bcc.n	80101b4 <__mdiff+0xf8>
 8010196:	f108 0103 	add.w	r1, r8, #3
 801019a:	1b49      	subs	r1, r1, r5
 801019c:	f021 0103 	bic.w	r1, r1, #3
 80101a0:	3d03      	subs	r5, #3
 80101a2:	45a8      	cmp	r8, r5
 80101a4:	bf38      	it	cc
 80101a6:	2100      	movcc	r1, #0
 80101a8:	440b      	add	r3, r1
 80101aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101ae:	b191      	cbz	r1, 80101d6 <__mdiff+0x11a>
 80101b0:	6117      	str	r7, [r2, #16]
 80101b2:	e79d      	b.n	80100f0 <__mdiff+0x34>
 80101b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80101b8:	46e6      	mov	lr, ip
 80101ba:	0c08      	lsrs	r0, r1, #16
 80101bc:	fa1c fc81 	uxtah	ip, ip, r1
 80101c0:	4471      	add	r1, lr
 80101c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80101c6:	b289      	uxth	r1, r1
 80101c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80101cc:	f846 1b04 	str.w	r1, [r6], #4
 80101d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101d4:	e7dd      	b.n	8010192 <__mdiff+0xd6>
 80101d6:	3f01      	subs	r7, #1
 80101d8:	e7e7      	b.n	80101aa <__mdiff+0xee>
 80101da:	bf00      	nop
 80101dc:	080128a9 	.word	0x080128a9
 80101e0:	080128ba 	.word	0x080128ba

080101e4 <__d2b>:
 80101e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101e8:	460f      	mov	r7, r1
 80101ea:	2101      	movs	r1, #1
 80101ec:	ec59 8b10 	vmov	r8, r9, d0
 80101f0:	4616      	mov	r6, r2
 80101f2:	f7ff fccd 	bl	800fb90 <_Balloc>
 80101f6:	4604      	mov	r4, r0
 80101f8:	b930      	cbnz	r0, 8010208 <__d2b+0x24>
 80101fa:	4602      	mov	r2, r0
 80101fc:	4b23      	ldr	r3, [pc, #140]	@ (801028c <__d2b+0xa8>)
 80101fe:	4824      	ldr	r0, [pc, #144]	@ (8010290 <__d2b+0xac>)
 8010200:	f240 310f 	movw	r1, #783	@ 0x30f
 8010204:	f000 fc4a 	bl	8010a9c <__assert_func>
 8010208:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801020c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010210:	b10d      	cbz	r5, 8010216 <__d2b+0x32>
 8010212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010216:	9301      	str	r3, [sp, #4]
 8010218:	f1b8 0300 	subs.w	r3, r8, #0
 801021c:	d023      	beq.n	8010266 <__d2b+0x82>
 801021e:	4668      	mov	r0, sp
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	f7ff fd7c 	bl	800fd1e <__lo0bits>
 8010226:	e9dd 1200 	ldrd	r1, r2, [sp]
 801022a:	b1d0      	cbz	r0, 8010262 <__d2b+0x7e>
 801022c:	f1c0 0320 	rsb	r3, r0, #32
 8010230:	fa02 f303 	lsl.w	r3, r2, r3
 8010234:	430b      	orrs	r3, r1
 8010236:	40c2      	lsrs	r2, r0
 8010238:	6163      	str	r3, [r4, #20]
 801023a:	9201      	str	r2, [sp, #4]
 801023c:	9b01      	ldr	r3, [sp, #4]
 801023e:	61a3      	str	r3, [r4, #24]
 8010240:	2b00      	cmp	r3, #0
 8010242:	bf0c      	ite	eq
 8010244:	2201      	moveq	r2, #1
 8010246:	2202      	movne	r2, #2
 8010248:	6122      	str	r2, [r4, #16]
 801024a:	b1a5      	cbz	r5, 8010276 <__d2b+0x92>
 801024c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010250:	4405      	add	r5, r0
 8010252:	603d      	str	r5, [r7, #0]
 8010254:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010258:	6030      	str	r0, [r6, #0]
 801025a:	4620      	mov	r0, r4
 801025c:	b003      	add	sp, #12
 801025e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010262:	6161      	str	r1, [r4, #20]
 8010264:	e7ea      	b.n	801023c <__d2b+0x58>
 8010266:	a801      	add	r0, sp, #4
 8010268:	f7ff fd59 	bl	800fd1e <__lo0bits>
 801026c:	9b01      	ldr	r3, [sp, #4]
 801026e:	6163      	str	r3, [r4, #20]
 8010270:	3020      	adds	r0, #32
 8010272:	2201      	movs	r2, #1
 8010274:	e7e8      	b.n	8010248 <__d2b+0x64>
 8010276:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801027a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801027e:	6038      	str	r0, [r7, #0]
 8010280:	6918      	ldr	r0, [r3, #16]
 8010282:	f7ff fd2d 	bl	800fce0 <__hi0bits>
 8010286:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801028a:	e7e5      	b.n	8010258 <__d2b+0x74>
 801028c:	080128a9 	.word	0x080128a9
 8010290:	080128ba 	.word	0x080128ba

08010294 <__ssputs_r>:
 8010294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010298:	688e      	ldr	r6, [r1, #8]
 801029a:	461f      	mov	r7, r3
 801029c:	42be      	cmp	r6, r7
 801029e:	680b      	ldr	r3, [r1, #0]
 80102a0:	4682      	mov	sl, r0
 80102a2:	460c      	mov	r4, r1
 80102a4:	4690      	mov	r8, r2
 80102a6:	d82d      	bhi.n	8010304 <__ssputs_r+0x70>
 80102a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80102ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80102b0:	d026      	beq.n	8010300 <__ssputs_r+0x6c>
 80102b2:	6965      	ldr	r5, [r4, #20]
 80102b4:	6909      	ldr	r1, [r1, #16]
 80102b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102ba:	eba3 0901 	sub.w	r9, r3, r1
 80102be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102c2:	1c7b      	adds	r3, r7, #1
 80102c4:	444b      	add	r3, r9
 80102c6:	106d      	asrs	r5, r5, #1
 80102c8:	429d      	cmp	r5, r3
 80102ca:	bf38      	it	cc
 80102cc:	461d      	movcc	r5, r3
 80102ce:	0553      	lsls	r3, r2, #21
 80102d0:	d527      	bpl.n	8010322 <__ssputs_r+0x8e>
 80102d2:	4629      	mov	r1, r5
 80102d4:	f7ff fbd0 	bl	800fa78 <_malloc_r>
 80102d8:	4606      	mov	r6, r0
 80102da:	b360      	cbz	r0, 8010336 <__ssputs_r+0xa2>
 80102dc:	6921      	ldr	r1, [r4, #16]
 80102de:	464a      	mov	r2, r9
 80102e0:	f7fe fce9 	bl	800ecb6 <memcpy>
 80102e4:	89a3      	ldrh	r3, [r4, #12]
 80102e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80102ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102ee:	81a3      	strh	r3, [r4, #12]
 80102f0:	6126      	str	r6, [r4, #16]
 80102f2:	6165      	str	r5, [r4, #20]
 80102f4:	444e      	add	r6, r9
 80102f6:	eba5 0509 	sub.w	r5, r5, r9
 80102fa:	6026      	str	r6, [r4, #0]
 80102fc:	60a5      	str	r5, [r4, #8]
 80102fe:	463e      	mov	r6, r7
 8010300:	42be      	cmp	r6, r7
 8010302:	d900      	bls.n	8010306 <__ssputs_r+0x72>
 8010304:	463e      	mov	r6, r7
 8010306:	6820      	ldr	r0, [r4, #0]
 8010308:	4632      	mov	r2, r6
 801030a:	4641      	mov	r1, r8
 801030c:	f000 fb9c 	bl	8010a48 <memmove>
 8010310:	68a3      	ldr	r3, [r4, #8]
 8010312:	1b9b      	subs	r3, r3, r6
 8010314:	60a3      	str	r3, [r4, #8]
 8010316:	6823      	ldr	r3, [r4, #0]
 8010318:	4433      	add	r3, r6
 801031a:	6023      	str	r3, [r4, #0]
 801031c:	2000      	movs	r0, #0
 801031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010322:	462a      	mov	r2, r5
 8010324:	f000 fbfe 	bl	8010b24 <_realloc_r>
 8010328:	4606      	mov	r6, r0
 801032a:	2800      	cmp	r0, #0
 801032c:	d1e0      	bne.n	80102f0 <__ssputs_r+0x5c>
 801032e:	6921      	ldr	r1, [r4, #16]
 8010330:	4650      	mov	r0, sl
 8010332:	f7ff fb2d 	bl	800f990 <_free_r>
 8010336:	230c      	movs	r3, #12
 8010338:	f8ca 3000 	str.w	r3, [sl]
 801033c:	89a3      	ldrh	r3, [r4, #12]
 801033e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010342:	81a3      	strh	r3, [r4, #12]
 8010344:	f04f 30ff 	mov.w	r0, #4294967295
 8010348:	e7e9      	b.n	801031e <__ssputs_r+0x8a>
	...

0801034c <_svfiprintf_r>:
 801034c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010350:	4698      	mov	r8, r3
 8010352:	898b      	ldrh	r3, [r1, #12]
 8010354:	061b      	lsls	r3, r3, #24
 8010356:	b09d      	sub	sp, #116	@ 0x74
 8010358:	4607      	mov	r7, r0
 801035a:	460d      	mov	r5, r1
 801035c:	4614      	mov	r4, r2
 801035e:	d510      	bpl.n	8010382 <_svfiprintf_r+0x36>
 8010360:	690b      	ldr	r3, [r1, #16]
 8010362:	b973      	cbnz	r3, 8010382 <_svfiprintf_r+0x36>
 8010364:	2140      	movs	r1, #64	@ 0x40
 8010366:	f7ff fb87 	bl	800fa78 <_malloc_r>
 801036a:	6028      	str	r0, [r5, #0]
 801036c:	6128      	str	r0, [r5, #16]
 801036e:	b930      	cbnz	r0, 801037e <_svfiprintf_r+0x32>
 8010370:	230c      	movs	r3, #12
 8010372:	603b      	str	r3, [r7, #0]
 8010374:	f04f 30ff 	mov.w	r0, #4294967295
 8010378:	b01d      	add	sp, #116	@ 0x74
 801037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801037e:	2340      	movs	r3, #64	@ 0x40
 8010380:	616b      	str	r3, [r5, #20]
 8010382:	2300      	movs	r3, #0
 8010384:	9309      	str	r3, [sp, #36]	@ 0x24
 8010386:	2320      	movs	r3, #32
 8010388:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801038c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010390:	2330      	movs	r3, #48	@ 0x30
 8010392:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010530 <_svfiprintf_r+0x1e4>
 8010396:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801039a:	f04f 0901 	mov.w	r9, #1
 801039e:	4623      	mov	r3, r4
 80103a0:	469a      	mov	sl, r3
 80103a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103a6:	b10a      	cbz	r2, 80103ac <_svfiprintf_r+0x60>
 80103a8:	2a25      	cmp	r2, #37	@ 0x25
 80103aa:	d1f9      	bne.n	80103a0 <_svfiprintf_r+0x54>
 80103ac:	ebba 0b04 	subs.w	fp, sl, r4
 80103b0:	d00b      	beq.n	80103ca <_svfiprintf_r+0x7e>
 80103b2:	465b      	mov	r3, fp
 80103b4:	4622      	mov	r2, r4
 80103b6:	4629      	mov	r1, r5
 80103b8:	4638      	mov	r0, r7
 80103ba:	f7ff ff6b 	bl	8010294 <__ssputs_r>
 80103be:	3001      	adds	r0, #1
 80103c0:	f000 80a7 	beq.w	8010512 <_svfiprintf_r+0x1c6>
 80103c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103c6:	445a      	add	r2, fp
 80103c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80103ca:	f89a 3000 	ldrb.w	r3, [sl]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f000 809f 	beq.w	8010512 <_svfiprintf_r+0x1c6>
 80103d4:	2300      	movs	r3, #0
 80103d6:	f04f 32ff 	mov.w	r2, #4294967295
 80103da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103de:	f10a 0a01 	add.w	sl, sl, #1
 80103e2:	9304      	str	r3, [sp, #16]
 80103e4:	9307      	str	r3, [sp, #28]
 80103e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80103ec:	4654      	mov	r4, sl
 80103ee:	2205      	movs	r2, #5
 80103f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103f4:	484e      	ldr	r0, [pc, #312]	@ (8010530 <_svfiprintf_r+0x1e4>)
 80103f6:	f7ef feeb 	bl	80001d0 <memchr>
 80103fa:	9a04      	ldr	r2, [sp, #16]
 80103fc:	b9d8      	cbnz	r0, 8010436 <_svfiprintf_r+0xea>
 80103fe:	06d0      	lsls	r0, r2, #27
 8010400:	bf44      	itt	mi
 8010402:	2320      	movmi	r3, #32
 8010404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010408:	0711      	lsls	r1, r2, #28
 801040a:	bf44      	itt	mi
 801040c:	232b      	movmi	r3, #43	@ 0x2b
 801040e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010412:	f89a 3000 	ldrb.w	r3, [sl]
 8010416:	2b2a      	cmp	r3, #42	@ 0x2a
 8010418:	d015      	beq.n	8010446 <_svfiprintf_r+0xfa>
 801041a:	9a07      	ldr	r2, [sp, #28]
 801041c:	4654      	mov	r4, sl
 801041e:	2000      	movs	r0, #0
 8010420:	f04f 0c0a 	mov.w	ip, #10
 8010424:	4621      	mov	r1, r4
 8010426:	f811 3b01 	ldrb.w	r3, [r1], #1
 801042a:	3b30      	subs	r3, #48	@ 0x30
 801042c:	2b09      	cmp	r3, #9
 801042e:	d94b      	bls.n	80104c8 <_svfiprintf_r+0x17c>
 8010430:	b1b0      	cbz	r0, 8010460 <_svfiprintf_r+0x114>
 8010432:	9207      	str	r2, [sp, #28]
 8010434:	e014      	b.n	8010460 <_svfiprintf_r+0x114>
 8010436:	eba0 0308 	sub.w	r3, r0, r8
 801043a:	fa09 f303 	lsl.w	r3, r9, r3
 801043e:	4313      	orrs	r3, r2
 8010440:	9304      	str	r3, [sp, #16]
 8010442:	46a2      	mov	sl, r4
 8010444:	e7d2      	b.n	80103ec <_svfiprintf_r+0xa0>
 8010446:	9b03      	ldr	r3, [sp, #12]
 8010448:	1d19      	adds	r1, r3, #4
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	9103      	str	r1, [sp, #12]
 801044e:	2b00      	cmp	r3, #0
 8010450:	bfbb      	ittet	lt
 8010452:	425b      	neglt	r3, r3
 8010454:	f042 0202 	orrlt.w	r2, r2, #2
 8010458:	9307      	strge	r3, [sp, #28]
 801045a:	9307      	strlt	r3, [sp, #28]
 801045c:	bfb8      	it	lt
 801045e:	9204      	strlt	r2, [sp, #16]
 8010460:	7823      	ldrb	r3, [r4, #0]
 8010462:	2b2e      	cmp	r3, #46	@ 0x2e
 8010464:	d10a      	bne.n	801047c <_svfiprintf_r+0x130>
 8010466:	7863      	ldrb	r3, [r4, #1]
 8010468:	2b2a      	cmp	r3, #42	@ 0x2a
 801046a:	d132      	bne.n	80104d2 <_svfiprintf_r+0x186>
 801046c:	9b03      	ldr	r3, [sp, #12]
 801046e:	1d1a      	adds	r2, r3, #4
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	9203      	str	r2, [sp, #12]
 8010474:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010478:	3402      	adds	r4, #2
 801047a:	9305      	str	r3, [sp, #20]
 801047c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010540 <_svfiprintf_r+0x1f4>
 8010480:	7821      	ldrb	r1, [r4, #0]
 8010482:	2203      	movs	r2, #3
 8010484:	4650      	mov	r0, sl
 8010486:	f7ef fea3 	bl	80001d0 <memchr>
 801048a:	b138      	cbz	r0, 801049c <_svfiprintf_r+0x150>
 801048c:	9b04      	ldr	r3, [sp, #16]
 801048e:	eba0 000a 	sub.w	r0, r0, sl
 8010492:	2240      	movs	r2, #64	@ 0x40
 8010494:	4082      	lsls	r2, r0
 8010496:	4313      	orrs	r3, r2
 8010498:	3401      	adds	r4, #1
 801049a:	9304      	str	r3, [sp, #16]
 801049c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104a0:	4824      	ldr	r0, [pc, #144]	@ (8010534 <_svfiprintf_r+0x1e8>)
 80104a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104a6:	2206      	movs	r2, #6
 80104a8:	f7ef fe92 	bl	80001d0 <memchr>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d036      	beq.n	801051e <_svfiprintf_r+0x1d2>
 80104b0:	4b21      	ldr	r3, [pc, #132]	@ (8010538 <_svfiprintf_r+0x1ec>)
 80104b2:	bb1b      	cbnz	r3, 80104fc <_svfiprintf_r+0x1b0>
 80104b4:	9b03      	ldr	r3, [sp, #12]
 80104b6:	3307      	adds	r3, #7
 80104b8:	f023 0307 	bic.w	r3, r3, #7
 80104bc:	3308      	adds	r3, #8
 80104be:	9303      	str	r3, [sp, #12]
 80104c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104c2:	4433      	add	r3, r6
 80104c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80104c6:	e76a      	b.n	801039e <_svfiprintf_r+0x52>
 80104c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80104cc:	460c      	mov	r4, r1
 80104ce:	2001      	movs	r0, #1
 80104d0:	e7a8      	b.n	8010424 <_svfiprintf_r+0xd8>
 80104d2:	2300      	movs	r3, #0
 80104d4:	3401      	adds	r4, #1
 80104d6:	9305      	str	r3, [sp, #20]
 80104d8:	4619      	mov	r1, r3
 80104da:	f04f 0c0a 	mov.w	ip, #10
 80104de:	4620      	mov	r0, r4
 80104e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104e4:	3a30      	subs	r2, #48	@ 0x30
 80104e6:	2a09      	cmp	r2, #9
 80104e8:	d903      	bls.n	80104f2 <_svfiprintf_r+0x1a6>
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d0c6      	beq.n	801047c <_svfiprintf_r+0x130>
 80104ee:	9105      	str	r1, [sp, #20]
 80104f0:	e7c4      	b.n	801047c <_svfiprintf_r+0x130>
 80104f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80104f6:	4604      	mov	r4, r0
 80104f8:	2301      	movs	r3, #1
 80104fa:	e7f0      	b.n	80104de <_svfiprintf_r+0x192>
 80104fc:	ab03      	add	r3, sp, #12
 80104fe:	9300      	str	r3, [sp, #0]
 8010500:	462a      	mov	r2, r5
 8010502:	4b0e      	ldr	r3, [pc, #56]	@ (801053c <_svfiprintf_r+0x1f0>)
 8010504:	a904      	add	r1, sp, #16
 8010506:	4638      	mov	r0, r7
 8010508:	f7fd fe66 	bl	800e1d8 <_printf_float>
 801050c:	1c42      	adds	r2, r0, #1
 801050e:	4606      	mov	r6, r0
 8010510:	d1d6      	bne.n	80104c0 <_svfiprintf_r+0x174>
 8010512:	89ab      	ldrh	r3, [r5, #12]
 8010514:	065b      	lsls	r3, r3, #25
 8010516:	f53f af2d 	bmi.w	8010374 <_svfiprintf_r+0x28>
 801051a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801051c:	e72c      	b.n	8010378 <_svfiprintf_r+0x2c>
 801051e:	ab03      	add	r3, sp, #12
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	462a      	mov	r2, r5
 8010524:	4b05      	ldr	r3, [pc, #20]	@ (801053c <_svfiprintf_r+0x1f0>)
 8010526:	a904      	add	r1, sp, #16
 8010528:	4638      	mov	r0, r7
 801052a:	f7fe f8ed 	bl	800e708 <_printf_i>
 801052e:	e7ed      	b.n	801050c <_svfiprintf_r+0x1c0>
 8010530:	08012a10 	.word	0x08012a10
 8010534:	08012a1a 	.word	0x08012a1a
 8010538:	0800e1d9 	.word	0x0800e1d9
 801053c:	08010295 	.word	0x08010295
 8010540:	08012a16 	.word	0x08012a16

08010544 <__sfputc_r>:
 8010544:	6893      	ldr	r3, [r2, #8]
 8010546:	3b01      	subs	r3, #1
 8010548:	2b00      	cmp	r3, #0
 801054a:	b410      	push	{r4}
 801054c:	6093      	str	r3, [r2, #8]
 801054e:	da08      	bge.n	8010562 <__sfputc_r+0x1e>
 8010550:	6994      	ldr	r4, [r2, #24]
 8010552:	42a3      	cmp	r3, r4
 8010554:	db01      	blt.n	801055a <__sfputc_r+0x16>
 8010556:	290a      	cmp	r1, #10
 8010558:	d103      	bne.n	8010562 <__sfputc_r+0x1e>
 801055a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801055e:	f000 b9df 	b.w	8010920 <__swbuf_r>
 8010562:	6813      	ldr	r3, [r2, #0]
 8010564:	1c58      	adds	r0, r3, #1
 8010566:	6010      	str	r0, [r2, #0]
 8010568:	7019      	strb	r1, [r3, #0]
 801056a:	4608      	mov	r0, r1
 801056c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010570:	4770      	bx	lr

08010572 <__sfputs_r>:
 8010572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010574:	4606      	mov	r6, r0
 8010576:	460f      	mov	r7, r1
 8010578:	4614      	mov	r4, r2
 801057a:	18d5      	adds	r5, r2, r3
 801057c:	42ac      	cmp	r4, r5
 801057e:	d101      	bne.n	8010584 <__sfputs_r+0x12>
 8010580:	2000      	movs	r0, #0
 8010582:	e007      	b.n	8010594 <__sfputs_r+0x22>
 8010584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010588:	463a      	mov	r2, r7
 801058a:	4630      	mov	r0, r6
 801058c:	f7ff ffda 	bl	8010544 <__sfputc_r>
 8010590:	1c43      	adds	r3, r0, #1
 8010592:	d1f3      	bne.n	801057c <__sfputs_r+0xa>
 8010594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010598 <_vfiprintf_r>:
 8010598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	460d      	mov	r5, r1
 801059e:	b09d      	sub	sp, #116	@ 0x74
 80105a0:	4614      	mov	r4, r2
 80105a2:	4698      	mov	r8, r3
 80105a4:	4606      	mov	r6, r0
 80105a6:	b118      	cbz	r0, 80105b0 <_vfiprintf_r+0x18>
 80105a8:	6a03      	ldr	r3, [r0, #32]
 80105aa:	b90b      	cbnz	r3, 80105b0 <_vfiprintf_r+0x18>
 80105ac:	f7fe fa58 	bl	800ea60 <__sinit>
 80105b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105b2:	07d9      	lsls	r1, r3, #31
 80105b4:	d405      	bmi.n	80105c2 <_vfiprintf_r+0x2a>
 80105b6:	89ab      	ldrh	r3, [r5, #12]
 80105b8:	059a      	lsls	r2, r3, #22
 80105ba:	d402      	bmi.n	80105c2 <_vfiprintf_r+0x2a>
 80105bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105be:	f7fe fb78 	bl	800ecb2 <__retarget_lock_acquire_recursive>
 80105c2:	89ab      	ldrh	r3, [r5, #12]
 80105c4:	071b      	lsls	r3, r3, #28
 80105c6:	d501      	bpl.n	80105cc <_vfiprintf_r+0x34>
 80105c8:	692b      	ldr	r3, [r5, #16]
 80105ca:	b99b      	cbnz	r3, 80105f4 <_vfiprintf_r+0x5c>
 80105cc:	4629      	mov	r1, r5
 80105ce:	4630      	mov	r0, r6
 80105d0:	f000 f9e4 	bl	801099c <__swsetup_r>
 80105d4:	b170      	cbz	r0, 80105f4 <_vfiprintf_r+0x5c>
 80105d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105d8:	07dc      	lsls	r4, r3, #31
 80105da:	d504      	bpl.n	80105e6 <_vfiprintf_r+0x4e>
 80105dc:	f04f 30ff 	mov.w	r0, #4294967295
 80105e0:	b01d      	add	sp, #116	@ 0x74
 80105e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e6:	89ab      	ldrh	r3, [r5, #12]
 80105e8:	0598      	lsls	r0, r3, #22
 80105ea:	d4f7      	bmi.n	80105dc <_vfiprintf_r+0x44>
 80105ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105ee:	f7fe fb61 	bl	800ecb4 <__retarget_lock_release_recursive>
 80105f2:	e7f3      	b.n	80105dc <_vfiprintf_r+0x44>
 80105f4:	2300      	movs	r3, #0
 80105f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80105f8:	2320      	movs	r3, #32
 80105fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010602:	2330      	movs	r3, #48	@ 0x30
 8010604:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107b4 <_vfiprintf_r+0x21c>
 8010608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801060c:	f04f 0901 	mov.w	r9, #1
 8010610:	4623      	mov	r3, r4
 8010612:	469a      	mov	sl, r3
 8010614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010618:	b10a      	cbz	r2, 801061e <_vfiprintf_r+0x86>
 801061a:	2a25      	cmp	r2, #37	@ 0x25
 801061c:	d1f9      	bne.n	8010612 <_vfiprintf_r+0x7a>
 801061e:	ebba 0b04 	subs.w	fp, sl, r4
 8010622:	d00b      	beq.n	801063c <_vfiprintf_r+0xa4>
 8010624:	465b      	mov	r3, fp
 8010626:	4622      	mov	r2, r4
 8010628:	4629      	mov	r1, r5
 801062a:	4630      	mov	r0, r6
 801062c:	f7ff ffa1 	bl	8010572 <__sfputs_r>
 8010630:	3001      	adds	r0, #1
 8010632:	f000 80a7 	beq.w	8010784 <_vfiprintf_r+0x1ec>
 8010636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010638:	445a      	add	r2, fp
 801063a:	9209      	str	r2, [sp, #36]	@ 0x24
 801063c:	f89a 3000 	ldrb.w	r3, [sl]
 8010640:	2b00      	cmp	r3, #0
 8010642:	f000 809f 	beq.w	8010784 <_vfiprintf_r+0x1ec>
 8010646:	2300      	movs	r3, #0
 8010648:	f04f 32ff 	mov.w	r2, #4294967295
 801064c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010650:	f10a 0a01 	add.w	sl, sl, #1
 8010654:	9304      	str	r3, [sp, #16]
 8010656:	9307      	str	r3, [sp, #28]
 8010658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801065c:	931a      	str	r3, [sp, #104]	@ 0x68
 801065e:	4654      	mov	r4, sl
 8010660:	2205      	movs	r2, #5
 8010662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010666:	4853      	ldr	r0, [pc, #332]	@ (80107b4 <_vfiprintf_r+0x21c>)
 8010668:	f7ef fdb2 	bl	80001d0 <memchr>
 801066c:	9a04      	ldr	r2, [sp, #16]
 801066e:	b9d8      	cbnz	r0, 80106a8 <_vfiprintf_r+0x110>
 8010670:	06d1      	lsls	r1, r2, #27
 8010672:	bf44      	itt	mi
 8010674:	2320      	movmi	r3, #32
 8010676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801067a:	0713      	lsls	r3, r2, #28
 801067c:	bf44      	itt	mi
 801067e:	232b      	movmi	r3, #43	@ 0x2b
 8010680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010684:	f89a 3000 	ldrb.w	r3, [sl]
 8010688:	2b2a      	cmp	r3, #42	@ 0x2a
 801068a:	d015      	beq.n	80106b8 <_vfiprintf_r+0x120>
 801068c:	9a07      	ldr	r2, [sp, #28]
 801068e:	4654      	mov	r4, sl
 8010690:	2000      	movs	r0, #0
 8010692:	f04f 0c0a 	mov.w	ip, #10
 8010696:	4621      	mov	r1, r4
 8010698:	f811 3b01 	ldrb.w	r3, [r1], #1
 801069c:	3b30      	subs	r3, #48	@ 0x30
 801069e:	2b09      	cmp	r3, #9
 80106a0:	d94b      	bls.n	801073a <_vfiprintf_r+0x1a2>
 80106a2:	b1b0      	cbz	r0, 80106d2 <_vfiprintf_r+0x13a>
 80106a4:	9207      	str	r2, [sp, #28]
 80106a6:	e014      	b.n	80106d2 <_vfiprintf_r+0x13a>
 80106a8:	eba0 0308 	sub.w	r3, r0, r8
 80106ac:	fa09 f303 	lsl.w	r3, r9, r3
 80106b0:	4313      	orrs	r3, r2
 80106b2:	9304      	str	r3, [sp, #16]
 80106b4:	46a2      	mov	sl, r4
 80106b6:	e7d2      	b.n	801065e <_vfiprintf_r+0xc6>
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	1d19      	adds	r1, r3, #4
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	9103      	str	r1, [sp, #12]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	bfbb      	ittet	lt
 80106c4:	425b      	neglt	r3, r3
 80106c6:	f042 0202 	orrlt.w	r2, r2, #2
 80106ca:	9307      	strge	r3, [sp, #28]
 80106cc:	9307      	strlt	r3, [sp, #28]
 80106ce:	bfb8      	it	lt
 80106d0:	9204      	strlt	r2, [sp, #16]
 80106d2:	7823      	ldrb	r3, [r4, #0]
 80106d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80106d6:	d10a      	bne.n	80106ee <_vfiprintf_r+0x156>
 80106d8:	7863      	ldrb	r3, [r4, #1]
 80106da:	2b2a      	cmp	r3, #42	@ 0x2a
 80106dc:	d132      	bne.n	8010744 <_vfiprintf_r+0x1ac>
 80106de:	9b03      	ldr	r3, [sp, #12]
 80106e0:	1d1a      	adds	r2, r3, #4
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	9203      	str	r2, [sp, #12]
 80106e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106ea:	3402      	adds	r4, #2
 80106ec:	9305      	str	r3, [sp, #20]
 80106ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80107c4 <_vfiprintf_r+0x22c>
 80106f2:	7821      	ldrb	r1, [r4, #0]
 80106f4:	2203      	movs	r2, #3
 80106f6:	4650      	mov	r0, sl
 80106f8:	f7ef fd6a 	bl	80001d0 <memchr>
 80106fc:	b138      	cbz	r0, 801070e <_vfiprintf_r+0x176>
 80106fe:	9b04      	ldr	r3, [sp, #16]
 8010700:	eba0 000a 	sub.w	r0, r0, sl
 8010704:	2240      	movs	r2, #64	@ 0x40
 8010706:	4082      	lsls	r2, r0
 8010708:	4313      	orrs	r3, r2
 801070a:	3401      	adds	r4, #1
 801070c:	9304      	str	r3, [sp, #16]
 801070e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010712:	4829      	ldr	r0, [pc, #164]	@ (80107b8 <_vfiprintf_r+0x220>)
 8010714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010718:	2206      	movs	r2, #6
 801071a:	f7ef fd59 	bl	80001d0 <memchr>
 801071e:	2800      	cmp	r0, #0
 8010720:	d03f      	beq.n	80107a2 <_vfiprintf_r+0x20a>
 8010722:	4b26      	ldr	r3, [pc, #152]	@ (80107bc <_vfiprintf_r+0x224>)
 8010724:	bb1b      	cbnz	r3, 801076e <_vfiprintf_r+0x1d6>
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	3307      	adds	r3, #7
 801072a:	f023 0307 	bic.w	r3, r3, #7
 801072e:	3308      	adds	r3, #8
 8010730:	9303      	str	r3, [sp, #12]
 8010732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010734:	443b      	add	r3, r7
 8010736:	9309      	str	r3, [sp, #36]	@ 0x24
 8010738:	e76a      	b.n	8010610 <_vfiprintf_r+0x78>
 801073a:	fb0c 3202 	mla	r2, ip, r2, r3
 801073e:	460c      	mov	r4, r1
 8010740:	2001      	movs	r0, #1
 8010742:	e7a8      	b.n	8010696 <_vfiprintf_r+0xfe>
 8010744:	2300      	movs	r3, #0
 8010746:	3401      	adds	r4, #1
 8010748:	9305      	str	r3, [sp, #20]
 801074a:	4619      	mov	r1, r3
 801074c:	f04f 0c0a 	mov.w	ip, #10
 8010750:	4620      	mov	r0, r4
 8010752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010756:	3a30      	subs	r2, #48	@ 0x30
 8010758:	2a09      	cmp	r2, #9
 801075a:	d903      	bls.n	8010764 <_vfiprintf_r+0x1cc>
 801075c:	2b00      	cmp	r3, #0
 801075e:	d0c6      	beq.n	80106ee <_vfiprintf_r+0x156>
 8010760:	9105      	str	r1, [sp, #20]
 8010762:	e7c4      	b.n	80106ee <_vfiprintf_r+0x156>
 8010764:	fb0c 2101 	mla	r1, ip, r1, r2
 8010768:	4604      	mov	r4, r0
 801076a:	2301      	movs	r3, #1
 801076c:	e7f0      	b.n	8010750 <_vfiprintf_r+0x1b8>
 801076e:	ab03      	add	r3, sp, #12
 8010770:	9300      	str	r3, [sp, #0]
 8010772:	462a      	mov	r2, r5
 8010774:	4b12      	ldr	r3, [pc, #72]	@ (80107c0 <_vfiprintf_r+0x228>)
 8010776:	a904      	add	r1, sp, #16
 8010778:	4630      	mov	r0, r6
 801077a:	f7fd fd2d 	bl	800e1d8 <_printf_float>
 801077e:	4607      	mov	r7, r0
 8010780:	1c78      	adds	r0, r7, #1
 8010782:	d1d6      	bne.n	8010732 <_vfiprintf_r+0x19a>
 8010784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010786:	07d9      	lsls	r1, r3, #31
 8010788:	d405      	bmi.n	8010796 <_vfiprintf_r+0x1fe>
 801078a:	89ab      	ldrh	r3, [r5, #12]
 801078c:	059a      	lsls	r2, r3, #22
 801078e:	d402      	bmi.n	8010796 <_vfiprintf_r+0x1fe>
 8010790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010792:	f7fe fa8f 	bl	800ecb4 <__retarget_lock_release_recursive>
 8010796:	89ab      	ldrh	r3, [r5, #12]
 8010798:	065b      	lsls	r3, r3, #25
 801079a:	f53f af1f 	bmi.w	80105dc <_vfiprintf_r+0x44>
 801079e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107a0:	e71e      	b.n	80105e0 <_vfiprintf_r+0x48>
 80107a2:	ab03      	add	r3, sp, #12
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	462a      	mov	r2, r5
 80107a8:	4b05      	ldr	r3, [pc, #20]	@ (80107c0 <_vfiprintf_r+0x228>)
 80107aa:	a904      	add	r1, sp, #16
 80107ac:	4630      	mov	r0, r6
 80107ae:	f7fd ffab 	bl	800e708 <_printf_i>
 80107b2:	e7e4      	b.n	801077e <_vfiprintf_r+0x1e6>
 80107b4:	08012a10 	.word	0x08012a10
 80107b8:	08012a1a 	.word	0x08012a1a
 80107bc:	0800e1d9 	.word	0x0800e1d9
 80107c0:	08010573 	.word	0x08010573
 80107c4:	08012a16 	.word	0x08012a16

080107c8 <__sflush_r>:
 80107c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80107cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d0:	0716      	lsls	r6, r2, #28
 80107d2:	4605      	mov	r5, r0
 80107d4:	460c      	mov	r4, r1
 80107d6:	d454      	bmi.n	8010882 <__sflush_r+0xba>
 80107d8:	684b      	ldr	r3, [r1, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	dc02      	bgt.n	80107e4 <__sflush_r+0x1c>
 80107de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	dd48      	ble.n	8010876 <__sflush_r+0xae>
 80107e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80107e6:	2e00      	cmp	r6, #0
 80107e8:	d045      	beq.n	8010876 <__sflush_r+0xae>
 80107ea:	2300      	movs	r3, #0
 80107ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80107f0:	682f      	ldr	r7, [r5, #0]
 80107f2:	6a21      	ldr	r1, [r4, #32]
 80107f4:	602b      	str	r3, [r5, #0]
 80107f6:	d030      	beq.n	801085a <__sflush_r+0x92>
 80107f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80107fa:	89a3      	ldrh	r3, [r4, #12]
 80107fc:	0759      	lsls	r1, r3, #29
 80107fe:	d505      	bpl.n	801080c <__sflush_r+0x44>
 8010800:	6863      	ldr	r3, [r4, #4]
 8010802:	1ad2      	subs	r2, r2, r3
 8010804:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010806:	b10b      	cbz	r3, 801080c <__sflush_r+0x44>
 8010808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801080a:	1ad2      	subs	r2, r2, r3
 801080c:	2300      	movs	r3, #0
 801080e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010810:	6a21      	ldr	r1, [r4, #32]
 8010812:	4628      	mov	r0, r5
 8010814:	47b0      	blx	r6
 8010816:	1c43      	adds	r3, r0, #1
 8010818:	89a3      	ldrh	r3, [r4, #12]
 801081a:	d106      	bne.n	801082a <__sflush_r+0x62>
 801081c:	6829      	ldr	r1, [r5, #0]
 801081e:	291d      	cmp	r1, #29
 8010820:	d82b      	bhi.n	801087a <__sflush_r+0xb2>
 8010822:	4a2a      	ldr	r2, [pc, #168]	@ (80108cc <__sflush_r+0x104>)
 8010824:	410a      	asrs	r2, r1
 8010826:	07d6      	lsls	r6, r2, #31
 8010828:	d427      	bmi.n	801087a <__sflush_r+0xb2>
 801082a:	2200      	movs	r2, #0
 801082c:	6062      	str	r2, [r4, #4]
 801082e:	04d9      	lsls	r1, r3, #19
 8010830:	6922      	ldr	r2, [r4, #16]
 8010832:	6022      	str	r2, [r4, #0]
 8010834:	d504      	bpl.n	8010840 <__sflush_r+0x78>
 8010836:	1c42      	adds	r2, r0, #1
 8010838:	d101      	bne.n	801083e <__sflush_r+0x76>
 801083a:	682b      	ldr	r3, [r5, #0]
 801083c:	b903      	cbnz	r3, 8010840 <__sflush_r+0x78>
 801083e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010842:	602f      	str	r7, [r5, #0]
 8010844:	b1b9      	cbz	r1, 8010876 <__sflush_r+0xae>
 8010846:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801084a:	4299      	cmp	r1, r3
 801084c:	d002      	beq.n	8010854 <__sflush_r+0x8c>
 801084e:	4628      	mov	r0, r5
 8010850:	f7ff f89e 	bl	800f990 <_free_r>
 8010854:	2300      	movs	r3, #0
 8010856:	6363      	str	r3, [r4, #52]	@ 0x34
 8010858:	e00d      	b.n	8010876 <__sflush_r+0xae>
 801085a:	2301      	movs	r3, #1
 801085c:	4628      	mov	r0, r5
 801085e:	47b0      	blx	r6
 8010860:	4602      	mov	r2, r0
 8010862:	1c50      	adds	r0, r2, #1
 8010864:	d1c9      	bne.n	80107fa <__sflush_r+0x32>
 8010866:	682b      	ldr	r3, [r5, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d0c6      	beq.n	80107fa <__sflush_r+0x32>
 801086c:	2b1d      	cmp	r3, #29
 801086e:	d001      	beq.n	8010874 <__sflush_r+0xac>
 8010870:	2b16      	cmp	r3, #22
 8010872:	d11e      	bne.n	80108b2 <__sflush_r+0xea>
 8010874:	602f      	str	r7, [r5, #0]
 8010876:	2000      	movs	r0, #0
 8010878:	e022      	b.n	80108c0 <__sflush_r+0xf8>
 801087a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801087e:	b21b      	sxth	r3, r3
 8010880:	e01b      	b.n	80108ba <__sflush_r+0xf2>
 8010882:	690f      	ldr	r7, [r1, #16]
 8010884:	2f00      	cmp	r7, #0
 8010886:	d0f6      	beq.n	8010876 <__sflush_r+0xae>
 8010888:	0793      	lsls	r3, r2, #30
 801088a:	680e      	ldr	r6, [r1, #0]
 801088c:	bf08      	it	eq
 801088e:	694b      	ldreq	r3, [r1, #20]
 8010890:	600f      	str	r7, [r1, #0]
 8010892:	bf18      	it	ne
 8010894:	2300      	movne	r3, #0
 8010896:	eba6 0807 	sub.w	r8, r6, r7
 801089a:	608b      	str	r3, [r1, #8]
 801089c:	f1b8 0f00 	cmp.w	r8, #0
 80108a0:	dde9      	ble.n	8010876 <__sflush_r+0xae>
 80108a2:	6a21      	ldr	r1, [r4, #32]
 80108a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80108a6:	4643      	mov	r3, r8
 80108a8:	463a      	mov	r2, r7
 80108aa:	4628      	mov	r0, r5
 80108ac:	47b0      	blx	r6
 80108ae:	2800      	cmp	r0, #0
 80108b0:	dc08      	bgt.n	80108c4 <__sflush_r+0xfc>
 80108b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108ba:	81a3      	strh	r3, [r4, #12]
 80108bc:	f04f 30ff 	mov.w	r0, #4294967295
 80108c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c4:	4407      	add	r7, r0
 80108c6:	eba8 0800 	sub.w	r8, r8, r0
 80108ca:	e7e7      	b.n	801089c <__sflush_r+0xd4>
 80108cc:	dfbffffe 	.word	0xdfbffffe

080108d0 <_fflush_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	690b      	ldr	r3, [r1, #16]
 80108d4:	4605      	mov	r5, r0
 80108d6:	460c      	mov	r4, r1
 80108d8:	b913      	cbnz	r3, 80108e0 <_fflush_r+0x10>
 80108da:	2500      	movs	r5, #0
 80108dc:	4628      	mov	r0, r5
 80108de:	bd38      	pop	{r3, r4, r5, pc}
 80108e0:	b118      	cbz	r0, 80108ea <_fflush_r+0x1a>
 80108e2:	6a03      	ldr	r3, [r0, #32]
 80108e4:	b90b      	cbnz	r3, 80108ea <_fflush_r+0x1a>
 80108e6:	f7fe f8bb 	bl	800ea60 <__sinit>
 80108ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d0f3      	beq.n	80108da <_fflush_r+0xa>
 80108f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80108f4:	07d0      	lsls	r0, r2, #31
 80108f6:	d404      	bmi.n	8010902 <_fflush_r+0x32>
 80108f8:	0599      	lsls	r1, r3, #22
 80108fa:	d402      	bmi.n	8010902 <_fflush_r+0x32>
 80108fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108fe:	f7fe f9d8 	bl	800ecb2 <__retarget_lock_acquire_recursive>
 8010902:	4628      	mov	r0, r5
 8010904:	4621      	mov	r1, r4
 8010906:	f7ff ff5f 	bl	80107c8 <__sflush_r>
 801090a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801090c:	07da      	lsls	r2, r3, #31
 801090e:	4605      	mov	r5, r0
 8010910:	d4e4      	bmi.n	80108dc <_fflush_r+0xc>
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	059b      	lsls	r3, r3, #22
 8010916:	d4e1      	bmi.n	80108dc <_fflush_r+0xc>
 8010918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801091a:	f7fe f9cb 	bl	800ecb4 <__retarget_lock_release_recursive>
 801091e:	e7dd      	b.n	80108dc <_fflush_r+0xc>

08010920 <__swbuf_r>:
 8010920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010922:	460e      	mov	r6, r1
 8010924:	4614      	mov	r4, r2
 8010926:	4605      	mov	r5, r0
 8010928:	b118      	cbz	r0, 8010932 <__swbuf_r+0x12>
 801092a:	6a03      	ldr	r3, [r0, #32]
 801092c:	b90b      	cbnz	r3, 8010932 <__swbuf_r+0x12>
 801092e:	f7fe f897 	bl	800ea60 <__sinit>
 8010932:	69a3      	ldr	r3, [r4, #24]
 8010934:	60a3      	str	r3, [r4, #8]
 8010936:	89a3      	ldrh	r3, [r4, #12]
 8010938:	071a      	lsls	r2, r3, #28
 801093a:	d501      	bpl.n	8010940 <__swbuf_r+0x20>
 801093c:	6923      	ldr	r3, [r4, #16]
 801093e:	b943      	cbnz	r3, 8010952 <__swbuf_r+0x32>
 8010940:	4621      	mov	r1, r4
 8010942:	4628      	mov	r0, r5
 8010944:	f000 f82a 	bl	801099c <__swsetup_r>
 8010948:	b118      	cbz	r0, 8010952 <__swbuf_r+0x32>
 801094a:	f04f 37ff 	mov.w	r7, #4294967295
 801094e:	4638      	mov	r0, r7
 8010950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010952:	6823      	ldr	r3, [r4, #0]
 8010954:	6922      	ldr	r2, [r4, #16]
 8010956:	1a98      	subs	r0, r3, r2
 8010958:	6963      	ldr	r3, [r4, #20]
 801095a:	b2f6      	uxtb	r6, r6
 801095c:	4283      	cmp	r3, r0
 801095e:	4637      	mov	r7, r6
 8010960:	dc05      	bgt.n	801096e <__swbuf_r+0x4e>
 8010962:	4621      	mov	r1, r4
 8010964:	4628      	mov	r0, r5
 8010966:	f7ff ffb3 	bl	80108d0 <_fflush_r>
 801096a:	2800      	cmp	r0, #0
 801096c:	d1ed      	bne.n	801094a <__swbuf_r+0x2a>
 801096e:	68a3      	ldr	r3, [r4, #8]
 8010970:	3b01      	subs	r3, #1
 8010972:	60a3      	str	r3, [r4, #8]
 8010974:	6823      	ldr	r3, [r4, #0]
 8010976:	1c5a      	adds	r2, r3, #1
 8010978:	6022      	str	r2, [r4, #0]
 801097a:	701e      	strb	r6, [r3, #0]
 801097c:	6962      	ldr	r2, [r4, #20]
 801097e:	1c43      	adds	r3, r0, #1
 8010980:	429a      	cmp	r2, r3
 8010982:	d004      	beq.n	801098e <__swbuf_r+0x6e>
 8010984:	89a3      	ldrh	r3, [r4, #12]
 8010986:	07db      	lsls	r3, r3, #31
 8010988:	d5e1      	bpl.n	801094e <__swbuf_r+0x2e>
 801098a:	2e0a      	cmp	r6, #10
 801098c:	d1df      	bne.n	801094e <__swbuf_r+0x2e>
 801098e:	4621      	mov	r1, r4
 8010990:	4628      	mov	r0, r5
 8010992:	f7ff ff9d 	bl	80108d0 <_fflush_r>
 8010996:	2800      	cmp	r0, #0
 8010998:	d0d9      	beq.n	801094e <__swbuf_r+0x2e>
 801099a:	e7d6      	b.n	801094a <__swbuf_r+0x2a>

0801099c <__swsetup_r>:
 801099c:	b538      	push	{r3, r4, r5, lr}
 801099e:	4b29      	ldr	r3, [pc, #164]	@ (8010a44 <__swsetup_r+0xa8>)
 80109a0:	4605      	mov	r5, r0
 80109a2:	6818      	ldr	r0, [r3, #0]
 80109a4:	460c      	mov	r4, r1
 80109a6:	b118      	cbz	r0, 80109b0 <__swsetup_r+0x14>
 80109a8:	6a03      	ldr	r3, [r0, #32]
 80109aa:	b90b      	cbnz	r3, 80109b0 <__swsetup_r+0x14>
 80109ac:	f7fe f858 	bl	800ea60 <__sinit>
 80109b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109b4:	0719      	lsls	r1, r3, #28
 80109b6:	d422      	bmi.n	80109fe <__swsetup_r+0x62>
 80109b8:	06da      	lsls	r2, r3, #27
 80109ba:	d407      	bmi.n	80109cc <__swsetup_r+0x30>
 80109bc:	2209      	movs	r2, #9
 80109be:	602a      	str	r2, [r5, #0]
 80109c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109c4:	81a3      	strh	r3, [r4, #12]
 80109c6:	f04f 30ff 	mov.w	r0, #4294967295
 80109ca:	e033      	b.n	8010a34 <__swsetup_r+0x98>
 80109cc:	0758      	lsls	r0, r3, #29
 80109ce:	d512      	bpl.n	80109f6 <__swsetup_r+0x5a>
 80109d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109d2:	b141      	cbz	r1, 80109e6 <__swsetup_r+0x4a>
 80109d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109d8:	4299      	cmp	r1, r3
 80109da:	d002      	beq.n	80109e2 <__swsetup_r+0x46>
 80109dc:	4628      	mov	r0, r5
 80109de:	f7fe ffd7 	bl	800f990 <_free_r>
 80109e2:	2300      	movs	r3, #0
 80109e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80109e6:	89a3      	ldrh	r3, [r4, #12]
 80109e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80109ec:	81a3      	strh	r3, [r4, #12]
 80109ee:	2300      	movs	r3, #0
 80109f0:	6063      	str	r3, [r4, #4]
 80109f2:	6923      	ldr	r3, [r4, #16]
 80109f4:	6023      	str	r3, [r4, #0]
 80109f6:	89a3      	ldrh	r3, [r4, #12]
 80109f8:	f043 0308 	orr.w	r3, r3, #8
 80109fc:	81a3      	strh	r3, [r4, #12]
 80109fe:	6923      	ldr	r3, [r4, #16]
 8010a00:	b94b      	cbnz	r3, 8010a16 <__swsetup_r+0x7a>
 8010a02:	89a3      	ldrh	r3, [r4, #12]
 8010a04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a0c:	d003      	beq.n	8010a16 <__swsetup_r+0x7a>
 8010a0e:	4621      	mov	r1, r4
 8010a10:	4628      	mov	r0, r5
 8010a12:	f000 f8fb 	bl	8010c0c <__smakebuf_r>
 8010a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a1a:	f013 0201 	ands.w	r2, r3, #1
 8010a1e:	d00a      	beq.n	8010a36 <__swsetup_r+0x9a>
 8010a20:	2200      	movs	r2, #0
 8010a22:	60a2      	str	r2, [r4, #8]
 8010a24:	6962      	ldr	r2, [r4, #20]
 8010a26:	4252      	negs	r2, r2
 8010a28:	61a2      	str	r2, [r4, #24]
 8010a2a:	6922      	ldr	r2, [r4, #16]
 8010a2c:	b942      	cbnz	r2, 8010a40 <__swsetup_r+0xa4>
 8010a2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010a32:	d1c5      	bne.n	80109c0 <__swsetup_r+0x24>
 8010a34:	bd38      	pop	{r3, r4, r5, pc}
 8010a36:	0799      	lsls	r1, r3, #30
 8010a38:	bf58      	it	pl
 8010a3a:	6962      	ldrpl	r2, [r4, #20]
 8010a3c:	60a2      	str	r2, [r4, #8]
 8010a3e:	e7f4      	b.n	8010a2a <__swsetup_r+0x8e>
 8010a40:	2000      	movs	r0, #0
 8010a42:	e7f7      	b.n	8010a34 <__swsetup_r+0x98>
 8010a44:	20000138 	.word	0x20000138

08010a48 <memmove>:
 8010a48:	4288      	cmp	r0, r1
 8010a4a:	b510      	push	{r4, lr}
 8010a4c:	eb01 0402 	add.w	r4, r1, r2
 8010a50:	d902      	bls.n	8010a58 <memmove+0x10>
 8010a52:	4284      	cmp	r4, r0
 8010a54:	4623      	mov	r3, r4
 8010a56:	d807      	bhi.n	8010a68 <memmove+0x20>
 8010a58:	1e43      	subs	r3, r0, #1
 8010a5a:	42a1      	cmp	r1, r4
 8010a5c:	d008      	beq.n	8010a70 <memmove+0x28>
 8010a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a66:	e7f8      	b.n	8010a5a <memmove+0x12>
 8010a68:	4402      	add	r2, r0
 8010a6a:	4601      	mov	r1, r0
 8010a6c:	428a      	cmp	r2, r1
 8010a6e:	d100      	bne.n	8010a72 <memmove+0x2a>
 8010a70:	bd10      	pop	{r4, pc}
 8010a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a7a:	e7f7      	b.n	8010a6c <memmove+0x24>

08010a7c <_sbrk_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4d06      	ldr	r5, [pc, #24]	@ (8010a98 <_sbrk_r+0x1c>)
 8010a80:	2300      	movs	r3, #0
 8010a82:	4604      	mov	r4, r0
 8010a84:	4608      	mov	r0, r1
 8010a86:	602b      	str	r3, [r5, #0]
 8010a88:	f7f3 fbfe 	bl	8004288 <_sbrk>
 8010a8c:	1c43      	adds	r3, r0, #1
 8010a8e:	d102      	bne.n	8010a96 <_sbrk_r+0x1a>
 8010a90:	682b      	ldr	r3, [r5, #0]
 8010a92:	b103      	cbz	r3, 8010a96 <_sbrk_r+0x1a>
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	bd38      	pop	{r3, r4, r5, pc}
 8010a98:	20002804 	.word	0x20002804

08010a9c <__assert_func>:
 8010a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a9e:	4614      	mov	r4, r2
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	4b09      	ldr	r3, [pc, #36]	@ (8010ac8 <__assert_func+0x2c>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	68d8      	ldr	r0, [r3, #12]
 8010aaa:	b954      	cbnz	r4, 8010ac2 <__assert_func+0x26>
 8010aac:	4b07      	ldr	r3, [pc, #28]	@ (8010acc <__assert_func+0x30>)
 8010aae:	461c      	mov	r4, r3
 8010ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ab4:	9100      	str	r1, [sp, #0]
 8010ab6:	462b      	mov	r3, r5
 8010ab8:	4905      	ldr	r1, [pc, #20]	@ (8010ad0 <__assert_func+0x34>)
 8010aba:	f000 f86f 	bl	8010b9c <fiprintf>
 8010abe:	f000 f903 	bl	8010cc8 <abort>
 8010ac2:	4b04      	ldr	r3, [pc, #16]	@ (8010ad4 <__assert_func+0x38>)
 8010ac4:	e7f4      	b.n	8010ab0 <__assert_func+0x14>
 8010ac6:	bf00      	nop
 8010ac8:	20000138 	.word	0x20000138
 8010acc:	08012a66 	.word	0x08012a66
 8010ad0:	08012a38 	.word	0x08012a38
 8010ad4:	08012a2b 	.word	0x08012a2b

08010ad8 <_calloc_r>:
 8010ad8:	b570      	push	{r4, r5, r6, lr}
 8010ada:	fba1 5402 	umull	r5, r4, r1, r2
 8010ade:	b93c      	cbnz	r4, 8010af0 <_calloc_r+0x18>
 8010ae0:	4629      	mov	r1, r5
 8010ae2:	f7fe ffc9 	bl	800fa78 <_malloc_r>
 8010ae6:	4606      	mov	r6, r0
 8010ae8:	b928      	cbnz	r0, 8010af6 <_calloc_r+0x1e>
 8010aea:	2600      	movs	r6, #0
 8010aec:	4630      	mov	r0, r6
 8010aee:	bd70      	pop	{r4, r5, r6, pc}
 8010af0:	220c      	movs	r2, #12
 8010af2:	6002      	str	r2, [r0, #0]
 8010af4:	e7f9      	b.n	8010aea <_calloc_r+0x12>
 8010af6:	462a      	mov	r2, r5
 8010af8:	4621      	mov	r1, r4
 8010afa:	f7fe f85c 	bl	800ebb6 <memset>
 8010afe:	e7f5      	b.n	8010aec <_calloc_r+0x14>

08010b00 <__ascii_mbtowc>:
 8010b00:	b082      	sub	sp, #8
 8010b02:	b901      	cbnz	r1, 8010b06 <__ascii_mbtowc+0x6>
 8010b04:	a901      	add	r1, sp, #4
 8010b06:	b142      	cbz	r2, 8010b1a <__ascii_mbtowc+0x1a>
 8010b08:	b14b      	cbz	r3, 8010b1e <__ascii_mbtowc+0x1e>
 8010b0a:	7813      	ldrb	r3, [r2, #0]
 8010b0c:	600b      	str	r3, [r1, #0]
 8010b0e:	7812      	ldrb	r2, [r2, #0]
 8010b10:	1e10      	subs	r0, r2, #0
 8010b12:	bf18      	it	ne
 8010b14:	2001      	movne	r0, #1
 8010b16:	b002      	add	sp, #8
 8010b18:	4770      	bx	lr
 8010b1a:	4610      	mov	r0, r2
 8010b1c:	e7fb      	b.n	8010b16 <__ascii_mbtowc+0x16>
 8010b1e:	f06f 0001 	mvn.w	r0, #1
 8010b22:	e7f8      	b.n	8010b16 <__ascii_mbtowc+0x16>

08010b24 <_realloc_r>:
 8010b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b28:	4680      	mov	r8, r0
 8010b2a:	4615      	mov	r5, r2
 8010b2c:	460c      	mov	r4, r1
 8010b2e:	b921      	cbnz	r1, 8010b3a <_realloc_r+0x16>
 8010b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b34:	4611      	mov	r1, r2
 8010b36:	f7fe bf9f 	b.w	800fa78 <_malloc_r>
 8010b3a:	b92a      	cbnz	r2, 8010b48 <_realloc_r+0x24>
 8010b3c:	f7fe ff28 	bl	800f990 <_free_r>
 8010b40:	2400      	movs	r4, #0
 8010b42:	4620      	mov	r0, r4
 8010b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b48:	f000 f8c5 	bl	8010cd6 <_malloc_usable_size_r>
 8010b4c:	4285      	cmp	r5, r0
 8010b4e:	4606      	mov	r6, r0
 8010b50:	d802      	bhi.n	8010b58 <_realloc_r+0x34>
 8010b52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010b56:	d8f4      	bhi.n	8010b42 <_realloc_r+0x1e>
 8010b58:	4629      	mov	r1, r5
 8010b5a:	4640      	mov	r0, r8
 8010b5c:	f7fe ff8c 	bl	800fa78 <_malloc_r>
 8010b60:	4607      	mov	r7, r0
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d0ec      	beq.n	8010b40 <_realloc_r+0x1c>
 8010b66:	42b5      	cmp	r5, r6
 8010b68:	462a      	mov	r2, r5
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	bf28      	it	cs
 8010b6e:	4632      	movcs	r2, r6
 8010b70:	f7fe f8a1 	bl	800ecb6 <memcpy>
 8010b74:	4621      	mov	r1, r4
 8010b76:	4640      	mov	r0, r8
 8010b78:	f7fe ff0a 	bl	800f990 <_free_r>
 8010b7c:	463c      	mov	r4, r7
 8010b7e:	e7e0      	b.n	8010b42 <_realloc_r+0x1e>

08010b80 <__ascii_wctomb>:
 8010b80:	4603      	mov	r3, r0
 8010b82:	4608      	mov	r0, r1
 8010b84:	b141      	cbz	r1, 8010b98 <__ascii_wctomb+0x18>
 8010b86:	2aff      	cmp	r2, #255	@ 0xff
 8010b88:	d904      	bls.n	8010b94 <__ascii_wctomb+0x14>
 8010b8a:	228a      	movs	r2, #138	@ 0x8a
 8010b8c:	601a      	str	r2, [r3, #0]
 8010b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b92:	4770      	bx	lr
 8010b94:	700a      	strb	r2, [r1, #0]
 8010b96:	2001      	movs	r0, #1
 8010b98:	4770      	bx	lr
	...

08010b9c <fiprintf>:
 8010b9c:	b40e      	push	{r1, r2, r3}
 8010b9e:	b503      	push	{r0, r1, lr}
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	ab03      	add	r3, sp, #12
 8010ba4:	4805      	ldr	r0, [pc, #20]	@ (8010bbc <fiprintf+0x20>)
 8010ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010baa:	6800      	ldr	r0, [r0, #0]
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	f7ff fcf3 	bl	8010598 <_vfiprintf_r>
 8010bb2:	b002      	add	sp, #8
 8010bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bb8:	b003      	add	sp, #12
 8010bba:	4770      	bx	lr
 8010bbc:	20000138 	.word	0x20000138

08010bc0 <__swhatbuf_r>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	460c      	mov	r4, r1
 8010bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bc8:	2900      	cmp	r1, #0
 8010bca:	b096      	sub	sp, #88	@ 0x58
 8010bcc:	4615      	mov	r5, r2
 8010bce:	461e      	mov	r6, r3
 8010bd0:	da0d      	bge.n	8010bee <__swhatbuf_r+0x2e>
 8010bd2:	89a3      	ldrh	r3, [r4, #12]
 8010bd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010bd8:	f04f 0100 	mov.w	r1, #0
 8010bdc:	bf14      	ite	ne
 8010bde:	2340      	movne	r3, #64	@ 0x40
 8010be0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010be4:	2000      	movs	r0, #0
 8010be6:	6031      	str	r1, [r6, #0]
 8010be8:	602b      	str	r3, [r5, #0]
 8010bea:	b016      	add	sp, #88	@ 0x58
 8010bec:	bd70      	pop	{r4, r5, r6, pc}
 8010bee:	466a      	mov	r2, sp
 8010bf0:	f000 f848 	bl	8010c84 <_fstat_r>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	dbec      	blt.n	8010bd2 <__swhatbuf_r+0x12>
 8010bf8:	9901      	ldr	r1, [sp, #4]
 8010bfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010bfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c02:	4259      	negs	r1, r3
 8010c04:	4159      	adcs	r1, r3
 8010c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c0a:	e7eb      	b.n	8010be4 <__swhatbuf_r+0x24>

08010c0c <__smakebuf_r>:
 8010c0c:	898b      	ldrh	r3, [r1, #12]
 8010c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c10:	079d      	lsls	r5, r3, #30
 8010c12:	4606      	mov	r6, r0
 8010c14:	460c      	mov	r4, r1
 8010c16:	d507      	bpl.n	8010c28 <__smakebuf_r+0x1c>
 8010c18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c1c:	6023      	str	r3, [r4, #0]
 8010c1e:	6123      	str	r3, [r4, #16]
 8010c20:	2301      	movs	r3, #1
 8010c22:	6163      	str	r3, [r4, #20]
 8010c24:	b003      	add	sp, #12
 8010c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c28:	ab01      	add	r3, sp, #4
 8010c2a:	466a      	mov	r2, sp
 8010c2c:	f7ff ffc8 	bl	8010bc0 <__swhatbuf_r>
 8010c30:	9f00      	ldr	r7, [sp, #0]
 8010c32:	4605      	mov	r5, r0
 8010c34:	4639      	mov	r1, r7
 8010c36:	4630      	mov	r0, r6
 8010c38:	f7fe ff1e 	bl	800fa78 <_malloc_r>
 8010c3c:	b948      	cbnz	r0, 8010c52 <__smakebuf_r+0x46>
 8010c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c42:	059a      	lsls	r2, r3, #22
 8010c44:	d4ee      	bmi.n	8010c24 <__smakebuf_r+0x18>
 8010c46:	f023 0303 	bic.w	r3, r3, #3
 8010c4a:	f043 0302 	orr.w	r3, r3, #2
 8010c4e:	81a3      	strh	r3, [r4, #12]
 8010c50:	e7e2      	b.n	8010c18 <__smakebuf_r+0xc>
 8010c52:	89a3      	ldrh	r3, [r4, #12]
 8010c54:	6020      	str	r0, [r4, #0]
 8010c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c5a:	81a3      	strh	r3, [r4, #12]
 8010c5c:	9b01      	ldr	r3, [sp, #4]
 8010c5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c62:	b15b      	cbz	r3, 8010c7c <__smakebuf_r+0x70>
 8010c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c68:	4630      	mov	r0, r6
 8010c6a:	f000 f81d 	bl	8010ca8 <_isatty_r>
 8010c6e:	b128      	cbz	r0, 8010c7c <__smakebuf_r+0x70>
 8010c70:	89a3      	ldrh	r3, [r4, #12]
 8010c72:	f023 0303 	bic.w	r3, r3, #3
 8010c76:	f043 0301 	orr.w	r3, r3, #1
 8010c7a:	81a3      	strh	r3, [r4, #12]
 8010c7c:	89a3      	ldrh	r3, [r4, #12]
 8010c7e:	431d      	orrs	r5, r3
 8010c80:	81a5      	strh	r5, [r4, #12]
 8010c82:	e7cf      	b.n	8010c24 <__smakebuf_r+0x18>

08010c84 <_fstat_r>:
 8010c84:	b538      	push	{r3, r4, r5, lr}
 8010c86:	4d07      	ldr	r5, [pc, #28]	@ (8010ca4 <_fstat_r+0x20>)
 8010c88:	2300      	movs	r3, #0
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	4608      	mov	r0, r1
 8010c8e:	4611      	mov	r1, r2
 8010c90:	602b      	str	r3, [r5, #0]
 8010c92:	f7f3 fad1 	bl	8004238 <_fstat>
 8010c96:	1c43      	adds	r3, r0, #1
 8010c98:	d102      	bne.n	8010ca0 <_fstat_r+0x1c>
 8010c9a:	682b      	ldr	r3, [r5, #0]
 8010c9c:	b103      	cbz	r3, 8010ca0 <_fstat_r+0x1c>
 8010c9e:	6023      	str	r3, [r4, #0]
 8010ca0:	bd38      	pop	{r3, r4, r5, pc}
 8010ca2:	bf00      	nop
 8010ca4:	20002804 	.word	0x20002804

08010ca8 <_isatty_r>:
 8010ca8:	b538      	push	{r3, r4, r5, lr}
 8010caa:	4d06      	ldr	r5, [pc, #24]	@ (8010cc4 <_isatty_r+0x1c>)
 8010cac:	2300      	movs	r3, #0
 8010cae:	4604      	mov	r4, r0
 8010cb0:	4608      	mov	r0, r1
 8010cb2:	602b      	str	r3, [r5, #0]
 8010cb4:	f7f3 fad0 	bl	8004258 <_isatty>
 8010cb8:	1c43      	adds	r3, r0, #1
 8010cba:	d102      	bne.n	8010cc2 <_isatty_r+0x1a>
 8010cbc:	682b      	ldr	r3, [r5, #0]
 8010cbe:	b103      	cbz	r3, 8010cc2 <_isatty_r+0x1a>
 8010cc0:	6023      	str	r3, [r4, #0]
 8010cc2:	bd38      	pop	{r3, r4, r5, pc}
 8010cc4:	20002804 	.word	0x20002804

08010cc8 <abort>:
 8010cc8:	b508      	push	{r3, lr}
 8010cca:	2006      	movs	r0, #6
 8010ccc:	f000 f834 	bl	8010d38 <raise>
 8010cd0:	2001      	movs	r0, #1
 8010cd2:	f7f3 fa61 	bl	8004198 <_exit>

08010cd6 <_malloc_usable_size_r>:
 8010cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cda:	1f18      	subs	r0, r3, #4
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	bfbc      	itt	lt
 8010ce0:	580b      	ldrlt	r3, [r1, r0]
 8010ce2:	18c0      	addlt	r0, r0, r3
 8010ce4:	4770      	bx	lr

08010ce6 <_raise_r>:
 8010ce6:	291f      	cmp	r1, #31
 8010ce8:	b538      	push	{r3, r4, r5, lr}
 8010cea:	4605      	mov	r5, r0
 8010cec:	460c      	mov	r4, r1
 8010cee:	d904      	bls.n	8010cfa <_raise_r+0x14>
 8010cf0:	2316      	movs	r3, #22
 8010cf2:	6003      	str	r3, [r0, #0]
 8010cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf8:	bd38      	pop	{r3, r4, r5, pc}
 8010cfa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010cfc:	b112      	cbz	r2, 8010d04 <_raise_r+0x1e>
 8010cfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d02:	b94b      	cbnz	r3, 8010d18 <_raise_r+0x32>
 8010d04:	4628      	mov	r0, r5
 8010d06:	f000 f831 	bl	8010d6c <_getpid_r>
 8010d0a:	4622      	mov	r2, r4
 8010d0c:	4601      	mov	r1, r0
 8010d0e:	4628      	mov	r0, r5
 8010d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d14:	f000 b818 	b.w	8010d48 <_kill_r>
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d00a      	beq.n	8010d32 <_raise_r+0x4c>
 8010d1c:	1c59      	adds	r1, r3, #1
 8010d1e:	d103      	bne.n	8010d28 <_raise_r+0x42>
 8010d20:	2316      	movs	r3, #22
 8010d22:	6003      	str	r3, [r0, #0]
 8010d24:	2001      	movs	r0, #1
 8010d26:	e7e7      	b.n	8010cf8 <_raise_r+0x12>
 8010d28:	2100      	movs	r1, #0
 8010d2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d2e:	4620      	mov	r0, r4
 8010d30:	4798      	blx	r3
 8010d32:	2000      	movs	r0, #0
 8010d34:	e7e0      	b.n	8010cf8 <_raise_r+0x12>
	...

08010d38 <raise>:
 8010d38:	4b02      	ldr	r3, [pc, #8]	@ (8010d44 <raise+0xc>)
 8010d3a:	4601      	mov	r1, r0
 8010d3c:	6818      	ldr	r0, [r3, #0]
 8010d3e:	f7ff bfd2 	b.w	8010ce6 <_raise_r>
 8010d42:	bf00      	nop
 8010d44:	20000138 	.word	0x20000138

08010d48 <_kill_r>:
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	4d07      	ldr	r5, [pc, #28]	@ (8010d68 <_kill_r+0x20>)
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	4604      	mov	r4, r0
 8010d50:	4608      	mov	r0, r1
 8010d52:	4611      	mov	r1, r2
 8010d54:	602b      	str	r3, [r5, #0]
 8010d56:	f7f3 fa0f 	bl	8004178 <_kill>
 8010d5a:	1c43      	adds	r3, r0, #1
 8010d5c:	d102      	bne.n	8010d64 <_kill_r+0x1c>
 8010d5e:	682b      	ldr	r3, [r5, #0]
 8010d60:	b103      	cbz	r3, 8010d64 <_kill_r+0x1c>
 8010d62:	6023      	str	r3, [r4, #0]
 8010d64:	bd38      	pop	{r3, r4, r5, pc}
 8010d66:	bf00      	nop
 8010d68:	20002804 	.word	0x20002804

08010d6c <_getpid_r>:
 8010d6c:	f7f3 b9fc 	b.w	8004168 <_getpid>

08010d70 <asin>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	ed2d 8b02 	vpush	{d8}
 8010d76:	ec55 4b10 	vmov	r4, r5, d0
 8010d7a:	f000 f9ed 	bl	8011158 <__ieee754_asin>
 8010d7e:	4622      	mov	r2, r4
 8010d80:	462b      	mov	r3, r5
 8010d82:	4620      	mov	r0, r4
 8010d84:	4629      	mov	r1, r5
 8010d86:	eeb0 8a40 	vmov.f32	s16, s0
 8010d8a:	eef0 8a60 	vmov.f32	s17, s1
 8010d8e:	f7ef fecd 	bl	8000b2c <__aeabi_dcmpun>
 8010d92:	b9a8      	cbnz	r0, 8010dc0 <asin+0x50>
 8010d94:	ec45 4b10 	vmov	d0, r4, r5
 8010d98:	f000 f820 	bl	8010ddc <fabs>
 8010d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8010dd0 <asin+0x60>)
 8010d9e:	ec51 0b10 	vmov	r0, r1, d0
 8010da2:	2200      	movs	r2, #0
 8010da4:	f7ef feb8 	bl	8000b18 <__aeabi_dcmpgt>
 8010da8:	b150      	cbz	r0, 8010dc0 <asin+0x50>
 8010daa:	f7fd ff57 	bl	800ec5c <__errno>
 8010dae:	ecbd 8b02 	vpop	{d8}
 8010db2:	2321      	movs	r3, #33	@ 0x21
 8010db4:	6003      	str	r3, [r0, #0]
 8010db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dba:	4806      	ldr	r0, [pc, #24]	@ (8010dd4 <asin+0x64>)
 8010dbc:	f000 b8e0 	b.w	8010f80 <nan>
 8010dc0:	eeb0 0a48 	vmov.f32	s0, s16
 8010dc4:	eef0 0a68 	vmov.f32	s1, s17
 8010dc8:	ecbd 8b02 	vpop	{d8}
 8010dcc:	bd38      	pop	{r3, r4, r5, pc}
 8010dce:	bf00      	nop
 8010dd0:	3ff00000 	.word	0x3ff00000
 8010dd4:	08012a66 	.word	0x08012a66

08010dd8 <atan2>:
 8010dd8:	f000 bbc2 	b.w	8011560 <__ieee754_atan2>

08010ddc <fabs>:
 8010ddc:	ec51 0b10 	vmov	r0, r1, d0
 8010de0:	4602      	mov	r2, r0
 8010de2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010de6:	ec43 2b10 	vmov	d0, r2, r3
 8010dea:	4770      	bx	lr

08010dec <expf>:
 8010dec:	b508      	push	{r3, lr}
 8010dee:	ed2d 8b02 	vpush	{d8}
 8010df2:	eef0 8a40 	vmov.f32	s17, s0
 8010df6:	f000 feb3 	bl	8011b60 <__ieee754_expf>
 8010dfa:	eeb0 8a40 	vmov.f32	s16, s0
 8010dfe:	eeb0 0a68 	vmov.f32	s0, s17
 8010e02:	f000 f8c5 	bl	8010f90 <finitef>
 8010e06:	b160      	cbz	r0, 8010e22 <expf+0x36>
 8010e08:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8010e48 <expf+0x5c>
 8010e0c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e14:	dd0a      	ble.n	8010e2c <expf+0x40>
 8010e16:	f7fd ff21 	bl	800ec5c <__errno>
 8010e1a:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8010e4c <expf+0x60>
 8010e1e:	2322      	movs	r3, #34	@ 0x22
 8010e20:	6003      	str	r3, [r0, #0]
 8010e22:	eeb0 0a48 	vmov.f32	s0, s16
 8010e26:	ecbd 8b02 	vpop	{d8}
 8010e2a:	bd08      	pop	{r3, pc}
 8010e2c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010e50 <expf+0x64>
 8010e30:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e38:	d5f3      	bpl.n	8010e22 <expf+0x36>
 8010e3a:	f7fd ff0f 	bl	800ec5c <__errno>
 8010e3e:	2322      	movs	r3, #34	@ 0x22
 8010e40:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8010e54 <expf+0x68>
 8010e44:	6003      	str	r3, [r0, #0]
 8010e46:	e7ec      	b.n	8010e22 <expf+0x36>
 8010e48:	42b17217 	.word	0x42b17217
 8010e4c:	7f800000 	.word	0x7f800000
 8010e50:	c2cff1b5 	.word	0xc2cff1b5
 8010e54:	00000000 	.word	0x00000000

08010e58 <cosf>:
 8010e58:	ee10 3a10 	vmov	r3, s0
 8010e5c:	b507      	push	{r0, r1, r2, lr}
 8010e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8010ed8 <cosf+0x80>)
 8010e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d806      	bhi.n	8010e76 <cosf+0x1e>
 8010e68:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010edc <cosf+0x84>
 8010e6c:	b003      	add	sp, #12
 8010e6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e72:	f000 bdd5 	b.w	8011a20 <__kernel_cosf>
 8010e76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010e7a:	d304      	bcc.n	8010e86 <cosf+0x2e>
 8010e7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010e80:	b003      	add	sp, #12
 8010e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e86:	4668      	mov	r0, sp
 8010e88:	f000 ff38 	bl	8011cfc <__ieee754_rem_pio2f>
 8010e8c:	f000 0003 	and.w	r0, r0, #3
 8010e90:	2801      	cmp	r0, #1
 8010e92:	d009      	beq.n	8010ea8 <cosf+0x50>
 8010e94:	2802      	cmp	r0, #2
 8010e96:	d010      	beq.n	8010eba <cosf+0x62>
 8010e98:	b9b0      	cbnz	r0, 8010ec8 <cosf+0x70>
 8010e9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e9e:	ed9d 0a00 	vldr	s0, [sp]
 8010ea2:	f000 fdbd 	bl	8011a20 <__kernel_cosf>
 8010ea6:	e7eb      	b.n	8010e80 <cosf+0x28>
 8010ea8:	eddd 0a01 	vldr	s1, [sp, #4]
 8010eac:	ed9d 0a00 	vldr	s0, [sp]
 8010eb0:	f000 fe0e 	bl	8011ad0 <__kernel_sinf>
 8010eb4:	eeb1 0a40 	vneg.f32	s0, s0
 8010eb8:	e7e2      	b.n	8010e80 <cosf+0x28>
 8010eba:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ebe:	ed9d 0a00 	vldr	s0, [sp]
 8010ec2:	f000 fdad 	bl	8011a20 <__kernel_cosf>
 8010ec6:	e7f5      	b.n	8010eb4 <cosf+0x5c>
 8010ec8:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ecc:	ed9d 0a00 	vldr	s0, [sp]
 8010ed0:	2001      	movs	r0, #1
 8010ed2:	f000 fdfd 	bl	8011ad0 <__kernel_sinf>
 8010ed6:	e7d3      	b.n	8010e80 <cosf+0x28>
 8010ed8:	3f490fd8 	.word	0x3f490fd8
 8010edc:	00000000 	.word	0x00000000

08010ee0 <fabsf>:
 8010ee0:	ee10 3a10 	vmov	r3, s0
 8010ee4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ee8:	ee00 3a10 	vmov	s0, r3
 8010eec:	4770      	bx	lr
	...

08010ef0 <sinf>:
 8010ef0:	ee10 3a10 	vmov	r3, s0
 8010ef4:	b507      	push	{r0, r1, r2, lr}
 8010ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8010f74 <sinf+0x84>)
 8010ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d807      	bhi.n	8010f10 <sinf+0x20>
 8010f00:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8010f78 <sinf+0x88>
 8010f04:	2000      	movs	r0, #0
 8010f06:	b003      	add	sp, #12
 8010f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f0c:	f000 bde0 	b.w	8011ad0 <__kernel_sinf>
 8010f10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010f14:	d304      	bcc.n	8010f20 <sinf+0x30>
 8010f16:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010f1a:	b003      	add	sp, #12
 8010f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f20:	4668      	mov	r0, sp
 8010f22:	f000 feeb 	bl	8011cfc <__ieee754_rem_pio2f>
 8010f26:	f000 0003 	and.w	r0, r0, #3
 8010f2a:	2801      	cmp	r0, #1
 8010f2c:	d00a      	beq.n	8010f44 <sinf+0x54>
 8010f2e:	2802      	cmp	r0, #2
 8010f30:	d00f      	beq.n	8010f52 <sinf+0x62>
 8010f32:	b9c0      	cbnz	r0, 8010f66 <sinf+0x76>
 8010f34:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f38:	ed9d 0a00 	vldr	s0, [sp]
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	f000 fdc7 	bl	8011ad0 <__kernel_sinf>
 8010f42:	e7ea      	b.n	8010f1a <sinf+0x2a>
 8010f44:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f48:	ed9d 0a00 	vldr	s0, [sp]
 8010f4c:	f000 fd68 	bl	8011a20 <__kernel_cosf>
 8010f50:	e7e3      	b.n	8010f1a <sinf+0x2a>
 8010f52:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f56:	ed9d 0a00 	vldr	s0, [sp]
 8010f5a:	2001      	movs	r0, #1
 8010f5c:	f000 fdb8 	bl	8011ad0 <__kernel_sinf>
 8010f60:	eeb1 0a40 	vneg.f32	s0, s0
 8010f64:	e7d9      	b.n	8010f1a <sinf+0x2a>
 8010f66:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f6a:	ed9d 0a00 	vldr	s0, [sp]
 8010f6e:	f000 fd57 	bl	8011a20 <__kernel_cosf>
 8010f72:	e7f5      	b.n	8010f60 <sinf+0x70>
 8010f74:	3f490fd8 	.word	0x3f490fd8
	...

08010f80 <nan>:
 8010f80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010f88 <nan+0x8>
 8010f84:	4770      	bx	lr
 8010f86:	bf00      	nop
 8010f88:	00000000 	.word	0x00000000
 8010f8c:	7ff80000 	.word	0x7ff80000

08010f90 <finitef>:
 8010f90:	ee10 3a10 	vmov	r3, s0
 8010f94:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010f98:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010f9c:	bfac      	ite	ge
 8010f9e:	2000      	movge	r0, #0
 8010fa0:	2001      	movlt	r0, #1
 8010fa2:	4770      	bx	lr

08010fa4 <__ieee754_sqrt>:
 8010fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa8:	4a68      	ldr	r2, [pc, #416]	@ (801114c <__ieee754_sqrt+0x1a8>)
 8010faa:	ec55 4b10 	vmov	r4, r5, d0
 8010fae:	43aa      	bics	r2, r5
 8010fb0:	462b      	mov	r3, r5
 8010fb2:	4621      	mov	r1, r4
 8010fb4:	d110      	bne.n	8010fd8 <__ieee754_sqrt+0x34>
 8010fb6:	4622      	mov	r2, r4
 8010fb8:	4620      	mov	r0, r4
 8010fba:	4629      	mov	r1, r5
 8010fbc:	f7ef fb1c 	bl	80005f8 <__aeabi_dmul>
 8010fc0:	4602      	mov	r2, r0
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	4629      	mov	r1, r5
 8010fc8:	f7ef f960 	bl	800028c <__adddf3>
 8010fcc:	4604      	mov	r4, r0
 8010fce:	460d      	mov	r5, r1
 8010fd0:	ec45 4b10 	vmov	d0, r4, r5
 8010fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd8:	2d00      	cmp	r5, #0
 8010fda:	dc0e      	bgt.n	8010ffa <__ieee754_sqrt+0x56>
 8010fdc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010fe0:	4322      	orrs	r2, r4
 8010fe2:	d0f5      	beq.n	8010fd0 <__ieee754_sqrt+0x2c>
 8010fe4:	b19d      	cbz	r5, 801100e <__ieee754_sqrt+0x6a>
 8010fe6:	4622      	mov	r2, r4
 8010fe8:	4620      	mov	r0, r4
 8010fea:	4629      	mov	r1, r5
 8010fec:	f7ef f94c 	bl	8000288 <__aeabi_dsub>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	f7ef fc2a 	bl	800084c <__aeabi_ddiv>
 8010ff8:	e7e8      	b.n	8010fcc <__ieee754_sqrt+0x28>
 8010ffa:	152a      	asrs	r2, r5, #20
 8010ffc:	d115      	bne.n	801102a <__ieee754_sqrt+0x86>
 8010ffe:	2000      	movs	r0, #0
 8011000:	e009      	b.n	8011016 <__ieee754_sqrt+0x72>
 8011002:	0acb      	lsrs	r3, r1, #11
 8011004:	3a15      	subs	r2, #21
 8011006:	0549      	lsls	r1, r1, #21
 8011008:	2b00      	cmp	r3, #0
 801100a:	d0fa      	beq.n	8011002 <__ieee754_sqrt+0x5e>
 801100c:	e7f7      	b.n	8010ffe <__ieee754_sqrt+0x5a>
 801100e:	462a      	mov	r2, r5
 8011010:	e7fa      	b.n	8011008 <__ieee754_sqrt+0x64>
 8011012:	005b      	lsls	r3, r3, #1
 8011014:	3001      	adds	r0, #1
 8011016:	02dc      	lsls	r4, r3, #11
 8011018:	d5fb      	bpl.n	8011012 <__ieee754_sqrt+0x6e>
 801101a:	1e44      	subs	r4, r0, #1
 801101c:	1b12      	subs	r2, r2, r4
 801101e:	f1c0 0420 	rsb	r4, r0, #32
 8011022:	fa21 f404 	lsr.w	r4, r1, r4
 8011026:	4323      	orrs	r3, r4
 8011028:	4081      	lsls	r1, r0
 801102a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801102e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8011032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011036:	07d2      	lsls	r2, r2, #31
 8011038:	bf5c      	itt	pl
 801103a:	005b      	lslpl	r3, r3, #1
 801103c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011040:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011044:	bf58      	it	pl
 8011046:	0049      	lslpl	r1, r1, #1
 8011048:	2600      	movs	r6, #0
 801104a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801104e:	106d      	asrs	r5, r5, #1
 8011050:	0049      	lsls	r1, r1, #1
 8011052:	2016      	movs	r0, #22
 8011054:	4632      	mov	r2, r6
 8011056:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801105a:	1917      	adds	r7, r2, r4
 801105c:	429f      	cmp	r7, r3
 801105e:	bfde      	ittt	le
 8011060:	193a      	addle	r2, r7, r4
 8011062:	1bdb      	suble	r3, r3, r7
 8011064:	1936      	addle	r6, r6, r4
 8011066:	0fcf      	lsrs	r7, r1, #31
 8011068:	3801      	subs	r0, #1
 801106a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801106e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011072:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011076:	d1f0      	bne.n	801105a <__ieee754_sqrt+0xb6>
 8011078:	4604      	mov	r4, r0
 801107a:	2720      	movs	r7, #32
 801107c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011080:	429a      	cmp	r2, r3
 8011082:	eb00 0e0c 	add.w	lr, r0, ip
 8011086:	db02      	blt.n	801108e <__ieee754_sqrt+0xea>
 8011088:	d113      	bne.n	80110b2 <__ieee754_sqrt+0x10e>
 801108a:	458e      	cmp	lr, r1
 801108c:	d811      	bhi.n	80110b2 <__ieee754_sqrt+0x10e>
 801108e:	f1be 0f00 	cmp.w	lr, #0
 8011092:	eb0e 000c 	add.w	r0, lr, ip
 8011096:	da42      	bge.n	801111e <__ieee754_sqrt+0x17a>
 8011098:	2800      	cmp	r0, #0
 801109a:	db40      	blt.n	801111e <__ieee754_sqrt+0x17a>
 801109c:	f102 0801 	add.w	r8, r2, #1
 80110a0:	1a9b      	subs	r3, r3, r2
 80110a2:	458e      	cmp	lr, r1
 80110a4:	bf88      	it	hi
 80110a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80110aa:	eba1 010e 	sub.w	r1, r1, lr
 80110ae:	4464      	add	r4, ip
 80110b0:	4642      	mov	r2, r8
 80110b2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80110b6:	3f01      	subs	r7, #1
 80110b8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80110bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80110c0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80110c4:	d1dc      	bne.n	8011080 <__ieee754_sqrt+0xdc>
 80110c6:	4319      	orrs	r1, r3
 80110c8:	d01b      	beq.n	8011102 <__ieee754_sqrt+0x15e>
 80110ca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8011150 <__ieee754_sqrt+0x1ac>
 80110ce:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011154 <__ieee754_sqrt+0x1b0>
 80110d2:	e9da 0100 	ldrd	r0, r1, [sl]
 80110d6:	e9db 2300 	ldrd	r2, r3, [fp]
 80110da:	f7ef f8d5 	bl	8000288 <__aeabi_dsub>
 80110de:	e9da 8900 	ldrd	r8, r9, [sl]
 80110e2:	4602      	mov	r2, r0
 80110e4:	460b      	mov	r3, r1
 80110e6:	4640      	mov	r0, r8
 80110e8:	4649      	mov	r1, r9
 80110ea:	f7ef fd01 	bl	8000af0 <__aeabi_dcmple>
 80110ee:	b140      	cbz	r0, 8011102 <__ieee754_sqrt+0x15e>
 80110f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80110f4:	e9da 0100 	ldrd	r0, r1, [sl]
 80110f8:	e9db 2300 	ldrd	r2, r3, [fp]
 80110fc:	d111      	bne.n	8011122 <__ieee754_sqrt+0x17e>
 80110fe:	3601      	adds	r6, #1
 8011100:	463c      	mov	r4, r7
 8011102:	1072      	asrs	r2, r6, #1
 8011104:	0863      	lsrs	r3, r4, #1
 8011106:	07f1      	lsls	r1, r6, #31
 8011108:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801110c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011110:	bf48      	it	mi
 8011112:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8011116:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801111a:	4618      	mov	r0, r3
 801111c:	e756      	b.n	8010fcc <__ieee754_sqrt+0x28>
 801111e:	4690      	mov	r8, r2
 8011120:	e7be      	b.n	80110a0 <__ieee754_sqrt+0xfc>
 8011122:	f7ef f8b3 	bl	800028c <__adddf3>
 8011126:	e9da 8900 	ldrd	r8, r9, [sl]
 801112a:	4602      	mov	r2, r0
 801112c:	460b      	mov	r3, r1
 801112e:	4640      	mov	r0, r8
 8011130:	4649      	mov	r1, r9
 8011132:	f7ef fcd3 	bl	8000adc <__aeabi_dcmplt>
 8011136:	b120      	cbz	r0, 8011142 <__ieee754_sqrt+0x19e>
 8011138:	1ca0      	adds	r0, r4, #2
 801113a:	bf08      	it	eq
 801113c:	3601      	addeq	r6, #1
 801113e:	3402      	adds	r4, #2
 8011140:	e7df      	b.n	8011102 <__ieee754_sqrt+0x15e>
 8011142:	1c63      	adds	r3, r4, #1
 8011144:	f023 0401 	bic.w	r4, r3, #1
 8011148:	e7db      	b.n	8011102 <__ieee754_sqrt+0x15e>
 801114a:	bf00      	nop
 801114c:	7ff00000 	.word	0x7ff00000
 8011150:	20000300 	.word	0x20000300
 8011154:	200002f8 	.word	0x200002f8

08011158 <__ieee754_asin>:
 8011158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801115c:	ec55 4b10 	vmov	r4, r5, d0
 8011160:	4bc7      	ldr	r3, [pc, #796]	@ (8011480 <__ieee754_asin+0x328>)
 8011162:	b087      	sub	sp, #28
 8011164:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011168:	429e      	cmp	r6, r3
 801116a:	9501      	str	r5, [sp, #4]
 801116c:	d92d      	bls.n	80111ca <__ieee754_asin+0x72>
 801116e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011172:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011176:	4326      	orrs	r6, r4
 8011178:	d116      	bne.n	80111a8 <__ieee754_asin+0x50>
 801117a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8011418 <__ieee754_asin+0x2c0>)
 801117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011180:	4620      	mov	r0, r4
 8011182:	4629      	mov	r1, r5
 8011184:	f7ef fa38 	bl	80005f8 <__aeabi_dmul>
 8011188:	a3a5      	add	r3, pc, #660	@ (adr r3, 8011420 <__ieee754_asin+0x2c8>)
 801118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118e:	4606      	mov	r6, r0
 8011190:	460f      	mov	r7, r1
 8011192:	4620      	mov	r0, r4
 8011194:	4629      	mov	r1, r5
 8011196:	f7ef fa2f 	bl	80005f8 <__aeabi_dmul>
 801119a:	4602      	mov	r2, r0
 801119c:	460b      	mov	r3, r1
 801119e:	4630      	mov	r0, r6
 80111a0:	4639      	mov	r1, r7
 80111a2:	f7ef f873 	bl	800028c <__adddf3>
 80111a6:	e009      	b.n	80111bc <__ieee754_asin+0x64>
 80111a8:	4622      	mov	r2, r4
 80111aa:	462b      	mov	r3, r5
 80111ac:	4620      	mov	r0, r4
 80111ae:	4629      	mov	r1, r5
 80111b0:	f7ef f86a 	bl	8000288 <__aeabi_dsub>
 80111b4:	4602      	mov	r2, r0
 80111b6:	460b      	mov	r3, r1
 80111b8:	f7ef fb48 	bl	800084c <__aeabi_ddiv>
 80111bc:	4604      	mov	r4, r0
 80111be:	460d      	mov	r5, r1
 80111c0:	ec45 4b10 	vmov	d0, r4, r5
 80111c4:	b007      	add	sp, #28
 80111c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ca:	4bae      	ldr	r3, [pc, #696]	@ (8011484 <__ieee754_asin+0x32c>)
 80111cc:	429e      	cmp	r6, r3
 80111ce:	d810      	bhi.n	80111f2 <__ieee754_asin+0x9a>
 80111d0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80111d4:	f080 80ad 	bcs.w	8011332 <__ieee754_asin+0x1da>
 80111d8:	a393      	add	r3, pc, #588	@ (adr r3, 8011428 <__ieee754_asin+0x2d0>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	4620      	mov	r0, r4
 80111e0:	4629      	mov	r1, r5
 80111e2:	f7ef f853 	bl	800028c <__adddf3>
 80111e6:	4ba8      	ldr	r3, [pc, #672]	@ (8011488 <__ieee754_asin+0x330>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	f7ef fc95 	bl	8000b18 <__aeabi_dcmpgt>
 80111ee:	2800      	cmp	r0, #0
 80111f0:	d1e6      	bne.n	80111c0 <__ieee754_asin+0x68>
 80111f2:	ec45 4b10 	vmov	d0, r4, r5
 80111f6:	f7ff fdf1 	bl	8010ddc <fabs>
 80111fa:	49a3      	ldr	r1, [pc, #652]	@ (8011488 <__ieee754_asin+0x330>)
 80111fc:	ec53 2b10 	vmov	r2, r3, d0
 8011200:	2000      	movs	r0, #0
 8011202:	f7ef f841 	bl	8000288 <__aeabi_dsub>
 8011206:	4ba1      	ldr	r3, [pc, #644]	@ (801148c <__ieee754_asin+0x334>)
 8011208:	2200      	movs	r2, #0
 801120a:	f7ef f9f5 	bl	80005f8 <__aeabi_dmul>
 801120e:	a388      	add	r3, pc, #544	@ (adr r3, 8011430 <__ieee754_asin+0x2d8>)
 8011210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011214:	4604      	mov	r4, r0
 8011216:	460d      	mov	r5, r1
 8011218:	f7ef f9ee 	bl	80005f8 <__aeabi_dmul>
 801121c:	a386      	add	r3, pc, #536	@ (adr r3, 8011438 <__ieee754_asin+0x2e0>)
 801121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011222:	f7ef f833 	bl	800028c <__adddf3>
 8011226:	4622      	mov	r2, r4
 8011228:	462b      	mov	r3, r5
 801122a:	f7ef f9e5 	bl	80005f8 <__aeabi_dmul>
 801122e:	a384      	add	r3, pc, #528	@ (adr r3, 8011440 <__ieee754_asin+0x2e8>)
 8011230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011234:	f7ef f828 	bl	8000288 <__aeabi_dsub>
 8011238:	4622      	mov	r2, r4
 801123a:	462b      	mov	r3, r5
 801123c:	f7ef f9dc 	bl	80005f8 <__aeabi_dmul>
 8011240:	a381      	add	r3, pc, #516	@ (adr r3, 8011448 <__ieee754_asin+0x2f0>)
 8011242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011246:	f7ef f821 	bl	800028c <__adddf3>
 801124a:	4622      	mov	r2, r4
 801124c:	462b      	mov	r3, r5
 801124e:	f7ef f9d3 	bl	80005f8 <__aeabi_dmul>
 8011252:	a37f      	add	r3, pc, #508	@ (adr r3, 8011450 <__ieee754_asin+0x2f8>)
 8011254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011258:	f7ef f816 	bl	8000288 <__aeabi_dsub>
 801125c:	4622      	mov	r2, r4
 801125e:	462b      	mov	r3, r5
 8011260:	f7ef f9ca 	bl	80005f8 <__aeabi_dmul>
 8011264:	a37c      	add	r3, pc, #496	@ (adr r3, 8011458 <__ieee754_asin+0x300>)
 8011266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126a:	f7ef f80f 	bl	800028c <__adddf3>
 801126e:	4622      	mov	r2, r4
 8011270:	462b      	mov	r3, r5
 8011272:	f7ef f9c1 	bl	80005f8 <__aeabi_dmul>
 8011276:	a37a      	add	r3, pc, #488	@ (adr r3, 8011460 <__ieee754_asin+0x308>)
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011280:	4620      	mov	r0, r4
 8011282:	4629      	mov	r1, r5
 8011284:	f7ef f9b8 	bl	80005f8 <__aeabi_dmul>
 8011288:	a377      	add	r3, pc, #476	@ (adr r3, 8011468 <__ieee754_asin+0x310>)
 801128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128e:	f7ee fffb 	bl	8000288 <__aeabi_dsub>
 8011292:	4622      	mov	r2, r4
 8011294:	462b      	mov	r3, r5
 8011296:	f7ef f9af 	bl	80005f8 <__aeabi_dmul>
 801129a:	a375      	add	r3, pc, #468	@ (adr r3, 8011470 <__ieee754_asin+0x318>)
 801129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a0:	f7ee fff4 	bl	800028c <__adddf3>
 80112a4:	4622      	mov	r2, r4
 80112a6:	462b      	mov	r3, r5
 80112a8:	f7ef f9a6 	bl	80005f8 <__aeabi_dmul>
 80112ac:	a372      	add	r3, pc, #456	@ (adr r3, 8011478 <__ieee754_asin+0x320>)
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	f7ee ffe9 	bl	8000288 <__aeabi_dsub>
 80112b6:	4622      	mov	r2, r4
 80112b8:	462b      	mov	r3, r5
 80112ba:	f7ef f99d 	bl	80005f8 <__aeabi_dmul>
 80112be:	4b72      	ldr	r3, [pc, #456]	@ (8011488 <__ieee754_asin+0x330>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	f7ee ffe3 	bl	800028c <__adddf3>
 80112c6:	ec45 4b10 	vmov	d0, r4, r5
 80112ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112ce:	f7ff fe69 	bl	8010fa4 <__ieee754_sqrt>
 80112d2:	4b6f      	ldr	r3, [pc, #444]	@ (8011490 <__ieee754_asin+0x338>)
 80112d4:	429e      	cmp	r6, r3
 80112d6:	ec5b ab10 	vmov	sl, fp, d0
 80112da:	f240 80db 	bls.w	8011494 <__ieee754_asin+0x33c>
 80112de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112e6:	f7ef fab1 	bl	800084c <__aeabi_ddiv>
 80112ea:	4652      	mov	r2, sl
 80112ec:	465b      	mov	r3, fp
 80112ee:	f7ef f983 	bl	80005f8 <__aeabi_dmul>
 80112f2:	4652      	mov	r2, sl
 80112f4:	465b      	mov	r3, fp
 80112f6:	f7ee ffc9 	bl	800028c <__adddf3>
 80112fa:	4602      	mov	r2, r0
 80112fc:	460b      	mov	r3, r1
 80112fe:	f7ee ffc5 	bl	800028c <__adddf3>
 8011302:	a347      	add	r3, pc, #284	@ (adr r3, 8011420 <__ieee754_asin+0x2c8>)
 8011304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011308:	f7ee ffbe 	bl	8000288 <__aeabi_dsub>
 801130c:	4602      	mov	r2, r0
 801130e:	460b      	mov	r3, r1
 8011310:	a141      	add	r1, pc, #260	@ (adr r1, 8011418 <__ieee754_asin+0x2c0>)
 8011312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011316:	f7ee ffb7 	bl	8000288 <__aeabi_dsub>
 801131a:	9b01      	ldr	r3, [sp, #4]
 801131c:	2b00      	cmp	r3, #0
 801131e:	bfdc      	itt	le
 8011320:	4602      	movle	r2, r0
 8011322:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8011326:	4604      	mov	r4, r0
 8011328:	460d      	mov	r5, r1
 801132a:	bfdc      	itt	le
 801132c:	4614      	movle	r4, r2
 801132e:	461d      	movle	r5, r3
 8011330:	e746      	b.n	80111c0 <__ieee754_asin+0x68>
 8011332:	4622      	mov	r2, r4
 8011334:	462b      	mov	r3, r5
 8011336:	4620      	mov	r0, r4
 8011338:	4629      	mov	r1, r5
 801133a:	f7ef f95d 	bl	80005f8 <__aeabi_dmul>
 801133e:	a33c      	add	r3, pc, #240	@ (adr r3, 8011430 <__ieee754_asin+0x2d8>)
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	4606      	mov	r6, r0
 8011346:	460f      	mov	r7, r1
 8011348:	f7ef f956 	bl	80005f8 <__aeabi_dmul>
 801134c:	a33a      	add	r3, pc, #232	@ (adr r3, 8011438 <__ieee754_asin+0x2e0>)
 801134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011352:	f7ee ff9b 	bl	800028c <__adddf3>
 8011356:	4632      	mov	r2, r6
 8011358:	463b      	mov	r3, r7
 801135a:	f7ef f94d 	bl	80005f8 <__aeabi_dmul>
 801135e:	a338      	add	r3, pc, #224	@ (adr r3, 8011440 <__ieee754_asin+0x2e8>)
 8011360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011364:	f7ee ff90 	bl	8000288 <__aeabi_dsub>
 8011368:	4632      	mov	r2, r6
 801136a:	463b      	mov	r3, r7
 801136c:	f7ef f944 	bl	80005f8 <__aeabi_dmul>
 8011370:	a335      	add	r3, pc, #212	@ (adr r3, 8011448 <__ieee754_asin+0x2f0>)
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	f7ee ff89 	bl	800028c <__adddf3>
 801137a:	4632      	mov	r2, r6
 801137c:	463b      	mov	r3, r7
 801137e:	f7ef f93b 	bl	80005f8 <__aeabi_dmul>
 8011382:	a333      	add	r3, pc, #204	@ (adr r3, 8011450 <__ieee754_asin+0x2f8>)
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	f7ee ff7e 	bl	8000288 <__aeabi_dsub>
 801138c:	4632      	mov	r2, r6
 801138e:	463b      	mov	r3, r7
 8011390:	f7ef f932 	bl	80005f8 <__aeabi_dmul>
 8011394:	a330      	add	r3, pc, #192	@ (adr r3, 8011458 <__ieee754_asin+0x300>)
 8011396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139a:	f7ee ff77 	bl	800028c <__adddf3>
 801139e:	4632      	mov	r2, r6
 80113a0:	463b      	mov	r3, r7
 80113a2:	f7ef f929 	bl	80005f8 <__aeabi_dmul>
 80113a6:	a32e      	add	r3, pc, #184	@ (adr r3, 8011460 <__ieee754_asin+0x308>)
 80113a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ac:	4680      	mov	r8, r0
 80113ae:	4689      	mov	r9, r1
 80113b0:	4630      	mov	r0, r6
 80113b2:	4639      	mov	r1, r7
 80113b4:	f7ef f920 	bl	80005f8 <__aeabi_dmul>
 80113b8:	a32b      	add	r3, pc, #172	@ (adr r3, 8011468 <__ieee754_asin+0x310>)
 80113ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113be:	f7ee ff63 	bl	8000288 <__aeabi_dsub>
 80113c2:	4632      	mov	r2, r6
 80113c4:	463b      	mov	r3, r7
 80113c6:	f7ef f917 	bl	80005f8 <__aeabi_dmul>
 80113ca:	a329      	add	r3, pc, #164	@ (adr r3, 8011470 <__ieee754_asin+0x318>)
 80113cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d0:	f7ee ff5c 	bl	800028c <__adddf3>
 80113d4:	4632      	mov	r2, r6
 80113d6:	463b      	mov	r3, r7
 80113d8:	f7ef f90e 	bl	80005f8 <__aeabi_dmul>
 80113dc:	a326      	add	r3, pc, #152	@ (adr r3, 8011478 <__ieee754_asin+0x320>)
 80113de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e2:	f7ee ff51 	bl	8000288 <__aeabi_dsub>
 80113e6:	4632      	mov	r2, r6
 80113e8:	463b      	mov	r3, r7
 80113ea:	f7ef f905 	bl	80005f8 <__aeabi_dmul>
 80113ee:	4b26      	ldr	r3, [pc, #152]	@ (8011488 <__ieee754_asin+0x330>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	f7ee ff4b 	bl	800028c <__adddf3>
 80113f6:	4602      	mov	r2, r0
 80113f8:	460b      	mov	r3, r1
 80113fa:	4640      	mov	r0, r8
 80113fc:	4649      	mov	r1, r9
 80113fe:	f7ef fa25 	bl	800084c <__aeabi_ddiv>
 8011402:	4622      	mov	r2, r4
 8011404:	462b      	mov	r3, r5
 8011406:	f7ef f8f7 	bl	80005f8 <__aeabi_dmul>
 801140a:	4602      	mov	r2, r0
 801140c:	460b      	mov	r3, r1
 801140e:	4620      	mov	r0, r4
 8011410:	4629      	mov	r1, r5
 8011412:	e6c6      	b.n	80111a2 <__ieee754_asin+0x4a>
 8011414:	f3af 8000 	nop.w
 8011418:	54442d18 	.word	0x54442d18
 801141c:	3ff921fb 	.word	0x3ff921fb
 8011420:	33145c07 	.word	0x33145c07
 8011424:	3c91a626 	.word	0x3c91a626
 8011428:	8800759c 	.word	0x8800759c
 801142c:	7e37e43c 	.word	0x7e37e43c
 8011430:	0dfdf709 	.word	0x0dfdf709
 8011434:	3f023de1 	.word	0x3f023de1
 8011438:	7501b288 	.word	0x7501b288
 801143c:	3f49efe0 	.word	0x3f49efe0
 8011440:	b5688f3b 	.word	0xb5688f3b
 8011444:	3fa48228 	.word	0x3fa48228
 8011448:	0e884455 	.word	0x0e884455
 801144c:	3fc9c155 	.word	0x3fc9c155
 8011450:	03eb6f7d 	.word	0x03eb6f7d
 8011454:	3fd4d612 	.word	0x3fd4d612
 8011458:	55555555 	.word	0x55555555
 801145c:	3fc55555 	.word	0x3fc55555
 8011460:	b12e9282 	.word	0xb12e9282
 8011464:	3fb3b8c5 	.word	0x3fb3b8c5
 8011468:	1b8d0159 	.word	0x1b8d0159
 801146c:	3fe6066c 	.word	0x3fe6066c
 8011470:	9c598ac8 	.word	0x9c598ac8
 8011474:	40002ae5 	.word	0x40002ae5
 8011478:	1c8a2d4b 	.word	0x1c8a2d4b
 801147c:	40033a27 	.word	0x40033a27
 8011480:	3fefffff 	.word	0x3fefffff
 8011484:	3fdfffff 	.word	0x3fdfffff
 8011488:	3ff00000 	.word	0x3ff00000
 801148c:	3fe00000 	.word	0x3fe00000
 8011490:	3fef3332 	.word	0x3fef3332
 8011494:	4652      	mov	r2, sl
 8011496:	465b      	mov	r3, fp
 8011498:	4650      	mov	r0, sl
 801149a:	4659      	mov	r1, fp
 801149c:	f7ee fef6 	bl	800028c <__adddf3>
 80114a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114a4:	4606      	mov	r6, r0
 80114a6:	460f      	mov	r7, r1
 80114a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114ac:	f7ef f9ce 	bl	800084c <__aeabi_ddiv>
 80114b0:	4602      	mov	r2, r0
 80114b2:	460b      	mov	r3, r1
 80114b4:	4630      	mov	r0, r6
 80114b6:	4639      	mov	r1, r7
 80114b8:	f7ef f89e 	bl	80005f8 <__aeabi_dmul>
 80114bc:	f04f 0800 	mov.w	r8, #0
 80114c0:	4606      	mov	r6, r0
 80114c2:	460f      	mov	r7, r1
 80114c4:	4642      	mov	r2, r8
 80114c6:	465b      	mov	r3, fp
 80114c8:	4640      	mov	r0, r8
 80114ca:	4659      	mov	r1, fp
 80114cc:	f7ef f894 	bl	80005f8 <__aeabi_dmul>
 80114d0:	4602      	mov	r2, r0
 80114d2:	460b      	mov	r3, r1
 80114d4:	4620      	mov	r0, r4
 80114d6:	4629      	mov	r1, r5
 80114d8:	f7ee fed6 	bl	8000288 <__aeabi_dsub>
 80114dc:	4642      	mov	r2, r8
 80114de:	4604      	mov	r4, r0
 80114e0:	460d      	mov	r5, r1
 80114e2:	465b      	mov	r3, fp
 80114e4:	4650      	mov	r0, sl
 80114e6:	4659      	mov	r1, fp
 80114e8:	f7ee fed0 	bl	800028c <__adddf3>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	4620      	mov	r0, r4
 80114f2:	4629      	mov	r1, r5
 80114f4:	f7ef f9aa 	bl	800084c <__aeabi_ddiv>
 80114f8:	4602      	mov	r2, r0
 80114fa:	460b      	mov	r3, r1
 80114fc:	f7ee fec6 	bl	800028c <__adddf3>
 8011500:	4602      	mov	r2, r0
 8011502:	460b      	mov	r3, r1
 8011504:	a112      	add	r1, pc, #72	@ (adr r1, 8011550 <__ieee754_asin+0x3f8>)
 8011506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801150a:	f7ee febd 	bl	8000288 <__aeabi_dsub>
 801150e:	4602      	mov	r2, r0
 8011510:	460b      	mov	r3, r1
 8011512:	4630      	mov	r0, r6
 8011514:	4639      	mov	r1, r7
 8011516:	f7ee feb7 	bl	8000288 <__aeabi_dsub>
 801151a:	4642      	mov	r2, r8
 801151c:	4604      	mov	r4, r0
 801151e:	460d      	mov	r5, r1
 8011520:	465b      	mov	r3, fp
 8011522:	4640      	mov	r0, r8
 8011524:	4659      	mov	r1, fp
 8011526:	f7ee feb1 	bl	800028c <__adddf3>
 801152a:	4602      	mov	r2, r0
 801152c:	460b      	mov	r3, r1
 801152e:	a10a      	add	r1, pc, #40	@ (adr r1, 8011558 <__ieee754_asin+0x400>)
 8011530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011534:	f7ee fea8 	bl	8000288 <__aeabi_dsub>
 8011538:	4602      	mov	r2, r0
 801153a:	460b      	mov	r3, r1
 801153c:	4620      	mov	r0, r4
 801153e:	4629      	mov	r1, r5
 8011540:	f7ee fea2 	bl	8000288 <__aeabi_dsub>
 8011544:	4602      	mov	r2, r0
 8011546:	460b      	mov	r3, r1
 8011548:	a103      	add	r1, pc, #12	@ (adr r1, 8011558 <__ieee754_asin+0x400>)
 801154a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801154e:	e6e2      	b.n	8011316 <__ieee754_asin+0x1be>
 8011550:	33145c07 	.word	0x33145c07
 8011554:	3c91a626 	.word	0x3c91a626
 8011558:	54442d18 	.word	0x54442d18
 801155c:	3fe921fb 	.word	0x3fe921fb

08011560 <__ieee754_atan2>:
 8011560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011564:	ec57 6b11 	vmov	r6, r7, d1
 8011568:	4273      	negs	r3, r6
 801156a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80116e8 <__ieee754_atan2+0x188>
 801156e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8011572:	4333      	orrs	r3, r6
 8011574:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011578:	4543      	cmp	r3, r8
 801157a:	ec51 0b10 	vmov	r0, r1, d0
 801157e:	4635      	mov	r5, r6
 8011580:	d809      	bhi.n	8011596 <__ieee754_atan2+0x36>
 8011582:	4244      	negs	r4, r0
 8011584:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011588:	4304      	orrs	r4, r0
 801158a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801158e:	4544      	cmp	r4, r8
 8011590:	468e      	mov	lr, r1
 8011592:	4681      	mov	r9, r0
 8011594:	d907      	bls.n	80115a6 <__ieee754_atan2+0x46>
 8011596:	4632      	mov	r2, r6
 8011598:	463b      	mov	r3, r7
 801159a:	f7ee fe77 	bl	800028c <__adddf3>
 801159e:	ec41 0b10 	vmov	d0, r0, r1
 80115a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80115aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80115ae:	4334      	orrs	r4, r6
 80115b0:	d103      	bne.n	80115ba <__ieee754_atan2+0x5a>
 80115b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115b6:	f000 b89b 	b.w	80116f0 <atan>
 80115ba:	17bc      	asrs	r4, r7, #30
 80115bc:	f004 0402 	and.w	r4, r4, #2
 80115c0:	ea53 0909 	orrs.w	r9, r3, r9
 80115c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80115c8:	d107      	bne.n	80115da <__ieee754_atan2+0x7a>
 80115ca:	2c02      	cmp	r4, #2
 80115cc:	d05f      	beq.n	801168e <__ieee754_atan2+0x12e>
 80115ce:	2c03      	cmp	r4, #3
 80115d0:	d1e5      	bne.n	801159e <__ieee754_atan2+0x3e>
 80115d2:	a141      	add	r1, pc, #260	@ (adr r1, 80116d8 <__ieee754_atan2+0x178>)
 80115d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115d8:	e7e1      	b.n	801159e <__ieee754_atan2+0x3e>
 80115da:	4315      	orrs	r5, r2
 80115dc:	d106      	bne.n	80115ec <__ieee754_atan2+0x8c>
 80115de:	f1be 0f00 	cmp.w	lr, #0
 80115e2:	da5f      	bge.n	80116a4 <__ieee754_atan2+0x144>
 80115e4:	a13e      	add	r1, pc, #248	@ (adr r1, 80116e0 <__ieee754_atan2+0x180>)
 80115e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115ea:	e7d8      	b.n	801159e <__ieee754_atan2+0x3e>
 80115ec:	4542      	cmp	r2, r8
 80115ee:	d10f      	bne.n	8011610 <__ieee754_atan2+0xb0>
 80115f0:	4293      	cmp	r3, r2
 80115f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80115f6:	d107      	bne.n	8011608 <__ieee754_atan2+0xa8>
 80115f8:	2c02      	cmp	r4, #2
 80115fa:	d84c      	bhi.n	8011696 <__ieee754_atan2+0x136>
 80115fc:	4b34      	ldr	r3, [pc, #208]	@ (80116d0 <__ieee754_atan2+0x170>)
 80115fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011606:	e7ca      	b.n	801159e <__ieee754_atan2+0x3e>
 8011608:	2c02      	cmp	r4, #2
 801160a:	d848      	bhi.n	801169e <__ieee754_atan2+0x13e>
 801160c:	4b31      	ldr	r3, [pc, #196]	@ (80116d4 <__ieee754_atan2+0x174>)
 801160e:	e7f6      	b.n	80115fe <__ieee754_atan2+0x9e>
 8011610:	4543      	cmp	r3, r8
 8011612:	d0e4      	beq.n	80115de <__ieee754_atan2+0x7e>
 8011614:	1a9b      	subs	r3, r3, r2
 8011616:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801161a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801161e:	da1e      	bge.n	801165e <__ieee754_atan2+0xfe>
 8011620:	2f00      	cmp	r7, #0
 8011622:	da01      	bge.n	8011628 <__ieee754_atan2+0xc8>
 8011624:	323c      	adds	r2, #60	@ 0x3c
 8011626:	db1e      	blt.n	8011666 <__ieee754_atan2+0x106>
 8011628:	4632      	mov	r2, r6
 801162a:	463b      	mov	r3, r7
 801162c:	f7ef f90e 	bl	800084c <__aeabi_ddiv>
 8011630:	ec41 0b10 	vmov	d0, r0, r1
 8011634:	f7ff fbd2 	bl	8010ddc <fabs>
 8011638:	f000 f85a 	bl	80116f0 <atan>
 801163c:	ec51 0b10 	vmov	r0, r1, d0
 8011640:	2c01      	cmp	r4, #1
 8011642:	d013      	beq.n	801166c <__ieee754_atan2+0x10c>
 8011644:	2c02      	cmp	r4, #2
 8011646:	d015      	beq.n	8011674 <__ieee754_atan2+0x114>
 8011648:	2c00      	cmp	r4, #0
 801164a:	d0a8      	beq.n	801159e <__ieee754_atan2+0x3e>
 801164c:	a318      	add	r3, pc, #96	@ (adr r3, 80116b0 <__ieee754_atan2+0x150>)
 801164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011652:	f7ee fe19 	bl	8000288 <__aeabi_dsub>
 8011656:	a318      	add	r3, pc, #96	@ (adr r3, 80116b8 <__ieee754_atan2+0x158>)
 8011658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165c:	e014      	b.n	8011688 <__ieee754_atan2+0x128>
 801165e:	a118      	add	r1, pc, #96	@ (adr r1, 80116c0 <__ieee754_atan2+0x160>)
 8011660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011664:	e7ec      	b.n	8011640 <__ieee754_atan2+0xe0>
 8011666:	2000      	movs	r0, #0
 8011668:	2100      	movs	r1, #0
 801166a:	e7e9      	b.n	8011640 <__ieee754_atan2+0xe0>
 801166c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011670:	4619      	mov	r1, r3
 8011672:	e794      	b.n	801159e <__ieee754_atan2+0x3e>
 8011674:	a30e      	add	r3, pc, #56	@ (adr r3, 80116b0 <__ieee754_atan2+0x150>)
 8011676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167a:	f7ee fe05 	bl	8000288 <__aeabi_dsub>
 801167e:	4602      	mov	r2, r0
 8011680:	460b      	mov	r3, r1
 8011682:	a10d      	add	r1, pc, #52	@ (adr r1, 80116b8 <__ieee754_atan2+0x158>)
 8011684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011688:	f7ee fdfe 	bl	8000288 <__aeabi_dsub>
 801168c:	e787      	b.n	801159e <__ieee754_atan2+0x3e>
 801168e:	a10a      	add	r1, pc, #40	@ (adr r1, 80116b8 <__ieee754_atan2+0x158>)
 8011690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011694:	e783      	b.n	801159e <__ieee754_atan2+0x3e>
 8011696:	a10c      	add	r1, pc, #48	@ (adr r1, 80116c8 <__ieee754_atan2+0x168>)
 8011698:	e9d1 0100 	ldrd	r0, r1, [r1]
 801169c:	e77f      	b.n	801159e <__ieee754_atan2+0x3e>
 801169e:	2000      	movs	r0, #0
 80116a0:	2100      	movs	r1, #0
 80116a2:	e77c      	b.n	801159e <__ieee754_atan2+0x3e>
 80116a4:	a106      	add	r1, pc, #24	@ (adr r1, 80116c0 <__ieee754_atan2+0x160>)
 80116a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116aa:	e778      	b.n	801159e <__ieee754_atan2+0x3e>
 80116ac:	f3af 8000 	nop.w
 80116b0:	33145c07 	.word	0x33145c07
 80116b4:	3ca1a626 	.word	0x3ca1a626
 80116b8:	54442d18 	.word	0x54442d18
 80116bc:	400921fb 	.word	0x400921fb
 80116c0:	54442d18 	.word	0x54442d18
 80116c4:	3ff921fb 	.word	0x3ff921fb
 80116c8:	54442d18 	.word	0x54442d18
 80116cc:	3fe921fb 	.word	0x3fe921fb
 80116d0:	08012a80 	.word	0x08012a80
 80116d4:	08012a68 	.word	0x08012a68
 80116d8:	54442d18 	.word	0x54442d18
 80116dc:	c00921fb 	.word	0xc00921fb
 80116e0:	54442d18 	.word	0x54442d18
 80116e4:	bff921fb 	.word	0xbff921fb
 80116e8:	7ff00000 	.word	0x7ff00000
 80116ec:	00000000 	.word	0x00000000

080116f0 <atan>:
 80116f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f4:	ec55 4b10 	vmov	r4, r5, d0
 80116f8:	4bbf      	ldr	r3, [pc, #764]	@ (80119f8 <atan+0x308>)
 80116fa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80116fe:	429e      	cmp	r6, r3
 8011700:	46ab      	mov	fp, r5
 8011702:	d918      	bls.n	8011736 <atan+0x46>
 8011704:	4bbd      	ldr	r3, [pc, #756]	@ (80119fc <atan+0x30c>)
 8011706:	429e      	cmp	r6, r3
 8011708:	d801      	bhi.n	801170e <atan+0x1e>
 801170a:	d109      	bne.n	8011720 <atan+0x30>
 801170c:	b144      	cbz	r4, 8011720 <atan+0x30>
 801170e:	4622      	mov	r2, r4
 8011710:	462b      	mov	r3, r5
 8011712:	4620      	mov	r0, r4
 8011714:	4629      	mov	r1, r5
 8011716:	f7ee fdb9 	bl	800028c <__adddf3>
 801171a:	4604      	mov	r4, r0
 801171c:	460d      	mov	r5, r1
 801171e:	e006      	b.n	801172e <atan+0x3e>
 8011720:	f1bb 0f00 	cmp.w	fp, #0
 8011724:	f340 812b 	ble.w	801197e <atan+0x28e>
 8011728:	a597      	add	r5, pc, #604	@ (adr r5, 8011988 <atan+0x298>)
 801172a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801172e:	ec45 4b10 	vmov	d0, r4, r5
 8011732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011736:	4bb2      	ldr	r3, [pc, #712]	@ (8011a00 <atan+0x310>)
 8011738:	429e      	cmp	r6, r3
 801173a:	d813      	bhi.n	8011764 <atan+0x74>
 801173c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8011740:	429e      	cmp	r6, r3
 8011742:	d80c      	bhi.n	801175e <atan+0x6e>
 8011744:	a392      	add	r3, pc, #584	@ (adr r3, 8011990 <atan+0x2a0>)
 8011746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174a:	4620      	mov	r0, r4
 801174c:	4629      	mov	r1, r5
 801174e:	f7ee fd9d 	bl	800028c <__adddf3>
 8011752:	4bac      	ldr	r3, [pc, #688]	@ (8011a04 <atan+0x314>)
 8011754:	2200      	movs	r2, #0
 8011756:	f7ef f9df 	bl	8000b18 <__aeabi_dcmpgt>
 801175a:	2800      	cmp	r0, #0
 801175c:	d1e7      	bne.n	801172e <atan+0x3e>
 801175e:	f04f 3aff 	mov.w	sl, #4294967295
 8011762:	e029      	b.n	80117b8 <atan+0xc8>
 8011764:	f7ff fb3a 	bl	8010ddc <fabs>
 8011768:	4ba7      	ldr	r3, [pc, #668]	@ (8011a08 <atan+0x318>)
 801176a:	429e      	cmp	r6, r3
 801176c:	ec55 4b10 	vmov	r4, r5, d0
 8011770:	f200 80bc 	bhi.w	80118ec <atan+0x1fc>
 8011774:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8011778:	429e      	cmp	r6, r3
 801177a:	f200 809e 	bhi.w	80118ba <atan+0x1ca>
 801177e:	4622      	mov	r2, r4
 8011780:	462b      	mov	r3, r5
 8011782:	4620      	mov	r0, r4
 8011784:	4629      	mov	r1, r5
 8011786:	f7ee fd81 	bl	800028c <__adddf3>
 801178a:	4b9e      	ldr	r3, [pc, #632]	@ (8011a04 <atan+0x314>)
 801178c:	2200      	movs	r2, #0
 801178e:	f7ee fd7b 	bl	8000288 <__aeabi_dsub>
 8011792:	2200      	movs	r2, #0
 8011794:	4606      	mov	r6, r0
 8011796:	460f      	mov	r7, r1
 8011798:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801179c:	4620      	mov	r0, r4
 801179e:	4629      	mov	r1, r5
 80117a0:	f7ee fd74 	bl	800028c <__adddf3>
 80117a4:	4602      	mov	r2, r0
 80117a6:	460b      	mov	r3, r1
 80117a8:	4630      	mov	r0, r6
 80117aa:	4639      	mov	r1, r7
 80117ac:	f7ef f84e 	bl	800084c <__aeabi_ddiv>
 80117b0:	f04f 0a00 	mov.w	sl, #0
 80117b4:	4604      	mov	r4, r0
 80117b6:	460d      	mov	r5, r1
 80117b8:	4622      	mov	r2, r4
 80117ba:	462b      	mov	r3, r5
 80117bc:	4620      	mov	r0, r4
 80117be:	4629      	mov	r1, r5
 80117c0:	f7ee ff1a 	bl	80005f8 <__aeabi_dmul>
 80117c4:	4602      	mov	r2, r0
 80117c6:	460b      	mov	r3, r1
 80117c8:	4680      	mov	r8, r0
 80117ca:	4689      	mov	r9, r1
 80117cc:	f7ee ff14 	bl	80005f8 <__aeabi_dmul>
 80117d0:	a371      	add	r3, pc, #452	@ (adr r3, 8011998 <atan+0x2a8>)
 80117d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d6:	4606      	mov	r6, r0
 80117d8:	460f      	mov	r7, r1
 80117da:	f7ee ff0d 	bl	80005f8 <__aeabi_dmul>
 80117de:	a370      	add	r3, pc, #448	@ (adr r3, 80119a0 <atan+0x2b0>)
 80117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e4:	f7ee fd52 	bl	800028c <__adddf3>
 80117e8:	4632      	mov	r2, r6
 80117ea:	463b      	mov	r3, r7
 80117ec:	f7ee ff04 	bl	80005f8 <__aeabi_dmul>
 80117f0:	a36d      	add	r3, pc, #436	@ (adr r3, 80119a8 <atan+0x2b8>)
 80117f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f6:	f7ee fd49 	bl	800028c <__adddf3>
 80117fa:	4632      	mov	r2, r6
 80117fc:	463b      	mov	r3, r7
 80117fe:	f7ee fefb 	bl	80005f8 <__aeabi_dmul>
 8011802:	a36b      	add	r3, pc, #428	@ (adr r3, 80119b0 <atan+0x2c0>)
 8011804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011808:	f7ee fd40 	bl	800028c <__adddf3>
 801180c:	4632      	mov	r2, r6
 801180e:	463b      	mov	r3, r7
 8011810:	f7ee fef2 	bl	80005f8 <__aeabi_dmul>
 8011814:	a368      	add	r3, pc, #416	@ (adr r3, 80119b8 <atan+0x2c8>)
 8011816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181a:	f7ee fd37 	bl	800028c <__adddf3>
 801181e:	4632      	mov	r2, r6
 8011820:	463b      	mov	r3, r7
 8011822:	f7ee fee9 	bl	80005f8 <__aeabi_dmul>
 8011826:	a366      	add	r3, pc, #408	@ (adr r3, 80119c0 <atan+0x2d0>)
 8011828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182c:	f7ee fd2e 	bl	800028c <__adddf3>
 8011830:	4642      	mov	r2, r8
 8011832:	464b      	mov	r3, r9
 8011834:	f7ee fee0 	bl	80005f8 <__aeabi_dmul>
 8011838:	a363      	add	r3, pc, #396	@ (adr r3, 80119c8 <atan+0x2d8>)
 801183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183e:	4680      	mov	r8, r0
 8011840:	4689      	mov	r9, r1
 8011842:	4630      	mov	r0, r6
 8011844:	4639      	mov	r1, r7
 8011846:	f7ee fed7 	bl	80005f8 <__aeabi_dmul>
 801184a:	a361      	add	r3, pc, #388	@ (adr r3, 80119d0 <atan+0x2e0>)
 801184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011850:	f7ee fd1a 	bl	8000288 <__aeabi_dsub>
 8011854:	4632      	mov	r2, r6
 8011856:	463b      	mov	r3, r7
 8011858:	f7ee fece 	bl	80005f8 <__aeabi_dmul>
 801185c:	a35e      	add	r3, pc, #376	@ (adr r3, 80119d8 <atan+0x2e8>)
 801185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011862:	f7ee fd11 	bl	8000288 <__aeabi_dsub>
 8011866:	4632      	mov	r2, r6
 8011868:	463b      	mov	r3, r7
 801186a:	f7ee fec5 	bl	80005f8 <__aeabi_dmul>
 801186e:	a35c      	add	r3, pc, #368	@ (adr r3, 80119e0 <atan+0x2f0>)
 8011870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011874:	f7ee fd08 	bl	8000288 <__aeabi_dsub>
 8011878:	4632      	mov	r2, r6
 801187a:	463b      	mov	r3, r7
 801187c:	f7ee febc 	bl	80005f8 <__aeabi_dmul>
 8011880:	a359      	add	r3, pc, #356	@ (adr r3, 80119e8 <atan+0x2f8>)
 8011882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011886:	f7ee fcff 	bl	8000288 <__aeabi_dsub>
 801188a:	4632      	mov	r2, r6
 801188c:	463b      	mov	r3, r7
 801188e:	f7ee feb3 	bl	80005f8 <__aeabi_dmul>
 8011892:	4602      	mov	r2, r0
 8011894:	460b      	mov	r3, r1
 8011896:	4640      	mov	r0, r8
 8011898:	4649      	mov	r1, r9
 801189a:	f7ee fcf7 	bl	800028c <__adddf3>
 801189e:	4622      	mov	r2, r4
 80118a0:	462b      	mov	r3, r5
 80118a2:	f7ee fea9 	bl	80005f8 <__aeabi_dmul>
 80118a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80118aa:	4602      	mov	r2, r0
 80118ac:	460b      	mov	r3, r1
 80118ae:	d148      	bne.n	8011942 <atan+0x252>
 80118b0:	4620      	mov	r0, r4
 80118b2:	4629      	mov	r1, r5
 80118b4:	f7ee fce8 	bl	8000288 <__aeabi_dsub>
 80118b8:	e72f      	b.n	801171a <atan+0x2a>
 80118ba:	4b52      	ldr	r3, [pc, #328]	@ (8011a04 <atan+0x314>)
 80118bc:	2200      	movs	r2, #0
 80118be:	4620      	mov	r0, r4
 80118c0:	4629      	mov	r1, r5
 80118c2:	f7ee fce1 	bl	8000288 <__aeabi_dsub>
 80118c6:	4b4f      	ldr	r3, [pc, #316]	@ (8011a04 <atan+0x314>)
 80118c8:	4606      	mov	r6, r0
 80118ca:	460f      	mov	r7, r1
 80118cc:	2200      	movs	r2, #0
 80118ce:	4620      	mov	r0, r4
 80118d0:	4629      	mov	r1, r5
 80118d2:	f7ee fcdb 	bl	800028c <__adddf3>
 80118d6:	4602      	mov	r2, r0
 80118d8:	460b      	mov	r3, r1
 80118da:	4630      	mov	r0, r6
 80118dc:	4639      	mov	r1, r7
 80118de:	f7ee ffb5 	bl	800084c <__aeabi_ddiv>
 80118e2:	f04f 0a01 	mov.w	sl, #1
 80118e6:	4604      	mov	r4, r0
 80118e8:	460d      	mov	r5, r1
 80118ea:	e765      	b.n	80117b8 <atan+0xc8>
 80118ec:	4b47      	ldr	r3, [pc, #284]	@ (8011a0c <atan+0x31c>)
 80118ee:	429e      	cmp	r6, r3
 80118f0:	d21c      	bcs.n	801192c <atan+0x23c>
 80118f2:	4b47      	ldr	r3, [pc, #284]	@ (8011a10 <atan+0x320>)
 80118f4:	2200      	movs	r2, #0
 80118f6:	4620      	mov	r0, r4
 80118f8:	4629      	mov	r1, r5
 80118fa:	f7ee fcc5 	bl	8000288 <__aeabi_dsub>
 80118fe:	4b44      	ldr	r3, [pc, #272]	@ (8011a10 <atan+0x320>)
 8011900:	4606      	mov	r6, r0
 8011902:	460f      	mov	r7, r1
 8011904:	2200      	movs	r2, #0
 8011906:	4620      	mov	r0, r4
 8011908:	4629      	mov	r1, r5
 801190a:	f7ee fe75 	bl	80005f8 <__aeabi_dmul>
 801190e:	4b3d      	ldr	r3, [pc, #244]	@ (8011a04 <atan+0x314>)
 8011910:	2200      	movs	r2, #0
 8011912:	f7ee fcbb 	bl	800028c <__adddf3>
 8011916:	4602      	mov	r2, r0
 8011918:	460b      	mov	r3, r1
 801191a:	4630      	mov	r0, r6
 801191c:	4639      	mov	r1, r7
 801191e:	f7ee ff95 	bl	800084c <__aeabi_ddiv>
 8011922:	f04f 0a02 	mov.w	sl, #2
 8011926:	4604      	mov	r4, r0
 8011928:	460d      	mov	r5, r1
 801192a:	e745      	b.n	80117b8 <atan+0xc8>
 801192c:	4622      	mov	r2, r4
 801192e:	462b      	mov	r3, r5
 8011930:	4938      	ldr	r1, [pc, #224]	@ (8011a14 <atan+0x324>)
 8011932:	2000      	movs	r0, #0
 8011934:	f7ee ff8a 	bl	800084c <__aeabi_ddiv>
 8011938:	f04f 0a03 	mov.w	sl, #3
 801193c:	4604      	mov	r4, r0
 801193e:	460d      	mov	r5, r1
 8011940:	e73a      	b.n	80117b8 <atan+0xc8>
 8011942:	4b35      	ldr	r3, [pc, #212]	@ (8011a18 <atan+0x328>)
 8011944:	4e35      	ldr	r6, [pc, #212]	@ (8011a1c <atan+0x32c>)
 8011946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194e:	f7ee fc9b 	bl	8000288 <__aeabi_dsub>
 8011952:	4622      	mov	r2, r4
 8011954:	462b      	mov	r3, r5
 8011956:	f7ee fc97 	bl	8000288 <__aeabi_dsub>
 801195a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801195e:	4602      	mov	r2, r0
 8011960:	460b      	mov	r3, r1
 8011962:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011966:	f7ee fc8f 	bl	8000288 <__aeabi_dsub>
 801196a:	f1bb 0f00 	cmp.w	fp, #0
 801196e:	4604      	mov	r4, r0
 8011970:	460d      	mov	r5, r1
 8011972:	f6bf aedc 	bge.w	801172e <atan+0x3e>
 8011976:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801197a:	461d      	mov	r5, r3
 801197c:	e6d7      	b.n	801172e <atan+0x3e>
 801197e:	a51c      	add	r5, pc, #112	@ (adr r5, 80119f0 <atan+0x300>)
 8011980:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011984:	e6d3      	b.n	801172e <atan+0x3e>
 8011986:	bf00      	nop
 8011988:	54442d18 	.word	0x54442d18
 801198c:	3ff921fb 	.word	0x3ff921fb
 8011990:	8800759c 	.word	0x8800759c
 8011994:	7e37e43c 	.word	0x7e37e43c
 8011998:	e322da11 	.word	0xe322da11
 801199c:	3f90ad3a 	.word	0x3f90ad3a
 80119a0:	24760deb 	.word	0x24760deb
 80119a4:	3fa97b4b 	.word	0x3fa97b4b
 80119a8:	a0d03d51 	.word	0xa0d03d51
 80119ac:	3fb10d66 	.word	0x3fb10d66
 80119b0:	c54c206e 	.word	0xc54c206e
 80119b4:	3fb745cd 	.word	0x3fb745cd
 80119b8:	920083ff 	.word	0x920083ff
 80119bc:	3fc24924 	.word	0x3fc24924
 80119c0:	5555550d 	.word	0x5555550d
 80119c4:	3fd55555 	.word	0x3fd55555
 80119c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80119cc:	bfa2b444 	.word	0xbfa2b444
 80119d0:	52defd9a 	.word	0x52defd9a
 80119d4:	3fadde2d 	.word	0x3fadde2d
 80119d8:	af749a6d 	.word	0xaf749a6d
 80119dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80119e0:	fe231671 	.word	0xfe231671
 80119e4:	3fbc71c6 	.word	0x3fbc71c6
 80119e8:	9998ebc4 	.word	0x9998ebc4
 80119ec:	3fc99999 	.word	0x3fc99999
 80119f0:	54442d18 	.word	0x54442d18
 80119f4:	bff921fb 	.word	0xbff921fb
 80119f8:	440fffff 	.word	0x440fffff
 80119fc:	7ff00000 	.word	0x7ff00000
 8011a00:	3fdbffff 	.word	0x3fdbffff
 8011a04:	3ff00000 	.word	0x3ff00000
 8011a08:	3ff2ffff 	.word	0x3ff2ffff
 8011a0c:	40038000 	.word	0x40038000
 8011a10:	3ff80000 	.word	0x3ff80000
 8011a14:	bff00000 	.word	0xbff00000
 8011a18:	08012a98 	.word	0x08012a98
 8011a1c:	08012ab8 	.word	0x08012ab8

08011a20 <__kernel_cosf>:
 8011a20:	ee10 3a10 	vmov	r3, s0
 8011a24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011a2c:	eef0 6a40 	vmov.f32	s13, s0
 8011a30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011a34:	d204      	bcs.n	8011a40 <__kernel_cosf+0x20>
 8011a36:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8011a3a:	ee17 2a90 	vmov	r2, s15
 8011a3e:	b342      	cbz	r2, 8011a92 <__kernel_cosf+0x72>
 8011a40:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011a44:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011ab0 <__kernel_cosf+0x90>
 8011a48:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011ab4 <__kernel_cosf+0x94>
 8011a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8011ab8 <__kernel_cosf+0x98>)
 8011a4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011a52:	4293      	cmp	r3, r2
 8011a54:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011abc <__kernel_cosf+0x9c>
 8011a58:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011a5c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011ac0 <__kernel_cosf+0xa0>
 8011a60:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011a64:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011ac4 <__kernel_cosf+0xa4>
 8011a68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011a6c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011ac8 <__kernel_cosf+0xa8>
 8011a70:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011a74:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8011a78:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011a7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011a80:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a88:	d804      	bhi.n	8011a94 <__kernel_cosf+0x74>
 8011a8a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011a8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a92:	4770      	bx	lr
 8011a94:	4a0d      	ldr	r2, [pc, #52]	@ (8011acc <__kernel_cosf+0xac>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	bf9a      	itte	ls
 8011a9a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8011a9e:	ee07 3a10 	vmovls	s14, r3
 8011aa2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011aa6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011aaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011aae:	e7ec      	b.n	8011a8a <__kernel_cosf+0x6a>
 8011ab0:	ad47d74e 	.word	0xad47d74e
 8011ab4:	310f74f6 	.word	0x310f74f6
 8011ab8:	3e999999 	.word	0x3e999999
 8011abc:	b493f27c 	.word	0xb493f27c
 8011ac0:	37d00d01 	.word	0x37d00d01
 8011ac4:	bab60b61 	.word	0xbab60b61
 8011ac8:	3d2aaaab 	.word	0x3d2aaaab
 8011acc:	3f480000 	.word	0x3f480000

08011ad0 <__kernel_sinf>:
 8011ad0:	ee10 3a10 	vmov	r3, s0
 8011ad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011ad8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011adc:	d204      	bcs.n	8011ae8 <__kernel_sinf+0x18>
 8011ade:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011ae2:	ee17 3a90 	vmov	r3, s15
 8011ae6:	b35b      	cbz	r3, 8011b40 <__kernel_sinf+0x70>
 8011ae8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011aec:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011b44 <__kernel_sinf+0x74>
 8011af0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011b48 <__kernel_sinf+0x78>
 8011af4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011af8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8011b4c <__kernel_sinf+0x7c>
 8011afc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011b00:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011b50 <__kernel_sinf+0x80>
 8011b04:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011b08:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011b54 <__kernel_sinf+0x84>
 8011b0c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011b10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011b14:	b930      	cbnz	r0, 8011b24 <__kernel_sinf+0x54>
 8011b16:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011b58 <__kernel_sinf+0x88>
 8011b1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011b1e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011b22:	4770      	bx	lr
 8011b24:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011b28:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011b2c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011b30:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011b34:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8011b5c <__kernel_sinf+0x8c>
 8011b38:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011b3c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop
 8011b44:	2f2ec9d3 	.word	0x2f2ec9d3
 8011b48:	b2d72f34 	.word	0xb2d72f34
 8011b4c:	3638ef1b 	.word	0x3638ef1b
 8011b50:	b9500d01 	.word	0xb9500d01
 8011b54:	3c088889 	.word	0x3c088889
 8011b58:	be2aaaab 	.word	0xbe2aaaab
 8011b5c:	3e2aaaab 	.word	0x3e2aaaab

08011b60 <__ieee754_expf>:
 8011b60:	ee10 2a10 	vmov	r2, s0
 8011b64:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8011b68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b6c:	d902      	bls.n	8011b74 <__ieee754_expf+0x14>
 8011b6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011b72:	4770      	bx	lr
 8011b74:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8011b78:	d106      	bne.n	8011b88 <__ieee754_expf+0x28>
 8011b7a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8011cb4 <__ieee754_expf+0x154>
 8011b7e:	2900      	cmp	r1, #0
 8011b80:	bf18      	it	ne
 8011b82:	eeb0 0a67 	vmovne.f32	s0, s15
 8011b86:	4770      	bx	lr
 8011b88:	484b      	ldr	r0, [pc, #300]	@ (8011cb8 <__ieee754_expf+0x158>)
 8011b8a:	4282      	cmp	r2, r0
 8011b8c:	dd02      	ble.n	8011b94 <__ieee754_expf+0x34>
 8011b8e:	2000      	movs	r0, #0
 8011b90:	f000 ba6a 	b.w	8012068 <__math_oflowf>
 8011b94:	2a00      	cmp	r2, #0
 8011b96:	da05      	bge.n	8011ba4 <__ieee754_expf+0x44>
 8011b98:	4a48      	ldr	r2, [pc, #288]	@ (8011cbc <__ieee754_expf+0x15c>)
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	d902      	bls.n	8011ba4 <__ieee754_expf+0x44>
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	f000 ba5c 	b.w	801205c <__math_uflowf>
 8011ba4:	4a46      	ldr	r2, [pc, #280]	@ (8011cc0 <__ieee754_expf+0x160>)
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8011bac:	d952      	bls.n	8011c54 <__ieee754_expf+0xf4>
 8011bae:	4a45      	ldr	r2, [pc, #276]	@ (8011cc4 <__ieee754_expf+0x164>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8011bb6:	d834      	bhi.n	8011c22 <__ieee754_expf+0xc2>
 8011bb8:	4b43      	ldr	r3, [pc, #268]	@ (8011cc8 <__ieee754_expf+0x168>)
 8011bba:	4413      	add	r3, r2
 8011bbc:	ed93 7a00 	vldr	s14, [r3]
 8011bc0:	4b42      	ldr	r3, [pc, #264]	@ (8011ccc <__ieee754_expf+0x16c>)
 8011bc2:	4413      	add	r3, r2
 8011bc4:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011bc8:	f1c1 0201 	rsb	r2, r1, #1
 8011bcc:	edd3 7a00 	vldr	s15, [r3]
 8011bd0:	1a52      	subs	r2, r2, r1
 8011bd2:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011bd6:	ee20 6a00 	vmul.f32	s12, s0, s0
 8011bda:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8011cd0 <__ieee754_expf+0x170>
 8011bde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011cd4 <__ieee754_expf+0x174>
 8011be2:	eee6 6a05 	vfma.f32	s13, s12, s10
 8011be6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8011cd8 <__ieee754_expf+0x178>
 8011bea:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011bee:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011cdc <__ieee754_expf+0x17c>
 8011bf2:	eee5 6a06 	vfma.f32	s13, s10, s12
 8011bf6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8011ce0 <__ieee754_expf+0x180>
 8011bfa:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011bfe:	eef0 6a40 	vmov.f32	s13, s0
 8011c02:	eee5 6a46 	vfms.f32	s13, s10, s12
 8011c06:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011c0a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8011c0e:	bb92      	cbnz	r2, 8011c76 <__ieee754_expf+0x116>
 8011c10:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011c14:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011c18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011c1c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8011c20:	4770      	bx	lr
 8011c22:	4b30      	ldr	r3, [pc, #192]	@ (8011ce4 <__ieee754_expf+0x184>)
 8011c24:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011ce8 <__ieee754_expf+0x188>
 8011c28:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8011cec <__ieee754_expf+0x18c>
 8011c2c:	4413      	add	r3, r2
 8011c2e:	edd3 7a00 	vldr	s15, [r3]
 8011c32:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011c36:	eeb0 7a40 	vmov.f32	s14, s0
 8011c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c3e:	ee17 2a90 	vmov	r2, s15
 8011c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c46:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011c4a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011cf0 <__ieee754_expf+0x190>
 8011c4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011c52:	e7be      	b.n	8011bd2 <__ieee754_expf+0x72>
 8011c54:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8011c58:	d20b      	bcs.n	8011c72 <__ieee754_expf+0x112>
 8011c5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011cf4 <__ieee754_expf+0x194>
 8011c5e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011c62:	eef4 6ae5 	vcmpe.f32	s13, s11
 8011c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6a:	dd02      	ble.n	8011c72 <__ieee754_expf+0x112>
 8011c6c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8011c70:	4770      	bx	lr
 8011c72:	2200      	movs	r2, #0
 8011c74:	e7af      	b.n	8011bd6 <__ieee754_expf+0x76>
 8011c76:	ee36 6a66 	vsub.f32	s12, s12, s13
 8011c7a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8011c7e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8011c82:	bfb8      	it	lt
 8011c84:	3264      	addlt	r2, #100	@ 0x64
 8011c86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c8e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011c92:	ee17 3a90 	vmov	r3, s15
 8011c96:	bfab      	itete	ge
 8011c98:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011c9c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011ca0:	ee00 3a10 	vmovge	s0, r3
 8011ca4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8011cf8 <__ieee754_expf+0x198>
 8011ca8:	bfbc      	itt	lt
 8011caa:	ee00 3a10 	vmovlt	s0, r3
 8011cae:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011cb2:	4770      	bx	lr
 8011cb4:	00000000 	.word	0x00000000
 8011cb8:	42b17217 	.word	0x42b17217
 8011cbc:	42cff1b5 	.word	0x42cff1b5
 8011cc0:	3eb17218 	.word	0x3eb17218
 8011cc4:	3f851591 	.word	0x3f851591
 8011cc8:	08012ae0 	.word	0x08012ae0
 8011ccc:	08012ad8 	.word	0x08012ad8
 8011cd0:	3331bb4c 	.word	0x3331bb4c
 8011cd4:	b5ddea0e 	.word	0xb5ddea0e
 8011cd8:	388ab355 	.word	0x388ab355
 8011cdc:	bb360b61 	.word	0xbb360b61
 8011ce0:	3e2aaaab 	.word	0x3e2aaaab
 8011ce4:	08012ae8 	.word	0x08012ae8
 8011ce8:	3fb8aa3b 	.word	0x3fb8aa3b
 8011cec:	3f317180 	.word	0x3f317180
 8011cf0:	3717f7d1 	.word	0x3717f7d1
 8011cf4:	7149f2ca 	.word	0x7149f2ca
 8011cf8:	0d800000 	.word	0x0d800000

08011cfc <__ieee754_rem_pio2f>:
 8011cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cfe:	ee10 6a10 	vmov	r6, s0
 8011d02:	4b88      	ldr	r3, [pc, #544]	@ (8011f24 <__ieee754_rem_pio2f+0x228>)
 8011d04:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011d08:	429d      	cmp	r5, r3
 8011d0a:	b087      	sub	sp, #28
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	d805      	bhi.n	8011d1c <__ieee754_rem_pio2f+0x20>
 8011d10:	2300      	movs	r3, #0
 8011d12:	ed80 0a00 	vstr	s0, [r0]
 8011d16:	6043      	str	r3, [r0, #4]
 8011d18:	2000      	movs	r0, #0
 8011d1a:	e022      	b.n	8011d62 <__ieee754_rem_pio2f+0x66>
 8011d1c:	4b82      	ldr	r3, [pc, #520]	@ (8011f28 <__ieee754_rem_pio2f+0x22c>)
 8011d1e:	429d      	cmp	r5, r3
 8011d20:	d83a      	bhi.n	8011d98 <__ieee754_rem_pio2f+0x9c>
 8011d22:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011d26:	2e00      	cmp	r6, #0
 8011d28:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011f2c <__ieee754_rem_pio2f+0x230>
 8011d2c:	4a80      	ldr	r2, [pc, #512]	@ (8011f30 <__ieee754_rem_pio2f+0x234>)
 8011d2e:	f023 030f 	bic.w	r3, r3, #15
 8011d32:	dd18      	ble.n	8011d66 <__ieee754_rem_pio2f+0x6a>
 8011d34:	4293      	cmp	r3, r2
 8011d36:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011d3a:	bf09      	itett	eq
 8011d3c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011f34 <__ieee754_rem_pio2f+0x238>
 8011d40:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011f38 <__ieee754_rem_pio2f+0x23c>
 8011d44:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011f3c <__ieee754_rem_pio2f+0x240>
 8011d48:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011d4c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d54:	ed80 7a00 	vstr	s14, [r0]
 8011d58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d5c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011d60:	2001      	movs	r0, #1
 8011d62:	b007      	add	sp, #28
 8011d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d66:	4293      	cmp	r3, r2
 8011d68:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011d6c:	bf09      	itett	eq
 8011d6e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011f34 <__ieee754_rem_pio2f+0x238>
 8011d72:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011f38 <__ieee754_rem_pio2f+0x23c>
 8011d76:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011f3c <__ieee754_rem_pio2f+0x240>
 8011d7a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011d7e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011d82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d86:	ed80 7a00 	vstr	s14, [r0]
 8011d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011d8e:	edc0 7a01 	vstr	s15, [r0, #4]
 8011d92:	f04f 30ff 	mov.w	r0, #4294967295
 8011d96:	e7e4      	b.n	8011d62 <__ieee754_rem_pio2f+0x66>
 8011d98:	4b69      	ldr	r3, [pc, #420]	@ (8011f40 <__ieee754_rem_pio2f+0x244>)
 8011d9a:	429d      	cmp	r5, r3
 8011d9c:	d873      	bhi.n	8011e86 <__ieee754_rem_pio2f+0x18a>
 8011d9e:	f7ff f89f 	bl	8010ee0 <fabsf>
 8011da2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011f44 <__ieee754_rem_pio2f+0x248>
 8011da6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011daa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011db6:	ee17 0a90 	vmov	r0, s15
 8011dba:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011f2c <__ieee754_rem_pio2f+0x230>
 8011dbe:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011dc2:	281f      	cmp	r0, #31
 8011dc4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011f38 <__ieee754_rem_pio2f+0x23c>
 8011dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dcc:	eeb1 6a47 	vneg.f32	s12, s14
 8011dd0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011dd4:	ee16 1a90 	vmov	r1, s13
 8011dd8:	dc09      	bgt.n	8011dee <__ieee754_rem_pio2f+0xf2>
 8011dda:	4a5b      	ldr	r2, [pc, #364]	@ (8011f48 <__ieee754_rem_pio2f+0x24c>)
 8011ddc:	1e47      	subs	r7, r0, #1
 8011dde:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011de2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8011de6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011dea:	4293      	cmp	r3, r2
 8011dec:	d107      	bne.n	8011dfe <__ieee754_rem_pio2f+0x102>
 8011dee:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011df2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011df6:	2a08      	cmp	r2, #8
 8011df8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011dfc:	dc14      	bgt.n	8011e28 <__ieee754_rem_pio2f+0x12c>
 8011dfe:	6021      	str	r1, [r4, #0]
 8011e00:	ed94 7a00 	vldr	s14, [r4]
 8011e04:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011e08:	2e00      	cmp	r6, #0
 8011e0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011e0e:	ed84 0a01 	vstr	s0, [r4, #4]
 8011e12:	daa6      	bge.n	8011d62 <__ieee754_rem_pio2f+0x66>
 8011e14:	eeb1 7a47 	vneg.f32	s14, s14
 8011e18:	eeb1 0a40 	vneg.f32	s0, s0
 8011e1c:	ed84 7a00 	vstr	s14, [r4]
 8011e20:	ed84 0a01 	vstr	s0, [r4, #4]
 8011e24:	4240      	negs	r0, r0
 8011e26:	e79c      	b.n	8011d62 <__ieee754_rem_pio2f+0x66>
 8011e28:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011f34 <__ieee754_rem_pio2f+0x238>
 8011e2c:	eef0 6a40 	vmov.f32	s13, s0
 8011e30:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011e34:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011e38:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011e3c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011f3c <__ieee754_rem_pio2f+0x240>
 8011e40:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011e44:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011e48:	ee15 2a90 	vmov	r2, s11
 8011e4c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011e50:	1a5b      	subs	r3, r3, r1
 8011e52:	2b19      	cmp	r3, #25
 8011e54:	dc04      	bgt.n	8011e60 <__ieee754_rem_pio2f+0x164>
 8011e56:	edc4 5a00 	vstr	s11, [r4]
 8011e5a:	eeb0 0a66 	vmov.f32	s0, s13
 8011e5e:	e7cf      	b.n	8011e00 <__ieee754_rem_pio2f+0x104>
 8011e60:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011f4c <__ieee754_rem_pio2f+0x250>
 8011e64:	eeb0 0a66 	vmov.f32	s0, s13
 8011e68:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011e6c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011e70:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011f50 <__ieee754_rem_pio2f+0x254>
 8011e74:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011e78:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011e7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011e80:	ed84 7a00 	vstr	s14, [r4]
 8011e84:	e7bc      	b.n	8011e00 <__ieee754_rem_pio2f+0x104>
 8011e86:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011e8a:	d306      	bcc.n	8011e9a <__ieee754_rem_pio2f+0x19e>
 8011e8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011e90:	edc0 7a01 	vstr	s15, [r0, #4]
 8011e94:	edc0 7a00 	vstr	s15, [r0]
 8011e98:	e73e      	b.n	8011d18 <__ieee754_rem_pio2f+0x1c>
 8011e9a:	15ea      	asrs	r2, r5, #23
 8011e9c:	3a86      	subs	r2, #134	@ 0x86
 8011e9e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011ea2:	ee07 3a90 	vmov	s15, r3
 8011ea6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011eaa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011f54 <__ieee754_rem_pio2f+0x258>
 8011eae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011eb6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011eba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011ebe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011ec2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011eca:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011ece:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011ed2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	edcd 7a05 	vstr	s15, [sp, #20]
 8011ede:	d11e      	bne.n	8011f1e <__ieee754_rem_pio2f+0x222>
 8011ee0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee8:	bf0c      	ite	eq
 8011eea:	2301      	moveq	r3, #1
 8011eec:	2302      	movne	r3, #2
 8011eee:	491a      	ldr	r1, [pc, #104]	@ (8011f58 <__ieee754_rem_pio2f+0x25c>)
 8011ef0:	9101      	str	r1, [sp, #4]
 8011ef2:	2102      	movs	r1, #2
 8011ef4:	9100      	str	r1, [sp, #0]
 8011ef6:	a803      	add	r0, sp, #12
 8011ef8:	4621      	mov	r1, r4
 8011efa:	f000 f8bb 	bl	8012074 <__kernel_rem_pio2f>
 8011efe:	2e00      	cmp	r6, #0
 8011f00:	f6bf af2f 	bge.w	8011d62 <__ieee754_rem_pio2f+0x66>
 8011f04:	edd4 7a00 	vldr	s15, [r4]
 8011f08:	eef1 7a67 	vneg.f32	s15, s15
 8011f0c:	edc4 7a00 	vstr	s15, [r4]
 8011f10:	edd4 7a01 	vldr	s15, [r4, #4]
 8011f14:	eef1 7a67 	vneg.f32	s15, s15
 8011f18:	edc4 7a01 	vstr	s15, [r4, #4]
 8011f1c:	e782      	b.n	8011e24 <__ieee754_rem_pio2f+0x128>
 8011f1e:	2303      	movs	r3, #3
 8011f20:	e7e5      	b.n	8011eee <__ieee754_rem_pio2f+0x1f2>
 8011f22:	bf00      	nop
 8011f24:	3f490fd8 	.word	0x3f490fd8
 8011f28:	4016cbe3 	.word	0x4016cbe3
 8011f2c:	3fc90f80 	.word	0x3fc90f80
 8011f30:	3fc90fd0 	.word	0x3fc90fd0
 8011f34:	37354400 	.word	0x37354400
 8011f38:	37354443 	.word	0x37354443
 8011f3c:	2e85a308 	.word	0x2e85a308
 8011f40:	43490f80 	.word	0x43490f80
 8011f44:	3f22f984 	.word	0x3f22f984
 8011f48:	08012af0 	.word	0x08012af0
 8011f4c:	2e85a300 	.word	0x2e85a300
 8011f50:	248d3132 	.word	0x248d3132
 8011f54:	43800000 	.word	0x43800000
 8011f58:	08012b70 	.word	0x08012b70

08011f5c <scalbnf>:
 8011f5c:	ee10 3a10 	vmov	r3, s0
 8011f60:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011f64:	d02b      	beq.n	8011fbe <scalbnf+0x62>
 8011f66:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011f6a:	d302      	bcc.n	8011f72 <scalbnf+0x16>
 8011f6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011f70:	4770      	bx	lr
 8011f72:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011f76:	d123      	bne.n	8011fc0 <scalbnf+0x64>
 8011f78:	4b24      	ldr	r3, [pc, #144]	@ (801200c <scalbnf+0xb0>)
 8011f7a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012010 <scalbnf+0xb4>
 8011f7e:	4298      	cmp	r0, r3
 8011f80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011f84:	db17      	blt.n	8011fb6 <scalbnf+0x5a>
 8011f86:	ee10 3a10 	vmov	r3, s0
 8011f8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011f8e:	3a19      	subs	r2, #25
 8011f90:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011f94:	4288      	cmp	r0, r1
 8011f96:	dd15      	ble.n	8011fc4 <scalbnf+0x68>
 8011f98:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012014 <scalbnf+0xb8>
 8011f9c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012018 <scalbnf+0xbc>
 8011fa0:	ee10 3a10 	vmov	r3, s0
 8011fa4:	eeb0 7a67 	vmov.f32	s14, s15
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	bfb8      	it	lt
 8011fac:	eef0 7a66 	vmovlt.f32	s15, s13
 8011fb0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011fb4:	4770      	bx	lr
 8011fb6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801201c <scalbnf+0xc0>
 8011fba:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011fbe:	4770      	bx	lr
 8011fc0:	0dd2      	lsrs	r2, r2, #23
 8011fc2:	e7e5      	b.n	8011f90 <scalbnf+0x34>
 8011fc4:	4410      	add	r0, r2
 8011fc6:	28fe      	cmp	r0, #254	@ 0xfe
 8011fc8:	dce6      	bgt.n	8011f98 <scalbnf+0x3c>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	dd06      	ble.n	8011fdc <scalbnf+0x80>
 8011fce:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011fd2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011fd6:	ee00 3a10 	vmov	s0, r3
 8011fda:	4770      	bx	lr
 8011fdc:	f110 0f16 	cmn.w	r0, #22
 8011fe0:	da09      	bge.n	8011ff6 <scalbnf+0x9a>
 8011fe2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801201c <scalbnf+0xc0>
 8011fe6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012020 <scalbnf+0xc4>
 8011fea:	ee10 3a10 	vmov	r3, s0
 8011fee:	eeb0 7a67 	vmov.f32	s14, s15
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	e7d9      	b.n	8011faa <scalbnf+0x4e>
 8011ff6:	3019      	adds	r0, #25
 8011ff8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011ffc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012000:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012024 <scalbnf+0xc8>
 8012004:	ee07 3a90 	vmov	s15, r3
 8012008:	e7d7      	b.n	8011fba <scalbnf+0x5e>
 801200a:	bf00      	nop
 801200c:	ffff3cb0 	.word	0xffff3cb0
 8012010:	4c000000 	.word	0x4c000000
 8012014:	7149f2ca 	.word	0x7149f2ca
 8012018:	f149f2ca 	.word	0xf149f2ca
 801201c:	0da24260 	.word	0x0da24260
 8012020:	8da24260 	.word	0x8da24260
 8012024:	33000000 	.word	0x33000000

08012028 <with_errnof>:
 8012028:	b510      	push	{r4, lr}
 801202a:	ed2d 8b02 	vpush	{d8}
 801202e:	eeb0 8a40 	vmov.f32	s16, s0
 8012032:	4604      	mov	r4, r0
 8012034:	f7fc fe12 	bl	800ec5c <__errno>
 8012038:	eeb0 0a48 	vmov.f32	s0, s16
 801203c:	ecbd 8b02 	vpop	{d8}
 8012040:	6004      	str	r4, [r0, #0]
 8012042:	bd10      	pop	{r4, pc}

08012044 <xflowf>:
 8012044:	b130      	cbz	r0, 8012054 <xflowf+0x10>
 8012046:	eef1 7a40 	vneg.f32	s15, s0
 801204a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801204e:	2022      	movs	r0, #34	@ 0x22
 8012050:	f7ff bfea 	b.w	8012028 <with_errnof>
 8012054:	eef0 7a40 	vmov.f32	s15, s0
 8012058:	e7f7      	b.n	801204a <xflowf+0x6>
	...

0801205c <__math_uflowf>:
 801205c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012064 <__math_uflowf+0x8>
 8012060:	f7ff bff0 	b.w	8012044 <xflowf>
 8012064:	10000000 	.word	0x10000000

08012068 <__math_oflowf>:
 8012068:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012070 <__math_oflowf+0x8>
 801206c:	f7ff bfea 	b.w	8012044 <xflowf>
 8012070:	70000000 	.word	0x70000000

08012074 <__kernel_rem_pio2f>:
 8012074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012078:	ed2d 8b04 	vpush	{d8-d9}
 801207c:	b0d9      	sub	sp, #356	@ 0x164
 801207e:	4690      	mov	r8, r2
 8012080:	9001      	str	r0, [sp, #4]
 8012082:	4ab9      	ldr	r2, [pc, #740]	@ (8012368 <__kernel_rem_pio2f+0x2f4>)
 8012084:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8012086:	f118 0f04 	cmn.w	r8, #4
 801208a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801208e:	460f      	mov	r7, r1
 8012090:	f103 3bff 	add.w	fp, r3, #4294967295
 8012094:	db27      	blt.n	80120e6 <__kernel_rem_pio2f+0x72>
 8012096:	f1b8 0203 	subs.w	r2, r8, #3
 801209a:	bf48      	it	mi
 801209c:	f108 0204 	addmi.w	r2, r8, #4
 80120a0:	10d2      	asrs	r2, r2, #3
 80120a2:	1c55      	adds	r5, r2, #1
 80120a4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80120a6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8012378 <__kernel_rem_pio2f+0x304>
 80120aa:	00e8      	lsls	r0, r5, #3
 80120ac:	eba2 060b 	sub.w	r6, r2, fp
 80120b0:	9002      	str	r0, [sp, #8]
 80120b2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80120b6:	eb0a 0c0b 	add.w	ip, sl, fp
 80120ba:	ac1c      	add	r4, sp, #112	@ 0x70
 80120bc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80120c0:	2000      	movs	r0, #0
 80120c2:	4560      	cmp	r0, ip
 80120c4:	dd11      	ble.n	80120ea <__kernel_rem_pio2f+0x76>
 80120c6:	a91c      	add	r1, sp, #112	@ 0x70
 80120c8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80120cc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80120d0:	f04f 0c00 	mov.w	ip, #0
 80120d4:	45d4      	cmp	ip, sl
 80120d6:	dc27      	bgt.n	8012128 <__kernel_rem_pio2f+0xb4>
 80120d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80120dc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8012378 <__kernel_rem_pio2f+0x304>
 80120e0:	4606      	mov	r6, r0
 80120e2:	2400      	movs	r4, #0
 80120e4:	e016      	b.n	8012114 <__kernel_rem_pio2f+0xa0>
 80120e6:	2200      	movs	r2, #0
 80120e8:	e7db      	b.n	80120a2 <__kernel_rem_pio2f+0x2e>
 80120ea:	42c6      	cmn	r6, r0
 80120ec:	bf5d      	ittte	pl
 80120ee:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80120f2:	ee07 1a90 	vmovpl	s15, r1
 80120f6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80120fa:	eef0 7a47 	vmovmi.f32	s15, s14
 80120fe:	ece4 7a01 	vstmia	r4!, {s15}
 8012102:	3001      	adds	r0, #1
 8012104:	e7dd      	b.n	80120c2 <__kernel_rem_pio2f+0x4e>
 8012106:	ecfe 6a01 	vldmia	lr!, {s13}
 801210a:	ed96 7a00 	vldr	s14, [r6]
 801210e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012112:	3401      	adds	r4, #1
 8012114:	455c      	cmp	r4, fp
 8012116:	f1a6 0604 	sub.w	r6, r6, #4
 801211a:	ddf4      	ble.n	8012106 <__kernel_rem_pio2f+0x92>
 801211c:	ece9 7a01 	vstmia	r9!, {s15}
 8012120:	f10c 0c01 	add.w	ip, ip, #1
 8012124:	3004      	adds	r0, #4
 8012126:	e7d5      	b.n	80120d4 <__kernel_rem_pio2f+0x60>
 8012128:	a908      	add	r1, sp, #32
 801212a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801212e:	9104      	str	r1, [sp, #16]
 8012130:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012132:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8012374 <__kernel_rem_pio2f+0x300>
 8012136:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8012370 <__kernel_rem_pio2f+0x2fc>
 801213a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801213e:	9203      	str	r2, [sp, #12]
 8012140:	4654      	mov	r4, sl
 8012142:	00a2      	lsls	r2, r4, #2
 8012144:	9205      	str	r2, [sp, #20]
 8012146:	aa58      	add	r2, sp, #352	@ 0x160
 8012148:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801214c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8012150:	a944      	add	r1, sp, #272	@ 0x110
 8012152:	aa08      	add	r2, sp, #32
 8012154:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8012158:	4694      	mov	ip, r2
 801215a:	4626      	mov	r6, r4
 801215c:	2e00      	cmp	r6, #0
 801215e:	f1a0 0004 	sub.w	r0, r0, #4
 8012162:	dc4c      	bgt.n	80121fe <__kernel_rem_pio2f+0x18a>
 8012164:	4628      	mov	r0, r5
 8012166:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801216a:	f7ff fef7 	bl	8011f5c <scalbnf>
 801216e:	eeb0 8a40 	vmov.f32	s16, s0
 8012172:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8012176:	ee28 0a00 	vmul.f32	s0, s16, s0
 801217a:	f000 f9ed 	bl	8012558 <floorf>
 801217e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8012182:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012186:	2d00      	cmp	r5, #0
 8012188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801218c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012190:	ee17 9a90 	vmov	r9, s15
 8012194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012198:	ee38 8a67 	vsub.f32	s16, s16, s15
 801219c:	dd41      	ble.n	8012222 <__kernel_rem_pio2f+0x1ae>
 801219e:	f104 3cff 	add.w	ip, r4, #4294967295
 80121a2:	a908      	add	r1, sp, #32
 80121a4:	f1c5 0e08 	rsb	lr, r5, #8
 80121a8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80121ac:	fa46 f00e 	asr.w	r0, r6, lr
 80121b0:	4481      	add	r9, r0
 80121b2:	fa00 f00e 	lsl.w	r0, r0, lr
 80121b6:	1a36      	subs	r6, r6, r0
 80121b8:	f1c5 0007 	rsb	r0, r5, #7
 80121bc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80121c0:	4106      	asrs	r6, r0
 80121c2:	2e00      	cmp	r6, #0
 80121c4:	dd3c      	ble.n	8012240 <__kernel_rem_pio2f+0x1cc>
 80121c6:	f04f 0e00 	mov.w	lr, #0
 80121ca:	f109 0901 	add.w	r9, r9, #1
 80121ce:	4670      	mov	r0, lr
 80121d0:	4574      	cmp	r4, lr
 80121d2:	dc68      	bgt.n	80122a6 <__kernel_rem_pio2f+0x232>
 80121d4:	2d00      	cmp	r5, #0
 80121d6:	dd03      	ble.n	80121e0 <__kernel_rem_pio2f+0x16c>
 80121d8:	2d01      	cmp	r5, #1
 80121da:	d074      	beq.n	80122c6 <__kernel_rem_pio2f+0x252>
 80121dc:	2d02      	cmp	r5, #2
 80121de:	d07d      	beq.n	80122dc <__kernel_rem_pio2f+0x268>
 80121e0:	2e02      	cmp	r6, #2
 80121e2:	d12d      	bne.n	8012240 <__kernel_rem_pio2f+0x1cc>
 80121e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80121e8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80121ec:	b340      	cbz	r0, 8012240 <__kernel_rem_pio2f+0x1cc>
 80121ee:	4628      	mov	r0, r5
 80121f0:	9306      	str	r3, [sp, #24]
 80121f2:	f7ff feb3 	bl	8011f5c <scalbnf>
 80121f6:	9b06      	ldr	r3, [sp, #24]
 80121f8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80121fc:	e020      	b.n	8012240 <__kernel_rem_pio2f+0x1cc>
 80121fe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012202:	3e01      	subs	r6, #1
 8012204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801220c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012210:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012214:	ecac 0a01 	vstmia	ip!, {s0}
 8012218:	ed90 0a00 	vldr	s0, [r0]
 801221c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012220:	e79c      	b.n	801215c <__kernel_rem_pio2f+0xe8>
 8012222:	d105      	bne.n	8012230 <__kernel_rem_pio2f+0x1bc>
 8012224:	1e60      	subs	r0, r4, #1
 8012226:	a908      	add	r1, sp, #32
 8012228:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801222c:	11f6      	asrs	r6, r6, #7
 801222e:	e7c8      	b.n	80121c2 <__kernel_rem_pio2f+0x14e>
 8012230:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012234:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223c:	da31      	bge.n	80122a2 <__kernel_rem_pio2f+0x22e>
 801223e:	2600      	movs	r6, #0
 8012240:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012248:	f040 8098 	bne.w	801237c <__kernel_rem_pio2f+0x308>
 801224c:	1e60      	subs	r0, r4, #1
 801224e:	2200      	movs	r2, #0
 8012250:	4550      	cmp	r0, sl
 8012252:	da4b      	bge.n	80122ec <__kernel_rem_pio2f+0x278>
 8012254:	2a00      	cmp	r2, #0
 8012256:	d065      	beq.n	8012324 <__kernel_rem_pio2f+0x2b0>
 8012258:	3c01      	subs	r4, #1
 801225a:	ab08      	add	r3, sp, #32
 801225c:	3d08      	subs	r5, #8
 801225e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d0f8      	beq.n	8012258 <__kernel_rem_pio2f+0x1e4>
 8012266:	4628      	mov	r0, r5
 8012268:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801226c:	f7ff fe76 	bl	8011f5c <scalbnf>
 8012270:	1c63      	adds	r3, r4, #1
 8012272:	aa44      	add	r2, sp, #272	@ 0x110
 8012274:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8012374 <__kernel_rem_pio2f+0x300>
 8012278:	0099      	lsls	r1, r3, #2
 801227a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801227e:	4623      	mov	r3, r4
 8012280:	2b00      	cmp	r3, #0
 8012282:	f280 80a9 	bge.w	80123d8 <__kernel_rem_pio2f+0x364>
 8012286:	4623      	mov	r3, r4
 8012288:	2b00      	cmp	r3, #0
 801228a:	f2c0 80c7 	blt.w	801241c <__kernel_rem_pio2f+0x3a8>
 801228e:	aa44      	add	r2, sp, #272	@ 0x110
 8012290:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012294:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801236c <__kernel_rem_pio2f+0x2f8>
 8012298:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8012378 <__kernel_rem_pio2f+0x304>
 801229c:	2000      	movs	r0, #0
 801229e:	1ae2      	subs	r2, r4, r3
 80122a0:	e0b1      	b.n	8012406 <__kernel_rem_pio2f+0x392>
 80122a2:	2602      	movs	r6, #2
 80122a4:	e78f      	b.n	80121c6 <__kernel_rem_pio2f+0x152>
 80122a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80122aa:	b948      	cbnz	r0, 80122c0 <__kernel_rem_pio2f+0x24c>
 80122ac:	b121      	cbz	r1, 80122b8 <__kernel_rem_pio2f+0x244>
 80122ae:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80122b2:	f842 1c04 	str.w	r1, [r2, #-4]
 80122b6:	2101      	movs	r1, #1
 80122b8:	f10e 0e01 	add.w	lr, lr, #1
 80122bc:	4608      	mov	r0, r1
 80122be:	e787      	b.n	80121d0 <__kernel_rem_pio2f+0x15c>
 80122c0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80122c4:	e7f5      	b.n	80122b2 <__kernel_rem_pio2f+0x23e>
 80122c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80122ca:	aa08      	add	r2, sp, #32
 80122cc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80122d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80122d4:	a908      	add	r1, sp, #32
 80122d6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80122da:	e781      	b.n	80121e0 <__kernel_rem_pio2f+0x16c>
 80122dc:	f104 3cff 	add.w	ip, r4, #4294967295
 80122e0:	aa08      	add	r2, sp, #32
 80122e2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80122e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80122ea:	e7f3      	b.n	80122d4 <__kernel_rem_pio2f+0x260>
 80122ec:	a908      	add	r1, sp, #32
 80122ee:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80122f2:	3801      	subs	r0, #1
 80122f4:	430a      	orrs	r2, r1
 80122f6:	e7ab      	b.n	8012250 <__kernel_rem_pio2f+0x1dc>
 80122f8:	3201      	adds	r2, #1
 80122fa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80122fe:	2e00      	cmp	r6, #0
 8012300:	d0fa      	beq.n	80122f8 <__kernel_rem_pio2f+0x284>
 8012302:	9905      	ldr	r1, [sp, #20]
 8012304:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012308:	eb0d 0001 	add.w	r0, sp, r1
 801230c:	18e6      	adds	r6, r4, r3
 801230e:	a91c      	add	r1, sp, #112	@ 0x70
 8012310:	f104 0c01 	add.w	ip, r4, #1
 8012314:	384c      	subs	r0, #76	@ 0x4c
 8012316:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801231a:	4422      	add	r2, r4
 801231c:	4562      	cmp	r2, ip
 801231e:	da04      	bge.n	801232a <__kernel_rem_pio2f+0x2b6>
 8012320:	4614      	mov	r4, r2
 8012322:	e70e      	b.n	8012142 <__kernel_rem_pio2f+0xce>
 8012324:	9804      	ldr	r0, [sp, #16]
 8012326:	2201      	movs	r2, #1
 8012328:	e7e7      	b.n	80122fa <__kernel_rem_pio2f+0x286>
 801232a:	9903      	ldr	r1, [sp, #12]
 801232c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012330:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012334:	9105      	str	r1, [sp, #20]
 8012336:	ee07 1a90 	vmov	s15, r1
 801233a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801233e:	2400      	movs	r4, #0
 8012340:	ece6 7a01 	vstmia	r6!, {s15}
 8012344:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8012378 <__kernel_rem_pio2f+0x304>
 8012348:	46b1      	mov	r9, r6
 801234a:	455c      	cmp	r4, fp
 801234c:	dd04      	ble.n	8012358 <__kernel_rem_pio2f+0x2e4>
 801234e:	ece0 7a01 	vstmia	r0!, {s15}
 8012352:	f10c 0c01 	add.w	ip, ip, #1
 8012356:	e7e1      	b.n	801231c <__kernel_rem_pio2f+0x2a8>
 8012358:	ecfe 6a01 	vldmia	lr!, {s13}
 801235c:	ed39 7a01 	vldmdb	r9!, {s14}
 8012360:	3401      	adds	r4, #1
 8012362:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012366:	e7f0      	b.n	801234a <__kernel_rem_pio2f+0x2d6>
 8012368:	08012eb4 	.word	0x08012eb4
 801236c:	08012e88 	.word	0x08012e88
 8012370:	43800000 	.word	0x43800000
 8012374:	3b800000 	.word	0x3b800000
 8012378:	00000000 	.word	0x00000000
 801237c:	9b02      	ldr	r3, [sp, #8]
 801237e:	eeb0 0a48 	vmov.f32	s0, s16
 8012382:	eba3 0008 	sub.w	r0, r3, r8
 8012386:	f7ff fde9 	bl	8011f5c <scalbnf>
 801238a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8012370 <__kernel_rem_pio2f+0x2fc>
 801238e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012396:	db19      	blt.n	80123cc <__kernel_rem_pio2f+0x358>
 8012398:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8012374 <__kernel_rem_pio2f+0x300>
 801239c:	ee60 7a27 	vmul.f32	s15, s0, s15
 80123a0:	aa08      	add	r2, sp, #32
 80123a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123a6:	3508      	adds	r5, #8
 80123a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80123b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80123b8:	ee10 3a10 	vmov	r3, s0
 80123bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80123c0:	ee17 3a90 	vmov	r3, s15
 80123c4:	3401      	adds	r4, #1
 80123c6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80123ca:	e74c      	b.n	8012266 <__kernel_rem_pio2f+0x1f2>
 80123cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80123d0:	aa08      	add	r2, sp, #32
 80123d2:	ee10 3a10 	vmov	r3, s0
 80123d6:	e7f6      	b.n	80123c6 <__kernel_rem_pio2f+0x352>
 80123d8:	a808      	add	r0, sp, #32
 80123da:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80123de:	9001      	str	r0, [sp, #4]
 80123e0:	ee07 0a90 	vmov	s15, r0
 80123e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123e8:	3b01      	subs	r3, #1
 80123ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 80123ee:	ee20 0a07 	vmul.f32	s0, s0, s14
 80123f2:	ed62 7a01 	vstmdb	r2!, {s15}
 80123f6:	e743      	b.n	8012280 <__kernel_rem_pio2f+0x20c>
 80123f8:	ecfc 6a01 	vldmia	ip!, {s13}
 80123fc:	ecb5 7a01 	vldmia	r5!, {s14}
 8012400:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012404:	3001      	adds	r0, #1
 8012406:	4550      	cmp	r0, sl
 8012408:	dc01      	bgt.n	801240e <__kernel_rem_pio2f+0x39a>
 801240a:	4282      	cmp	r2, r0
 801240c:	daf4      	bge.n	80123f8 <__kernel_rem_pio2f+0x384>
 801240e:	a858      	add	r0, sp, #352	@ 0x160
 8012410:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012414:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012418:	3b01      	subs	r3, #1
 801241a:	e735      	b.n	8012288 <__kernel_rem_pio2f+0x214>
 801241c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801241e:	2b02      	cmp	r3, #2
 8012420:	dc09      	bgt.n	8012436 <__kernel_rem_pio2f+0x3c2>
 8012422:	2b00      	cmp	r3, #0
 8012424:	dc2b      	bgt.n	801247e <__kernel_rem_pio2f+0x40a>
 8012426:	d044      	beq.n	80124b2 <__kernel_rem_pio2f+0x43e>
 8012428:	f009 0007 	and.w	r0, r9, #7
 801242c:	b059      	add	sp, #356	@ 0x164
 801242e:	ecbd 8b04 	vpop	{d8-d9}
 8012432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012436:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012438:	2b03      	cmp	r3, #3
 801243a:	d1f5      	bne.n	8012428 <__kernel_rem_pio2f+0x3b4>
 801243c:	aa30      	add	r2, sp, #192	@ 0xc0
 801243e:	1f0b      	subs	r3, r1, #4
 8012440:	4413      	add	r3, r2
 8012442:	461a      	mov	r2, r3
 8012444:	4620      	mov	r0, r4
 8012446:	2800      	cmp	r0, #0
 8012448:	f1a2 0204 	sub.w	r2, r2, #4
 801244c:	dc52      	bgt.n	80124f4 <__kernel_rem_pio2f+0x480>
 801244e:	4622      	mov	r2, r4
 8012450:	2a01      	cmp	r2, #1
 8012452:	f1a3 0304 	sub.w	r3, r3, #4
 8012456:	dc5d      	bgt.n	8012514 <__kernel_rem_pio2f+0x4a0>
 8012458:	ab30      	add	r3, sp, #192	@ 0xc0
 801245a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8012378 <__kernel_rem_pio2f+0x304>
 801245e:	440b      	add	r3, r1
 8012460:	2c01      	cmp	r4, #1
 8012462:	dc67      	bgt.n	8012534 <__kernel_rem_pio2f+0x4c0>
 8012464:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012468:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801246c:	2e00      	cmp	r6, #0
 801246e:	d167      	bne.n	8012540 <__kernel_rem_pio2f+0x4cc>
 8012470:	edc7 6a00 	vstr	s13, [r7]
 8012474:	ed87 7a01 	vstr	s14, [r7, #4]
 8012478:	edc7 7a02 	vstr	s15, [r7, #8]
 801247c:	e7d4      	b.n	8012428 <__kernel_rem_pio2f+0x3b4>
 801247e:	ab30      	add	r3, sp, #192	@ 0xc0
 8012480:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8012378 <__kernel_rem_pio2f+0x304>
 8012484:	440b      	add	r3, r1
 8012486:	4622      	mov	r2, r4
 8012488:	2a00      	cmp	r2, #0
 801248a:	da24      	bge.n	80124d6 <__kernel_rem_pio2f+0x462>
 801248c:	b34e      	cbz	r6, 80124e2 <__kernel_rem_pio2f+0x46e>
 801248e:	eef1 7a47 	vneg.f32	s15, s14
 8012492:	edc7 7a00 	vstr	s15, [r7]
 8012496:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801249a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801249e:	aa31      	add	r2, sp, #196	@ 0xc4
 80124a0:	2301      	movs	r3, #1
 80124a2:	429c      	cmp	r4, r3
 80124a4:	da20      	bge.n	80124e8 <__kernel_rem_pio2f+0x474>
 80124a6:	b10e      	cbz	r6, 80124ac <__kernel_rem_pio2f+0x438>
 80124a8:	eef1 7a67 	vneg.f32	s15, s15
 80124ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80124b0:	e7ba      	b.n	8012428 <__kernel_rem_pio2f+0x3b4>
 80124b2:	ab30      	add	r3, sp, #192	@ 0xc0
 80124b4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8012378 <__kernel_rem_pio2f+0x304>
 80124b8:	440b      	add	r3, r1
 80124ba:	2c00      	cmp	r4, #0
 80124bc:	da05      	bge.n	80124ca <__kernel_rem_pio2f+0x456>
 80124be:	b10e      	cbz	r6, 80124c4 <__kernel_rem_pio2f+0x450>
 80124c0:	eef1 7a67 	vneg.f32	s15, s15
 80124c4:	edc7 7a00 	vstr	s15, [r7]
 80124c8:	e7ae      	b.n	8012428 <__kernel_rem_pio2f+0x3b4>
 80124ca:	ed33 7a01 	vldmdb	r3!, {s14}
 80124ce:	3c01      	subs	r4, #1
 80124d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124d4:	e7f1      	b.n	80124ba <__kernel_rem_pio2f+0x446>
 80124d6:	ed73 7a01 	vldmdb	r3!, {s15}
 80124da:	3a01      	subs	r2, #1
 80124dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80124e0:	e7d2      	b.n	8012488 <__kernel_rem_pio2f+0x414>
 80124e2:	eef0 7a47 	vmov.f32	s15, s14
 80124e6:	e7d4      	b.n	8012492 <__kernel_rem_pio2f+0x41e>
 80124e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80124ec:	3301      	adds	r3, #1
 80124ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124f2:	e7d6      	b.n	80124a2 <__kernel_rem_pio2f+0x42e>
 80124f4:	edd2 7a00 	vldr	s15, [r2]
 80124f8:	edd2 6a01 	vldr	s13, [r2, #4]
 80124fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012500:	3801      	subs	r0, #1
 8012502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012506:	ed82 7a00 	vstr	s14, [r2]
 801250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801250e:	edc2 7a01 	vstr	s15, [r2, #4]
 8012512:	e798      	b.n	8012446 <__kernel_rem_pio2f+0x3d2>
 8012514:	edd3 7a00 	vldr	s15, [r3]
 8012518:	edd3 6a01 	vldr	s13, [r3, #4]
 801251c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012520:	3a01      	subs	r2, #1
 8012522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012526:	ed83 7a00 	vstr	s14, [r3]
 801252a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801252e:	edc3 7a01 	vstr	s15, [r3, #4]
 8012532:	e78d      	b.n	8012450 <__kernel_rem_pio2f+0x3dc>
 8012534:	ed33 7a01 	vldmdb	r3!, {s14}
 8012538:	3c01      	subs	r4, #1
 801253a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801253e:	e78f      	b.n	8012460 <__kernel_rem_pio2f+0x3ec>
 8012540:	eef1 6a66 	vneg.f32	s13, s13
 8012544:	eeb1 7a47 	vneg.f32	s14, s14
 8012548:	edc7 6a00 	vstr	s13, [r7]
 801254c:	ed87 7a01 	vstr	s14, [r7, #4]
 8012550:	eef1 7a67 	vneg.f32	s15, s15
 8012554:	e790      	b.n	8012478 <__kernel_rem_pio2f+0x404>
 8012556:	bf00      	nop

08012558 <floorf>:
 8012558:	ee10 3a10 	vmov	r3, s0
 801255c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012560:	3a7f      	subs	r2, #127	@ 0x7f
 8012562:	2a16      	cmp	r2, #22
 8012564:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012568:	dc2b      	bgt.n	80125c2 <floorf+0x6a>
 801256a:	2a00      	cmp	r2, #0
 801256c:	da12      	bge.n	8012594 <floorf+0x3c>
 801256e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80125d4 <floorf+0x7c>
 8012572:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012576:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257e:	dd06      	ble.n	801258e <floorf+0x36>
 8012580:	2b00      	cmp	r3, #0
 8012582:	da24      	bge.n	80125ce <floorf+0x76>
 8012584:	2900      	cmp	r1, #0
 8012586:	4b14      	ldr	r3, [pc, #80]	@ (80125d8 <floorf+0x80>)
 8012588:	bf08      	it	eq
 801258a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801258e:	ee00 3a10 	vmov	s0, r3
 8012592:	4770      	bx	lr
 8012594:	4911      	ldr	r1, [pc, #68]	@ (80125dc <floorf+0x84>)
 8012596:	4111      	asrs	r1, r2
 8012598:	420b      	tst	r3, r1
 801259a:	d0fa      	beq.n	8012592 <floorf+0x3a>
 801259c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80125d4 <floorf+0x7c>
 80125a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80125a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80125a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ac:	ddef      	ble.n	801258e <floorf+0x36>
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	bfbe      	ittt	lt
 80125b2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80125b6:	fa40 f202 	asrlt.w	r2, r0, r2
 80125ba:	189b      	addlt	r3, r3, r2
 80125bc:	ea23 0301 	bic.w	r3, r3, r1
 80125c0:	e7e5      	b.n	801258e <floorf+0x36>
 80125c2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80125c6:	d3e4      	bcc.n	8012592 <floorf+0x3a>
 80125c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80125cc:	4770      	bx	lr
 80125ce:	2300      	movs	r3, #0
 80125d0:	e7dd      	b.n	801258e <floorf+0x36>
 80125d2:	bf00      	nop
 80125d4:	7149f2ca 	.word	0x7149f2ca
 80125d8:	bf800000 	.word	0xbf800000
 80125dc:	007fffff 	.word	0x007fffff

080125e0 <_init>:
 80125e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125e2:	bf00      	nop
 80125e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125e6:	bc08      	pop	{r3}
 80125e8:	469e      	mov	lr, r3
 80125ea:	4770      	bx	lr

080125ec <_fini>:
 80125ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ee:	bf00      	nop
 80125f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125f2:	bc08      	pop	{r3}
 80125f4:	469e      	mov	lr, r3
 80125f6:	4770      	bx	lr
