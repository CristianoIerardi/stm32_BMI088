
FOS_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  08012570  08012570  00013570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e20  08012e20  00014308  2**0
                  CONTENTS
  4 .ARM          00000008  08012e20  08012e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e28  08012e28  00014308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e28  08012e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e2c  08012e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000308  20000000  08012e30  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014308  2**0
                  CONTENTS
 10 .bss          000024fc  20000308  20000308  00014308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002804  20002804  00014308  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce92  00000000  00000000  00014338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004694  00000000  00000000  000311ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  00035860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001326  00000000  00000000  00037140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d0c  00000000  00000000  00038466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020dbc  00000000  00000000  0005d172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbe82  00000000  00000000  0007df2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149db0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e38  00000000  00000000  00149df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00151c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012558 	.word	0x08012558

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	08012558 	.word	0x08012558

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <is_valid_number>:
 * @brief Checks whether a string contains only numeric digits.
 * @param s Pointer to null-terminated string to check.
 * @return 1 if the string is a valid number, 0 otherwise.
 */
uint8_t is_valid_number(const char *s)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    // Check for NULL or empty string
    if (s == NULL || *s == '\0')
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <is_valid_number+0x16>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <is_valid_number+0x1a>
    	return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e01a      	b.n	8000f88 <is_valid_number+0x50>

    // Iterate through each character to verify it's a digit
    for (int i = 0; s[i] != '\0'; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e010      	b.n	8000f7a <is_valid_number+0x42>
        if (s[i] < '0' || s[i] > '9')
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f62:	d905      	bls.n	8000f70 <is_valid_number+0x38>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b39      	cmp	r3, #57	@ 0x39
 8000f6e:	d901      	bls.n	8000f74 <is_valid_number+0x3c>
        	return 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e009      	b.n	8000f88 <is_valid_number+0x50>
    for (int i = 0; s[i] != '\0'; i++) {
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1e8      	bne.n	8000f58 <is_valid_number+0x20>
    }

    return 1;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HandleReceivedString>:
/**
 * @brief Handles a received string, parses it as an integer, and updates the sampling time.
 * @param str Pointer to the received null-terminated string.
 */
void HandleReceivedString(char *str)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	//char rxBuff[64];  // Buffer for optional debug response

    // Remove possible trailing \r or \n characters
    char *clean_str = str;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	613b      	str	r3, [r7, #16]

    // Trim line endings
    for (int i = 0; clean_str[i] != '\0'; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e014      	b.n	8000fd0 <HandleReceivedString+0x3c>
        if (clean_str[i] == '\r' || clean_str[i] == '\n') {
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b0d      	cmp	r3, #13
 8000fb0:	d005      	beq.n	8000fbe <HandleReceivedString+0x2a>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b0a      	cmp	r3, #10
 8000fbc:	d105      	bne.n	8000fca <HandleReceivedString+0x36>
            clean_str[i] = '\0';
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
            break;
 8000fc8:	e008      	b.n	8000fdc <HandleReceivedString+0x48>
    for (int i = 0; clean_str[i] != '\0'; i++) {
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e4      	bne.n	8000fa6 <HandleReceivedString+0x12>
        }
    }

    // Validate that input is numeric
	if (!is_valid_number(clean_str)) {
 8000fdc:	6938      	ldr	r0, [r7, #16]
 8000fde:	f7ff ffab 	bl	8000f38 <is_valid_number>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d010      	beq.n	800100a <HandleReceivedString+0x76>
		//CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));
		return;
	}

    // Convert string to unsigned integer
    uint32_t value = (uint32_t)strtoul(clean_str, NULL, 10);
 8000fe8:	220a      	movs	r2, #10
 8000fea:	2100      	movs	r1, #0
 8000fec:	6938      	ldr	r0, [r7, #16]
 8000fee:	f00d f805 	bl	800dffc <strtoul>
 8000ff2:	60f8      	str	r0, [r7, #12]

    // Check that value is in acceptable range
    if (value >= 0 && value <= 5000)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d806      	bhi.n	800100c <HandleReceivedString+0x78>
    {
        uint32_t parsed_value = value;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	60bb      	str	r3, [r7, #8]
        //sprintf(rxBuff, "ParsVal: %i", parsed_value);
        //CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));

        // Update global sampling time
        SAMPLE_TIME_MS_TOGGLE = parsed_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HandleReceivedString+0x80>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e000      	b.n	800100c <HandleReceivedString+0x78>
		return;
 800100a:	bf00      	nop
    else
    {
    	//sprintf(rxBuff, "Parsing error");
    	//CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));
    }
}
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008

08001018 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	887a      	ldrh	r2, [r7, #2]
 8001036:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a3a      	ldr	r2, [r7, #32]
 800103c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001042:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6858      	ldr	r0, [r3, #4]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	899b      	ldrh	r3, [r3, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	f004 f886 	bl	8005170 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f003 f9af 	bl	80043c8 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	899b      	ldrh	r3, [r3, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	f004 f87b 	bl	8005170 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800107a:	2032      	movs	r0, #50	@ 0x32
 800107c:	f003 f9a4 	bl	80043c8 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8001080:	22b6      	movs	r2, #182	@ 0xb6
 8001082:	217e      	movs	r1, #126	@ 0x7e
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fa29 	bl	80014dc <BMI088_WriteAccRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	4413      	add	r3, r2
 8001092:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8001094:	2032      	movs	r0, #50	@ 0x32
 8001096:	f003 f997 	bl	80043c8 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800109a:	f107 0316 	add.w	r3, r7, #22
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f9a0 	bl	80013e8 <BMI088_ReadAccRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	4413      	add	r3, r2
 80010b0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f003 f988 	bl	80043c8 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0x09); /* (no oversampling, ODR = 200 Hz, BW = ?? Hz /////////////////////////BW = 40 Hz) */
 80010b8:	2209      	movs	r2, #9
 80010ba:	2140      	movs	r1, #64	@ 0x40
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 fa0d 	bl	80014dc <BMI088_WriteAccRegister>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	4413      	add	r3, r2
 80010ca:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f003 f97b 	bl	80043c8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x01); /* +- 6g range */
 80010d2:	2201      	movs	r2, #1
 80010d4:	2141      	movs	r1, #65	@ 0x41
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 fa00 	bl	80014dc <BMI088_WriteAccRegister>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	4413      	add	r3, r2
 80010e4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f003 f96e 	bl	80043c8 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80010ec:	220a      	movs	r2, #10
 80010ee:	2153      	movs	r1, #83	@ 0x53
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f000 f9f3 	bl	80014dc <BMI088_WriteAccRegister>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	4413      	add	r3, r2
 80010fe:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f003 f961 	bl	80043c8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8001106:	2204      	movs	r2, #4
 8001108:	2158      	movs	r1, #88	@ 0x58
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 f9e6 	bl	80014dc <BMI088_WriteAccRegister>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	4413      	add	r3, r2
 8001118:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800111a:	200a      	movs	r0, #10
 800111c:	f003 f954 	bl	80043c8 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8001120:	2200      	movs	r2, #0
 8001122:	217c      	movs	r1, #124	@ 0x7c
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f9d9 	bl	80014dc <BMI088_WriteAccRegister>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	4413      	add	r3, r2
 8001132:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f003 f947 	bl	80043c8 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800113a:	2204      	movs	r2, #4
 800113c:	217d      	movs	r1, #125	@ 0x7d
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f9cc 	bl	80014dc <BMI088_WriteAccRegister>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	4413      	add	r3, r2
 800114c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f003 f93a 	bl	80043c8 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a3a      	ldr	r2, [pc, #232]	@ (8001240 <BMI088_Init+0x228>)
 8001158:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2292      	movs	r2, #146	@ 0x92
 800115e:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	89db      	ldrh	r3, [r3, #14]
 8001168:	2201      	movs	r2, #1
 800116a:	4619      	mov	r1, r3
 800116c:	f004 f800 	bl	8005170 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001170:	22b6      	movs	r2, #182	@ 0xb6
 8001172:	2114      	movs	r1, #20
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f9eb 	bl	8001550 <BMI088_WriteGyrRegister>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	4413      	add	r3, r2
 8001182:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001184:	20fa      	movs	r0, #250	@ 0xfa
 8001186:	f003 f91f 	bl	80043c8 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800118a:	f107 0316 	add.w	r3, r7, #22
 800118e:	461a      	mov	r2, r3
 8001190:	2100      	movs	r1, #0
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f966 	bl	8001464 <BMI088_ReadGyrRegister>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	4413      	add	r3, r2
 80011a0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f003 f910 	bl	80043c8 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80011a8:	2201      	movs	r2, #1
 80011aa:	210f      	movs	r1, #15
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f000 f9cf 	bl	8001550 <BMI088_WriteGyrRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4413      	add	r3, r2
 80011ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f003 f903 	bl	80043c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* ODR = 200 Hz, Filter bandwidth = 64 Hz */
 80011c2:	2206      	movs	r2, #6
 80011c4:	2110      	movs	r1, #16
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f9c2 	bl	8001550 <BMI088_WriteGyrRegister>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	4413      	add	r3, r2
 80011d4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f003 f8f6 	bl	80043c8 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	2115      	movs	r1, #21
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f9b5 	bl	8001550 <BMI088_WriteGyrRegister>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	4413      	add	r3, r2
 80011ee:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f003 f8e9 	bl	80043c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80011f6:	2201      	movs	r2, #1
 80011f8:	2116      	movs	r1, #22
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f9a8 	bl	8001550 <BMI088_WriteGyrRegister>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	4413      	add	r3, r2
 8001208:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f003 f8dc 	bl	80043c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001210:	2201      	movs	r2, #1
 8001212:	2118      	movs	r1, #24
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f99b 	bl	8001550 <BMI088_WriteGyrRegister>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	4413      	add	r3, r2
 8001222:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001224:	200a      	movs	r0, #10
 8001226:	f003 f8cf 	bl	80043c8 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <BMI088_Init+0x22c>)
 800122e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2282      	movs	r2, #130	@ 0x82
 8001234:	769a      	strb	r2, [r3, #26]

	return status;
 8001236:	7dfb      	ldrb	r3, [r7, #23]

}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	3a6b70a4 	.word	0x3a6b70a4
 8001244:	3a0ba058 	.word	0x3a0ba058

08001248 <Init_BMI088_Bias>:


void Init_BMI088_Bias(BMI088* imu, int cycles)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < cycles; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e044      	b.n	80012e2 <Init_BMI088_Bias+0x9a>
    {
        imu->gyr_bias[0] += imu->gyr_rps[0];
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        imu->gyr_bias[1] += imu->gyr_rps[1];
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        imu->gyr_bias[2] += imu->gyr_rps[2];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        imu->acc_bias[0] += imu->acc_mps2[0];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
        imu->acc_bias[1] += imu->acc_mps2[1];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        imu->acc_bias[2] += imu->acc_mps2[2];
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80012d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    for (int i = 0; i < cycles; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbb6      	blt.n	8001258 <Init_BMI088_Bias+0x10>
    }
    for (int i = 0; i < 3; i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	e02e      	b.n	800134e <Init_BMI088_Bias+0x106>
    {
    	imu->gyr_bias[i] = imu->gyr_bias[i] / cycles;
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3316      	adds	r3, #22
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3304      	adds	r3, #4
 80012fc:	edd3 6a00 	vldr	s13, [r3]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3316      	adds	r3, #22
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3304      	adds	r3, #4
 800131a:	edc3 7a00 	vstr	s15, [r3]
    	imu->acc_bias[i] = imu->acc_bias[i] / cycles;
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3314      	adds	r3, #20
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	edd3 6a00 	vldr	s13, [r3]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3314      	adds	r3, #20
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b02      	cmp	r3, #2
 8001352:	ddcd      	ble.n	80012f0 <Init_BMI088_Bias+0xa8>
    }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <Take_IMU_Measurements>:


/// Function to insert IMU measurements from memory to memory (data is adjusted)
void Take_IMU_Measurements(BMI088 *imu, BinaryPacket *pkt)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
	pkt->timestamp = HAL_GetTick();		// Timestamp when data is taken from memory to memory (not from BMI088 to memory!)
 800136c:	f003 f820 	bl	80043b0 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	605a      	str	r2, [r3, #4]
	/* Here a sign and axis correction is applied.
	 * In the rest of the code I will use gyr and acc that are the shared variables
	 * elaborated by the algorithms while instead, in imu->___[__] there are pure values
	 * taken from the memory of the sensor BMI088
	 */
	pkt->gyr[0] = -imu->gyr_rps[1] + imu->gyr_bias[1];			// + 0.0051;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	ee17 2a90 	vmov	r2, s15
 800138c:	615a      	str	r2, [r3, #20]
	pkt->gyr[1] = imu->gyr_rps[0] - imu->gyr_bias[0];			// + 0.0025;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	ee17 2a90 	vmov	r2, s15
 80013a4:	619a      	str	r2, [r3, #24]
	pkt->gyr[2] = imu->gyr_rps[2] - imu->gyr_bias[2];			// + 0.0047;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	ee17 2a90 	vmov	r2, s15
 80013bc:	61da      	str	r2, [r3, #28]
	pkt->acc[0] = -imu->acc_mps2[1];
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80013c4:	eef1 7a67 	vneg.f32	s15, s15
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	ee17 2a90 	vmov	r2, s15
 80013ce:	621a      	str	r2, [r3, #32]
	pkt->acc[1] = imu->acc_mps2[0];
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24
	pkt->acc[2] = imu->acc_mps2[2];
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	460b      	mov	r3, r1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	753b      	strb	r3, [r7, #20]
 8001400:	2300      	movs	r3, #0
 8001402:	757b      	strb	r3, [r7, #21]
 8001404:	2300      	movs	r3, #0
 8001406:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6858      	ldr	r0, [r3, #4]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	899b      	ldrh	r3, [r3, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	f003 feac 	bl	8005170 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	f107 0210 	add.w	r2, r7, #16
 8001420:	f107 0114 	add.w	r1, r7, #20
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2303      	movs	r3, #3
 800142c:	f005 ffa1 	bl	8007372 <HAL_SPI_TransmitReceive>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6858      	ldr	r0, [r3, #4]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	899b      	ldrh	r3, [r3, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	4619      	mov	r1, r3
 800144a:	f003 fe91 	bl	8005170 <HAL_GPIO_WritePin>

	if (status == 1) {
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001454:	7cba      	ldrb	r2, [r7, #18]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800145a:	7dfb      	ldrb	r3, [r7, #23]

}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af02      	add	r7, sp, #8
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	460b      	mov	r3, r1
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001478:	b2db      	uxtb	r3, r3
 800147a:	753b      	strb	r3, [r7, #20]
 800147c:	2300      	movs	r3, #0
 800147e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	89db      	ldrh	r3, [r3, #14]
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	f003 fe70 	bl	8005170 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f107 0210 	add.w	r2, r7, #16
 8001498:	f107 0114 	add.w	r1, r7, #20
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2302      	movs	r3, #2
 80014a4:	f005 ff65 	bl	8007372 <HAL_SPI_TransmitReceive>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf0c      	ite	eq
 80014ae:	2301      	moveq	r3, #1
 80014b0:	2300      	movne	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6898      	ldr	r0, [r3, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	89db      	ldrh	r3, [r3, #14]
 80014be:	2201      	movs	r2, #1
 80014c0:	4619      	mov	r1, r3
 80014c2:	f003 fe55 	bl	8005170 <HAL_GPIO_WritePin>

	if (status == 1) {
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80014cc:	7c7a      	ldrb	r2, [r7, #17]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80014d2:	7dfb      	ldrb	r3, [r7, #23]

}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	4613      	mov	r3, r2
 80014ea:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	733b      	strb	r3, [r7, #12]
 80014f0:	78bb      	ldrb	r3, [r7, #2]
 80014f2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6858      	ldr	r0, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	899b      	ldrh	r3, [r3, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	f003 fe36 	bl	8005170 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f107 010c 	add.w	r1, r7, #12
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	2202      	movs	r2, #2
 8001512:	f005 fdea 	bl	80070ea <HAL_SPI_Transmit>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001524:	bf00      	nop
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f006 fae2 	bl	8007af4 <HAL_SPI_GetState>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d1f7      	bne.n	8001526 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6858      	ldr	r0, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	899b      	ldrh	r3, [r3, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	f003 fe15 	bl	8005170 <HAL_GPIO_WritePin>

	return status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]

}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
 800155c:	4613      	mov	r3, r2
 800155e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	78bb      	ldrb	r3, [r7, #2]
 8001566:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	89db      	ldrh	r3, [r3, #14]
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	f003 fdfc 	bl	8005170 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	2202      	movs	r2, #2
 8001586:	f005 fdb0 	bl	80070ea <HAL_SPI_Transmit>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001598:	bf00      	nop
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 faa8 	bl	8007af4 <HAL_SPI_GetState>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d1f7      	bne.n	800159a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6898      	ldr	r0, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	89db      	ldrh	r3, [r3, #14]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4619      	mov	r1, r3
 80015b6:	f003 fddb 	bl	8005170 <HAL_GPIO_WritePin>

	return status;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]

}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

	if (imu->readingAcc)  // To not have double calls
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7c1b      	ldrb	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <BMI088_ReadAccelerometerDMA+0x14>
		return 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e023      	b.n	8001620 <BMI088_ReadAccelerometerDMA+0x5c>

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6858      	ldr	r0, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	899b      	ldrh	r3, [r3, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	f003 fdc4 	bl	8005170 <HAL_GPIO_WritePin>

	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f103 0112 	add.w	r1, r3, #18
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80015f8:	2308      	movs	r3, #8
 80015fa:	f006 f863 	bl	80076c4 <HAL_SPI_TransmitReceive_DMA>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d104      	bne.n	800160e <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	741a      	strb	r2, [r3, #16]
		return 1;
 800160a:	2301      	movs	r3, #1
 800160c:	e008      	b.n	8001620 <BMI088_ReadAccelerometerDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6858      	ldr	r0, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	899b      	ldrh	r3, [r3, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	f003 fda9 	bl	8005170 <HAL_GPIO_WritePin>
		return 0;
 800161e:	2300      	movs	r3, #0

	}

}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6858      	ldr	r0, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	899b      	ldrh	r3, [r3, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	4619      	mov	r1, r3
 800163c:	f003 fd98 	bl	8005170 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800164c:	b2db      	uxtb	r3, r3
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001658:	b2db      	uxtb	r3, r3
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001666:	b2db      	uxtb	r3, r3
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001680:	b2db      	uxtb	r3, r3
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX * 2;		// *2 was added by Cristiano.
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800169a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY * 2;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80016ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ * 2;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80016da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

	if (imu->readingGyr)  // To not have double calls
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7c5b      	ldrb	r3, [r3, #17]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <BMI088_ReadGyroscopeDMA+0x14>
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e023      	b.n	8001758 <BMI088_ReadGyroscopeDMA+0x5c>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6898      	ldr	r0, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	89db      	ldrh	r3, [r3, #14]
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	f003 fd28 	bl	8005170 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f103 011a 	add.w	r1, r3, #26
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001730:	2307      	movs	r3, #7
 8001732:	f005 ffc7 	bl	80076c4 <HAL_SPI_TransmitReceive_DMA>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d104      	bne.n	8001746 <BMI088_ReadGyroscopeDMA+0x4a>

		imu->readingGyr = 1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	745a      	strb	r2, [r3, #17]
		return 1;
 8001742:	2301      	movs	r3, #1
 8001744:	e008      	b.n	8001758 <BMI088_ReadGyroscopeDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6898      	ldr	r0, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	89db      	ldrh	r3, [r3, #14]
 800174e:	2201      	movs	r2, #1
 8001750:	4619      	mov	r1, r3
 8001752:	f003 fd0d 	bl	8005170 <HAL_GPIO_WritePin>
		return 0;
 8001756:	2300      	movs	r3, #0

	}

}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6898      	ldr	r0, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	89db      	ldrh	r3, [r3, #14]
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	f003 fcfc 	bl	8005170 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001784:	b2db      	uxtb	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001790:	b2db      	uxtb	r3, r3
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80017ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800180a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <QuaternionToEuler>:
    NormalizeQuaternion(q_out);
}


// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b08c      	sub	sp, #48	@ 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	eeb0 6a40 	vmov.f32	s12, s0
 8001832:	eef0 6a60 	vmov.f32	s13, s1
 8001836:	eeb0 7a41 	vmov.f32	s14, s2
 800183a:	eef0 7a61 	vmov.f32	s15, s3
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	ed87 6a02 	vstr	s12, [r7, #8]
 8001844:	edc7 6a03 	vstr	s13, [r7, #12]
 8001848:	ed87 7a04 	vstr	s14, [r7, #16]
 800184c:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 8001850:	ed97 7a02 	vldr	s14, [r7, #8]
 8001854:	edd7 7a03 	vldr	s15, [r7, #12]
 8001858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001860:	edd7 7a05 	vldr	s15, [r7, #20]
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001870:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 8001874:	ed97 7a03 	vldr	s14, [r7, #12]
 8001878:	edd7 7a03 	vldr	s15, [r7, #12]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	edd7 6a04 	vldr	s13, [r7, #16]
 8001884:	edd7 7a04 	vldr	s15, [r7, #16]
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001890:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 80018a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	4604      	mov	r4, r0
 80018a8:	460d      	mov	r5, r1
 80018aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018ac:	f7fe fe4c 	bl	8000548 <__aeabi_f2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	ec43 2b11 	vmov	d1, r2, r3
 80018b8:	ec45 4b10 	vmov	d0, r4, r5
 80018bc:	f00f fa48 	bl	8010d50 <atan2>
 80018c0:	ec51 0b10 	vmov	r0, r1, d0
 80018c4:	a356      	add	r3, pc, #344	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f967 	bl	8000ba8 <__aeabi_d2f>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 80018e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80018e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ec:	edd7 6a05 	vldr	s13, [r7, #20]
 80018f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001900:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 8001904:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001908:	eef0 7ae7 	vabs.f32	s15, s15
 800190c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	db13      	blt.n	8001942 <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 800191a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800191c:	f7fe fe14 	bl	8000548 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	ec43 2b11 	vmov	d1, r2, r3
 8001928:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001a18 <QuaternionToEuler+0x1f0>
 800192c:	f00d f98d 	bl	800ec4a <copysign>
 8001930:	ec51 0b10 	vmov	r0, r1, d0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	1d1c      	adds	r4, r3, #4
 8001938:	f7ff f936 	bl	8000ba8 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	6023      	str	r3, [r4, #0]
 8001940:	e019      	b.n	8001976 <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 8001942:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001944:	f7fe fe00 	bl	8000548 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	ec43 2b10 	vmov	d0, r2, r3
 8001950:	f00f f9ca 	bl	8010ce8 <asin>
 8001954:	ec51 0b10 	vmov	r0, r1, d0
 8001958:	a331      	add	r3, pc, #196	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe4b 	bl	80005f8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	1d1c      	adds	r4, r3, #4
 800196e:	f7ff f91b 	bl	8000ba8 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 8001976:	ed97 7a02 	vldr	s14, [r7, #8]
 800197a:	edd7 7a05 	vldr	s15, [r7, #20]
 800197e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001982:	edd7 6a03 	vldr	s13, [r7, #12]
 8001986:	edd7 7a04 	vldr	s15, [r7, #16]
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001996:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 800199a:	ed97 7a04 	vldr	s14, [r7, #16]
 800199e:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80019aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 80019c6:	6a38      	ldr	r0, [r7, #32]
 80019c8:	f7fe fdbe 	bl	8000548 <__aeabi_f2d>
 80019cc:	4604      	mov	r4, r0
 80019ce:	460d      	mov	r5, r1
 80019d0:	69f8      	ldr	r0, [r7, #28]
 80019d2:	f7fe fdb9 	bl	8000548 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ec43 2b11 	vmov	d1, r2, r3
 80019de:	ec45 4b10 	vmov	d0, r4, r5
 80019e2:	f00f f9b5 	bl	8010d50 <atan2>
 80019e6:	ec51 0b10 	vmov	r0, r1, d0
 80019ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe02 	bl	80005f8 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0408 	add.w	r4, r3, #8
 8001a02:	f7ff f8d1 	bl	8000ba8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	@ 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40568000 	.word	0x40568000
 8001a20:	20000000 	.word	0x20000000
 8001a24:	404ca5dc 	.word	0x404ca5dc

08001a28 <SetQuaternionFromEuler>:


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a34:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a38:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 8001a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a40:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a48:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 8001a4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a50:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a58:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 8001a5c:	edd7 7a00 	vldr	s15, [r7]
 8001a60:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 8001a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f00f f9a8 	bl	8010dd0 <cosf>
 8001a80:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 8001a84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	f00f f9e8 	bl	8010e68 <sinf>
 8001a98:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 8001a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	f00f f990 	bl	8010dd0 <cosf>
 8001ab0:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 8001ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f00f f9d0 	bl	8010e68 <sinf>
 8001ac8:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 8001acc:	edd7 7a00 	vldr	s15, [r7]
 8001ad0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f00f f978 	bl	8010dd0 <cosf>
 8001ae0:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 8001ae4:	edd7 7a00 	vldr	s15, [r7]
 8001ae8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af0:	eeb0 0a67 	vmov.f32	s0, s15
 8001af4:	f00f f9b8 	bl	8010e68 <sinf>
 8001af8:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 8001afc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 8001b2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001b46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 8001b60:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b74:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 8001b92:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b96:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001baa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	3c8efa39 	.word	0x3c8efa39

08001bd0 <Filter_Init>:
/// ######################################################################################################
/// ##### FILTER SECTION #################################################################################
/// ######################################################################################################

void Filter_Init(LPF_FILTER *filt, float f_LP_gyr, float f_LP_acc, float f_HP_gyr, float f_HP_acc, float f_LP_angles, float dt)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	61f8      	str	r0, [r7, #28]
 8001bd8:	ed87 0a06 	vstr	s0, [r7, #24]
 8001bdc:	edc7 0a05 	vstr	s1, [r7, #20]
 8001be0:	ed87 1a04 	vstr	s2, [r7, #16]
 8001be4:	edc7 1a03 	vstr	s3, [r7, #12]
 8001be8:	ed87 2a02 	vstr	s4, [r7, #8]
 8001bec:	edc7 2a01 	vstr	s5, [r7, #4]
	LPF_Init(filt, f_LP_gyr, f_LP_acc, f_LP_angles, dt);
 8001bf0:	edd7 1a01 	vldr	s3, [r7, #4]
 8001bf4:	ed97 1a02 	vldr	s2, [r7, #8]
 8001bf8:	edd7 0a05 	vldr	s1, [r7, #20]
 8001bfc:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c00:	69f8      	ldr	r0, [r7, #28]
 8001c02:	f000 f968 	bl	8001ed6 <LPF_Init>
	HPF_Init(filt, f_HP_gyr, f_HP_acc, dt);
 8001c06:	ed97 1a01 	vldr	s2, [r7, #4]
 8001c0a:	edd7 0a03 	vldr	s1, [r7, #12]
 8001c0e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c12:	69f8      	ldr	r0, [r7, #28]
 8001c14:	f000 fa65 	bl	80020e2 <HPF_Init>

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c1c:	e038      	b.n	8001c90 <Filter_Init+0xc0>
	{
		filt->filt_gyr_x[i] = 0.0f;					// filt_gyr_x[0] -> past filtered sample   //	filt_gyr_x[1] -> curr filtered sample
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c22:	3304      	adds	r3, #4
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_y[i] = 0.0f;					// filt_gyr_x[0] ==> y(n)
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	3306      	adds	r3, #6
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_z[i] = 0.0f;					// filt_gyr_x[1] ==> y(n-1)
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	3308      	adds	r3, #8
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
		filt->filt_acc_x[i] = 0.0f;
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c58:	330a      	adds	r3, #10
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
		filt->filt_acc_y[i] = 0.0f;
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	330c      	adds	r3, #12
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
		filt->filt_acc_z[i] = 0.0f;
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7c:	330e      	adds	r3, #14
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3304      	adds	r3, #4
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	ddc3      	ble.n	8001c1e <Filter_Init+0x4e>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c9a:	e038      	b.n	8001d0e <Filter_Init+0x13e>
	{
		filt->not_filt_gyr_x[i] = 0.0f;					// not_filt_gyr_x[0] -> past not filtered sample   //	not_filt_gyr_x[1] -> curr not filtered sample
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	3310      	adds	r3, #16
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_y[i] = 0.0f;					// not_filt_gyr_x[0] ==> x(n)
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb2:	3312      	adds	r3, #18
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_z[i] = 0.0f;					// not_filt_gyr_x[1] ==> x(n-1)
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_x[i] = 0.0f;
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd6:	3316      	adds	r3, #22
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_y[i] = 0.0f;
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce8:	3318      	adds	r3, #24
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_z[i] = 0.0f;
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfa:	331a      	adds	r3, #26
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	ddc3      	ble.n	8001c9c <Filter_Init+0xcc>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d18:	e01d      	b.n	8001d56 <Filter_Init+0x186>
	{
		filt->filt_ang_x[i] = 0.0f;
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	331c      	adds	r3, #28
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
		filt->filt_ang_y[i] = 0.0f;
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	331e      	adds	r3, #30
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
		filt->filt_ang_z[i] = 0.0f;
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	3320      	adds	r3, #32
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3304      	adds	r3, #4
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	3301      	adds	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	ddde      	ble.n	8001d1a <Filter_Init+0x14a>
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	@ 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <LPF_CalculateAlpha>:
/// ##### LOW PASS FILTER for GYRO&ACC SECTION ###########################################################
/// ######################################################################################################

/// Alpha calculation for LPF filter in general --> (GYR&ACC and ANGLES)
float LPF_CalculateAlpha(float f_cut, float dt)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d72:	edc7 0a00 	vstr	s1, [r7]
	float tau = 1.0f / (2.0f * M_PI * f_cut);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe fbe6 	bl	8000548 <__aeabi_f2d>
 8001d7c:	a313      	add	r3, pc, #76	@ (adr r3, 8001dcc <LPF_CalculateAlpha+0x64>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fc39 	bl	80005f8 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <LPF_CalculateAlpha+0x60>)
 8001d90:	f7fe fd5c 	bl	800084c <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe ff04 	bl	8000ba8 <__aeabi_d2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
	return dt / (tau + dt);
 8001da4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da8:	edd7 7a00 	vldr	s15, [r7]
 8001dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db0:	ed97 7a00 	vldr	s14, [r7]
 8001db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001db8:	eef0 7a66 	vmov.f32	s15, s13
}
 8001dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	3ff00000 	.word	0x3ff00000
 8001dcc:	54442d18 	.word	0x54442d18
 8001dd0:	401921fb 	.word	0x401921fb

08001dd4 <LPF_Update_Single>:

/// ------ LOW PF ILTER, 1° ORDER ------------------------------------------------------------------------------------
float LPF_Update_Single(LPF_FILTER *filt, float old_data, float data, float alpha)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001de0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001de4:	ed87 1a00 	vstr	s2, [r7]
	 return ( (alpha * data) + ((1-alpha) * old_data) );
 8001de8:	ed97 7a00 	vldr	s14, [r7]
 8001dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001df8:	edd7 7a00 	vldr	s15, [r7]
 8001dfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LPF_SetAlpha>:

/// ------ LPF set over boundaries coefficients ----------------------------------------------------------------------
void LPF_SetAlpha(LPF_FILTER *filt, float alpha_gyr, float alpha_acc, float coeff_filt_angl)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e26:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e2a:	ed87 1a00 	vstr	s2, [r7]
	// Alpha gyr COEFF
	if(alpha_gyr > 1.0f)
 8001e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	dd03      	ble.n	8001e48 <LPF_SetAlpha+0x2e>
		alpha_gyr = 1.0f;
 8001e40:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	e009      	b.n	8001e5c <LPF_SetAlpha+0x42>
	else if(alpha_gyr < 0.0f)
 8001e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	d502      	bpl.n	8001e5c <LPF_SetAlpha+0x42>
		alpha_gyr = 0.0f;
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
	// Alpha_acc COEFF
	if(alpha_acc > 1.0f)
 8001e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	dd03      	ble.n	8001e76 <LPF_SetAlpha+0x5c>
		alpha_acc = 1.0f;
 8001e6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	e009      	b.n	8001e8a <LPF_SetAlpha+0x70>
	else if(alpha_acc < 0.0f)
 8001e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d502      	bpl.n	8001e8a <LPF_SetAlpha+0x70>
		alpha_acc = 0.0f;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
	// coeff_filt_angl COEFF
	if(coeff_filt_angl > 1.0f)
 8001e8a:	edd7 7a00 	vldr	s15, [r7]
 8001e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	dd03      	ble.n	8001ea4 <LPF_SetAlpha+0x8a>
		coeff_filt_angl = 1.0f;
 8001e9c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	e009      	b.n	8001eb8 <LPF_SetAlpha+0x9e>
	else if(coeff_filt_angl < 0)
 8001ea4:	edd7 7a00 	vldr	s15, [r7]
 8001ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d502      	bpl.n	8001eb8 <LPF_SetAlpha+0x9e>
		coeff_filt_angl = 0.0f;
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	603b      	str	r3, [r7, #0]

	filt->alpha_gyr = alpha_gyr;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	601a      	str	r2, [r3, #0]
	filt->alpha_acc = alpha_acc;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	605a      	str	r2, [r3, #4]
	filt->coeff_filt_ang = coeff_filt_angl;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	611a      	str	r2, [r3, #16]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LPF_Init>:

void LPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float f_cut_angles, float dt)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b08a      	sub	sp, #40	@ 0x28
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6178      	str	r0, [r7, #20]
 8001ede:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ee2:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ee6:	ed87 1a02 	vstr	s2, [r7, #8]
 8001eea:	edc7 1a01 	vstr	s3, [r7, #4]
	// aplha for LPF settings
	float alpha_gyr = LPF_CalculateAlpha(f_cut_gyr, dt);
 8001eee:	edd7 0a01 	vldr	s1, [r7, #4]
 8001ef2:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ef6:	f7ff ff37 	bl	8001d68 <LPF_CalculateAlpha>
 8001efa:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float alpha_acc = LPF_CalculateAlpha(f_cut_acc, dt);
 8001efe:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f02:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f06:	f7ff ff2f 	bl	8001d68 <LPF_CalculateAlpha>
 8001f0a:	ed87 0a08 	vstr	s0, [r7, #32]
	float coeff_filt_angl = LPF_CalculateAlpha(f_cut_angles, dt);
 8001f0e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f12:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f16:	f7ff ff27 	bl	8001d68 <LPF_CalculateAlpha>
 8001f1a:	ed87 0a07 	vstr	s0, [r7, #28]
	LPF_SetAlpha(filt, alpha_gyr, alpha_acc, f_cut_angles);
 8001f1e:	ed97 1a02 	vldr	s2, [r7, #8]
 8001f22:	edd7 0a08 	vldr	s1, [r7, #32]
 8001f26:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff75 	bl	8001e1a <LPF_SetAlpha>

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <LPF_GyrAcc_Update_All>:


LPF_FILTER LPF_GyrAcc_Update_All(LPF_FILTER *filt, float *gyr, float *acc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
	/* I compute the LPF filter */
	filt->filt_gyr_x[0] = LPF_Update_Single(filt, filt->filt_gyr_x[1], gyr[0], filt->alpha_gyr);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	ed93 7a00 	vldr	s14, [r3]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	edd3 6a00 	vldr	s13, [r3]
 8001f58:	eeb0 1a66 	vmov.f32	s2, s13
 8001f5c:	eef0 0a47 	vmov.f32	s1, s14
 8001f60:	eeb0 0a67 	vmov.f32	s0, s15
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	f7ff ff35 	bl	8001dd4 <LPF_Update_Single>
 8001f6a:	eef0 7a40 	vmov.f32	s15, s0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	edc3 7a05 	vstr	s15, [r3, #20]
	filt->filt_gyr_y[0] = LPF_Update_Single(filt, filt->filt_gyr_y[1], gyr[1], filt->alpha_gyr);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	edd3 6a00 	vldr	s13, [r3]
 8001f88:	eeb0 1a66 	vmov.f32	s2, s13
 8001f8c:	eef0 0a47 	vmov.f32	s1, s14
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f7ff ff1d 	bl	8001dd4 <LPF_Update_Single>
 8001f9a:	eef0 7a40 	vmov.f32	s15, s0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->filt_gyr_z[0] = LPF_Update_Single(filt, filt->filt_gyr_z[1], gyr[2], filt->alpha_gyr);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3308      	adds	r3, #8
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	edd3 6a00 	vldr	s13, [r3]
 8001fb8:	eeb0 1a66 	vmov.f32	s2, s13
 8001fbc:	eef0 0a47 	vmov.f32	s1, s14
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	68b8      	ldr	r0, [r7, #8]
 8001fc6:	f7ff ff05 	bl	8001dd4 <LPF_Update_Single>
 8001fca:	eef0 7a40 	vmov.f32	s15, s0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	filt->filt_acc_x[0] = LPF_Update_Single(filt, filt->filt_acc_x[1], acc[0], filt->alpha_acc);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	ed93 7a00 	vldr	s14, [r3]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fe6:	eeb0 1a66 	vmov.f32	s2, s13
 8001fea:	eef0 0a47 	vmov.f32	s1, s14
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f7ff feee 	bl	8001dd4 <LPF_Update_Single>
 8001ff8:	eef0 7a40 	vmov.f32	s15, s0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	filt->filt_acc_y[0] = LPF_Update_Single(filt, filt->filt_acc_y[1], acc[1], filt->alpha_acc);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3304      	adds	r3, #4
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	edd3 6a01 	vldr	s13, [r3, #4]
 8002016:	eeb0 1a66 	vmov.f32	s2, s13
 800201a:	eef0 0a47 	vmov.f32	s1, s14
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	f7ff fed6 	bl	8001dd4 <LPF_Update_Single>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	filt->filt_acc_z[0] = LPF_Update_Single(filt, filt->filt_acc_z[1], acc[2], filt->alpha_acc);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3308      	adds	r3, #8
 800203c:	ed93 7a00 	vldr	s14, [r3]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	edd3 6a01 	vldr	s13, [r3, #4]
 8002046:	eeb0 1a66 	vmov.f32	s2, s13
 800204a:	eef0 0a47 	vmov.f32	s1, s14
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	68b8      	ldr	r0, [r7, #8]
 8002054:	f7ff febe 	bl	8001dd4 <LPF_Update_Single>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	/* the current sample will become the next old one */
	filt->filt_gyr_x[1] = filt->filt_gyr_x[0];
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	619a      	str	r2, [r3, #24]
	filt->filt_gyr_y[1] = filt->filt_gyr_y[0];
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	621a      	str	r2, [r3, #32]
	filt->filt_gyr_z[1] = filt->filt_gyr_z[0];
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28
	filt->filt_acc_x[1] = filt->filt_acc_x[0];
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
	filt->filt_acc_y[1] = filt->filt_acc_y[0];
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
	filt->filt_acc_z[1] = filt->filt_acc_z[0];
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40

	/* I update gyro and acc global variables */
	gyr[0] = filt->filt_gyr_x[0];
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
	gyr[1] = filt->filt_gyr_y[0];
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	69d2      	ldr	r2, [r2, #28]
 80020a2:	601a      	str	r2, [r3, #0]
	gyr[2] = filt->filt_gyr_z[0];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3308      	adds	r3, #8
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ac:	601a      	str	r2, [r3, #0]
	acc[0] = filt->filt_acc_x[0];
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	601a      	str	r2, [r3, #0]
	acc[1] = filt->filt_acc_y[0];
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3304      	adds	r3, #4
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020be:	601a      	str	r2, [r3, #0]
	acc[2] = filt->filt_acc_z[0];
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	3308      	adds	r3, #8
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020c8:	601a      	str	r2, [r3, #0]

	return *filt;
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	238c      	movs	r3, #140	@ 0x8c
 80020d4:	461a      	mov	r2, r3
 80020d6:	f00c fdaa 	bl	800ec2e <memcpy>
}
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HPF_Init>:
/// ##### HIGH PASS FILTER SECTION #######################################################################
/// ######################################################################################################


void HPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float dt)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	ed87 0a02 	vstr	s0, [r7, #8]
 80020ee:	edc7 0a01 	vstr	s1, [r7, #4]
 80020f2:	ed87 1a00 	vstr	s2, [r7]
	// beta for HPF settings
	float beta_gyr = HPF_CalculateBeta(f_cut_gyr, dt);
 80020f6:	edd7 0a00 	vldr	s1, [r7]
 80020fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80020fe:	f000 f815 	bl	800212c <HPF_CalculateBeta>
 8002102:	ed87 0a05 	vstr	s0, [r7, #20]
	float beta_acc = HPF_CalculateBeta(f_cut_acc, dt);
 8002106:	edd7 0a00 	vldr	s1, [r7]
 800210a:	ed97 0a01 	vldr	s0, [r7, #4]
 800210e:	f000 f80d 	bl	800212c <HPF_CalculateBeta>
 8002112:	ed87 0a04 	vstr	s0, [r7, #16]
	HPF_SetBeta(filt, beta_gyr, beta_acc);
 8002116:	edd7 0a04 	vldr	s1, [r7, #16]
 800211a:	ed97 0a05 	vldr	s0, [r7, #20]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f826 	bl	8002170 <HPF_SetBeta>

}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HPF_CalculateBeta>:


float HPF_CalculateBeta(float f_cut, float dt)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	ed87 0a01 	vstr	s0, [r7, #4]
 8002136:	edc7 0a00 	vstr	s1, [r7]
	return 1.0f - expf(-2.0f * (float)M_PI * f_cut * dt);
 800213a:	edd7 7a01 	vldr	s15, [r7, #4]
 800213e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800216c <HPF_CalculateBeta+0x40>
 8002142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002146:	edd7 7a00 	vldr	s15, [r7]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	f00e fe07 	bl	8010d64 <expf>
 8002156:	eef0 7a40 	vmov.f32	s15, s0
 800215a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	c0c90fdb 	.word	0xc0c90fdb

08002170 <HPF_SetBeta>:


void HPF_SetBeta(LPF_FILTER *filt, float beta_gyr, float beta_acc)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	ed87 0a02 	vstr	s0, [r7, #8]
 800217c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(beta_gyr > 1.0f)
 8002180:	edd7 7a02 	vldr	s15, [r7, #8]
 8002184:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	dd03      	ble.n	800219a <HPF_SetBeta+0x2a>
	{
		beta_gyr = 1.0f;
 8002192:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	e009      	b.n	80021ae <HPF_SetBeta+0x3e>
	}
	else if(beta_gyr < 0.0f)
 800219a:	edd7 7a02 	vldr	s15, [r7, #8]
 800219e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	d502      	bpl.n	80021ae <HPF_SetBeta+0x3e>
	{
		beta_gyr = 0.0f;
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
	}

	if(beta_acc > 1.0f)
 80021ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	dd03      	ble.n	80021c8 <HPF_SetBeta+0x58>
	{
		beta_acc = 1.0f;
 80021c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	e009      	b.n	80021dc <HPF_SetBeta+0x6c>
	}
	else if(beta_acc < 0.0f)
 80021c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	d502      	bpl.n	80021dc <HPF_SetBeta+0x6c>
	{
		beta_acc = 0.0f;
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
	}

	filt->beta_gyr = beta_gyr;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	609a      	str	r2, [r3, #8]
	filt->beta_acc = beta_acc;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sampleFreq) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b09e      	sub	sp, #120	@ 0x78
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	ed87 0a07 	vstr	s0, [r7, #28]
 80021fe:	edc7 0a06 	vstr	s1, [r7, #24]
 8002202:	ed87 1a05 	vstr	s2, [r7, #20]
 8002206:	edc7 1a04 	vstr	s3, [r7, #16]
 800220a:	ed87 2a03 	vstr	s4, [r7, #12]
 800220e:	edc7 2a02 	vstr	s5, [r7, #8]
 8002212:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002216:	4bec      	ldr	r3, [pc, #944]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eeb1 7a67 	vneg.f32	s14, s15
 8002220:	edd7 7a07 	vldr	s15, [r7, #28]
 8002224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002228:	4be8      	ldr	r3, [pc, #928]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800222a:	edd3 6a00 	vldr	s13, [r3]
 800222e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	ee37 7a67 	vsub.f32	s14, s14, s15
 800223a:	4be5      	ldr	r3, [pc, #916]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800223c:	edd3 6a00 	vldr	s13, [r3]
 8002240:	edd7 7a05 	vldr	s15, [r7, #20]
 8002244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002254:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002258:	4bde      	ldr	r3, [pc, #888]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002266:	4bd9      	ldr	r3, [pc, #868]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 8002268:	edd3 6a00 	vldr	s13, [r3]
 800226c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002278:	4bd5      	ldr	r3, [pc, #852]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800227a:	edd3 6a00 	vldr	s13, [r3]
 800227e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002296:	4bcf      	ldr	r3, [pc, #828]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 8002298:	ed93 7a00 	vldr	s14, [r3]
 800229c:	edd7 7a06 	vldr	s15, [r7, #24]
 80022a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a4:	4bc8      	ldr	r3, [pc, #800]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80022a6:	edd3 6a00 	vldr	s13, [r3]
 80022aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b6:	4bc6      	ldr	r3, [pc, #792]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 80022b8:	edd3 6a00 	vldr	s13, [r3]
 80022bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80022d4:	4bbf      	ldr	r3, [pc, #764]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 80022d6:	ed93 7a00 	vldr	s14, [r3]
 80022da:	edd7 7a05 	vldr	s15, [r7, #20]
 80022de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e2:	4bb9      	ldr	r3, [pc, #740]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e4:	edd3 6a00 	vldr	s13, [r3]
 80022e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f4:	4bb5      	ldr	r3, [pc, #724]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80022f6:	edd3 6a00 	vldr	s13, [r3]
 80022fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80022fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800230a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002312:	edd7 7a04 	vldr	s15, [r7, #16]
 8002316:	eef5 7a40 	vcmp.f32	s15, #0.0
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d10e      	bne.n	800233e <MadgwickAHRSupdateIMU+0x14a>
 8002320:	edd7 7a03 	vldr	s15, [r7, #12]
 8002324:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	d107      	bne.n	800233e <MadgwickAHRSupdateIMU+0x14a>
 800232e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002332:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	f000 81e5 	beq.w	8002708 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800233e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002342:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002346:	edd7 7a03 	vldr	s15, [r7, #12]
 800234a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800234e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002352:	edd7 7a02 	vldr	s15, [r7, #8]
 8002356:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	eeb0 0a67 	vmov.f32	s0, s15
 8002362:	f000 fa7b 	bl	800285c <invSqrt>
 8002366:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 800236a:	ed97 7a04 	vldr	s14, [r7, #16]
 800236e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002376:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 800237a:	ed97 7a03 	vldr	s14, [r7, #12]
 800237e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;
 800238a:	ed97 7a02 	vldr	s14, [r7, #8]
 800238e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800239a:	4b8e      	ldr	r3, [pc, #568]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023a4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 80023a8:	4b87      	ldr	r3, [pc, #540]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023b2:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 80023b6:	4b85      	ldr	r3, [pc, #532]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023c0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 80023c4:	4b82      	ldr	r3, [pc, #520]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ce:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 80023d2:	4b80      	ldr	r3, [pc, #512]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 80023e4:	4b78      	ldr	r3, [pc, #480]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 80023f6:	4b75      	ldr	r3, [pc, #468]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002404:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 8002408:	4b6f      	ldr	r3, [pc, #444]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 800241a:	4b6c      	ldr	r3, [pc, #432]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002428:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 800242c:	4b69      	ldr	r3, [pc, #420]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	4b68      	ldr	r3, [pc, #416]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 8002440:	4b61      	ldr	r3, [pc, #388]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002442:	ed93 7a00 	vldr	s14, [r3]
 8002446:	4b60      	ldr	r3, [pc, #384]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 8002454:	4b5d      	ldr	r3, [pc, #372]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 8002456:	ed93 7a00 	vldr	s14, [r3]
 800245a:	4b5c      	ldr	r3, [pc, #368]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 8002468:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800246a:	ed93 7a00 	vldr	s14, [r3]
 800246e:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002478:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800247c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002480:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002488:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800248c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002498:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800249c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a8:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80024ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80024bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80024c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c8:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80024cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024d8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024dc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80024e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024e4:	4b38      	ldr	r3, [pc, #224]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80024f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002502:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800250e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800251e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252a:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800252e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800253e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002542:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002546:	ee27 7a87 	vmul.f32	s14, s15, s14
 800254a:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002554:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8002558:	edd7 7a04 	vldr	s15, [r7, #16]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002564:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002568:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800256c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002574:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002578:	edd7 7a03 	vldr	s15, [r7, #12]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002584:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002588:	ee37 7a67 	vsub.f32	s14, s14, s15
 800258c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002590:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80025a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ac:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80025b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80025c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025c4:	e008      	b.n	80025d8 <MadgwickAHRSupdateIMU+0x3e4>
 80025c6:	bf00      	nop
 80025c8:	20000324 	.word	0x20000324
 80025cc:	20000328 	.word	0x20000328
 80025d0:	2000032c 	.word	0x2000032c
 80025d4:	20000004 	.word	0x20000004
 80025d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80025dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025e0:	4b99      	ldr	r3, [pc, #612]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ea:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80025ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025fe:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002602:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002606:	4b90      	ldr	r3, [pc, #576]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002614:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002618:	edd7 7a03 	vldr	s15, [r7, #12]
 800261c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002624:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002628:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800262c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002630:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002634:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002640:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	edd7 7a08 	vldr	s15, [r7, #32]
 800264c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	f000 f900 	bl	800285c <invSqrt>
 800265c:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 8002660:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002664:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 8002670:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002674:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 8002680:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002684:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 8002690:	ed97 7a08 	vldr	s14, [r7, #32]
 8002694:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 80026a0:	4b6a      	ldr	r3, [pc, #424]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026a2:	ed93 7a00 	vldr	s14, [r3]
 80026a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80026b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 80026ba:	4b64      	ldr	r3, [pc, #400]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026bc:	ed93 7a00 	vldr	s14, [r3]
 80026c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80026c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 80026d4:	4b5d      	ldr	r3, [pc, #372]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026d6:	ed93 7a00 	vldr	s14, [r3]
 80026da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80026e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ea:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 80026ee:	4b57      	ldr	r3, [pc, #348]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80026f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fc:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800270c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002714:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800271c:	4b4c      	ldr	r3, [pc, #304]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 8002728:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800272c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002730:	edd7 7a01 	vldr	s15, [r7, #4]
 8002734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002738:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	4b42      	ldr	r3, [pc, #264]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 800274c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002750:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002754:	edd7 7a01 	vldr	s15, [r7, #4]
 8002758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002764:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002770:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002778:	edd7 7a01 	vldr	s15, [r7, #4]
 800277c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002780:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	4b2f      	ldr	r3, [pc, #188]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 8002794:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 800279a:	ed93 7a00 	vldr	s14, [r3]
 800279e:	4b2c      	ldr	r3, [pc, #176]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 80027aa:	edd3 6a00 	vldr	s13, [r3]
 80027ae:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027bc:	4b26      	ldr	r3, [pc, #152]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 80027be:	edd3 6a00 	vldr	s13, [r3]
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80027d2:	edd3 6a00 	vldr	s13, [r3]
 80027d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	f000 f838 	bl	800285c <invSqrt>
 80027ec:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 80027f0:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 80027f2:	ed93 7a00 	vldr	s14, [r3]
 80027f6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 8002800:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002814:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 800281a:	ed93 7a00 	vldr	s14, [r3]
 800281e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800283c:	edc3 7a00 	vstr	s15, [r3]
}
 8002840:	bf00      	nop
 8002842:	3778      	adds	r7, #120	@ 0x78
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000032c 	.word	0x2000032c
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004
 8002854:	20000324 	.word	0x20000324
 8002858:	20000328 	.word	0x20000328

0800285c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002866:	edd7 7a01 	vldr	s15, [r7, #4]
 800286a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800286e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002872:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	105a      	asrs	r2, r3, #1
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <invSqrt+0x74>)
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002894:	ed97 7a04 	vldr	s14, [r7, #16]
 8002898:	edd7 7a05 	vldr	s15, [r7, #20]
 800289c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80028ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	ee07 3a90 	vmov	s15, r3
}
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	5f3759df 	.word	0x5f3759df

080028d4 <SetPriorities>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++ PRIORITIES SETTINGS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void SetPriorities(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	 HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80028d8:	2005      	movs	r0, #5
 80028da:	f001 fe69 	bl	80045b0 <HAL_NVIC_SetPriorityGrouping>

	  // DMA: max priority
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	2038      	movs	r0, #56	@ 0x38
 80028e4:	f001 fe6f 	bl	80045c6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 2);
 80028e8:	2202      	movs	r2, #2
 80028ea:	2100      	movs	r1, #0
 80028ec:	203b      	movs	r0, #59	@ 0x3b
 80028ee:	f001 fe6a 	bl	80045c6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 1);   // RX SPI2
 80028f2:	2201      	movs	r2, #1
 80028f4:	2100      	movs	r1, #0
 80028f6:	200e      	movs	r0, #14
 80028f8:	f001 fe65 	bl	80045c6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 3);   // TX SPI2
 80028fc:	2203      	movs	r2, #3
 80028fe:	2100      	movs	r1, #0
 8002900:	200f      	movs	r0, #15
 8002902:	f001 fe60 	bl	80045c6 <HAL_NVIC_SetPriority>

	  // USB CDC (OTG_FS) - high but under DMA
	  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 4);
 8002906:	2204      	movs	r2, #4
 8002908:	2100      	movs	r1, #0
 800290a:	2043      	movs	r0, #67	@ 0x43
 800290c:	f001 fe5b 	bl	80045c6 <HAL_NVIC_SetPriority>

	  // EXTI (GPIO sensors)
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2101      	movs	r1, #1
 8002914:	2008      	movs	r0, #8
 8002916:	f001 fe56 	bl	80045c6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 800291a:	2201      	movs	r2, #1
 800291c:	2101      	movs	r1, #1
 800291e:	2009      	movs	r0, #9
 8002920:	f001 fe51 	bl	80045c6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 2);
 8002924:	2202      	movs	r2, #2
 8002926:	2101      	movs	r1, #1
 8002928:	200a      	movs	r0, #10
 800292a:	f001 fe4c 	bl	80045c6 <HAL_NVIC_SetPriority>

	  // UART (commands and debug)
	  HAL_NVIC_SetPriority(USART1_IRQn, 1, 2);
 800292e:	2202      	movs	r2, #2
 8002930:	2101      	movs	r1, #1
 8002932:	2025      	movs	r0, #37	@ 0x25
 8002934:	f001 fe47 	bl	80045c6 <HAL_NVIC_SetPriority>

	  // Timer - low priority
	  HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2102      	movs	r1, #2
 800293c:	201e      	movs	r0, #30
 800293e:	f001 fe42 	bl	80045c6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 1);  // If we use TIM2
 8002942:	2201      	movs	r2, #1
 8002944:	2102      	movs	r1, #2
 8002946:	201c      	movs	r0, #28
 8002948:	f001 fe3d 	bl	80045c6 <HAL_NVIC_SetPriority>

	  // Enable
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800294c:	2038      	movs	r0, #56	@ 0x38
 800294e:	f001 fe56 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002952:	203b      	movs	r0, #59	@ 0x3b
 8002954:	f001 fe53 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002958:	200e      	movs	r0, #14
 800295a:	f001 fe50 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800295e:	200f      	movs	r0, #15
 8002960:	f001 fe4d 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002964:	2043      	movs	r0, #67	@ 0x43
 8002966:	f001 fe4a 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800296a:	2008      	movs	r0, #8
 800296c:	f001 fe47 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002970:	2009      	movs	r0, #9
 8002972:	f001 fe44 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002976:	200a      	movs	r0, #10
 8002978:	f001 fe41 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800297c:	2025      	movs	r0, #37	@ 0x25
 800297e:	f001 fe3e 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002982:	201e      	movs	r0, #30
 8002984:	f001 fe3b 	bl	80045fe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002988:	201c      	movs	r0, #28
 800298a:	f001 fe38 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <Toggle>:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++ DEBUG FUNCTIONS ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// Function that toggles the led of the board to show if the device is working
void Toggle(uint32_t waitingTime)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= waitingTime)
 800299c:	f001 fd08 	bl	80043b0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <Toggle+0x40>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d808      	bhi.n	80029c0 <Toggle+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80029ae:	2110      	movs	r1, #16
 80029b0:	4809      	ldr	r0, [pc, #36]	@ (80029d8 <Toggle+0x44>)
 80029b2:	f002 fbf6 	bl	80051a2 <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 80029b6:	f001 fcfb 	bl	80043b0 <HAL_GetTick>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <Toggle+0x40>)
 80029be:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 80029c0:	f001 fcf6 	bl	80043b0 <HAL_GetTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <Toggle+0x48>)
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000864 	.word	0x20000864
 80029d8:	40020400 	.word	0x40020400
 80029dc:	20000860 	.word	0x20000860

080029e0 <HAL_UART_RxCpltCallback>:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++ CALLBACK FUNCTIONS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// UART CALLBACK FUNCTION
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	@ (8002a54 <HAL_UART_RxCpltCallback+0x74>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12c      	bne.n	8002a4c <HAL_UART_RxCpltCallback+0x6c>
    {
        if (rx_byte == '\n' || rx_byte == '\r')
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b0a      	cmp	r3, #10
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_RxCpltCallback+0x22>
 80029fa:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b0d      	cmp	r3, #13
 8002a00:	d10c      	bne.n	8002a1c <HAL_UART_RxCpltCallback+0x3c>
        {
            rx_uart_buff[rx_index] = '\0';  // termina stringa
 8002a02:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]
            HandleReceivedString((char*)rx_uart_buff);
 8002a0e:	4814      	ldr	r0, [pc, #80]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a10:	f7fe fac0 	bl	8000f94 <HandleReceivedString>
            rx_index = 0;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]
        {
 8002a1a:	e012      	b.n	8002a42 <HAL_UART_RxCpltCallback+0x62>
        }
        else
        {
            if (rx_index < UART_RX_BUFFER_SIZE - 1)
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a22:	d80b      	bhi.n	8002a3c <HAL_UART_RxCpltCallback+0x5c>
            {
                rx_uart_buff[rx_index++] = rx_byte;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	b291      	uxth	r1, r2
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a2e:	8011      	strh	r1, [r2, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 8002a34:	7819      	ldrb	r1, [r3, #0]
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	e002      	b.n	8002a42 <HAL_UART_RxCpltCallback+0x62>
            }
            else
            {
                rx_index = 0;  // overflow protection
 8002a3c:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	801a      	strh	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);  // restart interrupt
 8002a42:	2201      	movs	r2, #1
 8002a44:	4904      	ldr	r1, [pc, #16]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 8002a46:	4807      	ldr	r0, [pc, #28]	@ (8002a64 <HAL_UART_RxCpltCallback+0x84>)
 8002a48:	f006 fb12 	bl	8009070 <HAL_UART_Receive_IT>
    }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40011000 	.word	0x40011000
 8002a58:	200008a8 	.word	0x200008a8
 8002a5c:	200008aa 	.word	0x200008aa
 8002a60:	20000868 	.word	0x20000868
 8002a64:	20000680 	.word	0x20000680

08002a68 <HAL_GPIO_EXTI_Callback>:



/// DMA Start Reading
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)				/// DMA2
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d107      	bne.n	8002a88 <HAL_GPIO_EXTI_Callback+0x20>
	{
		// we check if the interrupt pin is the accelerometer one
		if (!imu.readingAcc)
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a7a:	7c1b      	ldrb	r3, [r3, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d114      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
			BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8002a80:	480c      	ldr	r0, [pc, #48]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a82:	f7fe fd9f 	bl	80015c4 <BMI088_ReadAccelerometerDMA>
	else if (GPIO_Pin == MCP3564_IRQ_Pin) {	/// DMA1
		MCP3561_StartReadADCData_DMA(&hspi2);			// Start reading with DMA1
		//allDiffCh = MCP3561_ReadADCData(&hspi2, adc);	// It read the value from the sensor MCP3564R and it writes into the variable adc[4] the measurements

	}
}
 8002a86:	e010      	b.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
	else if(GPIO_Pin == INT_GYR_Pin)	/// DMA2
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d107      	bne.n	8002a9e <HAL_GPIO_EXTI_Callback+0x36>
	if (!imu.readingGyr)
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a90:	7c5b      	ldrb	r3, [r3, #17]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
		BMI088_ReadGyroscopeDMA(&imu);
 8002a96:	4807      	ldr	r0, [pc, #28]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a98:	f7fe fe30 	bl	80016fc <BMI088_ReadGyroscopeDMA>
}
 8002a9c:	e005      	b.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
	else if (GPIO_Pin == MCP3564_IRQ_Pin) {	/// DMA1
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
		MCP3561_StartReadADCData_DMA(&hspi2);			// Start reading with DMA1
 8002aa4:	4804      	ldr	r0, [pc, #16]	@ (8002ab8 <HAL_GPIO_EXTI_Callback+0x50>)
 8002aa6:	f000 feeb 	bl	8003880 <MCP3561_StartReadADCData_DMA>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000728 	.word	0x20000728
 8002ab8:	20000388 	.word	0x20000388

08002abc <HAL_SPI_TxRxCpltCallback>:


/// DMA CALLBACK
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)	// SPI1 used for Acc and Gyro
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	@ (8002b18 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10d      	bne.n	8002aea <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 8002ace:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <HAL_SPI_TxRxCpltCallback+0x60>)
 8002ad0:	7c1b      	ldrb	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8002ad6:	4811      	ldr	r0, [pc, #68]	@ (8002b1c <HAL_SPI_TxRxCpltCallback+0x60>)
 8002ad8:	f7fe fda6 	bl	8001628 <BMI088_ReadAccelerometerDMA_Complete>

		}

		if (imu.readingGyr)
 8002adc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_SPI_TxRxCpltCallback+0x60>)
 8002ade:	7c5b      	ldrb	r3, [r3, #17]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8002ae4:	480d      	ldr	r0, [pc, #52]	@ (8002b1c <HAL_SPI_TxRxCpltCallback+0x60>)
 8002ae6:	f7fe fe3b 	bl	8001760 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
	if (hspi->Instance == SPI2)	// SPI2 used for MCP3564R sensor
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <HAL_SPI_TxRxCpltCallback+0x64>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10d      	bne.n	8002b10 <HAL_SPI_TxRxCpltCallback+0x54>
	{
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002afa:	480a      	ldr	r0, [pc, #40]	@ (8002b24 <HAL_SPI_TxRxCpltCallback+0x68>)
 8002afc:	f002 fb38 	bl	8005170 <HAL_GPIO_WritePin>
		allDiffCh = MCP3561_ReadADCData_DMA(&hspi2, adc);	// It change the global variable adc[4] with the update value
 8002b00:	4909      	ldr	r1, [pc, #36]	@ (8002b28 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8002b02:	480a      	ldr	r0, [pc, #40]	@ (8002b2c <HAL_SPI_TxRxCpltCallback+0x70>)
 8002b04:	f000 fed6 	bl	80038b4 <MCP3561_ReadADCData_DMA>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <HAL_SPI_TxRxCpltCallback+0x74>)
 8002b0e:	701a      	strb	r2, [r3, #0]
	}
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40013000 	.word	0x40013000
 8002b1c:	20000728 	.word	0x20000728
 8002b20:	40003800 	.word	0x40003800
 8002b24:	40020400 	.word	0x40020400
 8002b28:	200008ac 	.word	0x200008ac
 8002b2c:	20000388 	.word	0x20000388
 8002b30:	200008bc 	.word	0x200008bc

08002b34 <HAL_TIM_PeriodElapsedCallback>:


/// TIMERS CALLBACK
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	b0c7      	sub	sp, #284	@ 0x11c
 8002b3a:	af14      	add	r7, sp, #80	@ 0x50
 8002b3c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	// Calculate angles with quaternions
    if(htim->Instance == TIM2)
 8002b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4a:	d160      	bne.n	8002c0e <HAL_TIM_PeriodElapsedCallback+0xda>
    {
    	timestamp_TIM2++;	// how many times TIM2 is called (not used yet)
 8002b4c:	4b78      	ldr	r3, [pc, #480]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	4a77      	ldr	r2, [pc, #476]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002b54:	6013      	str	r3, [r2, #0]
        // Code to execute at constant sample rate
        Take_IMU_Measurements(&imu, &pkt);
 8002b56:	4977      	ldr	r1, [pc, #476]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002b58:	4877      	ldr	r0, [pc, #476]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002b5a:	f7fe fc02 	bl	8001362 <Take_IMU_Measurements>

        /// Filtering Gyro and Acc measurements
        filt = LPF_GyrAcc_Update_All(&filt, pkt.gyr, pkt.acc);
 8002b5e:	4c77      	ldr	r4, [pc, #476]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002b60:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002b64:	4b76      	ldr	r3, [pc, #472]	@ (8002d40 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002b66:	4a77      	ldr	r2, [pc, #476]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002b68:	4974      	ldr	r1, [pc, #464]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002b6a:	f7ff f9e5 	bl	8001f38 <LPF_GyrAcc_Update_All>
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b74:	228c      	movs	r2, #140	@ 0x8c
 8002b76:	4619      	mov	r1, r3
 8002b78:	f00c f859 	bl	800ec2e <memcpy>

		/// Algorithm application to find angles
        MadgwickAHRSupdateIMU(pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2], F_TIM2);
 8002b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002b7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b82:	4b6c      	ldr	r3, [pc, #432]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002b84:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b88:	4b6a      	ldr	r3, [pc, #424]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002b8a:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b8e:	4b69      	ldr	r3, [pc, #420]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002b90:	ed93 6a08 	vldr	s12, [r3, #32]
 8002b94:	4b67      	ldr	r3, [pc, #412]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002b96:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 8002b9a:	4b66      	ldr	r3, [pc, #408]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002b9c:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
 8002ba0:	4b69      	ldr	r3, [pc, #420]	@ (8002d48 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002ba2:	edd3 4a00 	vldr	s9, [r3]
 8002ba6:	eeb0 3a64 	vmov.f32	s6, s9
 8002baa:	eef0 2a45 	vmov.f32	s5, s10
 8002bae:	eeb0 2a65 	vmov.f32	s4, s11
 8002bb2:	eef0 1a46 	vmov.f32	s3, s12
 8002bb6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bba:	eef0 0a47 	vmov.f32	s1, s14
 8002bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc2:	f7ff fb17 	bl	80021f4 <MadgwickAHRSupdateIMU>
        q.w = q0; q.x = q1; q.y = q2; q.z = q3;
 8002bc6:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a61      	ldr	r2, [pc, #388]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b61      	ldr	r3, [pc, #388]	@ (8002d54 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002bd4:	6053      	str	r3, [r2, #4]
 8002bd6:	4b60      	ldr	r3, [pc, #384]	@ (8002d58 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5d      	ldr	r2, [pc, #372]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002bdc:	6093      	str	r3, [r2, #8]
 8002bde:	4b5f      	ldr	r3, [pc, #380]	@ (8002d5c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002be4:	60d3      	str	r3, [r2, #12]
        QuaternionToEuler(q, pkt.ang);
 8002be6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002be8:	ed93 6a00 	vldr	s12, [r3]
 8002bec:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bf8:	4859      	ldr	r0, [pc, #356]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002bfa:	eeb0 0a46 	vmov.f32	s0, s12
 8002bfe:	eef0 0a66 	vmov.f32	s1, s13
 8002c02:	eeb0 1a47 	vmov.f32	s2, s14
 8002c06:	eef0 1a67 	vmov.f32	s3, s15
 8002c0a:	f7fe fe0d 	bl	8001828 <QuaternionToEuler>
        /* module of the acceleration vector (not used right now) */
        //pkt.abs_acc = sqrt(pow(pkt.acc[0],2)+pow(pkt.acc[1],2) + pow(pkt.acc[2],2));
    }

    // Send data with CDC_Transfer_FS if enabled!!!
    if(htim->Instance == TIM3)
 8002c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a53      	ldr	r2, [pc, #332]	@ (8002d64 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d173      	bne.n	8002d02 <HAL_TIM_PeriodElapsedCallback+0x1ce>
	{
    	timestamp_TIM3++;	// how many times TIM3 is called (not used yet)
 8002c1a:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a51      	ldr	r2, [pc, #324]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c22:	6013      	str	r3, [r2, #0]

    	// Send every data using just one string and one TX
		static char txBuff[256];
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c24:	4b51      	ldr	r3, [pc, #324]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
				measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c2a:	4b42      	ldr	r3, [pc, #264]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fc8a 	bl	8000548 <__aeabi_f2d>
 8002c34:	e9c7 0108 	strd	r0, r1, [r7, #32]
				measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c38:	4b3e      	ldr	r3, [pc, #248]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fc83 	bl	8000548 <__aeabi_f2d>
 8002c42:	e9c7 0106 	strd	r0, r1, [r7, #24]
				measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c46:	4b3b      	ldr	r3, [pc, #236]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c48:	691b      	ldr	r3, [r3, #16]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fc7c 	bl	8000548 <__aeabi_f2d>
 8002c50:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002c54:	4b45      	ldr	r3, [pc, #276]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002c56:	681e      	ldr	r6, [r3, #0]
				measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2]);
 8002c58:	4b36      	ldr	r3, [pc, #216]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc73 	bl	8000548 <__aeabi_f2d>
 8002c62:	e9c7 0102 	strd	r0, r1, [r7, #8]
				measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2]);
 8002c66:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c68:	699b      	ldr	r3, [r3, #24]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc6c 	bl	8000548 <__aeabi_f2d>
 8002c70:	e9c7 0100 	strd	r0, r1, [r7]
				measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2]);
 8002c74:	4b2f      	ldr	r3, [pc, #188]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c76:	69db      	ldr	r3, [r3, #28]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc65 	bl	8000548 <__aeabi_f2d>
 8002c7e:	4682      	mov	sl, r0
 8002c80:	468b      	mov	fp, r1
				measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2]);
 8002c82:	4b2c      	ldr	r3, [pc, #176]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc5e 	bl	8000548 <__aeabi_f2d>
 8002c8c:	4680      	mov	r8, r0
 8002c8e:	4689      	mov	r9, r1
				measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2]);
 8002c90:	4b28      	ldr	r3, [pc, #160]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc57 	bl	8000548 <__aeabi_f2d>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	460d      	mov	r5, r1
				measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2]);
 8002c9e:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n",
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc50 	bl	8000548 <__aeabi_f2d>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8002cb0:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8002cb4:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8002cb8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8002cbc:	ed97 7b00 	vldr	d7, [r7]
 8002cc0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002cc4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cc8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002ccc:	9606      	str	r6, [sp, #24]
 8002cce:	ed97 7b04 	vldr	d7, [r7, #16]
 8002cd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002cd6:	ed97 7b06 	vldr	d7, [r7, #24]
 8002cda:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002cde:	ed97 7b08 	vldr	d7, [r7, #32]
 8002ce2:	ed8d 7b00 	vstr	d7, [sp]
 8002ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce8:	4921      	ldr	r1, [pc, #132]	@ (8002d70 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002cea:	4822      	ldr	r0, [pc, #136]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002cec:	f00b febc 	bl	800ea68 <siprintf>
				//measureTick, pkt.abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
		CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff));
 8002cf0:	4820      	ldr	r0, [pc, #128]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002cf2:	f7fd fabd 	bl	8000270 <strlen>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	481d      	ldr	r0, [pc, #116]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002cfe:	f00a fcb3 	bl	800d668 <CDC_Transmit_FS>
	}

    if (htim->Instance == TIM4)
 8002d02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1b      	ldr	r2, [pc, #108]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10a      	bne.n	8002d24 <HAL_TIM_PeriodElapsedCallback+0x1f0>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uartBuff, strlen(uartBuff));
		//CDC_Transmit_FS((uint8_t *) uartBuff, strlen(uartBuff));*/

    	/*------- SEND NUMBER --------------------------*/
    	pkt.header = PACKET_HEADER;
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002d10:	4a1a      	ldr	r2, [pc, #104]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002d12:	601a      	str	r2, [r3, #0]
    	pkt.footer = PACKET_FOOTER;
 8002d14:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002d16:	4a1a      	ldr	r2, [pc, #104]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002d18:	62da      	str	r2, [r3, #44]	@ 0x2c
		pkt.acc[0] = 0;  //-71.954;
		pkt.acc[1] = 0;  //-152.49;
		pkt.acc[2] = 0;  //-21.6;
		*/

    	Toggle(SAMPLE_TIME_MS_TOGGLE);
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fe38 	bl	8002994 <Toggle>
    	//print_packet_hex(&pkt);		// Function to debug the sent HEX string
    	//HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&pkt, sizeof(pkt));


	}
}
 8002d24:	bf00      	nop
 8002d26:	37cc      	adds	r7, #204	@ 0xcc
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000828 	.word	0x20000828
 8002d34:	20000830 	.word	0x20000830
 8002d38:	20000728 	.word	0x20000728
 8002d3c:	20000790 	.word	0x20000790
 8002d40:	20000850 	.word	0x20000850
 8002d44:	20000844 	.word	0x20000844
 8002d48:	20000820 	.word	0x20000820
 8002d4c:	20000004 	.word	0x20000004
 8002d50:	2000000c 	.word	0x2000000c
 8002d54:	20000324 	.word	0x20000324
 8002d58:	20000328 	.word	0x20000328
 8002d5c:	2000032c 	.word	0x2000032c
 8002d60:	20000838 	.word	0x20000838
 8002d64:	40000400 	.word	0x40000400
 8002d68:	20000824 	.word	0x20000824
 8002d6c:	2000082c 	.word	0x2000082c
 8002d70:	08012584 	.word	0x08012584
 8002d74:	200009c4 	.word	0x200009c4
 8002d78:	40000800 	.word	0x40000800
 8002d7c:	aabbccdd 	.word	0xaabbccdd
 8002d80:	ee8899ff 	.word	0xee8899ff
 8002d84:	20000008 	.word	0x20000008

08002d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d90:	f001 faa8 	bl	80042e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d94:	f000 f8d8 	bl	8002f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d98:	f000 fb96 	bl	80034c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d9c:	f000 fb46 	bl	800342c <MX_DMA_Init>
  MX_SPI1_Init();
 8002da0:	f000 f93c 	bl	800301c <MX_SPI1_Init>
  MX_TIM2_Init();
 8002da4:	f000 f9a6 	bl	80030f4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002da8:	f00a fba0 	bl	800d4ec <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002dac:	f000 fa16 	bl	80031dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002db0:	f000 fb12 	bl	80033d8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002db4:	f000 fa60 	bl	8003278 <MX_TIM4_Init>
  MX_SPI2_Init();
 8002db8:	f000 f966 	bl	8003088 <MX_SPI2_Init>
  MX_TIM9_Init();
 8002dbc:	f000 faaa 	bl	8003314 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  SetPriorities();	// function to set priorities
 8002dc0:	f7ff fd88 	bl	80028d4 <SetPriorities>

  HAL_Delay(500);
 8002dc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dc8:	f001 fafe 	bl	80043c8 <HAL_Delay>

  /* ----- BMI088 and MADGWICK SETUP ------------------------------------------*/
  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8002dcc:	2310      	movs	r3, #16
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	4b46      	ldr	r3, [pc, #280]	@ (8002eec <main+0x164>)
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	4a46      	ldr	r2, [pc, #280]	@ (8002ef0 <main+0x168>)
 8002dd8:	4946      	ldr	r1, [pc, #280]	@ (8002ef4 <main+0x16c>)
 8002dda:	4847      	ldr	r0, [pc, #284]	@ (8002ef8 <main+0x170>)
 8002ddc:	f7fe f91c 	bl	8001018 <BMI088_Init>
  SetQuaternionFromEuler(&q, 0, 0, 0);				// Angles on the starting position: roll=0, pitch=0, yaw=0
 8002de0:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 8002efc <main+0x174>
 8002de4:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8002efc <main+0x174>
 8002de8:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8002efc <main+0x174>
 8002dec:	4844      	ldr	r0, [pc, #272]	@ (8002f00 <main+0x178>)
 8002dee:	f7fe fe1b 	bl	8001a28 <SetQuaternionFromEuler>
  Filter_Init(&filt, f_LP_gyr, f_LP_acc, f_HP_gyr, f_HP_acc, f_LP_angles, T_TIM2);
 8002df2:	4b44      	ldr	r3, [pc, #272]	@ (8002f04 <main+0x17c>)
 8002df4:	edd3 7a00 	vldr	s15, [r3]
 8002df8:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <main+0x180>)
 8002dfa:	ed93 7a00 	vldr	s14, [r3]
 8002dfe:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <main+0x184>)
 8002e00:	edd3 6a00 	vldr	s13, [r3]
 8002e04:	4b42      	ldr	r3, [pc, #264]	@ (8002f10 <main+0x188>)
 8002e06:	ed93 6a00 	vldr	s12, [r3]
 8002e0a:	4b42      	ldr	r3, [pc, #264]	@ (8002f14 <main+0x18c>)
 8002e0c:	edd3 5a00 	vldr	s11, [r3]
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <main+0x190>)
 8002e12:	ed93 5a00 	vldr	s10, [r3]
 8002e16:	eef0 2a45 	vmov.f32	s5, s10
 8002e1a:	eeb0 2a65 	vmov.f32	s4, s11
 8002e1e:	eef0 1a46 	vmov.f32	s3, s12
 8002e22:	eeb0 1a66 	vmov.f32	s2, s13
 8002e26:	eef0 0a47 	vmov.f32	s1, s14
 8002e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2e:	483b      	ldr	r0, [pc, #236]	@ (8002f1c <main+0x194>)
 8002e30:	f7fe fece 	bl	8001bd0 <Filter_Init>

  HAL_Delay(500);
 8002e34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e38:	f001 fac6 	bl	80043c8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim2);     // Start timer: calculation of the algorithm
 8002e3c:	4838      	ldr	r0, [pc, #224]	@ (8002f20 <main+0x198>)
 8002e3e:	f005 f94d 	bl	80080dc <HAL_TIM_Base_Start_IT>
  Init_BMI088_Bias(&imu, 1000000);	 // the second passed variable is the number of iterations to find the offset
 8002e42:	4938      	ldr	r1, [pc, #224]	@ (8002f24 <main+0x19c>)
 8002e44:	482c      	ldr	r0, [pc, #176]	@ (8002ef8 <main+0x170>)
 8002e46:	f7fe f9ff 	bl	8001248 <Init_BMI088_Bias>
  //HAL_TIM_Base_Start_IT(&htim3);   // Start timer: send data with CDC_Transmit_FS serial interface !!!!!!!! --> Not needed


  /* ----- MCP3564R SETUP ----------------------------------------------------- */
  HAL_TIM_Base_Start(&htim9);
 8002e4a:	4837      	ldr	r0, [pc, #220]	@ (8002f28 <main+0x1a0>)
 8002e4c:	f005 f8de 	bl	800800c <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_1);
 8002e50:	2100      	movs	r1, #0
 8002e52:	4835      	ldr	r0, [pc, #212]	@ (8002f28 <main+0x1a0>)
 8002e54:	f005 fa0c 	bl	8008270 <HAL_TIM_OC_Start>
  HAL_Delay(10);
 8002e58:	200a      	movs	r0, #10
 8002e5a:	f001 fab5 	bl	80043c8 <HAL_Delay>

  MCP3561_Reset(&hspi2);
 8002e5e:	4833      	ldr	r0, [pc, #204]	@ (8002f2c <main+0x1a4>)
 8002e60:	f000 fcfc 	bl	800385c <MCP3561_Reset>
  HAL_Delay(10);
 8002e64:	200a      	movs	r0, #10
 8002e66:	f001 faaf 	bl	80043c8 <HAL_Delay>
  //MCP3561_PrintRegisters(&hspi2);
  //printf("\n");

  MCP3561_Init(&hspi2);
 8002e6a:	4830      	ldr	r0, [pc, #192]	@ (8002f2c <main+0x1a4>)
 8002e6c:	f000 fc6c 	bl	8003748 <MCP3561_Init>
  HAL_Delay(10);
 8002e70:	200a      	movs	r0, #10
 8002e72:	f001 faa9 	bl	80043c8 <HAL_Delay>
  //MCP3561_PrintRegisters(&hspi2);
  //printf("\n");
  HAL_Delay(2000);
 8002e76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e7a:	f001 faa5 	bl	80043c8 <HAL_Delay>


  /* ----- START ESP32 TRANSMISSION --------------------------------------------*/
  HAL_TIM_Base_Start_IT(&htim4);     // Start the UART transmission to ESP32
 8002e7e:	482c      	ldr	r0, [pc, #176]	@ (8002f30 <main+0x1a8>)
 8002e80:	f005 f92c 	bl	80080dc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_uart_buff, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	492b      	ldr	r1, [pc, #172]	@ (8002f34 <main+0x1ac>)
 8002e88:	482b      	ldr	r0, [pc, #172]	@ (8002f38 <main+0x1b0>)
 8002e8a:	f006 f8f1 	bl	8009070 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//MCP3561_PrintRegisters(&hspi2);
	if(allDiffCh)
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <main+0x1b4>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0fb      	beq.n	8002e8e <main+0x106>
	{
		printf("%.3f\t%.3f\t%.3f\t%.3f\n", adc[0], adc[1], adc[2], adc[3]);
 8002e96:	4b2a      	ldr	r3, [pc, #168]	@ (8002f40 <main+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb54 	bl	8000548 <__aeabi_f2d>
 8002ea0:	4682      	mov	sl, r0
 8002ea2:	468b      	mov	fp, r1
 8002ea4:	4b26      	ldr	r3, [pc, #152]	@ (8002f40 <main+0x1b8>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb4d 	bl	8000548 <__aeabi_f2d>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	460d      	mov	r5, r1
 8002eb2:	4b23      	ldr	r3, [pc, #140]	@ (8002f40 <main+0x1b8>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fb46 	bl	8000548 <__aeabi_f2d>
 8002ebc:	4680      	mov	r8, r0
 8002ebe:	4689      	mov	r9, r1
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <main+0x1b8>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fb3f 	bl	8000548 <__aeabi_f2d>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ed2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002ed6:	e9cd 4500 	strd	r4, r5, [sp]
 8002eda:	4652      	mov	r2, sl
 8002edc:	465b      	mov	r3, fp
 8002ede:	4819      	ldr	r0, [pc, #100]	@ (8002f44 <main+0x1bc>)
 8002ee0:	f00b fdb0 	bl	800ea44 <iprintf>
		allDiffCh = 0;
 8002ee4:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <main+0x1b4>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
	if(allDiffCh)
 8002eea:	e7d0      	b.n	8002e8e <main+0x106>
 8002eec:	40020800 	.word	0x40020800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	20000330 	.word	0x20000330
 8002ef8:	20000728 	.word	0x20000728
 8002efc:	00000000 	.word	0x00000000
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	2000001c 	.word	0x2000001c
 8002f08:	20000020 	.word	0x20000020
 8002f0c:	20000028 	.word	0x20000028
 8002f10:	2000002c 	.word	0x2000002c
 8002f14:	20000024 	.word	0x20000024
 8002f18:	2000081c 	.word	0x2000081c
 8002f1c:	20000790 	.word	0x20000790
 8002f20:	20000560 	.word	0x20000560
 8002f24:	000f4240 	.word	0x000f4240
 8002f28:	20000638 	.word	0x20000638
 8002f2c:	20000388 	.word	0x20000388
 8002f30:	200005f0 	.word	0x200005f0
 8002f34:	20000868 	.word	0x20000868
 8002f38:	20000680 	.word	0x20000680
 8002f3c:	200008bc 	.word	0x200008bc
 8002f40:	200008ac 	.word	0x200008ac
 8002f44:	080125c0 	.word	0x080125c0

08002f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b094      	sub	sp, #80	@ 0x50
 8002f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4e:	f107 0320 	add.w	r3, r7, #32
 8002f52:	2230      	movs	r2, #48	@ 0x30
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f00b fde9 	bl	800eb2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	4b28      	ldr	r3, [pc, #160]	@ (8003014 <SystemClock_Config+0xcc>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <SystemClock_Config+0xcc>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7c:	4b25      	ldr	r3, [pc, #148]	@ (8003014 <SystemClock_Config+0xcc>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <SystemClock_Config+0xd0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a21      	ldr	r2, [pc, #132]	@ (8003018 <SystemClock_Config+0xd0>)
 8002f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <SystemClock_Config+0xd0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fb8:	2308      	movs	r3, #8
 8002fba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002fbc:	23a8      	movs	r3, #168	@ 0xa8
 8002fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002fc4:	2307      	movs	r3, #7
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc8:	f107 0320 	add.w	r3, r7, #32
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fb6d 	bl	80066ac <HAL_RCC_OscConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fd8:	f000 fb78 	bl	80036cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fdc:	230f      	movs	r3, #15
 8002fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fe8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fdce 	bl	8006b9c <HAL_RCC_ClockConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003006:	f000 fb61 	bl	80036cc <Error_Handler>
  }
}
 800300a:	bf00      	nop
 800300c:	3750      	adds	r7, #80	@ 0x50
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000

0800301c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003020:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003022:	4a18      	ldr	r2, [pc, #96]	@ (8003084 <MX_SPI1_Init+0x68>)
 8003024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003026:	4b16      	ldr	r3, [pc, #88]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003028:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800302c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003034:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800303a:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <MX_SPI1_Init+0x64>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003040:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003046:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800304c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800304e:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003050:	2210      	movs	r2, #16
 8003052:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003054:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003056:	2200      	movs	r2, #0
 8003058:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800305a:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <MX_SPI1_Init+0x64>)
 800305c:	2200      	movs	r2, #0
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003060:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003062:	2200      	movs	r2, #0
 8003064:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <MX_SPI1_Init+0x64>)
 8003068:	220a      	movs	r2, #10
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800306c:	4804      	ldr	r0, [pc, #16]	@ (8003080 <MX_SPI1_Init+0x64>)
 800306e:	f003 ffb3 	bl	8006fd8 <HAL_SPI_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003078:	f000 fb28 	bl	80036cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000330 	.word	0x20000330
 8003084:	40013000 	.word	0x40013000

08003088 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800308c:	4b17      	ldr	r3, [pc, #92]	@ (80030ec <MX_SPI2_Init+0x64>)
 800308e:	4a18      	ldr	r2, [pc, #96]	@ (80030f0 <MX_SPI2_Init+0x68>)
 8003090:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003092:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <MX_SPI2_Init+0x64>)
 8003094:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003098:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800309a:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <MX_SPI2_Init+0x64>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80030a0:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030ba:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030bc:	2218      	movs	r2, #24
 80030be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030c0:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030cc:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030d4:	220a      	movs	r2, #10
 80030d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030d8:	4804      	ldr	r0, [pc, #16]	@ (80030ec <MX_SPI2_Init+0x64>)
 80030da:	f003 ff7d 	bl	8006fd8 <HAL_SPI_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80030e4:	f000 faf2 	bl	80036cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000388 	.word	0x20000388
 80030f0:	40003800 	.word	0x40003800

080030f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003108:	463b      	mov	r3, r7
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003110:	4b2e      	ldr	r3, [pc, #184]	@ (80031cc <MX_TIM2_Init+0xd8>)
 8003112:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8003118:	4b2c      	ldr	r3, [pc, #176]	@ (80031cc <MX_TIM2_Init+0xd8>)
 800311a:	2229      	movs	r2, #41	@ 0x29
 800311c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311e:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <MX_TIM2_Init+0xd8>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8003124:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <MX_TIM2_Init+0xd8>)
 8003126:	f242 720f 	movw	r2, #9999	@ 0x270f
 800312a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312c:	4b27      	ldr	r3, [pc, #156]	@ (80031cc <MX_TIM2_Init+0xd8>)
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003132:	4b26      	ldr	r3, [pc, #152]	@ (80031cc <MX_TIM2_Init+0xd8>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003138:	4824      	ldr	r0, [pc, #144]	@ (80031cc <MX_TIM2_Init+0xd8>)
 800313a:	f004 ff17 	bl	8007f6c <HAL_TIM_Base_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003144:	f000 fac2 	bl	80036cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800314c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800314e:	f107 0308 	add.w	r3, r7, #8
 8003152:	4619      	mov	r1, r3
 8003154:	481d      	ldr	r0, [pc, #116]	@ (80031cc <MX_TIM2_Init+0xd8>)
 8003156:	f005 fa9f 	bl	8008698 <HAL_TIM_ConfigClockSource>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003160:	f000 fab4 	bl	80036cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003164:	2300      	movs	r3, #0
 8003166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003168:	2300      	movs	r3, #0
 800316a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800316c:	463b      	mov	r3, r7
 800316e:	4619      	mov	r1, r3
 8003170:	4816      	ldr	r0, [pc, #88]	@ (80031cc <MX_TIM2_Init+0xd8>)
 8003172:	f005 fe9d 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800317c:	f000 faa6 	bl	80036cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* These following 2 lines calculate the Frequency and the Period of the Timer TIM2*/
	T_TIM2 = 1.0f / (f_CK / (float)((htim2.Init.Period +1 ) * htim2.Init.Prescaler + 1));
 8003180:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80031d0 <MX_TIM2_Init+0xdc>
 8003184:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <MX_TIM2_Init+0xd8>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	4a10      	ldr	r2, [pc, #64]	@ (80031cc <MX_TIM2_Init+0xd8>)
 800318c:	6852      	ldr	r2, [r2, #4]
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	3301      	adds	r3, #1
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a8:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <MX_TIM2_Init+0xe0>)
 80031aa:	edc3 7a00 	vstr	s15, [r3]
	F_TIM2 = 1 / T_TIM2;
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <MX_TIM2_Init+0xe0>)
 80031b0:	ed93 7a00 	vldr	s14, [r3]
 80031b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031bc:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <MX_TIM2_Init+0xe4>)
 80031be:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM2_Init 2 */

}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000560 	.word	0x20000560
 80031d0:	4ca037a0 	.word	0x4ca037a0
 80031d4:	2000081c 	.word	0x2000081c
 80031d8:	20000820 	.word	0x20000820

080031dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031e2:	f107 0308 	add.w	r3, r7, #8
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f0:	463b      	mov	r3, r7
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003270 <MX_TIM3_Init+0x94>)
 80031fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003274 <MX_TIM3_Init+0x98>)
 80031fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80031fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <MX_TIM3_Init+0x94>)
 8003200:	2229      	movs	r2, #41	@ 0x29
 8003202:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003204:	4b1a      	ldr	r3, [pc, #104]	@ (8003270 <MX_TIM3_Init+0x94>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <MX_TIM3_Init+0x94>)
 800320c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003210:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003212:	4b17      	ldr	r3, [pc, #92]	@ (8003270 <MX_TIM3_Init+0x94>)
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003218:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <MX_TIM3_Init+0x94>)
 800321a:	2200      	movs	r2, #0
 800321c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800321e:	4814      	ldr	r0, [pc, #80]	@ (8003270 <MX_TIM3_Init+0x94>)
 8003220:	f004 fea4 	bl	8007f6c <HAL_TIM_Base_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800322a:	f000 fa4f 	bl	80036cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800322e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003232:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	4619      	mov	r1, r3
 800323a:	480d      	ldr	r0, [pc, #52]	@ (8003270 <MX_TIM3_Init+0x94>)
 800323c:	f005 fa2c 	bl	8008698 <HAL_TIM_ConfigClockSource>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003246:	f000 fa41 	bl	80036cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003252:	463b      	mov	r3, r7
 8003254:	4619      	mov	r1, r3
 8003256:	4806      	ldr	r0, [pc, #24]	@ (8003270 <MX_TIM3_Init+0x94>)
 8003258:	f005 fe2a 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003262:	f000 fa33 	bl	80036cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003266:	bf00      	nop
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200005a8 	.word	0x200005a8
 8003274:	40000400 	.word	0x40000400

08003278 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800327e:	f107 0308 	add.w	r3, r7, #8
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800328c:	463b      	mov	r3, r7
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003294:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <MX_TIM4_Init+0x94>)
 8003296:	4a1e      	ldr	r2, [pc, #120]	@ (8003310 <MX_TIM4_Init+0x98>)
 8003298:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 800329a:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <MX_TIM4_Init+0x94>)
 800329c:	2229      	movs	r2, #41	@ 0x29
 800329e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a0:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <MX_TIM4_Init+0x94>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80032a6:	4b19      	ldr	r3, [pc, #100]	@ (800330c <MX_TIM4_Init+0x94>)
 80032a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80032ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ae:	4b17      	ldr	r3, [pc, #92]	@ (800330c <MX_TIM4_Init+0x94>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b4:	4b15      	ldr	r3, [pc, #84]	@ (800330c <MX_TIM4_Init+0x94>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80032ba:	4814      	ldr	r0, [pc, #80]	@ (800330c <MX_TIM4_Init+0x94>)
 80032bc:	f004 fe56 	bl	8007f6c <HAL_TIM_Base_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80032c6:	f000 fa01 	bl	80036cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80032d0:	f107 0308 	add.w	r3, r7, #8
 80032d4:	4619      	mov	r1, r3
 80032d6:	480d      	ldr	r0, [pc, #52]	@ (800330c <MX_TIM4_Init+0x94>)
 80032d8:	f005 f9de 	bl	8008698 <HAL_TIM_ConfigClockSource>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80032e2:	f000 f9f3 	bl	80036cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032ee:	463b      	mov	r3, r7
 80032f0:	4619      	mov	r1, r3
 80032f2:	4806      	ldr	r0, [pc, #24]	@ (800330c <MX_TIM4_Init+0x94>)
 80032f4:	f005 fddc 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80032fe:	f000 f9e5 	bl	80036cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200005f0 	.word	0x200005f0
 8003310:	40000800 	.word	0x40000800

08003314 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	@ 0x30
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800331a:	f107 0320 	add.w	r3, r7, #32
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	615a      	str	r2, [r3, #20]
 8003338:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800333a:	4b25      	ldr	r3, [pc, #148]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 800333c:	4a25      	ldr	r2, [pc, #148]	@ (80033d4 <MX_TIM9_Init+0xc0>)
 800333e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003340:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 8003342:	2200      	movs	r2, #0
 8003344:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003346:	4b22      	ldr	r3, [pc, #136]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 17-1;
 800334c:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 800334e:	2210      	movs	r2, #16
 8003350:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003352:	4b1f      	ldr	r3, [pc, #124]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003358:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 800335a:	2200      	movs	r2, #0
 800335c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800335e:	481c      	ldr	r0, [pc, #112]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 8003360:	f004 fe04 	bl	8007f6c <HAL_TIM_Base_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 800336a:	f000 f9af 	bl	80036cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800336e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003372:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003374:	f107 0320 	add.w	r3, r7, #32
 8003378:	4619      	mov	r1, r3
 800337a:	4815      	ldr	r0, [pc, #84]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 800337c:	f005 f98c 	bl	8008698 <HAL_TIM_ConfigClockSource>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8003386:	f000 f9a1 	bl	80036cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 800338a:	4811      	ldr	r0, [pc, #68]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 800338c:	f004 ff16 	bl	80081bc <HAL_TIM_OC_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8003396:	f000 f999 	bl	80036cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800339a:	2330      	movs	r3, #48	@ 0x30
 800339c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	2200      	movs	r2, #0
 80033ae:	4619      	mov	r1, r3
 80033b0:	4807      	ldr	r0, [pc, #28]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 80033b2:	f005 f915 	bl	80085e0 <HAL_TIM_OC_ConfigChannel>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 80033bc:	f000 f986 	bl	80036cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80033c0:	4803      	ldr	r0, [pc, #12]	@ (80033d0 <MX_TIM9_Init+0xbc>)
 80033c2:	f000 fd15 	bl	8003df0 <HAL_TIM_MspPostInit>

}
 80033c6:	bf00      	nop
 80033c8:	3730      	adds	r7, #48	@ 0x30
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000638 	.word	0x20000638
 80033d4:	40014000 	.word	0x40014000

080033d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033dc:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 80033de:	4a12      	ldr	r2, [pc, #72]	@ (8003428 <MX_USART1_UART_Init+0x50>)
 80033e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 80033e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 80033fe:	220c      	movs	r2, #12
 8003400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003408:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800340e:	4805      	ldr	r0, [pc, #20]	@ (8003424 <MX_USART1_UART_Init+0x4c>)
 8003410:	f005 fdde 	bl	8008fd0 <HAL_UART_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800341a:	f000 f957 	bl	80036cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000680 	.word	0x20000680
 8003428:	40011000 	.word	0x40011000

0800342c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	4b23      	ldr	r3, [pc, #140]	@ (80034c4 <MX_DMA_Init+0x98>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <MX_DMA_Init+0x98>)
 800343c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003440:	6313      	str	r3, [r2, #48]	@ 0x30
 8003442:	4b20      	ldr	r3, [pc, #128]	@ (80034c4 <MX_DMA_Init+0x98>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4b1c      	ldr	r3, [pc, #112]	@ (80034c4 <MX_DMA_Init+0x98>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <MX_DMA_Init+0x98>)
 8003458:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800345c:	6313      	str	r3, [r2, #48]	@ 0x30
 800345e:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <MX_DMA_Init+0x98>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	200e      	movs	r0, #14
 8003470:	f001 f8a9 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003474:	200e      	movs	r0, #14
 8003476:	f001 f8c2 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	2100      	movs	r1, #0
 800347e:	200f      	movs	r0, #15
 8003480:	f001 f8a1 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003484:	200f      	movs	r0, #15
 8003486:	f001 f8ba 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	2038      	movs	r0, #56	@ 0x38
 8003490:	f001 f899 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003494:	2038      	movs	r0, #56	@ 0x38
 8003496:	f001 f8b2 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	203b      	movs	r0, #59	@ 0x3b
 80034a0:	f001 f891 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80034a4:	203b      	movs	r0, #59	@ 0x3b
 80034a6:	f001 f8aa 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	2046      	movs	r0, #70	@ 0x46
 80034b0:	f001 f889 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80034b4:	2046      	movs	r0, #70	@ 0x46
 80034b6:	f001 f8a2 	bl	80045fe <HAL_NVIC_EnableIRQ>

}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800

080034c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	@ 0x28
 80034cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <MX_GPIO_Init+0x168>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <MX_GPIO_Init+0x168>)
 80034e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ee:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <MX_GPIO_Init+0x168>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003630 <MX_GPIO_Init+0x168>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a4b      	ldr	r2, [pc, #300]	@ (8003630 <MX_GPIO_Init+0x168>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b49      	ldr	r3, [pc, #292]	@ (8003630 <MX_GPIO_Init+0x168>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	4b45      	ldr	r3, [pc, #276]	@ (8003630 <MX_GPIO_Init+0x168>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4a44      	ldr	r2, [pc, #272]	@ (8003630 <MX_GPIO_Init+0x168>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6313      	str	r3, [r2, #48]	@ 0x30
 8003526:	4b42      	ldr	r3, [pc, #264]	@ (8003630 <MX_GPIO_Init+0x168>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	4b3e      	ldr	r3, [pc, #248]	@ (8003630 <MX_GPIO_Init+0x168>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	4a3d      	ldr	r2, [pc, #244]	@ (8003630 <MX_GPIO_Init+0x168>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	6313      	str	r3, [r2, #48]	@ 0x30
 8003542:	4b3b      	ldr	r3, [pc, #236]	@ (8003630 <MX_GPIO_Init+0x168>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	2110      	movs	r1, #16
 8003552:	4838      	ldr	r0, [pc, #224]	@ (8003634 <MX_GPIO_Init+0x16c>)
 8003554:	f001 fe0c 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8003558:	2200      	movs	r2, #0
 800355a:	2110      	movs	r1, #16
 800355c:	4836      	ldr	r0, [pc, #216]	@ (8003638 <MX_GPIO_Init+0x170>)
 800355e:	f001 fe07 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8003562:	2200      	movs	r2, #0
 8003564:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8003568:	4834      	ldr	r0, [pc, #208]	@ (800363c <MX_GPIO_Init+0x174>)
 800356a:	f001 fe01 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 800356e:	230c      	movs	r3, #12
 8003570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003572:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	4619      	mov	r1, r3
 8003582:	482d      	ldr	r0, [pc, #180]	@ (8003638 <MX_GPIO_Init+0x170>)
 8003584:	f001 fc58 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8003588:	2310      	movs	r3, #16
 800358a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800358c:	2301      	movs	r3, #1
 800358e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003594:	2300      	movs	r3, #0
 8003596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	4619      	mov	r1, r3
 800359e:	4825      	ldr	r0, [pc, #148]	@ (8003634 <MX_GPIO_Init+0x16c>)
 80035a0:	f001 fc4a 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 80035a4:	2310      	movs	r3, #16
 80035a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a8:	2301      	movs	r3, #1
 80035aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	4619      	mov	r1, r3
 80035ba:	481f      	ldr	r0, [pc, #124]	@ (8003638 <MX_GPIO_Init+0x170>)
 80035bc:	f001 fc3c 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP3564_IRQ_Pin */
  GPIO_InitStruct.Pin = MCP3564_IRQ_Pin;
 80035c0:	2301      	movs	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80035c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCP3564_IRQ_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4819      	ldr	r0, [pc, #100]	@ (800363c <MX_GPIO_Init+0x174>)
 80035d6:	f001 fc2f 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin PB4 */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|GPIO_PIN_4;
 80035da:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 80035de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4619      	mov	r1, r3
 80035f2:	4812      	ldr	r0, [pc, #72]	@ (800363c <MX_GPIO_Init+0x174>)
 80035f4:	f001 fc20 	bl	8004e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80035f8:	2200      	movs	r2, #0
 80035fa:	2100      	movs	r1, #0
 80035fc:	2006      	movs	r0, #6
 80035fe:	f000 ffe2 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003602:	2006      	movs	r0, #6
 8003604:	f000 fffb 	bl	80045fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2100      	movs	r1, #0
 800360c:	2008      	movs	r0, #8
 800360e:	f000 ffda 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003612:	2008      	movs	r0, #8
 8003614:	f000 fff3 	bl	80045fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2100      	movs	r1, #0
 800361c:	2009      	movs	r0, #9
 800361e:	f000 ffd2 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003622:	2009      	movs	r0, #9
 8003624:	f000 ffeb 	bl	80045fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003628:	bf00      	nop
 800362a:	3728      	adds	r7, #40	@ 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	40020000 	.word	0x40020000
 8003638:	40020800 	.word	0x40020800
 800363c:	40020400 	.word	0x40020400

08003640 <__io_putchar>:
 * to output a single character. Characters are buffered and
 * transmitted when a newline is encountered or the buffer is full.
 * @param  ch: The character to be output.
 * @retval The character output.
 */
PUTCHAR_PROTOTYPE {
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    // Optional: Add carriage return before newline if only newline is received.
    // This ensures proper line ending (\r\n) for terminals expecting it
    // when printf only outputs '\n'.
    if (ch == '\n') {
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b0a      	cmp	r3, #10
 800364c:	d116      	bne.n	800367c <__io_putchar+0x3c>
        if (s_printf_buffer_idx == 0 || s_printf_buffer[s_printf_buffer_idx - 1] != '\r') {
 800364e:	4b1d      	ldr	r3, [pc, #116]	@ (80036c4 <__io_putchar+0x84>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <__io_putchar+0x24>
 8003656:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <__io_putchar+0x84>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3b01      	subs	r3, #1
 800365c:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <__io_putchar+0x88>)
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	2b0d      	cmp	r3, #13
 8003662:	d00b      	beq.n	800367c <__io_putchar+0x3c>
            // Ensure there's space for '\r' before adding it
            if (s_printf_buffer_idx < PRINTF_BUFFER_SIZE) {
 8003664:	4b17      	ldr	r3, [pc, #92]	@ (80036c4 <__io_putchar+0x84>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2bff      	cmp	r3, #255	@ 0xff
 800366a:	dc07      	bgt.n	800367c <__io_putchar+0x3c>
                s_printf_buffer[s_printf_buffer_idx++] = '\r';
 800366c:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <__io_putchar+0x84>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	4914      	ldr	r1, [pc, #80]	@ (80036c4 <__io_putchar+0x84>)
 8003674:	600a      	str	r2, [r1, #0]
 8003676:	4a14      	ldr	r2, [pc, #80]	@ (80036c8 <__io_putchar+0x88>)
 8003678:	210d      	movs	r1, #13
 800367a:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Store the current character in the buffer
    // Ensure there's space for the character before adding it
    if (s_printf_buffer_idx < PRINTF_BUFFER_SIZE) {
 800367c:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <__io_putchar+0x84>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2bff      	cmp	r3, #255	@ 0xff
 8003682:	dc08      	bgt.n	8003696 <__io_putchar+0x56>
        s_printf_buffer[s_printf_buffer_idx++] = (char)ch;
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <__io_putchar+0x84>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	490e      	ldr	r1, [pc, #56]	@ (80036c4 <__io_putchar+0x84>)
 800368c:	600a      	str	r2, [r1, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	b2d1      	uxtb	r1, r2
 8003692:	4a0d      	ldr	r2, [pc, #52]	@ (80036c8 <__io_putchar+0x88>)
 8003694:	54d1      	strb	r1, [r2, r3]
    }

    // Check if the buffer is full or if a newline character was received.
    // If either condition is true, transmit the buffered data.
    if (s_printf_buffer_idx >= PRINTF_BUFFER_SIZE || ch == '\n') {
 8003696:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <__io_putchar+0x84>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2bff      	cmp	r3, #255	@ 0xff
 800369c:	dc02      	bgt.n	80036a4 <__io_putchar+0x64>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0a      	cmp	r3, #10
 80036a2:	d109      	bne.n	80036b8 <__io_putchar+0x78>
        // Transmit the buffered data via USB CDC
        // The CDC_Transmit_FS function will handle the actual USB transfer.
        CDC_Transmit_FS((uint8_t*)s_printf_buffer, s_printf_buffer_idx);
 80036a4:	4b07      	ldr	r3, [pc, #28]	@ (80036c4 <__io_putchar+0x84>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	4806      	ldr	r0, [pc, #24]	@ (80036c8 <__io_putchar+0x88>)
 80036ae:	f009 ffdb 	bl	800d668 <CDC_Transmit_FS>

        // Reset the buffer index after transmission
        s_printf_buffer_idx = 0;
 80036b2:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <__io_putchar+0x84>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
    }

    return ch; // Return the character that was put
 80036b8:	687b      	ldr	r3, [r7, #4]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200009c0 	.word	0x200009c0
 80036c8:	200008c0 	.word	0x200008c0

080036cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b0a0      	sub	sp, #128	@ 0x80
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	char txBuff[128];
	sprintf(txBuff, "SPI Error!");
 80036d2:	463b      	mov	r3, r7
 80036d4:	490b      	ldr	r1, [pc, #44]	@ (8003704 <Error_Handler+0x38>)
 80036d6:	4618      	mov	r0, r3
 80036d8:	f00b f9c6 	bl	800ea68 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 80036dc:	bf00      	nop
 80036de:	463b      	mov	r3, r7
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc fdc5 	bl	8000270 <strlen>
 80036e6:	4603      	mov	r3, r0
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	463b      	mov	r3, r7
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f009 ffba 	bl	800d668 <CDC_Transmit_FS>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d0f1      	beq.n	80036de <Error_Handler+0x12>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036fa:	b672      	cpsid	i
}
 80036fc:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036fe:	bf00      	nop
 8003700:	e7fd      	b.n	80036fe <Error_Handler+0x32>
 8003702:	bf00      	nop
 8003704:	080125d8 	.word	0x080125d8

08003708 <_MCP3561_write>:
    MCP3561_SREAD_DATA_COMMAND,  // Comando di lettura
    0x00, 0x00, 0x00, 0x00, 0x00 // Padding
};
/* ----------------------------------------- */

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 8003716:	2200      	movs	r2, #0
 8003718:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800371c:	4809      	ldr	r0, [pc, #36]	@ (8003744 <_MCP3561_write+0x3c>)
 800371e:	f001 fd27 	bl	8005170 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	2303      	movs	r3, #3
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f003 fcde 	bl	80070ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 800372e:	2201      	movs	r2, #1
 8003730:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003734:	4803      	ldr	r0, [pc, #12]	@ (8003744 <_MCP3561_write+0x3c>)
 8003736:	f001 fd1b 	bl	8005170 <HAL_GPIO_WritePin>
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40020400 	.word	0x40020400

08003748 <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]

	// be careful with the bitwise or operator "|"
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 8003754:	2346      	movs	r3, #70	@ 0x46
 8003756:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG0_CLK_SEL_EXT;   // clock selection
 8003758:	2300      	movs	r3, #0
 800375a:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_ADC_MODE_CONV; // standby or converting
 800375c:	7b7b      	ldrb	r3, [r7, #13]
 800375e:	f043 0303 	orr.w	r3, r3, #3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_CS_SEL_NONE;   // input current
 8003766:	7b7b      	ldrb	r3, [r7, #13]
 8003768:	737b      	strb	r3, [r7, #13]
	cmd[1] |= (1 << 7);                      // Enable extern VREF (VREF_SEL = 1)	/* added by user*/
 800376a:	7b7b      	ldrb	r3, [r7, #13]
 800376c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003770:	b2db      	uxtb	r3, r3
 8003772:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8003774:	f107 030c 	add.w	r3, r7, #12
 8003778:	2202      	movs	r2, #2
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ffc3 	bl	8003708 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 8003782:	234a      	movs	r3, #74	@ 0x4a
 8003784:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG1_OSR_256;       // over sampling rate
 8003786:	230c      	movs	r3, #12
 8003788:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG1_AMCLK_DIV8;    // sampling clock prescaler
 800378a:	7b7b      	ldrb	r3, [r7, #13]
 800378c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8003790:	b2db      	uxtb	r3, r3
 8003792:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8003794:	f107 030c 	add.w	r3, r7, #12
 8003798:	2202      	movs	r2, #2
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ffb3 	bl	8003708 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 80037a2:	234e      	movs	r3, #78	@ 0x4e
 80037a4:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG2_BOOST_x1;   // Boost
 80037a6:	2380      	movs	r3, #128	@ 0x80
 80037a8:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_GAIN_x64;    // Gain
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_AZ_MUX_OFF; // offset cancellation algorithm
 80037b4:	7b7b      	ldrb	r3, [r7, #13]
 80037b6:	737b      	strb	r3, [r7, #13]
	cmd[1] += 3; // last two bytes must always be '11'
 80037b8:	7b7b      	ldrb	r3, [r7, #13]
 80037ba:	3303      	adds	r3, #3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	2202      	movs	r2, #2
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff9d 	bl	8003708 <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 80037ce:	2352      	movs	r3, #82	@ 0x52
 80037d0:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG3_CONV_MODE_CONTINUOUS; // conversion mode
 80037d2:	23c0      	movs	r3, #192	@ 0xc0
 80037d4:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_DATA_FORMAT_32BIT_CHID_SGN; 	//
 80037d6:	7b7b      	ldrb	r3, [r7, #13]
 80037d8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_CRCCOM_OFF;            // CRC
 80037e0:	7b7b      	ldrb	r3, [r7, #13]
 80037e2:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_GAINCAL_OFF;          // gain calibration
 80037e4:	7b7b      	ldrb	r3, [r7, #13]
 80037e6:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_OFFCAL_OFF;           // offset calibration
 80037e8:	7b7b      	ldrb	r3, [r7, #13]
 80037ea:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	2202      	movs	r2, #2
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff87 	bl	8003708 <_MCP3561_write>


	cmd[0]  = MCP3561_IRQ_WRITE;
 80037fa:	2356      	movs	r3, #86	@ 0x56
 80037fc:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_IRQ_MODE_IRQ_HIGH;  // IRQ default pin state
 80037fe:	2304      	movs	r3, #4
 8003800:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_FASTCMD_ON;     // fast commands
 8003802:	7b7b      	ldrb	r3, [r7, #13]
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	b2db      	uxtb	r3, r3
 800380a:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_STP_ON;         // start of conversion IRQ
 800380c:	7b7b      	ldrb	r3, [r7, #13]
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8003816:	f107 030c 	add.w	r3, r7, #12
 800381a:	2202      	movs	r2, #2
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ff72 	bl	8003708 <_MCP3561_write>

	cmd[0]  = MCP3561_MUX_WRITE;
 8003824:	235a      	movs	r3, #90	@ 0x5a
 8003826:	733b      	strb	r3, [r7, #12]
	//cmd[1]  = (MCP3561_MUX_CH0 << 4) | MCP3561_MUX_CH1;   // [7..4] VIN+ / [3..0] VIN-
	//cmd[1]  = (MCP3561_MUX_CH_AVDD << _MCP3561_MUX_VIN_P_POS) | (MCP3561_MUX_CH_AGND << _MCP3561_MUX_VIN_N_POS);
	_MCP3561_write(hspi, cmd, 2);
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	2202      	movs	r2, #2
 800382e:	4619      	mov	r1, r3
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff69 	bl	8003708 <_MCP3561_write>

	// configure SCAN mode to automatically cycle through channels
	// only available for MCP3562 and MCP356^4, and only for certain input combinations
	// @see Datasheet Table 5-14 on p. 54

	cmd[0] = MCP3561_SCAN_WRITE;
 8003836:	235e      	movs	r3, #94	@ 0x5e
 8003838:	733b      	strb	r3, [r7, #12]
	cmd[1] = MCP3561_SCAN_DLY_NONE;
 800383a:	2300      	movs	r3, #0
 800383c:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0F;  // MBS
 800383e:	230f      	movs	r3, #15
 8003840:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x00;	// LSB
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
	_MCP3561_write(hspi, cmd, 4);
 8003846:	f107 030c 	add.w	r3, r7, #12
 800384a:	2204      	movs	r2, #4
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff5a 	bl	8003708 <_MCP3561_write>

}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 8003864:	237a      	movs	r3, #122	@ 0x7a
 8003866:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 8003868:	f107 010f 	add.w	r1, r7, #15
 800386c:	230a      	movs	r3, #10
 800386e:	2201      	movs	r2, #1
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f003 fc3a 	bl	80070ea <HAL_SPI_Transmit>
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <MCP3561_StartReadADCData_DMA>:
	//printf("ch: %d\t V: %.6f V\n", channel_id, adc_volt[channel_id]);

}

void MCP3561_StartReadADCData_DMA(SPI_HandleTypeDef *hspi)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    // CS pin low
    HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8003888:	2200      	movs	r2, #0
 800388a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800388e:	4806      	ldr	r0, [pc, #24]	@ (80038a8 <MCP3561_StartReadADCData_DMA+0x28>)
 8003890:	f001 fc6e 	bl	8005170 <HAL_GPIO_WritePin>
    // Start transmission
    HAL_SPI_TransmitReceive_DMA(hspi, mcp356x_tx_buf, mcp356x_rx_buf, MCP3561_DMA_RX_SIZE);
 8003894:	2306      	movs	r3, #6
 8003896:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <MCP3561_StartReadADCData_DMA+0x2c>)
 8003898:	4905      	ldr	r1, [pc, #20]	@ (80038b0 <MCP3561_StartReadADCData_DMA+0x30>)
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f003 ff12 	bl	80076c4 <HAL_SPI_TransmitReceive_DMA>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40020400 	.word	0x40020400
 80038ac:	20000ac4 	.word	0x20000ac4
 80038b0:	0801262c 	.word	0x0801262c

080038b4 <MCP3561_ReadADCData_DMA>:
/**
 * @brief read 24 Bit left justified ADC register
 * @todo  how to read from other data formats?
 */
uint8_t MCP3561_ReadADCData_DMA(SPI_HandleTypeDef *hspi, float *adc_volt)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
	uint8_t *val = mcp356x_rx_buf;
 80038be:	4b33      	ldr	r3, [pc, #204]	@ (800398c <MCP3561_ReadADCData_DMA+0xd8>)
 80038c0:	60fb      	str	r3, [r7, #12]

	//printf("%02X %02X %02X %02X %02X %02X\t\t", val[0], val[1], val[2], val[3], val[4], val[5]);	// Debug received data

	// Extract 24 bit raw data values
	uint8_t channel_id = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]
	uint32_t current_adc_raw_val = 0xFFFF;
 80038c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038ca:	613b      	str	r3, [r7, #16]
	if(val[0] != 0x13)			// Delay with the transmission
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b13      	cmp	r3, #19
 80038d2:	d01e      	beq.n	8003912 <MCP3561_ReadADCData_DMA+0x5e>
	{
		if((val[2] & 0x80) != 0)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3302      	adds	r3, #2
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b25b      	sxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da16      	bge.n	800390e <MCP3561_ReadADCData_DMA+0x5a>
		{
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3303      	adds	r3, #3
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	041a      	lsls	r2, r3, #16
									((uint32_t)val[4] << 8)  |
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3304      	adds	r3, #4
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	021b      	lsls	r3, r3, #8
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 80038f0:	4313      	orrs	r3, r2
									((uint32_t)val[5]);
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	3205      	adds	r2, #5
 80038f6:	7812      	ldrb	r2, [r2, #0]
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
			// Find corresponding channel
			channel_id = (val[2] & 0x30) >> 4; // Extract the ID
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3302      	adds	r3, #2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	111b      	asrs	r3, r3, #4
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	75fb      	strb	r3, [r7, #23]
 800390c:	e026      	b.n	800395c <MCP3561_ReadADCData_DMA+0xa8>
		}
		else
		{
			return 0;
 800390e:	2300      	movs	r3, #0
 8003910:	e037      	b.n	8003982 <MCP3561_ReadADCData_DMA+0xce>
		}
	}
	else if(val[0] == 0x13)		// if it's not 0x13 it is trush data
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b13      	cmp	r3, #19
 8003918:	d11e      	bne.n	8003958 <MCP3561_ReadADCData_DMA+0xa4>
	{
		if((val[1] & 0x80) != 0)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3301      	adds	r3, #1
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b25b      	sxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	da16      	bge.n	8003954 <MCP3561_ReadADCData_DMA+0xa0>
		{
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3302      	adds	r3, #2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	041a      	lsls	r2, r3, #16
									((uint32_t)val[3] << 8)  |
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3303      	adds	r3, #3
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 8003936:	4313      	orrs	r3, r2
									((uint32_t)val[4]);
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	3204      	adds	r2, #4
 800393c:	7812      	ldrb	r2, [r2, #0]
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
			// Find corresponding channel
			channel_id = (val[1] & 0x30) >> 4; // Extract the ID
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3301      	adds	r3, #1
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	111b      	asrs	r3, r3, #4
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	75fb      	strb	r3, [r7, #23]
 8003952:	e003      	b.n	800395c <MCP3561_ReadADCData_DMA+0xa8>
		}
		else
		{
			return 0;
 8003954:	2300      	movs	r3, #0
 8003956:	e014      	b.n	8003982 <MCP3561_ReadADCData_DMA+0xce>
		}
	}
	else
	{
		return 0;
 8003958:	2300      	movs	r3, #0
 800395a:	e012      	b.n	8003982 <MCP3561_ReadADCData_DMA+0xce>
	}

	// Convert from row data to float
	adc_volt[channel_id] = convertAdcToVoltage(current_adc_raw_val);
 800395c:	6938      	ldr	r0, [r7, #16]
 800395e:	f000 f817 	bl	8003990 <convertAdcToVoltage>
 8003962:	ec51 0b10 	vmov	r0, r1, d0
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	18d4      	adds	r4, r2, r3
 800396e:	f7fd f91b 	bl	8000ba8 <__aeabi_d2f>
 8003972:	4603      	mov	r3, r0
 8003974:	6023      	str	r3, [r4, #0]

	// If it is the channel 1 it means that we did an entire conversion of every differential channel
	if(channel_id == 0)
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <MCP3561_ReadADCData_DMA+0xcc>
		return 1;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <MCP3561_ReadADCData_DMA+0xce>
	else
		return 0;
 8003980:	2300      	movs	r3, #0

	//printf("ch: %d\t V: %.6f V\n", channel_id, adc_volt[channel_id]);

}
 8003982:	4618      	mov	r0, r3
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}
 800398a:	bf00      	nop
 800398c:	20000ac4 	.word	0x20000ac4

08003990 <convertAdcToVoltage>:
}



// Function to convert a row value into float voltage
double convertAdcToVoltage(uint32_t raw_adc_value) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    int32_t signed_adc_value;

    // Convert the unsigned 24-bit value (from uint32_t) to a signed 24-bit value (in int32_t)
    // If bit 23 is set (MSB of a 24-bit number), it is negative.
    if ((raw_adc_value & 0x00800000) != 0) { 						// If bit 23 is 1, it is a negative number
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <convertAdcToVoltage+0x1c>
        signed_adc_value = (int32_t)(raw_adc_value | 0xFF000000); 	// Extend the sign for the upper bits (only for display in int32_t)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e001      	b.n	80039b0 <convertAdcToVoltage+0x20>
    } else {
        signed_adc_value = (int32_t)raw_adc_value;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	617b      	str	r3, [r7, #20]
    }

    double voltage = ((double)signed_adc_value * VREF_VOLTAGE_V) / (ADC_MAX_COUNT * ADC_GAIN);
 80039b0:	6978      	ldr	r0, [r7, #20]
 80039b2:	f7fc fdb7 	bl	8000524 <__aeabi_i2d>
 80039b6:	a30f      	add	r3, pc, #60	@ (adr r3, 80039f4 <convertAdcToVoltage+0x64>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fe1c 	bl	80005f8 <__aeabi_dmul>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <convertAdcToVoltage+0x60>)
 80039ce:	f7fc ff3d 	bl	800084c <__aeabi_ddiv>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return voltage;
 80039da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039de:	ec43 2b17 	vmov	d7, r2, r3
}
 80039e2:	eeb0 0a47 	vmov.f32	s0, s14
 80039e6:	eef0 0a67 	vmov.f32	s1, s15
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	41600000 	.word	0x41600000
 80039f4:	66666666 	.word	0x66666666
 80039f8:	400a6666 	.word	0x400a6666

080039fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <HAL_MspInit+0x4c>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003a48 <HAL_MspInit+0x4c>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <HAL_MspInit+0x4c>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_MspInit+0x4c>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	4a08      	ldr	r2, [pc, #32]	@ (8003a48 <HAL_MspInit+0x4c>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a2e:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <HAL_MspInit+0x4c>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800

08003a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	@ 0x30
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	f107 031c 	add.w	r3, r7, #28
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a98      	ldr	r2, [pc, #608]	@ (8003ccc <HAL_SPI_MspInit+0x280>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f040 8093 	bne.w	8003b96 <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	4b96      	ldr	r3, [pc, #600]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	4a95      	ldr	r2, [pc, #596]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003a7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a80:	4b93      	ldr	r3, [pc, #588]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	4b8f      	ldr	r3, [pc, #572]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	4a8e      	ldr	r2, [pc, #568]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003aa8:	23e0      	movs	r3, #224	@ 0xe0
 8003aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ab8:	2305      	movs	r3, #5
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4884      	ldr	r0, [pc, #528]	@ (8003cd4 <HAL_SPI_MspInit+0x288>)
 8003ac4:	f001 f9b8 	bl	8004e38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003ac8:	4b83      	ldr	r3, [pc, #524]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003aca:	4a84      	ldr	r2, [pc, #528]	@ (8003cdc <HAL_SPI_MspInit+0x290>)
 8003acc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003ace:	4b82      	ldr	r3, [pc, #520]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003ad0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003ad4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ad6:	4b80      	ldr	r3, [pc, #512]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003adc:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003ae4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ae8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aea:	4b7b      	ldr	r3, [pc, #492]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af0:	4b79      	ldr	r3, [pc, #484]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003af6:	4b78      	ldr	r3, [pc, #480]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003afc:	4b76      	ldr	r3, [pc, #472]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003afe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b02:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b04:	4b74      	ldr	r3, [pc, #464]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003b0a:	4873      	ldr	r0, [pc, #460]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003b0c:	f000 fd92 	bl	8004634 <HAL_DMA_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8003b16:	f7ff fdd9 	bl	80036cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003b1e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003b20:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd8 <HAL_SPI_MspInit+0x28c>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003b26:	4b6e      	ldr	r3, [pc, #440]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b28:	4a6e      	ldr	r2, [pc, #440]	@ (8003ce4 <HAL_SPI_MspInit+0x298>)
 8003b2a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b2e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003b32:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b34:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b36:	2240      	movs	r2, #64	@ 0x40
 8003b38:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b3a:	4b69      	ldr	r3, [pc, #420]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b40:	4b67      	ldr	r3, [pc, #412]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b46:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b48:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b4e:	4b64      	ldr	r3, [pc, #400]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003b54:	4b62      	ldr	r3, [pc, #392]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003b5a:	4b61      	ldr	r3, [pc, #388]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b60:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b62:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003b68:	485d      	ldr	r0, [pc, #372]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b6a:	f000 fd63 	bl	8004634 <HAL_DMA_Init>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003b74:	f7ff fdaa 	bl	80036cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a59      	ldr	r2, [pc, #356]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b7c:	649a      	str	r2, [r3, #72]	@ 0x48
 8003b7e:	4a58      	ldr	r2, [pc, #352]	@ (8003ce0 <HAL_SPI_MspInit+0x294>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003b84:	2200      	movs	r2, #0
 8003b86:	2100      	movs	r1, #0
 8003b88:	2023      	movs	r0, #35	@ 0x23
 8003b8a:	f000 fd1c 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003b8e:	2023      	movs	r0, #35	@ 0x23
 8003b90:	f000 fd35 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b94:	e096      	b.n	8003cc4 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a53      	ldr	r2, [pc, #332]	@ (8003ce8 <HAL_SPI_MspInit+0x29c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	f040 8091 	bne.w	8003cc4 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	4a49      	ldr	r2, [pc, #292]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb2:	4b47      	ldr	r3, [pc, #284]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	4b43      	ldr	r3, [pc, #268]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	4a42      	ldr	r2, [pc, #264]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bce:	4b40      	ldr	r3, [pc, #256]	@ (8003cd0 <HAL_SPI_MspInit+0x284>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003bda:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8003bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be0:	2302      	movs	r3, #2
 8003be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be8:	2303      	movs	r3, #3
 8003bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bec:	2305      	movs	r3, #5
 8003bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf0:	f107 031c 	add.w	r3, r7, #28
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	483d      	ldr	r0, [pc, #244]	@ (8003cec <HAL_SPI_MspInit+0x2a0>)
 8003bf8:	f001 f91e 	bl	8004e38 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003bfe:	4a3d      	ldr	r2, [pc, #244]	@ (8003cf4 <HAL_SPI_MspInit+0x2a8>)
 8003c00:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003c02:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c08:	4b39      	ldr	r3, [pc, #228]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c0e:	4b38      	ldr	r3, [pc, #224]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c14:	4b36      	ldr	r3, [pc, #216]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c1a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c1c:	4b34      	ldr	r3, [pc, #208]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c22:	4b33      	ldr	r3, [pc, #204]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003c28:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003c2e:	4b30      	ldr	r3, [pc, #192]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003c34:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c36:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003c3c:	482c      	ldr	r0, [pc, #176]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c3e:	f000 fcf9 	bl	8004634 <HAL_DMA_Init>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_SPI_MspInit+0x200>
      Error_Handler();
 8003c48:	f7ff fd40 	bl	80036cc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a28      	ldr	r2, [pc, #160]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c50:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003c52:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <HAL_SPI_MspInit+0x2a4>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003c58:	4b27      	ldr	r3, [pc, #156]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c5a:	4a28      	ldr	r2, [pc, #160]	@ (8003cfc <HAL_SPI_MspInit+0x2b0>)
 8003c5c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003c5e:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c64:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c66:	2240      	movs	r2, #64	@ 0x40
 8003c68:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c6a:	4b23      	ldr	r3, [pc, #140]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c70:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c76:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003c84:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003c90:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c92:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003c98:	4817      	ldr	r0, [pc, #92]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003c9a:	f000 fccb 	bl	8004634 <HAL_DMA_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_SPI_MspInit+0x25c>
      Error_Handler();
 8003ca4:	f7ff fd12 	bl	80036cc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a13      	ldr	r2, [pc, #76]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003cac:	649a      	str	r2, [r3, #72]	@ 0x48
 8003cae:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <HAL_SPI_MspInit+0x2ac>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2024      	movs	r0, #36	@ 0x24
 8003cba:	f000 fc84 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003cbe:	2024      	movs	r0, #36	@ 0x24
 8003cc0:	f000 fc9d 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 8003cc4:	bf00      	nop
 8003cc6:	3730      	adds	r7, #48	@ 0x30
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40013000 	.word	0x40013000
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40020000 	.word	0x40020000
 8003cd8:	200003e0 	.word	0x200003e0
 8003cdc:	40026410 	.word	0x40026410
 8003ce0:	20000440 	.word	0x20000440
 8003ce4:	40026458 	.word	0x40026458
 8003ce8:	40003800 	.word	0x40003800
 8003cec:	40020400 	.word	0x40020400
 8003cf0:	200004a0 	.word	0x200004a0
 8003cf4:	40026058 	.word	0x40026058
 8003cf8:	20000500 	.word	0x20000500
 8003cfc:	40026070 	.word	0x40026070

08003d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d10:	d116      	bne.n	8003d40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	4b32      	ldr	r3, [pc, #200]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	4a31      	ldr	r2, [pc, #196]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d22:	4b2f      	ldr	r3, [pc, #188]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2100      	movs	r1, #0
 8003d32:	201c      	movs	r0, #28
 8003d34:	f000 fc47 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d38:	201c      	movs	r0, #28
 8003d3a:	f000 fc60 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003d3e:	e04a      	b.n	8003dd6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a27      	ldr	r2, [pc, #156]	@ (8003de4 <HAL_TIM_Base_MspInit+0xe4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d116      	bne.n	8003d78 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	4a23      	ldr	r2, [pc, #140]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d5a:	4b21      	ldr	r3, [pc, #132]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2100      	movs	r1, #0
 8003d6a:	201d      	movs	r0, #29
 8003d6c:	f000 fc2b 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d70:	201d      	movs	r0, #29
 8003d72:	f000 fc44 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 8003d76:	e02e      	b.n	8003dd6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003de8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d116      	bne.n	8003db0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	4b16      	ldr	r3, [pc, #88]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	4a15      	ldr	r2, [pc, #84]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d92:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2100      	movs	r1, #0
 8003da2:	201e      	movs	r0, #30
 8003da4:	f000 fc0f 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003da8:	201e      	movs	r0, #30
 8003daa:	f000 fc28 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 8003dae:	e012      	b.n	8003dd6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0d      	ldr	r2, [pc, #52]	@ (8003dec <HAL_TIM_Base_MspInit+0xec>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10d      	bne.n	8003dd6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	4a07      	ldr	r2, [pc, #28]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_TIM_Base_MspInit+0xe0>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
}
 8003dd6:	bf00      	nop
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40014000 	.word	0x40014000

08003df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	f107 030c 	add.w	r3, r7, #12
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a12      	ldr	r2, [pc, #72]	@ (8003e58 <HAL_TIM_MspPostInit+0x68>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d11d      	bne.n	8003e4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	4b11      	ldr	r3, [pc, #68]	@ (8003e5c <HAL_TIM_MspPostInit+0x6c>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	4a10      	ldr	r2, [pc, #64]	@ (8003e5c <HAL_TIM_MspPostInit+0x6c>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e22:	4b0e      	ldr	r3, [pc, #56]	@ (8003e5c <HAL_TIM_MspPostInit+0x6c>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e2e:	2304      	movs	r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e32:	2302      	movs	r3, #2
 8003e34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e42:	f107 030c 	add.w	r3, r7, #12
 8003e46:	4619      	mov	r1, r3
 8003e48:	4805      	ldr	r0, [pc, #20]	@ (8003e60 <HAL_TIM_MspPostInit+0x70>)
 8003e4a:	f000 fff5 	bl	8004e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003e4e:	bf00      	nop
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40020000 	.word	0x40020000

08003e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	@ 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a34      	ldr	r2, [pc, #208]	@ (8003f54 <HAL_UART_MspInit+0xf0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d162      	bne.n	8003f4c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	4b33      	ldr	r3, [pc, #204]	@ (8003f58 <HAL_UART_MspInit+0xf4>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	4a32      	ldr	r2, [pc, #200]	@ (8003f58 <HAL_UART_MspInit+0xf4>)
 8003e90:	f043 0310 	orr.w	r3, r3, #16
 8003e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e96:	4b30      	ldr	r3, [pc, #192]	@ (8003f58 <HAL_UART_MspInit+0xf4>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f58 <HAL_UART_MspInit+0xf4>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8003f58 <HAL_UART_MspInit+0xf4>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eb2:	4b29      	ldr	r3, [pc, #164]	@ (8003f58 <HAL_UART_MspInit+0xf4>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ebe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ed0:	2307      	movs	r3, #7
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4820      	ldr	r0, [pc, #128]	@ (8003f5c <HAL_UART_MspInit+0xf8>)
 8003edc:	f000 ffac 	bl	8004e38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003ee2:	4a20      	ldr	r2, [pc, #128]	@ (8003f64 <HAL_UART_MspInit+0x100>)
 8003ee4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003ee8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003eec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003ef0:	2240      	movs	r2, #64	@ 0x40
 8003ef2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003efa:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003efc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f00:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f02:	4b17      	ldr	r3, [pc, #92]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f08:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f14:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f20:	480f      	ldr	r0, [pc, #60]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003f22:	f000 fb87 	bl	8004634 <HAL_DMA_Init>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003f2c:	f7ff fbce 	bl	80036cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0b      	ldr	r2, [pc, #44]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f36:	4a0a      	ldr	r2, [pc, #40]	@ (8003f60 <HAL_UART_MspInit+0xfc>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	2025      	movs	r0, #37	@ 0x25
 8003f42:	f000 fb40 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f46:	2025      	movs	r0, #37	@ 0x25
 8003f48:	f000 fb59 	bl	80045fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003f4c:	bf00      	nop
 8003f4e:	3728      	adds	r7, #40	@ 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40011000 	.word	0x40011000
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40020000 	.word	0x40020000
 8003f60:	200006c8 	.word	0x200006c8
 8003f64:	400264b8 	.word	0x400264b8

08003f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <NMI_Handler+0x4>

08003f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <HardFault_Handler+0x4>

08003f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <MemManage_Handler+0x4>

08003f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f84:	bf00      	nop
 8003f86:	e7fd      	b.n	8003f84 <BusFault_Handler+0x4>

08003f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <UsageFault_Handler+0x4>

08003f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fbe:	f000 f9e3 	bl	8004388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP3564_IRQ_Pin);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f001 f904 	bl	80051d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8003fd8:	2004      	movs	r0, #4
 8003fda:	f001 f8fd 	bl	80051d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8003fe6:	2008      	movs	r0, #8
 8003fe8:	f001 f8f6 	bl	80051d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003ff4:	4802      	ldr	r0, [pc, #8]	@ (8004000 <DMA1_Stream3_IRQHandler+0x10>)
 8003ff6:	f000 fcb5 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200004a0 	.word	0x200004a0

08004004 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004008:	4802      	ldr	r0, [pc, #8]	@ (8004014 <DMA1_Stream4_IRQHandler+0x10>)
 800400a:	f000 fcab 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000500 	.word	0x20000500

08004018 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800401c:	4802      	ldr	r0, [pc, #8]	@ (8004028 <TIM2_IRQHandler+0x10>)
 800401e:	f004 f9ef 	bl	8008400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000560 	.word	0x20000560

0800402c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004030:	4802      	ldr	r0, [pc, #8]	@ (800403c <TIM3_IRQHandler+0x10>)
 8004032:	f004 f9e5 	bl	8008400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200005a8 	.word	0x200005a8

08004040 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004044:	4802      	ldr	r0, [pc, #8]	@ (8004050 <TIM4_IRQHandler+0x10>)
 8004046:	f004 f9db 	bl	8008400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200005f0 	.word	0x200005f0

08004054 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004058:	4802      	ldr	r0, [pc, #8]	@ (8004064 <SPI1_IRQHandler+0x10>)
 800405a:	f003 fc2f 	bl	80078bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000330 	.word	0x20000330

08004068 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800406c:	4802      	ldr	r0, [pc, #8]	@ (8004078 <SPI2_IRQHandler+0x10>)
 800406e:	f003 fc25 	bl	80078bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000388 	.word	0x20000388

0800407c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004080:	4802      	ldr	r0, [pc, #8]	@ (800408c <USART1_IRQHandler+0x10>)
 8004082:	f005 f81b 	bl	80090bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000680 	.word	0x20000680

08004090 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004094:	4802      	ldr	r0, [pc, #8]	@ (80040a0 <DMA2_Stream0_IRQHandler+0x10>)
 8004096:	f000 fc65 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200003e0 	.word	0x200003e0

080040a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80040a8:	4802      	ldr	r0, [pc, #8]	@ (80040b4 <DMA2_Stream3_IRQHandler+0x10>)
 80040aa:	f000 fc5b 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000440 	.word	0x20000440

080040b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80040bc:	4802      	ldr	r0, [pc, #8]	@ (80040c8 <OTG_FS_IRQHandler+0x10>)
 80040be:	f001 f9e7 	bl	8005490 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20001fb4 	.word	0x20001fb4

080040cc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80040d0:	4802      	ldr	r0, [pc, #8]	@ (80040dc <DMA2_Stream7_IRQHandler+0x10>)
 80040d2:	f000 fc47 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200006c8 	.word	0x200006c8

080040e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return 1;
 80040e4:	2301      	movs	r3, #1
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <_kill>:

int _kill(int pid, int sig)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040fa:	f00a fd6b 	bl	800ebd4 <__errno>
 80040fe:	4603      	mov	r3, r0
 8004100:	2216      	movs	r2, #22
 8004102:	601a      	str	r2, [r3, #0]
  return -1;
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <_exit>:

void _exit (int status)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004118:	f04f 31ff 	mov.w	r1, #4294967295
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffe7 	bl	80040f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004122:	bf00      	nop
 8004124:	e7fd      	b.n	8004122 <_exit+0x12>

08004126 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e00a      	b.n	800414e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004138:	f3af 8000 	nop.w
 800413c:	4601      	mov	r1, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	60ba      	str	r2, [r7, #8]
 8004144:	b2ca      	uxtb	r2, r1
 8004146:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3301      	adds	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	429a      	cmp	r2, r3
 8004154:	dbf0      	blt.n	8004138 <_read+0x12>
  }

  return len;
 8004156:	687b      	ldr	r3, [r7, #4]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e009      	b.n	8004186 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	60ba      	str	r2, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fa60 	bl	8003640 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3301      	adds	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	dbf1      	blt.n	8004172 <_write+0x12>
  }
  return len;
 800418e:	687b      	ldr	r3, [r7, #4]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_close>:

int _close(int file)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041c0:	605a      	str	r2, [r3, #4]
  return 0;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <_isatty>:

int _isatty(int file)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041d8:	2301      	movs	r3, #1
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004208:	4a14      	ldr	r2, [pc, #80]	@ (800425c <_sbrk+0x5c>)
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <_sbrk+0x60>)
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004214:	4b13      	ldr	r3, [pc, #76]	@ (8004264 <_sbrk+0x64>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800421c:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <_sbrk+0x64>)
 800421e:	4a12      	ldr	r2, [pc, #72]	@ (8004268 <_sbrk+0x68>)
 8004220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004222:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <_sbrk+0x64>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	429a      	cmp	r2, r3
 800422e:	d207      	bcs.n	8004240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004230:	f00a fcd0 	bl	800ebd4 <__errno>
 8004234:	4603      	mov	r3, r0
 8004236:	220c      	movs	r2, #12
 8004238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800423a:	f04f 33ff 	mov.w	r3, #4294967295
 800423e:	e009      	b.n	8004254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004240:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <_sbrk+0x64>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004246:	4b07      	ldr	r3, [pc, #28]	@ (8004264 <_sbrk+0x64>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	4a05      	ldr	r2, [pc, #20]	@ (8004264 <_sbrk+0x64>)
 8004250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20020000 	.word	0x20020000
 8004260:	00000400 	.word	0x00000400
 8004264:	20000acc 	.word	0x20000acc
 8004268:	20002808 	.word	0x20002808

0800426c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004270:	4b06      	ldr	r3, [pc, #24]	@ (800428c <SystemInit+0x20>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	4a05      	ldr	r2, [pc, #20]	@ (800428c <SystemInit+0x20>)
 8004278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800427c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004294:	f7ff ffea 	bl	800426c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004298:	480c      	ldr	r0, [pc, #48]	@ (80042cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800429a:	490d      	ldr	r1, [pc, #52]	@ (80042d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800429e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042a0:	e002      	b.n	80042a8 <LoopCopyDataInit>

080042a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042a6:	3304      	adds	r3, #4

080042a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042ac:	d3f9      	bcc.n	80042a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ae:	4a0a      	ldr	r2, [pc, #40]	@ (80042d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042b0:	4c0a      	ldr	r4, [pc, #40]	@ (80042dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80042b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042b4:	e001      	b.n	80042ba <LoopFillZerobss>

080042b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b8:	3204      	adds	r2, #4

080042ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042bc:	d3fb      	bcc.n	80042b6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80042be:	f00a fc8f 	bl	800ebe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042c2:	f7fe fd61 	bl	8002d88 <main>
  bx  lr    
 80042c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042d0:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80042d4:	08012e30 	.word	0x08012e30
  ldr r2, =_sbss
 80042d8:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80042dc:	20002804 	.word	0x20002804

080042e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042e0:	e7fe      	b.n	80042e0 <ADC_IRQHandler>
	...

080042e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004324 <HAL_Init+0x40>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004324 <HAL_Init+0x40>)
 80042ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <HAL_Init+0x40>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004324 <HAL_Init+0x40>)
 80042fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004300:	4b08      	ldr	r3, [pc, #32]	@ (8004324 <HAL_Init+0x40>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a07      	ldr	r2, [pc, #28]	@ (8004324 <HAL_Init+0x40>)
 8004306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800430a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800430c:	2003      	movs	r0, #3
 800430e:	f000 f94f 	bl	80045b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004312:	200f      	movs	r0, #15
 8004314:	f000 f808 	bl	8004328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004318:	f7ff fb70 	bl	80039fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023c00 	.word	0x40023c00

08004328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004330:	4b12      	ldr	r3, [pc, #72]	@ (800437c <HAL_InitTick+0x54>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <HAL_InitTick+0x58>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	4619      	mov	r1, r3
 800433a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800433e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f967 	bl	800461a <HAL_SYSTICK_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e00e      	b.n	8004374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b0f      	cmp	r3, #15
 800435a:	d80a      	bhi.n	8004372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800435c:	2200      	movs	r2, #0
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	f000 f92f 	bl	80045c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004368:	4a06      	ldr	r2, [pc, #24]	@ (8004384 <HAL_InitTick+0x5c>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e000      	b.n	8004374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000030 	.word	0x20000030
 8004380:	20000038 	.word	0x20000038
 8004384:	20000034 	.word	0x20000034

08004388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <HAL_IncTick+0x20>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <HAL_IncTick+0x24>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4413      	add	r3, r2
 8004398:	4a04      	ldr	r2, [pc, #16]	@ (80043ac <HAL_IncTick+0x24>)
 800439a:	6013      	str	r3, [r2, #0]
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000038 	.word	0x20000038
 80043ac:	20000ad0 	.word	0x20000ad0

080043b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return uwTick;
 80043b4:	4b03      	ldr	r3, [pc, #12]	@ (80043c4 <HAL_GetTick+0x14>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000ad0 	.word	0x20000ad0

080043c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043d0:	f7ff ffee 	bl	80043b0 <HAL_GetTick>
 80043d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d005      	beq.n	80043ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043e2:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <HAL_Delay+0x44>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043ee:	bf00      	nop
 80043f0:	f7ff ffde 	bl	80043b0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d8f7      	bhi.n	80043f0 <HAL_Delay+0x28>
  {
  }
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000038 	.word	0x20000038

08004410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004420:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800442c:	4013      	ands	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004438:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800443c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004442:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	60d3      	str	r3, [r2, #12]
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800445c:	4b04      	ldr	r3, [pc, #16]	@ (8004470 <__NVIC_GetPriorityGrouping+0x18>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	f003 0307 	and.w	r3, r3, #7
}
 8004466:	4618      	mov	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	2b00      	cmp	r3, #0
 8004484:	db0b      	blt.n	800449e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	f003 021f 	and.w	r2, r3, #31
 800448c:	4907      	ldr	r1, [pc, #28]	@ (80044ac <__NVIC_EnableIRQ+0x38>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2001      	movs	r0, #1
 8004496:	fa00 f202 	lsl.w	r2, r0, r2
 800449a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000e100 	.word	0xe000e100

080044b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	6039      	str	r1, [r7, #0]
 80044ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	db0a      	blt.n	80044da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	490c      	ldr	r1, [pc, #48]	@ (80044fc <__NVIC_SetPriority+0x4c>)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	0112      	lsls	r2, r2, #4
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	440b      	add	r3, r1
 80044d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044d8:	e00a      	b.n	80044f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	4908      	ldr	r1, [pc, #32]	@ (8004500 <__NVIC_SetPriority+0x50>)
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	3b04      	subs	r3, #4
 80044e8:	0112      	lsls	r2, r2, #4
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	440b      	add	r3, r1
 80044ee:	761a      	strb	r2, [r3, #24]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000e100 	.word	0xe000e100
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	@ 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f1c3 0307 	rsb	r3, r3, #7
 800451e:	2b04      	cmp	r3, #4
 8004520:	bf28      	it	cs
 8004522:	2304      	movcs	r3, #4
 8004524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3304      	adds	r3, #4
 800452a:	2b06      	cmp	r3, #6
 800452c:	d902      	bls.n	8004534 <NVIC_EncodePriority+0x30>
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3b03      	subs	r3, #3
 8004532:	e000      	b.n	8004536 <NVIC_EncodePriority+0x32>
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43da      	mvns	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	401a      	ands	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800454c:	f04f 31ff 	mov.w	r1, #4294967295
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	43d9      	mvns	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800455c:	4313      	orrs	r3, r2
         );
}
 800455e:	4618      	mov	r0, r3
 8004560:	3724      	adds	r7, #36	@ 0x24
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800457c:	d301      	bcc.n	8004582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800457e:	2301      	movs	r3, #1
 8004580:	e00f      	b.n	80045a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004582:	4a0a      	ldr	r2, [pc, #40]	@ (80045ac <SysTick_Config+0x40>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458a:	210f      	movs	r1, #15
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	f7ff ff8e 	bl	80044b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <SysTick_Config+0x40>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459a:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <SysTick_Config+0x40>)
 800459c:	2207      	movs	r2, #7
 800459e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	e000e010 	.word	0xe000e010

080045b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff29 	bl	8004410 <__NVIC_SetPriorityGrouping>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045d8:	f7ff ff3e 	bl	8004458 <__NVIC_GetPriorityGrouping>
 80045dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff ff8e 	bl	8004504 <NVIC_EncodePriority>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff5d 	bl	80044b0 <__NVIC_SetPriority>
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff31 	bl	8004474 <__NVIC_EnableIRQ>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ffa2 	bl	800456c <SysTick_Config>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004640:	f7ff feb6 	bl	80043b0 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e099      	b.n	8004784 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004670:	e00f      	b.n	8004692 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004672:	f7ff fe9d 	bl	80043b0 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b05      	cmp	r3, #5
 800467e:	d908      	bls.n	8004692 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2203      	movs	r2, #3
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e078      	b.n	8004784 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e8      	bne.n	8004672 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4b38      	ldr	r3, [pc, #224]	@ (800478c <HAL_DMA_Init+0x158>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d107      	bne.n	80046fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	4313      	orrs	r3, r2
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	2b04      	cmp	r3, #4
 8004724:	d117      	bne.n	8004756 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fb01 	bl	8004d40 <DMA_CheckFifoParam>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2240      	movs	r2, #64	@ 0x40
 8004748:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004752:	2301      	movs	r3, #1
 8004754:	e016      	b.n	8004784 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fab8 	bl	8004cd4 <DMA_CalcBaseAndBitshift>
 8004764:	4603      	mov	r3, r0
 8004766:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476c:	223f      	movs	r2, #63	@ 0x3f
 800476e:	409a      	lsls	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	f010803f 	.word	0xf010803f

08004790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_DMA_Start_IT+0x26>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e040      	b.n	8004838 <HAL_DMA_Start_IT+0xa8>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d12f      	bne.n	800482a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fa4a 	bl	8004c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e8:	223f      	movs	r2, #63	@ 0x3f
 80047ea:	409a      	lsls	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0216 	orr.w	r2, r2, #22
 80047fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0208 	orr.w	r2, r2, #8
 8004816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e005      	b.n	8004836 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004832:	2302      	movs	r3, #2
 8004834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004836:	7dfb      	ldrb	r3, [r7, #23]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800484e:	f7ff fdaf 	bl	80043b0 <HAL_GetTick>
 8004852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d008      	beq.n	8004872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2280      	movs	r2, #128	@ 0x80
 8004864:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e052      	b.n	8004918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0216 	bic.w	r2, r2, #22
 8004880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <HAL_DMA_Abort+0x62>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0208 	bic.w	r2, r2, #8
 80048b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c2:	e013      	b.n	80048ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048c4:	f7ff fd74 	bl	80043b0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d90c      	bls.n	80048ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2203      	movs	r2, #3
 80048dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e015      	b.n	8004918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e4      	bne.n	80048c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fe:	223f      	movs	r2, #63	@ 0x3f
 8004900:	409a      	lsls	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d004      	beq.n	800493e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2280      	movs	r2, #128	@ 0x80
 8004938:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e00c      	b.n	8004958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2205      	movs	r2, #5
 8004942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004970:	4b8e      	ldr	r3, [pc, #568]	@ (8004bac <HAL_DMA_IRQHandler+0x248>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a8e      	ldr	r2, [pc, #568]	@ (8004bb0 <HAL_DMA_IRQHandler+0x24c>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	0a9b      	lsrs	r3, r3, #10
 800497c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498e:	2208      	movs	r2, #8
 8004990:	409a      	lsls	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01a      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d013      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0204 	bic.w	r2, r2, #4
 80049b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049bc:	2208      	movs	r2, #8
 80049be:	409a      	lsls	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c8:	f043 0201 	orr.w	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d4:	2201      	movs	r2, #1
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d012      	beq.n	8004a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	2201      	movs	r2, #1
 80049f4:	409a      	lsls	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fe:	f043 0202 	orr.w	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d012      	beq.n	8004a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	2204      	movs	r2, #4
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a34:	f043 0204 	orr.w	r2, r3, #4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a40:	2210      	movs	r2, #16
 8004a42:	409a      	lsls	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d043      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d03c      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5e:	2210      	movs	r2, #16
 8004a60:	409a      	lsls	r2, r3
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d018      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d108      	bne.n	8004a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d024      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
 8004a92:	e01f      	b.n	8004ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01b      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
 8004aa4:	e016      	b.n	8004ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d107      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0208 	bic.w	r2, r2, #8
 8004ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad8:	2220      	movs	r2, #32
 8004ada:	409a      	lsls	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 808f 	beq.w	8004c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8087 	beq.w	8004c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afa:	2220      	movs	r2, #32
 8004afc:	409a      	lsls	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d136      	bne.n	8004b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0216 	bic.w	r2, r2, #22
 8004b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <HAL_DMA_IRQHandler+0x1da>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0208 	bic.w	r2, r2, #8
 8004b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b52:	223f      	movs	r2, #63	@ 0x3f
 8004b54:	409a      	lsls	r2, r3
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d07e      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	4798      	blx	r3
        }
        return;
 8004b7a:	e079      	b.n	8004c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01d      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10d      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d031      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
 8004ba8:	e02c      	b.n	8004c04 <HAL_DMA_IRQHandler+0x2a0>
 8004baa:	bf00      	nop
 8004bac:	20000030 	.word	0x20000030
 8004bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d023      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
 8004bc4:	e01e      	b.n	8004c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10f      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0210 	bic.w	r2, r2, #16
 8004be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d032      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d022      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2205      	movs	r2, #5
 8004c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d307      	bcc.n	8004c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f2      	bne.n	8004c30 <HAL_DMA_IRQHandler+0x2cc>
 8004c4a:	e000      	b.n	8004c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4798      	blx	r3
 8004c6e:	e000      	b.n	8004c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c70:	bf00      	nop
    }
  }
}
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b40      	cmp	r3, #64	@ 0x40
 8004ca4:	d108      	bne.n	8004cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cb6:	e007      	b.n	8004cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	60da      	str	r2, [r3, #12]
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	3b10      	subs	r3, #16
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <DMA_CalcBaseAndBitshift+0x64>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cee:	4a13      	ldr	r2, [pc, #76]	@ (8004d3c <DMA_CalcBaseAndBitshift+0x68>)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d909      	bls.n	8004d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d14:	e007      	b.n	8004d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	aaaaaaab 	.word	0xaaaaaaab
 8004d3c:	0801264c 	.word	0x0801264c

08004d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11f      	bne.n	8004d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d856      	bhi.n	8004e0e <DMA_CheckFifoParam+0xce>
 8004d60:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <DMA_CheckFifoParam+0x28>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d8b 	.word	0x08004d8b
 8004d70:	08004d79 	.word	0x08004d79
 8004d74:	08004e0f 	.word	0x08004e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d046      	beq.n	8004e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d88:	e043      	b.n	8004e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d92:	d140      	bne.n	8004e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d98:	e03d      	b.n	8004e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da2:	d121      	bne.n	8004de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d837      	bhi.n	8004e1a <DMA_CheckFifoParam+0xda>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <DMA_CheckFifoParam+0x70>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dc7 	.word	0x08004dc7
 8004db8:	08004dc1 	.word	0x08004dc1
 8004dbc:	08004dd9 	.word	0x08004dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e030      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d025      	beq.n	8004e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd6:	e022      	b.n	8004e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004de0:	d11f      	bne.n	8004e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004de6:	e01c      	b.n	8004e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d903      	bls.n	8004df6 <DMA_CheckFifoParam+0xb6>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d003      	beq.n	8004dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004df4:	e018      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfa:	e015      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00e      	beq.n	8004e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0c:	e00b      	b.n	8004e26 <DMA_CheckFifoParam+0xe6>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e00a      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e12:	bf00      	nop
 8004e14:	e008      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e16:	bf00      	nop
 8004e18:	e006      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e004      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e26:	bf00      	nop
    }
  } 
  
  return status; 
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop

08004e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b089      	sub	sp, #36	@ 0x24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	e16b      	b.n	800512c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e54:	2201      	movs	r2, #1
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	f040 815a 	bne.w	8005126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d005      	beq.n	8004e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d130      	bne.n	8004eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	2203      	movs	r2, #3
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 0201 	and.w	r2, r3, #1
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d017      	beq.n	8004f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	2203      	movs	r2, #3
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d123      	bne.n	8004f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	08da      	lsrs	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3208      	adds	r2, #8
 8004f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	220f      	movs	r2, #15
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	08da      	lsrs	r2, r3, #3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3208      	adds	r2, #8
 8004f76:	69b9      	ldr	r1, [r7, #24]
 8004f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	2203      	movs	r2, #3
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 0203 	and.w	r2, r3, #3
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80b4 	beq.w	8005126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4b60      	ldr	r3, [pc, #384]	@ (8005144 <HAL_GPIO_Init+0x30c>)
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8005144 <HAL_GPIO_Init+0x30c>)
 8004fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fce:	4b5d      	ldr	r3, [pc, #372]	@ (8005144 <HAL_GPIO_Init+0x30c>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fda:	4a5b      	ldr	r2, [pc, #364]	@ (8005148 <HAL_GPIO_Init+0x310>)
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	220f      	movs	r2, #15
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a52      	ldr	r2, [pc, #328]	@ (800514c <HAL_GPIO_Init+0x314>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d02b      	beq.n	800505e <HAL_GPIO_Init+0x226>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a51      	ldr	r2, [pc, #324]	@ (8005150 <HAL_GPIO_Init+0x318>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d025      	beq.n	800505a <HAL_GPIO_Init+0x222>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a50      	ldr	r2, [pc, #320]	@ (8005154 <HAL_GPIO_Init+0x31c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01f      	beq.n	8005056 <HAL_GPIO_Init+0x21e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4f      	ldr	r2, [pc, #316]	@ (8005158 <HAL_GPIO_Init+0x320>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d019      	beq.n	8005052 <HAL_GPIO_Init+0x21a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a4e      	ldr	r2, [pc, #312]	@ (800515c <HAL_GPIO_Init+0x324>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_GPIO_Init+0x216>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a4d      	ldr	r2, [pc, #308]	@ (8005160 <HAL_GPIO_Init+0x328>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00d      	beq.n	800504a <HAL_GPIO_Init+0x212>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a4c      	ldr	r2, [pc, #304]	@ (8005164 <HAL_GPIO_Init+0x32c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <HAL_GPIO_Init+0x20e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a4b      	ldr	r2, [pc, #300]	@ (8005168 <HAL_GPIO_Init+0x330>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <HAL_GPIO_Init+0x20a>
 800503e:	2307      	movs	r3, #7
 8005040:	e00e      	b.n	8005060 <HAL_GPIO_Init+0x228>
 8005042:	2308      	movs	r3, #8
 8005044:	e00c      	b.n	8005060 <HAL_GPIO_Init+0x228>
 8005046:	2306      	movs	r3, #6
 8005048:	e00a      	b.n	8005060 <HAL_GPIO_Init+0x228>
 800504a:	2305      	movs	r3, #5
 800504c:	e008      	b.n	8005060 <HAL_GPIO_Init+0x228>
 800504e:	2304      	movs	r3, #4
 8005050:	e006      	b.n	8005060 <HAL_GPIO_Init+0x228>
 8005052:	2303      	movs	r3, #3
 8005054:	e004      	b.n	8005060 <HAL_GPIO_Init+0x228>
 8005056:	2302      	movs	r3, #2
 8005058:	e002      	b.n	8005060 <HAL_GPIO_Init+0x228>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <HAL_GPIO_Init+0x228>
 800505e:	2300      	movs	r3, #0
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	f002 0203 	and.w	r2, r2, #3
 8005066:	0092      	lsls	r2, r2, #2
 8005068:	4093      	lsls	r3, r2
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005070:	4935      	ldr	r1, [pc, #212]	@ (8005148 <HAL_GPIO_Init+0x310>)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	089b      	lsrs	r3, r3, #2
 8005076:	3302      	adds	r3, #2
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800507e:	4b3b      	ldr	r3, [pc, #236]	@ (800516c <HAL_GPIO_Init+0x334>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050a2:	4a32      	ldr	r2, [pc, #200]	@ (800516c <HAL_GPIO_Init+0x334>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050a8:	4b30      	ldr	r3, [pc, #192]	@ (800516c <HAL_GPIO_Init+0x334>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050cc:	4a27      	ldr	r2, [pc, #156]	@ (800516c <HAL_GPIO_Init+0x334>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050d2:	4b26      	ldr	r3, [pc, #152]	@ (800516c <HAL_GPIO_Init+0x334>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050f6:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <HAL_GPIO_Init+0x334>)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050fc:	4b1b      	ldr	r3, [pc, #108]	@ (800516c <HAL_GPIO_Init+0x334>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005120:	4a12      	ldr	r2, [pc, #72]	@ (800516c <HAL_GPIO_Init+0x334>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3301      	adds	r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b0f      	cmp	r3, #15
 8005130:	f67f ae90 	bls.w	8004e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	3724      	adds	r7, #36	@ 0x24
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800
 8005148:	40013800 	.word	0x40013800
 800514c:	40020000 	.word	0x40020000
 8005150:	40020400 	.word	0x40020400
 8005154:	40020800 	.word	0x40020800
 8005158:	40020c00 	.word	0x40020c00
 800515c:	40021000 	.word	0x40021000
 8005160:	40021400 	.word	0x40021400
 8005164:	40021800 	.word	0x40021800
 8005168:	40021c00 	.word	0x40021c00
 800516c:	40013c00 	.word	0x40013c00

08005170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
 800517c:	4613      	mov	r3, r2
 800517e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005180:	787b      	ldrb	r3, [r7, #1]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800518c:	e003      	b.n	8005196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800518e:	887b      	ldrh	r3, [r7, #2]
 8005190:	041a      	lsls	r2, r3, #16
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	619a      	str	r2, [r3, #24]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4013      	ands	r3, r2
 80051ba:	041a      	lsls	r2, r3, #16
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	43d9      	mvns	r1, r3
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	400b      	ands	r3, r1
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	619a      	str	r2, [r3, #24]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051e2:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051ee:	4a05      	ldr	r2, [pc, #20]	@ (8005204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fd fc36 	bl	8002a68 <HAL_GPIO_EXTI_Callback>
  }
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40013c00 	.word	0x40013c00

08005208 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af02      	add	r7, sp, #8
 800520e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e101      	b.n	800541e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f008 fb5f 	bl	800d8f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2203      	movs	r2, #3
 800523e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005248:	d102      	bne.n	8005250 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f004 ff46 	bl	800a0e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7c1a      	ldrb	r2, [r3, #16]
 8005262:	f88d 2000 	strb.w	r2, [sp]
 8005266:	3304      	adds	r3, #4
 8005268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800526a:	f004 fe25 	bl	8009eb8 <USB_CoreInit>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0ce      	b.n	800541e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f004 ff3e 	bl	800a108 <USB_SetCurrentMode>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e0bf      	b.n	800541e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
 80052a2:	e04a      	b.n	800533a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3315      	adds	r3, #21
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3314      	adds	r3, #20
 80052c8:	7bfa      	ldrb	r2, [r7, #15]
 80052ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	b298      	uxth	r0, r3
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	332e      	adds	r3, #46	@ 0x2e
 80052e0:	4602      	mov	r2, r0
 80052e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3318      	adds	r3, #24
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052f8:	7bfa      	ldrb	r2, [r7, #15]
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	331c      	adds	r3, #28
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	3320      	adds	r3, #32
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005320:	7bfa      	ldrb	r2, [r7, #15]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	3324      	adds	r3, #36	@ 0x24
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	3301      	adds	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	791b      	ldrb	r3, [r3, #4]
 800533e:	7bfa      	ldrb	r2, [r7, #15]
 8005340:	429a      	cmp	r2, r3
 8005342:	d3af      	bcc.n	80052a4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]
 8005348:	e044      	b.n	80053d4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053a2:	7bfa      	ldrb	r2, [r7, #15]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053b8:	7bfa      	ldrb	r2, [r7, #15]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	3301      	adds	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	791b      	ldrb	r3, [r3, #4]
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d3b5      	bcc.n	800534a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	7c1a      	ldrb	r2, [r3, #16]
 80053e6:	f88d 2000 	strb.w	r2, [sp]
 80053ea:	3304      	adds	r3, #4
 80053ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ee:	f004 fed7 	bl	800a1a0 <USB_DevInit>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e00c      	b.n	800541e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f005 ff21 	bl	800b25e <USB_DevDisconnect>

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_PCD_Start+0x1c>
 800543e:	2302      	movs	r3, #2
 8005440:	e022      	b.n	8005488 <HAL_PCD_Start+0x62>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800545a:	2b01      	cmp	r3, #1
 800545c:	d105      	bne.n	800546a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f004 fe28 	bl	800a0c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f005 fecf 	bl	800b21c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b08d      	sub	sp, #52	@ 0x34
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f005 ff8d 	bl	800b3c6 <USB_GetMode>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 848c 	bne.w	8005dcc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f005 fef1 	bl	800b2a0 <USB_ReadInterrupts>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8482 	beq.w	8005dca <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0a1b      	lsrs	r3, r3, #8
 80054d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f005 fede 	bl	800b2a0 <USB_ReadInterrupts>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d107      	bne.n	80054fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f002 0202 	and.w	r2, r2, #2
 80054fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f005 fecc 	bl	800b2a0 <USB_ReadInterrupts>
 8005508:	4603      	mov	r3, r0
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b10      	cmp	r3, #16
 8005510:	d161      	bne.n	80055d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0210 	bic.w	r2, r2, #16
 8005520:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f003 020f 	and.w	r2, r3, #15
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	3304      	adds	r3, #4
 8005540:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	0c5b      	lsrs	r3, r3, #17
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	2b02      	cmp	r3, #2
 800554c:	d124      	bne.n	8005598 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d035      	beq.n	80055c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005568:	b29b      	uxth	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	6a38      	ldr	r0, [r7, #32]
 800556e:	f005 fd03 	bl	800af78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800557e:	441a      	add	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005590:	441a      	add	r2, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	615a      	str	r2, [r3, #20]
 8005596:	e016      	b.n	80055c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	0c5b      	lsrs	r3, r3, #17
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	2b06      	cmp	r3, #6
 80055a2:	d110      	bne.n	80055c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055aa:	2208      	movs	r2, #8
 80055ac:	4619      	mov	r1, r3
 80055ae:	6a38      	ldr	r0, [r7, #32]
 80055b0:	f005 fce2 	bl	800af78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055c0:	441a      	add	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699a      	ldr	r2, [r3, #24]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0210 	orr.w	r2, r2, #16
 80055d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f005 fe60 	bl	800b2a0 <USB_ReadInterrupts>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80055ea:	f040 80a7 	bne.w	800573c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f005 fe65 	bl	800b2c6 <USB_ReadDevAllOutEpInterrupt>
 80055fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80055fe:	e099      	b.n	8005734 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 808e 	beq.w	8005728 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f005 fe89 	bl	800b32e <USB_ReadDevOutEPInterrupt>
 800561c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005634:	461a      	mov	r2, r3
 8005636:	2301      	movs	r3, #1
 8005638:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800563a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fea3 	bl	8006388 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00c      	beq.n	8005666 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005658:	461a      	mov	r2, r3
 800565a:	2308      	movs	r3, #8
 800565c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800565e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 ff79 	bl	8006558 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567c:	461a      	mov	r2, r3
 800567e:	2310      	movs	r3, #16
 8005680:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d030      	beq.n	80056ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005694:	2b80      	cmp	r3, #128	@ 0x80
 8005696:	d109      	bne.n	80056ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80056ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ae:	4613      	mov	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	3304      	adds	r3, #4
 80056c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	78db      	ldrb	r3, [r3, #3]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d108      	bne.n	80056dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f008 fa14 	bl	800db04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e8:	461a      	mov	r2, r3
 80056ea:	2302      	movs	r3, #2
 80056ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005704:	461a      	mov	r2, r3
 8005706:	2320      	movs	r3, #32
 8005708:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005720:	461a      	mov	r2, r3
 8005722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005726:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	3301      	adds	r3, #1
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	f47f af62 	bne.w	8005600 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4618      	mov	r0, r3
 8005742:	f005 fdad 	bl	800b2a0 <USB_ReadInterrupts>
 8005746:	4603      	mov	r3, r0
 8005748:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800574c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005750:	f040 80db 	bne.w	800590a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f005 fdce 	bl	800b2fa <USB_ReadDevAllInEpInterrupt>
 800575e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005764:	e0cd      	b.n	8005902 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80c2 	beq.w	80058f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	4611      	mov	r1, r2
 800577c:	4618      	mov	r0, r3
 800577e:	f005 fdf4 	bl	800b36a <USB_ReadDevInEPInterrupt>
 8005782:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d057      	beq.n	800583e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	2201      	movs	r2, #1
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	69f9      	ldr	r1, [r7, #28]
 80057aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057ae:	4013      	ands	r3, r2
 80057b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057be:	461a      	mov	r2, r3
 80057c0:	2301      	movs	r3, #1
 80057c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	799b      	ldrb	r3, [r3, #6]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d132      	bne.n	8005832 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	3320      	adds	r3, #32
 80057dc:	6819      	ldr	r1, [r3, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	4613      	mov	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4403      	add	r3, r0
 80057ec:	331c      	adds	r3, #28
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4419      	add	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f6:	4613      	mov	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4403      	add	r3, r0
 8005800:	3320      	adds	r3, #32
 8005802:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d113      	bne.n	8005832 <HAL_PCD_IRQHandler+0x3a2>
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3324      	adds	r3, #36	@ 0x24
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d108      	bne.n	8005832 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800582a:	461a      	mov	r2, r3
 800582c:	2101      	movs	r1, #1
 800582e:	f005 fdfb 	bl	800b428 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	b2db      	uxtb	r3, r3
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f008 f8de 	bl	800d9fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005854:	461a      	mov	r2, r3
 8005856:	2308      	movs	r3, #8
 8005858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005870:	461a      	mov	r2, r3
 8005872:	2310      	movs	r3, #16
 8005874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800588c:	461a      	mov	r2, r3
 800588e:	2340      	movs	r3, #64	@ 0x40
 8005890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d023      	beq.n	80058e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800589c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800589e:	6a38      	ldr	r0, [r7, #32]
 80058a0:	f004 fde2 	bl	800a468 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80058a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	3310      	adds	r3, #16
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	4413      	add	r3, r2
 80058b4:	3304      	adds	r3, #4
 80058b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	78db      	ldrb	r3, [r3, #3]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d108      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2200      	movs	r2, #0
 80058c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f008 f92b 	bl	800db28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058de:	461a      	mov	r2, r3
 80058e0:	2302      	movs	r3, #2
 80058e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fcbd 	bl	8006270 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	3301      	adds	r3, #1
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	2b00      	cmp	r3, #0
 8005906:	f47f af2e 	bne.w	8005766 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f005 fcc6 	bl	800b2a0 <USB_ReadInterrupts>
 8005914:	4603      	mov	r3, r0
 8005916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800591a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800591e:	d122      	bne.n	8005966 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800593a:	2b01      	cmp	r3, #1
 800593c:	d108      	bne.n	8005950 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005946:	2100      	movs	r1, #0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fea3 	bl	8006694 <HAL_PCDEx_LPM_Callback>
 800594e:	e002      	b.n	8005956 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f008 f8c9 	bl	800dae8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f005 fc98 	bl	800b2a0 <USB_ReadInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800597a:	d112      	bne.n	80059a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d102      	bne.n	8005992 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f008 f885 	bl	800da9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695a      	ldr	r2, [r3, #20]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80059a0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f005 fc7a 	bl	800b2a0 <USB_ReadInterrupts>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b6:	f040 80b7 	bne.w	8005b28 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2110      	movs	r1, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	f004 fd47 	bl	800a468 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059da:	2300      	movs	r3, #0
 80059dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059de:	e046      	b.n	8005a6e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ec:	461a      	mov	r2, r3
 80059ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a20:	461a      	mov	r2, r3
 8005a22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a26:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a66:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	791b      	ldrb	r3, [r3, #4]
 8005a72:	461a      	mov	r2, r3
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d3b2      	bcc.n	80059e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a88:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005a8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	7bdb      	ldrb	r3, [r3, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aa6:	f043 030b 	orr.w	r3, r3, #11
 8005aaa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005abc:	f043 030b 	orr.w	r3, r3, #11
 8005ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ac2:	e015      	b.n	8005af0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ad2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005ad6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005ada:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aea:	f043 030b 	orr.w	r3, r3, #11
 8005aee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005afe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b12:	461a      	mov	r2, r3
 8005b14:	f005 fc88 	bl	800b428 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f005 fbb7 	bl	800b2a0 <USB_ReadInterrupts>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b3c:	d123      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f005 fc4d 	bl	800b3e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f004 fd04 	bl	800a55a <USB_GetDevSpeed>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681c      	ldr	r4, [r3, #0]
 8005b5e:	f001 fa07 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8005b62:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f004 fa08 	bl	8009f80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f007 ff6a 	bl	800da4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f005 fb88 	bl	800b2a0 <USB_ReadInterrupts>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d10a      	bne.n	8005bb0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f007 ff47 	bl	800da2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695a      	ldr	r2, [r3, #20]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f002 0208 	and.w	r2, r2, #8
 8005bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f005 fb73 	bl	800b2a0 <USB_ReadInterrupts>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc0:	2b80      	cmp	r3, #128	@ 0x80
 8005bc2:	d123      	bne.n	8005c0c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd4:	e014      	b.n	8005c00 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d105      	bne.n	8005bfa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb0a 	bl	800620e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	791b      	ldrb	r3, [r3, #4]
 8005c04:	461a      	mov	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d3e4      	bcc.n	8005bd6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f005 fb45 	bl	800b2a0 <USB_ReadInterrupts>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c20:	d13c      	bne.n	8005c9c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c22:	2301      	movs	r3, #1
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c26:	e02b      	b.n	8005c80 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	3318      	adds	r3, #24
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d115      	bne.n	8005c7a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da12      	bge.n	8005c7a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	3317      	adds	r3, #23
 8005c64:	2201      	movs	r2, #1
 8005c66:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 faca 	bl	800620e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	791b      	ldrb	r3, [r3, #4]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d3cd      	bcc.n	8005c28 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f005 fafd 	bl	800b2a0 <USB_ReadInterrupts>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cb0:	d156      	bne.n	8005d60 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb6:	e045      	b.n	8005d44 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ccc:	4613      	mov	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d12e      	bne.n	8005d3e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ce0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	da2b      	bge.n	8005d3e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005cf2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d121      	bne.n	8005d3e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d3a:	6053      	str	r3, [r2, #4]
            break;
 8005d3c:	e008      	b.n	8005d50 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	3301      	adds	r3, #1
 8005d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	791b      	ldrb	r3, [r3, #4]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d3b3      	bcc.n	8005cb8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f005 fa9b 	bl	800b2a0 <USB_ReadInterrupts>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d74:	d10a      	bne.n	8005d8c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f007 fee8 	bl	800db4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f005 fa85 	bl	800b2a0 <USB_ReadInterrupts>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d115      	bne.n	8005dcc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f007 fed8 	bl	800db68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6859      	ldr	r1, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	e000      	b.n	8005dcc <HAL_PCD_IRQHandler+0x93c>
      return;
 8005dca:	bf00      	nop
    }
  }
}
 8005dcc:	3734      	adds	r7, #52	@ 0x34
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd90      	pop	{r4, r7, pc}

08005dd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_PCD_SetAddress+0x1a>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e012      	b.n	8005e12 <HAL_PCD_SetAddress+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f005 f9e4 	bl	800b1d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	4608      	mov	r0, r1
 8005e24:	4611      	mov	r1, r2
 8005e26:	461a      	mov	r2, r3
 8005e28:	4603      	mov	r3, r0
 8005e2a:	70fb      	strb	r3, [r7, #3]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	803b      	strh	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da0f      	bge.n	8005e60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 020f 	and.w	r2, r3, #15
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	3310      	adds	r3, #16
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	3304      	adds	r3, #4
 8005e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	705a      	strb	r2, [r3, #1]
 8005e5e:	e00f      	b.n	8005e80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	f003 020f 	and.w	r2, r3, #15
 8005e66:	4613      	mov	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	3304      	adds	r3, #4
 8005e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005e8c:	883b      	ldrh	r3, [r7, #0]
 8005e8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	78ba      	ldrb	r2, [r7, #2]
 8005e9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	785b      	ldrb	r3, [r3, #1]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005eae:	78bb      	ldrb	r3, [r7, #2]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d102      	bne.n	8005eba <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_PCD_EP_Open+0xae>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e00e      	b.n	8005ee6 <HAL_PCD_EP_Open+0xcc>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68f9      	ldr	r1, [r7, #12]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f004 fb64 	bl	800a5a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	da0f      	bge.n	8005f22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	f003 020f 	and.w	r2, r3, #15
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	3310      	adds	r3, #16
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4413      	add	r3, r2
 8005f16:	3304      	adds	r3, #4
 8005f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	705a      	strb	r2, [r3, #1]
 8005f20:	e00f      	b.n	8005f42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	f003 020f 	and.w	r2, r3, #15
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	3304      	adds	r3, #4
 8005f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_PCD_EP_Close+0x6e>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e00e      	b.n	8005f7a <HAL_PCD_EP_Close+0x8c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68f9      	ldr	r1, [r7, #12]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f004 fba2 	bl	800a6b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f92:	7afb      	ldrb	r3, [r7, #11]
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3304      	adds	r3, #4
 8005faa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fc4:	7afb      	ldrb	r3, [r7, #11]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	799b      	ldrb	r3, [r3, #6]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d102      	bne.n	8005fde <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	799b      	ldrb	r3, [r3, #6]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6979      	ldr	r1, [r7, #20]
 8005fea:	f004 fc3f 	bl	800a86c <USB_EPStartXfer>

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	f003 020f 	and.w	r2, r3, #15
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	607a      	str	r2, [r7, #4]
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	460b      	mov	r3, r1
 8006036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006038:	7afb      	ldrb	r3, [r7, #11]
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	3310      	adds	r3, #16
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	3304      	adds	r3, #4
 800604e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2200      	movs	r2, #0
 8006060:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2201      	movs	r2, #1
 8006066:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006068:	7afb      	ldrb	r3, [r7, #11]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	b2da      	uxtb	r2, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	799b      	ldrb	r3, [r3, #6]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d102      	bne.n	8006082 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	799b      	ldrb	r3, [r3, #6]
 800608a:	461a      	mov	r2, r3
 800608c:	6979      	ldr	r1, [r7, #20]
 800608e:	f004 fbed 	bl	800a86c <USB_EPStartXfer>

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	7912      	ldrb	r2, [r2, #4]
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d901      	bls.n	80060ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e04f      	b.n	800615a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da0f      	bge.n	80060e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	f003 020f 	and.w	r2, r3, #15
 80060c8:	4613      	mov	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	3310      	adds	r3, #16
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	3304      	adds	r3, #4
 80060d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	705a      	strb	r2, [r3, #1]
 80060e0:	e00d      	b.n	80060fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060e2:	78fa      	ldrb	r2, [r7, #3]
 80060e4:	4613      	mov	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4413      	add	r3, r2
 80060f4:	3304      	adds	r3, #4
 80060f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	b2da      	uxtb	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_PCD_EP_SetStall+0x82>
 800611a:	2302      	movs	r3, #2
 800611c:	e01d      	b.n	800615a <HAL_PCD_EP_SetStall+0xbe>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	4618      	mov	r0, r3
 800612e:	f004 ff7b 	bl	800b028 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	2b00      	cmp	r3, #0
 800613a:	d109      	bne.n	8006150 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7999      	ldrb	r1, [r3, #6]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800614a:	461a      	mov	r2, r3
 800614c:	f005 f96c 	bl	800b428 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	460b      	mov	r3, r1
 800616c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	7912      	ldrb	r2, [r2, #4]
 8006178:	4293      	cmp	r3, r2
 800617a:	d901      	bls.n	8006180 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e042      	b.n	8006206 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006184:	2b00      	cmp	r3, #0
 8006186:	da0f      	bge.n	80061a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	f003 020f 	and.w	r2, r3, #15
 800618e:	4613      	mov	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	3310      	adds	r3, #16
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	4413      	add	r3, r2
 800619c:	3304      	adds	r3, #4
 800619e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	705a      	strb	r2, [r3, #1]
 80061a6:	e00f      	b.n	80061c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	f003 020f 	and.w	r2, r3, #15
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	3304      	adds	r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_PCD_EP_ClrStall+0x86>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e00e      	b.n	8006206 <HAL_PCD_EP_ClrStall+0xa4>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68f9      	ldr	r1, [r7, #12]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f004 ff84 	bl	800b104 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800621a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800621e:	2b00      	cmp	r3, #0
 8006220:	da0c      	bge.n	800623c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	3310      	adds	r3, #16
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	3304      	adds	r3, #4
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e00c      	b.n	8006256 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	f003 020f 	and.w	r2, r3, #15
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	3304      	adds	r3, #4
 8006254:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68f9      	ldr	r1, [r7, #12]
 800625c:	4618      	mov	r0, r3
 800625e:	f004 fda3 	bl	800ada8 <USB_EPStopXfer>
 8006262:	4603      	mov	r3, r0
 8006264:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006266:	7afb      	ldrb	r3, [r7, #11]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	@ 0x28
 8006274:	af02      	add	r7, sp, #8
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	3310      	adds	r3, #16
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	4413      	add	r3, r2
 8006294:	3304      	adds	r3, #4
 8006296:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d901      	bls.n	80062a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e06b      	b.n	8006380 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d902      	bls.n	80062c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	3303      	adds	r3, #3
 80062c8:	089b      	lsrs	r3, r3, #2
 80062ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062cc:	e02a      	b.n	8006324 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d902      	bls.n	80062ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3303      	adds	r3, #3
 80062ee:	089b      	lsrs	r3, r3, #2
 80062f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68d9      	ldr	r1, [r3, #12]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4603      	mov	r3, r0
 8006306:	6978      	ldr	r0, [r7, #20]
 8006308:	f004 fdf8 	bl	800aefc <USB_WritePacket>

    ep->xfer_buff  += len;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	441a      	add	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	441a      	add	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	d809      	bhi.n	800634e <PCD_WriteEmptyTxFifo+0xde>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006342:	429a      	cmp	r2, r3
 8006344:	d203      	bcs.n	800634e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1bf      	bne.n	80062ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	429a      	cmp	r2, r3
 8006358:	d811      	bhi.n	800637e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	2201      	movs	r2, #1
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	43db      	mvns	r3, r3
 8006374:	6939      	ldr	r1, [r7, #16]
 8006376:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800637a:	4013      	ands	r3, r2
 800637c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	333c      	adds	r3, #60	@ 0x3c
 80063a0:	3304      	adds	r3, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	799b      	ldrb	r3, [r3, #6]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d17b      	bne.n	80064b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d015      	beq.n	80063f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	4a61      	ldr	r2, [pc, #388]	@ (8006550 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	f240 80b9 	bls.w	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80b3 	beq.w	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ea:	461a      	mov	r2, r3
 80063ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063f0:	6093      	str	r3, [r2, #8]
 80063f2:	e0a7      	b.n	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	2320      	movs	r3, #32
 800640e:	6093      	str	r3, [r2, #8]
 8006410:	e098      	b.n	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 8093 	bne.w	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	4a4b      	ldr	r2, [pc, #300]	@ (8006550 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d90f      	bls.n	8006446 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643c:	461a      	mov	r2, r3
 800643e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006442:	6093      	str	r3, [r2, #8]
 8006444:	e07e      	b.n	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4413      	add	r3, r2
 8006458:	3304      	adds	r3, #4
 800645a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	0159      	lsls	r1, r3, #5
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	440b      	add	r3, r1
 8006468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006472:	1ad2      	subs	r2, r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d114      	bne.n	80064a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006490:	461a      	mov	r2, r3
 8006492:	2101      	movs	r1, #1
 8006494:	f004 ffc8 	bl	800b428 <USB_EP0_OutStart>
 8006498:	e006      	b.n	80064a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	441a      	add	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f007 fa88 	bl	800d9c4 <HAL_PCD_DataOutStageCallback>
 80064b4:	e046      	b.n	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	4a26      	ldr	r2, [pc, #152]	@ (8006554 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d124      	bne.n	8006508 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d4:	461a      	mov	r2, r3
 80064d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064da:	6093      	str	r3, [r2, #8]
 80064dc:	e032      	b.n	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	461a      	mov	r2, r3
 80064f6:	2320      	movs	r3, #32
 80064f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f007 fa5f 	bl	800d9c4 <HAL_PCD_DataOutStageCallback>
 8006506:	e01d      	b.n	8006544 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d114      	bne.n	8006538 <PCD_EP_OutXfrComplete_int+0x1b0>
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	4613      	mov	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	440b      	add	r3, r1
 800651c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d108      	bne.n	8006538 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006530:	461a      	mov	r2, r3
 8006532:	2100      	movs	r1, #0
 8006534:	f004 ff78 	bl	800b428 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f007 fa40 	bl	800d9c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	4f54300a 	.word	0x4f54300a
 8006554:	4f54310a 	.word	0x4f54310a

08006558 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	333c      	adds	r3, #60	@ 0x3c
 8006570:	3304      	adds	r3, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a15      	ldr	r2, [pc, #84]	@ (80065e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d90e      	bls.n	80065ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a4:	461a      	mov	r2, r3
 80065a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f007 f9f7 	bl	800d9a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a0a      	ldr	r2, [pc, #40]	@ (80065e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d90c      	bls.n	80065d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	799b      	ldrb	r3, [r3, #6]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d108      	bne.n	80065d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065cc:	461a      	mov	r2, r3
 80065ce:	2101      	movs	r1, #1
 80065d0:	f004 ff2a 	bl	800b428 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	4f54300a 	.word	0x4f54300a

080065e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
 80065f0:	4613      	mov	r3, r2
 80065f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006602:	883b      	ldrh	r3, [r7, #0]
 8006604:	0419      	lsls	r1, r3, #16
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	430a      	orrs	r2, r1
 800660e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006610:	e028      	b.n	8006664 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4413      	add	r3, r2
 800661e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]
 8006624:	e00d      	b.n	8006642 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	3340      	adds	r3, #64	@ 0x40
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	0c1b      	lsrs	r3, r3, #16
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	4413      	add	r3, r2
 800663a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	3301      	adds	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
 8006642:	7bfa      	ldrb	r2, [r7, #15]
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	3b01      	subs	r3, #1
 8006648:	429a      	cmp	r2, r3
 800664a:	d3ec      	bcc.n	8006626 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800664c:	883b      	ldrh	r3, [r7, #0]
 800664e:	0418      	lsls	r0, r3, #16
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	3b01      	subs	r3, #1
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	4302      	orrs	r2, r0
 800665c:	3340      	adds	r3, #64	@ 0x40
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e267      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d075      	beq.n	80067b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066ca:	4b88      	ldr	r3, [pc, #544]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d00c      	beq.n	80066f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066d6:	4b85      	ldr	r3, [pc, #532]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d112      	bne.n	8006708 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066e2:	4b82      	ldr	r3, [pc, #520]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ee:	d10b      	bne.n	8006708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f0:	4b7e      	ldr	r3, [pc, #504]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d05b      	beq.n	80067b4 <HAL_RCC_OscConfig+0x108>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d157      	bne.n	80067b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e242      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006710:	d106      	bne.n	8006720 <HAL_RCC_OscConfig+0x74>
 8006712:	4b76      	ldr	r3, [pc, #472]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a75      	ldr	r2, [pc, #468]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e01d      	b.n	800675c <HAL_RCC_OscConfig+0xb0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006728:	d10c      	bne.n	8006744 <HAL_RCC_OscConfig+0x98>
 800672a:	4b70      	ldr	r3, [pc, #448]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a6f      	ldr	r2, [pc, #444]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	4b6d      	ldr	r3, [pc, #436]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a6c      	ldr	r2, [pc, #432]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 800673c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	e00b      	b.n	800675c <HAL_RCC_OscConfig+0xb0>
 8006744:	4b69      	ldr	r3, [pc, #420]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a68      	ldr	r2, [pc, #416]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 800674a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	4b66      	ldr	r3, [pc, #408]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a65      	ldr	r2, [pc, #404]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800675a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d013      	beq.n	800678c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006764:	f7fd fe24 	bl	80043b0 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800676c:	f7fd fe20 	bl	80043b0 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b64      	cmp	r3, #100	@ 0x64
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e207      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677e:	4b5b      	ldr	r3, [pc, #364]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f0      	beq.n	800676c <HAL_RCC_OscConfig+0xc0>
 800678a:	e014      	b.n	80067b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678c:	f7fd fe10 	bl	80043b0 <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006794:	f7fd fe0c 	bl	80043b0 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b64      	cmp	r3, #100	@ 0x64
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e1f3      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a6:	4b51      	ldr	r3, [pc, #324]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f0      	bne.n	8006794 <HAL_RCC_OscConfig+0xe8>
 80067b2:	e000      	b.n	80067b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d063      	beq.n	800688a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067c2:	4b4a      	ldr	r3, [pc, #296]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 030c 	and.w	r3, r3, #12
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ce:	4b47      	ldr	r3, [pc, #284]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d11c      	bne.n	8006814 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067da:	4b44      	ldr	r3, [pc, #272]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d116      	bne.n	8006814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067e6:	4b41      	ldr	r3, [pc, #260]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <HAL_RCC_OscConfig+0x152>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d001      	beq.n	80067fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e1c7      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067fe:	4b3b      	ldr	r3, [pc, #236]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	4937      	ldr	r1, [pc, #220]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006812:	e03a      	b.n	800688a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d020      	beq.n	800685e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800681c:	4b34      	ldr	r3, [pc, #208]	@ (80068f0 <HAL_RCC_OscConfig+0x244>)
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006822:	f7fd fdc5 	bl	80043b0 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800682a:	f7fd fdc1 	bl	80043b0 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1a8      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683c:	4b2b      	ldr	r3, [pc, #172]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006848:	4b28      	ldr	r3, [pc, #160]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	4925      	ldr	r1, [pc, #148]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006858:	4313      	orrs	r3, r2
 800685a:	600b      	str	r3, [r1, #0]
 800685c:	e015      	b.n	800688a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800685e:	4b24      	ldr	r3, [pc, #144]	@ (80068f0 <HAL_RCC_OscConfig+0x244>)
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006864:	f7fd fda4 	bl	80043b0 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800686c:	f7fd fda0 	bl	80043b0 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e187      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687e:	4b1b      	ldr	r3, [pc, #108]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f0      	bne.n	800686c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d036      	beq.n	8006904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d016      	beq.n	80068cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800689e:	4b15      	ldr	r3, [pc, #84]	@ (80068f4 <HAL_RCC_OscConfig+0x248>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a4:	f7fd fd84 	bl	80043b0 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ac:	f7fd fd80 	bl	80043b0 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e167      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068be:	4b0b      	ldr	r3, [pc, #44]	@ (80068ec <HAL_RCC_OscConfig+0x240>)
 80068c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0x200>
 80068ca:	e01b      	b.n	8006904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068cc:	4b09      	ldr	r3, [pc, #36]	@ (80068f4 <HAL_RCC_OscConfig+0x248>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068d2:	f7fd fd6d 	bl	80043b0 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d8:	e00e      	b.n	80068f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068da:	f7fd fd69 	bl	80043b0 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d907      	bls.n	80068f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e150      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
 80068ec:	40023800 	.word	0x40023800
 80068f0:	42470000 	.word	0x42470000
 80068f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f8:	4b88      	ldr	r3, [pc, #544]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80068fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1ea      	bne.n	80068da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8097 	beq.w	8006a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006916:	4b81      	ldr	r3, [pc, #516]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10f      	bne.n	8006942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	4b7d      	ldr	r3, [pc, #500]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	4a7c      	ldr	r2, [pc, #496]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 800692c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006930:	6413      	str	r3, [r2, #64]	@ 0x40
 8006932:	4b7a      	ldr	r3, [pc, #488]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800693a:	60bb      	str	r3, [r7, #8]
 800693c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800693e:	2301      	movs	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006942:	4b77      	ldr	r3, [pc, #476]	@ (8006b20 <HAL_RCC_OscConfig+0x474>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d118      	bne.n	8006980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800694e:	4b74      	ldr	r3, [pc, #464]	@ (8006b20 <HAL_RCC_OscConfig+0x474>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a73      	ldr	r2, [pc, #460]	@ (8006b20 <HAL_RCC_OscConfig+0x474>)
 8006954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800695a:	f7fd fd29 	bl	80043b0 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006962:	f7fd fd25 	bl	80043b0 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e10c      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006974:	4b6a      	ldr	r3, [pc, #424]	@ (8006b20 <HAL_RCC_OscConfig+0x474>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0f0      	beq.n	8006962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d106      	bne.n	8006996 <HAL_RCC_OscConfig+0x2ea>
 8006988:	4b64      	ldr	r3, [pc, #400]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 800698a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698c:	4a63      	ldr	r2, [pc, #396]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	6713      	str	r3, [r2, #112]	@ 0x70
 8006994:	e01c      	b.n	80069d0 <HAL_RCC_OscConfig+0x324>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b05      	cmp	r3, #5
 800699c:	d10c      	bne.n	80069b8 <HAL_RCC_OscConfig+0x30c>
 800699e:	4b5f      	ldr	r3, [pc, #380]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a2:	4a5e      	ldr	r2, [pc, #376]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069a4:	f043 0304 	orr.w	r3, r3, #4
 80069a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80069aa:	4b5c      	ldr	r3, [pc, #368]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	4a5b      	ldr	r2, [pc, #364]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069b0:	f043 0301 	orr.w	r3, r3, #1
 80069b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b6:	e00b      	b.n	80069d0 <HAL_RCC_OscConfig+0x324>
 80069b8:	4b58      	ldr	r3, [pc, #352]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069bc:	4a57      	ldr	r2, [pc, #348]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c4:	4b55      	ldr	r3, [pc, #340]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c8:	4a54      	ldr	r2, [pc, #336]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069ca:	f023 0304 	bic.w	r3, r3, #4
 80069ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d015      	beq.n	8006a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d8:	f7fd fcea 	bl	80043b0 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069de:	e00a      	b.n	80069f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e0:	f7fd fce6 	bl	80043b0 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e0cb      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f6:	4b49      	ldr	r3, [pc, #292]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 80069f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0ee      	beq.n	80069e0 <HAL_RCC_OscConfig+0x334>
 8006a02:	e014      	b.n	8006a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a04:	f7fd fcd4 	bl	80043b0 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a0a:	e00a      	b.n	8006a22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a0c:	f7fd fcd0 	bl	80043b0 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e0b5      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a22:	4b3e      	ldr	r3, [pc, #248]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1ee      	bne.n	8006a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d105      	bne.n	8006a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a34:	4b39      	ldr	r3, [pc, #228]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a38:	4a38      	ldr	r2, [pc, #224]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80a1 	beq.w	8006b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a4a:	4b34      	ldr	r3, [pc, #208]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 030c 	and.w	r3, r3, #12
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d05c      	beq.n	8006b10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d141      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a5e:	4b31      	ldr	r3, [pc, #196]	@ (8006b24 <HAL_RCC_OscConfig+0x478>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a64:	f7fd fca4 	bl	80043b0 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a6c:	f7fd fca0 	bl	80043b0 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e087      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7e:	4b27      	ldr	r3, [pc, #156]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f0      	bne.n	8006a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69da      	ldr	r2, [r3, #28]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	019b      	lsls	r3, r3, #6
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa0:	085b      	lsrs	r3, r3, #1
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	041b      	lsls	r3, r3, #16
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	491b      	ldr	r1, [pc, #108]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b24 <HAL_RCC_OscConfig+0x478>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aba:	f7fd fc79 	bl	80043b0 <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ac2:	f7fd fc75 	bl	80043b0 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e05c      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad4:	4b11      	ldr	r3, [pc, #68]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0f0      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x416>
 8006ae0:	e054      	b.n	8006b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ae2:	4b10      	ldr	r3, [pc, #64]	@ (8006b24 <HAL_RCC_OscConfig+0x478>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae8:	f7fd fc62 	bl	80043b0 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af0:	f7fd fc5e 	bl	80043b0 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e045      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b02:	4b06      	ldr	r3, [pc, #24]	@ (8006b1c <HAL_RCC_OscConfig+0x470>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f0      	bne.n	8006af0 <HAL_RCC_OscConfig+0x444>
 8006b0e:	e03d      	b.n	8006b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d107      	bne.n	8006b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e038      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	40007000 	.word	0x40007000
 8006b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b28:	4b1b      	ldr	r3, [pc, #108]	@ (8006b98 <HAL_RCC_OscConfig+0x4ec>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d028      	beq.n	8006b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d121      	bne.n	8006b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d11a      	bne.n	8006b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b58:	4013      	ands	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d111      	bne.n	8006b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	3b01      	subs	r3, #1
 8006b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d107      	bne.n	8006b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d001      	beq.n	8006b8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40023800 	.word	0x40023800

08006b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0cc      	b.n	8006d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bb0:	4b68      	ldr	r3, [pc, #416]	@ (8006d54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d90c      	bls.n	8006bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bbe:	4b65      	ldr	r3, [pc, #404]	@ (8006d54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc6:	4b63      	ldr	r3, [pc, #396]	@ (8006d54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d001      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0b8      	b.n	8006d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d020      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bf0:	4b59      	ldr	r3, [pc, #356]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4a58      	ldr	r2, [pc, #352]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006bfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c08:	4b53      	ldr	r3, [pc, #332]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	4a52      	ldr	r2, [pc, #328]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c14:	4b50      	ldr	r3, [pc, #320]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	494d      	ldr	r1, [pc, #308]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d044      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d107      	bne.n	8006c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3a:	4b47      	ldr	r3, [pc, #284]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d119      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e07f      	b.n	8006d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d003      	beq.n	8006c5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d107      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e06f      	b.n	8006d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e067      	b.n	8006d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c7a:	4b37      	ldr	r3, [pc, #220]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f023 0203 	bic.w	r2, r3, #3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	4934      	ldr	r1, [pc, #208]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c8c:	f7fd fb90 	bl	80043b0 <HAL_GetTick>
 8006c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c92:	e00a      	b.n	8006caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c94:	f7fd fb8c 	bl	80043b0 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e04f      	b.n	8006d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006caa:	4b2b      	ldr	r3, [pc, #172]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 020c 	and.w	r2, r3, #12
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d1eb      	bne.n	8006c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cbc:	4b25      	ldr	r3, [pc, #148]	@ (8006d54 <HAL_RCC_ClockConfig+0x1b8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d20c      	bcs.n	8006ce4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cca:	4b22      	ldr	r3, [pc, #136]	@ (8006d54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cd2:	4b20      	ldr	r3, [pc, #128]	@ (8006d54 <HAL_RCC_ClockConfig+0x1b8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e032      	b.n	8006d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cf0:	4b19      	ldr	r3, [pc, #100]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	4916      	ldr	r1, [pc, #88]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d0e:	4b12      	ldr	r3, [pc, #72]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	490e      	ldr	r1, [pc, #56]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d22:	f000 f821 	bl	8006d68 <HAL_RCC_GetSysClockFreq>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4b0b      	ldr	r3, [pc, #44]	@ (8006d58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	091b      	lsrs	r3, r3, #4
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	490a      	ldr	r1, [pc, #40]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006d34:	5ccb      	ldrb	r3, [r1, r3]
 8006d36:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3a:	4a09      	ldr	r2, [pc, #36]	@ (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d3e:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <HAL_RCC_ClockConfig+0x1c8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fd faf0 	bl	8004328 <HAL_InitTick>

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40023c00 	.word	0x40023c00
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	08012634 	.word	0x08012634
 8006d60:	20000030 	.word	0x20000030
 8006d64:	20000034 	.word	0x20000034

08006d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d6c:	b094      	sub	sp, #80	@ 0x50
 8006d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d80:	4b79      	ldr	r3, [pc, #484]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 030c 	and.w	r3, r3, #12
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d00d      	beq.n	8006da8 <HAL_RCC_GetSysClockFreq+0x40>
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	f200 80e1 	bhi.w	8006f54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_RCC_GetSysClockFreq+0x34>
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d003      	beq.n	8006da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d9a:	e0db      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d9c:	4b73      	ldr	r3, [pc, #460]	@ (8006f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006da0:	e0db      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006da2:	4b72      	ldr	r3, [pc, #456]	@ (8006f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006da4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006da6:	e0d8      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006da8:	4b6f      	ldr	r3, [pc, #444]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006db0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006db2:	4b6d      	ldr	r3, [pc, #436]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d063      	beq.n	8006e86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	099b      	lsrs	r3, r3, #6
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006dda:	4622      	mov	r2, r4
 8006ddc:	462b      	mov	r3, r5
 8006dde:	f04f 0000 	mov.w	r0, #0
 8006de2:	f04f 0100 	mov.w	r1, #0
 8006de6:	0159      	lsls	r1, r3, #5
 8006de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dec:	0150      	lsls	r0, r2, #5
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4621      	mov	r1, r4
 8006df4:	1a51      	subs	r1, r2, r1
 8006df6:	6139      	str	r1, [r7, #16]
 8006df8:	4629      	mov	r1, r5
 8006dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	018b      	lsls	r3, r1, #6
 8006e10:	4651      	mov	r1, sl
 8006e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e16:	4651      	mov	r1, sl
 8006e18:	018a      	lsls	r2, r1, #6
 8006e1a:	4651      	mov	r1, sl
 8006e1c:	ebb2 0801 	subs.w	r8, r2, r1
 8006e20:	4659      	mov	r1, fp
 8006e22:	eb63 0901 	sbc.w	r9, r3, r1
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e3a:	4690      	mov	r8, r2
 8006e3c:	4699      	mov	r9, r3
 8006e3e:	4623      	mov	r3, r4
 8006e40:	eb18 0303 	adds.w	r3, r8, r3
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	462b      	mov	r3, r5
 8006e48:	eb49 0303 	adc.w	r3, r9, r3
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	028b      	lsls	r3, r1, #10
 8006e5e:	4621      	mov	r1, r4
 8006e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e64:	4621      	mov	r1, r4
 8006e66:	028a      	lsls	r2, r1, #10
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e6e:	2200      	movs	r2, #0
 8006e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e78:	f7f9 fee6 	bl	8000c48 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4613      	mov	r3, r2
 8006e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e84:	e058      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e86:	4b38      	ldr	r3, [pc, #224]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	099b      	lsrs	r3, r3, #6
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	4611      	mov	r1, r2
 8006e92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e96:	623b      	str	r3, [r7, #32]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	f04f 0000 	mov.w	r0, #0
 8006ea8:	f04f 0100 	mov.w	r1, #0
 8006eac:	0159      	lsls	r1, r3, #5
 8006eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eb2:	0150      	lsls	r0, r2, #5
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4641      	mov	r1, r8
 8006eba:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	f04f 0300 	mov.w	r3, #0
 8006ecc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ed8:	ebb2 040a 	subs.w	r4, r2, sl
 8006edc:	eb63 050b 	sbc.w	r5, r3, fp
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	00eb      	lsls	r3, r5, #3
 8006eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eee:	00e2      	lsls	r2, r4, #3
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	461d      	mov	r5, r3
 8006ef4:	4643      	mov	r3, r8
 8006ef6:	18e3      	adds	r3, r4, r3
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	464b      	mov	r3, r9
 8006efc:	eb45 0303 	adc.w	r3, r5, r3
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f0e:	4629      	mov	r1, r5
 8006f10:	028b      	lsls	r3, r1, #10
 8006f12:	4621      	mov	r1, r4
 8006f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f18:	4621      	mov	r1, r4
 8006f1a:	028a      	lsls	r2, r1, #10
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f22:	2200      	movs	r2, #0
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	61fa      	str	r2, [r7, #28]
 8006f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f2c:	f7f9 fe8c 	bl	8000c48 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4613      	mov	r3, r2
 8006f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006f38:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	3301      	adds	r3, #1
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006f48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f52:	e002      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006f56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3750      	adds	r7, #80	@ 0x50
 8006f60:	46bd      	mov	sp, r7
 8006f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f66:	bf00      	nop
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	00f42400 	.word	0x00f42400

08006f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f74:	4b03      	ldr	r3, [pc, #12]	@ (8006f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000030 	.word	0x20000030

08006f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f8c:	f7ff fff0 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8006f90:	4602      	mov	r2, r0
 8006f92:	4b05      	ldr	r3, [pc, #20]	@ (8006fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	0a9b      	lsrs	r3, r3, #10
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	4903      	ldr	r1, [pc, #12]	@ (8006fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9e:	5ccb      	ldrb	r3, [r1, r3]
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	08012644 	.word	0x08012644

08006fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fb4:	f7ff ffdc 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	0b5b      	lsrs	r3, r3, #13
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	4903      	ldr	r1, [pc, #12]	@ (8006fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc6:	5ccb      	ldrb	r3, [r1, r3]
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	08012644 	.word	0x08012644

08006fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e07b      	b.n	80070e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d108      	bne.n	8007004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ffa:	d009      	beq.n	8007010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	61da      	str	r2, [r3, #28]
 8007002:	e005      	b.n	8007010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fc fd0e 	bl	8003a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007094:	ea42 0103 	orr.w	r1, r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	f003 0104 	and.w	r1, r3, #4
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	f003 0210 	and.w	r2, r3, #16
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b088      	sub	sp, #32
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	603b      	str	r3, [r7, #0]
 80070f6:	4613      	mov	r3, r2
 80070f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070fa:	f7fd f959 	bl	80043b0 <HAL_GetTick>
 80070fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d001      	beq.n	8007114 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
 8007112:	e12a      	b.n	800736a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <HAL_SPI_Transmit+0x36>
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e122      	b.n	800736a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_SPI_Transmit+0x48>
 800712e:	2302      	movs	r3, #2
 8007130:	e11b      	b.n	800736a <HAL_SPI_Transmit+0x280>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2203      	movs	r2, #3
 800713e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	88fa      	ldrh	r2, [r7, #6]
 8007152:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007180:	d10f      	bne.n	80071a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007190:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ac:	2b40      	cmp	r3, #64	@ 0x40
 80071ae:	d007      	beq.n	80071c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071c8:	d152      	bne.n	8007270 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_SPI_Transmit+0xee>
 80071d2:	8b7b      	ldrh	r3, [r7, #26]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d145      	bne.n	8007264 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071dc:	881a      	ldrh	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e8:	1c9a      	adds	r2, r3, #2
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071fc:	e032      	b.n	8007264 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b02      	cmp	r3, #2
 800720a:	d112      	bne.n	8007232 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007210:	881a      	ldrh	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721c:	1c9a      	adds	r2, r3, #2
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007230:	e018      	b.n	8007264 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007232:	f7fd f8bd 	bl	80043b0 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d803      	bhi.n	800724a <HAL_SPI_Transmit+0x160>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d102      	bne.n	8007250 <HAL_SPI_Transmit+0x166>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d109      	bne.n	8007264 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e082      	b.n	800736a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1c7      	bne.n	80071fe <HAL_SPI_Transmit+0x114>
 800726e:	e053      	b.n	8007318 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_SPI_Transmit+0x194>
 8007278:	8b7b      	ldrh	r3, [r7, #26]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d147      	bne.n	800730e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	7812      	ldrb	r2, [r2, #0]
 800728a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072a4:	e033      	b.n	800730e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d113      	bne.n	80072dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	330c      	adds	r3, #12
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072da:	e018      	b.n	800730e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072dc:	f7fd f868 	bl	80043b0 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d803      	bhi.n	80072f4 <HAL_SPI_Transmit+0x20a>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f2:	d102      	bne.n	80072fa <HAL_SPI_Transmit+0x210>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e02d      	b.n	800736a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1c6      	bne.n	80072a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fdd1 	bl	8007ec4 <SPI_EndRxTxTransaction>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2220      	movs	r2, #32
 800732c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007368:	2300      	movs	r3, #0
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b08a      	sub	sp, #40	@ 0x28
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007380:	2301      	movs	r3, #1
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007384:	f7fd f814 	bl	80043b0 <HAL_GetTick>
 8007388:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007390:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007398:	887b      	ldrh	r3, [r7, #2]
 800739a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800739c:	7ffb      	ldrb	r3, [r7, #31]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d00c      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x4a>
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073a8:	d106      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x46>
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d001      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80073b8:	2302      	movs	r3, #2
 80073ba:	e17f      	b.n	80076bc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <HAL_SPI_TransmitReceive+0x5c>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <HAL_SPI_TransmitReceive+0x5c>
 80073c8:	887b      	ldrh	r3, [r7, #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e174      	b.n	80076bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_SPI_TransmitReceive+0x6e>
 80073dc:	2302      	movs	r3, #2
 80073de:	e16d      	b.n	80076bc <HAL_SPI_TransmitReceive+0x34a>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d003      	beq.n	80073fc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2205      	movs	r2, #5
 80073f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	887a      	ldrh	r2, [r7, #2]
 800740c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	887a      	ldrh	r2, [r7, #2]
 8007412:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	887a      	ldrh	r2, [r7, #2]
 800741e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	887a      	ldrh	r2, [r7, #2]
 8007424:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	d007      	beq.n	8007450 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800744e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007458:	d17e      	bne.n	8007558 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_SPI_TransmitReceive+0xf6>
 8007462:	8afb      	ldrh	r3, [r7, #22]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d16c      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007478:	1c9a      	adds	r2, r3, #2
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748c:	e059      	b.n	8007542 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b02      	cmp	r3, #2
 800749a:	d11b      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x162>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d016      	beq.n	80074d4 <HAL_SPI_TransmitReceive+0x162>
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d113      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b0:	881a      	ldrh	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d119      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x1a4>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d014      	beq.n	8007516 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f6:	b292      	uxth	r2, r2
 80074f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fe:	1c9a      	adds	r2, r3, #2
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	b29a      	uxth	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007512:	2301      	movs	r3, #1
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007516:	f7fc ff4b 	bl	80043b0 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007522:	429a      	cmp	r2, r3
 8007524:	d80d      	bhi.n	8007542 <HAL_SPI_TransmitReceive+0x1d0>
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d009      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e0bc      	b.n	80076bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1a0      	bne.n	800748e <HAL_SPI_TransmitReceive+0x11c>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d19b      	bne.n	800748e <HAL_SPI_TransmitReceive+0x11c>
 8007556:	e082      	b.n	800765e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x1f4>
 8007560:	8afb      	ldrh	r3, [r7, #22]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d171      	bne.n	800764a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	7812      	ldrb	r2, [r2, #0]
 8007572:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800758c:	e05d      	b.n	800764a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b02      	cmp	r3, #2
 800759a:	d11c      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x264>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d017      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x264>
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d114      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d119      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x2a6>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d014      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007614:	2301      	movs	r3, #1
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007618:	f7fc feca 	bl	80043b0 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007624:	429a      	cmp	r2, r3
 8007626:	d803      	bhi.n	8007630 <HAL_SPI_TransmitReceive+0x2be>
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d102      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x2c4>
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e038      	b.n	80076bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d19c      	bne.n	800758e <HAL_SPI_TransmitReceive+0x21c>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d197      	bne.n	800758e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800765e:	6a3a      	ldr	r2, [r7, #32]
 8007660:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 fc2e 	bl	8007ec4 <SPI_EndRxTxTransaction>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e01d      	b.n	80076bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007688:	2300      	movs	r3, #0
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80076ba:	2300      	movs	r3, #0
  }
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3728      	adds	r7, #40	@ 0x28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076d8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d00c      	beq.n	8007700 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076ec:	d106      	bne.n	80076fc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <HAL_SPI_TransmitReceive_DMA+0x38>
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d001      	beq.n	8007700 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80076fc:	2302      	movs	r3, #2
 80076fe:	e0cf      	b.n	80078a0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800770c:	887b      	ldrh	r3, [r7, #2]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e0c4      	b.n	80078a0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_SPI_TransmitReceive_DMA+0x60>
 8007720:	2302      	movs	r3, #2
 8007722:	e0bd      	b.n	80078a0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b04      	cmp	r3, #4
 8007736:	d003      	beq.n	8007740 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2205      	movs	r2, #5
 800773c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	887a      	ldrh	r2, [r7, #2]
 8007750:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	887a      	ldrh	r2, [r7, #2]
 8007756:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	887a      	ldrh	r2, [r7, #2]
 8007762:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	887a      	ldrh	r2, [r7, #2]
 8007768:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b04      	cmp	r3, #4
 8007780:	d108      	bne.n	8007794 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007786:	4a48      	ldr	r2, [pc, #288]	@ (80078a8 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007788:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800778e:	4a47      	ldr	r2, [pc, #284]	@ (80078ac <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007790:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007792:	e007      	b.n	80077a4 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007798:	4a45      	ldr	r2, [pc, #276]	@ (80078b0 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800779a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077a0:	4a44      	ldr	r2, [pc, #272]	@ (80078b4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80077a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077a8:	4a43      	ldr	r2, [pc, #268]	@ (80078b8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80077aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b0:	2200      	movs	r2, #0
 80077b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	4619      	mov	r1, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80077cc:	f7fc ffe0 	bl	8004790 <HAL_DMA_Start_IT>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077da:	f043 0210 	orr.w	r2, r3, #16
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e058      	b.n	80078a0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0201 	orr.w	r2, r2, #1
 80077fc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007802:	2200      	movs	r2, #0
 8007804:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780a:	2200      	movs	r2, #0
 800780c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007812:	2200      	movs	r2, #0
 8007814:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800781a:	2200      	movs	r2, #0
 800781c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007826:	4619      	mov	r1, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	330c      	adds	r3, #12
 800782e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007834:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007836:	f7fc ffab 	bl	8004790 <HAL_DMA_Start_IT>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007844:	f043 0210 	orr.w	r2, r3, #16
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e023      	b.n	80078a0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007862:	2b40      	cmp	r3, #64	@ 0x40
 8007864:	d007      	beq.n	8007876 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007874:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f042 0220 	orr.w	r2, r2, #32
 800788c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0202 	orr.w	r2, r2, #2
 800789c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	08007c49 	.word	0x08007c49
 80078ac:	08007b11 	.word	0x08007b11
 80078b0:	08007c65 	.word	0x08007c65
 80078b4:	08007bb9 	.word	0x08007bb9
 80078b8:	08007c81 	.word	0x08007c81

080078bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10e      	bne.n	80078fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
    return;
 80078fa:	e0ce      	b.n	8007a9a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <HAL_SPI_IRQHandler+0x5e>
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
    return;
 8007918:	e0bf      	b.n	8007a9a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <HAL_SPI_IRQHandler+0x7e>
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d105      	bne.n	800793a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 80b0 	beq.w	8007a9a <HAL_SPI_IRQHandler+0x1de>
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 80aa 	beq.w	8007a9a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	d023      	beq.n	8007998 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b03      	cmp	r3, #3
 800795a:	d011      	beq.n	8007980 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007960:	f043 0204 	orr.w	r2, r3, #4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007968:	2300      	movs	r3, #0
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	e00b      	b.n	8007998 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007980:	2300      	movs	r3, #0
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	613b      	str	r3, [r7, #16]
 8007994:	693b      	ldr	r3, [r7, #16]
        return;
 8007996:	e080      	b.n	8007a9a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d014      	beq.n	80079cc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a6:	f043 0201 	orr.w	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00c      	beq.n	80079f0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079da:	f043 0208 	orr.w	r2, r3, #8
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d04f      	beq.n	8007a98 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a06:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <HAL_SPI_IRQHandler+0x168>
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d034      	beq.n	8007a8e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0203 	bic.w	r2, r2, #3
 8007a32:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d011      	beq.n	8007a60 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a40:	4a17      	ldr	r2, [pc, #92]	@ (8007aa0 <HAL_SPI_IRQHandler+0x1e4>)
 8007a42:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fc ff69 	bl	8004920 <HAL_DMA_Abort_IT>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d016      	beq.n	8007a96 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa0 <HAL_SPI_IRQHandler+0x1e4>)
 8007a6e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fc ff53 	bl	8004920 <HAL_DMA_Abort_IT>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007a8c:	e003      	b.n	8007a96 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f826 	bl	8007ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a94:	e000      	b.n	8007a98 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007a96:	bf00      	nop
    return;
 8007a98:	bf00      	nop
  }
}
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	08007cc1 	.word	0x08007cc1

08007aa4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b02:	b2db      	uxtb	r3, r3
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b1e:	f7fc fc47 	bl	80043b0 <HAL_GetTick>
 8007b22:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b32:	d03b      	beq.n	8007bac <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0220 	bic.w	r2, r2, #32
 8007b42:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10d      	bne.n	8007b68 <SPI_DMAReceiveCplt+0x58>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b54:	d108      	bne.n	8007b68 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0203 	bic.w	r2, r2, #3
 8007b64:	605a      	str	r2, [r3, #4]
 8007b66:	e007      	b.n	8007b78 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0201 	bic.w	r2, r2, #1
 8007b76:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	2164      	movs	r1, #100	@ 0x64
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f93b 	bl	8007df8 <SPI_EndRxTransaction>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7ff ff9b 	bl	8007ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007baa:	e002      	b.n	8007bb2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff ff79 	bl	8007aa4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bc6:	f7fc fbf3 	bl	80043b0 <HAL_GetTick>
 8007bca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bda:	d02f      	beq.n	8007c3c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0220 	bic.w	r2, r2, #32
 8007bea:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	2164      	movs	r1, #100	@ 0x64
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 f967 	bl	8007ec4 <SPI_EndRxTxTransaction>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c00:	f043 0220 	orr.w	r2, r3, #32
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0203 	bic.w	r2, r2, #3
 8007c16:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff ff53 	bl	8007ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007c3a:	e002      	b.n	8007c42 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7fa ff3d 	bl	8002abc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff ff2e 	bl	8007ab8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c5c:	bf00      	nop
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7ff ff2a 	bl	8007acc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0203 	bic.w	r2, r2, #3
 8007c9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca2:	f043 0210 	orr.w	r2, r3, #16
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff ff14 	bl	8007ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ccc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff ff00 	bl	8007ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cf8:	f7fc fb5a 	bl	80043b0 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4413      	add	r3, r2
 8007d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d08:	f7fc fb52 	bl	80043b0 <HAL_GetTick>
 8007d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d0e:	4b39      	ldr	r3, [pc, #228]	@ (8007df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	015b      	lsls	r3, r3, #5
 8007d14:	0d1b      	lsrs	r3, r3, #20
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d1e:	e054      	b.n	8007dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d050      	beq.n	8007dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d28:	f7fc fb42 	bl	80043b0 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d902      	bls.n	8007d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d13d      	bne.n	8007dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d56:	d111      	bne.n	8007d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d60:	d004      	beq.n	8007d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d6a:	d107      	bne.n	8007d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d84:	d10f      	bne.n	8007da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e017      	b.n	8007dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	bf0c      	ite	eq
 8007dda:	2301      	moveq	r3, #1
 8007ddc:	2300      	movne	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d19b      	bne.n	8007d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3720      	adds	r7, #32
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000030 	.word	0x20000030

08007df8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e0c:	d111      	bne.n	8007e32 <SPI_EndRxTransaction+0x3a>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e16:	d004      	beq.n	8007e22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e20:	d107      	bne.n	8007e32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e3a:	d12a      	bne.n	8007e92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e44:	d012      	beq.n	8007e6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2180      	movs	r1, #128	@ 0x80
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ff49 	bl	8007ce8 <SPI_WaitFlagStateUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d02d      	beq.n	8007eb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e60:	f043 0220 	orr.w	r2, r3, #32
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e026      	b.n	8007eba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2200      	movs	r2, #0
 8007e74:	2101      	movs	r1, #1
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff ff36 	bl	8007ce8 <SPI_WaitFlagStateUntilTimeout>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01a      	beq.n	8007eb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e86:	f043 0220 	orr.w	r2, r3, #32
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e013      	b.n	8007eba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff ff23 	bl	8007ce8 <SPI_WaitFlagStateUntilTimeout>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eac:	f043 0220 	orr.w	r2, r3, #32
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e000      	b.n	8007eba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	2102      	movs	r1, #2
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff ff04 	bl	8007ce8 <SPI_WaitFlagStateUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eea:	f043 0220 	orr.w	r2, r3, #32
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e032      	b.n	8007f5c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f64 <SPI_EndRxTxTransaction+0xa0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1b      	ldr	r2, [pc, #108]	@ (8007f68 <SPI_EndRxTxTransaction+0xa4>)
 8007efc:	fba2 2303 	umull	r2, r3, r2, r3
 8007f00:	0d5b      	lsrs	r3, r3, #21
 8007f02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f06:	fb02 f303 	mul.w	r3, r2, r3
 8007f0a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f14:	d112      	bne.n	8007f3c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2180      	movs	r1, #128	@ 0x80
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fee1 	bl	8007ce8 <SPI_WaitFlagStateUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d016      	beq.n	8007f5a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f30:	f043 0220 	orr.w	r2, r3, #32
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e00f      	b.n	8007f5c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f52:	2b80      	cmp	r3, #128	@ 0x80
 8007f54:	d0f2      	beq.n	8007f3c <SPI_EndRxTxTransaction+0x78>
 8007f56:	e000      	b.n	8007f5a <SPI_EndRxTxTransaction+0x96>
        break;
 8007f58:	bf00      	nop
  }

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000030 	.word	0x20000030
 8007f68:	165e9f81 	.word	0x165e9f81

08007f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e041      	b.n	8008002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fb feb4 	bl	8003d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f000 fc64 	bl	8008878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	d001      	beq.n	8008024 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e046      	b.n	80080b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a23      	ldr	r2, [pc, #140]	@ (80080c0 <HAL_TIM_Base_Start+0xb4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d022      	beq.n	800807c <HAL_TIM_Base_Start+0x70>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803e:	d01d      	beq.n	800807c <HAL_TIM_Base_Start+0x70>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1f      	ldr	r2, [pc, #124]	@ (80080c4 <HAL_TIM_Base_Start+0xb8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d018      	beq.n	800807c <HAL_TIM_Base_Start+0x70>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1e      	ldr	r2, [pc, #120]	@ (80080c8 <HAL_TIM_Base_Start+0xbc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d013      	beq.n	800807c <HAL_TIM_Base_Start+0x70>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1c      	ldr	r2, [pc, #112]	@ (80080cc <HAL_TIM_Base_Start+0xc0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00e      	beq.n	800807c <HAL_TIM_Base_Start+0x70>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1b      	ldr	r2, [pc, #108]	@ (80080d0 <HAL_TIM_Base_Start+0xc4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d009      	beq.n	800807c <HAL_TIM_Base_Start+0x70>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a19      	ldr	r2, [pc, #100]	@ (80080d4 <HAL_TIM_Base_Start+0xc8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d004      	beq.n	800807c <HAL_TIM_Base_Start+0x70>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a18      	ldr	r2, [pc, #96]	@ (80080d8 <HAL_TIM_Base_Start+0xcc>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d111      	bne.n	80080a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b06      	cmp	r3, #6
 800808c:	d010      	beq.n	80080b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0201 	orr.w	r2, r2, #1
 800809c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	e007      	b.n	80080b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40010400 	.word	0x40010400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	40001800 	.word	0x40001800

080080dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d001      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e04e      	b.n	8008192 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a23      	ldr	r2, [pc, #140]	@ (80081a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d022      	beq.n	800815c <HAL_TIM_Base_Start_IT+0x80>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811e:	d01d      	beq.n	800815c <HAL_TIM_Base_Start_IT+0x80>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1f      	ldr	r2, [pc, #124]	@ (80081a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d018      	beq.n	800815c <HAL_TIM_Base_Start_IT+0x80>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1e      	ldr	r2, [pc, #120]	@ (80081a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d013      	beq.n	800815c <HAL_TIM_Base_Start_IT+0x80>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1c      	ldr	r2, [pc, #112]	@ (80081ac <HAL_TIM_Base_Start_IT+0xd0>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d00e      	beq.n	800815c <HAL_TIM_Base_Start_IT+0x80>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1b      	ldr	r2, [pc, #108]	@ (80081b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d009      	beq.n	800815c <HAL_TIM_Base_Start_IT+0x80>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a19      	ldr	r2, [pc, #100]	@ (80081b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d004      	beq.n	800815c <HAL_TIM_Base_Start_IT+0x80>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a18      	ldr	r2, [pc, #96]	@ (80081b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d111      	bne.n	8008180 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b06      	cmp	r3, #6
 800816c:	d010      	beq.n	8008190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f042 0201 	orr.w	r2, r2, #1
 800817c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800817e:	e007      	b.n	8008190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0201 	orr.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40010000 	.word	0x40010000
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40000c00 	.word	0x40000c00
 80081b0:	40010400 	.word	0x40010400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40001800 	.word	0x40001800

080081bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e041      	b.n	8008252 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f839 	bl	800825a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f000 fb3c 	bl	8008878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008262:	bf00      	nop
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d109      	bne.n	8008294 <HAL_TIM_OC_Start+0x24>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b01      	cmp	r3, #1
 800828a:	bf14      	ite	ne
 800828c:	2301      	movne	r3, #1
 800828e:	2300      	moveq	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	e022      	b.n	80082da <HAL_TIM_OC_Start+0x6a>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b04      	cmp	r3, #4
 8008298:	d109      	bne.n	80082ae <HAL_TIM_OC_Start+0x3e>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	bf14      	ite	ne
 80082a6:	2301      	movne	r3, #1
 80082a8:	2300      	moveq	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	e015      	b.n	80082da <HAL_TIM_OC_Start+0x6a>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d109      	bne.n	80082c8 <HAL_TIM_OC_Start+0x58>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b01      	cmp	r3, #1
 80082be:	bf14      	ite	ne
 80082c0:	2301      	movne	r3, #1
 80082c2:	2300      	moveq	r3, #0
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	e008      	b.n	80082da <HAL_TIM_OC_Start+0x6a>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	bf14      	ite	ne
 80082d4:	2301      	movne	r3, #1
 80082d6:	2300      	moveq	r3, #0
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e07c      	b.n	80083dc <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <HAL_TIM_OC_Start+0x82>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082f0:	e013      	b.n	800831a <HAL_TIM_OC_Start+0xaa>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d104      	bne.n	8008302 <HAL_TIM_OC_Start+0x92>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008300:	e00b      	b.n	800831a <HAL_TIM_OC_Start+0xaa>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d104      	bne.n	8008312 <HAL_TIM_OC_Start+0xa2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008310:	e003      	b.n	800831a <HAL_TIM_OC_Start+0xaa>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2201      	movs	r2, #1
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fd9e 	bl	8008e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a2d      	ldr	r2, [pc, #180]	@ (80083e4 <HAL_TIM_OC_Start+0x174>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_TIM_OC_Start+0xcc>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a2c      	ldr	r2, [pc, #176]	@ (80083e8 <HAL_TIM_OC_Start+0x178>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d101      	bne.n	8008340 <HAL_TIM_OC_Start+0xd0>
 800833c:	2301      	movs	r3, #1
 800833e:	e000      	b.n	8008342 <HAL_TIM_OC_Start+0xd2>
 8008340:	2300      	movs	r3, #0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008354:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a22      	ldr	r2, [pc, #136]	@ (80083e4 <HAL_TIM_OC_Start+0x174>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d022      	beq.n	80083a6 <HAL_TIM_OC_Start+0x136>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008368:	d01d      	beq.n	80083a6 <HAL_TIM_OC_Start+0x136>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a1f      	ldr	r2, [pc, #124]	@ (80083ec <HAL_TIM_OC_Start+0x17c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d018      	beq.n	80083a6 <HAL_TIM_OC_Start+0x136>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a1d      	ldr	r2, [pc, #116]	@ (80083f0 <HAL_TIM_OC_Start+0x180>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d013      	beq.n	80083a6 <HAL_TIM_OC_Start+0x136>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a1c      	ldr	r2, [pc, #112]	@ (80083f4 <HAL_TIM_OC_Start+0x184>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00e      	beq.n	80083a6 <HAL_TIM_OC_Start+0x136>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a16      	ldr	r2, [pc, #88]	@ (80083e8 <HAL_TIM_OC_Start+0x178>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d009      	beq.n	80083a6 <HAL_TIM_OC_Start+0x136>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a18      	ldr	r2, [pc, #96]	@ (80083f8 <HAL_TIM_OC_Start+0x188>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d004      	beq.n	80083a6 <HAL_TIM_OC_Start+0x136>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a16      	ldr	r2, [pc, #88]	@ (80083fc <HAL_TIM_OC_Start+0x18c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d111      	bne.n	80083ca <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b06      	cmp	r3, #6
 80083b6:	d010      	beq.n	80083da <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0201 	orr.w	r2, r2, #1
 80083c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c8:	e007      	b.n	80083da <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f042 0201 	orr.w	r2, r2, #1
 80083d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40010000 	.word	0x40010000
 80083e8:	40010400 	.word	0x40010400
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40014000 	.word	0x40014000
 80083fc:	40001800 	.word	0x40001800

08008400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d020      	beq.n	8008464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01b      	beq.n	8008464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f06f 0202 	mvn.w	r2, #2
 8008434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9f5 	bl	800883a <HAL_TIM_IC_CaptureCallback>
 8008450:	e005      	b.n	800845e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f9e7 	bl	8008826 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f9f8 	bl	800884e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f003 0304 	and.w	r3, r3, #4
 800846a:	2b00      	cmp	r3, #0
 800846c:	d020      	beq.n	80084b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01b      	beq.n	80084b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0204 	mvn.w	r2, #4
 8008480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f9cf 	bl	800883a <HAL_TIM_IC_CaptureCallback>
 800849c:	e005      	b.n	80084aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f9c1 	bl	8008826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f9d2 	bl	800884e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d020      	beq.n	80084fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01b      	beq.n	80084fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0208 	mvn.w	r2, #8
 80084cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9a9 	bl	800883a <HAL_TIM_IC_CaptureCallback>
 80084e8:	e005      	b.n	80084f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f99b 	bl	8008826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9ac 	bl	800884e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f003 0310 	and.w	r3, r3, #16
 8008502:	2b00      	cmp	r3, #0
 8008504:	d020      	beq.n	8008548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01b      	beq.n	8008548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f06f 0210 	mvn.w	r2, #16
 8008518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2208      	movs	r2, #8
 800851e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f983 	bl	800883a <HAL_TIM_IC_CaptureCallback>
 8008534:	e005      	b.n	8008542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f975 	bl	8008826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f986 	bl	800884e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00c      	beq.n	800856c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d007      	beq.n	800856c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f06f 0201 	mvn.w	r2, #1
 8008564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7fa fae4 	bl	8002b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00c      	beq.n	8008590 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fd16 	bl	8008fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00c      	beq.n	80085b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d007      	beq.n	80085b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f957 	bl	8008862 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00c      	beq.n	80085d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f003 0320 	and.w	r3, r3, #32
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f06f 0220 	mvn.w	r2, #32
 80085d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fce8 	bl	8008fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085d8:	bf00      	nop
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80085fa:	2302      	movs	r3, #2
 80085fc:	e048      	b.n	8008690 <HAL_TIM_OC_ConfigChannel+0xb0>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b0c      	cmp	r3, #12
 800860a:	d839      	bhi.n	8008680 <HAL_TIM_OC_ConfigChannel+0xa0>
 800860c:	a201      	add	r2, pc, #4	@ (adr r2, 8008614 <HAL_TIM_OC_ConfigChannel+0x34>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008649 	.word	0x08008649
 8008618:	08008681 	.word	0x08008681
 800861c:	08008681 	.word	0x08008681
 8008620:	08008681 	.word	0x08008681
 8008624:	08008657 	.word	0x08008657
 8008628:	08008681 	.word	0x08008681
 800862c:	08008681 	.word	0x08008681
 8008630:	08008681 	.word	0x08008681
 8008634:	08008665 	.word	0x08008665
 8008638:	08008681 	.word	0x08008681
 800863c:	08008681 	.word	0x08008681
 8008640:	08008681 	.word	0x08008681
 8008644:	08008673 	.word	0x08008673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f9be 	bl	80089d0 <TIM_OC1_SetConfig>
      break;
 8008654:	e017      	b.n	8008686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fa27 	bl	8008ab0 <TIM_OC2_SetConfig>
      break;
 8008662:	e010      	b.n	8008686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fa96 	bl	8008b9c <TIM_OC3_SetConfig>
      break;
 8008670:	e009      	b.n	8008686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 fb03 	bl	8008c84 <TIM_OC4_SetConfig>
      break;
 800867e:	e002      	b.n	8008686 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	75fb      	strb	r3, [r7, #23]
      break;
 8008684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_TIM_ConfigClockSource+0x1c>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e0b4      	b.n	800881e <HAL_TIM_ConfigClockSource+0x186>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80086d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086ec:	d03e      	beq.n	800876c <HAL_TIM_ConfigClockSource+0xd4>
 80086ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086f2:	f200 8087 	bhi.w	8008804 <HAL_TIM_ConfigClockSource+0x16c>
 80086f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086fa:	f000 8086 	beq.w	800880a <HAL_TIM_ConfigClockSource+0x172>
 80086fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008702:	d87f      	bhi.n	8008804 <HAL_TIM_ConfigClockSource+0x16c>
 8008704:	2b70      	cmp	r3, #112	@ 0x70
 8008706:	d01a      	beq.n	800873e <HAL_TIM_ConfigClockSource+0xa6>
 8008708:	2b70      	cmp	r3, #112	@ 0x70
 800870a:	d87b      	bhi.n	8008804 <HAL_TIM_ConfigClockSource+0x16c>
 800870c:	2b60      	cmp	r3, #96	@ 0x60
 800870e:	d050      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x11a>
 8008710:	2b60      	cmp	r3, #96	@ 0x60
 8008712:	d877      	bhi.n	8008804 <HAL_TIM_ConfigClockSource+0x16c>
 8008714:	2b50      	cmp	r3, #80	@ 0x50
 8008716:	d03c      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0xfa>
 8008718:	2b50      	cmp	r3, #80	@ 0x50
 800871a:	d873      	bhi.n	8008804 <HAL_TIM_ConfigClockSource+0x16c>
 800871c:	2b40      	cmp	r3, #64	@ 0x40
 800871e:	d058      	beq.n	80087d2 <HAL_TIM_ConfigClockSource+0x13a>
 8008720:	2b40      	cmp	r3, #64	@ 0x40
 8008722:	d86f      	bhi.n	8008804 <HAL_TIM_ConfigClockSource+0x16c>
 8008724:	2b30      	cmp	r3, #48	@ 0x30
 8008726:	d064      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008728:	2b30      	cmp	r3, #48	@ 0x30
 800872a:	d86b      	bhi.n	8008804 <HAL_TIM_ConfigClockSource+0x16c>
 800872c:	2b20      	cmp	r3, #32
 800872e:	d060      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008730:	2b20      	cmp	r3, #32
 8008732:	d867      	bhi.n	8008804 <HAL_TIM_ConfigClockSource+0x16c>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d05c      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008738:	2b10      	cmp	r3, #16
 800873a:	d05a      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x15a>
 800873c:	e062      	b.n	8008804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800874e:	f000 fb69 	bl	8008e24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	609a      	str	r2, [r3, #8]
      break;
 800876a:	e04f      	b.n	800880c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800877c:	f000 fb52 	bl	8008e24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800878e:	609a      	str	r2, [r3, #8]
      break;
 8008790:	e03c      	b.n	800880c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800879e:	461a      	mov	r2, r3
 80087a0:	f000 fac6 	bl	8008d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2150      	movs	r1, #80	@ 0x50
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fb1f 	bl	8008dee <TIM_ITRx_SetConfig>
      break;
 80087b0:	e02c      	b.n	800880c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087be:	461a      	mov	r2, r3
 80087c0:	f000 fae5 	bl	8008d8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2160      	movs	r1, #96	@ 0x60
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fb0f 	bl	8008dee <TIM_ITRx_SetConfig>
      break;
 80087d0:	e01c      	b.n	800880c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087de:	461a      	mov	r2, r3
 80087e0:	f000 faa6 	bl	8008d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2140      	movs	r1, #64	@ 0x40
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 faff 	bl	8008dee <TIM_ITRx_SetConfig>
      break;
 80087f0:	e00c      	b.n	800880c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f000 faf6 	bl	8008dee <TIM_ITRx_SetConfig>
      break;
 8008802:	e003      	b.n	800880c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
      break;
 8008808:	e000      	b.n	800880c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800880a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800881c:	7bfb      	ldrb	r3, [r7, #15]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a46      	ldr	r2, [pc, #280]	@ (80089a4 <TIM_Base_SetConfig+0x12c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d013      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008896:	d00f      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a43      	ldr	r2, [pc, #268]	@ (80089a8 <TIM_Base_SetConfig+0x130>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00b      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a42      	ldr	r2, [pc, #264]	@ (80089ac <TIM_Base_SetConfig+0x134>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d007      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a41      	ldr	r2, [pc, #260]	@ (80089b0 <TIM_Base_SetConfig+0x138>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d003      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a40      	ldr	r2, [pc, #256]	@ (80089b4 <TIM_Base_SetConfig+0x13c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d108      	bne.n	80088ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a35      	ldr	r2, [pc, #212]	@ (80089a4 <TIM_Base_SetConfig+0x12c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d02b      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088d8:	d027      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a32      	ldr	r2, [pc, #200]	@ (80089a8 <TIM_Base_SetConfig+0x130>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d023      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a31      	ldr	r2, [pc, #196]	@ (80089ac <TIM_Base_SetConfig+0x134>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01f      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a30      	ldr	r2, [pc, #192]	@ (80089b0 <TIM_Base_SetConfig+0x138>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01b      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a2f      	ldr	r2, [pc, #188]	@ (80089b4 <TIM_Base_SetConfig+0x13c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d017      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a2e      	ldr	r2, [pc, #184]	@ (80089b8 <TIM_Base_SetConfig+0x140>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a2d      	ldr	r2, [pc, #180]	@ (80089bc <TIM_Base_SetConfig+0x144>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00f      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a2c      	ldr	r2, [pc, #176]	@ (80089c0 <TIM_Base_SetConfig+0x148>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00b      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a2b      	ldr	r2, [pc, #172]	@ (80089c4 <TIM_Base_SetConfig+0x14c>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d007      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a2a      	ldr	r2, [pc, #168]	@ (80089c8 <TIM_Base_SetConfig+0x150>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d003      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a29      	ldr	r2, [pc, #164]	@ (80089cc <TIM_Base_SetConfig+0x154>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d108      	bne.n	800893c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a10      	ldr	r2, [pc, #64]	@ (80089a4 <TIM_Base_SetConfig+0x12c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_Base_SetConfig+0xf8>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a12      	ldr	r2, [pc, #72]	@ (80089b4 <TIM_Base_SetConfig+0x13c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d103      	bne.n	8008978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b01      	cmp	r3, #1
 8008988:	d105      	bne.n	8008996 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f023 0201 	bic.w	r2, r3, #1
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	611a      	str	r2, [r3, #16]
  }
}
 8008996:	bf00      	nop
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40000400 	.word	0x40000400
 80089ac:	40000800 	.word	0x40000800
 80089b0:	40000c00 	.word	0x40000c00
 80089b4:	40010400 	.word	0x40010400
 80089b8:	40014000 	.word	0x40014000
 80089bc:	40014400 	.word	0x40014400
 80089c0:	40014800 	.word	0x40014800
 80089c4:	40001800 	.word	0x40001800
 80089c8:	40001c00 	.word	0x40001c00
 80089cc:	40002000 	.word	0x40002000

080089d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	f023 0201 	bic.w	r2, r3, #1
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f023 0302 	bic.w	r3, r3, #2
 8008a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a20      	ldr	r2, [pc, #128]	@ (8008aa8 <TIM_OC1_SetConfig+0xd8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d003      	beq.n	8008a34 <TIM_OC1_SetConfig+0x64>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008aac <TIM_OC1_SetConfig+0xdc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d10c      	bne.n	8008a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f023 0308 	bic.w	r3, r3, #8
 8008a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f023 0304 	bic.w	r3, r3, #4
 8008a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a15      	ldr	r2, [pc, #84]	@ (8008aa8 <TIM_OC1_SetConfig+0xd8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d003      	beq.n	8008a5e <TIM_OC1_SetConfig+0x8e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a14      	ldr	r2, [pc, #80]	@ (8008aac <TIM_OC1_SetConfig+0xdc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d111      	bne.n	8008a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	621a      	str	r2, [r3, #32]
}
 8008a9c:	bf00      	nop
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	40010000 	.word	0x40010000
 8008aac:	40010400 	.word	0x40010400

08008ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	f023 0210 	bic.w	r2, r3, #16
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f023 0320 	bic.w	r3, r3, #32
 8008afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a22      	ldr	r2, [pc, #136]	@ (8008b94 <TIM_OC2_SetConfig+0xe4>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d003      	beq.n	8008b18 <TIM_OC2_SetConfig+0x68>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a21      	ldr	r2, [pc, #132]	@ (8008b98 <TIM_OC2_SetConfig+0xe8>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d10d      	bne.n	8008b34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a17      	ldr	r2, [pc, #92]	@ (8008b94 <TIM_OC2_SetConfig+0xe4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d003      	beq.n	8008b44 <TIM_OC2_SetConfig+0x94>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a16      	ldr	r2, [pc, #88]	@ (8008b98 <TIM_OC2_SetConfig+0xe8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d113      	bne.n	8008b6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40010000 	.word	0x40010000
 8008b98:	40010400 	.word	0x40010400

08008b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f023 0303 	bic.w	r3, r3, #3
 8008bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	021b      	lsls	r3, r3, #8
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a21      	ldr	r2, [pc, #132]	@ (8008c7c <TIM_OC3_SetConfig+0xe0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <TIM_OC3_SetConfig+0x66>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a20      	ldr	r2, [pc, #128]	@ (8008c80 <TIM_OC3_SetConfig+0xe4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d10d      	bne.n	8008c1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a16      	ldr	r2, [pc, #88]	@ (8008c7c <TIM_OC3_SetConfig+0xe0>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d003      	beq.n	8008c2e <TIM_OC3_SetConfig+0x92>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a15      	ldr	r2, [pc, #84]	@ (8008c80 <TIM_OC3_SetConfig+0xe4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d113      	bne.n	8008c56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	621a      	str	r2, [r3, #32]
}
 8008c70:	bf00      	nop
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	40010000 	.word	0x40010000
 8008c80:	40010400 	.word	0x40010400

08008c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	031b      	lsls	r3, r3, #12
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a12      	ldr	r2, [pc, #72]	@ (8008d28 <TIM_OC4_SetConfig+0xa4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d003      	beq.n	8008cec <TIM_OC4_SetConfig+0x68>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a11      	ldr	r2, [pc, #68]	@ (8008d2c <TIM_OC4_SetConfig+0xa8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d109      	bne.n	8008d00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	019b      	lsls	r3, r3, #6
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	621a      	str	r2, [r3, #32]
}
 8008d1a:	bf00      	nop
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40010400 	.word	0x40010400

08008d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f023 0201 	bic.w	r2, r3, #1
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f023 030a 	bic.w	r3, r3, #10
 8008d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b087      	sub	sp, #28
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	60f8      	str	r0, [r7, #12]
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	f023 0210 	bic.w	r2, r3, #16
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	031b      	lsls	r3, r3, #12
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008dca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	621a      	str	r2, [r3, #32]
}
 8008de2:	bf00      	nop
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f043 0307 	orr.w	r3, r3, #7
 8008e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	609a      	str	r2, [r3, #8]
}
 8008e18:	bf00      	nop
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	021a      	lsls	r2, r3, #8
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	431a      	orrs	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	609a      	str	r2, [r3, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2201      	movs	r2, #1
 8008e78:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a1a      	ldr	r2, [r3, #32]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	401a      	ands	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a1a      	ldr	r2, [r3, #32]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f003 031f 	and.w	r3, r3, #31
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	fa01 f303 	lsl.w	r3, r1, r3
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e05a      	b.n	8008f7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a21      	ldr	r2, [pc, #132]	@ (8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d022      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f14:	d01d      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008f90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d018      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a1b      	ldr	r2, [pc, #108]	@ (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d013      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00e      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a18      	ldr	r2, [pc, #96]	@ (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d009      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a17      	ldr	r2, [pc, #92]	@ (8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d004      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a15      	ldr	r2, [pc, #84]	@ (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d10c      	bne.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	40010000 	.word	0x40010000
 8008f90:	40000400 	.word	0x40000400
 8008f94:	40000800 	.word	0x40000800
 8008f98:	40000c00 	.word	0x40000c00
 8008f9c:	40010400 	.word	0x40010400
 8008fa0:	40014000 	.word	0x40014000
 8008fa4:	40001800 	.word	0x40001800

08008fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e042      	b.n	8009068 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7fa ff34 	bl	8003e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2224      	movs	r2, #36	@ 0x24
 8009000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fcdb 	bl	80099d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	691a      	ldr	r2, [r3, #16]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695a      	ldr	r2, [r3, #20]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2220      	movs	r2, #32
 8009054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	4613      	mov	r3, r2
 800907c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b20      	cmp	r3, #32
 8009088:	d112      	bne.n	80090b0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <HAL_UART_Receive_IT+0x26>
 8009090:	88fb      	ldrh	r3, [r7, #6]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e00b      	b.n	80090b2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80090a0:	88fb      	ldrh	r3, [r7, #6]
 80090a2:	461a      	mov	r2, r3
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 faba 	bl	8009620 <UART_Start_Receive_IT>
 80090ac:	4603      	mov	r3, r0
 80090ae:	e000      	b.n	80090b2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80090b0:	2302      	movs	r3, #2
  }
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b0ba      	sub	sp, #232	@ 0xe8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090f2:	f003 030f 	and.w	r3, r3, #15
 80090f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80090fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10f      	bne.n	8009122 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <HAL_UART_IRQHandler+0x66>
 800910e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fb99 	bl	8009852 <UART_Receive_IT>
      return;
 8009120:	e25b      	b.n	80095da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80de 	beq.w	80092e8 <HAL_UART_IRQHandler+0x22c>
 800912c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800913c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 80d1 	beq.w	80092e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <HAL_UART_IRQHandler+0xae>
 8009152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009162:	f043 0201 	orr.w	r2, r3, #1
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800916a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916e:	f003 0304 	and.w	r3, r3, #4
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00b      	beq.n	800918e <HAL_UART_IRQHandler+0xd2>
 8009176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009186:	f043 0202 	orr.w	r2, r3, #2
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800918e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <HAL_UART_IRQHandler+0xf6>
 800919a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091aa:	f043 0204 	orr.w	r2, r3, #4
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80091b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d011      	beq.n	80091e2 <HAL_UART_IRQHandler+0x126>
 80091be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c2:	f003 0320 	and.w	r3, r3, #32
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d105      	bne.n	80091d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80091ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d005      	beq.n	80091e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091da:	f043 0208 	orr.w	r2, r3, #8
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 81f2 	beq.w	80095d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f0:	f003 0320 	and.w	r3, r3, #32
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d008      	beq.n	800920a <HAL_UART_IRQHandler+0x14e>
 80091f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb24 	bl	8009852 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009214:	2b40      	cmp	r3, #64	@ 0x40
 8009216:	bf0c      	ite	eq
 8009218:	2301      	moveq	r3, #1
 800921a:	2300      	movne	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <HAL_UART_IRQHandler+0x17a>
 800922e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d04f      	beq.n	80092d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fa2c 	bl	8009694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009246:	2b40      	cmp	r3, #64	@ 0x40
 8009248:	d141      	bne.n	80092ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3314      	adds	r3, #20
 8009250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3314      	adds	r3, #20
 8009272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009276:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800927a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800928e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1d9      	bne.n	800924a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d013      	beq.n	80092c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a2:	4a7e      	ldr	r2, [pc, #504]	@ (800949c <HAL_UART_IRQHandler+0x3e0>)
 80092a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fb fb38 	bl	8004920 <HAL_DMA_Abort_IT>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d016      	beq.n	80092e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c4:	e00e      	b.n	80092e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f994 	bl	80095f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092cc:	e00a      	b.n	80092e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f990 	bl	80095f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d4:	e006      	b.n	80092e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f98c 	bl	80095f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80092e2:	e175      	b.n	80095d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e4:	bf00      	nop
    return;
 80092e6:	e173      	b.n	80095d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	f040 814f 	bne.w	8009590 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 8148 	beq.w	8009590 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009304:	f003 0310 	and.w	r3, r3, #16
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 8141 	beq.w	8009590 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800930e:	2300      	movs	r3, #0
 8009310:	60bb      	str	r3, [r7, #8]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60bb      	str	r3, [r7, #8]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	60bb      	str	r3, [r7, #8]
 8009322:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800932e:	2b40      	cmp	r3, #64	@ 0x40
 8009330:	f040 80b6 	bne.w	80094a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009340:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 8145 	beq.w	80095d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800934e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009352:	429a      	cmp	r2, r3
 8009354:	f080 813e 	bcs.w	80095d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800935e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800936a:	f000 8088 	beq.w	800947e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	330c      	adds	r3, #12
 8009374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800938c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	330c      	adds	r3, #12
 8009396:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800939a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800939e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80093a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80093b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1d9      	bne.n	800936e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3314      	adds	r3, #20
 80093c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80093ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093cc:	f023 0301 	bic.w	r3, r3, #1
 80093d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3314      	adds	r3, #20
 80093da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80093de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80093e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e1      	bne.n	80093ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3314      	adds	r3, #20
 80093fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800940c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3314      	adds	r3, #20
 8009416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800941a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800941c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009420:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e3      	bne.n	80093f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800944c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800944e:	f023 0310 	bic.w	r3, r3, #16
 8009452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	330c      	adds	r3, #12
 800945c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009460:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009462:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009466:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800946e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e3      	bne.n	800943c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009478:	4618      	mov	r0, r3
 800947a:	f7fb f9e1 	bl	8004840 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2202      	movs	r2, #2
 8009482:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800948c:	b29b      	uxth	r3, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	b29b      	uxth	r3, r3
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f8b7 	bl	8009608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800949a:	e09b      	b.n	80095d4 <HAL_UART_IRQHandler+0x518>
 800949c:	0800975b 	.word	0x0800975b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 808e 	beq.w	80095d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80094bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 8089 	beq.w	80095d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	330c      	adds	r3, #12
 80094e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80094ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80094ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e3      	bne.n	80094c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3314      	adds	r3, #20
 8009504:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	623b      	str	r3, [r7, #32]
   return(result);
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	f023 0301 	bic.w	r3, r3, #1
 8009514:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3314      	adds	r3, #20
 800951e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009522:	633a      	str	r2, [r7, #48]	@ 0x30
 8009524:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e3      	bne.n	80094fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	e853 3f00 	ldrex	r3, [r3]
 8009552:	60fb      	str	r3, [r7, #12]
   return(result);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0310 	bic.w	r3, r3, #16
 800955a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	330c      	adds	r3, #12
 8009564:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009568:	61fa      	str	r2, [r7, #28]
 800956a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956c:	69b9      	ldr	r1, [r7, #24]
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	e841 2300 	strex	r3, r2, [r1]
 8009574:	617b      	str	r3, [r7, #20]
   return(result);
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e3      	bne.n	8009544 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2202      	movs	r2, #2
 8009580:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009582:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f83d 	bl	8009608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800958e:	e023      	b.n	80095d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009598:	2b00      	cmp	r3, #0
 800959a:	d009      	beq.n	80095b0 <HAL_UART_IRQHandler+0x4f4>
 800959c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f8ea 	bl	8009782 <UART_Transmit_IT>
    return;
 80095ae:	e014      	b.n	80095da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00e      	beq.n	80095da <HAL_UART_IRQHandler+0x51e>
 80095bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d008      	beq.n	80095da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f92a 	bl	8009822 <UART_EndTransmit_IT>
    return;
 80095ce:	e004      	b.n	80095da <HAL_UART_IRQHandler+0x51e>
    return;
 80095d0:	bf00      	nop
 80095d2:	e002      	b.n	80095da <HAL_UART_IRQHandler+0x51e>
      return;
 80095d4:	bf00      	nop
 80095d6:	e000      	b.n	80095da <HAL_UART_IRQHandler+0x51e>
      return;
 80095d8:	bf00      	nop
  }
}
 80095da:	37e8      	adds	r7, #232	@ 0xe8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	88fa      	ldrh	r2, [r7, #6]
 800963e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2222      	movs	r2, #34	@ 0x22
 800964a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d007      	beq.n	8009666 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009664:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	695a      	ldr	r2, [r3, #20]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f042 0201 	orr.w	r2, r2, #1
 8009674:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f042 0220 	orr.w	r2, r2, #32
 8009684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b095      	sub	sp, #84	@ 0x54
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	330c      	adds	r3, #12
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a6:	e853 3f00 	ldrex	r3, [r3]
 80096aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	330c      	adds	r3, #12
 80096ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096c4:	e841 2300 	strex	r3, r2, [r1]
 80096c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1e5      	bne.n	800969c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3314      	adds	r3, #20
 80096d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3314      	adds	r3, #20
 80096ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e5      	bne.n	80096d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009708:	2b01      	cmp	r3, #1
 800970a:	d119      	bne.n	8009740 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	330c      	adds	r3, #12
 8009712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	e853 3f00 	ldrex	r3, [r3]
 800971a:	60bb      	str	r3, [r7, #8]
   return(result);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f023 0310 	bic.w	r3, r3, #16
 8009722:	647b      	str	r3, [r7, #68]	@ 0x44
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	330c      	adds	r3, #12
 800972a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800972c:	61ba      	str	r2, [r7, #24]
 800972e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	6979      	ldr	r1, [r7, #20]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	613b      	str	r3, [r7, #16]
   return(result);
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e5      	bne.n	800970c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2220      	movs	r2, #32
 8009744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800974e:	bf00      	nop
 8009750:	3754      	adds	r7, #84	@ 0x54
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009766:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f7ff ff3d 	bl	80095f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009782:	b480      	push	{r7}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b21      	cmp	r3, #33	@ 0x21
 8009794:	d13e      	bne.n	8009814 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800979e:	d114      	bne.n	80097ca <UART_Transmit_IT+0x48>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d110      	bne.n	80097ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	1c9a      	adds	r2, r3, #2
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	621a      	str	r2, [r3, #32]
 80097c8:	e008      	b.n	80097dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	1c59      	adds	r1, r3, #1
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6211      	str	r1, [r2, #32]
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	3b01      	subs	r3, #1
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4619      	mov	r1, r3
 80097ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10f      	bne.n	8009810 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800980e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	e000      	b.n	8009816 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009814:	2302      	movs	r3, #2
  }
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009838:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fecc 	bl	80095e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b08c      	sub	sp, #48	@ 0x30
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b22      	cmp	r3, #34	@ 0x22
 8009864:	f040 80ae 	bne.w	80099c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009870:	d117      	bne.n	80098a2 <UART_Receive_IT+0x50>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d113      	bne.n	80098a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800987a:	2300      	movs	r3, #0
 800987c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009882:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	b29b      	uxth	r3, r3
 800988c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009890:	b29a      	uxth	r2, r3
 8009892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009894:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989a:	1c9a      	adds	r2, r3, #2
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	629a      	str	r2, [r3, #40]	@ 0x28
 80098a0:	e026      	b.n	80098f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098b4:	d007      	beq.n	80098c6 <UART_Receive_IT+0x74>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <UART_Receive_IT+0x82>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	e008      	b.n	80098e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4619      	mov	r1, r3
 80098fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009900:	2b00      	cmp	r3, #0
 8009902:	d15d      	bne.n	80099c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0220 	bic.w	r2, r2, #32
 8009912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	695a      	ldr	r2, [r3, #20]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f022 0201 	bic.w	r2, r2, #1
 8009932:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009946:	2b01      	cmp	r3, #1
 8009948:	d135      	bne.n	80099b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	330c      	adds	r3, #12
 8009956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	613b      	str	r3, [r7, #16]
   return(result);
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f023 0310 	bic.w	r3, r3, #16
 8009966:	627b      	str	r3, [r7, #36]	@ 0x24
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	330c      	adds	r3, #12
 800996e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009970:	623a      	str	r2, [r7, #32]
 8009972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	69f9      	ldr	r1, [r7, #28]
 8009976:	6a3a      	ldr	r2, [r7, #32]
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	61bb      	str	r3, [r7, #24]
   return(result);
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e5      	bne.n	8009950 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0310 	and.w	r3, r3, #16
 800998e:	2b10      	cmp	r3, #16
 8009990:	d10a      	bne.n	80099a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60fb      	str	r3, [r7, #12]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff fe2a 	bl	8009608 <HAL_UARTEx_RxEventCallback>
 80099b4:	e002      	b.n	80099bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7f9 f812 	bl	80029e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	e002      	b.n	80099c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	e000      	b.n	80099c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80099c4:	2302      	movs	r3, #2
  }
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3730      	adds	r7, #48	@ 0x30
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099d4:	b0c0      	sub	sp, #256	@ 0x100
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80099e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ec:	68d9      	ldr	r1, [r3, #12]
 80099ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	ea40 0301 	orr.w	r3, r0, r1
 80099f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009a28:	f021 010c 	bic.w	r1, r1, #12
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a36:	430b      	orrs	r3, r1
 8009a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a4a:	6999      	ldr	r1, [r3, #24]
 8009a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	ea40 0301 	orr.w	r3, r0, r1
 8009a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	4b8f      	ldr	r3, [pc, #572]	@ (8009c9c <UART_SetConfig+0x2cc>)
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d005      	beq.n	8009a70 <UART_SetConfig+0xa0>
 8009a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8009ca0 <UART_SetConfig+0x2d0>)
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d104      	bne.n	8009a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a70:	f7fd fa9e 	bl	8006fb0 <HAL_RCC_GetPCLK2Freq>
 8009a74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a78:	e003      	b.n	8009a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a7a:	f7fd fa85 	bl	8006f88 <HAL_RCC_GetPCLK1Freq>
 8009a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a8c:	f040 810c 	bne.w	8009ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a94:	2200      	movs	r2, #0
 8009a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	462b      	mov	r3, r5
 8009aa6:	1891      	adds	r1, r2, r2
 8009aa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009aaa:	415b      	adcs	r3, r3
 8009aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	eb12 0801 	adds.w	r8, r2, r1
 8009ab8:	4629      	mov	r1, r5
 8009aba:	eb43 0901 	adc.w	r9, r3, r1
 8009abe:	f04f 0200 	mov.w	r2, #0
 8009ac2:	f04f 0300 	mov.w	r3, #0
 8009ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ad2:	4690      	mov	r8, r2
 8009ad4:	4699      	mov	r9, r3
 8009ad6:	4623      	mov	r3, r4
 8009ad8:	eb18 0303 	adds.w	r3, r8, r3
 8009adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ae0:	462b      	mov	r3, r5
 8009ae2:	eb49 0303 	adc.w	r3, r9, r3
 8009ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009af6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009afe:	460b      	mov	r3, r1
 8009b00:	18db      	adds	r3, r3, r3
 8009b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b04:	4613      	mov	r3, r2
 8009b06:	eb42 0303 	adc.w	r3, r2, r3
 8009b0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009b14:	f7f7 f898 	bl	8000c48 <__aeabi_uldivmod>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4b61      	ldr	r3, [pc, #388]	@ (8009ca4 <UART_SetConfig+0x2d4>)
 8009b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8009b22:	095b      	lsrs	r3, r3, #5
 8009b24:	011c      	lsls	r4, r3, #4
 8009b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b38:	4642      	mov	r2, r8
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	1891      	adds	r1, r2, r2
 8009b3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b40:	415b      	adcs	r3, r3
 8009b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b48:	4641      	mov	r1, r8
 8009b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8009b4e:	4649      	mov	r1, r9
 8009b50:	eb43 0b01 	adc.w	fp, r3, r1
 8009b54:	f04f 0200 	mov.w	r2, #0
 8009b58:	f04f 0300 	mov.w	r3, #0
 8009b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b68:	4692      	mov	sl, r2
 8009b6a:	469b      	mov	fp, r3
 8009b6c:	4643      	mov	r3, r8
 8009b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8009b72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b76:	464b      	mov	r3, r9
 8009b78:	eb4b 0303 	adc.w	r3, fp, r3
 8009b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b94:	460b      	mov	r3, r1
 8009b96:	18db      	adds	r3, r3, r3
 8009b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	eb42 0303 	adc.w	r3, r2, r3
 8009ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009baa:	f7f7 f84d 	bl	8000c48 <__aeabi_uldivmod>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ca4 <UART_SetConfig+0x2d4>)
 8009bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	2264      	movs	r2, #100	@ 0x64
 8009bbe:	fb02 f303 	mul.w	r3, r2, r3
 8009bc2:	1acb      	subs	r3, r1, r3
 8009bc4:	00db      	lsls	r3, r3, #3
 8009bc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009bca:	4b36      	ldr	r3, [pc, #216]	@ (8009ca4 <UART_SetConfig+0x2d4>)
 8009bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8009bd0:	095b      	lsrs	r3, r3, #5
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009bd8:	441c      	add	r4, r3
 8009bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009be4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009bec:	4642      	mov	r2, r8
 8009bee:	464b      	mov	r3, r9
 8009bf0:	1891      	adds	r1, r2, r2
 8009bf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009bf4:	415b      	adcs	r3, r3
 8009bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009bfc:	4641      	mov	r1, r8
 8009bfe:	1851      	adds	r1, r2, r1
 8009c00:	6339      	str	r1, [r7, #48]	@ 0x30
 8009c02:	4649      	mov	r1, r9
 8009c04:	414b      	adcs	r3, r1
 8009c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c08:	f04f 0200 	mov.w	r2, #0
 8009c0c:	f04f 0300 	mov.w	r3, #0
 8009c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009c14:	4659      	mov	r1, fp
 8009c16:	00cb      	lsls	r3, r1, #3
 8009c18:	4651      	mov	r1, sl
 8009c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c1e:	4651      	mov	r1, sl
 8009c20:	00ca      	lsls	r2, r1, #3
 8009c22:	4610      	mov	r0, r2
 8009c24:	4619      	mov	r1, r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	4642      	mov	r2, r8
 8009c2a:	189b      	adds	r3, r3, r2
 8009c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c30:	464b      	mov	r3, r9
 8009c32:	460a      	mov	r2, r1
 8009c34:	eb42 0303 	adc.w	r3, r2, r3
 8009c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c50:	460b      	mov	r3, r1
 8009c52:	18db      	adds	r3, r3, r3
 8009c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c56:	4613      	mov	r3, r2
 8009c58:	eb42 0303 	adc.w	r3, r2, r3
 8009c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c66:	f7f6 ffef 	bl	8000c48 <__aeabi_uldivmod>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca4 <UART_SetConfig+0x2d4>)
 8009c70:	fba3 1302 	umull	r1, r3, r3, r2
 8009c74:	095b      	lsrs	r3, r3, #5
 8009c76:	2164      	movs	r1, #100	@ 0x64
 8009c78:	fb01 f303 	mul.w	r3, r1, r3
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	3332      	adds	r3, #50	@ 0x32
 8009c82:	4a08      	ldr	r2, [pc, #32]	@ (8009ca4 <UART_SetConfig+0x2d4>)
 8009c84:	fba2 2303 	umull	r2, r3, r2, r3
 8009c88:	095b      	lsrs	r3, r3, #5
 8009c8a:	f003 0207 	and.w	r2, r3, #7
 8009c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4422      	add	r2, r4
 8009c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c98:	e106      	b.n	8009ea8 <UART_SetConfig+0x4d8>
 8009c9a:	bf00      	nop
 8009c9c:	40011000 	.word	0x40011000
 8009ca0:	40011400 	.word	0x40011400
 8009ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009cba:	4642      	mov	r2, r8
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	1891      	adds	r1, r2, r2
 8009cc0:	6239      	str	r1, [r7, #32]
 8009cc2:	415b      	adcs	r3, r3
 8009cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009cca:	4641      	mov	r1, r8
 8009ccc:	1854      	adds	r4, r2, r1
 8009cce:	4649      	mov	r1, r9
 8009cd0:	eb43 0501 	adc.w	r5, r3, r1
 8009cd4:	f04f 0200 	mov.w	r2, #0
 8009cd8:	f04f 0300 	mov.w	r3, #0
 8009cdc:	00eb      	lsls	r3, r5, #3
 8009cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ce2:	00e2      	lsls	r2, r4, #3
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	461d      	mov	r5, r3
 8009ce8:	4643      	mov	r3, r8
 8009cea:	18e3      	adds	r3, r4, r3
 8009cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	eb45 0303 	adc.w	r3, r5, r3
 8009cf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d0a:	f04f 0200 	mov.w	r2, #0
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009d16:	4629      	mov	r1, r5
 8009d18:	008b      	lsls	r3, r1, #2
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d20:	4621      	mov	r1, r4
 8009d22:	008a      	lsls	r2, r1, #2
 8009d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009d28:	f7f6 ff8e 	bl	8000c48 <__aeabi_uldivmod>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4b60      	ldr	r3, [pc, #384]	@ (8009eb4 <UART_SetConfig+0x4e4>)
 8009d32:	fba3 2302 	umull	r2, r3, r3, r2
 8009d36:	095b      	lsrs	r3, r3, #5
 8009d38:	011c      	lsls	r4, r3, #4
 8009d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d4c:	4642      	mov	r2, r8
 8009d4e:	464b      	mov	r3, r9
 8009d50:	1891      	adds	r1, r2, r2
 8009d52:	61b9      	str	r1, [r7, #24]
 8009d54:	415b      	adcs	r3, r3
 8009d56:	61fb      	str	r3, [r7, #28]
 8009d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d5c:	4641      	mov	r1, r8
 8009d5e:	1851      	adds	r1, r2, r1
 8009d60:	6139      	str	r1, [r7, #16]
 8009d62:	4649      	mov	r1, r9
 8009d64:	414b      	adcs	r3, r1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	f04f 0200 	mov.w	r2, #0
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d74:	4659      	mov	r1, fp
 8009d76:	00cb      	lsls	r3, r1, #3
 8009d78:	4651      	mov	r1, sl
 8009d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d7e:	4651      	mov	r1, sl
 8009d80:	00ca      	lsls	r2, r1, #3
 8009d82:	4610      	mov	r0, r2
 8009d84:	4619      	mov	r1, r3
 8009d86:	4603      	mov	r3, r0
 8009d88:	4642      	mov	r2, r8
 8009d8a:	189b      	adds	r3, r3, r2
 8009d8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d90:	464b      	mov	r3, r9
 8009d92:	460a      	mov	r2, r1
 8009d94:	eb42 0303 	adc.w	r3, r2, r3
 8009d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009da6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009da8:	f04f 0200 	mov.w	r2, #0
 8009dac:	f04f 0300 	mov.w	r3, #0
 8009db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009db4:	4649      	mov	r1, r9
 8009db6:	008b      	lsls	r3, r1, #2
 8009db8:	4641      	mov	r1, r8
 8009dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dbe:	4641      	mov	r1, r8
 8009dc0:	008a      	lsls	r2, r1, #2
 8009dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009dc6:	f7f6 ff3f 	bl	8000c48 <__aeabi_uldivmod>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4611      	mov	r1, r2
 8009dd0:	4b38      	ldr	r3, [pc, #224]	@ (8009eb4 <UART_SetConfig+0x4e4>)
 8009dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8009dd6:	095b      	lsrs	r3, r3, #5
 8009dd8:	2264      	movs	r2, #100	@ 0x64
 8009dda:	fb02 f303 	mul.w	r3, r2, r3
 8009dde:	1acb      	subs	r3, r1, r3
 8009de0:	011b      	lsls	r3, r3, #4
 8009de2:	3332      	adds	r3, #50	@ 0x32
 8009de4:	4a33      	ldr	r2, [pc, #204]	@ (8009eb4 <UART_SetConfig+0x4e4>)
 8009de6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dea:	095b      	lsrs	r3, r3, #5
 8009dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009df0:	441c      	add	r4, r3
 8009df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009df6:	2200      	movs	r2, #0
 8009df8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8009dfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009e00:	4642      	mov	r2, r8
 8009e02:	464b      	mov	r3, r9
 8009e04:	1891      	adds	r1, r2, r2
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	415b      	adcs	r3, r3
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e10:	4641      	mov	r1, r8
 8009e12:	1851      	adds	r1, r2, r1
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	4649      	mov	r1, r9
 8009e18:	414b      	adcs	r3, r1
 8009e1a:	607b      	str	r3, [r7, #4]
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	f04f 0300 	mov.w	r3, #0
 8009e24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e28:	4659      	mov	r1, fp
 8009e2a:	00cb      	lsls	r3, r1, #3
 8009e2c:	4651      	mov	r1, sl
 8009e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e32:	4651      	mov	r1, sl
 8009e34:	00ca      	lsls	r2, r1, #3
 8009e36:	4610      	mov	r0, r2
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	189b      	adds	r3, r3, r2
 8009e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e42:	464b      	mov	r3, r9
 8009e44:	460a      	mov	r2, r1
 8009e46:	eb42 0303 	adc.w	r3, r2, r3
 8009e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e56:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e58:	f04f 0200 	mov.w	r2, #0
 8009e5c:	f04f 0300 	mov.w	r3, #0
 8009e60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e64:	4649      	mov	r1, r9
 8009e66:	008b      	lsls	r3, r1, #2
 8009e68:	4641      	mov	r1, r8
 8009e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e6e:	4641      	mov	r1, r8
 8009e70:	008a      	lsls	r2, r1, #2
 8009e72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e76:	f7f6 fee7 	bl	8000c48 <__aeabi_uldivmod>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009eb4 <UART_SetConfig+0x4e4>)
 8009e80:	fba3 1302 	umull	r1, r3, r3, r2
 8009e84:	095b      	lsrs	r3, r3, #5
 8009e86:	2164      	movs	r1, #100	@ 0x64
 8009e88:	fb01 f303 	mul.w	r3, r1, r3
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	011b      	lsls	r3, r3, #4
 8009e90:	3332      	adds	r3, #50	@ 0x32
 8009e92:	4a08      	ldr	r2, [pc, #32]	@ (8009eb4 <UART_SetConfig+0x4e4>)
 8009e94:	fba2 2303 	umull	r2, r3, r2, r3
 8009e98:	095b      	lsrs	r3, r3, #5
 8009e9a:	f003 020f 	and.w	r2, r3, #15
 8009e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4422      	add	r2, r4
 8009ea6:	609a      	str	r2, [r3, #8]
}
 8009ea8:	bf00      	nop
 8009eaa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009eb4:	51eb851f 	.word	0x51eb851f

08009eb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009eb8:	b084      	sub	sp, #16
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	f107 001c 	add.w	r0, r7, #28
 8009ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009eca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d123      	bne.n	8009f1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009efa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d105      	bne.n	8009f0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 fae8 	bl	800b4e4 <USB_CoreReset>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]
 8009f18:	e01b      	b.n	8009f52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fadc 	bl	800b4e4 <USB_CoreReset>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d106      	bne.n	8009f46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f44:	e005      	b.n	8009f52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f52:	7fbb      	ldrb	r3, [r7, #30]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d10b      	bne.n	8009f70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f043 0206 	orr.w	r2, r3, #6
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f043 0220 	orr.w	r2, r3, #32
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f7c:	b004      	add	sp, #16
 8009f7e:	4770      	bx	lr

08009f80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d165      	bne.n	800a060 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	4a41      	ldr	r2, [pc, #260]	@ (800a09c <USB_SetTurnaroundTime+0x11c>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d906      	bls.n	8009faa <USB_SetTurnaroundTime+0x2a>
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	4a40      	ldr	r2, [pc, #256]	@ (800a0a0 <USB_SetTurnaroundTime+0x120>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d202      	bcs.n	8009faa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009fa4:	230f      	movs	r3, #15
 8009fa6:	617b      	str	r3, [r7, #20]
 8009fa8:	e062      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	4a3c      	ldr	r2, [pc, #240]	@ (800a0a0 <USB_SetTurnaroundTime+0x120>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d306      	bcc.n	8009fc0 <USB_SetTurnaroundTime+0x40>
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	4a3b      	ldr	r2, [pc, #236]	@ (800a0a4 <USB_SetTurnaroundTime+0x124>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d202      	bcs.n	8009fc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009fba:	230e      	movs	r3, #14
 8009fbc:	617b      	str	r3, [r7, #20]
 8009fbe:	e057      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	4a38      	ldr	r2, [pc, #224]	@ (800a0a4 <USB_SetTurnaroundTime+0x124>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d306      	bcc.n	8009fd6 <USB_SetTurnaroundTime+0x56>
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	4a37      	ldr	r2, [pc, #220]	@ (800a0a8 <USB_SetTurnaroundTime+0x128>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d202      	bcs.n	8009fd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009fd0:	230d      	movs	r3, #13
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	e04c      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	4a33      	ldr	r2, [pc, #204]	@ (800a0a8 <USB_SetTurnaroundTime+0x128>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d306      	bcc.n	8009fec <USB_SetTurnaroundTime+0x6c>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	4a32      	ldr	r2, [pc, #200]	@ (800a0ac <USB_SetTurnaroundTime+0x12c>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d802      	bhi.n	8009fec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	e041      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	4a2f      	ldr	r2, [pc, #188]	@ (800a0ac <USB_SetTurnaroundTime+0x12c>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d906      	bls.n	800a002 <USB_SetTurnaroundTime+0x82>
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	4a2e      	ldr	r2, [pc, #184]	@ (800a0b0 <USB_SetTurnaroundTime+0x130>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d802      	bhi.n	800a002 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ffc:	230b      	movs	r3, #11
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	e036      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	4a2a      	ldr	r2, [pc, #168]	@ (800a0b0 <USB_SetTurnaroundTime+0x130>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d906      	bls.n	800a018 <USB_SetTurnaroundTime+0x98>
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	4a29      	ldr	r2, [pc, #164]	@ (800a0b4 <USB_SetTurnaroundTime+0x134>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d802      	bhi.n	800a018 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a012:	230a      	movs	r3, #10
 800a014:	617b      	str	r3, [r7, #20]
 800a016:	e02b      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	4a26      	ldr	r2, [pc, #152]	@ (800a0b4 <USB_SetTurnaroundTime+0x134>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d906      	bls.n	800a02e <USB_SetTurnaroundTime+0xae>
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	4a25      	ldr	r2, [pc, #148]	@ (800a0b8 <USB_SetTurnaroundTime+0x138>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d202      	bcs.n	800a02e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a028:	2309      	movs	r3, #9
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	e020      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	4a21      	ldr	r2, [pc, #132]	@ (800a0b8 <USB_SetTurnaroundTime+0x138>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d306      	bcc.n	800a044 <USB_SetTurnaroundTime+0xc4>
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	4a20      	ldr	r2, [pc, #128]	@ (800a0bc <USB_SetTurnaroundTime+0x13c>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d802      	bhi.n	800a044 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a03e:	2308      	movs	r3, #8
 800a040:	617b      	str	r3, [r7, #20]
 800a042:	e015      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	4a1d      	ldr	r2, [pc, #116]	@ (800a0bc <USB_SetTurnaroundTime+0x13c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d906      	bls.n	800a05a <USB_SetTurnaroundTime+0xda>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	4a1c      	ldr	r2, [pc, #112]	@ (800a0c0 <USB_SetTurnaroundTime+0x140>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d202      	bcs.n	800a05a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a054:	2307      	movs	r3, #7
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	e00a      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a05a:	2306      	movs	r3, #6
 800a05c:	617b      	str	r3, [r7, #20]
 800a05e:	e007      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d102      	bne.n	800a06c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a066:	2309      	movs	r3, #9
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e001      	b.n	800a070 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a06c:	2309      	movs	r3, #9
 800a06e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68da      	ldr	r2, [r3, #12]
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	029b      	lsls	r3, r3, #10
 800a084:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a088:	431a      	orrs	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	00d8acbf 	.word	0x00d8acbf
 800a0a0:	00e4e1c0 	.word	0x00e4e1c0
 800a0a4:	00f42400 	.word	0x00f42400
 800a0a8:	01067380 	.word	0x01067380
 800a0ac:	011a499f 	.word	0x011a499f
 800a0b0:	01312cff 	.word	0x01312cff
 800a0b4:	014ca43f 	.word	0x014ca43f
 800a0b8:	016e3600 	.word	0x016e3600
 800a0bc:	01a6ab1f 	.word	0x01a6ab1f
 800a0c0:	01e84800 	.word	0x01e84800

0800a0c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f043 0201 	orr.w	r2, r3, #1
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f023 0201 	bic.w	r2, r3, #1
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d115      	bne.n	800a156 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a136:	200a      	movs	r0, #10
 800a138:	f7fa f946 	bl	80043c8 <HAL_Delay>
      ms += 10U;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	330a      	adds	r3, #10
 800a140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f001 f93f 	bl	800b3c6 <USB_GetMode>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d01e      	beq.n	800a18c <USB_SetCurrentMode+0x84>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2bc7      	cmp	r3, #199	@ 0xc7
 800a152:	d9f0      	bls.n	800a136 <USB_SetCurrentMode+0x2e>
 800a154:	e01a      	b.n	800a18c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a156:	78fb      	ldrb	r3, [r7, #3]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d115      	bne.n	800a188 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a168:	200a      	movs	r0, #10
 800a16a:	f7fa f92d 	bl	80043c8 <HAL_Delay>
      ms += 10U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	330a      	adds	r3, #10
 800a172:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 f926 	bl	800b3c6 <USB_GetMode>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d005      	beq.n	800a18c <USB_SetCurrentMode+0x84>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2bc7      	cmp	r3, #199	@ 0xc7
 800a184:	d9f0      	bls.n	800a168 <USB_SetCurrentMode+0x60>
 800a186:	e001      	b.n	800a18c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e005      	b.n	800a198 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2bc8      	cmp	r3, #200	@ 0xc8
 800a190:	d101      	bne.n	800a196 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e000      	b.n	800a198 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b086      	sub	sp, #24
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a1ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	613b      	str	r3, [r7, #16]
 800a1be:	e009      	b.n	800a1d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	3340      	adds	r3, #64	@ 0x40
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b0e      	cmp	r3, #14
 800a1d8:	d9f2      	bls.n	800a1c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a1da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d11c      	bne.n	800a21c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1f0:	f043 0302 	orr.w	r3, r3, #2
 800a1f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a206:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	639a      	str	r2, [r3, #56]	@ 0x38
 800a21a:	e00b      	b.n	800a234 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a220:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a22c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a23a:	461a      	mov	r2, r3
 800a23c:	2300      	movs	r3, #0
 800a23e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a240:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a244:	2b01      	cmp	r3, #1
 800a246:	d10d      	bne.n	800a264 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d104      	bne.n	800a25a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a250:	2100      	movs	r1, #0
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f968 	bl	800a528 <USB_SetDevSpeed>
 800a258:	e008      	b.n	800a26c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a25a:	2101      	movs	r1, #1
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f963 	bl	800a528 <USB_SetDevSpeed>
 800a262:	e003      	b.n	800a26c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a264:	2103      	movs	r1, #3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f95e 	bl	800a528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a26c:	2110      	movs	r1, #16
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f8fa 	bl	800a468 <USB_FlushTxFifo>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f924 	bl	800a4cc <USB_FlushRxFifo>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a294:	461a      	mov	r2, r3
 800a296:	2300      	movs	r3, #0
 800a298:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	613b      	str	r3, [r7, #16]
 800a2b6:	e043      	b.n	800a340 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2ce:	d118      	bne.n	800a302 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10a      	bne.n	800a2ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a2e8:	6013      	str	r3, [r2, #0]
 800a2ea:	e013      	b.n	800a314 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	e008      	b.n	800a314 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	015a      	lsls	r2, r3, #5
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4413      	add	r3, r2
 800a30a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a30e:	461a      	mov	r2, r3
 800a310:	2300      	movs	r3, #0
 800a312:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a320:	461a      	mov	r2, r3
 800a322:	2300      	movs	r3, #0
 800a324:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	015a      	lsls	r2, r3, #5
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a332:	461a      	mov	r2, r3
 800a334:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	3301      	adds	r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a344:	461a      	mov	r2, r3
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	4293      	cmp	r3, r2
 800a34a:	d3b5      	bcc.n	800a2b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a34c:	2300      	movs	r3, #0
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	e043      	b.n	800a3da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	015a      	lsls	r2, r3, #5
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	4413      	add	r3, r2
 800a35a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a368:	d118      	bne.n	800a39c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10a      	bne.n	800a386 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37c:	461a      	mov	r2, r3
 800a37e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	e013      	b.n	800a3ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a392:	461a      	mov	r2, r3
 800a394:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	e008      	b.n	800a3ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	015a      	lsls	r2, r3, #5
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	2300      	movs	r3, #0
 800a3be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a3d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3de:	461a      	mov	r2, r3
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d3b5      	bcc.n	800a352 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a406:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a408:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d105      	bne.n	800a41c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	f043 0210 	orr.w	r2, r3, #16
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699a      	ldr	r2, [r3, #24]
 800a420:	4b10      	ldr	r3, [pc, #64]	@ (800a464 <USB_DevInit+0x2c4>)
 800a422:	4313      	orrs	r3, r2
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a428:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	f043 0208 	orr.w	r2, r3, #8
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a43c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a440:	2b01      	cmp	r3, #1
 800a442:	d107      	bne.n	800a454 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a44c:	f043 0304 	orr.w	r3, r3, #4
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a454:	7dfb      	ldrb	r3, [r7, #23]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a460:	b004      	add	sp, #16
 800a462:	4770      	bx	lr
 800a464:	803c3800 	.word	0x803c3800

0800a468 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a482:	d901      	bls.n	800a488 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a484:	2303      	movs	r3, #3
 800a486:	e01b      	b.n	800a4c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	daf2      	bge.n	800a476 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	019b      	lsls	r3, r3, #6
 800a498:	f043 0220 	orr.w	r2, r3, #32
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4ac:	d901      	bls.n	800a4b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e006      	b.n	800a4c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b20      	cmp	r3, #32
 800a4bc:	d0f0      	beq.n	800a4a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4e4:	d901      	bls.n	800a4ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e018      	b.n	800a51c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	daf2      	bge.n	800a4d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2210      	movs	r2, #16
 800a4fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3301      	adds	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a508:	d901      	bls.n	800a50e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e006      	b.n	800a51c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f003 0310 	and.w	r3, r3, #16
 800a516:	2b10      	cmp	r3, #16
 800a518:	d0f0      	beq.n	800a4fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	68f9      	ldr	r1, [r7, #12]
 800a544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a548:	4313      	orrs	r3, r2
 800a54a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b087      	sub	sp, #28
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f003 0306 	and.w	r3, r3, #6
 800a572:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d102      	bne.n	800a580 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a57a:	2300      	movs	r3, #0
 800a57c:	75fb      	strb	r3, [r7, #23]
 800a57e:	e00a      	b.n	800a596 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b02      	cmp	r3, #2
 800a584:	d002      	beq.n	800a58c <USB_GetDevSpeed+0x32>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b06      	cmp	r3, #6
 800a58a:	d102      	bne.n	800a592 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a58c:	2302      	movs	r3, #2
 800a58e:	75fb      	strb	r3, [r7, #23]
 800a590:	e001      	b.n	800a596 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a592:	230f      	movs	r3, #15
 800a594:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	785b      	ldrb	r3, [r3, #1]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d13a      	bne.n	800a636 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c6:	69da      	ldr	r2, [r3, #28]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	f003 030f 	and.w	r3, r3, #15
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d155      	bne.n	800a6a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	791b      	ldrb	r3, [r3, #4]
 800a612:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a614:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	059b      	lsls	r3, r3, #22
 800a61a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a61c:	4313      	orrs	r3, r2
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	0151      	lsls	r1, r2, #5
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	440a      	add	r2, r1
 800a626:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a62a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a62e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	e036      	b.n	800a6a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a63c:	69da      	ldr	r2, [r3, #28]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	2101      	movs	r1, #1
 800a648:	fa01 f303 	lsl.w	r3, r1, r3
 800a64c:	041b      	lsls	r3, r3, #16
 800a64e:	68f9      	ldr	r1, [r7, #12]
 800a650:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a654:	4313      	orrs	r3, r2
 800a656:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d11a      	bne.n	800a6a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	791b      	ldrb	r3, [r3, #4]
 800a688:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a68a:	430b      	orrs	r3, r1
 800a68c:	4313      	orrs	r3, r2
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	0151      	lsls	r1, r2, #5
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	440a      	add	r2, r1
 800a696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a69a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a69e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	785b      	ldrb	r3, [r3, #1]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d161      	bne.n	800a794 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6e6:	d11f      	bne.n	800a728 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	0151      	lsls	r1, r2, #5
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	440a      	add	r2, r1
 800a6fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a706:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	0151      	lsls	r1, r2, #5
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	440a      	add	r2, r1
 800a71e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a722:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a72e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	f003 030f 	and.w	r3, r3, #15
 800a738:	2101      	movs	r1, #1
 800a73a:	fa01 f303 	lsl.w	r3, r1, r3
 800a73e:	b29b      	uxth	r3, r3
 800a740:	43db      	mvns	r3, r3
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a748:	4013      	ands	r3, r2
 800a74a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a752:	69da      	ldr	r2, [r3, #28]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	f003 030f 	and.w	r3, r3, #15
 800a75c:	2101      	movs	r1, #1
 800a75e:	fa01 f303 	lsl.w	r3, r1, r3
 800a762:	b29b      	uxth	r3, r3
 800a764:	43db      	mvns	r3, r3
 800a766:	68f9      	ldr	r1, [r7, #12]
 800a768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a76c:	4013      	ands	r3, r2
 800a76e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	0159      	lsls	r1, r3, #5
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	440b      	add	r3, r1
 800a786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a78a:	4619      	mov	r1, r3
 800a78c:	4b35      	ldr	r3, [pc, #212]	@ (800a864 <USB_DeactivateEndpoint+0x1b0>)
 800a78e:	4013      	ands	r3, r2
 800a790:	600b      	str	r3, [r1, #0]
 800a792:	e060      	b.n	800a856 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7aa:	d11f      	bne.n	800a7ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	0151      	lsls	r1, r2, #5
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	440a      	add	r2, r1
 800a7c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a7ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	0151      	lsls	r1, r2, #5
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	440a      	add	r2, r1
 800a7e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	f003 030f 	and.w	r3, r3, #15
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a802:	041b      	lsls	r3, r3, #16
 800a804:	43db      	mvns	r3, r3
 800a806:	68f9      	ldr	r1, [r7, #12]
 800a808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a80c:	4013      	ands	r3, r2
 800a80e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a816:	69da      	ldr	r2, [r3, #28]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f003 030f 	and.w	r3, r3, #15
 800a820:	2101      	movs	r1, #1
 800a822:	fa01 f303 	lsl.w	r3, r1, r3
 800a826:	041b      	lsls	r3, r3, #16
 800a828:	43db      	mvns	r3, r3
 800a82a:	68f9      	ldr	r1, [r7, #12]
 800a82c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a830:	4013      	ands	r3, r2
 800a832:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	015a      	lsls	r2, r3, #5
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	4413      	add	r3, r2
 800a83c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	0159      	lsls	r1, r3, #5
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	440b      	add	r3, r1
 800a84a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a84e:	4619      	mov	r1, r3
 800a850:	4b05      	ldr	r3, [pc, #20]	@ (800a868 <USB_DeactivateEndpoint+0x1b4>)
 800a852:	4013      	ands	r3, r2
 800a854:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	ec337800 	.word	0xec337800
 800a868:	eff37800 	.word	0xeff37800

0800a86c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08a      	sub	sp, #40	@ 0x28
 800a870:	af02      	add	r7, sp, #8
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4613      	mov	r3, r2
 800a878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	f040 817f 	bne.w	800ab8c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d132      	bne.n	800a8fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	0151      	lsls	r1, r2, #5
 800a8a8:	69fa      	ldr	r2, [r7, #28]
 800a8aa:	440a      	add	r2, r1
 800a8ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8b0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a8b4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a8b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	015a      	lsls	r2, r3, #5
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	0151      	lsls	r1, r2, #5
 800a8cc:	69fa      	ldr	r2, [r7, #28]
 800a8ce:	440a      	add	r2, r1
 800a8d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	015a      	lsls	r2, r3, #5
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	0151      	lsls	r1, r2, #5
 800a8ec:	69fa      	ldr	r2, [r7, #28]
 800a8ee:	440a      	add	r2, r1
 800a8f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8f4:	0cdb      	lsrs	r3, r3, #19
 800a8f6:	04db      	lsls	r3, r3, #19
 800a8f8:	6113      	str	r3, [r2, #16]
 800a8fa:	e097      	b.n	800aa2c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	4413      	add	r3, r2
 800a904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	0151      	lsls	r1, r2, #5
 800a90e:	69fa      	ldr	r2, [r7, #28]
 800a910:	440a      	add	r2, r1
 800a912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a916:	0cdb      	lsrs	r3, r3, #19
 800a918:	04db      	lsls	r3, r3, #19
 800a91a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	69fa      	ldr	r2, [r7, #28]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a936:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a93a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a93e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d11a      	bne.n	800a97c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	691a      	ldr	r2, [r3, #16]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d903      	bls.n	800a95a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	689a      	ldr	r2, [r3, #8]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	0151      	lsls	r1, r2, #5
 800a96c:	69fa      	ldr	r2, [r7, #28]
 800a96e:	440a      	add	r2, r1
 800a970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a974:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a978:	6113      	str	r3, [r2, #16]
 800a97a:	e044      	b.n	800aa06 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	691a      	ldr	r2, [r3, #16]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	4413      	add	r3, r2
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a990:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a99e:	691a      	ldr	r2, [r3, #16]
 800a9a0:	8afb      	ldrh	r3, [r7, #22]
 800a9a2:	04d9      	lsls	r1, r3, #19
 800a9a4:	4ba4      	ldr	r3, [pc, #656]	@ (800ac38 <USB_EPStartXfer+0x3cc>)
 800a9a6:	400b      	ands	r3, r1
 800a9a8:	69b9      	ldr	r1, [r7, #24]
 800a9aa:	0148      	lsls	r0, r1, #5
 800a9ac:	69f9      	ldr	r1, [r7, #28]
 800a9ae:	4401      	add	r1, r0
 800a9b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	791b      	ldrb	r3, [r3, #4]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d122      	bne.n	800aa06 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	0151      	lsls	r1, r2, #5
 800a9d2:	69fa      	ldr	r2, [r7, #28]
 800a9d4:	440a      	add	r2, r1
 800a9d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9da:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a9de:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ec:	691a      	ldr	r2, [r3, #16]
 800a9ee:	8afb      	ldrh	r3, [r7, #22]
 800a9f0:	075b      	lsls	r3, r3, #29
 800a9f2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a9f6:	69b9      	ldr	r1, [r7, #24]
 800a9f8:	0148      	lsls	r0, r1, #5
 800a9fa:	69f9      	ldr	r1, [r7, #28]
 800a9fc:	4401      	add	r1, r0
 800a9fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aa02:	4313      	orrs	r3, r2
 800aa04:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa12:	691a      	ldr	r2, [r3, #16]
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa1c:	69b9      	ldr	r1, [r7, #24]
 800aa1e:	0148      	lsls	r0, r1, #5
 800aa20:	69f9      	ldr	r1, [r7, #28]
 800aa22:	4401      	add	r1, r0
 800aa24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d14b      	bne.n	800aaca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d009      	beq.n	800aa4e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa46:	461a      	mov	r2, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	791b      	ldrb	r3, [r3, #4]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d128      	bne.n	800aaa8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d110      	bne.n	800aa88 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	0151      	lsls	r1, r2, #5
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	440a      	add	r2, r1
 800aa7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	e00f      	b.n	800aaa8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69ba      	ldr	r2, [r7, #24]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	69fa      	ldr	r2, [r7, #28]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaa6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69ba      	ldr	r2, [r7, #24]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	69fa      	ldr	r2, [r7, #28]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aac2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aac6:	6013      	str	r3, [r2, #0]
 800aac8:	e166      	b.n	800ad98 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	015a      	lsls	r2, r3, #5
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	4413      	add	r3, r2
 800aad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	0151      	lsls	r1, r2, #5
 800aadc:	69fa      	ldr	r2, [r7, #28]
 800aade:	440a      	add	r2, r1
 800aae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aae4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aae8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	791b      	ldrb	r3, [r3, #4]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d015      	beq.n	800ab1e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 814e 	beq.w	800ad98 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	f003 030f 	and.w	r3, r3, #15
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab12:	69f9      	ldr	r1, [r7, #28]
 800ab14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	634b      	str	r3, [r1, #52]	@ 0x34
 800ab1c:	e13c      	b.n	800ad98 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d110      	bne.n	800ab50 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	0151      	lsls	r1, r2, #5
 800ab40:	69fa      	ldr	r2, [r7, #28]
 800ab42:	440a      	add	r2, r1
 800ab44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	e00f      	b.n	800ab70 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	0151      	lsls	r1, r2, #5
 800ab62:	69fa      	ldr	r2, [r7, #28]
 800ab64:	440a      	add	r2, r1
 800ab66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab6e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	68d9      	ldr	r1, [r3, #12]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	781a      	ldrb	r2, [r3, #0]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	b298      	uxth	r0, r3
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	4603      	mov	r3, r0
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f000 f9b9 	bl	800aefc <USB_WritePacket>
 800ab8a:	e105      	b.n	800ad98 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	69ba      	ldr	r2, [r7, #24]
 800ab9c:	0151      	lsls	r1, r2, #5
 800ab9e:	69fa      	ldr	r2, [r7, #28]
 800aba0:	440a      	add	r2, r1
 800aba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aba6:	0cdb      	lsrs	r3, r3, #19
 800aba8:	04db      	lsls	r3, r3, #19
 800abaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	0151      	lsls	r1, r2, #5
 800abbe:	69fa      	ldr	r2, [r7, #28]
 800abc0:	440a      	add	r2, r1
 800abc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abc6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800abca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800abce:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d132      	bne.n	800ac3c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	689a      	ldr	r2, [r3, #8]
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abfa:	691a      	ldr	r2, [r3, #16]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac04:	69b9      	ldr	r1, [r7, #24]
 800ac06:	0148      	lsls	r0, r1, #5
 800ac08:	69f9      	ldr	r1, [r7, #28]
 800ac0a:	4401      	add	r1, r0
 800ac0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac10:	4313      	orrs	r3, r2
 800ac12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	69ba      	ldr	r2, [r7, #24]
 800ac24:	0151      	lsls	r1, r2, #5
 800ac26:	69fa      	ldr	r2, [r7, #28]
 800ac28:	440a      	add	r2, r1
 800ac2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac32:	6113      	str	r3, [r2, #16]
 800ac34:	e062      	b.n	800acfc <USB_EPStartXfer+0x490>
 800ac36:	bf00      	nop
 800ac38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d123      	bne.n	800ac8c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac50:	691a      	ldr	r2, [r3, #16]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac5a:	69b9      	ldr	r1, [r7, #24]
 800ac5c:	0148      	lsls	r0, r1, #5
 800ac5e:	69f9      	ldr	r1, [r7, #28]
 800ac60:	4401      	add	r1, r0
 800ac62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac66:	4313      	orrs	r3, r2
 800ac68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	69ba      	ldr	r2, [r7, #24]
 800ac7a:	0151      	lsls	r1, r2, #5
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	440a      	add	r2, r1
 800ac80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac88:	6113      	str	r3, [r2, #16]
 800ac8a:	e037      	b.n	800acfc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	691a      	ldr	r2, [r3, #16]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	4413      	add	r3, r2
 800ac96:	1e5a      	subs	r2, r3, #1
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	8afa      	ldrh	r2, [r7, #22]
 800aca8:	fb03 f202 	mul.w	r2, r3, r2
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	015a      	lsls	r2, r3, #5
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	4413      	add	r3, r2
 800acb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acbc:	691a      	ldr	r2, [r3, #16]
 800acbe:	8afb      	ldrh	r3, [r7, #22]
 800acc0:	04d9      	lsls	r1, r3, #19
 800acc2:	4b38      	ldr	r3, [pc, #224]	@ (800ada4 <USB_EPStartXfer+0x538>)
 800acc4:	400b      	ands	r3, r1
 800acc6:	69b9      	ldr	r1, [r7, #24]
 800acc8:	0148      	lsls	r0, r1, #5
 800acca:	69f9      	ldr	r1, [r7, #28]
 800accc:	4401      	add	r1, r0
 800acce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800acd2:	4313      	orrs	r3, r2
 800acd4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ace2:	691a      	ldr	r2, [r3, #16]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	6a1b      	ldr	r3, [r3, #32]
 800ace8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acec:	69b9      	ldr	r1, [r7, #24]
 800acee:	0148      	lsls	r0, r1, #5
 800acf0:	69f9      	ldr	r1, [r7, #28]
 800acf2:	4401      	add	r1, r0
 800acf4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800acf8:	4313      	orrs	r3, r2
 800acfa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d10d      	bne.n	800ad1e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d009      	beq.n	800ad1e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	68d9      	ldr	r1, [r3, #12]
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad1a:	460a      	mov	r2, r1
 800ad1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	791b      	ldrb	r3, [r3, #4]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d128      	bne.n	800ad78 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d110      	bne.n	800ad58 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	0151      	lsls	r1, r2, #5
 800ad48:	69fa      	ldr	r2, [r7, #28]
 800ad4a:	440a      	add	r2, r1
 800ad4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	e00f      	b.n	800ad78 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	69fa      	ldr	r2, [r7, #28]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	0151      	lsls	r1, r2, #5
 800ad8a:	69fa      	ldr	r2, [r7, #28]
 800ad8c:	440a      	add	r2, r1
 800ad8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	1ff80000 	.word	0x1ff80000

0800ada8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	785b      	ldrb	r3, [r3, #1]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d14a      	bne.n	800ae5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adde:	f040 8086 	bne.w	800aeee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	7812      	ldrb	r2, [r2, #0]
 800adf6:	0151      	lsls	r1, r2, #5
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	440a      	add	r2, r1
 800adfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	015a      	lsls	r2, r3, #5
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	7812      	ldrb	r2, [r2, #0]
 800ae1a:	0151      	lsls	r1, r2, #5
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	440a      	add	r2, r1
 800ae20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d902      	bls.n	800ae40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae3e:	e056      	b.n	800aeee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae58:	d0e7      	beq.n	800ae2a <USB_EPStopXfer+0x82>
 800ae5a:	e048      	b.n	800aeee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	015a      	lsls	r2, r3, #5
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	4413      	add	r3, r2
 800ae66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae74:	d13b      	bne.n	800aeee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	7812      	ldrb	r2, [r2, #0]
 800ae8a:	0151      	lsls	r1, r2, #5
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	440a      	add	r2, r1
 800ae90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	7812      	ldrb	r2, [r2, #0]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aeb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aebc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3301      	adds	r3, #1
 800aec2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d902      	bls.n	800aed4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	75fb      	strb	r3, [r7, #23]
          break;
 800aed2:	e00c      	b.n	800aeee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	015a      	lsls	r2, r3, #5
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	4413      	add	r3, r2
 800aede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aeec:	d0e7      	beq.n	800aebe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	371c      	adds	r7, #28
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b089      	sub	sp, #36	@ 0x24
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	4611      	mov	r1, r2
 800af08:	461a      	mov	r2, r3
 800af0a:	460b      	mov	r3, r1
 800af0c:	71fb      	strb	r3, [r7, #7]
 800af0e:	4613      	mov	r3, r2
 800af10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800af1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d123      	bne.n	800af6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800af22:	88bb      	ldrh	r3, [r7, #4]
 800af24:	3303      	adds	r3, #3
 800af26:	089b      	lsrs	r3, r3, #2
 800af28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800af2a:	2300      	movs	r3, #0
 800af2c:	61bb      	str	r3, [r7, #24]
 800af2e:	e018      	b.n	800af62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af30:	79fb      	ldrb	r3, [r7, #7]
 800af32:	031a      	lsls	r2, r3, #12
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	4413      	add	r3, r2
 800af38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af3c:	461a      	mov	r2, r3
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	3301      	adds	r3, #1
 800af48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	3301      	adds	r3, #1
 800af4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	3301      	adds	r3, #1
 800af54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	3301      	adds	r3, #1
 800af5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	3301      	adds	r3, #1
 800af60:	61bb      	str	r3, [r7, #24]
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	429a      	cmp	r2, r3
 800af68:	d3e2      	bcc.n	800af30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3724      	adds	r7, #36	@ 0x24
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af78:	b480      	push	{r7}
 800af7a:	b08b      	sub	sp, #44	@ 0x2c
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	4613      	mov	r3, r2
 800af84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af8e:	88fb      	ldrh	r3, [r7, #6]
 800af90:	089b      	lsrs	r3, r3, #2
 800af92:	b29b      	uxth	r3, r3
 800af94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af96:	88fb      	ldrh	r3, [r7, #6]
 800af98:	f003 0303 	and.w	r3, r3, #3
 800af9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af9e:	2300      	movs	r3, #0
 800afa0:	623b      	str	r3, [r7, #32]
 800afa2:	e014      	b.n	800afce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afae:	601a      	str	r2, [r3, #0]
    pDest++;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb2:	3301      	adds	r3, #1
 800afb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800afb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb8:	3301      	adds	r3, #1
 800afba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800afbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afbe:	3301      	adds	r3, #1
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800afc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc4:	3301      	adds	r3, #1
 800afc6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	3301      	adds	r3, #1
 800afcc:	623b      	str	r3, [r7, #32]
 800afce:	6a3a      	ldr	r2, [r7, #32]
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d3e6      	bcc.n	800afa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afd6:	8bfb      	ldrh	r3, [r7, #30]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d01e      	beq.n	800b01a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afe6:	461a      	mov	r2, r3
 800afe8:	f107 0310 	add.w	r3, r7, #16
 800afec:	6812      	ldr	r2, [r2, #0]
 800afee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	6a3b      	ldr	r3, [r7, #32]
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
 800affc:	b2da      	uxtb	r2, r3
 800affe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b000:	701a      	strb	r2, [r3, #0]
      i++;
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	3301      	adds	r3, #1
 800b006:	623b      	str	r3, [r7, #32]
      pDest++;
 800b008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00a:	3301      	adds	r3, #1
 800b00c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b00e:	8bfb      	ldrh	r3, [r7, #30]
 800b010:	3b01      	subs	r3, #1
 800b012:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b014:	8bfb      	ldrh	r3, [r7, #30]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1ea      	bne.n	800aff0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	372c      	adds	r7, #44	@ 0x2c
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	785b      	ldrb	r3, [r3, #1]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d12c      	bne.n	800b09e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	db12      	blt.n	800b07c <USB_EPSetStall+0x54>
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00f      	beq.n	800b07c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	0151      	lsls	r1, r2, #5
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	440a      	add	r2, r1
 800b072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b076:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b07a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	0151      	lsls	r1, r2, #5
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	440a      	add	r2, r1
 800b092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b096:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	e02b      	b.n	800b0f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	db12      	blt.n	800b0d6 <USB_EPSetStall+0xae>
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00f      	beq.n	800b0d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b0d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	0151      	lsls	r1, r2, #5
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	440a      	add	r2, r1
 800b0ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b0f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	785b      	ldrb	r3, [r3, #1]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d128      	bne.n	800b172 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	0151      	lsls	r1, r2, #5
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	440a      	add	r2, r1
 800b136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b13a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b13e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	791b      	ldrb	r3, [r3, #4]
 800b144:	2b03      	cmp	r3, #3
 800b146:	d003      	beq.n	800b150 <USB_EPClearStall+0x4c>
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	791b      	ldrb	r3, [r3, #4]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d138      	bne.n	800b1c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4413      	add	r3, r2
 800b158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	0151      	lsls	r1, r2, #5
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	440a      	add	r2, r1
 800b166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b16a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	e027      	b.n	800b1c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	0151      	lsls	r1, r2, #5
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	440a      	add	r2, r1
 800b188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b18c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b190:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	791b      	ldrb	r3, [r3, #4]
 800b196:	2b03      	cmp	r3, #3
 800b198:	d003      	beq.n	800b1a2 <USB_EPClearStall+0x9e>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	791b      	ldrb	r3, [r3, #4]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d10f      	bne.n	800b1c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	015a      	lsls	r2, r3, #5
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	0151      	lsls	r1, r2, #5
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	440a      	add	r2, r1
 800b1b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b1f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	78fb      	ldrb	r3, [r7, #3]
 800b1fe:	011b      	lsls	r3, r3, #4
 800b200:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b204:	68f9      	ldr	r1, [r7, #12]
 800b206:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b20a:	4313      	orrs	r3, r2
 800b20c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b236:	f023 0303 	bic.w	r3, r3, #3
 800b23a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b24a:	f023 0302 	bic.w	r3, r3, #2
 800b24e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b25e:	b480      	push	{r7}
 800b260:	b085      	sub	sp, #20
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b278:	f023 0303 	bic.w	r3, r3, #3
 800b27c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b28c:	f043 0302 	orr.w	r3, r3, #2
 800b290:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b085      	sub	sp, #20
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	0c1b      	lsrs	r3, r3, #16
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b316:	69db      	ldr	r3, [r3, #28]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	4013      	ands	r3, r2
 800b31c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	b29b      	uxth	r3, r3
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b32e:	b480      	push	{r7}
 800b330:	b085      	sub	sp, #20
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	460b      	mov	r3, r1
 800b338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b33e:	78fb      	ldrb	r3, [r7, #3]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	4013      	ands	r3, r2
 800b35a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b35c:	68bb      	ldr	r3, [r7, #8]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b087      	sub	sp, #28
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	460b      	mov	r3, r1
 800b374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b38a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b38c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b38e:	78fb      	ldrb	r3, [r7, #3]
 800b390:	f003 030f 	and.w	r3, r3, #15
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	fa22 f303 	lsr.w	r3, r2, r3
 800b39a:	01db      	lsls	r3, r3, #7
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b3a4:	78fb      	ldrb	r3, [r7, #3]
 800b3a6:	015a      	lsls	r2, r3, #5
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	371c      	adds	r7, #28
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	f003 0301 	and.w	r3, r3, #1
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b085      	sub	sp, #20
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b400:	f023 0307 	bic.w	r3, r3, #7
 800b404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	460b      	mov	r3, r1
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	333c      	adds	r3, #60	@ 0x3c
 800b43e:	3304      	adds	r3, #4
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	4a26      	ldr	r2, [pc, #152]	@ (800b4e0 <USB_EP0_OutStart+0xb8>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d90a      	bls.n	800b462 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b45c:	d101      	bne.n	800b462 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	e037      	b.n	800b4d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b468:	461a      	mov	r2, r3
 800b46a:	2300      	movs	r3, #0
 800b46c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b47c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b490:	f043 0318 	orr.w	r3, r3, #24
 800b494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b4a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b4aa:	7afb      	ldrb	r3, [r7, #11]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d10f      	bne.n	800b4d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b4ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	371c      	adds	r7, #28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	4f54300a 	.word	0x4f54300a

0800b4e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4fc:	d901      	bls.n	800b502 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e01b      	b.n	800b53a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	daf2      	bge.n	800b4f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	f043 0201 	orr.w	r2, r3, #1
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3301      	adds	r3, #1
 800b51e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b526:	d901      	bls.n	800b52c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b528:	2303      	movs	r3, #3
 800b52a:	e006      	b.n	800b53a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	2b01      	cmp	r3, #1
 800b536:	d0f0      	beq.n	800b51a <USB_CoreReset+0x36>

  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
	...

0800b548 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	460b      	mov	r3, r1
 800b552:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b554:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b558:	f002 fc9e 	bl	800de98 <USBD_static_malloc>
 800b55c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d109      	bne.n	800b578 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	32b0      	adds	r2, #176	@ 0xb0
 800b56e:	2100      	movs	r1, #0
 800b570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b574:	2302      	movs	r3, #2
 800b576:	e0d4      	b.n	800b722 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b578:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b57c:	2100      	movs	r1, #0
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f003 fad5 	bl	800eb2e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	32b0      	adds	r2, #176	@ 0xb0
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	32b0      	adds	r2, #176	@ 0xb0
 800b59e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	7c1b      	ldrb	r3, [r3, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d138      	bne.n	800b622 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b5b0:	4b5e      	ldr	r3, [pc, #376]	@ (800b72c <USBD_CDC_Init+0x1e4>)
 800b5b2:	7819      	ldrb	r1, [r3, #0]
 800b5b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f002 fb49 	bl	800dc52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b5c0:	4b5a      	ldr	r3, [pc, #360]	@ (800b72c <USBD_CDC_Init+0x1e4>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	f003 020f 	and.w	r2, r3, #15
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	440b      	add	r3, r1
 800b5d4:	3324      	adds	r3, #36	@ 0x24
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b5da:	4b55      	ldr	r3, [pc, #340]	@ (800b730 <USBD_CDC_Init+0x1e8>)
 800b5dc:	7819      	ldrb	r1, [r3, #0]
 800b5de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f002 fb34 	bl	800dc52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b5ea:	4b51      	ldr	r3, [pc, #324]	@ (800b730 <USBD_CDC_Init+0x1e8>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	f003 020f 	and.w	r2, r3, #15
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	440b      	add	r3, r1
 800b5fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b602:	2201      	movs	r2, #1
 800b604:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b606:	4b4b      	ldr	r3, [pc, #300]	@ (800b734 <USBD_CDC_Init+0x1ec>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	f003 020f 	and.w	r2, r3, #15
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	3326      	adds	r3, #38	@ 0x26
 800b61c:	2210      	movs	r2, #16
 800b61e:	801a      	strh	r2, [r3, #0]
 800b620:	e035      	b.n	800b68e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b622:	4b42      	ldr	r3, [pc, #264]	@ (800b72c <USBD_CDC_Init+0x1e4>)
 800b624:	7819      	ldrb	r1, [r3, #0]
 800b626:	2340      	movs	r3, #64	@ 0x40
 800b628:	2202      	movs	r2, #2
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f002 fb11 	bl	800dc52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b630:	4b3e      	ldr	r3, [pc, #248]	@ (800b72c <USBD_CDC_Init+0x1e4>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	f003 020f 	and.w	r2, r3, #15
 800b638:	6879      	ldr	r1, [r7, #4]
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	440b      	add	r3, r1
 800b644:	3324      	adds	r3, #36	@ 0x24
 800b646:	2201      	movs	r2, #1
 800b648:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b64a:	4b39      	ldr	r3, [pc, #228]	@ (800b730 <USBD_CDC_Init+0x1e8>)
 800b64c:	7819      	ldrb	r1, [r3, #0]
 800b64e:	2340      	movs	r3, #64	@ 0x40
 800b650:	2202      	movs	r2, #2
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f002 fafd 	bl	800dc52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b658:	4b35      	ldr	r3, [pc, #212]	@ (800b730 <USBD_CDC_Init+0x1e8>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	f003 020f 	and.w	r2, r3, #15
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	4613      	mov	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	440b      	add	r3, r1
 800b66c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b670:	2201      	movs	r2, #1
 800b672:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b674:	4b2f      	ldr	r3, [pc, #188]	@ (800b734 <USBD_CDC_Init+0x1ec>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	f003 020f 	and.w	r2, r3, #15
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	4613      	mov	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	440b      	add	r3, r1
 800b688:	3326      	adds	r3, #38	@ 0x26
 800b68a:	2210      	movs	r2, #16
 800b68c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b68e:	4b29      	ldr	r3, [pc, #164]	@ (800b734 <USBD_CDC_Init+0x1ec>)
 800b690:	7819      	ldrb	r1, [r3, #0]
 800b692:	2308      	movs	r3, #8
 800b694:	2203      	movs	r2, #3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f002 fadb 	bl	800dc52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b69c:	4b25      	ldr	r3, [pc, #148]	@ (800b734 <USBD_CDC_Init+0x1ec>)
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	f003 020f 	and.w	r2, r3, #15
 800b6a4:	6879      	ldr	r1, [r7, #4]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4413      	add	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	440b      	add	r3, r1
 800b6b0:	3324      	adds	r3, #36	@ 0x24
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	33b0      	adds	r3, #176	@ 0xb0
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4413      	add	r3, r2
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	e018      	b.n	800b722 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	7c1b      	ldrb	r3, [r3, #16]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10a      	bne.n	800b70e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b730 <USBD_CDC_Init+0x1e8>)
 800b6fa:	7819      	ldrb	r1, [r3, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f002 fb92 	bl	800de30 <USBD_LL_PrepareReceive>
 800b70c:	e008      	b.n	800b720 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b70e:	4b08      	ldr	r3, [pc, #32]	@ (800b730 <USBD_CDC_Init+0x1e8>)
 800b710:	7819      	ldrb	r1, [r3, #0]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b718:	2340      	movs	r3, #64	@ 0x40
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f002 fb88 	bl	800de30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	200000c3 	.word	0x200000c3
 800b730:	200000c4 	.word	0x200000c4
 800b734:	200000c5 	.word	0x200000c5

0800b738 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b744:	4b3a      	ldr	r3, [pc, #232]	@ (800b830 <USBD_CDC_DeInit+0xf8>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f002 faa7 	bl	800dc9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b750:	4b37      	ldr	r3, [pc, #220]	@ (800b830 <USBD_CDC_DeInit+0xf8>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	f003 020f 	and.w	r2, r3, #15
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	4613      	mov	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	440b      	add	r3, r1
 800b764:	3324      	adds	r3, #36	@ 0x24
 800b766:	2200      	movs	r2, #0
 800b768:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b76a:	4b32      	ldr	r3, [pc, #200]	@ (800b834 <USBD_CDC_DeInit+0xfc>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f002 fa94 	bl	800dc9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b776:	4b2f      	ldr	r3, [pc, #188]	@ (800b834 <USBD_CDC_DeInit+0xfc>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	f003 020f 	and.w	r2, r3, #15
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	4613      	mov	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4413      	add	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	440b      	add	r3, r1
 800b78a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b78e:	2200      	movs	r2, #0
 800b790:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b792:	4b29      	ldr	r3, [pc, #164]	@ (800b838 <USBD_CDC_DeInit+0x100>)
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f002 fa80 	bl	800dc9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b79e:	4b26      	ldr	r3, [pc, #152]	@ (800b838 <USBD_CDC_DeInit+0x100>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	f003 020f 	and.w	r2, r3, #15
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	440b      	add	r3, r1
 800b7b2:	3324      	adds	r3, #36	@ 0x24
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b7b8:	4b1f      	ldr	r3, [pc, #124]	@ (800b838 <USBD_CDC_DeInit+0x100>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	f003 020f 	and.w	r2, r3, #15
 800b7c0:	6879      	ldr	r1, [r7, #4]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	440b      	add	r3, r1
 800b7cc:	3326      	adds	r3, #38	@ 0x26
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	32b0      	adds	r2, #176	@ 0xb0
 800b7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d01f      	beq.n	800b824 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	33b0      	adds	r3, #176	@ 0xb0
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	32b0      	adds	r2, #176	@ 0xb0
 800b802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b806:	4618      	mov	r0, r3
 800b808:	f002 fb54 	bl	800deb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	32b0      	adds	r2, #176	@ 0xb0
 800b816:	2100      	movs	r1, #0
 800b818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	200000c3 	.word	0x200000c3
 800b834:	200000c4 	.word	0x200000c4
 800b838:	200000c5 	.word	0x200000c5

0800b83c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	32b0      	adds	r2, #176	@ 0xb0
 800b850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b854:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b868:	2303      	movs	r3, #3
 800b86a:	e0bf      	b.n	800b9ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b874:	2b00      	cmp	r3, #0
 800b876:	d050      	beq.n	800b91a <USBD_CDC_Setup+0xde>
 800b878:	2b20      	cmp	r3, #32
 800b87a:	f040 80af 	bne.w	800b9dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	88db      	ldrh	r3, [r3, #6]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d03a      	beq.n	800b8fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	b25b      	sxtb	r3, r3
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	da1b      	bge.n	800b8c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	33b0      	adds	r3, #176	@ 0xb0
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b8a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	88d2      	ldrh	r2, [r2, #6]
 800b8ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	88db      	ldrh	r3, [r3, #6]
 800b8b2:	2b07      	cmp	r3, #7
 800b8b4:	bf28      	it	cs
 800b8b6:	2307      	movcs	r3, #7
 800b8b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	89fa      	ldrh	r2, [r7, #14]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f001 fd93 	bl	800d3ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b8c6:	e090      	b.n	800b9ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	785a      	ldrb	r2, [r3, #1]
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	88db      	ldrh	r3, [r3, #6]
 800b8d6:	2b3f      	cmp	r3, #63	@ 0x3f
 800b8d8:	d803      	bhi.n	800b8e2 <USBD_CDC_Setup+0xa6>
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	88db      	ldrh	r3, [r3, #6]
 800b8de:	b2da      	uxtb	r2, r3
 800b8e0:	e000      	b.n	800b8e4 <USBD_CDC_Setup+0xa8>
 800b8e2:	2240      	movs	r2, #64	@ 0x40
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b8ea:	6939      	ldr	r1, [r7, #16]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f001 fda5 	bl	800d444 <USBD_CtlPrepareRx>
      break;
 800b8fa:	e076      	b.n	800b9ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	33b0      	adds	r3, #176	@ 0xb0
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	7850      	ldrb	r0, [r2, #1]
 800b912:	2200      	movs	r2, #0
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	4798      	blx	r3
      break;
 800b918:	e067      	b.n	800b9ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	785b      	ldrb	r3, [r3, #1]
 800b91e:	2b0b      	cmp	r3, #11
 800b920:	d851      	bhi.n	800b9c6 <USBD_CDC_Setup+0x18a>
 800b922:	a201      	add	r2, pc, #4	@ (adr r2, 800b928 <USBD_CDC_Setup+0xec>)
 800b924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b928:	0800b959 	.word	0x0800b959
 800b92c:	0800b9d5 	.word	0x0800b9d5
 800b930:	0800b9c7 	.word	0x0800b9c7
 800b934:	0800b9c7 	.word	0x0800b9c7
 800b938:	0800b9c7 	.word	0x0800b9c7
 800b93c:	0800b9c7 	.word	0x0800b9c7
 800b940:	0800b9c7 	.word	0x0800b9c7
 800b944:	0800b9c7 	.word	0x0800b9c7
 800b948:	0800b9c7 	.word	0x0800b9c7
 800b94c:	0800b9c7 	.word	0x0800b9c7
 800b950:	0800b983 	.word	0x0800b983
 800b954:	0800b9ad 	.word	0x0800b9ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b03      	cmp	r3, #3
 800b962:	d107      	bne.n	800b974 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b964:	f107 030a 	add.w	r3, r7, #10
 800b968:	2202      	movs	r2, #2
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 fd3d 	bl	800d3ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b972:	e032      	b.n	800b9da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f001 fcbb 	bl	800d2f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b97c:	2303      	movs	r3, #3
 800b97e:	75fb      	strb	r3, [r7, #23]
          break;
 800b980:	e02b      	b.n	800b9da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	2b03      	cmp	r3, #3
 800b98c:	d107      	bne.n	800b99e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b98e:	f107 030d 	add.w	r3, r7, #13
 800b992:	2201      	movs	r2, #1
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f001 fd28 	bl	800d3ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b99c:	e01d      	b.n	800b9da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f001 fca6 	bl	800d2f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b9aa:	e016      	b.n	800b9da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d00f      	beq.n	800b9d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f001 fc99 	bl	800d2f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b9c4:	e008      	b.n	800b9d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f001 fc92 	bl	800d2f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	75fb      	strb	r3, [r7, #23]
          break;
 800b9d2:	e002      	b.n	800b9da <USBD_CDC_Setup+0x19e>
          break;
 800b9d4:	bf00      	nop
 800b9d6:	e008      	b.n	800b9ea <USBD_CDC_Setup+0x1ae>
          break;
 800b9d8:	bf00      	nop
      }
      break;
 800b9da:	e006      	b.n	800b9ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f001 fc87 	bl	800d2f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9e8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	32b0      	adds	r2, #176	@ 0xb0
 800ba12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d101      	bne.n	800ba1e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e065      	b.n	800baea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	32b0      	adds	r2, #176	@ 0xb0
 800ba28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ba2e:	78fb      	ldrb	r3, [r7, #3]
 800ba30:	f003 020f 	and.w	r2, r3, #15
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	4613      	mov	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	440b      	add	r3, r1
 800ba40:	3318      	adds	r3, #24
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d02f      	beq.n	800baa8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	f003 020f 	and.w	r2, r3, #15
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	440b      	add	r3, r1
 800ba5a:	3318      	adds	r3, #24
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	78fb      	ldrb	r3, [r7, #3]
 800ba60:	f003 010f 	and.w	r1, r3, #15
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	460b      	mov	r3, r1
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	440b      	add	r3, r1
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4403      	add	r3, r0
 800ba70:	331c      	adds	r3, #28
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba78:	fb01 f303 	mul.w	r3, r1, r3
 800ba7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d112      	bne.n	800baa8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ba82:	78fb      	ldrb	r3, [r7, #3]
 800ba84:	f003 020f 	and.w	r2, r3, #15
 800ba88:	6879      	ldr	r1, [r7, #4]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	440b      	add	r3, r1
 800ba94:	3318      	adds	r3, #24
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba9a:	78f9      	ldrb	r1, [r7, #3]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	2200      	movs	r2, #0
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f002 f9a4 	bl	800ddee <USBD_LL_Transmit>
 800baa6:	e01f      	b.n	800bae8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2200      	movs	r2, #0
 800baac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	33b0      	adds	r3, #176	@ 0xb0
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d010      	beq.n	800bae8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	33b0      	adds	r3, #176	@ 0xb0
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4413      	add	r3, r2
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bae4:	78fa      	ldrb	r2, [r7, #3]
 800bae6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	460b      	mov	r3, r1
 800bafc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	32b0      	adds	r2, #176	@ 0xb0
 800bb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	32b0      	adds	r2, #176	@ 0xb0
 800bb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d101      	bne.n	800bb24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e01a      	b.n	800bb5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb24:	78fb      	ldrb	r3, [r7, #3]
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f002 f9a2 	bl	800de72 <USBD_LL_GetRxDataSize>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	33b0      	adds	r3, #176	@ 0xb0
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bb54:	4611      	mov	r1, r2
 800bb56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	32b0      	adds	r2, #176	@ 0xb0
 800bb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e024      	b.n	800bbce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	33b0      	adds	r3, #176	@ 0xb0
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d019      	beq.n	800bbcc <USBD_CDC_EP0_RxReady+0x6a>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bb9e:	2bff      	cmp	r3, #255	@ 0xff
 800bba0:	d014      	beq.n	800bbcc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	33b0      	adds	r3, #176	@ 0xb0
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bbba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bbc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	22ff      	movs	r2, #255	@ 0xff
 800bbc8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
	...

0800bbd8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bbe0:	2182      	movs	r1, #130	@ 0x82
 800bbe2:	4818      	ldr	r0, [pc, #96]	@ (800bc44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bbe4:	f000 fd4f 	bl	800c686 <USBD_GetEpDesc>
 800bbe8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bbea:	2101      	movs	r1, #1
 800bbec:	4815      	ldr	r0, [pc, #84]	@ (800bc44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bbee:	f000 fd4a 	bl	800c686 <USBD_GetEpDesc>
 800bbf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bbf4:	2181      	movs	r1, #129	@ 0x81
 800bbf6:	4813      	ldr	r0, [pc, #76]	@ (800bc44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bbf8:	f000 fd45 	bl	800c686 <USBD_GetEpDesc>
 800bbfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	2210      	movs	r2, #16
 800bc08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d006      	beq.n	800bc1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc18:	711a      	strb	r2, [r3, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d006      	beq.n	800bc32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc2c:	711a      	strb	r2, [r3, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2243      	movs	r2, #67	@ 0x43
 800bc36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc38:	4b02      	ldr	r3, [pc, #8]	@ (800bc44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000080 	.word	0x20000080

0800bc48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc50:	2182      	movs	r1, #130	@ 0x82
 800bc52:	4818      	ldr	r0, [pc, #96]	@ (800bcb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc54:	f000 fd17 	bl	800c686 <USBD_GetEpDesc>
 800bc58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	4815      	ldr	r0, [pc, #84]	@ (800bcb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc5e:	f000 fd12 	bl	800c686 <USBD_GetEpDesc>
 800bc62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc64:	2181      	movs	r1, #129	@ 0x81
 800bc66:	4813      	ldr	r0, [pc, #76]	@ (800bcb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc68:	f000 fd0d 	bl	800c686 <USBD_GetEpDesc>
 800bc6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2210      	movs	r2, #16
 800bc78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d006      	beq.n	800bc8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2200      	movs	r2, #0
 800bc84:	711a      	strb	r2, [r3, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f042 0202 	orr.w	r2, r2, #2
 800bc8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d006      	beq.n	800bca2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	711a      	strb	r2, [r3, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f042 0202 	orr.w	r2, r2, #2
 800bca0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2243      	movs	r2, #67	@ 0x43
 800bca6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bca8:	4b02      	ldr	r3, [pc, #8]	@ (800bcb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20000080 	.word	0x20000080

0800bcb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bcc0:	2182      	movs	r1, #130	@ 0x82
 800bcc2:	4818      	ldr	r0, [pc, #96]	@ (800bd24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bcc4:	f000 fcdf 	bl	800c686 <USBD_GetEpDesc>
 800bcc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bcca:	2101      	movs	r1, #1
 800bccc:	4815      	ldr	r0, [pc, #84]	@ (800bd24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bcce:	f000 fcda 	bl	800c686 <USBD_GetEpDesc>
 800bcd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bcd4:	2181      	movs	r1, #129	@ 0x81
 800bcd6:	4813      	ldr	r0, [pc, #76]	@ (800bd24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bcd8:	f000 fcd5 	bl	800c686 <USBD_GetEpDesc>
 800bcdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	2210      	movs	r2, #16
 800bce8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d006      	beq.n	800bcfe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcf8:	711a      	strb	r2, [r3, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d006      	beq.n	800bd12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd0c:	711a      	strb	r2, [r3, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2243      	movs	r2, #67	@ 0x43
 800bd16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bd18:	4b02      	ldr	r3, [pc, #8]	@ (800bd24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20000080 	.word	0x20000080

0800bd28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	220a      	movs	r2, #10
 800bd34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bd36:	4b03      	ldr	r3, [pc, #12]	@ (800bd44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	2000003c 	.word	0x2000003c

0800bd48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e009      	b.n	800bd70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	33b0      	adds	r3, #176	@ 0xb0
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	32b0      	adds	r2, #176	@ 0xb0
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	e008      	b.n	800bdb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	371c      	adds	r7, #28
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	32b0      	adds	r2, #176	@ 0xb0
 800bdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d101      	bne.n	800bde4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e004      	b.n	800bdee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
	...

0800bdfc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	32b0      	adds	r2, #176	@ 0xb0
 800be0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be12:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800be14:	2301      	movs	r3, #1
 800be16:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800be1e:	2303      	movs	r3, #3
 800be20:	e025      	b.n	800be6e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d11f      	bne.n	800be6c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2201      	movs	r2, #1
 800be30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800be34:	4b10      	ldr	r3, [pc, #64]	@ (800be78 <USBD_CDC_TransmitPacket+0x7c>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	f003 020f 	and.w	r2, r3, #15
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	4613      	mov	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4403      	add	r3, r0
 800be4e:	3318      	adds	r3, #24
 800be50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800be52:	4b09      	ldr	r3, [pc, #36]	@ (800be78 <USBD_CDC_TransmitPacket+0x7c>)
 800be54:	7819      	ldrb	r1, [r3, #0]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 ffc3 	bl	800ddee <USBD_LL_Transmit>

    ret = USBD_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	200000c3 	.word	0x200000c3

0800be7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	32b0      	adds	r2, #176	@ 0xb0
 800be8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	32b0      	adds	r2, #176	@ 0xb0
 800be9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bea6:	2303      	movs	r3, #3
 800bea8:	e018      	b.n	800bedc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	7c1b      	ldrb	r3, [r3, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10a      	bne.n	800bec8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800beb2:	4b0c      	ldr	r3, [pc, #48]	@ (800bee4 <USBD_CDC_ReceivePacket+0x68>)
 800beb4:	7819      	ldrb	r1, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f001 ffb5 	bl	800de30 <USBD_LL_PrepareReceive>
 800bec6:	e008      	b.n	800beda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bec8:	4b06      	ldr	r3, [pc, #24]	@ (800bee4 <USBD_CDC_ReceivePacket+0x68>)
 800beca:	7819      	ldrb	r1, [r3, #0]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bed2:	2340      	movs	r3, #64	@ 0x40
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f001 ffab 	bl	800de30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	200000c4 	.word	0x200000c4

0800bee8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800befc:	2303      	movs	r3, #3
 800befe:	e01f      	b.n	800bf40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	79fa      	ldrb	r2, [r7, #7]
 800bf32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f001 fe25 	bl	800db84 <USBD_LL_Init>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3718      	adds	r7, #24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e025      	b.n	800bfac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	32ae      	adds	r2, #174	@ 0xae
 800bf72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00f      	beq.n	800bf9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	32ae      	adds	r2, #174	@ 0xae
 800bf86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf8c:	f107 020e 	add.w	r2, r7, #14
 800bf90:	4610      	mov	r0, r2
 800bf92:	4798      	blx	r3
 800bf94:	4602      	mov	r2, r0
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bfa2:	1c5a      	adds	r2, r3, #1
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f001 fe2d 	bl	800dc1c <USBD_LL_Start>
 800bfc2:	4603      	mov	r3, r0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d009      	beq.n	800c010 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	78fa      	ldrb	r2, [r7, #3]
 800c006:	4611      	mov	r1, r2
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	4798      	blx	r3
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c010:	7bfb      	ldrb	r3, [r7, #15]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	460b      	mov	r3, r1
 800c024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	78fa      	ldrb	r2, [r7, #3]
 800c034:	4611      	mov	r1, r2
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	4798      	blx	r3
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d001      	beq.n	800c044 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c040:	2303      	movs	r3, #3
 800c042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c044:	7bfb      	ldrb	r3, [r7, #15]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	4618      	mov	r0, r3
 800c062:	f001 f90c 	bl	800d27e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c074:	461a      	mov	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c082:	f003 031f 	and.w	r3, r3, #31
 800c086:	2b02      	cmp	r3, #2
 800c088:	d01a      	beq.n	800c0c0 <USBD_LL_SetupStage+0x72>
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d822      	bhi.n	800c0d4 <USBD_LL_SetupStage+0x86>
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d002      	beq.n	800c098 <USBD_LL_SetupStage+0x4a>
 800c092:	2b01      	cmp	r3, #1
 800c094:	d00a      	beq.n	800c0ac <USBD_LL_SetupStage+0x5e>
 800c096:	e01d      	b.n	800c0d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fb63 	bl	800c76c <USBD_StdDevReq>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c0aa:	e020      	b.n	800c0ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fbcb 	bl	800c850 <USBD_StdItfReq>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c0be:	e016      	b.n	800c0ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 fc2d 	bl	800c928 <USBD_StdEPReq>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c0d2:	e00c      	b.n	800c0ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c0da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f001 fdfa 	bl	800dcdc <USBD_LL_StallEP>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ec:	bf00      	nop
  }

  return ret;
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	460b      	mov	r3, r1
 800c102:	607a      	str	r2, [r7, #4]
 800c104:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c10a:	7afb      	ldrb	r3, [r7, #11]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d16e      	bne.n	800c1ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c116:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c11e:	2b03      	cmp	r3, #3
 800c120:	f040 8098 	bne.w	800c254 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	689a      	ldr	r2, [r3, #8]
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d913      	bls.n	800c158 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	689a      	ldr	r2, [r3, #8]
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	1ad2      	subs	r2, r2, r3
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	68da      	ldr	r2, [r3, #12]
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	4293      	cmp	r3, r2
 800c148:	bf28      	it	cs
 800c14a:	4613      	movcs	r3, r2
 800c14c:	461a      	mov	r2, r3
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f001 f994 	bl	800d47e <USBD_CtlContinueRx>
 800c156:	e07d      	b.n	800c254 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c15e:	f003 031f 	and.w	r3, r3, #31
 800c162:	2b02      	cmp	r3, #2
 800c164:	d014      	beq.n	800c190 <USBD_LL_DataOutStage+0x98>
 800c166:	2b02      	cmp	r3, #2
 800c168:	d81d      	bhi.n	800c1a6 <USBD_LL_DataOutStage+0xae>
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d002      	beq.n	800c174 <USBD_LL_DataOutStage+0x7c>
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d003      	beq.n	800c17a <USBD_LL_DataOutStage+0x82>
 800c172:	e018      	b.n	800c1a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c174:	2300      	movs	r3, #0
 800c176:	75bb      	strb	r3, [r7, #22]
            break;
 800c178:	e018      	b.n	800c1ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c180:	b2db      	uxtb	r3, r3
 800c182:	4619      	mov	r1, r3
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f000 fa64 	bl	800c652 <USBD_CoreFindIF>
 800c18a:	4603      	mov	r3, r0
 800c18c:	75bb      	strb	r3, [r7, #22]
            break;
 800c18e:	e00d      	b.n	800c1ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c196:	b2db      	uxtb	r3, r3
 800c198:	4619      	mov	r1, r3
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f000 fa66 	bl	800c66c <USBD_CoreFindEP>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	75bb      	strb	r3, [r7, #22]
            break;
 800c1a4:	e002      	b.n	800c1ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	75bb      	strb	r3, [r7, #22]
            break;
 800c1aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c1ac:	7dbb      	ldrb	r3, [r7, #22]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d119      	bne.n	800c1e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d113      	bne.n	800c1e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c1be:	7dba      	ldrb	r2, [r7, #22]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	32ae      	adds	r2, #174	@ 0xae
 800c1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00b      	beq.n	800c1e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c1ce:	7dba      	ldrb	r2, [r7, #22]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c1d6:	7dba      	ldrb	r2, [r7, #22]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	32ae      	adds	r2, #174	@ 0xae
 800c1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f001 f95a 	bl	800d4a0 <USBD_CtlSendStatus>
 800c1ec:	e032      	b.n	800c254 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c1ee:	7afb      	ldrb	r3, [r7, #11]
 800c1f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 fa37 	bl	800c66c <USBD_CoreFindEP>
 800c1fe:	4603      	mov	r3, r0
 800c200:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c202:	7dbb      	ldrb	r3, [r7, #22]
 800c204:	2bff      	cmp	r3, #255	@ 0xff
 800c206:	d025      	beq.n	800c254 <USBD_LL_DataOutStage+0x15c>
 800c208:	7dbb      	ldrb	r3, [r7, #22]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d122      	bne.n	800c254 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b03      	cmp	r3, #3
 800c218:	d117      	bne.n	800c24a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c21a:	7dba      	ldrb	r2, [r7, #22]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	32ae      	adds	r2, #174	@ 0xae
 800c220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00f      	beq.n	800c24a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c22a:	7dba      	ldrb	r2, [r7, #22]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c232:	7dba      	ldrb	r2, [r7, #22]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	32ae      	adds	r2, #174	@ 0xae
 800c238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	7afa      	ldrb	r2, [r7, #11]
 800c240:	4611      	mov	r1, r2
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	4798      	blx	r3
 800c246:	4603      	mov	r3, r0
 800c248:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d001      	beq.n	800c254 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c250:	7dfb      	ldrb	r3, [r7, #23]
 800c252:	e000      	b.n	800c256 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b086      	sub	sp, #24
 800c262:	af00      	add	r7, sp, #0
 800c264:	60f8      	str	r0, [r7, #12]
 800c266:	460b      	mov	r3, r1
 800c268:	607a      	str	r2, [r7, #4]
 800c26a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c26c:	7afb      	ldrb	r3, [r7, #11]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d16f      	bne.n	800c352 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3314      	adds	r3, #20
 800c276:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d15a      	bne.n	800c338 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	689a      	ldr	r2, [r3, #8]
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d914      	bls.n	800c2b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	689a      	ldr	r2, [r3, #8]
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	1ad2      	subs	r2, r2, r3
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6879      	ldr	r1, [r7, #4]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f001 f8bc 	bl	800d422 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f001 fdbd 	bl	800de30 <USBD_LL_PrepareReceive>
 800c2b6:	e03f      	b.n	800c338 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	68da      	ldr	r2, [r3, #12]
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d11c      	bne.n	800c2fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d316      	bcc.n	800c2fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d20f      	bcs.n	800c2fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c2de:	2200      	movs	r2, #0
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f001 f89d 	bl	800d422 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f001 fd9a 	bl	800de30 <USBD_LL_PrepareReceive>
 800c2fc:	e01c      	b.n	800c338 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b03      	cmp	r3, #3
 800c308:	d10f      	bne.n	800c32a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d009      	beq.n	800c32a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c32a:	2180      	movs	r1, #128	@ 0x80
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f001 fcd5 	bl	800dcdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f001 f8c7 	bl	800d4c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d03a      	beq.n	800c3b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f7ff fe42 	bl	800bfcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c350:	e032      	b.n	800c3b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c352:	7afb      	ldrb	r3, [r7, #11]
 800c354:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	4619      	mov	r1, r3
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 f985 	bl	800c66c <USBD_CoreFindEP>
 800c362:	4603      	mov	r3, r0
 800c364:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c366:	7dfb      	ldrb	r3, [r7, #23]
 800c368:	2bff      	cmp	r3, #255	@ 0xff
 800c36a:	d025      	beq.n	800c3b8 <USBD_LL_DataInStage+0x15a>
 800c36c:	7dfb      	ldrb	r3, [r7, #23]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d122      	bne.n	800c3b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d11c      	bne.n	800c3b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c37e:	7dfa      	ldrb	r2, [r7, #23]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	32ae      	adds	r2, #174	@ 0xae
 800c384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d014      	beq.n	800c3b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c38e:	7dfa      	ldrb	r2, [r7, #23]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c396:	7dfa      	ldrb	r2, [r7, #23]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	32ae      	adds	r2, #174	@ 0xae
 800c39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	7afa      	ldrb	r2, [r7, #11]
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c3ae:	7dbb      	ldrb	r3, [r7, #22]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c3b4:	7dbb      	ldrb	r3, [r7, #22]
 800c3b6:	e000      	b.n	800c3ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3718      	adds	r7, #24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d014      	beq.n	800c428 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00e      	beq.n	800c428 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6852      	ldr	r2, [r2, #4]
 800c416:	b2d2      	uxtb	r2, r2
 800c418:	4611      	mov	r1, r2
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	4798      	blx	r3
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c424:	2303      	movs	r3, #3
 800c426:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c428:	2340      	movs	r3, #64	@ 0x40
 800c42a:	2200      	movs	r2, #0
 800c42c:	2100      	movs	r1, #0
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f001 fc0f 	bl	800dc52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2240      	movs	r2, #64	@ 0x40
 800c440:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c444:	2340      	movs	r3, #64	@ 0x40
 800c446:	2200      	movs	r2, #0
 800c448:	2180      	movs	r1, #128	@ 0x80
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fc01 	bl	800dc52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2240      	movs	r2, #64	@ 0x40
 800c45a:	621a      	str	r2, [r3, #32]

  return ret;
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	460b      	mov	r3, r1
 800c470:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	78fa      	ldrb	r2, [r7, #3]
 800c476:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c486:	b480      	push	{r7}
 800c488:	b083      	sub	sp, #12
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b04      	cmp	r3, #4
 800c498:	d006      	beq.n	800c4a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2204      	movs	r2, #4
 800c4ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr

0800c4be <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	d106      	bne.n	800c4e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d110      	bne.n	800c524 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00b      	beq.n	800c524 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c512:	69db      	ldr	r3, [r3, #28]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d005      	beq.n	800c524 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b082      	sub	sp, #8
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	460b      	mov	r3, r1
 800c538:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	32ae      	adds	r2, #174	@ 0xae
 800c544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e01c      	b.n	800c58a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c556:	b2db      	uxtb	r3, r3
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d115      	bne.n	800c588 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	32ae      	adds	r2, #174	@ 0xae
 800c566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00b      	beq.n	800c588 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	32ae      	adds	r2, #174	@ 0xae
 800c57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	78fa      	ldrb	r2, [r7, #3]
 800c582:	4611      	mov	r1, r2
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	460b      	mov	r3, r1
 800c59c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	32ae      	adds	r2, #174	@ 0xae
 800c5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	e01c      	b.n	800c5ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d115      	bne.n	800c5ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	32ae      	adds	r2, #174	@ 0xae
 800c5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00b      	beq.n	800c5ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	32ae      	adds	r2, #174	@ 0xae
 800c5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e4:	78fa      	ldrb	r2, [r7, #3]
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00e      	beq.n	800c648 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6852      	ldr	r2, [r2, #4]
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	4611      	mov	r1, r2
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	4798      	blx	r3
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c644:	2303      	movs	r3, #3
 800c646:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c648:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c652:	b480      	push	{r7}
 800c654:	b083      	sub	sp, #12
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
 800c65a:	460b      	mov	r3, r1
 800c65c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c65e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	460b      	mov	r3, r1
 800c676:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c678:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b086      	sub	sp, #24
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	460b      	mov	r3, r1
 800c690:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c69a:	2300      	movs	r3, #0
 800c69c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	885b      	ldrh	r3, [r3, #2]
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	7812      	ldrb	r2, [r2, #0]
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d91f      	bls.n	800c6ec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c6b2:	e013      	b.n	800c6dc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c6b4:	f107 030a 	add.w	r3, r7, #10
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6978      	ldr	r0, [r7, #20]
 800c6bc:	f000 f81b 	bl	800c6f6 <USBD_GetNextDesc>
 800c6c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	785b      	ldrb	r3, [r3, #1]
 800c6c6:	2b05      	cmp	r3, #5
 800c6c8:	d108      	bne.n	800c6dc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	789b      	ldrb	r3, [r3, #2]
 800c6d2:	78fa      	ldrb	r2, [r7, #3]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d008      	beq.n	800c6ea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	885b      	ldrh	r3, [r3, #2]
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	897b      	ldrh	r3, [r7, #10]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d8e5      	bhi.n	800c6b4 <USBD_GetEpDesc+0x2e>
 800c6e8:	e000      	b.n	800c6ec <USBD_GetEpDesc+0x66>
          break;
 800c6ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c6ec:	693b      	ldr	r3, [r7, #16]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c6f6:	b480      	push	{r7}
 800c6f8:	b085      	sub	sp, #20
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	7812      	ldrb	r2, [r2, #0]
 800c70c:	4413      	add	r3, r2
 800c70e:	b29a      	uxth	r2, r3
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	461a      	mov	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4413      	add	r3, r2
 800c71e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c720:	68fb      	ldr	r3, [r7, #12]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c72e:	b480      	push	{r7}
 800c730:	b087      	sub	sp, #28
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	3301      	adds	r3, #1
 800c744:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c74c:	8a3b      	ldrh	r3, [r7, #16]
 800c74e:	021b      	lsls	r3, r3, #8
 800c750:	b21a      	sxth	r2, r3
 800c752:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c756:	4313      	orrs	r3, r2
 800c758:	b21b      	sxth	r3, r3
 800c75a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c75c:	89fb      	ldrh	r3, [r7, #14]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	371c      	adds	r7, #28
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
	...

0800c76c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c776:	2300      	movs	r3, #0
 800c778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c782:	2b40      	cmp	r3, #64	@ 0x40
 800c784:	d005      	beq.n	800c792 <USBD_StdDevReq+0x26>
 800c786:	2b40      	cmp	r3, #64	@ 0x40
 800c788:	d857      	bhi.n	800c83a <USBD_StdDevReq+0xce>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00f      	beq.n	800c7ae <USBD_StdDevReq+0x42>
 800c78e:	2b20      	cmp	r3, #32
 800c790:	d153      	bne.n	800c83a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	32ae      	adds	r2, #174	@ 0xae
 800c79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	4798      	blx	r3
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ac:	e04a      	b.n	800c844 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	785b      	ldrb	r3, [r3, #1]
 800c7b2:	2b09      	cmp	r3, #9
 800c7b4:	d83b      	bhi.n	800c82e <USBD_StdDevReq+0xc2>
 800c7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c7bc <USBD_StdDevReq+0x50>)
 800c7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7bc:	0800c811 	.word	0x0800c811
 800c7c0:	0800c825 	.word	0x0800c825
 800c7c4:	0800c82f 	.word	0x0800c82f
 800c7c8:	0800c81b 	.word	0x0800c81b
 800c7cc:	0800c82f 	.word	0x0800c82f
 800c7d0:	0800c7ef 	.word	0x0800c7ef
 800c7d4:	0800c7e5 	.word	0x0800c7e5
 800c7d8:	0800c82f 	.word	0x0800c82f
 800c7dc:	0800c807 	.word	0x0800c807
 800c7e0:	0800c7f9 	.word	0x0800c7f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fa3c 	bl	800cc64 <USBD_GetDescriptor>
          break;
 800c7ec:	e024      	b.n	800c838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fba1 	bl	800cf38 <USBD_SetAddress>
          break;
 800c7f6:	e01f      	b.n	800c838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fbe0 	bl	800cfc0 <USBD_SetConfig>
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
          break;
 800c804:	e018      	b.n	800c838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fc83 	bl	800d114 <USBD_GetConfig>
          break;
 800c80e:	e013      	b.n	800c838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fcb4 	bl	800d180 <USBD_GetStatus>
          break;
 800c818:	e00e      	b.n	800c838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fce3 	bl	800d1e8 <USBD_SetFeature>
          break;
 800c822:	e009      	b.n	800c838 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fd07 	bl	800d23a <USBD_ClrFeature>
          break;
 800c82c:	e004      	b.n	800c838 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fd5e 	bl	800d2f2 <USBD_CtlError>
          break;
 800c836:	bf00      	nop
      }
      break;
 800c838:	e004      	b.n	800c844 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fd58 	bl	800d2f2 <USBD_CtlError>
      break;
 800c842:	bf00      	nop
  }

  return ret;
 800c844:	7bfb      	ldrb	r3, [r7, #15]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop

0800c850 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c866:	2b40      	cmp	r3, #64	@ 0x40
 800c868:	d005      	beq.n	800c876 <USBD_StdItfReq+0x26>
 800c86a:	2b40      	cmp	r3, #64	@ 0x40
 800c86c:	d852      	bhi.n	800c914 <USBD_StdItfReq+0xc4>
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <USBD_StdItfReq+0x26>
 800c872:	2b20      	cmp	r3, #32
 800c874:	d14e      	bne.n	800c914 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	3b01      	subs	r3, #1
 800c880:	2b02      	cmp	r3, #2
 800c882:	d840      	bhi.n	800c906 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	889b      	ldrh	r3, [r3, #4]
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d836      	bhi.n	800c8fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	889b      	ldrh	r3, [r3, #4]
 800c892:	b2db      	uxtb	r3, r3
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f7ff fedb 	bl	800c652 <USBD_CoreFindIF>
 800c89c:	4603      	mov	r3, r0
 800c89e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8a0:	7bbb      	ldrb	r3, [r7, #14]
 800c8a2:	2bff      	cmp	r3, #255	@ 0xff
 800c8a4:	d01d      	beq.n	800c8e2 <USBD_StdItfReq+0x92>
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d11a      	bne.n	800c8e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c8ac:	7bba      	ldrb	r2, [r7, #14]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	32ae      	adds	r2, #174	@ 0xae
 800c8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00f      	beq.n	800c8dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c8bc:	7bba      	ldrb	r2, [r7, #14]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c8c4:	7bba      	ldrb	r2, [r7, #14]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	32ae      	adds	r2, #174	@ 0xae
 800c8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	4798      	blx	r3
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8da:	e004      	b.n	800c8e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8e0:	e001      	b.n	800c8e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	88db      	ldrh	r3, [r3, #6]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d110      	bne.n	800c910 <USBD_StdItfReq+0xc0>
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10d      	bne.n	800c910 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fdd3 	bl	800d4a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c8fa:	e009      	b.n	800c910 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fcf7 	bl	800d2f2 <USBD_CtlError>
          break;
 800c904:	e004      	b.n	800c910 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 fcf2 	bl	800d2f2 <USBD_CtlError>
          break;
 800c90e:	e000      	b.n	800c912 <USBD_StdItfReq+0xc2>
          break;
 800c910:	bf00      	nop
      }
      break;
 800c912:	e004      	b.n	800c91e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fceb 	bl	800d2f2 <USBD_CtlError>
      break;
 800c91c:	bf00      	nop
  }

  return ret;
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	889b      	ldrh	r3, [r3, #4]
 800c93a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c944:	2b40      	cmp	r3, #64	@ 0x40
 800c946:	d007      	beq.n	800c958 <USBD_StdEPReq+0x30>
 800c948:	2b40      	cmp	r3, #64	@ 0x40
 800c94a:	f200 817f 	bhi.w	800cc4c <USBD_StdEPReq+0x324>
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d02a      	beq.n	800c9a8 <USBD_StdEPReq+0x80>
 800c952:	2b20      	cmp	r3, #32
 800c954:	f040 817a 	bne.w	800cc4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c958:	7bbb      	ldrb	r3, [r7, #14]
 800c95a:	4619      	mov	r1, r3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff fe85 	bl	800c66c <USBD_CoreFindEP>
 800c962:	4603      	mov	r3, r0
 800c964:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c966:	7b7b      	ldrb	r3, [r7, #13]
 800c968:	2bff      	cmp	r3, #255	@ 0xff
 800c96a:	f000 8174 	beq.w	800cc56 <USBD_StdEPReq+0x32e>
 800c96e:	7b7b      	ldrb	r3, [r7, #13]
 800c970:	2b00      	cmp	r3, #0
 800c972:	f040 8170 	bne.w	800cc56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c976:	7b7a      	ldrb	r2, [r7, #13]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c97e:	7b7a      	ldrb	r2, [r7, #13]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	32ae      	adds	r2, #174	@ 0xae
 800c984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 8163 	beq.w	800cc56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c990:	7b7a      	ldrb	r2, [r7, #13]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	32ae      	adds	r2, #174	@ 0xae
 800c996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	4798      	blx	r3
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c9a6:	e156      	b.n	800cc56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	785b      	ldrb	r3, [r3, #1]
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d008      	beq.n	800c9c2 <USBD_StdEPReq+0x9a>
 800c9b0:	2b03      	cmp	r3, #3
 800c9b2:	f300 8145 	bgt.w	800cc40 <USBD_StdEPReq+0x318>
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 809b 	beq.w	800caf2 <USBD_StdEPReq+0x1ca>
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d03c      	beq.n	800ca3a <USBD_StdEPReq+0x112>
 800c9c0:	e13e      	b.n	800cc40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d002      	beq.n	800c9d4 <USBD_StdEPReq+0xac>
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d016      	beq.n	800ca00 <USBD_StdEPReq+0xd8>
 800c9d2:	e02c      	b.n	800ca2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00d      	beq.n	800c9f6 <USBD_StdEPReq+0xce>
 800c9da:	7bbb      	ldrb	r3, [r7, #14]
 800c9dc:	2b80      	cmp	r3, #128	@ 0x80
 800c9de:	d00a      	beq.n	800c9f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9e0:	7bbb      	ldrb	r3, [r7, #14]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f001 f979 	bl	800dcdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ea:	2180      	movs	r1, #128	@ 0x80
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f001 f975 	bl	800dcdc <USBD_LL_StallEP>
 800c9f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9f4:	e020      	b.n	800ca38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c9f6:	6839      	ldr	r1, [r7, #0]
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 fc7a 	bl	800d2f2 <USBD_CtlError>
              break;
 800c9fe:	e01b      	b.n	800ca38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	885b      	ldrh	r3, [r3, #2]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10e      	bne.n	800ca26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca08:	7bbb      	ldrb	r3, [r7, #14]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00b      	beq.n	800ca26 <USBD_StdEPReq+0xfe>
 800ca0e:	7bbb      	ldrb	r3, [r7, #14]
 800ca10:	2b80      	cmp	r3, #128	@ 0x80
 800ca12:	d008      	beq.n	800ca26 <USBD_StdEPReq+0xfe>
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	88db      	ldrh	r3, [r3, #6]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d104      	bne.n	800ca26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f001 f95b 	bl	800dcdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fd3a 	bl	800d4a0 <USBD_CtlSendStatus>

              break;
 800ca2c:	e004      	b.n	800ca38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fc5e 	bl	800d2f2 <USBD_CtlError>
              break;
 800ca36:	bf00      	nop
          }
          break;
 800ca38:	e107      	b.n	800cc4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d002      	beq.n	800ca4c <USBD_StdEPReq+0x124>
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	d016      	beq.n	800ca78 <USBD_StdEPReq+0x150>
 800ca4a:	e04b      	b.n	800cae4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00d      	beq.n	800ca6e <USBD_StdEPReq+0x146>
 800ca52:	7bbb      	ldrb	r3, [r7, #14]
 800ca54:	2b80      	cmp	r3, #128	@ 0x80
 800ca56:	d00a      	beq.n	800ca6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f001 f93d 	bl	800dcdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca62:	2180      	movs	r1, #128	@ 0x80
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 f939 	bl	800dcdc <USBD_LL_StallEP>
 800ca6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca6c:	e040      	b.n	800caf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 fc3e 	bl	800d2f2 <USBD_CtlError>
              break;
 800ca76:	e03b      	b.n	800caf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	885b      	ldrh	r3, [r3, #2]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d136      	bne.n	800caee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ca80:	7bbb      	ldrb	r3, [r7, #14]
 800ca82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d004      	beq.n	800ca94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ca8a:	7bbb      	ldrb	r3, [r7, #14]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f001 f943 	bl	800dd1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 fd03 	bl	800d4a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff fde4 	bl	800c66c <USBD_CoreFindEP>
 800caa4:	4603      	mov	r3, r0
 800caa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caa8:	7b7b      	ldrb	r3, [r7, #13]
 800caaa:	2bff      	cmp	r3, #255	@ 0xff
 800caac:	d01f      	beq.n	800caee <USBD_StdEPReq+0x1c6>
 800caae:	7b7b      	ldrb	r3, [r7, #13]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d11c      	bne.n	800caee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cab4:	7b7a      	ldrb	r2, [r7, #13]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cabc:	7b7a      	ldrb	r2, [r7, #13]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	32ae      	adds	r2, #174	@ 0xae
 800cac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d010      	beq.n	800caee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cacc:	7b7a      	ldrb	r2, [r7, #13]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	32ae      	adds	r2, #174	@ 0xae
 800cad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	4798      	blx	r3
 800cade:	4603      	mov	r3, r0
 800cae0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cae2:	e004      	b.n	800caee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fc03 	bl	800d2f2 <USBD_CtlError>
              break;
 800caec:	e000      	b.n	800caf0 <USBD_StdEPReq+0x1c8>
              break;
 800caee:	bf00      	nop
          }
          break;
 800caf0:	e0ab      	b.n	800cc4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d002      	beq.n	800cb04 <USBD_StdEPReq+0x1dc>
 800cafe:	2b03      	cmp	r3, #3
 800cb00:	d032      	beq.n	800cb68 <USBD_StdEPReq+0x240>
 800cb02:	e097      	b.n	800cc34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d007      	beq.n	800cb1a <USBD_StdEPReq+0x1f2>
 800cb0a:	7bbb      	ldrb	r3, [r7, #14]
 800cb0c:	2b80      	cmp	r3, #128	@ 0x80
 800cb0e:	d004      	beq.n	800cb1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fbed 	bl	800d2f2 <USBD_CtlError>
                break;
 800cb18:	e091      	b.n	800cc3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	da0b      	bge.n	800cb3a <USBD_StdEPReq+0x212>
 800cb22:	7bbb      	ldrb	r3, [r7, #14]
 800cb24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb28:	4613      	mov	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	3310      	adds	r3, #16
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	4413      	add	r3, r2
 800cb36:	3304      	adds	r3, #4
 800cb38:	e00b      	b.n	800cb52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb3a:	7bbb      	ldrb	r3, [r7, #14]
 800cb3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	4413      	add	r3, r2
 800cb50:	3304      	adds	r3, #4
 800cb52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	2200      	movs	r2, #0
 800cb58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	4619      	mov	r1, r3
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fc43 	bl	800d3ec <USBD_CtlSendData>
              break;
 800cb66:	e06a      	b.n	800cc3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	da11      	bge.n	800cb94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb70:	7bbb      	ldrb	r3, [r7, #14]
 800cb72:	f003 020f 	and.w	r2, r3, #15
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4413      	add	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	440b      	add	r3, r1
 800cb82:	3324      	adds	r3, #36	@ 0x24
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d117      	bne.n	800cbba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fbb0 	bl	800d2f2 <USBD_CtlError>
                  break;
 800cb92:	e054      	b.n	800cc3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cb94:	7bbb      	ldrb	r3, [r7, #14]
 800cb96:	f003 020f 	and.w	r2, r3, #15
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	440b      	add	r3, r1
 800cba6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cbaa:	881b      	ldrh	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d104      	bne.n	800cbba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cbb0:	6839      	ldr	r1, [r7, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fb9d 	bl	800d2f2 <USBD_CtlError>
                  break;
 800cbb8:	e041      	b.n	800cc3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	da0b      	bge.n	800cbda <USBD_StdEPReq+0x2b2>
 800cbc2:	7bbb      	ldrb	r3, [r7, #14]
 800cbc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbc8:	4613      	mov	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4413      	add	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	3310      	adds	r3, #16
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	e00b      	b.n	800cbf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	4413      	add	r3, r2
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d002      	beq.n	800cc00 <USBD_StdEPReq+0x2d8>
 800cbfa:	7bbb      	ldrb	r3, [r7, #14]
 800cbfc:	2b80      	cmp	r3, #128	@ 0x80
 800cbfe:	d103      	bne.n	800cc08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	e00e      	b.n	800cc26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f001 f8a3 	bl	800dd58 <USBD_LL_IsStallEP>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d003      	beq.n	800cc20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	e002      	b.n	800cc26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2202      	movs	r2, #2
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 fbdd 	bl	800d3ec <USBD_CtlSendData>
              break;
 800cc32:	e004      	b.n	800cc3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fb5b 	bl	800d2f2 <USBD_CtlError>
              break;
 800cc3c:	bf00      	nop
          }
          break;
 800cc3e:	e004      	b.n	800cc4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fb55 	bl	800d2f2 <USBD_CtlError>
          break;
 800cc48:	bf00      	nop
      }
      break;
 800cc4a:	e005      	b.n	800cc58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fb4f 	bl	800d2f2 <USBD_CtlError>
      break;
 800cc54:	e000      	b.n	800cc58 <USBD_StdEPReq+0x330>
      break;
 800cc56:	bf00      	nop
  }

  return ret;
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
	...

0800cc64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc76:	2300      	movs	r3, #0
 800cc78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	885b      	ldrh	r3, [r3, #2]
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	3b01      	subs	r3, #1
 800cc84:	2b06      	cmp	r3, #6
 800cc86:	f200 8128 	bhi.w	800ceda <USBD_GetDescriptor+0x276>
 800cc8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc90 <USBD_GetDescriptor+0x2c>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800ccad 	.word	0x0800ccad
 800cc94:	0800ccc5 	.word	0x0800ccc5
 800cc98:	0800cd05 	.word	0x0800cd05
 800cc9c:	0800cedb 	.word	0x0800cedb
 800cca0:	0800cedb 	.word	0x0800cedb
 800cca4:	0800ce7b 	.word	0x0800ce7b
 800cca8:	0800cea7 	.word	0x0800cea7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	7c12      	ldrb	r2, [r2, #16]
 800ccb8:	f107 0108 	add.w	r1, r7, #8
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	4798      	blx	r3
 800ccc0:	60f8      	str	r0, [r7, #12]
      break;
 800ccc2:	e112      	b.n	800ceea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	7c1b      	ldrb	r3, [r3, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d10d      	bne.n	800cce8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd4:	f107 0208 	add.w	r2, r7, #8
 800ccd8:	4610      	mov	r0, r2
 800ccda:	4798      	blx	r3
 800ccdc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3301      	adds	r3, #1
 800cce2:	2202      	movs	r2, #2
 800cce4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cce6:	e100      	b.n	800ceea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf0:	f107 0208 	add.w	r2, r7, #8
 800ccf4:	4610      	mov	r0, r2
 800ccf6:	4798      	blx	r3
 800ccf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	2202      	movs	r2, #2
 800cd00:	701a      	strb	r2, [r3, #0]
      break;
 800cd02:	e0f2      	b.n	800ceea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	885b      	ldrh	r3, [r3, #2]
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	2b05      	cmp	r3, #5
 800cd0c:	f200 80ac 	bhi.w	800ce68 <USBD_GetDescriptor+0x204>
 800cd10:	a201      	add	r2, pc, #4	@ (adr r2, 800cd18 <USBD_GetDescriptor+0xb4>)
 800cd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd16:	bf00      	nop
 800cd18:	0800cd31 	.word	0x0800cd31
 800cd1c:	0800cd65 	.word	0x0800cd65
 800cd20:	0800cd99 	.word	0x0800cd99
 800cd24:	0800cdcd 	.word	0x0800cdcd
 800cd28:	0800ce01 	.word	0x0800ce01
 800cd2c:	0800ce35 	.word	0x0800ce35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00b      	beq.n	800cd54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	7c12      	ldrb	r2, [r2, #16]
 800cd48:	f107 0108 	add.w	r1, r7, #8
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4798      	blx	r3
 800cd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd52:	e091      	b.n	800ce78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 facb 	bl	800d2f2 <USBD_CtlError>
            err++;
 800cd5c:	7afb      	ldrb	r3, [r7, #11]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	72fb      	strb	r3, [r7, #11]
          break;
 800cd62:	e089      	b.n	800ce78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	7c12      	ldrb	r2, [r2, #16]
 800cd7c:	f107 0108 	add.w	r1, r7, #8
 800cd80:	4610      	mov	r0, r2
 800cd82:	4798      	blx	r3
 800cd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd86:	e077      	b.n	800ce78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd88:	6839      	ldr	r1, [r7, #0]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fab1 	bl	800d2f2 <USBD_CtlError>
            err++;
 800cd90:	7afb      	ldrb	r3, [r7, #11]
 800cd92:	3301      	adds	r3, #1
 800cd94:	72fb      	strb	r3, [r7, #11]
          break;
 800cd96:	e06f      	b.n	800ce78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	7c12      	ldrb	r2, [r2, #16]
 800cdb0:	f107 0108 	add.w	r1, r7, #8
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4798      	blx	r3
 800cdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdba:	e05d      	b.n	800ce78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fa97 	bl	800d2f2 <USBD_CtlError>
            err++;
 800cdc4:	7afb      	ldrb	r3, [r7, #11]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdca:	e055      	b.n	800ce78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00b      	beq.n	800cdf0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	7c12      	ldrb	r2, [r2, #16]
 800cde4:	f107 0108 	add.w	r1, r7, #8
 800cde8:	4610      	mov	r0, r2
 800cdea:	4798      	blx	r3
 800cdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdee:	e043      	b.n	800ce78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fa7d 	bl	800d2f2 <USBD_CtlError>
            err++;
 800cdf8:	7afb      	ldrb	r3, [r7, #11]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800cdfe:	e03b      	b.n	800ce78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce06:	695b      	ldr	r3, [r3, #20]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	7c12      	ldrb	r2, [r2, #16]
 800ce18:	f107 0108 	add.w	r1, r7, #8
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	4798      	blx	r3
 800ce20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce22:	e029      	b.n	800ce78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fa63 	bl	800d2f2 <USBD_CtlError>
            err++;
 800ce2c:	7afb      	ldrb	r3, [r7, #11]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	72fb      	strb	r3, [r7, #11]
          break;
 800ce32:	e021      	b.n	800ce78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce3a:	699b      	ldr	r3, [r3, #24]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00b      	beq.n	800ce58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	7c12      	ldrb	r2, [r2, #16]
 800ce4c:	f107 0108 	add.w	r1, r7, #8
 800ce50:	4610      	mov	r0, r2
 800ce52:	4798      	blx	r3
 800ce54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce56:	e00f      	b.n	800ce78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fa49 	bl	800d2f2 <USBD_CtlError>
            err++;
 800ce60:	7afb      	ldrb	r3, [r7, #11]
 800ce62:	3301      	adds	r3, #1
 800ce64:	72fb      	strb	r3, [r7, #11]
          break;
 800ce66:	e007      	b.n	800ce78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fa41 	bl	800d2f2 <USBD_CtlError>
          err++;
 800ce70:	7afb      	ldrb	r3, [r7, #11]
 800ce72:	3301      	adds	r3, #1
 800ce74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ce76:	bf00      	nop
      }
      break;
 800ce78:	e037      	b.n	800ceea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	7c1b      	ldrb	r3, [r3, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d109      	bne.n	800ce96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce8a:	f107 0208 	add.w	r2, r7, #8
 800ce8e:	4610      	mov	r0, r2
 800ce90:	4798      	blx	r3
 800ce92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce94:	e029      	b.n	800ceea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fa2a 	bl	800d2f2 <USBD_CtlError>
        err++;
 800ce9e:	7afb      	ldrb	r3, [r7, #11]
 800cea0:	3301      	adds	r3, #1
 800cea2:	72fb      	strb	r3, [r7, #11]
      break;
 800cea4:	e021      	b.n	800ceea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	7c1b      	ldrb	r3, [r3, #16]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10d      	bne.n	800ceca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceb6:	f107 0208 	add.w	r2, r7, #8
 800ceba:	4610      	mov	r0, r2
 800cebc:	4798      	blx	r3
 800cebe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	3301      	adds	r3, #1
 800cec4:	2207      	movs	r2, #7
 800cec6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cec8:	e00f      	b.n	800ceea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ceca:	6839      	ldr	r1, [r7, #0]
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fa10 	bl	800d2f2 <USBD_CtlError>
        err++;
 800ced2:	7afb      	ldrb	r3, [r7, #11]
 800ced4:	3301      	adds	r3, #1
 800ced6:	72fb      	strb	r3, [r7, #11]
      break;
 800ced8:	e007      	b.n	800ceea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fa08 	bl	800d2f2 <USBD_CtlError>
      err++;
 800cee2:	7afb      	ldrb	r3, [r7, #11]
 800cee4:	3301      	adds	r3, #1
 800cee6:	72fb      	strb	r3, [r7, #11]
      break;
 800cee8:	bf00      	nop
  }

  if (err != 0U)
 800ceea:	7afb      	ldrb	r3, [r7, #11]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d11e      	bne.n	800cf2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	88db      	ldrh	r3, [r3, #6]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d016      	beq.n	800cf26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cef8:	893b      	ldrh	r3, [r7, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00e      	beq.n	800cf1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	88da      	ldrh	r2, [r3, #6]
 800cf02:	893b      	ldrh	r3, [r7, #8]
 800cf04:	4293      	cmp	r3, r2
 800cf06:	bf28      	it	cs
 800cf08:	4613      	movcs	r3, r2
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf0e:	893b      	ldrh	r3, [r7, #8]
 800cf10:	461a      	mov	r2, r3
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fa69 	bl	800d3ec <USBD_CtlSendData>
 800cf1a:	e009      	b.n	800cf30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f9e7 	bl	800d2f2 <USBD_CtlError>
 800cf24:	e004      	b.n	800cf30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 faba 	bl	800d4a0 <USBD_CtlSendStatus>
 800cf2c:	e000      	b.n	800cf30 <USBD_GetDescriptor+0x2cc>
    return;
 800cf2e:	bf00      	nop
  }
}
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop

0800cf38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	889b      	ldrh	r3, [r3, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d131      	bne.n	800cfae <USBD_SetAddress+0x76>
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	88db      	ldrh	r3, [r3, #6]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d12d      	bne.n	800cfae <USBD_SetAddress+0x76>
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	885b      	ldrh	r3, [r3, #2]
 800cf56:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf58:	d829      	bhi.n	800cfae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	885b      	ldrh	r3, [r3, #2]
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b03      	cmp	r3, #3
 800cf70:	d104      	bne.n	800cf7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f9bc 	bl	800d2f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf7a:	e01d      	b.n	800cfb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	7bfa      	ldrb	r2, [r7, #15]
 800cf80:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 ff11 	bl	800ddb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 fa86 	bl	800d4a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d004      	beq.n	800cfa4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2202      	movs	r2, #2
 800cf9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfa2:	e009      	b.n	800cfb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfac:	e004      	b.n	800cfb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f99e 	bl	800d2f2 <USBD_CtlError>
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	bf00      	nop
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	885b      	ldrh	r3, [r3, #2]
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	4b4e      	ldr	r3, [pc, #312]	@ (800d110 <USBD_SetConfig+0x150>)
 800cfd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cfd8:	4b4d      	ldr	r3, [pc, #308]	@ (800d110 <USBD_SetConfig+0x150>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d905      	bls.n	800cfec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cfe0:	6839      	ldr	r1, [r7, #0]
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f985 	bl	800d2f2 <USBD_CtlError>
    return USBD_FAIL;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	e08c      	b.n	800d106 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d002      	beq.n	800cffe <USBD_SetConfig+0x3e>
 800cff8:	2b03      	cmp	r3, #3
 800cffa:	d029      	beq.n	800d050 <USBD_SetConfig+0x90>
 800cffc:	e075      	b.n	800d0ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cffe:	4b44      	ldr	r3, [pc, #272]	@ (800d110 <USBD_SetConfig+0x150>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d020      	beq.n	800d048 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d006:	4b42      	ldr	r3, [pc, #264]	@ (800d110 <USBD_SetConfig+0x150>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	461a      	mov	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d010:	4b3f      	ldr	r3, [pc, #252]	@ (800d110 <USBD_SetConfig+0x150>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f7fe ffe3 	bl	800bfe2 <USBD_SetClassConfig>
 800d01c:	4603      	mov	r3, r0
 800d01e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d020:	7bfb      	ldrb	r3, [r7, #15]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d008      	beq.n	800d038 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f962 	bl	800d2f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2202      	movs	r2, #2
 800d032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d036:	e065      	b.n	800d104 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 fa31 	bl	800d4a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2203      	movs	r2, #3
 800d042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d046:	e05d      	b.n	800d104 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fa29 	bl	800d4a0 <USBD_CtlSendStatus>
      break;
 800d04e:	e059      	b.n	800d104 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d050:	4b2f      	ldr	r3, [pc, #188]	@ (800d110 <USBD_SetConfig+0x150>)
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d112      	bne.n	800d07e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2202      	movs	r2, #2
 800d05c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d060:	4b2b      	ldr	r3, [pc, #172]	@ (800d110 <USBD_SetConfig+0x150>)
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	461a      	mov	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d06a:	4b29      	ldr	r3, [pc, #164]	@ (800d110 <USBD_SetConfig+0x150>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	4619      	mov	r1, r3
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7fe ffd2 	bl	800c01a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fa12 	bl	800d4a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d07c:	e042      	b.n	800d104 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d07e:	4b24      	ldr	r3, [pc, #144]	@ (800d110 <USBD_SetConfig+0x150>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d02a      	beq.n	800d0e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	b2db      	uxtb	r3, r3
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7fe ffc0 	bl	800c01a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d09a:	4b1d      	ldr	r3, [pc, #116]	@ (800d110 <USBD_SetConfig+0x150>)
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0a4:	4b1a      	ldr	r3, [pc, #104]	@ (800d110 <USBD_SetConfig+0x150>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7fe ff99 	bl	800bfe2 <USBD_SetClassConfig>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d0b4:	7bfb      	ldrb	r3, [r7, #15]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00f      	beq.n	800d0da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 f918 	bl	800d2f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7fe ffa5 	bl	800c01a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d0d8:	e014      	b.n	800d104 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f9e0 	bl	800d4a0 <USBD_CtlSendStatus>
      break;
 800d0e0:	e010      	b.n	800d104 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f9dc 	bl	800d4a0 <USBD_CtlSendStatus>
      break;
 800d0e8:	e00c      	b.n	800d104 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f900 	bl	800d2f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0f2:	4b07      	ldr	r3, [pc, #28]	@ (800d110 <USBD_SetConfig+0x150>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7fe ff8e 	bl	800c01a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d0fe:	2303      	movs	r3, #3
 800d100:	73fb      	strb	r3, [r7, #15]
      break;
 800d102:	bf00      	nop
  }

  return ret;
 800d104:	7bfb      	ldrb	r3, [r7, #15]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	20000ad4 	.word	0x20000ad4

0800d114 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	88db      	ldrh	r3, [r3, #6]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d004      	beq.n	800d130 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f8e2 	bl	800d2f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d12e:	e023      	b.n	800d178 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b02      	cmp	r3, #2
 800d13a:	dc02      	bgt.n	800d142 <USBD_GetConfig+0x2e>
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	dc03      	bgt.n	800d148 <USBD_GetConfig+0x34>
 800d140:	e015      	b.n	800d16e <USBD_GetConfig+0x5a>
 800d142:	2b03      	cmp	r3, #3
 800d144:	d00b      	beq.n	800d15e <USBD_GetConfig+0x4a>
 800d146:	e012      	b.n	800d16e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	3308      	adds	r3, #8
 800d152:	2201      	movs	r2, #1
 800d154:	4619      	mov	r1, r3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f948 	bl	800d3ec <USBD_CtlSendData>
        break;
 800d15c:	e00c      	b.n	800d178 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	3304      	adds	r3, #4
 800d162:	2201      	movs	r2, #1
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f940 	bl	800d3ec <USBD_CtlSendData>
        break;
 800d16c:	e004      	b.n	800d178 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f8be 	bl	800d2f2 <USBD_CtlError>
        break;
 800d176:	bf00      	nop
}
 800d178:	bf00      	nop
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d190:	b2db      	uxtb	r3, r3
 800d192:	3b01      	subs	r3, #1
 800d194:	2b02      	cmp	r3, #2
 800d196:	d81e      	bhi.n	800d1d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	88db      	ldrh	r3, [r3, #6]
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d004      	beq.n	800d1aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d1a0:	6839      	ldr	r1, [r7, #0]
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 f8a5 	bl	800d2f2 <USBD_CtlError>
        break;
 800d1a8:	e01a      	b.n	800d1e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d005      	beq.n	800d1c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	f043 0202 	orr.w	r2, r3, #2
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	330c      	adds	r3, #12
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f90c 	bl	800d3ec <USBD_CtlSendData>
      break;
 800d1d4:	e004      	b.n	800d1e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f88a 	bl	800d2f2 <USBD_CtlError>
      break;
 800d1de:	bf00      	nop
  }
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	885b      	ldrh	r3, [r3, #2]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d107      	bne.n	800d20a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f94c 	bl	800d4a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d208:	e013      	b.n	800d232 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	885b      	ldrh	r3, [r3, #2]
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d10b      	bne.n	800d22a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	889b      	ldrh	r3, [r3, #4]
 800d216:	0a1b      	lsrs	r3, r3, #8
 800d218:	b29b      	uxth	r3, r3
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f93c 	bl	800d4a0 <USBD_CtlSendStatus>
}
 800d228:	e003      	b.n	800d232 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f860 	bl	800d2f2 <USBD_CtlError>
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b082      	sub	sp, #8
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	3b01      	subs	r3, #1
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d80b      	bhi.n	800d26a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	885b      	ldrh	r3, [r3, #2]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d10c      	bne.n	800d274 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f91c 	bl	800d4a0 <USBD_CtlSendStatus>
      }
      break;
 800d268:	e004      	b.n	800d274 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f840 	bl	800d2f2 <USBD_CtlError>
      break;
 800d272:	e000      	b.n	800d276 <USBD_ClrFeature+0x3c>
      break;
 800d274:	bf00      	nop
  }
}
 800d276:	bf00      	nop
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b084      	sub	sp, #16
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
 800d286:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	781a      	ldrb	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3301      	adds	r3, #1
 800d298:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	781a      	ldrb	r2, [r3, #0]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f7ff fa40 	bl	800c72e <SWAPBYTE>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f7ff fa33 	bl	800c72e <SWAPBYTE>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f7ff fa26 	bl	800c72e <SWAPBYTE>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	80da      	strh	r2, [r3, #6]
}
 800d2ea:	bf00      	nop
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2fc:	2180      	movs	r1, #128	@ 0x80
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fcec 	bl	800dcdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d304:	2100      	movs	r1, #0
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 fce8 	bl	800dcdc <USBD_LL_StallEP>
}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d320:	2300      	movs	r3, #0
 800d322:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d042      	beq.n	800d3b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d32e:	6938      	ldr	r0, [r7, #16]
 800d330:	f000 f842 	bl	800d3b8 <USBD_GetLen>
 800d334:	4603      	mov	r3, r0
 800d336:	3301      	adds	r3, #1
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d33e:	d808      	bhi.n	800d352 <USBD_GetString+0x3e>
 800d340:	6938      	ldr	r0, [r7, #16]
 800d342:	f000 f839 	bl	800d3b8 <USBD_GetLen>
 800d346:	4603      	mov	r3, r0
 800d348:	3301      	adds	r3, #1
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	b29a      	uxth	r2, r3
 800d350:	e001      	b.n	800d356 <USBD_GetString+0x42>
 800d352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d35a:	7dfb      	ldrb	r3, [r7, #23]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	4413      	add	r3, r2
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	7812      	ldrb	r2, [r2, #0]
 800d364:	701a      	strb	r2, [r3, #0]
  idx++;
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	3301      	adds	r3, #1
 800d36a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	4413      	add	r3, r2
 800d372:	2203      	movs	r2, #3
 800d374:	701a      	strb	r2, [r3, #0]
  idx++;
 800d376:	7dfb      	ldrb	r3, [r7, #23]
 800d378:	3301      	adds	r3, #1
 800d37a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d37c:	e013      	b.n	800d3a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	4413      	add	r3, r2
 800d384:	693a      	ldr	r2, [r7, #16]
 800d386:	7812      	ldrb	r2, [r2, #0]
 800d388:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	3301      	adds	r3, #1
 800d38e:	613b      	str	r3, [r7, #16]
    idx++;
 800d390:	7dfb      	ldrb	r3, [r7, #23]
 800d392:	3301      	adds	r3, #1
 800d394:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d396:	7dfb      	ldrb	r3, [r7, #23]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	4413      	add	r3, r2
 800d39c:	2200      	movs	r2, #0
 800d39e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d3a0:	7dfb      	ldrb	r3, [r7, #23]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1e7      	bne.n	800d37e <USBD_GetString+0x6a>
 800d3ae:	e000      	b.n	800d3b2 <USBD_GetString+0x9e>
    return;
 800d3b0:	bf00      	nop
  }
}
 800d3b2:	3718      	adds	r7, #24
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d3c8:	e005      	b.n	800d3d6 <USBD_GetLen+0x1e>
  {
    len++;
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1f5      	bne.n	800d3ca <USBD_GetLen+0x12>
  }

  return len;
 800d3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2202      	movs	r2, #2
 800d3fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	2100      	movs	r1, #0
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f000 fceb 	bl	800ddee <USBD_LL_Transmit>

  return USBD_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	2100      	movs	r1, #0
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f000 fcda 	bl	800ddee <USBD_LL_Transmit>

  return USBD_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2203      	movs	r2, #3
 800d454:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	2100      	movs	r1, #0
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f000 fcde 	bl	800de30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	60f8      	str	r0, [r7, #12]
 800d486:	60b9      	str	r1, [r7, #8]
 800d488:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	2100      	movs	r1, #0
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f000 fccd 	bl	800de30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2204      	movs	r2, #4
 800d4ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fc99 	bl	800ddee <USBD_LL_Transmit>

  return USBD_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2205      	movs	r2, #5
 800d4d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2100      	movs	r1, #0
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 fca7 	bl	800de30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	4912      	ldr	r1, [pc, #72]	@ (800d53c <MX_USB_DEVICE_Init+0x50>)
 800d4f4:	4812      	ldr	r0, [pc, #72]	@ (800d540 <MX_USB_DEVICE_Init+0x54>)
 800d4f6:	f7fe fcf7 	bl	800bee8 <USBD_Init>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d001      	beq.n	800d504 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d500:	f7f6 f8e4 	bl	80036cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d504:	490f      	ldr	r1, [pc, #60]	@ (800d544 <MX_USB_DEVICE_Init+0x58>)
 800d506:	480e      	ldr	r0, [pc, #56]	@ (800d540 <MX_USB_DEVICE_Init+0x54>)
 800d508:	f7fe fd1e 	bl	800bf48 <USBD_RegisterClass>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d001      	beq.n	800d516 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d512:	f7f6 f8db 	bl	80036cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d516:	490c      	ldr	r1, [pc, #48]	@ (800d548 <MX_USB_DEVICE_Init+0x5c>)
 800d518:	4809      	ldr	r0, [pc, #36]	@ (800d540 <MX_USB_DEVICE_Init+0x54>)
 800d51a:	f7fe fc15 	bl	800bd48 <USBD_CDC_RegisterInterface>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d001      	beq.n	800d528 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d524:	f7f6 f8d2 	bl	80036cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d528:	4805      	ldr	r0, [pc, #20]	@ (800d540 <MX_USB_DEVICE_Init+0x54>)
 800d52a:	f7fe fd43 	bl	800bfb4 <USBD_Start>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d001      	beq.n	800d538 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d534:	f7f6 f8ca 	bl	80036cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d538:	bf00      	nop
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	200000dc 	.word	0x200000dc
 800d540:	20000ad8 	.word	0x20000ad8
 800d544:	20000048 	.word	0x20000048
 800d548:	200000c8 	.word	0x200000c8

0800d54c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d550:	2200      	movs	r2, #0
 800d552:	4905      	ldr	r1, [pc, #20]	@ (800d568 <CDC_Init_FS+0x1c>)
 800d554:	4805      	ldr	r0, [pc, #20]	@ (800d56c <CDC_Init_FS+0x20>)
 800d556:	f7fe fc11 	bl	800bd7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d55a:	4905      	ldr	r1, [pc, #20]	@ (800d570 <CDC_Init_FS+0x24>)
 800d55c:	4803      	ldr	r0, [pc, #12]	@ (800d56c <CDC_Init_FS+0x20>)
 800d55e:	f7fe fc2f 	bl	800bdc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d562:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d564:	4618      	mov	r0, r3
 800d566:	bd80      	pop	{r7, pc}
 800d568:	200015b4 	.word	0x200015b4
 800d56c:	20000ad8 	.word	0x20000ad8
 800d570:	20000db4 	.word	0x20000db4

0800d574 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d574:	b480      	push	{r7}
 800d576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d578:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	6039      	str	r1, [r7, #0]
 800d58e:	71fb      	strb	r3, [r7, #7]
 800d590:	4613      	mov	r3, r2
 800d592:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d594:	79fb      	ldrb	r3, [r7, #7]
 800d596:	2b23      	cmp	r3, #35	@ 0x23
 800d598:	d84a      	bhi.n	800d630 <CDC_Control_FS+0xac>
 800d59a:	a201      	add	r2, pc, #4	@ (adr r2, 800d5a0 <CDC_Control_FS+0x1c>)
 800d59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a0:	0800d631 	.word	0x0800d631
 800d5a4:	0800d631 	.word	0x0800d631
 800d5a8:	0800d631 	.word	0x0800d631
 800d5ac:	0800d631 	.word	0x0800d631
 800d5b0:	0800d631 	.word	0x0800d631
 800d5b4:	0800d631 	.word	0x0800d631
 800d5b8:	0800d631 	.word	0x0800d631
 800d5bc:	0800d631 	.word	0x0800d631
 800d5c0:	0800d631 	.word	0x0800d631
 800d5c4:	0800d631 	.word	0x0800d631
 800d5c8:	0800d631 	.word	0x0800d631
 800d5cc:	0800d631 	.word	0x0800d631
 800d5d0:	0800d631 	.word	0x0800d631
 800d5d4:	0800d631 	.word	0x0800d631
 800d5d8:	0800d631 	.word	0x0800d631
 800d5dc:	0800d631 	.word	0x0800d631
 800d5e0:	0800d631 	.word	0x0800d631
 800d5e4:	0800d631 	.word	0x0800d631
 800d5e8:	0800d631 	.word	0x0800d631
 800d5ec:	0800d631 	.word	0x0800d631
 800d5f0:	0800d631 	.word	0x0800d631
 800d5f4:	0800d631 	.word	0x0800d631
 800d5f8:	0800d631 	.word	0x0800d631
 800d5fc:	0800d631 	.word	0x0800d631
 800d600:	0800d631 	.word	0x0800d631
 800d604:	0800d631 	.word	0x0800d631
 800d608:	0800d631 	.word	0x0800d631
 800d60c:	0800d631 	.word	0x0800d631
 800d610:	0800d631 	.word	0x0800d631
 800d614:	0800d631 	.word	0x0800d631
 800d618:	0800d631 	.word	0x0800d631
 800d61c:	0800d631 	.word	0x0800d631
 800d620:	0800d631 	.word	0x0800d631
 800d624:	0800d631 	.word	0x0800d631
 800d628:	0800d631 	.word	0x0800d631
 800d62c:	0800d631 	.word	0x0800d631
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d630:	bf00      	nop
  }

  return (USBD_OK);
 800d632:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d634:	4618      	mov	r0, r3
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d64a:	6879      	ldr	r1, [r7, #4]
 800d64c:	4805      	ldr	r0, [pc, #20]	@ (800d664 <CDC_Receive_FS+0x24>)
 800d64e:	f7fe fbb7 	bl	800bdc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d652:	4804      	ldr	r0, [pc, #16]	@ (800d664 <CDC_Receive_FS+0x24>)
 800d654:	f7fe fc12 	bl	800be7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d658:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	20000ad8 	.word	0x20000ad8

0800d668 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	460b      	mov	r3, r1
 800d672:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d678:	4b0d      	ldr	r3, [pc, #52]	@ (800d6b0 <CDC_Transmit_FS+0x48>)
 800d67a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d67e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d686:	2b00      	cmp	r3, #0
 800d688:	d001      	beq.n	800d68e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d68a:	2301      	movs	r3, #1
 800d68c:	e00b      	b.n	800d6a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d68e:	887b      	ldrh	r3, [r7, #2]
 800d690:	461a      	mov	r2, r3
 800d692:	6879      	ldr	r1, [r7, #4]
 800d694:	4806      	ldr	r0, [pc, #24]	@ (800d6b0 <CDC_Transmit_FS+0x48>)
 800d696:	f7fe fb71 	bl	800bd7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d69a:	4805      	ldr	r0, [pc, #20]	@ (800d6b0 <CDC_Transmit_FS+0x48>)
 800d69c:	f7fe fbae 	bl	800bdfc <USBD_CDC_TransmitPacket>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20000ad8 	.word	0x20000ad8

0800d6b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d6c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	371c      	adds	r7, #28
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	4603      	mov	r3, r0
 800d6e0:	6039      	str	r1, [r7, #0]
 800d6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	2212      	movs	r2, #18
 800d6e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d6ea:	4b03      	ldr	r3, [pc, #12]	@ (800d6f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	200000f8 	.word	0x200000f8

0800d6fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	4603      	mov	r3, r0
 800d704:	6039      	str	r1, [r7, #0]
 800d706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2204      	movs	r2, #4
 800d70c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d70e:	4b03      	ldr	r3, [pc, #12]	@ (800d71c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d710:	4618      	mov	r0, r3
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	2000010c 	.word	0x2000010c

0800d720 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	4603      	mov	r3, r0
 800d728:	6039      	str	r1, [r7, #0]
 800d72a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d72c:	79fb      	ldrb	r3, [r7, #7]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d105      	bne.n	800d73e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d732:	683a      	ldr	r2, [r7, #0]
 800d734:	4907      	ldr	r1, [pc, #28]	@ (800d754 <USBD_FS_ProductStrDescriptor+0x34>)
 800d736:	4808      	ldr	r0, [pc, #32]	@ (800d758 <USBD_FS_ProductStrDescriptor+0x38>)
 800d738:	f7ff fdec 	bl	800d314 <USBD_GetString>
 800d73c:	e004      	b.n	800d748 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	4904      	ldr	r1, [pc, #16]	@ (800d754 <USBD_FS_ProductStrDescriptor+0x34>)
 800d742:	4805      	ldr	r0, [pc, #20]	@ (800d758 <USBD_FS_ProductStrDescriptor+0x38>)
 800d744:	f7ff fde6 	bl	800d314 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d748:	4b02      	ldr	r3, [pc, #8]	@ (800d754 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	20001db4 	.word	0x20001db4
 800d758:	080125e4 	.word	0x080125e4

0800d75c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	4603      	mov	r3, r0
 800d764:	6039      	str	r1, [r7, #0]
 800d766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d768:	683a      	ldr	r2, [r7, #0]
 800d76a:	4904      	ldr	r1, [pc, #16]	@ (800d77c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d76c:	4804      	ldr	r0, [pc, #16]	@ (800d780 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d76e:	f7ff fdd1 	bl	800d314 <USBD_GetString>
  return USBD_StrDesc;
 800d772:	4b02      	ldr	r3, [pc, #8]	@ (800d77c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d774:	4618      	mov	r0, r3
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	20001db4 	.word	0x20001db4
 800d780:	080125fc 	.word	0x080125fc

0800d784 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4603      	mov	r3, r0
 800d78c:	6039      	str	r1, [r7, #0]
 800d78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	221a      	movs	r2, #26
 800d794:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d796:	f000 f843 	bl	800d820 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d79a:	4b02      	ldr	r3, [pc, #8]	@ (800d7a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20000110 	.word	0x20000110

0800d7a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	6039      	str	r1, [r7, #0]
 800d7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d7b4:	79fb      	ldrb	r3, [r7, #7]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d105      	bne.n	800d7c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	4907      	ldr	r1, [pc, #28]	@ (800d7dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7be:	4808      	ldr	r0, [pc, #32]	@ (800d7e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7c0:	f7ff fda8 	bl	800d314 <USBD_GetString>
 800d7c4:	e004      	b.n	800d7d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	4904      	ldr	r1, [pc, #16]	@ (800d7dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7ca:	4805      	ldr	r0, [pc, #20]	@ (800d7e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7cc:	f7ff fda2 	bl	800d314 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7d0:	4b02      	ldr	r3, [pc, #8]	@ (800d7dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	20001db4 	.word	0x20001db4
 800d7e0:	08012610 	.word	0x08012610

0800d7e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	6039      	str	r1, [r7, #0]
 800d7ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d105      	bne.n	800d802 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	4907      	ldr	r1, [pc, #28]	@ (800d818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7fa:	4808      	ldr	r0, [pc, #32]	@ (800d81c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7fc:	f7ff fd8a 	bl	800d314 <USBD_GetString>
 800d800:	e004      	b.n	800d80c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	4904      	ldr	r1, [pc, #16]	@ (800d818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d806:	4805      	ldr	r0, [pc, #20]	@ (800d81c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d808:	f7ff fd84 	bl	800d314 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d80c:	4b02      	ldr	r3, [pc, #8]	@ (800d818 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	20001db4 	.word	0x20001db4
 800d81c:	0801261c 	.word	0x0801261c

0800d820 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d826:	4b0f      	ldr	r3, [pc, #60]	@ (800d864 <Get_SerialNum+0x44>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d82c:	4b0e      	ldr	r3, [pc, #56]	@ (800d868 <Get_SerialNum+0x48>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d832:	4b0e      	ldr	r3, [pc, #56]	@ (800d86c <Get_SerialNum+0x4c>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4413      	add	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d009      	beq.n	800d85a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d846:	2208      	movs	r2, #8
 800d848:	4909      	ldr	r1, [pc, #36]	@ (800d870 <Get_SerialNum+0x50>)
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f000 f814 	bl	800d878 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d850:	2204      	movs	r2, #4
 800d852:	4908      	ldr	r1, [pc, #32]	@ (800d874 <Get_SerialNum+0x54>)
 800d854:	68b8      	ldr	r0, [r7, #8]
 800d856:	f000 f80f 	bl	800d878 <IntToUnicode>
  }
}
 800d85a:	bf00      	nop
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	1fff7a10 	.word	0x1fff7a10
 800d868:	1fff7a14 	.word	0x1fff7a14
 800d86c:	1fff7a18 	.word	0x1fff7a18
 800d870:	20000112 	.word	0x20000112
 800d874:	20000122 	.word	0x20000122

0800d878 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d878:	b480      	push	{r7}
 800d87a:	b087      	sub	sp, #28
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	4613      	mov	r3, r2
 800d884:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d88a:	2300      	movs	r3, #0
 800d88c:	75fb      	strb	r3, [r7, #23]
 800d88e:	e027      	b.n	800d8e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	0f1b      	lsrs	r3, r3, #28
 800d894:	2b09      	cmp	r3, #9
 800d896:	d80b      	bhi.n	800d8b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	0f1b      	lsrs	r3, r3, #28
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	7dfb      	ldrb	r3, [r7, #23]
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	440b      	add	r3, r1
 800d8a8:	3230      	adds	r2, #48	@ 0x30
 800d8aa:	b2d2      	uxtb	r2, r2
 800d8ac:	701a      	strb	r2, [r3, #0]
 800d8ae:	e00a      	b.n	800d8c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	0f1b      	lsrs	r3, r3, #28
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	440b      	add	r3, r1
 800d8c0:	3237      	adds	r2, #55	@ 0x37
 800d8c2:	b2d2      	uxtb	r2, r2
 800d8c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	011b      	lsls	r3, r3, #4
 800d8ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d8cc:	7dfb      	ldrb	r3, [r7, #23]
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d8da:	7dfb      	ldrb	r3, [r7, #23]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	75fb      	strb	r3, [r7, #23]
 800d8e0:	7dfa      	ldrb	r2, [r7, #23]
 800d8e2:	79fb      	ldrb	r3, [r7, #7]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d3d3      	bcc.n	800d890 <IntToUnicode+0x18>
  }
}
 800d8e8:	bf00      	nop
 800d8ea:	bf00      	nop
 800d8ec:	371c      	adds	r7, #28
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr
	...

0800d8f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b08a      	sub	sp, #40	@ 0x28
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d900:	f107 0314 	add.w	r3, r7, #20
 800d904:	2200      	movs	r2, #0
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	605a      	str	r2, [r3, #4]
 800d90a:	609a      	str	r2, [r3, #8]
 800d90c:	60da      	str	r2, [r3, #12]
 800d90e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d918:	d13a      	bne.n	800d990 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d91a:	2300      	movs	r3, #0
 800d91c:	613b      	str	r3, [r7, #16]
 800d91e:	4b1e      	ldr	r3, [pc, #120]	@ (800d998 <HAL_PCD_MspInit+0xa0>)
 800d920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d922:	4a1d      	ldr	r2, [pc, #116]	@ (800d998 <HAL_PCD_MspInit+0xa0>)
 800d924:	f043 0301 	orr.w	r3, r3, #1
 800d928:	6313      	str	r3, [r2, #48]	@ 0x30
 800d92a:	4b1b      	ldr	r3, [pc, #108]	@ (800d998 <HAL_PCD_MspInit+0xa0>)
 800d92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d92e:	f003 0301 	and.w	r3, r3, #1
 800d932:	613b      	str	r3, [r7, #16]
 800d934:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d936:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d93a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d93c:	2302      	movs	r3, #2
 800d93e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d944:	2303      	movs	r3, #3
 800d946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d948:	230a      	movs	r3, #10
 800d94a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d94c:	f107 0314 	add.w	r3, r7, #20
 800d950:	4619      	mov	r1, r3
 800d952:	4812      	ldr	r0, [pc, #72]	@ (800d99c <HAL_PCD_MspInit+0xa4>)
 800d954:	f7f7 fa70 	bl	8004e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d958:	4b0f      	ldr	r3, [pc, #60]	@ (800d998 <HAL_PCD_MspInit+0xa0>)
 800d95a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d95c:	4a0e      	ldr	r2, [pc, #56]	@ (800d998 <HAL_PCD_MspInit+0xa0>)
 800d95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d962:	6353      	str	r3, [r2, #52]	@ 0x34
 800d964:	2300      	movs	r3, #0
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	4b0b      	ldr	r3, [pc, #44]	@ (800d998 <HAL_PCD_MspInit+0xa0>)
 800d96a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d96c:	4a0a      	ldr	r2, [pc, #40]	@ (800d998 <HAL_PCD_MspInit+0xa0>)
 800d96e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d972:	6453      	str	r3, [r2, #68]	@ 0x44
 800d974:	4b08      	ldr	r3, [pc, #32]	@ (800d998 <HAL_PCD_MspInit+0xa0>)
 800d976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d980:	2200      	movs	r2, #0
 800d982:	2100      	movs	r1, #0
 800d984:	2043      	movs	r0, #67	@ 0x43
 800d986:	f7f6 fe1e 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d98a:	2043      	movs	r0, #67	@ 0x43
 800d98c:	f7f6 fe37 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d990:	bf00      	nop
 800d992:	3728      	adds	r7, #40	@ 0x28
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	40023800 	.word	0x40023800
 800d99c:	40020000 	.word	0x40020000

0800d9a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	4610      	mov	r0, r2
 800d9b8:	f7fe fb49 	bl	800c04e <USBD_LL_SetupStage>
}
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d9d6:	78fa      	ldrb	r2, [r7, #3]
 800d9d8:	6879      	ldr	r1, [r7, #4]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	00db      	lsls	r3, r3, #3
 800d9de:	4413      	add	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	440b      	add	r3, r1
 800d9e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	78fb      	ldrb	r3, [r7, #3]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	f7fe fb83 	bl	800c0f8 <USBD_LL_DataOutStage>
}
 800d9f2:	bf00      	nop
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	460b      	mov	r3, r1
 800da04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800da0c:	78fa      	ldrb	r2, [r7, #3]
 800da0e:	6879      	ldr	r1, [r7, #4]
 800da10:	4613      	mov	r3, r2
 800da12:	00db      	lsls	r3, r3, #3
 800da14:	4413      	add	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	440b      	add	r3, r1
 800da1a:	3320      	adds	r3, #32
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	78fb      	ldrb	r3, [r7, #3]
 800da20:	4619      	mov	r1, r3
 800da22:	f7fe fc1c 	bl	800c25e <USBD_LL_DataInStage>
}
 800da26:	bf00      	nop
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe fd56 	bl	800c4ee <USBD_LL_SOF>
}
 800da42:	bf00      	nop
 800da44:	3708      	adds	r7, #8
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800da52:	2301      	movs	r3, #1
 800da54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	79db      	ldrb	r3, [r3, #7]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d102      	bne.n	800da64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800da5e:	2300      	movs	r3, #0
 800da60:	73fb      	strb	r3, [r7, #15]
 800da62:	e008      	b.n	800da76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	79db      	ldrb	r3, [r3, #7]
 800da68:	2b02      	cmp	r3, #2
 800da6a:	d102      	bne.n	800da72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800da6c:	2301      	movs	r3, #1
 800da6e:	73fb      	strb	r3, [r7, #15]
 800da70:	e001      	b.n	800da76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800da72:	f7f5 fe2b 	bl	80036cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da7c:	7bfa      	ldrb	r2, [r7, #15]
 800da7e:	4611      	mov	r1, r2
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe fcf0 	bl	800c466 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fe fc98 	bl	800c3c2 <USBD_LL_Reset>
}
 800da92:	bf00      	nop
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fe fceb 	bl	800c486 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	6812      	ldr	r2, [r2, #0]
 800dabe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dac2:	f043 0301 	orr.w	r3, r3, #1
 800dac6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	7adb      	ldrb	r3, [r3, #11]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d005      	beq.n	800dadc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dad0:	4b04      	ldr	r3, [pc, #16]	@ (800dae4 <HAL_PCD_SuspendCallback+0x48>)
 800dad2:	691b      	ldr	r3, [r3, #16]
 800dad4:	4a03      	ldr	r2, [pc, #12]	@ (800dae4 <HAL_PCD_SuspendCallback+0x48>)
 800dad6:	f043 0306 	orr.w	r3, r3, #6
 800dada:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dadc:	bf00      	nop
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	e000ed00 	.word	0xe000ed00

0800dae8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fe fce1 	bl	800c4be <USBD_LL_Resume>
}
 800dafc:	bf00      	nop
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db16:	78fa      	ldrb	r2, [r7, #3]
 800db18:	4611      	mov	r1, r2
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fe fd39 	bl	800c592 <USBD_LL_IsoOUTIncomplete>
}
 800db20:	bf00      	nop
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db3a:	78fa      	ldrb	r2, [r7, #3]
 800db3c:	4611      	mov	r1, r2
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fe fcf5 	bl	800c52e <USBD_LL_IsoINIncomplete>
}
 800db44:	bf00      	nop
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fe fd4b 	bl	800c5f6 <USBD_LL_DevConnected>
}
 800db60:	bf00      	nop
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db76:	4618      	mov	r0, r3
 800db78:	f7fe fd48 	bl	800c60c <USBD_LL_DevDisconnected>
}
 800db7c:	bf00      	nop
 800db7e:	3708      	adds	r7, #8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d13c      	bne.n	800dc0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800db94:	4a20      	ldr	r2, [pc, #128]	@ (800dc18 <USBD_LL_Init+0x94>)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a1e      	ldr	r2, [pc, #120]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dba0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dba4:	4b1c      	ldr	r3, [pc, #112]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dba6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dbaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dbac:	4b1a      	ldr	r3, [pc, #104]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbae:	2204      	movs	r2, #4
 800dbb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dbb2:	4b19      	ldr	r3, [pc, #100]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbb4:	2202      	movs	r2, #2
 800dbb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dbb8:	4b17      	ldr	r3, [pc, #92]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbba:	2200      	movs	r2, #0
 800dbbc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dbbe:	4b16      	ldr	r3, [pc, #88]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbc0:	2202      	movs	r2, #2
 800dbc2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dbc4:	4b14      	ldr	r3, [pc, #80]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dbca:	4b13      	ldr	r3, [pc, #76]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dbd0:	4b11      	ldr	r3, [pc, #68]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dbd6:	4b10      	ldr	r3, [pc, #64]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dbdc:	4b0e      	ldr	r3, [pc, #56]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dbe2:	480d      	ldr	r0, [pc, #52]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbe4:	f7f7 fb10 	bl	8005208 <HAL_PCD_Init>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dbee:	f7f5 fd6d 	bl	80036cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dbf2:	2180      	movs	r1, #128	@ 0x80
 800dbf4:	4808      	ldr	r0, [pc, #32]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dbf6:	f7f8 fd3c 	bl	8006672 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dbfa:	2240      	movs	r2, #64	@ 0x40
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	4806      	ldr	r0, [pc, #24]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dc00:	f7f8 fcf0 	bl	80065e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc04:	2280      	movs	r2, #128	@ 0x80
 800dc06:	2101      	movs	r1, #1
 800dc08:	4803      	ldr	r0, [pc, #12]	@ (800dc18 <USBD_LL_Init+0x94>)
 800dc0a:	f7f8 fceb 	bl	80065e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	20001fb4 	.word	0x20001fb4

0800dc1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7f7 fbf7 	bl	8005426 <HAL_PCD_Start>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 f942 	bl	800dec8 <USBD_Get_USB_Status>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc48:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b084      	sub	sp, #16
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	4608      	mov	r0, r1
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4603      	mov	r3, r0
 800dc62:	70fb      	strb	r3, [r7, #3]
 800dc64:	460b      	mov	r3, r1
 800dc66:	70bb      	strb	r3, [r7, #2]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc70:	2300      	movs	r3, #0
 800dc72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc7a:	78bb      	ldrb	r3, [r7, #2]
 800dc7c:	883a      	ldrh	r2, [r7, #0]
 800dc7e:	78f9      	ldrb	r1, [r7, #3]
 800dc80:	f7f8 f8cb 	bl	8005e1a <HAL_PCD_EP_Open>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 f91c 	bl	800dec8 <USBD_Get_USB_Status>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc94:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b084      	sub	sp, #16
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	460b      	mov	r3, r1
 800dca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcb8:	78fa      	ldrb	r2, [r7, #3]
 800dcba:	4611      	mov	r1, r2
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7f8 f916 	bl	8005eee <HAL_PCD_EP_Close>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc6:	7bfb      	ldrb	r3, [r7, #15]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f000 f8fd 	bl	800dec8 <USBD_Get_USB_Status>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	460b      	mov	r3, r1
 800dce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcec:	2300      	movs	r3, #0
 800dcee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcf6:	78fa      	ldrb	r2, [r7, #3]
 800dcf8:	4611      	mov	r1, r2
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7f8 f9ce 	bl	800609c <HAL_PCD_EP_SetStall>
 800dd00:	4603      	mov	r3, r0
 800dd02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd04:	7bfb      	ldrb	r3, [r7, #15]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 f8de 	bl	800dec8 <USBD_Get_USB_Status>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd10:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	460b      	mov	r3, r1
 800dd24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd34:	78fa      	ldrb	r2, [r7, #3]
 800dd36:	4611      	mov	r1, r2
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7f8 fa12 	bl	8006162 <HAL_PCD_EP_ClrStall>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd42:	7bfb      	ldrb	r3, [r7, #15]
 800dd44:	4618      	mov	r0, r3
 800dd46:	f000 f8bf 	bl	800dec8 <USBD_Get_USB_Status>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	460b      	mov	r3, r1
 800dd62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	da0b      	bge.n	800dd8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd7a:	68f9      	ldr	r1, [r7, #12]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	4413      	add	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	440b      	add	r3, r1
 800dd86:	3316      	adds	r3, #22
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	e00b      	b.n	800dda4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd8c:	78fb      	ldrb	r3, [r7, #3]
 800dd8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd92:	68f9      	ldr	r1, [r7, #12]
 800dd94:	4613      	mov	r3, r2
 800dd96:	00db      	lsls	r3, r3, #3
 800dd98:	4413      	add	r3, r2
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	440b      	add	r3, r1
 800dd9e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dda2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddca:	78fa      	ldrb	r2, [r7, #3]
 800ddcc:	4611      	mov	r1, r2
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f7 ffff 	bl	8005dd2 <HAL_PCD_SetAddress>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddd8:	7bfb      	ldrb	r3, [r7, #15]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 f874 	bl	800dec8 <USBD_Get_USB_Status>
 800dde0:	4603      	mov	r3, r0
 800dde2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b086      	sub	sp, #24
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	60f8      	str	r0, [r7, #12]
 800ddf6:	607a      	str	r2, [r7, #4]
 800ddf8:	603b      	str	r3, [r7, #0]
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de0c:	7af9      	ldrb	r1, [r7, #11]
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	f7f8 f909 	bl	8006028 <HAL_PCD_EP_Transmit>
 800de16:	4603      	mov	r3, r0
 800de18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 f853 	bl	800dec8 <USBD_Get_USB_Status>
 800de22:	4603      	mov	r3, r0
 800de24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de26:	7dbb      	ldrb	r3, [r7, #22]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	607a      	str	r2, [r7, #4]
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	460b      	mov	r3, r1
 800de3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de40:	2300      	movs	r3, #0
 800de42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de44:	2300      	movs	r3, #0
 800de46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de4e:	7af9      	ldrb	r1, [r7, #11]
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	f7f8 f895 	bl	8005f82 <HAL_PCD_EP_Receive>
 800de58:	4603      	mov	r3, r0
 800de5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de5c:	7dfb      	ldrb	r3, [r7, #23]
 800de5e:	4618      	mov	r0, r3
 800de60:	f000 f832 	bl	800dec8 <USBD_Get_USB_Status>
 800de64:	4603      	mov	r3, r0
 800de66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de68:	7dbb      	ldrb	r3, [r7, #22]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	460b      	mov	r3, r1
 800de7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de84:	78fa      	ldrb	r2, [r7, #3]
 800de86:	4611      	mov	r1, r2
 800de88:	4618      	mov	r0, r3
 800de8a:	f7f8 f8b5 	bl	8005ff8 <HAL_PCD_EP_GetRxCount>
 800de8e:	4603      	mov	r3, r0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dea0:	4b03      	ldr	r3, [pc, #12]	@ (800deb0 <USBD_static_malloc+0x18>)
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	370c      	adds	r7, #12
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	20002498 	.word	0x20002498

0800deb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]

}
 800debc:	bf00      	nop
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	4603      	mov	r3, r0
 800ded0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d817      	bhi.n	800df0c <USBD_Get_USB_Status+0x44>
 800dedc:	a201      	add	r2, pc, #4	@ (adr r2, 800dee4 <USBD_Get_USB_Status+0x1c>)
 800dede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee2:	bf00      	nop
 800dee4:	0800def5 	.word	0x0800def5
 800dee8:	0800defb 	.word	0x0800defb
 800deec:	0800df01 	.word	0x0800df01
 800def0:	0800df07 	.word	0x0800df07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]
    break;
 800def8:	e00b      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800defa:	2303      	movs	r3, #3
 800defc:	73fb      	strb	r3, [r7, #15]
    break;
 800defe:	e008      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df00:	2301      	movs	r3, #1
 800df02:	73fb      	strb	r3, [r7, #15]
    break;
 800df04:	e005      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df06:	2303      	movs	r3, #3
 800df08:	73fb      	strb	r3, [r7, #15]
    break;
 800df0a:	e002      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df0c:	2303      	movs	r3, #3
 800df0e:	73fb      	strb	r3, [r7, #15]
    break;
 800df10:	bf00      	nop
  }
  return usb_status;
 800df12:	7bfb      	ldrb	r3, [r7, #15]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <_strtoul_l.constprop.0>:
 800df20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df24:	4e34      	ldr	r6, [pc, #208]	@ (800dff8 <_strtoul_l.constprop.0+0xd8>)
 800df26:	4686      	mov	lr, r0
 800df28:	460d      	mov	r5, r1
 800df2a:	4628      	mov	r0, r5
 800df2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df30:	5d37      	ldrb	r7, [r6, r4]
 800df32:	f017 0708 	ands.w	r7, r7, #8
 800df36:	d1f8      	bne.n	800df2a <_strtoul_l.constprop.0+0xa>
 800df38:	2c2d      	cmp	r4, #45	@ 0x2d
 800df3a:	d12f      	bne.n	800df9c <_strtoul_l.constprop.0+0x7c>
 800df3c:	782c      	ldrb	r4, [r5, #0]
 800df3e:	2701      	movs	r7, #1
 800df40:	1c85      	adds	r5, r0, #2
 800df42:	f033 0010 	bics.w	r0, r3, #16
 800df46:	d109      	bne.n	800df5c <_strtoul_l.constprop.0+0x3c>
 800df48:	2c30      	cmp	r4, #48	@ 0x30
 800df4a:	d12c      	bne.n	800dfa6 <_strtoul_l.constprop.0+0x86>
 800df4c:	7828      	ldrb	r0, [r5, #0]
 800df4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800df52:	2858      	cmp	r0, #88	@ 0x58
 800df54:	d127      	bne.n	800dfa6 <_strtoul_l.constprop.0+0x86>
 800df56:	786c      	ldrb	r4, [r5, #1]
 800df58:	2310      	movs	r3, #16
 800df5a:	3502      	adds	r5, #2
 800df5c:	f04f 38ff 	mov.w	r8, #4294967295
 800df60:	2600      	movs	r6, #0
 800df62:	fbb8 f8f3 	udiv	r8, r8, r3
 800df66:	fb03 f908 	mul.w	r9, r3, r8
 800df6a:	ea6f 0909 	mvn.w	r9, r9
 800df6e:	4630      	mov	r0, r6
 800df70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800df74:	f1bc 0f09 	cmp.w	ip, #9
 800df78:	d81c      	bhi.n	800dfb4 <_strtoul_l.constprop.0+0x94>
 800df7a:	4664      	mov	r4, ip
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	dd2a      	ble.n	800dfd6 <_strtoul_l.constprop.0+0xb6>
 800df80:	f1b6 3fff 	cmp.w	r6, #4294967295
 800df84:	d007      	beq.n	800df96 <_strtoul_l.constprop.0+0x76>
 800df86:	4580      	cmp	r8, r0
 800df88:	d322      	bcc.n	800dfd0 <_strtoul_l.constprop.0+0xb0>
 800df8a:	d101      	bne.n	800df90 <_strtoul_l.constprop.0+0x70>
 800df8c:	45a1      	cmp	r9, r4
 800df8e:	db1f      	blt.n	800dfd0 <_strtoul_l.constprop.0+0xb0>
 800df90:	fb00 4003 	mla	r0, r0, r3, r4
 800df94:	2601      	movs	r6, #1
 800df96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df9a:	e7e9      	b.n	800df70 <_strtoul_l.constprop.0+0x50>
 800df9c:	2c2b      	cmp	r4, #43	@ 0x2b
 800df9e:	bf04      	itt	eq
 800dfa0:	782c      	ldrbeq	r4, [r5, #0]
 800dfa2:	1c85      	addeq	r5, r0, #2
 800dfa4:	e7cd      	b.n	800df42 <_strtoul_l.constprop.0+0x22>
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d1d8      	bne.n	800df5c <_strtoul_l.constprop.0+0x3c>
 800dfaa:	2c30      	cmp	r4, #48	@ 0x30
 800dfac:	bf0c      	ite	eq
 800dfae:	2308      	moveq	r3, #8
 800dfb0:	230a      	movne	r3, #10
 800dfb2:	e7d3      	b.n	800df5c <_strtoul_l.constprop.0+0x3c>
 800dfb4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800dfb8:	f1bc 0f19 	cmp.w	ip, #25
 800dfbc:	d801      	bhi.n	800dfc2 <_strtoul_l.constprop.0+0xa2>
 800dfbe:	3c37      	subs	r4, #55	@ 0x37
 800dfc0:	e7dc      	b.n	800df7c <_strtoul_l.constprop.0+0x5c>
 800dfc2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800dfc6:	f1bc 0f19 	cmp.w	ip, #25
 800dfca:	d804      	bhi.n	800dfd6 <_strtoul_l.constprop.0+0xb6>
 800dfcc:	3c57      	subs	r4, #87	@ 0x57
 800dfce:	e7d5      	b.n	800df7c <_strtoul_l.constprop.0+0x5c>
 800dfd0:	f04f 36ff 	mov.w	r6, #4294967295
 800dfd4:	e7df      	b.n	800df96 <_strtoul_l.constprop.0+0x76>
 800dfd6:	1c73      	adds	r3, r6, #1
 800dfd8:	d106      	bne.n	800dfe8 <_strtoul_l.constprop.0+0xc8>
 800dfda:	2322      	movs	r3, #34	@ 0x22
 800dfdc:	f8ce 3000 	str.w	r3, [lr]
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	b932      	cbnz	r2, 800dff2 <_strtoul_l.constprop.0+0xd2>
 800dfe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfe8:	b107      	cbz	r7, 800dfec <_strtoul_l.constprop.0+0xcc>
 800dfea:	4240      	negs	r0, r0
 800dfec:	2a00      	cmp	r2, #0
 800dfee:	d0f9      	beq.n	800dfe4 <_strtoul_l.constprop.0+0xc4>
 800dff0:	b106      	cbz	r6, 800dff4 <_strtoul_l.constprop.0+0xd4>
 800dff2:	1e69      	subs	r1, r5, #1
 800dff4:	6011      	str	r1, [r2, #0]
 800dff6:	e7f5      	b.n	800dfe4 <_strtoul_l.constprop.0+0xc4>
 800dff8:	08012655 	.word	0x08012655

0800dffc <strtoul>:
 800dffc:	4613      	mov	r3, r2
 800dffe:	460a      	mov	r2, r1
 800e000:	4601      	mov	r1, r0
 800e002:	4802      	ldr	r0, [pc, #8]	@ (800e00c <strtoul+0x10>)
 800e004:	6800      	ldr	r0, [r0, #0]
 800e006:	f7ff bf8b 	b.w	800df20 <_strtoul_l.constprop.0>
 800e00a:	bf00      	nop
 800e00c:	20000138 	.word	0x20000138

0800e010 <__cvt>:
 800e010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e014:	ec57 6b10 	vmov	r6, r7, d0
 800e018:	2f00      	cmp	r7, #0
 800e01a:	460c      	mov	r4, r1
 800e01c:	4619      	mov	r1, r3
 800e01e:	463b      	mov	r3, r7
 800e020:	bfbb      	ittet	lt
 800e022:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e026:	461f      	movlt	r7, r3
 800e028:	2300      	movge	r3, #0
 800e02a:	232d      	movlt	r3, #45	@ 0x2d
 800e02c:	700b      	strb	r3, [r1, #0]
 800e02e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e030:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e034:	4691      	mov	r9, r2
 800e036:	f023 0820 	bic.w	r8, r3, #32
 800e03a:	bfbc      	itt	lt
 800e03c:	4632      	movlt	r2, r6
 800e03e:	4616      	movlt	r6, r2
 800e040:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e044:	d005      	beq.n	800e052 <__cvt+0x42>
 800e046:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e04a:	d100      	bne.n	800e04e <__cvt+0x3e>
 800e04c:	3401      	adds	r4, #1
 800e04e:	2102      	movs	r1, #2
 800e050:	e000      	b.n	800e054 <__cvt+0x44>
 800e052:	2103      	movs	r1, #3
 800e054:	ab03      	add	r3, sp, #12
 800e056:	9301      	str	r3, [sp, #4]
 800e058:	ab02      	add	r3, sp, #8
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	ec47 6b10 	vmov	d0, r6, r7
 800e060:	4653      	mov	r3, sl
 800e062:	4622      	mov	r2, r4
 800e064:	f000 fe8c 	bl	800ed80 <_dtoa_r>
 800e068:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e06c:	4605      	mov	r5, r0
 800e06e:	d119      	bne.n	800e0a4 <__cvt+0x94>
 800e070:	f019 0f01 	tst.w	r9, #1
 800e074:	d00e      	beq.n	800e094 <__cvt+0x84>
 800e076:	eb00 0904 	add.w	r9, r0, r4
 800e07a:	2200      	movs	r2, #0
 800e07c:	2300      	movs	r3, #0
 800e07e:	4630      	mov	r0, r6
 800e080:	4639      	mov	r1, r7
 800e082:	f7f2 fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 800e086:	b108      	cbz	r0, 800e08c <__cvt+0x7c>
 800e088:	f8cd 900c 	str.w	r9, [sp, #12]
 800e08c:	2230      	movs	r2, #48	@ 0x30
 800e08e:	9b03      	ldr	r3, [sp, #12]
 800e090:	454b      	cmp	r3, r9
 800e092:	d31e      	bcc.n	800e0d2 <__cvt+0xc2>
 800e094:	9b03      	ldr	r3, [sp, #12]
 800e096:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e098:	1b5b      	subs	r3, r3, r5
 800e09a:	4628      	mov	r0, r5
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	b004      	add	sp, #16
 800e0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0a8:	eb00 0904 	add.w	r9, r0, r4
 800e0ac:	d1e5      	bne.n	800e07a <__cvt+0x6a>
 800e0ae:	7803      	ldrb	r3, [r0, #0]
 800e0b0:	2b30      	cmp	r3, #48	@ 0x30
 800e0b2:	d10a      	bne.n	800e0ca <__cvt+0xba>
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f7f2 fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0c0:	b918      	cbnz	r0, 800e0ca <__cvt+0xba>
 800e0c2:	f1c4 0401 	rsb	r4, r4, #1
 800e0c6:	f8ca 4000 	str.w	r4, [sl]
 800e0ca:	f8da 3000 	ldr.w	r3, [sl]
 800e0ce:	4499      	add	r9, r3
 800e0d0:	e7d3      	b.n	800e07a <__cvt+0x6a>
 800e0d2:	1c59      	adds	r1, r3, #1
 800e0d4:	9103      	str	r1, [sp, #12]
 800e0d6:	701a      	strb	r2, [r3, #0]
 800e0d8:	e7d9      	b.n	800e08e <__cvt+0x7e>

0800e0da <__exponent>:
 800e0da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0dc:	2900      	cmp	r1, #0
 800e0de:	bfba      	itte	lt
 800e0e0:	4249      	neglt	r1, r1
 800e0e2:	232d      	movlt	r3, #45	@ 0x2d
 800e0e4:	232b      	movge	r3, #43	@ 0x2b
 800e0e6:	2909      	cmp	r1, #9
 800e0e8:	7002      	strb	r2, [r0, #0]
 800e0ea:	7043      	strb	r3, [r0, #1]
 800e0ec:	dd29      	ble.n	800e142 <__exponent+0x68>
 800e0ee:	f10d 0307 	add.w	r3, sp, #7
 800e0f2:	461d      	mov	r5, r3
 800e0f4:	270a      	movs	r7, #10
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	fbb1 f6f7 	udiv	r6, r1, r7
 800e0fc:	fb07 1416 	mls	r4, r7, r6, r1
 800e100:	3430      	adds	r4, #48	@ 0x30
 800e102:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e106:	460c      	mov	r4, r1
 800e108:	2c63      	cmp	r4, #99	@ 0x63
 800e10a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e10e:	4631      	mov	r1, r6
 800e110:	dcf1      	bgt.n	800e0f6 <__exponent+0x1c>
 800e112:	3130      	adds	r1, #48	@ 0x30
 800e114:	1e94      	subs	r4, r2, #2
 800e116:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e11a:	1c41      	adds	r1, r0, #1
 800e11c:	4623      	mov	r3, r4
 800e11e:	42ab      	cmp	r3, r5
 800e120:	d30a      	bcc.n	800e138 <__exponent+0x5e>
 800e122:	f10d 0309 	add.w	r3, sp, #9
 800e126:	1a9b      	subs	r3, r3, r2
 800e128:	42ac      	cmp	r4, r5
 800e12a:	bf88      	it	hi
 800e12c:	2300      	movhi	r3, #0
 800e12e:	3302      	adds	r3, #2
 800e130:	4403      	add	r3, r0
 800e132:	1a18      	subs	r0, r3, r0
 800e134:	b003      	add	sp, #12
 800e136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e138:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e13c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e140:	e7ed      	b.n	800e11e <__exponent+0x44>
 800e142:	2330      	movs	r3, #48	@ 0x30
 800e144:	3130      	adds	r1, #48	@ 0x30
 800e146:	7083      	strb	r3, [r0, #2]
 800e148:	70c1      	strb	r1, [r0, #3]
 800e14a:	1d03      	adds	r3, r0, #4
 800e14c:	e7f1      	b.n	800e132 <__exponent+0x58>
	...

0800e150 <_printf_float>:
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	b08d      	sub	sp, #52	@ 0x34
 800e156:	460c      	mov	r4, r1
 800e158:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e15c:	4616      	mov	r6, r2
 800e15e:	461f      	mov	r7, r3
 800e160:	4605      	mov	r5, r0
 800e162:	f000 fced 	bl	800eb40 <_localeconv_r>
 800e166:	6803      	ldr	r3, [r0, #0]
 800e168:	9304      	str	r3, [sp, #16]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f2 f880 	bl	8000270 <strlen>
 800e170:	2300      	movs	r3, #0
 800e172:	930a      	str	r3, [sp, #40]	@ 0x28
 800e174:	f8d8 3000 	ldr.w	r3, [r8]
 800e178:	9005      	str	r0, [sp, #20]
 800e17a:	3307      	adds	r3, #7
 800e17c:	f023 0307 	bic.w	r3, r3, #7
 800e180:	f103 0208 	add.w	r2, r3, #8
 800e184:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e188:	f8d4 b000 	ldr.w	fp, [r4]
 800e18c:	f8c8 2000 	str.w	r2, [r8]
 800e190:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e194:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e198:	9307      	str	r3, [sp, #28]
 800e19a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e19e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e1a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1a6:	4b9c      	ldr	r3, [pc, #624]	@ (800e418 <_printf_float+0x2c8>)
 800e1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ac:	f7f2 fcbe 	bl	8000b2c <__aeabi_dcmpun>
 800e1b0:	bb70      	cbnz	r0, 800e210 <_printf_float+0xc0>
 800e1b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1b6:	4b98      	ldr	r3, [pc, #608]	@ (800e418 <_printf_float+0x2c8>)
 800e1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1bc:	f7f2 fc98 	bl	8000af0 <__aeabi_dcmple>
 800e1c0:	bb30      	cbnz	r0, 800e210 <_printf_float+0xc0>
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4640      	mov	r0, r8
 800e1c8:	4649      	mov	r1, r9
 800e1ca:	f7f2 fc87 	bl	8000adc <__aeabi_dcmplt>
 800e1ce:	b110      	cbz	r0, 800e1d6 <_printf_float+0x86>
 800e1d0:	232d      	movs	r3, #45	@ 0x2d
 800e1d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1d6:	4a91      	ldr	r2, [pc, #580]	@ (800e41c <_printf_float+0x2cc>)
 800e1d8:	4b91      	ldr	r3, [pc, #580]	@ (800e420 <_printf_float+0x2d0>)
 800e1da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e1de:	bf94      	ite	ls
 800e1e0:	4690      	movls	r8, r2
 800e1e2:	4698      	movhi	r8, r3
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	6123      	str	r3, [r4, #16]
 800e1e8:	f02b 0304 	bic.w	r3, fp, #4
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	f04f 0900 	mov.w	r9, #0
 800e1f2:	9700      	str	r7, [sp, #0]
 800e1f4:	4633      	mov	r3, r6
 800e1f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e1f8:	4621      	mov	r1, r4
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f000 f9d2 	bl	800e5a4 <_printf_common>
 800e200:	3001      	adds	r0, #1
 800e202:	f040 808d 	bne.w	800e320 <_printf_float+0x1d0>
 800e206:	f04f 30ff 	mov.w	r0, #4294967295
 800e20a:	b00d      	add	sp, #52	@ 0x34
 800e20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e210:	4642      	mov	r2, r8
 800e212:	464b      	mov	r3, r9
 800e214:	4640      	mov	r0, r8
 800e216:	4649      	mov	r1, r9
 800e218:	f7f2 fc88 	bl	8000b2c <__aeabi_dcmpun>
 800e21c:	b140      	cbz	r0, 800e230 <_printf_float+0xe0>
 800e21e:	464b      	mov	r3, r9
 800e220:	2b00      	cmp	r3, #0
 800e222:	bfbc      	itt	lt
 800e224:	232d      	movlt	r3, #45	@ 0x2d
 800e226:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e22a:	4a7e      	ldr	r2, [pc, #504]	@ (800e424 <_printf_float+0x2d4>)
 800e22c:	4b7e      	ldr	r3, [pc, #504]	@ (800e428 <_printf_float+0x2d8>)
 800e22e:	e7d4      	b.n	800e1da <_printf_float+0x8a>
 800e230:	6863      	ldr	r3, [r4, #4]
 800e232:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e236:	9206      	str	r2, [sp, #24]
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	d13b      	bne.n	800e2b4 <_printf_float+0x164>
 800e23c:	2306      	movs	r3, #6
 800e23e:	6063      	str	r3, [r4, #4]
 800e240:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e244:	2300      	movs	r3, #0
 800e246:	6022      	str	r2, [r4, #0]
 800e248:	9303      	str	r3, [sp, #12]
 800e24a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e24c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e250:	ab09      	add	r3, sp, #36	@ 0x24
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	6861      	ldr	r1, [r4, #4]
 800e256:	ec49 8b10 	vmov	d0, r8, r9
 800e25a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e25e:	4628      	mov	r0, r5
 800e260:	f7ff fed6 	bl	800e010 <__cvt>
 800e264:	9b06      	ldr	r3, [sp, #24]
 800e266:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e268:	2b47      	cmp	r3, #71	@ 0x47
 800e26a:	4680      	mov	r8, r0
 800e26c:	d129      	bne.n	800e2c2 <_printf_float+0x172>
 800e26e:	1cc8      	adds	r0, r1, #3
 800e270:	db02      	blt.n	800e278 <_printf_float+0x128>
 800e272:	6863      	ldr	r3, [r4, #4]
 800e274:	4299      	cmp	r1, r3
 800e276:	dd41      	ble.n	800e2fc <_printf_float+0x1ac>
 800e278:	f1aa 0a02 	sub.w	sl, sl, #2
 800e27c:	fa5f fa8a 	uxtb.w	sl, sl
 800e280:	3901      	subs	r1, #1
 800e282:	4652      	mov	r2, sl
 800e284:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e288:	9109      	str	r1, [sp, #36]	@ 0x24
 800e28a:	f7ff ff26 	bl	800e0da <__exponent>
 800e28e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e290:	1813      	adds	r3, r2, r0
 800e292:	2a01      	cmp	r2, #1
 800e294:	4681      	mov	r9, r0
 800e296:	6123      	str	r3, [r4, #16]
 800e298:	dc02      	bgt.n	800e2a0 <_printf_float+0x150>
 800e29a:	6822      	ldr	r2, [r4, #0]
 800e29c:	07d2      	lsls	r2, r2, #31
 800e29e:	d501      	bpl.n	800e2a4 <_printf_float+0x154>
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	6123      	str	r3, [r4, #16]
 800e2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d0a2      	beq.n	800e1f2 <_printf_float+0xa2>
 800e2ac:	232d      	movs	r3, #45	@ 0x2d
 800e2ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2b2:	e79e      	b.n	800e1f2 <_printf_float+0xa2>
 800e2b4:	9a06      	ldr	r2, [sp, #24]
 800e2b6:	2a47      	cmp	r2, #71	@ 0x47
 800e2b8:	d1c2      	bne.n	800e240 <_printf_float+0xf0>
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1c0      	bne.n	800e240 <_printf_float+0xf0>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e7bd      	b.n	800e23e <_printf_float+0xee>
 800e2c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e2c6:	d9db      	bls.n	800e280 <_printf_float+0x130>
 800e2c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e2cc:	d118      	bne.n	800e300 <_printf_float+0x1b0>
 800e2ce:	2900      	cmp	r1, #0
 800e2d0:	6863      	ldr	r3, [r4, #4]
 800e2d2:	dd0b      	ble.n	800e2ec <_printf_float+0x19c>
 800e2d4:	6121      	str	r1, [r4, #16]
 800e2d6:	b913      	cbnz	r3, 800e2de <_printf_float+0x18e>
 800e2d8:	6822      	ldr	r2, [r4, #0]
 800e2da:	07d0      	lsls	r0, r2, #31
 800e2dc:	d502      	bpl.n	800e2e4 <_printf_float+0x194>
 800e2de:	3301      	adds	r3, #1
 800e2e0:	440b      	add	r3, r1
 800e2e2:	6123      	str	r3, [r4, #16]
 800e2e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e2e6:	f04f 0900 	mov.w	r9, #0
 800e2ea:	e7db      	b.n	800e2a4 <_printf_float+0x154>
 800e2ec:	b913      	cbnz	r3, 800e2f4 <_printf_float+0x1a4>
 800e2ee:	6822      	ldr	r2, [r4, #0]
 800e2f0:	07d2      	lsls	r2, r2, #31
 800e2f2:	d501      	bpl.n	800e2f8 <_printf_float+0x1a8>
 800e2f4:	3302      	adds	r3, #2
 800e2f6:	e7f4      	b.n	800e2e2 <_printf_float+0x192>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e7f2      	b.n	800e2e2 <_printf_float+0x192>
 800e2fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e302:	4299      	cmp	r1, r3
 800e304:	db05      	blt.n	800e312 <_printf_float+0x1c2>
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	6121      	str	r1, [r4, #16]
 800e30a:	07d8      	lsls	r0, r3, #31
 800e30c:	d5ea      	bpl.n	800e2e4 <_printf_float+0x194>
 800e30e:	1c4b      	adds	r3, r1, #1
 800e310:	e7e7      	b.n	800e2e2 <_printf_float+0x192>
 800e312:	2900      	cmp	r1, #0
 800e314:	bfd4      	ite	le
 800e316:	f1c1 0202 	rsble	r2, r1, #2
 800e31a:	2201      	movgt	r2, #1
 800e31c:	4413      	add	r3, r2
 800e31e:	e7e0      	b.n	800e2e2 <_printf_float+0x192>
 800e320:	6823      	ldr	r3, [r4, #0]
 800e322:	055a      	lsls	r2, r3, #21
 800e324:	d407      	bmi.n	800e336 <_printf_float+0x1e6>
 800e326:	6923      	ldr	r3, [r4, #16]
 800e328:	4642      	mov	r2, r8
 800e32a:	4631      	mov	r1, r6
 800e32c:	4628      	mov	r0, r5
 800e32e:	47b8      	blx	r7
 800e330:	3001      	adds	r0, #1
 800e332:	d12b      	bne.n	800e38c <_printf_float+0x23c>
 800e334:	e767      	b.n	800e206 <_printf_float+0xb6>
 800e336:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e33a:	f240 80dd 	bls.w	800e4f8 <_printf_float+0x3a8>
 800e33e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e342:	2200      	movs	r2, #0
 800e344:	2300      	movs	r3, #0
 800e346:	f7f2 fbbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d033      	beq.n	800e3b6 <_printf_float+0x266>
 800e34e:	4a37      	ldr	r2, [pc, #220]	@ (800e42c <_printf_float+0x2dc>)
 800e350:	2301      	movs	r3, #1
 800e352:	4631      	mov	r1, r6
 800e354:	4628      	mov	r0, r5
 800e356:	47b8      	blx	r7
 800e358:	3001      	adds	r0, #1
 800e35a:	f43f af54 	beq.w	800e206 <_printf_float+0xb6>
 800e35e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e362:	4543      	cmp	r3, r8
 800e364:	db02      	blt.n	800e36c <_printf_float+0x21c>
 800e366:	6823      	ldr	r3, [r4, #0]
 800e368:	07d8      	lsls	r0, r3, #31
 800e36a:	d50f      	bpl.n	800e38c <_printf_float+0x23c>
 800e36c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e370:	4631      	mov	r1, r6
 800e372:	4628      	mov	r0, r5
 800e374:	47b8      	blx	r7
 800e376:	3001      	adds	r0, #1
 800e378:	f43f af45 	beq.w	800e206 <_printf_float+0xb6>
 800e37c:	f04f 0900 	mov.w	r9, #0
 800e380:	f108 38ff 	add.w	r8, r8, #4294967295
 800e384:	f104 0a1a 	add.w	sl, r4, #26
 800e388:	45c8      	cmp	r8, r9
 800e38a:	dc09      	bgt.n	800e3a0 <_printf_float+0x250>
 800e38c:	6823      	ldr	r3, [r4, #0]
 800e38e:	079b      	lsls	r3, r3, #30
 800e390:	f100 8103 	bmi.w	800e59a <_printf_float+0x44a>
 800e394:	68e0      	ldr	r0, [r4, #12]
 800e396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e398:	4298      	cmp	r0, r3
 800e39a:	bfb8      	it	lt
 800e39c:	4618      	movlt	r0, r3
 800e39e:	e734      	b.n	800e20a <_printf_float+0xba>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	4652      	mov	r2, sl
 800e3a4:	4631      	mov	r1, r6
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	47b8      	blx	r7
 800e3aa:	3001      	adds	r0, #1
 800e3ac:	f43f af2b 	beq.w	800e206 <_printf_float+0xb6>
 800e3b0:	f109 0901 	add.w	r9, r9, #1
 800e3b4:	e7e8      	b.n	800e388 <_printf_float+0x238>
 800e3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	dc39      	bgt.n	800e430 <_printf_float+0x2e0>
 800e3bc:	4a1b      	ldr	r2, [pc, #108]	@ (800e42c <_printf_float+0x2dc>)
 800e3be:	2301      	movs	r3, #1
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	47b8      	blx	r7
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	f43f af1d 	beq.w	800e206 <_printf_float+0xb6>
 800e3cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e3d0:	ea59 0303 	orrs.w	r3, r9, r3
 800e3d4:	d102      	bne.n	800e3dc <_printf_float+0x28c>
 800e3d6:	6823      	ldr	r3, [r4, #0]
 800e3d8:	07d9      	lsls	r1, r3, #31
 800e3da:	d5d7      	bpl.n	800e38c <_printf_float+0x23c>
 800e3dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3e0:	4631      	mov	r1, r6
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	47b8      	blx	r7
 800e3e6:	3001      	adds	r0, #1
 800e3e8:	f43f af0d 	beq.w	800e206 <_printf_float+0xb6>
 800e3ec:	f04f 0a00 	mov.w	sl, #0
 800e3f0:	f104 0b1a 	add.w	fp, r4, #26
 800e3f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3f6:	425b      	negs	r3, r3
 800e3f8:	4553      	cmp	r3, sl
 800e3fa:	dc01      	bgt.n	800e400 <_printf_float+0x2b0>
 800e3fc:	464b      	mov	r3, r9
 800e3fe:	e793      	b.n	800e328 <_printf_float+0x1d8>
 800e400:	2301      	movs	r3, #1
 800e402:	465a      	mov	r2, fp
 800e404:	4631      	mov	r1, r6
 800e406:	4628      	mov	r0, r5
 800e408:	47b8      	blx	r7
 800e40a:	3001      	adds	r0, #1
 800e40c:	f43f aefb 	beq.w	800e206 <_printf_float+0xb6>
 800e410:	f10a 0a01 	add.w	sl, sl, #1
 800e414:	e7ee      	b.n	800e3f4 <_printf_float+0x2a4>
 800e416:	bf00      	nop
 800e418:	7fefffff 	.word	0x7fefffff
 800e41c:	08012755 	.word	0x08012755
 800e420:	08012759 	.word	0x08012759
 800e424:	0801275d 	.word	0x0801275d
 800e428:	08012761 	.word	0x08012761
 800e42c:	08012765 	.word	0x08012765
 800e430:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e432:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e436:	4553      	cmp	r3, sl
 800e438:	bfa8      	it	ge
 800e43a:	4653      	movge	r3, sl
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	4699      	mov	r9, r3
 800e440:	dc36      	bgt.n	800e4b0 <_printf_float+0x360>
 800e442:	f04f 0b00 	mov.w	fp, #0
 800e446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e44a:	f104 021a 	add.w	r2, r4, #26
 800e44e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e450:	9306      	str	r3, [sp, #24]
 800e452:	eba3 0309 	sub.w	r3, r3, r9
 800e456:	455b      	cmp	r3, fp
 800e458:	dc31      	bgt.n	800e4be <_printf_float+0x36e>
 800e45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e45c:	459a      	cmp	sl, r3
 800e45e:	dc3a      	bgt.n	800e4d6 <_printf_float+0x386>
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	07da      	lsls	r2, r3, #31
 800e464:	d437      	bmi.n	800e4d6 <_printf_float+0x386>
 800e466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e468:	ebaa 0903 	sub.w	r9, sl, r3
 800e46c:	9b06      	ldr	r3, [sp, #24]
 800e46e:	ebaa 0303 	sub.w	r3, sl, r3
 800e472:	4599      	cmp	r9, r3
 800e474:	bfa8      	it	ge
 800e476:	4699      	movge	r9, r3
 800e478:	f1b9 0f00 	cmp.w	r9, #0
 800e47c:	dc33      	bgt.n	800e4e6 <_printf_float+0x396>
 800e47e:	f04f 0800 	mov.w	r8, #0
 800e482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e486:	f104 0b1a 	add.w	fp, r4, #26
 800e48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e48c:	ebaa 0303 	sub.w	r3, sl, r3
 800e490:	eba3 0309 	sub.w	r3, r3, r9
 800e494:	4543      	cmp	r3, r8
 800e496:	f77f af79 	ble.w	800e38c <_printf_float+0x23c>
 800e49a:	2301      	movs	r3, #1
 800e49c:	465a      	mov	r2, fp
 800e49e:	4631      	mov	r1, r6
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	47b8      	blx	r7
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	f43f aeae 	beq.w	800e206 <_printf_float+0xb6>
 800e4aa:	f108 0801 	add.w	r8, r8, #1
 800e4ae:	e7ec      	b.n	800e48a <_printf_float+0x33a>
 800e4b0:	4642      	mov	r2, r8
 800e4b2:	4631      	mov	r1, r6
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	47b8      	blx	r7
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	d1c2      	bne.n	800e442 <_printf_float+0x2f2>
 800e4bc:	e6a3      	b.n	800e206 <_printf_float+0xb6>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	4631      	mov	r1, r6
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	9206      	str	r2, [sp, #24]
 800e4c6:	47b8      	blx	r7
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	f43f ae9c 	beq.w	800e206 <_printf_float+0xb6>
 800e4ce:	9a06      	ldr	r2, [sp, #24]
 800e4d0:	f10b 0b01 	add.w	fp, fp, #1
 800e4d4:	e7bb      	b.n	800e44e <_printf_float+0x2fe>
 800e4d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4da:	4631      	mov	r1, r6
 800e4dc:	4628      	mov	r0, r5
 800e4de:	47b8      	blx	r7
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	d1c0      	bne.n	800e466 <_printf_float+0x316>
 800e4e4:	e68f      	b.n	800e206 <_printf_float+0xb6>
 800e4e6:	9a06      	ldr	r2, [sp, #24]
 800e4e8:	464b      	mov	r3, r9
 800e4ea:	4442      	add	r2, r8
 800e4ec:	4631      	mov	r1, r6
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	47b8      	blx	r7
 800e4f2:	3001      	adds	r0, #1
 800e4f4:	d1c3      	bne.n	800e47e <_printf_float+0x32e>
 800e4f6:	e686      	b.n	800e206 <_printf_float+0xb6>
 800e4f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4fc:	f1ba 0f01 	cmp.w	sl, #1
 800e500:	dc01      	bgt.n	800e506 <_printf_float+0x3b6>
 800e502:	07db      	lsls	r3, r3, #31
 800e504:	d536      	bpl.n	800e574 <_printf_float+0x424>
 800e506:	2301      	movs	r3, #1
 800e508:	4642      	mov	r2, r8
 800e50a:	4631      	mov	r1, r6
 800e50c:	4628      	mov	r0, r5
 800e50e:	47b8      	blx	r7
 800e510:	3001      	adds	r0, #1
 800e512:	f43f ae78 	beq.w	800e206 <_printf_float+0xb6>
 800e516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e51a:	4631      	mov	r1, r6
 800e51c:	4628      	mov	r0, r5
 800e51e:	47b8      	blx	r7
 800e520:	3001      	adds	r0, #1
 800e522:	f43f ae70 	beq.w	800e206 <_printf_float+0xb6>
 800e526:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e52a:	2200      	movs	r2, #0
 800e52c:	2300      	movs	r3, #0
 800e52e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e532:	f7f2 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e536:	b9c0      	cbnz	r0, 800e56a <_printf_float+0x41a>
 800e538:	4653      	mov	r3, sl
 800e53a:	f108 0201 	add.w	r2, r8, #1
 800e53e:	4631      	mov	r1, r6
 800e540:	4628      	mov	r0, r5
 800e542:	47b8      	blx	r7
 800e544:	3001      	adds	r0, #1
 800e546:	d10c      	bne.n	800e562 <_printf_float+0x412>
 800e548:	e65d      	b.n	800e206 <_printf_float+0xb6>
 800e54a:	2301      	movs	r3, #1
 800e54c:	465a      	mov	r2, fp
 800e54e:	4631      	mov	r1, r6
 800e550:	4628      	mov	r0, r5
 800e552:	47b8      	blx	r7
 800e554:	3001      	adds	r0, #1
 800e556:	f43f ae56 	beq.w	800e206 <_printf_float+0xb6>
 800e55a:	f108 0801 	add.w	r8, r8, #1
 800e55e:	45d0      	cmp	r8, sl
 800e560:	dbf3      	blt.n	800e54a <_printf_float+0x3fa>
 800e562:	464b      	mov	r3, r9
 800e564:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e568:	e6df      	b.n	800e32a <_printf_float+0x1da>
 800e56a:	f04f 0800 	mov.w	r8, #0
 800e56e:	f104 0b1a 	add.w	fp, r4, #26
 800e572:	e7f4      	b.n	800e55e <_printf_float+0x40e>
 800e574:	2301      	movs	r3, #1
 800e576:	4642      	mov	r2, r8
 800e578:	e7e1      	b.n	800e53e <_printf_float+0x3ee>
 800e57a:	2301      	movs	r3, #1
 800e57c:	464a      	mov	r2, r9
 800e57e:	4631      	mov	r1, r6
 800e580:	4628      	mov	r0, r5
 800e582:	47b8      	blx	r7
 800e584:	3001      	adds	r0, #1
 800e586:	f43f ae3e 	beq.w	800e206 <_printf_float+0xb6>
 800e58a:	f108 0801 	add.w	r8, r8, #1
 800e58e:	68e3      	ldr	r3, [r4, #12]
 800e590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e592:	1a5b      	subs	r3, r3, r1
 800e594:	4543      	cmp	r3, r8
 800e596:	dcf0      	bgt.n	800e57a <_printf_float+0x42a>
 800e598:	e6fc      	b.n	800e394 <_printf_float+0x244>
 800e59a:	f04f 0800 	mov.w	r8, #0
 800e59e:	f104 0919 	add.w	r9, r4, #25
 800e5a2:	e7f4      	b.n	800e58e <_printf_float+0x43e>

0800e5a4 <_printf_common>:
 800e5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a8:	4616      	mov	r6, r2
 800e5aa:	4698      	mov	r8, r3
 800e5ac:	688a      	ldr	r2, [r1, #8]
 800e5ae:	690b      	ldr	r3, [r1, #16]
 800e5b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	bfb8      	it	lt
 800e5b8:	4613      	movlt	r3, r2
 800e5ba:	6033      	str	r3, [r6, #0]
 800e5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5c0:	4607      	mov	r7, r0
 800e5c2:	460c      	mov	r4, r1
 800e5c4:	b10a      	cbz	r2, 800e5ca <_printf_common+0x26>
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	6033      	str	r3, [r6, #0]
 800e5ca:	6823      	ldr	r3, [r4, #0]
 800e5cc:	0699      	lsls	r1, r3, #26
 800e5ce:	bf42      	ittt	mi
 800e5d0:	6833      	ldrmi	r3, [r6, #0]
 800e5d2:	3302      	addmi	r3, #2
 800e5d4:	6033      	strmi	r3, [r6, #0]
 800e5d6:	6825      	ldr	r5, [r4, #0]
 800e5d8:	f015 0506 	ands.w	r5, r5, #6
 800e5dc:	d106      	bne.n	800e5ec <_printf_common+0x48>
 800e5de:	f104 0a19 	add.w	sl, r4, #25
 800e5e2:	68e3      	ldr	r3, [r4, #12]
 800e5e4:	6832      	ldr	r2, [r6, #0]
 800e5e6:	1a9b      	subs	r3, r3, r2
 800e5e8:	42ab      	cmp	r3, r5
 800e5ea:	dc26      	bgt.n	800e63a <_printf_common+0x96>
 800e5ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5f0:	6822      	ldr	r2, [r4, #0]
 800e5f2:	3b00      	subs	r3, #0
 800e5f4:	bf18      	it	ne
 800e5f6:	2301      	movne	r3, #1
 800e5f8:	0692      	lsls	r2, r2, #26
 800e5fa:	d42b      	bmi.n	800e654 <_printf_common+0xb0>
 800e5fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e600:	4641      	mov	r1, r8
 800e602:	4638      	mov	r0, r7
 800e604:	47c8      	blx	r9
 800e606:	3001      	adds	r0, #1
 800e608:	d01e      	beq.n	800e648 <_printf_common+0xa4>
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	6922      	ldr	r2, [r4, #16]
 800e60e:	f003 0306 	and.w	r3, r3, #6
 800e612:	2b04      	cmp	r3, #4
 800e614:	bf02      	ittt	eq
 800e616:	68e5      	ldreq	r5, [r4, #12]
 800e618:	6833      	ldreq	r3, [r6, #0]
 800e61a:	1aed      	subeq	r5, r5, r3
 800e61c:	68a3      	ldr	r3, [r4, #8]
 800e61e:	bf0c      	ite	eq
 800e620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e624:	2500      	movne	r5, #0
 800e626:	4293      	cmp	r3, r2
 800e628:	bfc4      	itt	gt
 800e62a:	1a9b      	subgt	r3, r3, r2
 800e62c:	18ed      	addgt	r5, r5, r3
 800e62e:	2600      	movs	r6, #0
 800e630:	341a      	adds	r4, #26
 800e632:	42b5      	cmp	r5, r6
 800e634:	d11a      	bne.n	800e66c <_printf_common+0xc8>
 800e636:	2000      	movs	r0, #0
 800e638:	e008      	b.n	800e64c <_printf_common+0xa8>
 800e63a:	2301      	movs	r3, #1
 800e63c:	4652      	mov	r2, sl
 800e63e:	4641      	mov	r1, r8
 800e640:	4638      	mov	r0, r7
 800e642:	47c8      	blx	r9
 800e644:	3001      	adds	r0, #1
 800e646:	d103      	bne.n	800e650 <_printf_common+0xac>
 800e648:	f04f 30ff 	mov.w	r0, #4294967295
 800e64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e650:	3501      	adds	r5, #1
 800e652:	e7c6      	b.n	800e5e2 <_printf_common+0x3e>
 800e654:	18e1      	adds	r1, r4, r3
 800e656:	1c5a      	adds	r2, r3, #1
 800e658:	2030      	movs	r0, #48	@ 0x30
 800e65a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e65e:	4422      	add	r2, r4
 800e660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e668:	3302      	adds	r3, #2
 800e66a:	e7c7      	b.n	800e5fc <_printf_common+0x58>
 800e66c:	2301      	movs	r3, #1
 800e66e:	4622      	mov	r2, r4
 800e670:	4641      	mov	r1, r8
 800e672:	4638      	mov	r0, r7
 800e674:	47c8      	blx	r9
 800e676:	3001      	adds	r0, #1
 800e678:	d0e6      	beq.n	800e648 <_printf_common+0xa4>
 800e67a:	3601      	adds	r6, #1
 800e67c:	e7d9      	b.n	800e632 <_printf_common+0x8e>
	...

0800e680 <_printf_i>:
 800e680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e684:	7e0f      	ldrb	r7, [r1, #24]
 800e686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e688:	2f78      	cmp	r7, #120	@ 0x78
 800e68a:	4691      	mov	r9, r2
 800e68c:	4680      	mov	r8, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	469a      	mov	sl, r3
 800e692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e696:	d807      	bhi.n	800e6a8 <_printf_i+0x28>
 800e698:	2f62      	cmp	r7, #98	@ 0x62
 800e69a:	d80a      	bhi.n	800e6b2 <_printf_i+0x32>
 800e69c:	2f00      	cmp	r7, #0
 800e69e:	f000 80d2 	beq.w	800e846 <_printf_i+0x1c6>
 800e6a2:	2f58      	cmp	r7, #88	@ 0x58
 800e6a4:	f000 80b9 	beq.w	800e81a <_printf_i+0x19a>
 800e6a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6b0:	e03a      	b.n	800e728 <_printf_i+0xa8>
 800e6b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6b6:	2b15      	cmp	r3, #21
 800e6b8:	d8f6      	bhi.n	800e6a8 <_printf_i+0x28>
 800e6ba:	a101      	add	r1, pc, #4	@ (adr r1, 800e6c0 <_printf_i+0x40>)
 800e6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6c0:	0800e719 	.word	0x0800e719
 800e6c4:	0800e72d 	.word	0x0800e72d
 800e6c8:	0800e6a9 	.word	0x0800e6a9
 800e6cc:	0800e6a9 	.word	0x0800e6a9
 800e6d0:	0800e6a9 	.word	0x0800e6a9
 800e6d4:	0800e6a9 	.word	0x0800e6a9
 800e6d8:	0800e72d 	.word	0x0800e72d
 800e6dc:	0800e6a9 	.word	0x0800e6a9
 800e6e0:	0800e6a9 	.word	0x0800e6a9
 800e6e4:	0800e6a9 	.word	0x0800e6a9
 800e6e8:	0800e6a9 	.word	0x0800e6a9
 800e6ec:	0800e82d 	.word	0x0800e82d
 800e6f0:	0800e757 	.word	0x0800e757
 800e6f4:	0800e7e7 	.word	0x0800e7e7
 800e6f8:	0800e6a9 	.word	0x0800e6a9
 800e6fc:	0800e6a9 	.word	0x0800e6a9
 800e700:	0800e84f 	.word	0x0800e84f
 800e704:	0800e6a9 	.word	0x0800e6a9
 800e708:	0800e757 	.word	0x0800e757
 800e70c:	0800e6a9 	.word	0x0800e6a9
 800e710:	0800e6a9 	.word	0x0800e6a9
 800e714:	0800e7ef 	.word	0x0800e7ef
 800e718:	6833      	ldr	r3, [r6, #0]
 800e71a:	1d1a      	adds	r2, r3, #4
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	6032      	str	r2, [r6, #0]
 800e720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e728:	2301      	movs	r3, #1
 800e72a:	e09d      	b.n	800e868 <_printf_i+0x1e8>
 800e72c:	6833      	ldr	r3, [r6, #0]
 800e72e:	6820      	ldr	r0, [r4, #0]
 800e730:	1d19      	adds	r1, r3, #4
 800e732:	6031      	str	r1, [r6, #0]
 800e734:	0606      	lsls	r6, r0, #24
 800e736:	d501      	bpl.n	800e73c <_printf_i+0xbc>
 800e738:	681d      	ldr	r5, [r3, #0]
 800e73a:	e003      	b.n	800e744 <_printf_i+0xc4>
 800e73c:	0645      	lsls	r5, r0, #25
 800e73e:	d5fb      	bpl.n	800e738 <_printf_i+0xb8>
 800e740:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e744:	2d00      	cmp	r5, #0
 800e746:	da03      	bge.n	800e750 <_printf_i+0xd0>
 800e748:	232d      	movs	r3, #45	@ 0x2d
 800e74a:	426d      	negs	r5, r5
 800e74c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e750:	4859      	ldr	r0, [pc, #356]	@ (800e8b8 <_printf_i+0x238>)
 800e752:	230a      	movs	r3, #10
 800e754:	e011      	b.n	800e77a <_printf_i+0xfa>
 800e756:	6821      	ldr	r1, [r4, #0]
 800e758:	6833      	ldr	r3, [r6, #0]
 800e75a:	0608      	lsls	r0, r1, #24
 800e75c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e760:	d402      	bmi.n	800e768 <_printf_i+0xe8>
 800e762:	0649      	lsls	r1, r1, #25
 800e764:	bf48      	it	mi
 800e766:	b2ad      	uxthmi	r5, r5
 800e768:	2f6f      	cmp	r7, #111	@ 0x6f
 800e76a:	4853      	ldr	r0, [pc, #332]	@ (800e8b8 <_printf_i+0x238>)
 800e76c:	6033      	str	r3, [r6, #0]
 800e76e:	bf14      	ite	ne
 800e770:	230a      	movne	r3, #10
 800e772:	2308      	moveq	r3, #8
 800e774:	2100      	movs	r1, #0
 800e776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e77a:	6866      	ldr	r6, [r4, #4]
 800e77c:	60a6      	str	r6, [r4, #8]
 800e77e:	2e00      	cmp	r6, #0
 800e780:	bfa2      	ittt	ge
 800e782:	6821      	ldrge	r1, [r4, #0]
 800e784:	f021 0104 	bicge.w	r1, r1, #4
 800e788:	6021      	strge	r1, [r4, #0]
 800e78a:	b90d      	cbnz	r5, 800e790 <_printf_i+0x110>
 800e78c:	2e00      	cmp	r6, #0
 800e78e:	d04b      	beq.n	800e828 <_printf_i+0x1a8>
 800e790:	4616      	mov	r6, r2
 800e792:	fbb5 f1f3 	udiv	r1, r5, r3
 800e796:	fb03 5711 	mls	r7, r3, r1, r5
 800e79a:	5dc7      	ldrb	r7, [r0, r7]
 800e79c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7a0:	462f      	mov	r7, r5
 800e7a2:	42bb      	cmp	r3, r7
 800e7a4:	460d      	mov	r5, r1
 800e7a6:	d9f4      	bls.n	800e792 <_printf_i+0x112>
 800e7a8:	2b08      	cmp	r3, #8
 800e7aa:	d10b      	bne.n	800e7c4 <_printf_i+0x144>
 800e7ac:	6823      	ldr	r3, [r4, #0]
 800e7ae:	07df      	lsls	r7, r3, #31
 800e7b0:	d508      	bpl.n	800e7c4 <_printf_i+0x144>
 800e7b2:	6923      	ldr	r3, [r4, #16]
 800e7b4:	6861      	ldr	r1, [r4, #4]
 800e7b6:	4299      	cmp	r1, r3
 800e7b8:	bfde      	ittt	le
 800e7ba:	2330      	movle	r3, #48	@ 0x30
 800e7bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7c4:	1b92      	subs	r2, r2, r6
 800e7c6:	6122      	str	r2, [r4, #16]
 800e7c8:	f8cd a000 	str.w	sl, [sp]
 800e7cc:	464b      	mov	r3, r9
 800e7ce:	aa03      	add	r2, sp, #12
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	f7ff fee6 	bl	800e5a4 <_printf_common>
 800e7d8:	3001      	adds	r0, #1
 800e7da:	d14a      	bne.n	800e872 <_printf_i+0x1f2>
 800e7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e0:	b004      	add	sp, #16
 800e7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	f043 0320 	orr.w	r3, r3, #32
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	4833      	ldr	r0, [pc, #204]	@ (800e8bc <_printf_i+0x23c>)
 800e7f0:	2778      	movs	r7, #120	@ 0x78
 800e7f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7f6:	6823      	ldr	r3, [r4, #0]
 800e7f8:	6831      	ldr	r1, [r6, #0]
 800e7fa:	061f      	lsls	r7, r3, #24
 800e7fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800e800:	d402      	bmi.n	800e808 <_printf_i+0x188>
 800e802:	065f      	lsls	r7, r3, #25
 800e804:	bf48      	it	mi
 800e806:	b2ad      	uxthmi	r5, r5
 800e808:	6031      	str	r1, [r6, #0]
 800e80a:	07d9      	lsls	r1, r3, #31
 800e80c:	bf44      	itt	mi
 800e80e:	f043 0320 	orrmi.w	r3, r3, #32
 800e812:	6023      	strmi	r3, [r4, #0]
 800e814:	b11d      	cbz	r5, 800e81e <_printf_i+0x19e>
 800e816:	2310      	movs	r3, #16
 800e818:	e7ac      	b.n	800e774 <_printf_i+0xf4>
 800e81a:	4827      	ldr	r0, [pc, #156]	@ (800e8b8 <_printf_i+0x238>)
 800e81c:	e7e9      	b.n	800e7f2 <_printf_i+0x172>
 800e81e:	6823      	ldr	r3, [r4, #0]
 800e820:	f023 0320 	bic.w	r3, r3, #32
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	e7f6      	b.n	800e816 <_printf_i+0x196>
 800e828:	4616      	mov	r6, r2
 800e82a:	e7bd      	b.n	800e7a8 <_printf_i+0x128>
 800e82c:	6833      	ldr	r3, [r6, #0]
 800e82e:	6825      	ldr	r5, [r4, #0]
 800e830:	6961      	ldr	r1, [r4, #20]
 800e832:	1d18      	adds	r0, r3, #4
 800e834:	6030      	str	r0, [r6, #0]
 800e836:	062e      	lsls	r6, r5, #24
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	d501      	bpl.n	800e840 <_printf_i+0x1c0>
 800e83c:	6019      	str	r1, [r3, #0]
 800e83e:	e002      	b.n	800e846 <_printf_i+0x1c6>
 800e840:	0668      	lsls	r0, r5, #25
 800e842:	d5fb      	bpl.n	800e83c <_printf_i+0x1bc>
 800e844:	8019      	strh	r1, [r3, #0]
 800e846:	2300      	movs	r3, #0
 800e848:	6123      	str	r3, [r4, #16]
 800e84a:	4616      	mov	r6, r2
 800e84c:	e7bc      	b.n	800e7c8 <_printf_i+0x148>
 800e84e:	6833      	ldr	r3, [r6, #0]
 800e850:	1d1a      	adds	r2, r3, #4
 800e852:	6032      	str	r2, [r6, #0]
 800e854:	681e      	ldr	r6, [r3, #0]
 800e856:	6862      	ldr	r2, [r4, #4]
 800e858:	2100      	movs	r1, #0
 800e85a:	4630      	mov	r0, r6
 800e85c:	f7f1 fcb8 	bl	80001d0 <memchr>
 800e860:	b108      	cbz	r0, 800e866 <_printf_i+0x1e6>
 800e862:	1b80      	subs	r0, r0, r6
 800e864:	6060      	str	r0, [r4, #4]
 800e866:	6863      	ldr	r3, [r4, #4]
 800e868:	6123      	str	r3, [r4, #16]
 800e86a:	2300      	movs	r3, #0
 800e86c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e870:	e7aa      	b.n	800e7c8 <_printf_i+0x148>
 800e872:	6923      	ldr	r3, [r4, #16]
 800e874:	4632      	mov	r2, r6
 800e876:	4649      	mov	r1, r9
 800e878:	4640      	mov	r0, r8
 800e87a:	47d0      	blx	sl
 800e87c:	3001      	adds	r0, #1
 800e87e:	d0ad      	beq.n	800e7dc <_printf_i+0x15c>
 800e880:	6823      	ldr	r3, [r4, #0]
 800e882:	079b      	lsls	r3, r3, #30
 800e884:	d413      	bmi.n	800e8ae <_printf_i+0x22e>
 800e886:	68e0      	ldr	r0, [r4, #12]
 800e888:	9b03      	ldr	r3, [sp, #12]
 800e88a:	4298      	cmp	r0, r3
 800e88c:	bfb8      	it	lt
 800e88e:	4618      	movlt	r0, r3
 800e890:	e7a6      	b.n	800e7e0 <_printf_i+0x160>
 800e892:	2301      	movs	r3, #1
 800e894:	4632      	mov	r2, r6
 800e896:	4649      	mov	r1, r9
 800e898:	4640      	mov	r0, r8
 800e89a:	47d0      	blx	sl
 800e89c:	3001      	adds	r0, #1
 800e89e:	d09d      	beq.n	800e7dc <_printf_i+0x15c>
 800e8a0:	3501      	adds	r5, #1
 800e8a2:	68e3      	ldr	r3, [r4, #12]
 800e8a4:	9903      	ldr	r1, [sp, #12]
 800e8a6:	1a5b      	subs	r3, r3, r1
 800e8a8:	42ab      	cmp	r3, r5
 800e8aa:	dcf2      	bgt.n	800e892 <_printf_i+0x212>
 800e8ac:	e7eb      	b.n	800e886 <_printf_i+0x206>
 800e8ae:	2500      	movs	r5, #0
 800e8b0:	f104 0619 	add.w	r6, r4, #25
 800e8b4:	e7f5      	b.n	800e8a2 <_printf_i+0x222>
 800e8b6:	bf00      	nop
 800e8b8:	08012767 	.word	0x08012767
 800e8bc:	08012778 	.word	0x08012778

0800e8c0 <std>:
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	b510      	push	{r4, lr}
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e8ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8ce:	6083      	str	r3, [r0, #8]
 800e8d0:	8181      	strh	r1, [r0, #12]
 800e8d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e8d4:	81c2      	strh	r2, [r0, #14]
 800e8d6:	6183      	str	r3, [r0, #24]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	2208      	movs	r2, #8
 800e8dc:	305c      	adds	r0, #92	@ 0x5c
 800e8de:	f000 f926 	bl	800eb2e <memset>
 800e8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e918 <std+0x58>)
 800e8e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e91c <std+0x5c>)
 800e8e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e920 <std+0x60>)
 800e8ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e924 <std+0x64>)
 800e8f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e928 <std+0x68>)
 800e8f4:	6224      	str	r4, [r4, #32]
 800e8f6:	429c      	cmp	r4, r3
 800e8f8:	d006      	beq.n	800e908 <std+0x48>
 800e8fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e8fe:	4294      	cmp	r4, r2
 800e900:	d002      	beq.n	800e908 <std+0x48>
 800e902:	33d0      	adds	r3, #208	@ 0xd0
 800e904:	429c      	cmp	r4, r3
 800e906:	d105      	bne.n	800e914 <std+0x54>
 800e908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e910:	f000 b98a 	b.w	800ec28 <__retarget_lock_init_recursive>
 800e914:	bd10      	pop	{r4, pc}
 800e916:	bf00      	nop
 800e918:	0800eaa9 	.word	0x0800eaa9
 800e91c:	0800eacb 	.word	0x0800eacb
 800e920:	0800eb03 	.word	0x0800eb03
 800e924:	0800eb27 	.word	0x0800eb27
 800e928:	200026b8 	.word	0x200026b8

0800e92c <stdio_exit_handler>:
 800e92c:	4a02      	ldr	r2, [pc, #8]	@ (800e938 <stdio_exit_handler+0xc>)
 800e92e:	4903      	ldr	r1, [pc, #12]	@ (800e93c <stdio_exit_handler+0x10>)
 800e930:	4803      	ldr	r0, [pc, #12]	@ (800e940 <stdio_exit_handler+0x14>)
 800e932:	f000 b869 	b.w	800ea08 <_fwalk_sglue>
 800e936:	bf00      	nop
 800e938:	2000012c 	.word	0x2000012c
 800e93c:	08010849 	.word	0x08010849
 800e940:	2000013c 	.word	0x2000013c

0800e944 <cleanup_stdio>:
 800e944:	6841      	ldr	r1, [r0, #4]
 800e946:	4b0c      	ldr	r3, [pc, #48]	@ (800e978 <cleanup_stdio+0x34>)
 800e948:	4299      	cmp	r1, r3
 800e94a:	b510      	push	{r4, lr}
 800e94c:	4604      	mov	r4, r0
 800e94e:	d001      	beq.n	800e954 <cleanup_stdio+0x10>
 800e950:	f001 ff7a 	bl	8010848 <_fflush_r>
 800e954:	68a1      	ldr	r1, [r4, #8]
 800e956:	4b09      	ldr	r3, [pc, #36]	@ (800e97c <cleanup_stdio+0x38>)
 800e958:	4299      	cmp	r1, r3
 800e95a:	d002      	beq.n	800e962 <cleanup_stdio+0x1e>
 800e95c:	4620      	mov	r0, r4
 800e95e:	f001 ff73 	bl	8010848 <_fflush_r>
 800e962:	68e1      	ldr	r1, [r4, #12]
 800e964:	4b06      	ldr	r3, [pc, #24]	@ (800e980 <cleanup_stdio+0x3c>)
 800e966:	4299      	cmp	r1, r3
 800e968:	d004      	beq.n	800e974 <cleanup_stdio+0x30>
 800e96a:	4620      	mov	r0, r4
 800e96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e970:	f001 bf6a 	b.w	8010848 <_fflush_r>
 800e974:	bd10      	pop	{r4, pc}
 800e976:	bf00      	nop
 800e978:	200026b8 	.word	0x200026b8
 800e97c:	20002720 	.word	0x20002720
 800e980:	20002788 	.word	0x20002788

0800e984 <global_stdio_init.part.0>:
 800e984:	b510      	push	{r4, lr}
 800e986:	4b0b      	ldr	r3, [pc, #44]	@ (800e9b4 <global_stdio_init.part.0+0x30>)
 800e988:	4c0b      	ldr	r4, [pc, #44]	@ (800e9b8 <global_stdio_init.part.0+0x34>)
 800e98a:	4a0c      	ldr	r2, [pc, #48]	@ (800e9bc <global_stdio_init.part.0+0x38>)
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	4620      	mov	r0, r4
 800e990:	2200      	movs	r2, #0
 800e992:	2104      	movs	r1, #4
 800e994:	f7ff ff94 	bl	800e8c0 <std>
 800e998:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e99c:	2201      	movs	r2, #1
 800e99e:	2109      	movs	r1, #9
 800e9a0:	f7ff ff8e 	bl	800e8c0 <std>
 800e9a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e9a8:	2202      	movs	r2, #2
 800e9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9ae:	2112      	movs	r1, #18
 800e9b0:	f7ff bf86 	b.w	800e8c0 <std>
 800e9b4:	200027f0 	.word	0x200027f0
 800e9b8:	200026b8 	.word	0x200026b8
 800e9bc:	0800e92d 	.word	0x0800e92d

0800e9c0 <__sfp_lock_acquire>:
 800e9c0:	4801      	ldr	r0, [pc, #4]	@ (800e9c8 <__sfp_lock_acquire+0x8>)
 800e9c2:	f000 b932 	b.w	800ec2a <__retarget_lock_acquire_recursive>
 800e9c6:	bf00      	nop
 800e9c8:	200027f9 	.word	0x200027f9

0800e9cc <__sfp_lock_release>:
 800e9cc:	4801      	ldr	r0, [pc, #4]	@ (800e9d4 <__sfp_lock_release+0x8>)
 800e9ce:	f000 b92d 	b.w	800ec2c <__retarget_lock_release_recursive>
 800e9d2:	bf00      	nop
 800e9d4:	200027f9 	.word	0x200027f9

0800e9d8 <__sinit>:
 800e9d8:	b510      	push	{r4, lr}
 800e9da:	4604      	mov	r4, r0
 800e9dc:	f7ff fff0 	bl	800e9c0 <__sfp_lock_acquire>
 800e9e0:	6a23      	ldr	r3, [r4, #32]
 800e9e2:	b11b      	cbz	r3, 800e9ec <__sinit+0x14>
 800e9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9e8:	f7ff bff0 	b.w	800e9cc <__sfp_lock_release>
 800e9ec:	4b04      	ldr	r3, [pc, #16]	@ (800ea00 <__sinit+0x28>)
 800e9ee:	6223      	str	r3, [r4, #32]
 800e9f0:	4b04      	ldr	r3, [pc, #16]	@ (800ea04 <__sinit+0x2c>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1f5      	bne.n	800e9e4 <__sinit+0xc>
 800e9f8:	f7ff ffc4 	bl	800e984 <global_stdio_init.part.0>
 800e9fc:	e7f2      	b.n	800e9e4 <__sinit+0xc>
 800e9fe:	bf00      	nop
 800ea00:	0800e945 	.word	0x0800e945
 800ea04:	200027f0 	.word	0x200027f0

0800ea08 <_fwalk_sglue>:
 800ea08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea0c:	4607      	mov	r7, r0
 800ea0e:	4688      	mov	r8, r1
 800ea10:	4614      	mov	r4, r2
 800ea12:	2600      	movs	r6, #0
 800ea14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea18:	f1b9 0901 	subs.w	r9, r9, #1
 800ea1c:	d505      	bpl.n	800ea2a <_fwalk_sglue+0x22>
 800ea1e:	6824      	ldr	r4, [r4, #0]
 800ea20:	2c00      	cmp	r4, #0
 800ea22:	d1f7      	bne.n	800ea14 <_fwalk_sglue+0xc>
 800ea24:	4630      	mov	r0, r6
 800ea26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea2a:	89ab      	ldrh	r3, [r5, #12]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d907      	bls.n	800ea40 <_fwalk_sglue+0x38>
 800ea30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea34:	3301      	adds	r3, #1
 800ea36:	d003      	beq.n	800ea40 <_fwalk_sglue+0x38>
 800ea38:	4629      	mov	r1, r5
 800ea3a:	4638      	mov	r0, r7
 800ea3c:	47c0      	blx	r8
 800ea3e:	4306      	orrs	r6, r0
 800ea40:	3568      	adds	r5, #104	@ 0x68
 800ea42:	e7e9      	b.n	800ea18 <_fwalk_sglue+0x10>

0800ea44 <iprintf>:
 800ea44:	b40f      	push	{r0, r1, r2, r3}
 800ea46:	b507      	push	{r0, r1, r2, lr}
 800ea48:	4906      	ldr	r1, [pc, #24]	@ (800ea64 <iprintf+0x20>)
 800ea4a:	ab04      	add	r3, sp, #16
 800ea4c:	6808      	ldr	r0, [r1, #0]
 800ea4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea52:	6881      	ldr	r1, [r0, #8]
 800ea54:	9301      	str	r3, [sp, #4]
 800ea56:	f001 fd5b 	bl	8010510 <_vfiprintf_r>
 800ea5a:	b003      	add	sp, #12
 800ea5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea60:	b004      	add	sp, #16
 800ea62:	4770      	bx	lr
 800ea64:	20000138 	.word	0x20000138

0800ea68 <siprintf>:
 800ea68:	b40e      	push	{r1, r2, r3}
 800ea6a:	b500      	push	{lr}
 800ea6c:	b09c      	sub	sp, #112	@ 0x70
 800ea6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ea70:	9002      	str	r0, [sp, #8]
 800ea72:	9006      	str	r0, [sp, #24]
 800ea74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ea78:	4809      	ldr	r0, [pc, #36]	@ (800eaa0 <siprintf+0x38>)
 800ea7a:	9107      	str	r1, [sp, #28]
 800ea7c:	9104      	str	r1, [sp, #16]
 800ea7e:	4909      	ldr	r1, [pc, #36]	@ (800eaa4 <siprintf+0x3c>)
 800ea80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea84:	9105      	str	r1, [sp, #20]
 800ea86:	6800      	ldr	r0, [r0, #0]
 800ea88:	9301      	str	r3, [sp, #4]
 800ea8a:	a902      	add	r1, sp, #8
 800ea8c:	f001 fc1a 	bl	80102c4 <_svfiprintf_r>
 800ea90:	9b02      	ldr	r3, [sp, #8]
 800ea92:	2200      	movs	r2, #0
 800ea94:	701a      	strb	r2, [r3, #0]
 800ea96:	b01c      	add	sp, #112	@ 0x70
 800ea98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea9c:	b003      	add	sp, #12
 800ea9e:	4770      	bx	lr
 800eaa0:	20000138 	.word	0x20000138
 800eaa4:	ffff0208 	.word	0xffff0208

0800eaa8 <__sread>:
 800eaa8:	b510      	push	{r4, lr}
 800eaaa:	460c      	mov	r4, r1
 800eaac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eab0:	f000 f86c 	bl	800eb8c <_read_r>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	bfab      	itete	ge
 800eab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eaba:	89a3      	ldrhlt	r3, [r4, #12]
 800eabc:	181b      	addge	r3, r3, r0
 800eabe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eac2:	bfac      	ite	ge
 800eac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eac6:	81a3      	strhlt	r3, [r4, #12]
 800eac8:	bd10      	pop	{r4, pc}

0800eaca <__swrite>:
 800eaca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eace:	461f      	mov	r7, r3
 800ead0:	898b      	ldrh	r3, [r1, #12]
 800ead2:	05db      	lsls	r3, r3, #23
 800ead4:	4605      	mov	r5, r0
 800ead6:	460c      	mov	r4, r1
 800ead8:	4616      	mov	r6, r2
 800eada:	d505      	bpl.n	800eae8 <__swrite+0x1e>
 800eadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eae0:	2302      	movs	r3, #2
 800eae2:	2200      	movs	r2, #0
 800eae4:	f000 f840 	bl	800eb68 <_lseek_r>
 800eae8:	89a3      	ldrh	r3, [r4, #12]
 800eaea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eaf2:	81a3      	strh	r3, [r4, #12]
 800eaf4:	4632      	mov	r2, r6
 800eaf6:	463b      	mov	r3, r7
 800eaf8:	4628      	mov	r0, r5
 800eafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eafe:	f000 b857 	b.w	800ebb0 <_write_r>

0800eb02 <__sseek>:
 800eb02:	b510      	push	{r4, lr}
 800eb04:	460c      	mov	r4, r1
 800eb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb0a:	f000 f82d 	bl	800eb68 <_lseek_r>
 800eb0e:	1c43      	adds	r3, r0, #1
 800eb10:	89a3      	ldrh	r3, [r4, #12]
 800eb12:	bf15      	itete	ne
 800eb14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb1e:	81a3      	strheq	r3, [r4, #12]
 800eb20:	bf18      	it	ne
 800eb22:	81a3      	strhne	r3, [r4, #12]
 800eb24:	bd10      	pop	{r4, pc}

0800eb26 <__sclose>:
 800eb26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb2a:	f000 b80d 	b.w	800eb48 <_close_r>

0800eb2e <memset>:
 800eb2e:	4402      	add	r2, r0
 800eb30:	4603      	mov	r3, r0
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d100      	bne.n	800eb38 <memset+0xa>
 800eb36:	4770      	bx	lr
 800eb38:	f803 1b01 	strb.w	r1, [r3], #1
 800eb3c:	e7f9      	b.n	800eb32 <memset+0x4>
	...

0800eb40 <_localeconv_r>:
 800eb40:	4800      	ldr	r0, [pc, #0]	@ (800eb44 <_localeconv_r+0x4>)
 800eb42:	4770      	bx	lr
 800eb44:	20000278 	.word	0x20000278

0800eb48 <_close_r>:
 800eb48:	b538      	push	{r3, r4, r5, lr}
 800eb4a:	4d06      	ldr	r5, [pc, #24]	@ (800eb64 <_close_r+0x1c>)
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	4604      	mov	r4, r0
 800eb50:	4608      	mov	r0, r1
 800eb52:	602b      	str	r3, [r5, #0]
 800eb54:	f7f5 fb20 	bl	8004198 <_close>
 800eb58:	1c43      	adds	r3, r0, #1
 800eb5a:	d102      	bne.n	800eb62 <_close_r+0x1a>
 800eb5c:	682b      	ldr	r3, [r5, #0]
 800eb5e:	b103      	cbz	r3, 800eb62 <_close_r+0x1a>
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	bd38      	pop	{r3, r4, r5, pc}
 800eb64:	200027f4 	.word	0x200027f4

0800eb68 <_lseek_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4d07      	ldr	r5, [pc, #28]	@ (800eb88 <_lseek_r+0x20>)
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	4608      	mov	r0, r1
 800eb70:	4611      	mov	r1, r2
 800eb72:	2200      	movs	r2, #0
 800eb74:	602a      	str	r2, [r5, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	f7f5 fb35 	bl	80041e6 <_lseek>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d102      	bne.n	800eb86 <_lseek_r+0x1e>
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	b103      	cbz	r3, 800eb86 <_lseek_r+0x1e>
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	200027f4 	.word	0x200027f4

0800eb8c <_read_r>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4d07      	ldr	r5, [pc, #28]	@ (800ebac <_read_r+0x20>)
 800eb90:	4604      	mov	r4, r0
 800eb92:	4608      	mov	r0, r1
 800eb94:	4611      	mov	r1, r2
 800eb96:	2200      	movs	r2, #0
 800eb98:	602a      	str	r2, [r5, #0]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	f7f5 fac3 	bl	8004126 <_read>
 800eba0:	1c43      	adds	r3, r0, #1
 800eba2:	d102      	bne.n	800ebaa <_read_r+0x1e>
 800eba4:	682b      	ldr	r3, [r5, #0]
 800eba6:	b103      	cbz	r3, 800ebaa <_read_r+0x1e>
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	bd38      	pop	{r3, r4, r5, pc}
 800ebac:	200027f4 	.word	0x200027f4

0800ebb0 <_write_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	4d07      	ldr	r5, [pc, #28]	@ (800ebd0 <_write_r+0x20>)
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	4608      	mov	r0, r1
 800ebb8:	4611      	mov	r1, r2
 800ebba:	2200      	movs	r2, #0
 800ebbc:	602a      	str	r2, [r5, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	f7f5 face 	bl	8004160 <_write>
 800ebc4:	1c43      	adds	r3, r0, #1
 800ebc6:	d102      	bne.n	800ebce <_write_r+0x1e>
 800ebc8:	682b      	ldr	r3, [r5, #0]
 800ebca:	b103      	cbz	r3, 800ebce <_write_r+0x1e>
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	200027f4 	.word	0x200027f4

0800ebd4 <__errno>:
 800ebd4:	4b01      	ldr	r3, [pc, #4]	@ (800ebdc <__errno+0x8>)
 800ebd6:	6818      	ldr	r0, [r3, #0]
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	20000138 	.word	0x20000138

0800ebe0 <__libc_init_array>:
 800ebe0:	b570      	push	{r4, r5, r6, lr}
 800ebe2:	4d0d      	ldr	r5, [pc, #52]	@ (800ec18 <__libc_init_array+0x38>)
 800ebe4:	4c0d      	ldr	r4, [pc, #52]	@ (800ec1c <__libc_init_array+0x3c>)
 800ebe6:	1b64      	subs	r4, r4, r5
 800ebe8:	10a4      	asrs	r4, r4, #2
 800ebea:	2600      	movs	r6, #0
 800ebec:	42a6      	cmp	r6, r4
 800ebee:	d109      	bne.n	800ec04 <__libc_init_array+0x24>
 800ebf0:	4d0b      	ldr	r5, [pc, #44]	@ (800ec20 <__libc_init_array+0x40>)
 800ebf2:	4c0c      	ldr	r4, [pc, #48]	@ (800ec24 <__libc_init_array+0x44>)
 800ebf4:	f003 fcb0 	bl	8012558 <_init>
 800ebf8:	1b64      	subs	r4, r4, r5
 800ebfa:	10a4      	asrs	r4, r4, #2
 800ebfc:	2600      	movs	r6, #0
 800ebfe:	42a6      	cmp	r6, r4
 800ec00:	d105      	bne.n	800ec0e <__libc_init_array+0x2e>
 800ec02:	bd70      	pop	{r4, r5, r6, pc}
 800ec04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec08:	4798      	blx	r3
 800ec0a:	3601      	adds	r6, #1
 800ec0c:	e7ee      	b.n	800ebec <__libc_init_array+0xc>
 800ec0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec12:	4798      	blx	r3
 800ec14:	3601      	adds	r6, #1
 800ec16:	e7f2      	b.n	800ebfe <__libc_init_array+0x1e>
 800ec18:	08012e28 	.word	0x08012e28
 800ec1c:	08012e28 	.word	0x08012e28
 800ec20:	08012e28 	.word	0x08012e28
 800ec24:	08012e2c 	.word	0x08012e2c

0800ec28 <__retarget_lock_init_recursive>:
 800ec28:	4770      	bx	lr

0800ec2a <__retarget_lock_acquire_recursive>:
 800ec2a:	4770      	bx	lr

0800ec2c <__retarget_lock_release_recursive>:
 800ec2c:	4770      	bx	lr

0800ec2e <memcpy>:
 800ec2e:	440a      	add	r2, r1
 800ec30:	4291      	cmp	r1, r2
 800ec32:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec36:	d100      	bne.n	800ec3a <memcpy+0xc>
 800ec38:	4770      	bx	lr
 800ec3a:	b510      	push	{r4, lr}
 800ec3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec44:	4291      	cmp	r1, r2
 800ec46:	d1f9      	bne.n	800ec3c <memcpy+0xe>
 800ec48:	bd10      	pop	{r4, pc}

0800ec4a <copysign>:
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	ec51 0b10 	vmov	r0, r1, d0
 800ec50:	ed8d 1b00 	vstr	d1, [sp]
 800ec54:	4602      	mov	r2, r0
 800ec56:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800ec5a:	9901      	ldr	r1, [sp, #4]
 800ec5c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800ec60:	ea40 0301 	orr.w	r3, r0, r1
 800ec64:	ec43 2b10 	vmov	d0, r2, r3
 800ec68:	b002      	add	sp, #8
 800ec6a:	4770      	bx	lr

0800ec6c <quorem>:
 800ec6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec70:	6903      	ldr	r3, [r0, #16]
 800ec72:	690c      	ldr	r4, [r1, #16]
 800ec74:	42a3      	cmp	r3, r4
 800ec76:	4607      	mov	r7, r0
 800ec78:	db7e      	blt.n	800ed78 <quorem+0x10c>
 800ec7a:	3c01      	subs	r4, #1
 800ec7c:	f101 0814 	add.w	r8, r1, #20
 800ec80:	00a3      	lsls	r3, r4, #2
 800ec82:	f100 0514 	add.w	r5, r0, #20
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec8c:	9301      	str	r3, [sp, #4]
 800ec8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec96:	3301      	adds	r3, #1
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800eca2:	d32e      	bcc.n	800ed02 <quorem+0x96>
 800eca4:	f04f 0a00 	mov.w	sl, #0
 800eca8:	46c4      	mov	ip, r8
 800ecaa:	46ae      	mov	lr, r5
 800ecac:	46d3      	mov	fp, sl
 800ecae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ecb2:	b298      	uxth	r0, r3
 800ecb4:	fb06 a000 	mla	r0, r6, r0, sl
 800ecb8:	0c02      	lsrs	r2, r0, #16
 800ecba:	0c1b      	lsrs	r3, r3, #16
 800ecbc:	fb06 2303 	mla	r3, r6, r3, r2
 800ecc0:	f8de 2000 	ldr.w	r2, [lr]
 800ecc4:	b280      	uxth	r0, r0
 800ecc6:	b292      	uxth	r2, r2
 800ecc8:	1a12      	subs	r2, r2, r0
 800ecca:	445a      	add	r2, fp
 800eccc:	f8de 0000 	ldr.w	r0, [lr]
 800ecd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ecda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ecde:	b292      	uxth	r2, r2
 800ece0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ece4:	45e1      	cmp	r9, ip
 800ece6:	f84e 2b04 	str.w	r2, [lr], #4
 800ecea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ecee:	d2de      	bcs.n	800ecae <quorem+0x42>
 800ecf0:	9b00      	ldr	r3, [sp, #0]
 800ecf2:	58eb      	ldr	r3, [r5, r3]
 800ecf4:	b92b      	cbnz	r3, 800ed02 <quorem+0x96>
 800ecf6:	9b01      	ldr	r3, [sp, #4]
 800ecf8:	3b04      	subs	r3, #4
 800ecfa:	429d      	cmp	r5, r3
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	d32f      	bcc.n	800ed60 <quorem+0xf4>
 800ed00:	613c      	str	r4, [r7, #16]
 800ed02:	4638      	mov	r0, r7
 800ed04:	f001 f97a 	bl	800fffc <__mcmp>
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	db25      	blt.n	800ed58 <quorem+0xec>
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	2000      	movs	r0, #0
 800ed10:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed14:	f8d1 c000 	ldr.w	ip, [r1]
 800ed18:	fa1f fe82 	uxth.w	lr, r2
 800ed1c:	fa1f f38c 	uxth.w	r3, ip
 800ed20:	eba3 030e 	sub.w	r3, r3, lr
 800ed24:	4403      	add	r3, r0
 800ed26:	0c12      	lsrs	r2, r2, #16
 800ed28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ed2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed36:	45c1      	cmp	r9, r8
 800ed38:	f841 3b04 	str.w	r3, [r1], #4
 800ed3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ed40:	d2e6      	bcs.n	800ed10 <quorem+0xa4>
 800ed42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed4a:	b922      	cbnz	r2, 800ed56 <quorem+0xea>
 800ed4c:	3b04      	subs	r3, #4
 800ed4e:	429d      	cmp	r5, r3
 800ed50:	461a      	mov	r2, r3
 800ed52:	d30b      	bcc.n	800ed6c <quorem+0x100>
 800ed54:	613c      	str	r4, [r7, #16]
 800ed56:	3601      	adds	r6, #1
 800ed58:	4630      	mov	r0, r6
 800ed5a:	b003      	add	sp, #12
 800ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed60:	6812      	ldr	r2, [r2, #0]
 800ed62:	3b04      	subs	r3, #4
 800ed64:	2a00      	cmp	r2, #0
 800ed66:	d1cb      	bne.n	800ed00 <quorem+0x94>
 800ed68:	3c01      	subs	r4, #1
 800ed6a:	e7c6      	b.n	800ecfa <quorem+0x8e>
 800ed6c:	6812      	ldr	r2, [r2, #0]
 800ed6e:	3b04      	subs	r3, #4
 800ed70:	2a00      	cmp	r2, #0
 800ed72:	d1ef      	bne.n	800ed54 <quorem+0xe8>
 800ed74:	3c01      	subs	r4, #1
 800ed76:	e7ea      	b.n	800ed4e <quorem+0xe2>
 800ed78:	2000      	movs	r0, #0
 800ed7a:	e7ee      	b.n	800ed5a <quorem+0xee>
 800ed7c:	0000      	movs	r0, r0
	...

0800ed80 <_dtoa_r>:
 800ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	69c7      	ldr	r7, [r0, #28]
 800ed86:	b099      	sub	sp, #100	@ 0x64
 800ed88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ed8c:	ec55 4b10 	vmov	r4, r5, d0
 800ed90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ed92:	9109      	str	r1, [sp, #36]	@ 0x24
 800ed94:	4683      	mov	fp, r0
 800ed96:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed9a:	b97f      	cbnz	r7, 800edbc <_dtoa_r+0x3c>
 800ed9c:	2010      	movs	r0, #16
 800ed9e:	f000 fdfd 	bl	800f99c <malloc>
 800eda2:	4602      	mov	r2, r0
 800eda4:	f8cb 001c 	str.w	r0, [fp, #28]
 800eda8:	b920      	cbnz	r0, 800edb4 <_dtoa_r+0x34>
 800edaa:	4ba7      	ldr	r3, [pc, #668]	@ (800f048 <_dtoa_r+0x2c8>)
 800edac:	21ef      	movs	r1, #239	@ 0xef
 800edae:	48a7      	ldr	r0, [pc, #668]	@ (800f04c <_dtoa_r+0x2cc>)
 800edb0:	f001 fe30 	bl	8010a14 <__assert_func>
 800edb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800edb8:	6007      	str	r7, [r0, #0]
 800edba:	60c7      	str	r7, [r0, #12]
 800edbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800edc0:	6819      	ldr	r1, [r3, #0]
 800edc2:	b159      	cbz	r1, 800eddc <_dtoa_r+0x5c>
 800edc4:	685a      	ldr	r2, [r3, #4]
 800edc6:	604a      	str	r2, [r1, #4]
 800edc8:	2301      	movs	r3, #1
 800edca:	4093      	lsls	r3, r2
 800edcc:	608b      	str	r3, [r1, #8]
 800edce:	4658      	mov	r0, fp
 800edd0:	f000 feda 	bl	800fb88 <_Bfree>
 800edd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800edd8:	2200      	movs	r2, #0
 800edda:	601a      	str	r2, [r3, #0]
 800eddc:	1e2b      	subs	r3, r5, #0
 800edde:	bfb9      	ittee	lt
 800ede0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ede4:	9303      	strlt	r3, [sp, #12]
 800ede6:	2300      	movge	r3, #0
 800ede8:	6033      	strge	r3, [r6, #0]
 800edea:	9f03      	ldr	r7, [sp, #12]
 800edec:	4b98      	ldr	r3, [pc, #608]	@ (800f050 <_dtoa_r+0x2d0>)
 800edee:	bfbc      	itt	lt
 800edf0:	2201      	movlt	r2, #1
 800edf2:	6032      	strlt	r2, [r6, #0]
 800edf4:	43bb      	bics	r3, r7
 800edf6:	d112      	bne.n	800ee1e <_dtoa_r+0x9e>
 800edf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800edfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee04:	4323      	orrs	r3, r4
 800ee06:	f000 854d 	beq.w	800f8a4 <_dtoa_r+0xb24>
 800ee0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f064 <_dtoa_r+0x2e4>
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f000 854f 	beq.w	800f8b4 <_dtoa_r+0xb34>
 800ee16:	f10a 0303 	add.w	r3, sl, #3
 800ee1a:	f000 bd49 	b.w	800f8b0 <_dtoa_r+0xb30>
 800ee1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee22:	2200      	movs	r2, #0
 800ee24:	ec51 0b17 	vmov	r0, r1, d7
 800ee28:	2300      	movs	r3, #0
 800ee2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ee2e:	f7f1 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee32:	4680      	mov	r8, r0
 800ee34:	b158      	cbz	r0, 800ee4e <_dtoa_r+0xce>
 800ee36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ee38:	2301      	movs	r3, #1
 800ee3a:	6013      	str	r3, [r2, #0]
 800ee3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee3e:	b113      	cbz	r3, 800ee46 <_dtoa_r+0xc6>
 800ee40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ee42:	4b84      	ldr	r3, [pc, #528]	@ (800f054 <_dtoa_r+0x2d4>)
 800ee44:	6013      	str	r3, [r2, #0]
 800ee46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f068 <_dtoa_r+0x2e8>
 800ee4a:	f000 bd33 	b.w	800f8b4 <_dtoa_r+0xb34>
 800ee4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ee52:	aa16      	add	r2, sp, #88	@ 0x58
 800ee54:	a917      	add	r1, sp, #92	@ 0x5c
 800ee56:	4658      	mov	r0, fp
 800ee58:	f001 f980 	bl	801015c <__d2b>
 800ee5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ee60:	4681      	mov	r9, r0
 800ee62:	2e00      	cmp	r6, #0
 800ee64:	d077      	beq.n	800ef56 <_dtoa_r+0x1d6>
 800ee66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ee6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ee78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ee7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ee80:	4619      	mov	r1, r3
 800ee82:	2200      	movs	r2, #0
 800ee84:	4b74      	ldr	r3, [pc, #464]	@ (800f058 <_dtoa_r+0x2d8>)
 800ee86:	f7f1 f9ff 	bl	8000288 <__aeabi_dsub>
 800ee8a:	a369      	add	r3, pc, #420	@ (adr r3, 800f030 <_dtoa_r+0x2b0>)
 800ee8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee90:	f7f1 fbb2 	bl	80005f8 <__aeabi_dmul>
 800ee94:	a368      	add	r3, pc, #416	@ (adr r3, 800f038 <_dtoa_r+0x2b8>)
 800ee96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9a:	f7f1 f9f7 	bl	800028c <__adddf3>
 800ee9e:	4604      	mov	r4, r0
 800eea0:	4630      	mov	r0, r6
 800eea2:	460d      	mov	r5, r1
 800eea4:	f7f1 fb3e 	bl	8000524 <__aeabi_i2d>
 800eea8:	a365      	add	r3, pc, #404	@ (adr r3, 800f040 <_dtoa_r+0x2c0>)
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	f7f1 fba3 	bl	80005f8 <__aeabi_dmul>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	4629      	mov	r1, r5
 800eeba:	f7f1 f9e7 	bl	800028c <__adddf3>
 800eebe:	4604      	mov	r4, r0
 800eec0:	460d      	mov	r5, r1
 800eec2:	f7f1 fe49 	bl	8000b58 <__aeabi_d2iz>
 800eec6:	2200      	movs	r2, #0
 800eec8:	4607      	mov	r7, r0
 800eeca:	2300      	movs	r3, #0
 800eecc:	4620      	mov	r0, r4
 800eece:	4629      	mov	r1, r5
 800eed0:	f7f1 fe04 	bl	8000adc <__aeabi_dcmplt>
 800eed4:	b140      	cbz	r0, 800eee8 <_dtoa_r+0x168>
 800eed6:	4638      	mov	r0, r7
 800eed8:	f7f1 fb24 	bl	8000524 <__aeabi_i2d>
 800eedc:	4622      	mov	r2, r4
 800eede:	462b      	mov	r3, r5
 800eee0:	f7f1 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800eee4:	b900      	cbnz	r0, 800eee8 <_dtoa_r+0x168>
 800eee6:	3f01      	subs	r7, #1
 800eee8:	2f16      	cmp	r7, #22
 800eeea:	d851      	bhi.n	800ef90 <_dtoa_r+0x210>
 800eeec:	4b5b      	ldr	r3, [pc, #364]	@ (800f05c <_dtoa_r+0x2dc>)
 800eeee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eefa:	f7f1 fdef 	bl	8000adc <__aeabi_dcmplt>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d048      	beq.n	800ef94 <_dtoa_r+0x214>
 800ef02:	3f01      	subs	r7, #1
 800ef04:	2300      	movs	r3, #0
 800ef06:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ef0a:	1b9b      	subs	r3, r3, r6
 800ef0c:	1e5a      	subs	r2, r3, #1
 800ef0e:	bf44      	itt	mi
 800ef10:	f1c3 0801 	rsbmi	r8, r3, #1
 800ef14:	2300      	movmi	r3, #0
 800ef16:	9208      	str	r2, [sp, #32]
 800ef18:	bf54      	ite	pl
 800ef1a:	f04f 0800 	movpl.w	r8, #0
 800ef1e:	9308      	strmi	r3, [sp, #32]
 800ef20:	2f00      	cmp	r7, #0
 800ef22:	db39      	blt.n	800ef98 <_dtoa_r+0x218>
 800ef24:	9b08      	ldr	r3, [sp, #32]
 800ef26:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ef28:	443b      	add	r3, r7
 800ef2a:	9308      	str	r3, [sp, #32]
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef32:	2b09      	cmp	r3, #9
 800ef34:	d864      	bhi.n	800f000 <_dtoa_r+0x280>
 800ef36:	2b05      	cmp	r3, #5
 800ef38:	bfc4      	itt	gt
 800ef3a:	3b04      	subgt	r3, #4
 800ef3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ef3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef40:	f1a3 0302 	sub.w	r3, r3, #2
 800ef44:	bfcc      	ite	gt
 800ef46:	2400      	movgt	r4, #0
 800ef48:	2401      	movle	r4, #1
 800ef4a:	2b03      	cmp	r3, #3
 800ef4c:	d863      	bhi.n	800f016 <_dtoa_r+0x296>
 800ef4e:	e8df f003 	tbb	[pc, r3]
 800ef52:	372a      	.short	0x372a
 800ef54:	5535      	.short	0x5535
 800ef56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ef5a:	441e      	add	r6, r3
 800ef5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ef60:	2b20      	cmp	r3, #32
 800ef62:	bfc1      	itttt	gt
 800ef64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ef68:	409f      	lslgt	r7, r3
 800ef6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ef6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ef72:	bfd6      	itet	le
 800ef74:	f1c3 0320 	rsble	r3, r3, #32
 800ef78:	ea47 0003 	orrgt.w	r0, r7, r3
 800ef7c:	fa04 f003 	lslle.w	r0, r4, r3
 800ef80:	f7f1 fac0 	bl	8000504 <__aeabi_ui2d>
 800ef84:	2201      	movs	r2, #1
 800ef86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ef8a:	3e01      	subs	r6, #1
 800ef8c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ef8e:	e777      	b.n	800ee80 <_dtoa_r+0x100>
 800ef90:	2301      	movs	r3, #1
 800ef92:	e7b8      	b.n	800ef06 <_dtoa_r+0x186>
 800ef94:	9012      	str	r0, [sp, #72]	@ 0x48
 800ef96:	e7b7      	b.n	800ef08 <_dtoa_r+0x188>
 800ef98:	427b      	negs	r3, r7
 800ef9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	eba8 0807 	sub.w	r8, r8, r7
 800efa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efa4:	e7c4      	b.n	800ef30 <_dtoa_r+0x1b0>
 800efa6:	2300      	movs	r3, #0
 800efa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efac:	2b00      	cmp	r3, #0
 800efae:	dc35      	bgt.n	800f01c <_dtoa_r+0x29c>
 800efb0:	2301      	movs	r3, #1
 800efb2:	9300      	str	r3, [sp, #0]
 800efb4:	9307      	str	r3, [sp, #28]
 800efb6:	461a      	mov	r2, r3
 800efb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800efba:	e00b      	b.n	800efd4 <_dtoa_r+0x254>
 800efbc:	2301      	movs	r3, #1
 800efbe:	e7f3      	b.n	800efa8 <_dtoa_r+0x228>
 800efc0:	2300      	movs	r3, #0
 800efc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efc6:	18fb      	adds	r3, r7, r3
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	3301      	adds	r3, #1
 800efcc:	2b01      	cmp	r3, #1
 800efce:	9307      	str	r3, [sp, #28]
 800efd0:	bfb8      	it	lt
 800efd2:	2301      	movlt	r3, #1
 800efd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800efd8:	2100      	movs	r1, #0
 800efda:	2204      	movs	r2, #4
 800efdc:	f102 0514 	add.w	r5, r2, #20
 800efe0:	429d      	cmp	r5, r3
 800efe2:	d91f      	bls.n	800f024 <_dtoa_r+0x2a4>
 800efe4:	6041      	str	r1, [r0, #4]
 800efe6:	4658      	mov	r0, fp
 800efe8:	f000 fd8e 	bl	800fb08 <_Balloc>
 800efec:	4682      	mov	sl, r0
 800efee:	2800      	cmp	r0, #0
 800eff0:	d13c      	bne.n	800f06c <_dtoa_r+0x2ec>
 800eff2:	4b1b      	ldr	r3, [pc, #108]	@ (800f060 <_dtoa_r+0x2e0>)
 800eff4:	4602      	mov	r2, r0
 800eff6:	f240 11af 	movw	r1, #431	@ 0x1af
 800effa:	e6d8      	b.n	800edae <_dtoa_r+0x2e>
 800effc:	2301      	movs	r3, #1
 800effe:	e7e0      	b.n	800efc2 <_dtoa_r+0x242>
 800f000:	2401      	movs	r4, #1
 800f002:	2300      	movs	r3, #0
 800f004:	9309      	str	r3, [sp, #36]	@ 0x24
 800f006:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f008:	f04f 33ff 	mov.w	r3, #4294967295
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	9307      	str	r3, [sp, #28]
 800f010:	2200      	movs	r2, #0
 800f012:	2312      	movs	r3, #18
 800f014:	e7d0      	b.n	800efb8 <_dtoa_r+0x238>
 800f016:	2301      	movs	r3, #1
 800f018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f01a:	e7f5      	b.n	800f008 <_dtoa_r+0x288>
 800f01c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	9307      	str	r3, [sp, #28]
 800f022:	e7d7      	b.n	800efd4 <_dtoa_r+0x254>
 800f024:	3101      	adds	r1, #1
 800f026:	0052      	lsls	r2, r2, #1
 800f028:	e7d8      	b.n	800efdc <_dtoa_r+0x25c>
 800f02a:	bf00      	nop
 800f02c:	f3af 8000 	nop.w
 800f030:	636f4361 	.word	0x636f4361
 800f034:	3fd287a7 	.word	0x3fd287a7
 800f038:	8b60c8b3 	.word	0x8b60c8b3
 800f03c:	3fc68a28 	.word	0x3fc68a28
 800f040:	509f79fb 	.word	0x509f79fb
 800f044:	3fd34413 	.word	0x3fd34413
 800f048:	08012796 	.word	0x08012796
 800f04c:	080127ad 	.word	0x080127ad
 800f050:	7ff00000 	.word	0x7ff00000
 800f054:	08012766 	.word	0x08012766
 800f058:	3ff80000 	.word	0x3ff80000
 800f05c:	080128a8 	.word	0x080128a8
 800f060:	08012805 	.word	0x08012805
 800f064:	08012792 	.word	0x08012792
 800f068:	08012765 	.word	0x08012765
 800f06c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f070:	6018      	str	r0, [r3, #0]
 800f072:	9b07      	ldr	r3, [sp, #28]
 800f074:	2b0e      	cmp	r3, #14
 800f076:	f200 80a4 	bhi.w	800f1c2 <_dtoa_r+0x442>
 800f07a:	2c00      	cmp	r4, #0
 800f07c:	f000 80a1 	beq.w	800f1c2 <_dtoa_r+0x442>
 800f080:	2f00      	cmp	r7, #0
 800f082:	dd33      	ble.n	800f0ec <_dtoa_r+0x36c>
 800f084:	4bad      	ldr	r3, [pc, #692]	@ (800f33c <_dtoa_r+0x5bc>)
 800f086:	f007 020f 	and.w	r2, r7, #15
 800f08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f08e:	ed93 7b00 	vldr	d7, [r3]
 800f092:	05f8      	lsls	r0, r7, #23
 800f094:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f098:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f09c:	d516      	bpl.n	800f0cc <_dtoa_r+0x34c>
 800f09e:	4ba8      	ldr	r3, [pc, #672]	@ (800f340 <_dtoa_r+0x5c0>)
 800f0a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0a8:	f7f1 fbd0 	bl	800084c <__aeabi_ddiv>
 800f0ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0b0:	f004 040f 	and.w	r4, r4, #15
 800f0b4:	2603      	movs	r6, #3
 800f0b6:	4da2      	ldr	r5, [pc, #648]	@ (800f340 <_dtoa_r+0x5c0>)
 800f0b8:	b954      	cbnz	r4, 800f0d0 <_dtoa_r+0x350>
 800f0ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0c2:	f7f1 fbc3 	bl	800084c <__aeabi_ddiv>
 800f0c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0ca:	e028      	b.n	800f11e <_dtoa_r+0x39e>
 800f0cc:	2602      	movs	r6, #2
 800f0ce:	e7f2      	b.n	800f0b6 <_dtoa_r+0x336>
 800f0d0:	07e1      	lsls	r1, r4, #31
 800f0d2:	d508      	bpl.n	800f0e6 <_dtoa_r+0x366>
 800f0d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0dc:	f7f1 fa8c 	bl	80005f8 <__aeabi_dmul>
 800f0e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0e4:	3601      	adds	r6, #1
 800f0e6:	1064      	asrs	r4, r4, #1
 800f0e8:	3508      	adds	r5, #8
 800f0ea:	e7e5      	b.n	800f0b8 <_dtoa_r+0x338>
 800f0ec:	f000 80d2 	beq.w	800f294 <_dtoa_r+0x514>
 800f0f0:	427c      	negs	r4, r7
 800f0f2:	4b92      	ldr	r3, [pc, #584]	@ (800f33c <_dtoa_r+0x5bc>)
 800f0f4:	4d92      	ldr	r5, [pc, #584]	@ (800f340 <_dtoa_r+0x5c0>)
 800f0f6:	f004 020f 	and.w	r2, r4, #15
 800f0fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f106:	f7f1 fa77 	bl	80005f8 <__aeabi_dmul>
 800f10a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f10e:	1124      	asrs	r4, r4, #4
 800f110:	2300      	movs	r3, #0
 800f112:	2602      	movs	r6, #2
 800f114:	2c00      	cmp	r4, #0
 800f116:	f040 80b2 	bne.w	800f27e <_dtoa_r+0x4fe>
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d1d3      	bne.n	800f0c6 <_dtoa_r+0x346>
 800f11e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f120:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 80b7 	beq.w	800f298 <_dtoa_r+0x518>
 800f12a:	4b86      	ldr	r3, [pc, #536]	@ (800f344 <_dtoa_r+0x5c4>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	4620      	mov	r0, r4
 800f130:	4629      	mov	r1, r5
 800f132:	f7f1 fcd3 	bl	8000adc <__aeabi_dcmplt>
 800f136:	2800      	cmp	r0, #0
 800f138:	f000 80ae 	beq.w	800f298 <_dtoa_r+0x518>
 800f13c:	9b07      	ldr	r3, [sp, #28]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f000 80aa 	beq.w	800f298 <_dtoa_r+0x518>
 800f144:	9b00      	ldr	r3, [sp, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	dd37      	ble.n	800f1ba <_dtoa_r+0x43a>
 800f14a:	1e7b      	subs	r3, r7, #1
 800f14c:	9304      	str	r3, [sp, #16]
 800f14e:	4620      	mov	r0, r4
 800f150:	4b7d      	ldr	r3, [pc, #500]	@ (800f348 <_dtoa_r+0x5c8>)
 800f152:	2200      	movs	r2, #0
 800f154:	4629      	mov	r1, r5
 800f156:	f7f1 fa4f 	bl	80005f8 <__aeabi_dmul>
 800f15a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f15e:	9c00      	ldr	r4, [sp, #0]
 800f160:	3601      	adds	r6, #1
 800f162:	4630      	mov	r0, r6
 800f164:	f7f1 f9de 	bl	8000524 <__aeabi_i2d>
 800f168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f16c:	f7f1 fa44 	bl	80005f8 <__aeabi_dmul>
 800f170:	4b76      	ldr	r3, [pc, #472]	@ (800f34c <_dtoa_r+0x5cc>)
 800f172:	2200      	movs	r2, #0
 800f174:	f7f1 f88a 	bl	800028c <__adddf3>
 800f178:	4605      	mov	r5, r0
 800f17a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f17e:	2c00      	cmp	r4, #0
 800f180:	f040 808d 	bne.w	800f29e <_dtoa_r+0x51e>
 800f184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f188:	4b71      	ldr	r3, [pc, #452]	@ (800f350 <_dtoa_r+0x5d0>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	f7f1 f87c 	bl	8000288 <__aeabi_dsub>
 800f190:	4602      	mov	r2, r0
 800f192:	460b      	mov	r3, r1
 800f194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f198:	462a      	mov	r2, r5
 800f19a:	4633      	mov	r3, r6
 800f19c:	f7f1 fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	f040 828b 	bne.w	800f6bc <_dtoa_r+0x93c>
 800f1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1aa:	462a      	mov	r2, r5
 800f1ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f1b0:	f7f1 fc94 	bl	8000adc <__aeabi_dcmplt>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	f040 8128 	bne.w	800f40a <_dtoa_r+0x68a>
 800f1ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f1be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f1c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f2c0 815a 	blt.w	800f47e <_dtoa_r+0x6fe>
 800f1ca:	2f0e      	cmp	r7, #14
 800f1cc:	f300 8157 	bgt.w	800f47e <_dtoa_r+0x6fe>
 800f1d0:	4b5a      	ldr	r3, [pc, #360]	@ (800f33c <_dtoa_r+0x5bc>)
 800f1d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1d6:	ed93 7b00 	vldr	d7, [r3]
 800f1da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	ed8d 7b00 	vstr	d7, [sp]
 800f1e2:	da03      	bge.n	800f1ec <_dtoa_r+0x46c>
 800f1e4:	9b07      	ldr	r3, [sp, #28]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f340 8101 	ble.w	800f3ee <_dtoa_r+0x66e>
 800f1ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1f0:	4656      	mov	r6, sl
 800f1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	f7f1 fb27 	bl	800084c <__aeabi_ddiv>
 800f1fe:	f7f1 fcab 	bl	8000b58 <__aeabi_d2iz>
 800f202:	4680      	mov	r8, r0
 800f204:	f7f1 f98e 	bl	8000524 <__aeabi_i2d>
 800f208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f20c:	f7f1 f9f4 	bl	80005f8 <__aeabi_dmul>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	4620      	mov	r0, r4
 800f216:	4629      	mov	r1, r5
 800f218:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f21c:	f7f1 f834 	bl	8000288 <__aeabi_dsub>
 800f220:	f806 4b01 	strb.w	r4, [r6], #1
 800f224:	9d07      	ldr	r5, [sp, #28]
 800f226:	eba6 040a 	sub.w	r4, r6, sl
 800f22a:	42a5      	cmp	r5, r4
 800f22c:	4602      	mov	r2, r0
 800f22e:	460b      	mov	r3, r1
 800f230:	f040 8117 	bne.w	800f462 <_dtoa_r+0x6e2>
 800f234:	f7f1 f82a 	bl	800028c <__adddf3>
 800f238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f23c:	4604      	mov	r4, r0
 800f23e:	460d      	mov	r5, r1
 800f240:	f7f1 fc6a 	bl	8000b18 <__aeabi_dcmpgt>
 800f244:	2800      	cmp	r0, #0
 800f246:	f040 80f9 	bne.w	800f43c <_dtoa_r+0x6bc>
 800f24a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f24e:	4620      	mov	r0, r4
 800f250:	4629      	mov	r1, r5
 800f252:	f7f1 fc39 	bl	8000ac8 <__aeabi_dcmpeq>
 800f256:	b118      	cbz	r0, 800f260 <_dtoa_r+0x4e0>
 800f258:	f018 0f01 	tst.w	r8, #1
 800f25c:	f040 80ee 	bne.w	800f43c <_dtoa_r+0x6bc>
 800f260:	4649      	mov	r1, r9
 800f262:	4658      	mov	r0, fp
 800f264:	f000 fc90 	bl	800fb88 <_Bfree>
 800f268:	2300      	movs	r3, #0
 800f26a:	7033      	strb	r3, [r6, #0]
 800f26c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f26e:	3701      	adds	r7, #1
 800f270:	601f      	str	r7, [r3, #0]
 800f272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f274:	2b00      	cmp	r3, #0
 800f276:	f000 831d 	beq.w	800f8b4 <_dtoa_r+0xb34>
 800f27a:	601e      	str	r6, [r3, #0]
 800f27c:	e31a      	b.n	800f8b4 <_dtoa_r+0xb34>
 800f27e:	07e2      	lsls	r2, r4, #31
 800f280:	d505      	bpl.n	800f28e <_dtoa_r+0x50e>
 800f282:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f286:	f7f1 f9b7 	bl	80005f8 <__aeabi_dmul>
 800f28a:	3601      	adds	r6, #1
 800f28c:	2301      	movs	r3, #1
 800f28e:	1064      	asrs	r4, r4, #1
 800f290:	3508      	adds	r5, #8
 800f292:	e73f      	b.n	800f114 <_dtoa_r+0x394>
 800f294:	2602      	movs	r6, #2
 800f296:	e742      	b.n	800f11e <_dtoa_r+0x39e>
 800f298:	9c07      	ldr	r4, [sp, #28]
 800f29a:	9704      	str	r7, [sp, #16]
 800f29c:	e761      	b.n	800f162 <_dtoa_r+0x3e2>
 800f29e:	4b27      	ldr	r3, [pc, #156]	@ (800f33c <_dtoa_r+0x5bc>)
 800f2a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f2a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f2a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f2aa:	4454      	add	r4, sl
 800f2ac:	2900      	cmp	r1, #0
 800f2ae:	d053      	beq.n	800f358 <_dtoa_r+0x5d8>
 800f2b0:	4928      	ldr	r1, [pc, #160]	@ (800f354 <_dtoa_r+0x5d4>)
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	f7f1 faca 	bl	800084c <__aeabi_ddiv>
 800f2b8:	4633      	mov	r3, r6
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	f7f0 ffe4 	bl	8000288 <__aeabi_dsub>
 800f2c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f2c4:	4656      	mov	r6, sl
 800f2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2ca:	f7f1 fc45 	bl	8000b58 <__aeabi_d2iz>
 800f2ce:	4605      	mov	r5, r0
 800f2d0:	f7f1 f928 	bl	8000524 <__aeabi_i2d>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	460b      	mov	r3, r1
 800f2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2dc:	f7f0 ffd4 	bl	8000288 <__aeabi_dsub>
 800f2e0:	3530      	adds	r5, #48	@ 0x30
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2ea:	f806 5b01 	strb.w	r5, [r6], #1
 800f2ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f2f2:	f7f1 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d171      	bne.n	800f3de <_dtoa_r+0x65e>
 800f2fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2fe:	4911      	ldr	r1, [pc, #68]	@ (800f344 <_dtoa_r+0x5c4>)
 800f300:	2000      	movs	r0, #0
 800f302:	f7f0 ffc1 	bl	8000288 <__aeabi_dsub>
 800f306:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f30a:	f7f1 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800f30e:	2800      	cmp	r0, #0
 800f310:	f040 8095 	bne.w	800f43e <_dtoa_r+0x6be>
 800f314:	42a6      	cmp	r6, r4
 800f316:	f43f af50 	beq.w	800f1ba <_dtoa_r+0x43a>
 800f31a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f31e:	4b0a      	ldr	r3, [pc, #40]	@ (800f348 <_dtoa_r+0x5c8>)
 800f320:	2200      	movs	r2, #0
 800f322:	f7f1 f969 	bl	80005f8 <__aeabi_dmul>
 800f326:	4b08      	ldr	r3, [pc, #32]	@ (800f348 <_dtoa_r+0x5c8>)
 800f328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f32c:	2200      	movs	r2, #0
 800f32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f332:	f7f1 f961 	bl	80005f8 <__aeabi_dmul>
 800f336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f33a:	e7c4      	b.n	800f2c6 <_dtoa_r+0x546>
 800f33c:	080128a8 	.word	0x080128a8
 800f340:	08012880 	.word	0x08012880
 800f344:	3ff00000 	.word	0x3ff00000
 800f348:	40240000 	.word	0x40240000
 800f34c:	401c0000 	.word	0x401c0000
 800f350:	40140000 	.word	0x40140000
 800f354:	3fe00000 	.word	0x3fe00000
 800f358:	4631      	mov	r1, r6
 800f35a:	4628      	mov	r0, r5
 800f35c:	f7f1 f94c 	bl	80005f8 <__aeabi_dmul>
 800f360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f364:	9415      	str	r4, [sp, #84]	@ 0x54
 800f366:	4656      	mov	r6, sl
 800f368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f36c:	f7f1 fbf4 	bl	8000b58 <__aeabi_d2iz>
 800f370:	4605      	mov	r5, r0
 800f372:	f7f1 f8d7 	bl	8000524 <__aeabi_i2d>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f37e:	f7f0 ff83 	bl	8000288 <__aeabi_dsub>
 800f382:	3530      	adds	r5, #48	@ 0x30
 800f384:	f806 5b01 	strb.w	r5, [r6], #1
 800f388:	4602      	mov	r2, r0
 800f38a:	460b      	mov	r3, r1
 800f38c:	42a6      	cmp	r6, r4
 800f38e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f392:	f04f 0200 	mov.w	r2, #0
 800f396:	d124      	bne.n	800f3e2 <_dtoa_r+0x662>
 800f398:	4bac      	ldr	r3, [pc, #688]	@ (800f64c <_dtoa_r+0x8cc>)
 800f39a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f39e:	f7f0 ff75 	bl	800028c <__adddf3>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3aa:	f7f1 fbb5 	bl	8000b18 <__aeabi_dcmpgt>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d145      	bne.n	800f43e <_dtoa_r+0x6be>
 800f3b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f3b6:	49a5      	ldr	r1, [pc, #660]	@ (800f64c <_dtoa_r+0x8cc>)
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	f7f0 ff65 	bl	8000288 <__aeabi_dsub>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3c6:	f7f1 fb89 	bl	8000adc <__aeabi_dcmplt>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	f43f aef5 	beq.w	800f1ba <_dtoa_r+0x43a>
 800f3d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f3d2:	1e73      	subs	r3, r6, #1
 800f3d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800f3d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3da:	2b30      	cmp	r3, #48	@ 0x30
 800f3dc:	d0f8      	beq.n	800f3d0 <_dtoa_r+0x650>
 800f3de:	9f04      	ldr	r7, [sp, #16]
 800f3e0:	e73e      	b.n	800f260 <_dtoa_r+0x4e0>
 800f3e2:	4b9b      	ldr	r3, [pc, #620]	@ (800f650 <_dtoa_r+0x8d0>)
 800f3e4:	f7f1 f908 	bl	80005f8 <__aeabi_dmul>
 800f3e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ec:	e7bc      	b.n	800f368 <_dtoa_r+0x5e8>
 800f3ee:	d10c      	bne.n	800f40a <_dtoa_r+0x68a>
 800f3f0:	4b98      	ldr	r3, [pc, #608]	@ (800f654 <_dtoa_r+0x8d4>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3f8:	f7f1 f8fe 	bl	80005f8 <__aeabi_dmul>
 800f3fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f400:	f7f1 fb80 	bl	8000b04 <__aeabi_dcmpge>
 800f404:	2800      	cmp	r0, #0
 800f406:	f000 8157 	beq.w	800f6b8 <_dtoa_r+0x938>
 800f40a:	2400      	movs	r4, #0
 800f40c:	4625      	mov	r5, r4
 800f40e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f410:	43db      	mvns	r3, r3
 800f412:	9304      	str	r3, [sp, #16]
 800f414:	4656      	mov	r6, sl
 800f416:	2700      	movs	r7, #0
 800f418:	4621      	mov	r1, r4
 800f41a:	4658      	mov	r0, fp
 800f41c:	f000 fbb4 	bl	800fb88 <_Bfree>
 800f420:	2d00      	cmp	r5, #0
 800f422:	d0dc      	beq.n	800f3de <_dtoa_r+0x65e>
 800f424:	b12f      	cbz	r7, 800f432 <_dtoa_r+0x6b2>
 800f426:	42af      	cmp	r7, r5
 800f428:	d003      	beq.n	800f432 <_dtoa_r+0x6b2>
 800f42a:	4639      	mov	r1, r7
 800f42c:	4658      	mov	r0, fp
 800f42e:	f000 fbab 	bl	800fb88 <_Bfree>
 800f432:	4629      	mov	r1, r5
 800f434:	4658      	mov	r0, fp
 800f436:	f000 fba7 	bl	800fb88 <_Bfree>
 800f43a:	e7d0      	b.n	800f3de <_dtoa_r+0x65e>
 800f43c:	9704      	str	r7, [sp, #16]
 800f43e:	4633      	mov	r3, r6
 800f440:	461e      	mov	r6, r3
 800f442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f446:	2a39      	cmp	r2, #57	@ 0x39
 800f448:	d107      	bne.n	800f45a <_dtoa_r+0x6da>
 800f44a:	459a      	cmp	sl, r3
 800f44c:	d1f8      	bne.n	800f440 <_dtoa_r+0x6c0>
 800f44e:	9a04      	ldr	r2, [sp, #16]
 800f450:	3201      	adds	r2, #1
 800f452:	9204      	str	r2, [sp, #16]
 800f454:	2230      	movs	r2, #48	@ 0x30
 800f456:	f88a 2000 	strb.w	r2, [sl]
 800f45a:	781a      	ldrb	r2, [r3, #0]
 800f45c:	3201      	adds	r2, #1
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	e7bd      	b.n	800f3de <_dtoa_r+0x65e>
 800f462:	4b7b      	ldr	r3, [pc, #492]	@ (800f650 <_dtoa_r+0x8d0>)
 800f464:	2200      	movs	r2, #0
 800f466:	f7f1 f8c7 	bl	80005f8 <__aeabi_dmul>
 800f46a:	2200      	movs	r2, #0
 800f46c:	2300      	movs	r3, #0
 800f46e:	4604      	mov	r4, r0
 800f470:	460d      	mov	r5, r1
 800f472:	f7f1 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 800f476:	2800      	cmp	r0, #0
 800f478:	f43f aebb 	beq.w	800f1f2 <_dtoa_r+0x472>
 800f47c:	e6f0      	b.n	800f260 <_dtoa_r+0x4e0>
 800f47e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f480:	2a00      	cmp	r2, #0
 800f482:	f000 80db 	beq.w	800f63c <_dtoa_r+0x8bc>
 800f486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f488:	2a01      	cmp	r2, #1
 800f48a:	f300 80bf 	bgt.w	800f60c <_dtoa_r+0x88c>
 800f48e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f490:	2a00      	cmp	r2, #0
 800f492:	f000 80b7 	beq.w	800f604 <_dtoa_r+0x884>
 800f496:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f49a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f49c:	4646      	mov	r6, r8
 800f49e:	9a08      	ldr	r2, [sp, #32]
 800f4a0:	2101      	movs	r1, #1
 800f4a2:	441a      	add	r2, r3
 800f4a4:	4658      	mov	r0, fp
 800f4a6:	4498      	add	r8, r3
 800f4a8:	9208      	str	r2, [sp, #32]
 800f4aa:	f000 fc21 	bl	800fcf0 <__i2b>
 800f4ae:	4605      	mov	r5, r0
 800f4b0:	b15e      	cbz	r6, 800f4ca <_dtoa_r+0x74a>
 800f4b2:	9b08      	ldr	r3, [sp, #32]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	dd08      	ble.n	800f4ca <_dtoa_r+0x74a>
 800f4b8:	42b3      	cmp	r3, r6
 800f4ba:	9a08      	ldr	r2, [sp, #32]
 800f4bc:	bfa8      	it	ge
 800f4be:	4633      	movge	r3, r6
 800f4c0:	eba8 0803 	sub.w	r8, r8, r3
 800f4c4:	1af6      	subs	r6, r6, r3
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	9308      	str	r3, [sp, #32]
 800f4ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4cc:	b1f3      	cbz	r3, 800f50c <_dtoa_r+0x78c>
 800f4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f000 80b7 	beq.w	800f644 <_dtoa_r+0x8c4>
 800f4d6:	b18c      	cbz	r4, 800f4fc <_dtoa_r+0x77c>
 800f4d8:	4629      	mov	r1, r5
 800f4da:	4622      	mov	r2, r4
 800f4dc:	4658      	mov	r0, fp
 800f4de:	f000 fcc7 	bl	800fe70 <__pow5mult>
 800f4e2:	464a      	mov	r2, r9
 800f4e4:	4601      	mov	r1, r0
 800f4e6:	4605      	mov	r5, r0
 800f4e8:	4658      	mov	r0, fp
 800f4ea:	f000 fc17 	bl	800fd1c <__multiply>
 800f4ee:	4649      	mov	r1, r9
 800f4f0:	9004      	str	r0, [sp, #16]
 800f4f2:	4658      	mov	r0, fp
 800f4f4:	f000 fb48 	bl	800fb88 <_Bfree>
 800f4f8:	9b04      	ldr	r3, [sp, #16]
 800f4fa:	4699      	mov	r9, r3
 800f4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4fe:	1b1a      	subs	r2, r3, r4
 800f500:	d004      	beq.n	800f50c <_dtoa_r+0x78c>
 800f502:	4649      	mov	r1, r9
 800f504:	4658      	mov	r0, fp
 800f506:	f000 fcb3 	bl	800fe70 <__pow5mult>
 800f50a:	4681      	mov	r9, r0
 800f50c:	2101      	movs	r1, #1
 800f50e:	4658      	mov	r0, fp
 800f510:	f000 fbee 	bl	800fcf0 <__i2b>
 800f514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f516:	4604      	mov	r4, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f000 81cf 	beq.w	800f8bc <_dtoa_r+0xb3c>
 800f51e:	461a      	mov	r2, r3
 800f520:	4601      	mov	r1, r0
 800f522:	4658      	mov	r0, fp
 800f524:	f000 fca4 	bl	800fe70 <__pow5mult>
 800f528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	4604      	mov	r4, r0
 800f52e:	f300 8095 	bgt.w	800f65c <_dtoa_r+0x8dc>
 800f532:	9b02      	ldr	r3, [sp, #8]
 800f534:	2b00      	cmp	r3, #0
 800f536:	f040 8087 	bne.w	800f648 <_dtoa_r+0x8c8>
 800f53a:	9b03      	ldr	r3, [sp, #12]
 800f53c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f540:	2b00      	cmp	r3, #0
 800f542:	f040 8089 	bne.w	800f658 <_dtoa_r+0x8d8>
 800f546:	9b03      	ldr	r3, [sp, #12]
 800f548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f54c:	0d1b      	lsrs	r3, r3, #20
 800f54e:	051b      	lsls	r3, r3, #20
 800f550:	b12b      	cbz	r3, 800f55e <_dtoa_r+0x7de>
 800f552:	9b08      	ldr	r3, [sp, #32]
 800f554:	3301      	adds	r3, #1
 800f556:	9308      	str	r3, [sp, #32]
 800f558:	f108 0801 	add.w	r8, r8, #1
 800f55c:	2301      	movs	r3, #1
 800f55e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f562:	2b00      	cmp	r3, #0
 800f564:	f000 81b0 	beq.w	800f8c8 <_dtoa_r+0xb48>
 800f568:	6923      	ldr	r3, [r4, #16]
 800f56a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f56e:	6918      	ldr	r0, [r3, #16]
 800f570:	f000 fb72 	bl	800fc58 <__hi0bits>
 800f574:	f1c0 0020 	rsb	r0, r0, #32
 800f578:	9b08      	ldr	r3, [sp, #32]
 800f57a:	4418      	add	r0, r3
 800f57c:	f010 001f 	ands.w	r0, r0, #31
 800f580:	d077      	beq.n	800f672 <_dtoa_r+0x8f2>
 800f582:	f1c0 0320 	rsb	r3, r0, #32
 800f586:	2b04      	cmp	r3, #4
 800f588:	dd6b      	ble.n	800f662 <_dtoa_r+0x8e2>
 800f58a:	9b08      	ldr	r3, [sp, #32]
 800f58c:	f1c0 001c 	rsb	r0, r0, #28
 800f590:	4403      	add	r3, r0
 800f592:	4480      	add	r8, r0
 800f594:	4406      	add	r6, r0
 800f596:	9308      	str	r3, [sp, #32]
 800f598:	f1b8 0f00 	cmp.w	r8, #0
 800f59c:	dd05      	ble.n	800f5aa <_dtoa_r+0x82a>
 800f59e:	4649      	mov	r1, r9
 800f5a0:	4642      	mov	r2, r8
 800f5a2:	4658      	mov	r0, fp
 800f5a4:	f000 fcbe 	bl	800ff24 <__lshift>
 800f5a8:	4681      	mov	r9, r0
 800f5aa:	9b08      	ldr	r3, [sp, #32]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	dd05      	ble.n	800f5bc <_dtoa_r+0x83c>
 800f5b0:	4621      	mov	r1, r4
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	4658      	mov	r0, fp
 800f5b6:	f000 fcb5 	bl	800ff24 <__lshift>
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d059      	beq.n	800f676 <_dtoa_r+0x8f6>
 800f5c2:	4621      	mov	r1, r4
 800f5c4:	4648      	mov	r0, r9
 800f5c6:	f000 fd19 	bl	800fffc <__mcmp>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	da53      	bge.n	800f676 <_dtoa_r+0x8f6>
 800f5ce:	1e7b      	subs	r3, r7, #1
 800f5d0:	9304      	str	r3, [sp, #16]
 800f5d2:	4649      	mov	r1, r9
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	220a      	movs	r2, #10
 800f5d8:	4658      	mov	r0, fp
 800f5da:	f000 faf7 	bl	800fbcc <__multadd>
 800f5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5e0:	4681      	mov	r9, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f000 8172 	beq.w	800f8cc <_dtoa_r+0xb4c>
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	4629      	mov	r1, r5
 800f5ec:	220a      	movs	r2, #10
 800f5ee:	4658      	mov	r0, fp
 800f5f0:	f000 faec 	bl	800fbcc <__multadd>
 800f5f4:	9b00      	ldr	r3, [sp, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	dc67      	bgt.n	800f6cc <_dtoa_r+0x94c>
 800f5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	dc41      	bgt.n	800f686 <_dtoa_r+0x906>
 800f602:	e063      	b.n	800f6cc <_dtoa_r+0x94c>
 800f604:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f606:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f60a:	e746      	b.n	800f49a <_dtoa_r+0x71a>
 800f60c:	9b07      	ldr	r3, [sp, #28]
 800f60e:	1e5c      	subs	r4, r3, #1
 800f610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f612:	42a3      	cmp	r3, r4
 800f614:	bfbf      	itttt	lt
 800f616:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f618:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f61a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f61c:	1ae3      	sublt	r3, r4, r3
 800f61e:	bfb4      	ite	lt
 800f620:	18d2      	addlt	r2, r2, r3
 800f622:	1b1c      	subge	r4, r3, r4
 800f624:	9b07      	ldr	r3, [sp, #28]
 800f626:	bfbc      	itt	lt
 800f628:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f62a:	2400      	movlt	r4, #0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	bfb5      	itete	lt
 800f630:	eba8 0603 	sublt.w	r6, r8, r3
 800f634:	9b07      	ldrge	r3, [sp, #28]
 800f636:	2300      	movlt	r3, #0
 800f638:	4646      	movge	r6, r8
 800f63a:	e730      	b.n	800f49e <_dtoa_r+0x71e>
 800f63c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f63e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f640:	4646      	mov	r6, r8
 800f642:	e735      	b.n	800f4b0 <_dtoa_r+0x730>
 800f644:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f646:	e75c      	b.n	800f502 <_dtoa_r+0x782>
 800f648:	2300      	movs	r3, #0
 800f64a:	e788      	b.n	800f55e <_dtoa_r+0x7de>
 800f64c:	3fe00000 	.word	0x3fe00000
 800f650:	40240000 	.word	0x40240000
 800f654:	40140000 	.word	0x40140000
 800f658:	9b02      	ldr	r3, [sp, #8]
 800f65a:	e780      	b.n	800f55e <_dtoa_r+0x7de>
 800f65c:	2300      	movs	r3, #0
 800f65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f660:	e782      	b.n	800f568 <_dtoa_r+0x7e8>
 800f662:	d099      	beq.n	800f598 <_dtoa_r+0x818>
 800f664:	9a08      	ldr	r2, [sp, #32]
 800f666:	331c      	adds	r3, #28
 800f668:	441a      	add	r2, r3
 800f66a:	4498      	add	r8, r3
 800f66c:	441e      	add	r6, r3
 800f66e:	9208      	str	r2, [sp, #32]
 800f670:	e792      	b.n	800f598 <_dtoa_r+0x818>
 800f672:	4603      	mov	r3, r0
 800f674:	e7f6      	b.n	800f664 <_dtoa_r+0x8e4>
 800f676:	9b07      	ldr	r3, [sp, #28]
 800f678:	9704      	str	r7, [sp, #16]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	dc20      	bgt.n	800f6c0 <_dtoa_r+0x940>
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f682:	2b02      	cmp	r3, #2
 800f684:	dd1e      	ble.n	800f6c4 <_dtoa_r+0x944>
 800f686:	9b00      	ldr	r3, [sp, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f47f aec0 	bne.w	800f40e <_dtoa_r+0x68e>
 800f68e:	4621      	mov	r1, r4
 800f690:	2205      	movs	r2, #5
 800f692:	4658      	mov	r0, fp
 800f694:	f000 fa9a 	bl	800fbcc <__multadd>
 800f698:	4601      	mov	r1, r0
 800f69a:	4604      	mov	r4, r0
 800f69c:	4648      	mov	r0, r9
 800f69e:	f000 fcad 	bl	800fffc <__mcmp>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	f77f aeb3 	ble.w	800f40e <_dtoa_r+0x68e>
 800f6a8:	4656      	mov	r6, sl
 800f6aa:	2331      	movs	r3, #49	@ 0x31
 800f6ac:	f806 3b01 	strb.w	r3, [r6], #1
 800f6b0:	9b04      	ldr	r3, [sp, #16]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	9304      	str	r3, [sp, #16]
 800f6b6:	e6ae      	b.n	800f416 <_dtoa_r+0x696>
 800f6b8:	9c07      	ldr	r4, [sp, #28]
 800f6ba:	9704      	str	r7, [sp, #16]
 800f6bc:	4625      	mov	r5, r4
 800f6be:	e7f3      	b.n	800f6a8 <_dtoa_r+0x928>
 800f6c0:	9b07      	ldr	r3, [sp, #28]
 800f6c2:	9300      	str	r3, [sp, #0]
 800f6c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f000 8104 	beq.w	800f8d4 <_dtoa_r+0xb54>
 800f6cc:	2e00      	cmp	r6, #0
 800f6ce:	dd05      	ble.n	800f6dc <_dtoa_r+0x95c>
 800f6d0:	4629      	mov	r1, r5
 800f6d2:	4632      	mov	r2, r6
 800f6d4:	4658      	mov	r0, fp
 800f6d6:	f000 fc25 	bl	800ff24 <__lshift>
 800f6da:	4605      	mov	r5, r0
 800f6dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d05a      	beq.n	800f798 <_dtoa_r+0xa18>
 800f6e2:	6869      	ldr	r1, [r5, #4]
 800f6e4:	4658      	mov	r0, fp
 800f6e6:	f000 fa0f 	bl	800fb08 <_Balloc>
 800f6ea:	4606      	mov	r6, r0
 800f6ec:	b928      	cbnz	r0, 800f6fa <_dtoa_r+0x97a>
 800f6ee:	4b84      	ldr	r3, [pc, #528]	@ (800f900 <_dtoa_r+0xb80>)
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f6f6:	f7ff bb5a 	b.w	800edae <_dtoa_r+0x2e>
 800f6fa:	692a      	ldr	r2, [r5, #16]
 800f6fc:	3202      	adds	r2, #2
 800f6fe:	0092      	lsls	r2, r2, #2
 800f700:	f105 010c 	add.w	r1, r5, #12
 800f704:	300c      	adds	r0, #12
 800f706:	f7ff fa92 	bl	800ec2e <memcpy>
 800f70a:	2201      	movs	r2, #1
 800f70c:	4631      	mov	r1, r6
 800f70e:	4658      	mov	r0, fp
 800f710:	f000 fc08 	bl	800ff24 <__lshift>
 800f714:	f10a 0301 	add.w	r3, sl, #1
 800f718:	9307      	str	r3, [sp, #28]
 800f71a:	9b00      	ldr	r3, [sp, #0]
 800f71c:	4453      	add	r3, sl
 800f71e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f720:	9b02      	ldr	r3, [sp, #8]
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	462f      	mov	r7, r5
 800f728:	930a      	str	r3, [sp, #40]	@ 0x28
 800f72a:	4605      	mov	r5, r0
 800f72c:	9b07      	ldr	r3, [sp, #28]
 800f72e:	4621      	mov	r1, r4
 800f730:	3b01      	subs	r3, #1
 800f732:	4648      	mov	r0, r9
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	f7ff fa99 	bl	800ec6c <quorem>
 800f73a:	4639      	mov	r1, r7
 800f73c:	9002      	str	r0, [sp, #8]
 800f73e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f742:	4648      	mov	r0, r9
 800f744:	f000 fc5a 	bl	800fffc <__mcmp>
 800f748:	462a      	mov	r2, r5
 800f74a:	9008      	str	r0, [sp, #32]
 800f74c:	4621      	mov	r1, r4
 800f74e:	4658      	mov	r0, fp
 800f750:	f000 fc70 	bl	8010034 <__mdiff>
 800f754:	68c2      	ldr	r2, [r0, #12]
 800f756:	4606      	mov	r6, r0
 800f758:	bb02      	cbnz	r2, 800f79c <_dtoa_r+0xa1c>
 800f75a:	4601      	mov	r1, r0
 800f75c:	4648      	mov	r0, r9
 800f75e:	f000 fc4d 	bl	800fffc <__mcmp>
 800f762:	4602      	mov	r2, r0
 800f764:	4631      	mov	r1, r6
 800f766:	4658      	mov	r0, fp
 800f768:	920e      	str	r2, [sp, #56]	@ 0x38
 800f76a:	f000 fa0d 	bl	800fb88 <_Bfree>
 800f76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f770:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f772:	9e07      	ldr	r6, [sp, #28]
 800f774:	ea43 0102 	orr.w	r1, r3, r2
 800f778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f77a:	4319      	orrs	r1, r3
 800f77c:	d110      	bne.n	800f7a0 <_dtoa_r+0xa20>
 800f77e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f782:	d029      	beq.n	800f7d8 <_dtoa_r+0xa58>
 800f784:	9b08      	ldr	r3, [sp, #32]
 800f786:	2b00      	cmp	r3, #0
 800f788:	dd02      	ble.n	800f790 <_dtoa_r+0xa10>
 800f78a:	9b02      	ldr	r3, [sp, #8]
 800f78c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f790:	9b00      	ldr	r3, [sp, #0]
 800f792:	f883 8000 	strb.w	r8, [r3]
 800f796:	e63f      	b.n	800f418 <_dtoa_r+0x698>
 800f798:	4628      	mov	r0, r5
 800f79a:	e7bb      	b.n	800f714 <_dtoa_r+0x994>
 800f79c:	2201      	movs	r2, #1
 800f79e:	e7e1      	b.n	800f764 <_dtoa_r+0x9e4>
 800f7a0:	9b08      	ldr	r3, [sp, #32]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	db04      	blt.n	800f7b0 <_dtoa_r+0xa30>
 800f7a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f7a8:	430b      	orrs	r3, r1
 800f7aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7ac:	430b      	orrs	r3, r1
 800f7ae:	d120      	bne.n	800f7f2 <_dtoa_r+0xa72>
 800f7b0:	2a00      	cmp	r2, #0
 800f7b2:	dded      	ble.n	800f790 <_dtoa_r+0xa10>
 800f7b4:	4649      	mov	r1, r9
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	4658      	mov	r0, fp
 800f7ba:	f000 fbb3 	bl	800ff24 <__lshift>
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4681      	mov	r9, r0
 800f7c2:	f000 fc1b 	bl	800fffc <__mcmp>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	dc03      	bgt.n	800f7d2 <_dtoa_r+0xa52>
 800f7ca:	d1e1      	bne.n	800f790 <_dtoa_r+0xa10>
 800f7cc:	f018 0f01 	tst.w	r8, #1
 800f7d0:	d0de      	beq.n	800f790 <_dtoa_r+0xa10>
 800f7d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f7d6:	d1d8      	bne.n	800f78a <_dtoa_r+0xa0a>
 800f7d8:	9a00      	ldr	r2, [sp, #0]
 800f7da:	2339      	movs	r3, #57	@ 0x39
 800f7dc:	7013      	strb	r3, [r2, #0]
 800f7de:	4633      	mov	r3, r6
 800f7e0:	461e      	mov	r6, r3
 800f7e2:	3b01      	subs	r3, #1
 800f7e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f7e8:	2a39      	cmp	r2, #57	@ 0x39
 800f7ea:	d052      	beq.n	800f892 <_dtoa_r+0xb12>
 800f7ec:	3201      	adds	r2, #1
 800f7ee:	701a      	strb	r2, [r3, #0]
 800f7f0:	e612      	b.n	800f418 <_dtoa_r+0x698>
 800f7f2:	2a00      	cmp	r2, #0
 800f7f4:	dd07      	ble.n	800f806 <_dtoa_r+0xa86>
 800f7f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f7fa:	d0ed      	beq.n	800f7d8 <_dtoa_r+0xa58>
 800f7fc:	9a00      	ldr	r2, [sp, #0]
 800f7fe:	f108 0301 	add.w	r3, r8, #1
 800f802:	7013      	strb	r3, [r2, #0]
 800f804:	e608      	b.n	800f418 <_dtoa_r+0x698>
 800f806:	9b07      	ldr	r3, [sp, #28]
 800f808:	9a07      	ldr	r2, [sp, #28]
 800f80a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f810:	4293      	cmp	r3, r2
 800f812:	d028      	beq.n	800f866 <_dtoa_r+0xae6>
 800f814:	4649      	mov	r1, r9
 800f816:	2300      	movs	r3, #0
 800f818:	220a      	movs	r2, #10
 800f81a:	4658      	mov	r0, fp
 800f81c:	f000 f9d6 	bl	800fbcc <__multadd>
 800f820:	42af      	cmp	r7, r5
 800f822:	4681      	mov	r9, r0
 800f824:	f04f 0300 	mov.w	r3, #0
 800f828:	f04f 020a 	mov.w	r2, #10
 800f82c:	4639      	mov	r1, r7
 800f82e:	4658      	mov	r0, fp
 800f830:	d107      	bne.n	800f842 <_dtoa_r+0xac2>
 800f832:	f000 f9cb 	bl	800fbcc <__multadd>
 800f836:	4607      	mov	r7, r0
 800f838:	4605      	mov	r5, r0
 800f83a:	9b07      	ldr	r3, [sp, #28]
 800f83c:	3301      	adds	r3, #1
 800f83e:	9307      	str	r3, [sp, #28]
 800f840:	e774      	b.n	800f72c <_dtoa_r+0x9ac>
 800f842:	f000 f9c3 	bl	800fbcc <__multadd>
 800f846:	4629      	mov	r1, r5
 800f848:	4607      	mov	r7, r0
 800f84a:	2300      	movs	r3, #0
 800f84c:	220a      	movs	r2, #10
 800f84e:	4658      	mov	r0, fp
 800f850:	f000 f9bc 	bl	800fbcc <__multadd>
 800f854:	4605      	mov	r5, r0
 800f856:	e7f0      	b.n	800f83a <_dtoa_r+0xaba>
 800f858:	9b00      	ldr	r3, [sp, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	bfcc      	ite	gt
 800f85e:	461e      	movgt	r6, r3
 800f860:	2601      	movle	r6, #1
 800f862:	4456      	add	r6, sl
 800f864:	2700      	movs	r7, #0
 800f866:	4649      	mov	r1, r9
 800f868:	2201      	movs	r2, #1
 800f86a:	4658      	mov	r0, fp
 800f86c:	f000 fb5a 	bl	800ff24 <__lshift>
 800f870:	4621      	mov	r1, r4
 800f872:	4681      	mov	r9, r0
 800f874:	f000 fbc2 	bl	800fffc <__mcmp>
 800f878:	2800      	cmp	r0, #0
 800f87a:	dcb0      	bgt.n	800f7de <_dtoa_r+0xa5e>
 800f87c:	d102      	bne.n	800f884 <_dtoa_r+0xb04>
 800f87e:	f018 0f01 	tst.w	r8, #1
 800f882:	d1ac      	bne.n	800f7de <_dtoa_r+0xa5e>
 800f884:	4633      	mov	r3, r6
 800f886:	461e      	mov	r6, r3
 800f888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f88c:	2a30      	cmp	r2, #48	@ 0x30
 800f88e:	d0fa      	beq.n	800f886 <_dtoa_r+0xb06>
 800f890:	e5c2      	b.n	800f418 <_dtoa_r+0x698>
 800f892:	459a      	cmp	sl, r3
 800f894:	d1a4      	bne.n	800f7e0 <_dtoa_r+0xa60>
 800f896:	9b04      	ldr	r3, [sp, #16]
 800f898:	3301      	adds	r3, #1
 800f89a:	9304      	str	r3, [sp, #16]
 800f89c:	2331      	movs	r3, #49	@ 0x31
 800f89e:	f88a 3000 	strb.w	r3, [sl]
 800f8a2:	e5b9      	b.n	800f418 <_dtoa_r+0x698>
 800f8a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f8a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f904 <_dtoa_r+0xb84>
 800f8aa:	b11b      	cbz	r3, 800f8b4 <_dtoa_r+0xb34>
 800f8ac:	f10a 0308 	add.w	r3, sl, #8
 800f8b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	4650      	mov	r0, sl
 800f8b6:	b019      	add	sp, #100	@ 0x64
 800f8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	f77f ae37 	ble.w	800f532 <_dtoa_r+0x7b2>
 800f8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8c8:	2001      	movs	r0, #1
 800f8ca:	e655      	b.n	800f578 <_dtoa_r+0x7f8>
 800f8cc:	9b00      	ldr	r3, [sp, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f77f aed6 	ble.w	800f680 <_dtoa_r+0x900>
 800f8d4:	4656      	mov	r6, sl
 800f8d6:	4621      	mov	r1, r4
 800f8d8:	4648      	mov	r0, r9
 800f8da:	f7ff f9c7 	bl	800ec6c <quorem>
 800f8de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f8e2:	f806 8b01 	strb.w	r8, [r6], #1
 800f8e6:	9b00      	ldr	r3, [sp, #0]
 800f8e8:	eba6 020a 	sub.w	r2, r6, sl
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	ddb3      	ble.n	800f858 <_dtoa_r+0xad8>
 800f8f0:	4649      	mov	r1, r9
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	220a      	movs	r2, #10
 800f8f6:	4658      	mov	r0, fp
 800f8f8:	f000 f968 	bl	800fbcc <__multadd>
 800f8fc:	4681      	mov	r9, r0
 800f8fe:	e7ea      	b.n	800f8d6 <_dtoa_r+0xb56>
 800f900:	08012805 	.word	0x08012805
 800f904:	08012789 	.word	0x08012789

0800f908 <_free_r>:
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	4605      	mov	r5, r0
 800f90c:	2900      	cmp	r1, #0
 800f90e:	d041      	beq.n	800f994 <_free_r+0x8c>
 800f910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f914:	1f0c      	subs	r4, r1, #4
 800f916:	2b00      	cmp	r3, #0
 800f918:	bfb8      	it	lt
 800f91a:	18e4      	addlt	r4, r4, r3
 800f91c:	f000 f8e8 	bl	800faf0 <__malloc_lock>
 800f920:	4a1d      	ldr	r2, [pc, #116]	@ (800f998 <_free_r+0x90>)
 800f922:	6813      	ldr	r3, [r2, #0]
 800f924:	b933      	cbnz	r3, 800f934 <_free_r+0x2c>
 800f926:	6063      	str	r3, [r4, #4]
 800f928:	6014      	str	r4, [r2, #0]
 800f92a:	4628      	mov	r0, r5
 800f92c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f930:	f000 b8e4 	b.w	800fafc <__malloc_unlock>
 800f934:	42a3      	cmp	r3, r4
 800f936:	d908      	bls.n	800f94a <_free_r+0x42>
 800f938:	6820      	ldr	r0, [r4, #0]
 800f93a:	1821      	adds	r1, r4, r0
 800f93c:	428b      	cmp	r3, r1
 800f93e:	bf01      	itttt	eq
 800f940:	6819      	ldreq	r1, [r3, #0]
 800f942:	685b      	ldreq	r3, [r3, #4]
 800f944:	1809      	addeq	r1, r1, r0
 800f946:	6021      	streq	r1, [r4, #0]
 800f948:	e7ed      	b.n	800f926 <_free_r+0x1e>
 800f94a:	461a      	mov	r2, r3
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	b10b      	cbz	r3, 800f954 <_free_r+0x4c>
 800f950:	42a3      	cmp	r3, r4
 800f952:	d9fa      	bls.n	800f94a <_free_r+0x42>
 800f954:	6811      	ldr	r1, [r2, #0]
 800f956:	1850      	adds	r0, r2, r1
 800f958:	42a0      	cmp	r0, r4
 800f95a:	d10b      	bne.n	800f974 <_free_r+0x6c>
 800f95c:	6820      	ldr	r0, [r4, #0]
 800f95e:	4401      	add	r1, r0
 800f960:	1850      	adds	r0, r2, r1
 800f962:	4283      	cmp	r3, r0
 800f964:	6011      	str	r1, [r2, #0]
 800f966:	d1e0      	bne.n	800f92a <_free_r+0x22>
 800f968:	6818      	ldr	r0, [r3, #0]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	6053      	str	r3, [r2, #4]
 800f96e:	4408      	add	r0, r1
 800f970:	6010      	str	r0, [r2, #0]
 800f972:	e7da      	b.n	800f92a <_free_r+0x22>
 800f974:	d902      	bls.n	800f97c <_free_r+0x74>
 800f976:	230c      	movs	r3, #12
 800f978:	602b      	str	r3, [r5, #0]
 800f97a:	e7d6      	b.n	800f92a <_free_r+0x22>
 800f97c:	6820      	ldr	r0, [r4, #0]
 800f97e:	1821      	adds	r1, r4, r0
 800f980:	428b      	cmp	r3, r1
 800f982:	bf04      	itt	eq
 800f984:	6819      	ldreq	r1, [r3, #0]
 800f986:	685b      	ldreq	r3, [r3, #4]
 800f988:	6063      	str	r3, [r4, #4]
 800f98a:	bf04      	itt	eq
 800f98c:	1809      	addeq	r1, r1, r0
 800f98e:	6021      	streq	r1, [r4, #0]
 800f990:	6054      	str	r4, [r2, #4]
 800f992:	e7ca      	b.n	800f92a <_free_r+0x22>
 800f994:	bd38      	pop	{r3, r4, r5, pc}
 800f996:	bf00      	nop
 800f998:	20002800 	.word	0x20002800

0800f99c <malloc>:
 800f99c:	4b02      	ldr	r3, [pc, #8]	@ (800f9a8 <malloc+0xc>)
 800f99e:	4601      	mov	r1, r0
 800f9a0:	6818      	ldr	r0, [r3, #0]
 800f9a2:	f000 b825 	b.w	800f9f0 <_malloc_r>
 800f9a6:	bf00      	nop
 800f9a8:	20000138 	.word	0x20000138

0800f9ac <sbrk_aligned>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	4e0f      	ldr	r6, [pc, #60]	@ (800f9ec <sbrk_aligned+0x40>)
 800f9b0:	460c      	mov	r4, r1
 800f9b2:	6831      	ldr	r1, [r6, #0]
 800f9b4:	4605      	mov	r5, r0
 800f9b6:	b911      	cbnz	r1, 800f9be <sbrk_aligned+0x12>
 800f9b8:	f001 f81c 	bl	80109f4 <_sbrk_r>
 800f9bc:	6030      	str	r0, [r6, #0]
 800f9be:	4621      	mov	r1, r4
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	f001 f817 	bl	80109f4 <_sbrk_r>
 800f9c6:	1c43      	adds	r3, r0, #1
 800f9c8:	d103      	bne.n	800f9d2 <sbrk_aligned+0x26>
 800f9ca:	f04f 34ff 	mov.w	r4, #4294967295
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	bd70      	pop	{r4, r5, r6, pc}
 800f9d2:	1cc4      	adds	r4, r0, #3
 800f9d4:	f024 0403 	bic.w	r4, r4, #3
 800f9d8:	42a0      	cmp	r0, r4
 800f9da:	d0f8      	beq.n	800f9ce <sbrk_aligned+0x22>
 800f9dc:	1a21      	subs	r1, r4, r0
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f001 f808 	bl	80109f4 <_sbrk_r>
 800f9e4:	3001      	adds	r0, #1
 800f9e6:	d1f2      	bne.n	800f9ce <sbrk_aligned+0x22>
 800f9e8:	e7ef      	b.n	800f9ca <sbrk_aligned+0x1e>
 800f9ea:	bf00      	nop
 800f9ec:	200027fc 	.word	0x200027fc

0800f9f0 <_malloc_r>:
 800f9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9f4:	1ccd      	adds	r5, r1, #3
 800f9f6:	f025 0503 	bic.w	r5, r5, #3
 800f9fa:	3508      	adds	r5, #8
 800f9fc:	2d0c      	cmp	r5, #12
 800f9fe:	bf38      	it	cc
 800fa00:	250c      	movcc	r5, #12
 800fa02:	2d00      	cmp	r5, #0
 800fa04:	4606      	mov	r6, r0
 800fa06:	db01      	blt.n	800fa0c <_malloc_r+0x1c>
 800fa08:	42a9      	cmp	r1, r5
 800fa0a:	d904      	bls.n	800fa16 <_malloc_r+0x26>
 800fa0c:	230c      	movs	r3, #12
 800fa0e:	6033      	str	r3, [r6, #0]
 800fa10:	2000      	movs	r0, #0
 800fa12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800faec <_malloc_r+0xfc>
 800fa1a:	f000 f869 	bl	800faf0 <__malloc_lock>
 800fa1e:	f8d8 3000 	ldr.w	r3, [r8]
 800fa22:	461c      	mov	r4, r3
 800fa24:	bb44      	cbnz	r4, 800fa78 <_malloc_r+0x88>
 800fa26:	4629      	mov	r1, r5
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f7ff ffbf 	bl	800f9ac <sbrk_aligned>
 800fa2e:	1c43      	adds	r3, r0, #1
 800fa30:	4604      	mov	r4, r0
 800fa32:	d158      	bne.n	800fae6 <_malloc_r+0xf6>
 800fa34:	f8d8 4000 	ldr.w	r4, [r8]
 800fa38:	4627      	mov	r7, r4
 800fa3a:	2f00      	cmp	r7, #0
 800fa3c:	d143      	bne.n	800fac6 <_malloc_r+0xd6>
 800fa3e:	2c00      	cmp	r4, #0
 800fa40:	d04b      	beq.n	800fada <_malloc_r+0xea>
 800fa42:	6823      	ldr	r3, [r4, #0]
 800fa44:	4639      	mov	r1, r7
 800fa46:	4630      	mov	r0, r6
 800fa48:	eb04 0903 	add.w	r9, r4, r3
 800fa4c:	f000 ffd2 	bl	80109f4 <_sbrk_r>
 800fa50:	4581      	cmp	r9, r0
 800fa52:	d142      	bne.n	800fada <_malloc_r+0xea>
 800fa54:	6821      	ldr	r1, [r4, #0]
 800fa56:	1a6d      	subs	r5, r5, r1
 800fa58:	4629      	mov	r1, r5
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f7ff ffa6 	bl	800f9ac <sbrk_aligned>
 800fa60:	3001      	adds	r0, #1
 800fa62:	d03a      	beq.n	800fada <_malloc_r+0xea>
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	442b      	add	r3, r5
 800fa68:	6023      	str	r3, [r4, #0]
 800fa6a:	f8d8 3000 	ldr.w	r3, [r8]
 800fa6e:	685a      	ldr	r2, [r3, #4]
 800fa70:	bb62      	cbnz	r2, 800facc <_malloc_r+0xdc>
 800fa72:	f8c8 7000 	str.w	r7, [r8]
 800fa76:	e00f      	b.n	800fa98 <_malloc_r+0xa8>
 800fa78:	6822      	ldr	r2, [r4, #0]
 800fa7a:	1b52      	subs	r2, r2, r5
 800fa7c:	d420      	bmi.n	800fac0 <_malloc_r+0xd0>
 800fa7e:	2a0b      	cmp	r2, #11
 800fa80:	d917      	bls.n	800fab2 <_malloc_r+0xc2>
 800fa82:	1961      	adds	r1, r4, r5
 800fa84:	42a3      	cmp	r3, r4
 800fa86:	6025      	str	r5, [r4, #0]
 800fa88:	bf18      	it	ne
 800fa8a:	6059      	strne	r1, [r3, #4]
 800fa8c:	6863      	ldr	r3, [r4, #4]
 800fa8e:	bf08      	it	eq
 800fa90:	f8c8 1000 	streq.w	r1, [r8]
 800fa94:	5162      	str	r2, [r4, r5]
 800fa96:	604b      	str	r3, [r1, #4]
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f000 f82f 	bl	800fafc <__malloc_unlock>
 800fa9e:	f104 000b 	add.w	r0, r4, #11
 800faa2:	1d23      	adds	r3, r4, #4
 800faa4:	f020 0007 	bic.w	r0, r0, #7
 800faa8:	1ac2      	subs	r2, r0, r3
 800faaa:	bf1c      	itt	ne
 800faac:	1a1b      	subne	r3, r3, r0
 800faae:	50a3      	strne	r3, [r4, r2]
 800fab0:	e7af      	b.n	800fa12 <_malloc_r+0x22>
 800fab2:	6862      	ldr	r2, [r4, #4]
 800fab4:	42a3      	cmp	r3, r4
 800fab6:	bf0c      	ite	eq
 800fab8:	f8c8 2000 	streq.w	r2, [r8]
 800fabc:	605a      	strne	r2, [r3, #4]
 800fabe:	e7eb      	b.n	800fa98 <_malloc_r+0xa8>
 800fac0:	4623      	mov	r3, r4
 800fac2:	6864      	ldr	r4, [r4, #4]
 800fac4:	e7ae      	b.n	800fa24 <_malloc_r+0x34>
 800fac6:	463c      	mov	r4, r7
 800fac8:	687f      	ldr	r7, [r7, #4]
 800faca:	e7b6      	b.n	800fa3a <_malloc_r+0x4a>
 800facc:	461a      	mov	r2, r3
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	42a3      	cmp	r3, r4
 800fad2:	d1fb      	bne.n	800facc <_malloc_r+0xdc>
 800fad4:	2300      	movs	r3, #0
 800fad6:	6053      	str	r3, [r2, #4]
 800fad8:	e7de      	b.n	800fa98 <_malloc_r+0xa8>
 800fada:	230c      	movs	r3, #12
 800fadc:	6033      	str	r3, [r6, #0]
 800fade:	4630      	mov	r0, r6
 800fae0:	f000 f80c 	bl	800fafc <__malloc_unlock>
 800fae4:	e794      	b.n	800fa10 <_malloc_r+0x20>
 800fae6:	6005      	str	r5, [r0, #0]
 800fae8:	e7d6      	b.n	800fa98 <_malloc_r+0xa8>
 800faea:	bf00      	nop
 800faec:	20002800 	.word	0x20002800

0800faf0 <__malloc_lock>:
 800faf0:	4801      	ldr	r0, [pc, #4]	@ (800faf8 <__malloc_lock+0x8>)
 800faf2:	f7ff b89a 	b.w	800ec2a <__retarget_lock_acquire_recursive>
 800faf6:	bf00      	nop
 800faf8:	200027f8 	.word	0x200027f8

0800fafc <__malloc_unlock>:
 800fafc:	4801      	ldr	r0, [pc, #4]	@ (800fb04 <__malloc_unlock+0x8>)
 800fafe:	f7ff b895 	b.w	800ec2c <__retarget_lock_release_recursive>
 800fb02:	bf00      	nop
 800fb04:	200027f8 	.word	0x200027f8

0800fb08 <_Balloc>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	69c6      	ldr	r6, [r0, #28]
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	460d      	mov	r5, r1
 800fb10:	b976      	cbnz	r6, 800fb30 <_Balloc+0x28>
 800fb12:	2010      	movs	r0, #16
 800fb14:	f7ff ff42 	bl	800f99c <malloc>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	61e0      	str	r0, [r4, #28]
 800fb1c:	b920      	cbnz	r0, 800fb28 <_Balloc+0x20>
 800fb1e:	4b18      	ldr	r3, [pc, #96]	@ (800fb80 <_Balloc+0x78>)
 800fb20:	4818      	ldr	r0, [pc, #96]	@ (800fb84 <_Balloc+0x7c>)
 800fb22:	216b      	movs	r1, #107	@ 0x6b
 800fb24:	f000 ff76 	bl	8010a14 <__assert_func>
 800fb28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb2c:	6006      	str	r6, [r0, #0]
 800fb2e:	60c6      	str	r6, [r0, #12]
 800fb30:	69e6      	ldr	r6, [r4, #28]
 800fb32:	68f3      	ldr	r3, [r6, #12]
 800fb34:	b183      	cbz	r3, 800fb58 <_Balloc+0x50>
 800fb36:	69e3      	ldr	r3, [r4, #28]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb3e:	b9b8      	cbnz	r0, 800fb70 <_Balloc+0x68>
 800fb40:	2101      	movs	r1, #1
 800fb42:	fa01 f605 	lsl.w	r6, r1, r5
 800fb46:	1d72      	adds	r2, r6, #5
 800fb48:	0092      	lsls	r2, r2, #2
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f000 ff80 	bl	8010a50 <_calloc_r>
 800fb50:	b160      	cbz	r0, 800fb6c <_Balloc+0x64>
 800fb52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb56:	e00e      	b.n	800fb76 <_Balloc+0x6e>
 800fb58:	2221      	movs	r2, #33	@ 0x21
 800fb5a:	2104      	movs	r1, #4
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f000 ff77 	bl	8010a50 <_calloc_r>
 800fb62:	69e3      	ldr	r3, [r4, #28]
 800fb64:	60f0      	str	r0, [r6, #12]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1e4      	bne.n	800fb36 <_Balloc+0x2e>
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	bd70      	pop	{r4, r5, r6, pc}
 800fb70:	6802      	ldr	r2, [r0, #0]
 800fb72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb76:	2300      	movs	r3, #0
 800fb78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb7c:	e7f7      	b.n	800fb6e <_Balloc+0x66>
 800fb7e:	bf00      	nop
 800fb80:	08012796 	.word	0x08012796
 800fb84:	08012816 	.word	0x08012816

0800fb88 <_Bfree>:
 800fb88:	b570      	push	{r4, r5, r6, lr}
 800fb8a:	69c6      	ldr	r6, [r0, #28]
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	460c      	mov	r4, r1
 800fb90:	b976      	cbnz	r6, 800fbb0 <_Bfree+0x28>
 800fb92:	2010      	movs	r0, #16
 800fb94:	f7ff ff02 	bl	800f99c <malloc>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	61e8      	str	r0, [r5, #28]
 800fb9c:	b920      	cbnz	r0, 800fba8 <_Bfree+0x20>
 800fb9e:	4b09      	ldr	r3, [pc, #36]	@ (800fbc4 <_Bfree+0x3c>)
 800fba0:	4809      	ldr	r0, [pc, #36]	@ (800fbc8 <_Bfree+0x40>)
 800fba2:	218f      	movs	r1, #143	@ 0x8f
 800fba4:	f000 ff36 	bl	8010a14 <__assert_func>
 800fba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbac:	6006      	str	r6, [r0, #0]
 800fbae:	60c6      	str	r6, [r0, #12]
 800fbb0:	b13c      	cbz	r4, 800fbc2 <_Bfree+0x3a>
 800fbb2:	69eb      	ldr	r3, [r5, #28]
 800fbb4:	6862      	ldr	r2, [r4, #4]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbbc:	6021      	str	r1, [r4, #0]
 800fbbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fbc2:	bd70      	pop	{r4, r5, r6, pc}
 800fbc4:	08012796 	.word	0x08012796
 800fbc8:	08012816 	.word	0x08012816

0800fbcc <__multadd>:
 800fbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd0:	690d      	ldr	r5, [r1, #16]
 800fbd2:	4607      	mov	r7, r0
 800fbd4:	460c      	mov	r4, r1
 800fbd6:	461e      	mov	r6, r3
 800fbd8:	f101 0c14 	add.w	ip, r1, #20
 800fbdc:	2000      	movs	r0, #0
 800fbde:	f8dc 3000 	ldr.w	r3, [ip]
 800fbe2:	b299      	uxth	r1, r3
 800fbe4:	fb02 6101 	mla	r1, r2, r1, r6
 800fbe8:	0c1e      	lsrs	r6, r3, #16
 800fbea:	0c0b      	lsrs	r3, r1, #16
 800fbec:	fb02 3306 	mla	r3, r2, r6, r3
 800fbf0:	b289      	uxth	r1, r1
 800fbf2:	3001      	adds	r0, #1
 800fbf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbf8:	4285      	cmp	r5, r0
 800fbfa:	f84c 1b04 	str.w	r1, [ip], #4
 800fbfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc02:	dcec      	bgt.n	800fbde <__multadd+0x12>
 800fc04:	b30e      	cbz	r6, 800fc4a <__multadd+0x7e>
 800fc06:	68a3      	ldr	r3, [r4, #8]
 800fc08:	42ab      	cmp	r3, r5
 800fc0a:	dc19      	bgt.n	800fc40 <__multadd+0x74>
 800fc0c:	6861      	ldr	r1, [r4, #4]
 800fc0e:	4638      	mov	r0, r7
 800fc10:	3101      	adds	r1, #1
 800fc12:	f7ff ff79 	bl	800fb08 <_Balloc>
 800fc16:	4680      	mov	r8, r0
 800fc18:	b928      	cbnz	r0, 800fc26 <__multadd+0x5a>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	4b0c      	ldr	r3, [pc, #48]	@ (800fc50 <__multadd+0x84>)
 800fc1e:	480d      	ldr	r0, [pc, #52]	@ (800fc54 <__multadd+0x88>)
 800fc20:	21ba      	movs	r1, #186	@ 0xba
 800fc22:	f000 fef7 	bl	8010a14 <__assert_func>
 800fc26:	6922      	ldr	r2, [r4, #16]
 800fc28:	3202      	adds	r2, #2
 800fc2a:	f104 010c 	add.w	r1, r4, #12
 800fc2e:	0092      	lsls	r2, r2, #2
 800fc30:	300c      	adds	r0, #12
 800fc32:	f7fe fffc 	bl	800ec2e <memcpy>
 800fc36:	4621      	mov	r1, r4
 800fc38:	4638      	mov	r0, r7
 800fc3a:	f7ff ffa5 	bl	800fb88 <_Bfree>
 800fc3e:	4644      	mov	r4, r8
 800fc40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc44:	3501      	adds	r5, #1
 800fc46:	615e      	str	r6, [r3, #20]
 800fc48:	6125      	str	r5, [r4, #16]
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc50:	08012805 	.word	0x08012805
 800fc54:	08012816 	.word	0x08012816

0800fc58 <__hi0bits>:
 800fc58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	bf36      	itet	cc
 800fc60:	0403      	lslcc	r3, r0, #16
 800fc62:	2000      	movcs	r0, #0
 800fc64:	2010      	movcc	r0, #16
 800fc66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc6a:	bf3c      	itt	cc
 800fc6c:	021b      	lslcc	r3, r3, #8
 800fc6e:	3008      	addcc	r0, #8
 800fc70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc74:	bf3c      	itt	cc
 800fc76:	011b      	lslcc	r3, r3, #4
 800fc78:	3004      	addcc	r0, #4
 800fc7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc7e:	bf3c      	itt	cc
 800fc80:	009b      	lslcc	r3, r3, #2
 800fc82:	3002      	addcc	r0, #2
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	db05      	blt.n	800fc94 <__hi0bits+0x3c>
 800fc88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fc8c:	f100 0001 	add.w	r0, r0, #1
 800fc90:	bf08      	it	eq
 800fc92:	2020      	moveq	r0, #32
 800fc94:	4770      	bx	lr

0800fc96 <__lo0bits>:
 800fc96:	6803      	ldr	r3, [r0, #0]
 800fc98:	4602      	mov	r2, r0
 800fc9a:	f013 0007 	ands.w	r0, r3, #7
 800fc9e:	d00b      	beq.n	800fcb8 <__lo0bits+0x22>
 800fca0:	07d9      	lsls	r1, r3, #31
 800fca2:	d421      	bmi.n	800fce8 <__lo0bits+0x52>
 800fca4:	0798      	lsls	r0, r3, #30
 800fca6:	bf49      	itett	mi
 800fca8:	085b      	lsrmi	r3, r3, #1
 800fcaa:	089b      	lsrpl	r3, r3, #2
 800fcac:	2001      	movmi	r0, #1
 800fcae:	6013      	strmi	r3, [r2, #0]
 800fcb0:	bf5c      	itt	pl
 800fcb2:	6013      	strpl	r3, [r2, #0]
 800fcb4:	2002      	movpl	r0, #2
 800fcb6:	4770      	bx	lr
 800fcb8:	b299      	uxth	r1, r3
 800fcba:	b909      	cbnz	r1, 800fcc0 <__lo0bits+0x2a>
 800fcbc:	0c1b      	lsrs	r3, r3, #16
 800fcbe:	2010      	movs	r0, #16
 800fcc0:	b2d9      	uxtb	r1, r3
 800fcc2:	b909      	cbnz	r1, 800fcc8 <__lo0bits+0x32>
 800fcc4:	3008      	adds	r0, #8
 800fcc6:	0a1b      	lsrs	r3, r3, #8
 800fcc8:	0719      	lsls	r1, r3, #28
 800fcca:	bf04      	itt	eq
 800fccc:	091b      	lsreq	r3, r3, #4
 800fcce:	3004      	addeq	r0, #4
 800fcd0:	0799      	lsls	r1, r3, #30
 800fcd2:	bf04      	itt	eq
 800fcd4:	089b      	lsreq	r3, r3, #2
 800fcd6:	3002      	addeq	r0, #2
 800fcd8:	07d9      	lsls	r1, r3, #31
 800fcda:	d403      	bmi.n	800fce4 <__lo0bits+0x4e>
 800fcdc:	085b      	lsrs	r3, r3, #1
 800fcde:	f100 0001 	add.w	r0, r0, #1
 800fce2:	d003      	beq.n	800fcec <__lo0bits+0x56>
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	4770      	bx	lr
 800fce8:	2000      	movs	r0, #0
 800fcea:	4770      	bx	lr
 800fcec:	2020      	movs	r0, #32
 800fcee:	4770      	bx	lr

0800fcf0 <__i2b>:
 800fcf0:	b510      	push	{r4, lr}
 800fcf2:	460c      	mov	r4, r1
 800fcf4:	2101      	movs	r1, #1
 800fcf6:	f7ff ff07 	bl	800fb08 <_Balloc>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	b928      	cbnz	r0, 800fd0a <__i2b+0x1a>
 800fcfe:	4b05      	ldr	r3, [pc, #20]	@ (800fd14 <__i2b+0x24>)
 800fd00:	4805      	ldr	r0, [pc, #20]	@ (800fd18 <__i2b+0x28>)
 800fd02:	f240 1145 	movw	r1, #325	@ 0x145
 800fd06:	f000 fe85 	bl	8010a14 <__assert_func>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	6144      	str	r4, [r0, #20]
 800fd0e:	6103      	str	r3, [r0, #16]
 800fd10:	bd10      	pop	{r4, pc}
 800fd12:	bf00      	nop
 800fd14:	08012805 	.word	0x08012805
 800fd18:	08012816 	.word	0x08012816

0800fd1c <__multiply>:
 800fd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd20:	4614      	mov	r4, r2
 800fd22:	690a      	ldr	r2, [r1, #16]
 800fd24:	6923      	ldr	r3, [r4, #16]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	bfa8      	it	ge
 800fd2a:	4623      	movge	r3, r4
 800fd2c:	460f      	mov	r7, r1
 800fd2e:	bfa4      	itt	ge
 800fd30:	460c      	movge	r4, r1
 800fd32:	461f      	movge	r7, r3
 800fd34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fd38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fd3c:	68a3      	ldr	r3, [r4, #8]
 800fd3e:	6861      	ldr	r1, [r4, #4]
 800fd40:	eb0a 0609 	add.w	r6, sl, r9
 800fd44:	42b3      	cmp	r3, r6
 800fd46:	b085      	sub	sp, #20
 800fd48:	bfb8      	it	lt
 800fd4a:	3101      	addlt	r1, #1
 800fd4c:	f7ff fedc 	bl	800fb08 <_Balloc>
 800fd50:	b930      	cbnz	r0, 800fd60 <__multiply+0x44>
 800fd52:	4602      	mov	r2, r0
 800fd54:	4b44      	ldr	r3, [pc, #272]	@ (800fe68 <__multiply+0x14c>)
 800fd56:	4845      	ldr	r0, [pc, #276]	@ (800fe6c <__multiply+0x150>)
 800fd58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fd5c:	f000 fe5a 	bl	8010a14 <__assert_func>
 800fd60:	f100 0514 	add.w	r5, r0, #20
 800fd64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd68:	462b      	mov	r3, r5
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	4543      	cmp	r3, r8
 800fd6e:	d321      	bcc.n	800fdb4 <__multiply+0x98>
 800fd70:	f107 0114 	add.w	r1, r7, #20
 800fd74:	f104 0214 	add.w	r2, r4, #20
 800fd78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fd7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fd80:	9302      	str	r3, [sp, #8]
 800fd82:	1b13      	subs	r3, r2, r4
 800fd84:	3b15      	subs	r3, #21
 800fd86:	f023 0303 	bic.w	r3, r3, #3
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	f104 0715 	add.w	r7, r4, #21
 800fd90:	42ba      	cmp	r2, r7
 800fd92:	bf38      	it	cc
 800fd94:	2304      	movcc	r3, #4
 800fd96:	9301      	str	r3, [sp, #4]
 800fd98:	9b02      	ldr	r3, [sp, #8]
 800fd9a:	9103      	str	r1, [sp, #12]
 800fd9c:	428b      	cmp	r3, r1
 800fd9e:	d80c      	bhi.n	800fdba <__multiply+0x9e>
 800fda0:	2e00      	cmp	r6, #0
 800fda2:	dd03      	ble.n	800fdac <__multiply+0x90>
 800fda4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d05b      	beq.n	800fe64 <__multiply+0x148>
 800fdac:	6106      	str	r6, [r0, #16]
 800fdae:	b005      	add	sp, #20
 800fdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb4:	f843 2b04 	str.w	r2, [r3], #4
 800fdb8:	e7d8      	b.n	800fd6c <__multiply+0x50>
 800fdba:	f8b1 a000 	ldrh.w	sl, [r1]
 800fdbe:	f1ba 0f00 	cmp.w	sl, #0
 800fdc2:	d024      	beq.n	800fe0e <__multiply+0xf2>
 800fdc4:	f104 0e14 	add.w	lr, r4, #20
 800fdc8:	46a9      	mov	r9, r5
 800fdca:	f04f 0c00 	mov.w	ip, #0
 800fdce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fdd2:	f8d9 3000 	ldr.w	r3, [r9]
 800fdd6:	fa1f fb87 	uxth.w	fp, r7
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	fb0a 330b 	mla	r3, sl, fp, r3
 800fde0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fde4:	f8d9 7000 	ldr.w	r7, [r9]
 800fde8:	4463      	add	r3, ip
 800fdea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fdee:	fb0a c70b 	mla	r7, sl, fp, ip
 800fdf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fdfc:	4572      	cmp	r2, lr
 800fdfe:	f849 3b04 	str.w	r3, [r9], #4
 800fe02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe06:	d8e2      	bhi.n	800fdce <__multiply+0xb2>
 800fe08:	9b01      	ldr	r3, [sp, #4]
 800fe0a:	f845 c003 	str.w	ip, [r5, r3]
 800fe0e:	9b03      	ldr	r3, [sp, #12]
 800fe10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe14:	3104      	adds	r1, #4
 800fe16:	f1b9 0f00 	cmp.w	r9, #0
 800fe1a:	d021      	beq.n	800fe60 <__multiply+0x144>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	f104 0c14 	add.w	ip, r4, #20
 800fe22:	46ae      	mov	lr, r5
 800fe24:	f04f 0a00 	mov.w	sl, #0
 800fe28:	f8bc b000 	ldrh.w	fp, [ip]
 800fe2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fe30:	fb09 770b 	mla	r7, r9, fp, r7
 800fe34:	4457      	add	r7, sl
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe3c:	f84e 3b04 	str.w	r3, [lr], #4
 800fe40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe48:	f8be 3000 	ldrh.w	r3, [lr]
 800fe4c:	fb09 330a 	mla	r3, r9, sl, r3
 800fe50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fe54:	4562      	cmp	r2, ip
 800fe56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe5a:	d8e5      	bhi.n	800fe28 <__multiply+0x10c>
 800fe5c:	9f01      	ldr	r7, [sp, #4]
 800fe5e:	51eb      	str	r3, [r5, r7]
 800fe60:	3504      	adds	r5, #4
 800fe62:	e799      	b.n	800fd98 <__multiply+0x7c>
 800fe64:	3e01      	subs	r6, #1
 800fe66:	e79b      	b.n	800fda0 <__multiply+0x84>
 800fe68:	08012805 	.word	0x08012805
 800fe6c:	08012816 	.word	0x08012816

0800fe70 <__pow5mult>:
 800fe70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe74:	4615      	mov	r5, r2
 800fe76:	f012 0203 	ands.w	r2, r2, #3
 800fe7a:	4607      	mov	r7, r0
 800fe7c:	460e      	mov	r6, r1
 800fe7e:	d007      	beq.n	800fe90 <__pow5mult+0x20>
 800fe80:	4c25      	ldr	r4, [pc, #148]	@ (800ff18 <__pow5mult+0xa8>)
 800fe82:	3a01      	subs	r2, #1
 800fe84:	2300      	movs	r3, #0
 800fe86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe8a:	f7ff fe9f 	bl	800fbcc <__multadd>
 800fe8e:	4606      	mov	r6, r0
 800fe90:	10ad      	asrs	r5, r5, #2
 800fe92:	d03d      	beq.n	800ff10 <__pow5mult+0xa0>
 800fe94:	69fc      	ldr	r4, [r7, #28]
 800fe96:	b97c      	cbnz	r4, 800feb8 <__pow5mult+0x48>
 800fe98:	2010      	movs	r0, #16
 800fe9a:	f7ff fd7f 	bl	800f99c <malloc>
 800fe9e:	4602      	mov	r2, r0
 800fea0:	61f8      	str	r0, [r7, #28]
 800fea2:	b928      	cbnz	r0, 800feb0 <__pow5mult+0x40>
 800fea4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff1c <__pow5mult+0xac>)
 800fea6:	481e      	ldr	r0, [pc, #120]	@ (800ff20 <__pow5mult+0xb0>)
 800fea8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800feac:	f000 fdb2 	bl	8010a14 <__assert_func>
 800feb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800feb4:	6004      	str	r4, [r0, #0]
 800feb6:	60c4      	str	r4, [r0, #12]
 800feb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800febc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fec0:	b94c      	cbnz	r4, 800fed6 <__pow5mult+0x66>
 800fec2:	f240 2171 	movw	r1, #625	@ 0x271
 800fec6:	4638      	mov	r0, r7
 800fec8:	f7ff ff12 	bl	800fcf0 <__i2b>
 800fecc:	2300      	movs	r3, #0
 800fece:	f8c8 0008 	str.w	r0, [r8, #8]
 800fed2:	4604      	mov	r4, r0
 800fed4:	6003      	str	r3, [r0, #0]
 800fed6:	f04f 0900 	mov.w	r9, #0
 800feda:	07eb      	lsls	r3, r5, #31
 800fedc:	d50a      	bpl.n	800fef4 <__pow5mult+0x84>
 800fede:	4631      	mov	r1, r6
 800fee0:	4622      	mov	r2, r4
 800fee2:	4638      	mov	r0, r7
 800fee4:	f7ff ff1a 	bl	800fd1c <__multiply>
 800fee8:	4631      	mov	r1, r6
 800feea:	4680      	mov	r8, r0
 800feec:	4638      	mov	r0, r7
 800feee:	f7ff fe4b 	bl	800fb88 <_Bfree>
 800fef2:	4646      	mov	r6, r8
 800fef4:	106d      	asrs	r5, r5, #1
 800fef6:	d00b      	beq.n	800ff10 <__pow5mult+0xa0>
 800fef8:	6820      	ldr	r0, [r4, #0]
 800fefa:	b938      	cbnz	r0, 800ff0c <__pow5mult+0x9c>
 800fefc:	4622      	mov	r2, r4
 800fefe:	4621      	mov	r1, r4
 800ff00:	4638      	mov	r0, r7
 800ff02:	f7ff ff0b 	bl	800fd1c <__multiply>
 800ff06:	6020      	str	r0, [r4, #0]
 800ff08:	f8c0 9000 	str.w	r9, [r0]
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	e7e4      	b.n	800feda <__pow5mult+0x6a>
 800ff10:	4630      	mov	r0, r6
 800ff12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff16:	bf00      	nop
 800ff18:	08012870 	.word	0x08012870
 800ff1c:	08012796 	.word	0x08012796
 800ff20:	08012816 	.word	0x08012816

0800ff24 <__lshift>:
 800ff24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff28:	460c      	mov	r4, r1
 800ff2a:	6849      	ldr	r1, [r1, #4]
 800ff2c:	6923      	ldr	r3, [r4, #16]
 800ff2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff32:	68a3      	ldr	r3, [r4, #8]
 800ff34:	4607      	mov	r7, r0
 800ff36:	4691      	mov	r9, r2
 800ff38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff3c:	f108 0601 	add.w	r6, r8, #1
 800ff40:	42b3      	cmp	r3, r6
 800ff42:	db0b      	blt.n	800ff5c <__lshift+0x38>
 800ff44:	4638      	mov	r0, r7
 800ff46:	f7ff fddf 	bl	800fb08 <_Balloc>
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	b948      	cbnz	r0, 800ff62 <__lshift+0x3e>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	4b28      	ldr	r3, [pc, #160]	@ (800fff4 <__lshift+0xd0>)
 800ff52:	4829      	ldr	r0, [pc, #164]	@ (800fff8 <__lshift+0xd4>)
 800ff54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ff58:	f000 fd5c 	bl	8010a14 <__assert_func>
 800ff5c:	3101      	adds	r1, #1
 800ff5e:	005b      	lsls	r3, r3, #1
 800ff60:	e7ee      	b.n	800ff40 <__lshift+0x1c>
 800ff62:	2300      	movs	r3, #0
 800ff64:	f100 0114 	add.w	r1, r0, #20
 800ff68:	f100 0210 	add.w	r2, r0, #16
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	4553      	cmp	r3, sl
 800ff70:	db33      	blt.n	800ffda <__lshift+0xb6>
 800ff72:	6920      	ldr	r0, [r4, #16]
 800ff74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff78:	f104 0314 	add.w	r3, r4, #20
 800ff7c:	f019 091f 	ands.w	r9, r9, #31
 800ff80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff88:	d02b      	beq.n	800ffe2 <__lshift+0xbe>
 800ff8a:	f1c9 0e20 	rsb	lr, r9, #32
 800ff8e:	468a      	mov	sl, r1
 800ff90:	2200      	movs	r2, #0
 800ff92:	6818      	ldr	r0, [r3, #0]
 800ff94:	fa00 f009 	lsl.w	r0, r0, r9
 800ff98:	4310      	orrs	r0, r2
 800ff9a:	f84a 0b04 	str.w	r0, [sl], #4
 800ff9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffa2:	459c      	cmp	ip, r3
 800ffa4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffa8:	d8f3      	bhi.n	800ff92 <__lshift+0x6e>
 800ffaa:	ebac 0304 	sub.w	r3, ip, r4
 800ffae:	3b15      	subs	r3, #21
 800ffb0:	f023 0303 	bic.w	r3, r3, #3
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	f104 0015 	add.w	r0, r4, #21
 800ffba:	4584      	cmp	ip, r0
 800ffbc:	bf38      	it	cc
 800ffbe:	2304      	movcc	r3, #4
 800ffc0:	50ca      	str	r2, [r1, r3]
 800ffc2:	b10a      	cbz	r2, 800ffc8 <__lshift+0xa4>
 800ffc4:	f108 0602 	add.w	r6, r8, #2
 800ffc8:	3e01      	subs	r6, #1
 800ffca:	4638      	mov	r0, r7
 800ffcc:	612e      	str	r6, [r5, #16]
 800ffce:	4621      	mov	r1, r4
 800ffd0:	f7ff fdda 	bl	800fb88 <_Bfree>
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffda:	f842 0f04 	str.w	r0, [r2, #4]!
 800ffde:	3301      	adds	r3, #1
 800ffe0:	e7c5      	b.n	800ff6e <__lshift+0x4a>
 800ffe2:	3904      	subs	r1, #4
 800ffe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ffec:	459c      	cmp	ip, r3
 800ffee:	d8f9      	bhi.n	800ffe4 <__lshift+0xc0>
 800fff0:	e7ea      	b.n	800ffc8 <__lshift+0xa4>
 800fff2:	bf00      	nop
 800fff4:	08012805 	.word	0x08012805
 800fff8:	08012816 	.word	0x08012816

0800fffc <__mcmp>:
 800fffc:	690a      	ldr	r2, [r1, #16]
 800fffe:	4603      	mov	r3, r0
 8010000:	6900      	ldr	r0, [r0, #16]
 8010002:	1a80      	subs	r0, r0, r2
 8010004:	b530      	push	{r4, r5, lr}
 8010006:	d10e      	bne.n	8010026 <__mcmp+0x2a>
 8010008:	3314      	adds	r3, #20
 801000a:	3114      	adds	r1, #20
 801000c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010010:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010014:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010018:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801001c:	4295      	cmp	r5, r2
 801001e:	d003      	beq.n	8010028 <__mcmp+0x2c>
 8010020:	d205      	bcs.n	801002e <__mcmp+0x32>
 8010022:	f04f 30ff 	mov.w	r0, #4294967295
 8010026:	bd30      	pop	{r4, r5, pc}
 8010028:	42a3      	cmp	r3, r4
 801002a:	d3f3      	bcc.n	8010014 <__mcmp+0x18>
 801002c:	e7fb      	b.n	8010026 <__mcmp+0x2a>
 801002e:	2001      	movs	r0, #1
 8010030:	e7f9      	b.n	8010026 <__mcmp+0x2a>
	...

08010034 <__mdiff>:
 8010034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010038:	4689      	mov	r9, r1
 801003a:	4606      	mov	r6, r0
 801003c:	4611      	mov	r1, r2
 801003e:	4648      	mov	r0, r9
 8010040:	4614      	mov	r4, r2
 8010042:	f7ff ffdb 	bl	800fffc <__mcmp>
 8010046:	1e05      	subs	r5, r0, #0
 8010048:	d112      	bne.n	8010070 <__mdiff+0x3c>
 801004a:	4629      	mov	r1, r5
 801004c:	4630      	mov	r0, r6
 801004e:	f7ff fd5b 	bl	800fb08 <_Balloc>
 8010052:	4602      	mov	r2, r0
 8010054:	b928      	cbnz	r0, 8010062 <__mdiff+0x2e>
 8010056:	4b3f      	ldr	r3, [pc, #252]	@ (8010154 <__mdiff+0x120>)
 8010058:	f240 2137 	movw	r1, #567	@ 0x237
 801005c:	483e      	ldr	r0, [pc, #248]	@ (8010158 <__mdiff+0x124>)
 801005e:	f000 fcd9 	bl	8010a14 <__assert_func>
 8010062:	2301      	movs	r3, #1
 8010064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010068:	4610      	mov	r0, r2
 801006a:	b003      	add	sp, #12
 801006c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010070:	bfbc      	itt	lt
 8010072:	464b      	movlt	r3, r9
 8010074:	46a1      	movlt	r9, r4
 8010076:	4630      	mov	r0, r6
 8010078:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801007c:	bfba      	itte	lt
 801007e:	461c      	movlt	r4, r3
 8010080:	2501      	movlt	r5, #1
 8010082:	2500      	movge	r5, #0
 8010084:	f7ff fd40 	bl	800fb08 <_Balloc>
 8010088:	4602      	mov	r2, r0
 801008a:	b918      	cbnz	r0, 8010094 <__mdiff+0x60>
 801008c:	4b31      	ldr	r3, [pc, #196]	@ (8010154 <__mdiff+0x120>)
 801008e:	f240 2145 	movw	r1, #581	@ 0x245
 8010092:	e7e3      	b.n	801005c <__mdiff+0x28>
 8010094:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010098:	6926      	ldr	r6, [r4, #16]
 801009a:	60c5      	str	r5, [r0, #12]
 801009c:	f109 0310 	add.w	r3, r9, #16
 80100a0:	f109 0514 	add.w	r5, r9, #20
 80100a4:	f104 0e14 	add.w	lr, r4, #20
 80100a8:	f100 0b14 	add.w	fp, r0, #20
 80100ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80100b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80100b4:	9301      	str	r3, [sp, #4]
 80100b6:	46d9      	mov	r9, fp
 80100b8:	f04f 0c00 	mov.w	ip, #0
 80100bc:	9b01      	ldr	r3, [sp, #4]
 80100be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80100c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80100c6:	9301      	str	r3, [sp, #4]
 80100c8:	fa1f f38a 	uxth.w	r3, sl
 80100cc:	4619      	mov	r1, r3
 80100ce:	b283      	uxth	r3, r0
 80100d0:	1acb      	subs	r3, r1, r3
 80100d2:	0c00      	lsrs	r0, r0, #16
 80100d4:	4463      	add	r3, ip
 80100d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80100da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80100de:	b29b      	uxth	r3, r3
 80100e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80100e4:	4576      	cmp	r6, lr
 80100e6:	f849 3b04 	str.w	r3, [r9], #4
 80100ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80100ee:	d8e5      	bhi.n	80100bc <__mdiff+0x88>
 80100f0:	1b33      	subs	r3, r6, r4
 80100f2:	3b15      	subs	r3, #21
 80100f4:	f023 0303 	bic.w	r3, r3, #3
 80100f8:	3415      	adds	r4, #21
 80100fa:	3304      	adds	r3, #4
 80100fc:	42a6      	cmp	r6, r4
 80100fe:	bf38      	it	cc
 8010100:	2304      	movcc	r3, #4
 8010102:	441d      	add	r5, r3
 8010104:	445b      	add	r3, fp
 8010106:	461e      	mov	r6, r3
 8010108:	462c      	mov	r4, r5
 801010a:	4544      	cmp	r4, r8
 801010c:	d30e      	bcc.n	801012c <__mdiff+0xf8>
 801010e:	f108 0103 	add.w	r1, r8, #3
 8010112:	1b49      	subs	r1, r1, r5
 8010114:	f021 0103 	bic.w	r1, r1, #3
 8010118:	3d03      	subs	r5, #3
 801011a:	45a8      	cmp	r8, r5
 801011c:	bf38      	it	cc
 801011e:	2100      	movcc	r1, #0
 8010120:	440b      	add	r3, r1
 8010122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010126:	b191      	cbz	r1, 801014e <__mdiff+0x11a>
 8010128:	6117      	str	r7, [r2, #16]
 801012a:	e79d      	b.n	8010068 <__mdiff+0x34>
 801012c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010130:	46e6      	mov	lr, ip
 8010132:	0c08      	lsrs	r0, r1, #16
 8010134:	fa1c fc81 	uxtah	ip, ip, r1
 8010138:	4471      	add	r1, lr
 801013a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801013e:	b289      	uxth	r1, r1
 8010140:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010144:	f846 1b04 	str.w	r1, [r6], #4
 8010148:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801014c:	e7dd      	b.n	801010a <__mdiff+0xd6>
 801014e:	3f01      	subs	r7, #1
 8010150:	e7e7      	b.n	8010122 <__mdiff+0xee>
 8010152:	bf00      	nop
 8010154:	08012805 	.word	0x08012805
 8010158:	08012816 	.word	0x08012816

0801015c <__d2b>:
 801015c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010160:	460f      	mov	r7, r1
 8010162:	2101      	movs	r1, #1
 8010164:	ec59 8b10 	vmov	r8, r9, d0
 8010168:	4616      	mov	r6, r2
 801016a:	f7ff fccd 	bl	800fb08 <_Balloc>
 801016e:	4604      	mov	r4, r0
 8010170:	b930      	cbnz	r0, 8010180 <__d2b+0x24>
 8010172:	4602      	mov	r2, r0
 8010174:	4b23      	ldr	r3, [pc, #140]	@ (8010204 <__d2b+0xa8>)
 8010176:	4824      	ldr	r0, [pc, #144]	@ (8010208 <__d2b+0xac>)
 8010178:	f240 310f 	movw	r1, #783	@ 0x30f
 801017c:	f000 fc4a 	bl	8010a14 <__assert_func>
 8010180:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010184:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010188:	b10d      	cbz	r5, 801018e <__d2b+0x32>
 801018a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801018e:	9301      	str	r3, [sp, #4]
 8010190:	f1b8 0300 	subs.w	r3, r8, #0
 8010194:	d023      	beq.n	80101de <__d2b+0x82>
 8010196:	4668      	mov	r0, sp
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	f7ff fd7c 	bl	800fc96 <__lo0bits>
 801019e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80101a2:	b1d0      	cbz	r0, 80101da <__d2b+0x7e>
 80101a4:	f1c0 0320 	rsb	r3, r0, #32
 80101a8:	fa02 f303 	lsl.w	r3, r2, r3
 80101ac:	430b      	orrs	r3, r1
 80101ae:	40c2      	lsrs	r2, r0
 80101b0:	6163      	str	r3, [r4, #20]
 80101b2:	9201      	str	r2, [sp, #4]
 80101b4:	9b01      	ldr	r3, [sp, #4]
 80101b6:	61a3      	str	r3, [r4, #24]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	bf0c      	ite	eq
 80101bc:	2201      	moveq	r2, #1
 80101be:	2202      	movne	r2, #2
 80101c0:	6122      	str	r2, [r4, #16]
 80101c2:	b1a5      	cbz	r5, 80101ee <__d2b+0x92>
 80101c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80101c8:	4405      	add	r5, r0
 80101ca:	603d      	str	r5, [r7, #0]
 80101cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80101d0:	6030      	str	r0, [r6, #0]
 80101d2:	4620      	mov	r0, r4
 80101d4:	b003      	add	sp, #12
 80101d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101da:	6161      	str	r1, [r4, #20]
 80101dc:	e7ea      	b.n	80101b4 <__d2b+0x58>
 80101de:	a801      	add	r0, sp, #4
 80101e0:	f7ff fd59 	bl	800fc96 <__lo0bits>
 80101e4:	9b01      	ldr	r3, [sp, #4]
 80101e6:	6163      	str	r3, [r4, #20]
 80101e8:	3020      	adds	r0, #32
 80101ea:	2201      	movs	r2, #1
 80101ec:	e7e8      	b.n	80101c0 <__d2b+0x64>
 80101ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80101f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80101f6:	6038      	str	r0, [r7, #0]
 80101f8:	6918      	ldr	r0, [r3, #16]
 80101fa:	f7ff fd2d 	bl	800fc58 <__hi0bits>
 80101fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010202:	e7e5      	b.n	80101d0 <__d2b+0x74>
 8010204:	08012805 	.word	0x08012805
 8010208:	08012816 	.word	0x08012816

0801020c <__ssputs_r>:
 801020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010210:	688e      	ldr	r6, [r1, #8]
 8010212:	461f      	mov	r7, r3
 8010214:	42be      	cmp	r6, r7
 8010216:	680b      	ldr	r3, [r1, #0]
 8010218:	4682      	mov	sl, r0
 801021a:	460c      	mov	r4, r1
 801021c:	4690      	mov	r8, r2
 801021e:	d82d      	bhi.n	801027c <__ssputs_r+0x70>
 8010220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010224:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010228:	d026      	beq.n	8010278 <__ssputs_r+0x6c>
 801022a:	6965      	ldr	r5, [r4, #20]
 801022c:	6909      	ldr	r1, [r1, #16]
 801022e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010232:	eba3 0901 	sub.w	r9, r3, r1
 8010236:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801023a:	1c7b      	adds	r3, r7, #1
 801023c:	444b      	add	r3, r9
 801023e:	106d      	asrs	r5, r5, #1
 8010240:	429d      	cmp	r5, r3
 8010242:	bf38      	it	cc
 8010244:	461d      	movcc	r5, r3
 8010246:	0553      	lsls	r3, r2, #21
 8010248:	d527      	bpl.n	801029a <__ssputs_r+0x8e>
 801024a:	4629      	mov	r1, r5
 801024c:	f7ff fbd0 	bl	800f9f0 <_malloc_r>
 8010250:	4606      	mov	r6, r0
 8010252:	b360      	cbz	r0, 80102ae <__ssputs_r+0xa2>
 8010254:	6921      	ldr	r1, [r4, #16]
 8010256:	464a      	mov	r2, r9
 8010258:	f7fe fce9 	bl	800ec2e <memcpy>
 801025c:	89a3      	ldrh	r3, [r4, #12]
 801025e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010266:	81a3      	strh	r3, [r4, #12]
 8010268:	6126      	str	r6, [r4, #16]
 801026a:	6165      	str	r5, [r4, #20]
 801026c:	444e      	add	r6, r9
 801026e:	eba5 0509 	sub.w	r5, r5, r9
 8010272:	6026      	str	r6, [r4, #0]
 8010274:	60a5      	str	r5, [r4, #8]
 8010276:	463e      	mov	r6, r7
 8010278:	42be      	cmp	r6, r7
 801027a:	d900      	bls.n	801027e <__ssputs_r+0x72>
 801027c:	463e      	mov	r6, r7
 801027e:	6820      	ldr	r0, [r4, #0]
 8010280:	4632      	mov	r2, r6
 8010282:	4641      	mov	r1, r8
 8010284:	f000 fb9c 	bl	80109c0 <memmove>
 8010288:	68a3      	ldr	r3, [r4, #8]
 801028a:	1b9b      	subs	r3, r3, r6
 801028c:	60a3      	str	r3, [r4, #8]
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	4433      	add	r3, r6
 8010292:	6023      	str	r3, [r4, #0]
 8010294:	2000      	movs	r0, #0
 8010296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029a:	462a      	mov	r2, r5
 801029c:	f000 fbfe 	bl	8010a9c <_realloc_r>
 80102a0:	4606      	mov	r6, r0
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d1e0      	bne.n	8010268 <__ssputs_r+0x5c>
 80102a6:	6921      	ldr	r1, [r4, #16]
 80102a8:	4650      	mov	r0, sl
 80102aa:	f7ff fb2d 	bl	800f908 <_free_r>
 80102ae:	230c      	movs	r3, #12
 80102b0:	f8ca 3000 	str.w	r3, [sl]
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102ba:	81a3      	strh	r3, [r4, #12]
 80102bc:	f04f 30ff 	mov.w	r0, #4294967295
 80102c0:	e7e9      	b.n	8010296 <__ssputs_r+0x8a>
	...

080102c4 <_svfiprintf_r>:
 80102c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c8:	4698      	mov	r8, r3
 80102ca:	898b      	ldrh	r3, [r1, #12]
 80102cc:	061b      	lsls	r3, r3, #24
 80102ce:	b09d      	sub	sp, #116	@ 0x74
 80102d0:	4607      	mov	r7, r0
 80102d2:	460d      	mov	r5, r1
 80102d4:	4614      	mov	r4, r2
 80102d6:	d510      	bpl.n	80102fa <_svfiprintf_r+0x36>
 80102d8:	690b      	ldr	r3, [r1, #16]
 80102da:	b973      	cbnz	r3, 80102fa <_svfiprintf_r+0x36>
 80102dc:	2140      	movs	r1, #64	@ 0x40
 80102de:	f7ff fb87 	bl	800f9f0 <_malloc_r>
 80102e2:	6028      	str	r0, [r5, #0]
 80102e4:	6128      	str	r0, [r5, #16]
 80102e6:	b930      	cbnz	r0, 80102f6 <_svfiprintf_r+0x32>
 80102e8:	230c      	movs	r3, #12
 80102ea:	603b      	str	r3, [r7, #0]
 80102ec:	f04f 30ff 	mov.w	r0, #4294967295
 80102f0:	b01d      	add	sp, #116	@ 0x74
 80102f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f6:	2340      	movs	r3, #64	@ 0x40
 80102f8:	616b      	str	r3, [r5, #20]
 80102fa:	2300      	movs	r3, #0
 80102fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80102fe:	2320      	movs	r3, #32
 8010300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010304:	f8cd 800c 	str.w	r8, [sp, #12]
 8010308:	2330      	movs	r3, #48	@ 0x30
 801030a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80104a8 <_svfiprintf_r+0x1e4>
 801030e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010312:	f04f 0901 	mov.w	r9, #1
 8010316:	4623      	mov	r3, r4
 8010318:	469a      	mov	sl, r3
 801031a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801031e:	b10a      	cbz	r2, 8010324 <_svfiprintf_r+0x60>
 8010320:	2a25      	cmp	r2, #37	@ 0x25
 8010322:	d1f9      	bne.n	8010318 <_svfiprintf_r+0x54>
 8010324:	ebba 0b04 	subs.w	fp, sl, r4
 8010328:	d00b      	beq.n	8010342 <_svfiprintf_r+0x7e>
 801032a:	465b      	mov	r3, fp
 801032c:	4622      	mov	r2, r4
 801032e:	4629      	mov	r1, r5
 8010330:	4638      	mov	r0, r7
 8010332:	f7ff ff6b 	bl	801020c <__ssputs_r>
 8010336:	3001      	adds	r0, #1
 8010338:	f000 80a7 	beq.w	801048a <_svfiprintf_r+0x1c6>
 801033c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801033e:	445a      	add	r2, fp
 8010340:	9209      	str	r2, [sp, #36]	@ 0x24
 8010342:	f89a 3000 	ldrb.w	r3, [sl]
 8010346:	2b00      	cmp	r3, #0
 8010348:	f000 809f 	beq.w	801048a <_svfiprintf_r+0x1c6>
 801034c:	2300      	movs	r3, #0
 801034e:	f04f 32ff 	mov.w	r2, #4294967295
 8010352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010356:	f10a 0a01 	add.w	sl, sl, #1
 801035a:	9304      	str	r3, [sp, #16]
 801035c:	9307      	str	r3, [sp, #28]
 801035e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010362:	931a      	str	r3, [sp, #104]	@ 0x68
 8010364:	4654      	mov	r4, sl
 8010366:	2205      	movs	r2, #5
 8010368:	f814 1b01 	ldrb.w	r1, [r4], #1
 801036c:	484e      	ldr	r0, [pc, #312]	@ (80104a8 <_svfiprintf_r+0x1e4>)
 801036e:	f7ef ff2f 	bl	80001d0 <memchr>
 8010372:	9a04      	ldr	r2, [sp, #16]
 8010374:	b9d8      	cbnz	r0, 80103ae <_svfiprintf_r+0xea>
 8010376:	06d0      	lsls	r0, r2, #27
 8010378:	bf44      	itt	mi
 801037a:	2320      	movmi	r3, #32
 801037c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010380:	0711      	lsls	r1, r2, #28
 8010382:	bf44      	itt	mi
 8010384:	232b      	movmi	r3, #43	@ 0x2b
 8010386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801038a:	f89a 3000 	ldrb.w	r3, [sl]
 801038e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010390:	d015      	beq.n	80103be <_svfiprintf_r+0xfa>
 8010392:	9a07      	ldr	r2, [sp, #28]
 8010394:	4654      	mov	r4, sl
 8010396:	2000      	movs	r0, #0
 8010398:	f04f 0c0a 	mov.w	ip, #10
 801039c:	4621      	mov	r1, r4
 801039e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103a2:	3b30      	subs	r3, #48	@ 0x30
 80103a4:	2b09      	cmp	r3, #9
 80103a6:	d94b      	bls.n	8010440 <_svfiprintf_r+0x17c>
 80103a8:	b1b0      	cbz	r0, 80103d8 <_svfiprintf_r+0x114>
 80103aa:	9207      	str	r2, [sp, #28]
 80103ac:	e014      	b.n	80103d8 <_svfiprintf_r+0x114>
 80103ae:	eba0 0308 	sub.w	r3, r0, r8
 80103b2:	fa09 f303 	lsl.w	r3, r9, r3
 80103b6:	4313      	orrs	r3, r2
 80103b8:	9304      	str	r3, [sp, #16]
 80103ba:	46a2      	mov	sl, r4
 80103bc:	e7d2      	b.n	8010364 <_svfiprintf_r+0xa0>
 80103be:	9b03      	ldr	r3, [sp, #12]
 80103c0:	1d19      	adds	r1, r3, #4
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	9103      	str	r1, [sp, #12]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	bfbb      	ittet	lt
 80103ca:	425b      	neglt	r3, r3
 80103cc:	f042 0202 	orrlt.w	r2, r2, #2
 80103d0:	9307      	strge	r3, [sp, #28]
 80103d2:	9307      	strlt	r3, [sp, #28]
 80103d4:	bfb8      	it	lt
 80103d6:	9204      	strlt	r2, [sp, #16]
 80103d8:	7823      	ldrb	r3, [r4, #0]
 80103da:	2b2e      	cmp	r3, #46	@ 0x2e
 80103dc:	d10a      	bne.n	80103f4 <_svfiprintf_r+0x130>
 80103de:	7863      	ldrb	r3, [r4, #1]
 80103e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80103e2:	d132      	bne.n	801044a <_svfiprintf_r+0x186>
 80103e4:	9b03      	ldr	r3, [sp, #12]
 80103e6:	1d1a      	adds	r2, r3, #4
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	9203      	str	r2, [sp, #12]
 80103ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103f0:	3402      	adds	r4, #2
 80103f2:	9305      	str	r3, [sp, #20]
 80103f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80104b8 <_svfiprintf_r+0x1f4>
 80103f8:	7821      	ldrb	r1, [r4, #0]
 80103fa:	2203      	movs	r2, #3
 80103fc:	4650      	mov	r0, sl
 80103fe:	f7ef fee7 	bl	80001d0 <memchr>
 8010402:	b138      	cbz	r0, 8010414 <_svfiprintf_r+0x150>
 8010404:	9b04      	ldr	r3, [sp, #16]
 8010406:	eba0 000a 	sub.w	r0, r0, sl
 801040a:	2240      	movs	r2, #64	@ 0x40
 801040c:	4082      	lsls	r2, r0
 801040e:	4313      	orrs	r3, r2
 8010410:	3401      	adds	r4, #1
 8010412:	9304      	str	r3, [sp, #16]
 8010414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010418:	4824      	ldr	r0, [pc, #144]	@ (80104ac <_svfiprintf_r+0x1e8>)
 801041a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801041e:	2206      	movs	r2, #6
 8010420:	f7ef fed6 	bl	80001d0 <memchr>
 8010424:	2800      	cmp	r0, #0
 8010426:	d036      	beq.n	8010496 <_svfiprintf_r+0x1d2>
 8010428:	4b21      	ldr	r3, [pc, #132]	@ (80104b0 <_svfiprintf_r+0x1ec>)
 801042a:	bb1b      	cbnz	r3, 8010474 <_svfiprintf_r+0x1b0>
 801042c:	9b03      	ldr	r3, [sp, #12]
 801042e:	3307      	adds	r3, #7
 8010430:	f023 0307 	bic.w	r3, r3, #7
 8010434:	3308      	adds	r3, #8
 8010436:	9303      	str	r3, [sp, #12]
 8010438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801043a:	4433      	add	r3, r6
 801043c:	9309      	str	r3, [sp, #36]	@ 0x24
 801043e:	e76a      	b.n	8010316 <_svfiprintf_r+0x52>
 8010440:	fb0c 3202 	mla	r2, ip, r2, r3
 8010444:	460c      	mov	r4, r1
 8010446:	2001      	movs	r0, #1
 8010448:	e7a8      	b.n	801039c <_svfiprintf_r+0xd8>
 801044a:	2300      	movs	r3, #0
 801044c:	3401      	adds	r4, #1
 801044e:	9305      	str	r3, [sp, #20]
 8010450:	4619      	mov	r1, r3
 8010452:	f04f 0c0a 	mov.w	ip, #10
 8010456:	4620      	mov	r0, r4
 8010458:	f810 2b01 	ldrb.w	r2, [r0], #1
 801045c:	3a30      	subs	r2, #48	@ 0x30
 801045e:	2a09      	cmp	r2, #9
 8010460:	d903      	bls.n	801046a <_svfiprintf_r+0x1a6>
 8010462:	2b00      	cmp	r3, #0
 8010464:	d0c6      	beq.n	80103f4 <_svfiprintf_r+0x130>
 8010466:	9105      	str	r1, [sp, #20]
 8010468:	e7c4      	b.n	80103f4 <_svfiprintf_r+0x130>
 801046a:	fb0c 2101 	mla	r1, ip, r1, r2
 801046e:	4604      	mov	r4, r0
 8010470:	2301      	movs	r3, #1
 8010472:	e7f0      	b.n	8010456 <_svfiprintf_r+0x192>
 8010474:	ab03      	add	r3, sp, #12
 8010476:	9300      	str	r3, [sp, #0]
 8010478:	462a      	mov	r2, r5
 801047a:	4b0e      	ldr	r3, [pc, #56]	@ (80104b4 <_svfiprintf_r+0x1f0>)
 801047c:	a904      	add	r1, sp, #16
 801047e:	4638      	mov	r0, r7
 8010480:	f7fd fe66 	bl	800e150 <_printf_float>
 8010484:	1c42      	adds	r2, r0, #1
 8010486:	4606      	mov	r6, r0
 8010488:	d1d6      	bne.n	8010438 <_svfiprintf_r+0x174>
 801048a:	89ab      	ldrh	r3, [r5, #12]
 801048c:	065b      	lsls	r3, r3, #25
 801048e:	f53f af2d 	bmi.w	80102ec <_svfiprintf_r+0x28>
 8010492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010494:	e72c      	b.n	80102f0 <_svfiprintf_r+0x2c>
 8010496:	ab03      	add	r3, sp, #12
 8010498:	9300      	str	r3, [sp, #0]
 801049a:	462a      	mov	r2, r5
 801049c:	4b05      	ldr	r3, [pc, #20]	@ (80104b4 <_svfiprintf_r+0x1f0>)
 801049e:	a904      	add	r1, sp, #16
 80104a0:	4638      	mov	r0, r7
 80104a2:	f7fe f8ed 	bl	800e680 <_printf_i>
 80104a6:	e7ed      	b.n	8010484 <_svfiprintf_r+0x1c0>
 80104a8:	08012970 	.word	0x08012970
 80104ac:	0801297a 	.word	0x0801297a
 80104b0:	0800e151 	.word	0x0800e151
 80104b4:	0801020d 	.word	0x0801020d
 80104b8:	08012976 	.word	0x08012976

080104bc <__sfputc_r>:
 80104bc:	6893      	ldr	r3, [r2, #8]
 80104be:	3b01      	subs	r3, #1
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	b410      	push	{r4}
 80104c4:	6093      	str	r3, [r2, #8]
 80104c6:	da08      	bge.n	80104da <__sfputc_r+0x1e>
 80104c8:	6994      	ldr	r4, [r2, #24]
 80104ca:	42a3      	cmp	r3, r4
 80104cc:	db01      	blt.n	80104d2 <__sfputc_r+0x16>
 80104ce:	290a      	cmp	r1, #10
 80104d0:	d103      	bne.n	80104da <__sfputc_r+0x1e>
 80104d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104d6:	f000 b9df 	b.w	8010898 <__swbuf_r>
 80104da:	6813      	ldr	r3, [r2, #0]
 80104dc:	1c58      	adds	r0, r3, #1
 80104de:	6010      	str	r0, [r2, #0]
 80104e0:	7019      	strb	r1, [r3, #0]
 80104e2:	4608      	mov	r0, r1
 80104e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104e8:	4770      	bx	lr

080104ea <__sfputs_r>:
 80104ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ec:	4606      	mov	r6, r0
 80104ee:	460f      	mov	r7, r1
 80104f0:	4614      	mov	r4, r2
 80104f2:	18d5      	adds	r5, r2, r3
 80104f4:	42ac      	cmp	r4, r5
 80104f6:	d101      	bne.n	80104fc <__sfputs_r+0x12>
 80104f8:	2000      	movs	r0, #0
 80104fa:	e007      	b.n	801050c <__sfputs_r+0x22>
 80104fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010500:	463a      	mov	r2, r7
 8010502:	4630      	mov	r0, r6
 8010504:	f7ff ffda 	bl	80104bc <__sfputc_r>
 8010508:	1c43      	adds	r3, r0, #1
 801050a:	d1f3      	bne.n	80104f4 <__sfputs_r+0xa>
 801050c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010510 <_vfiprintf_r>:
 8010510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010514:	460d      	mov	r5, r1
 8010516:	b09d      	sub	sp, #116	@ 0x74
 8010518:	4614      	mov	r4, r2
 801051a:	4698      	mov	r8, r3
 801051c:	4606      	mov	r6, r0
 801051e:	b118      	cbz	r0, 8010528 <_vfiprintf_r+0x18>
 8010520:	6a03      	ldr	r3, [r0, #32]
 8010522:	b90b      	cbnz	r3, 8010528 <_vfiprintf_r+0x18>
 8010524:	f7fe fa58 	bl	800e9d8 <__sinit>
 8010528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801052a:	07d9      	lsls	r1, r3, #31
 801052c:	d405      	bmi.n	801053a <_vfiprintf_r+0x2a>
 801052e:	89ab      	ldrh	r3, [r5, #12]
 8010530:	059a      	lsls	r2, r3, #22
 8010532:	d402      	bmi.n	801053a <_vfiprintf_r+0x2a>
 8010534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010536:	f7fe fb78 	bl	800ec2a <__retarget_lock_acquire_recursive>
 801053a:	89ab      	ldrh	r3, [r5, #12]
 801053c:	071b      	lsls	r3, r3, #28
 801053e:	d501      	bpl.n	8010544 <_vfiprintf_r+0x34>
 8010540:	692b      	ldr	r3, [r5, #16]
 8010542:	b99b      	cbnz	r3, 801056c <_vfiprintf_r+0x5c>
 8010544:	4629      	mov	r1, r5
 8010546:	4630      	mov	r0, r6
 8010548:	f000 f9e4 	bl	8010914 <__swsetup_r>
 801054c:	b170      	cbz	r0, 801056c <_vfiprintf_r+0x5c>
 801054e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010550:	07dc      	lsls	r4, r3, #31
 8010552:	d504      	bpl.n	801055e <_vfiprintf_r+0x4e>
 8010554:	f04f 30ff 	mov.w	r0, #4294967295
 8010558:	b01d      	add	sp, #116	@ 0x74
 801055a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055e:	89ab      	ldrh	r3, [r5, #12]
 8010560:	0598      	lsls	r0, r3, #22
 8010562:	d4f7      	bmi.n	8010554 <_vfiprintf_r+0x44>
 8010564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010566:	f7fe fb61 	bl	800ec2c <__retarget_lock_release_recursive>
 801056a:	e7f3      	b.n	8010554 <_vfiprintf_r+0x44>
 801056c:	2300      	movs	r3, #0
 801056e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010570:	2320      	movs	r3, #32
 8010572:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010576:	f8cd 800c 	str.w	r8, [sp, #12]
 801057a:	2330      	movs	r3, #48	@ 0x30
 801057c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801072c <_vfiprintf_r+0x21c>
 8010580:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010584:	f04f 0901 	mov.w	r9, #1
 8010588:	4623      	mov	r3, r4
 801058a:	469a      	mov	sl, r3
 801058c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010590:	b10a      	cbz	r2, 8010596 <_vfiprintf_r+0x86>
 8010592:	2a25      	cmp	r2, #37	@ 0x25
 8010594:	d1f9      	bne.n	801058a <_vfiprintf_r+0x7a>
 8010596:	ebba 0b04 	subs.w	fp, sl, r4
 801059a:	d00b      	beq.n	80105b4 <_vfiprintf_r+0xa4>
 801059c:	465b      	mov	r3, fp
 801059e:	4622      	mov	r2, r4
 80105a0:	4629      	mov	r1, r5
 80105a2:	4630      	mov	r0, r6
 80105a4:	f7ff ffa1 	bl	80104ea <__sfputs_r>
 80105a8:	3001      	adds	r0, #1
 80105aa:	f000 80a7 	beq.w	80106fc <_vfiprintf_r+0x1ec>
 80105ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105b0:	445a      	add	r2, fp
 80105b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80105b4:	f89a 3000 	ldrb.w	r3, [sl]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f000 809f 	beq.w	80106fc <_vfiprintf_r+0x1ec>
 80105be:	2300      	movs	r3, #0
 80105c0:	f04f 32ff 	mov.w	r2, #4294967295
 80105c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105c8:	f10a 0a01 	add.w	sl, sl, #1
 80105cc:	9304      	str	r3, [sp, #16]
 80105ce:	9307      	str	r3, [sp, #28]
 80105d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80105d6:	4654      	mov	r4, sl
 80105d8:	2205      	movs	r2, #5
 80105da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105de:	4853      	ldr	r0, [pc, #332]	@ (801072c <_vfiprintf_r+0x21c>)
 80105e0:	f7ef fdf6 	bl	80001d0 <memchr>
 80105e4:	9a04      	ldr	r2, [sp, #16]
 80105e6:	b9d8      	cbnz	r0, 8010620 <_vfiprintf_r+0x110>
 80105e8:	06d1      	lsls	r1, r2, #27
 80105ea:	bf44      	itt	mi
 80105ec:	2320      	movmi	r3, #32
 80105ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105f2:	0713      	lsls	r3, r2, #28
 80105f4:	bf44      	itt	mi
 80105f6:	232b      	movmi	r3, #43	@ 0x2b
 80105f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010600:	2b2a      	cmp	r3, #42	@ 0x2a
 8010602:	d015      	beq.n	8010630 <_vfiprintf_r+0x120>
 8010604:	9a07      	ldr	r2, [sp, #28]
 8010606:	4654      	mov	r4, sl
 8010608:	2000      	movs	r0, #0
 801060a:	f04f 0c0a 	mov.w	ip, #10
 801060e:	4621      	mov	r1, r4
 8010610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010614:	3b30      	subs	r3, #48	@ 0x30
 8010616:	2b09      	cmp	r3, #9
 8010618:	d94b      	bls.n	80106b2 <_vfiprintf_r+0x1a2>
 801061a:	b1b0      	cbz	r0, 801064a <_vfiprintf_r+0x13a>
 801061c:	9207      	str	r2, [sp, #28]
 801061e:	e014      	b.n	801064a <_vfiprintf_r+0x13a>
 8010620:	eba0 0308 	sub.w	r3, r0, r8
 8010624:	fa09 f303 	lsl.w	r3, r9, r3
 8010628:	4313      	orrs	r3, r2
 801062a:	9304      	str	r3, [sp, #16]
 801062c:	46a2      	mov	sl, r4
 801062e:	e7d2      	b.n	80105d6 <_vfiprintf_r+0xc6>
 8010630:	9b03      	ldr	r3, [sp, #12]
 8010632:	1d19      	adds	r1, r3, #4
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	9103      	str	r1, [sp, #12]
 8010638:	2b00      	cmp	r3, #0
 801063a:	bfbb      	ittet	lt
 801063c:	425b      	neglt	r3, r3
 801063e:	f042 0202 	orrlt.w	r2, r2, #2
 8010642:	9307      	strge	r3, [sp, #28]
 8010644:	9307      	strlt	r3, [sp, #28]
 8010646:	bfb8      	it	lt
 8010648:	9204      	strlt	r2, [sp, #16]
 801064a:	7823      	ldrb	r3, [r4, #0]
 801064c:	2b2e      	cmp	r3, #46	@ 0x2e
 801064e:	d10a      	bne.n	8010666 <_vfiprintf_r+0x156>
 8010650:	7863      	ldrb	r3, [r4, #1]
 8010652:	2b2a      	cmp	r3, #42	@ 0x2a
 8010654:	d132      	bne.n	80106bc <_vfiprintf_r+0x1ac>
 8010656:	9b03      	ldr	r3, [sp, #12]
 8010658:	1d1a      	adds	r2, r3, #4
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	9203      	str	r2, [sp, #12]
 801065e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010662:	3402      	adds	r4, #2
 8010664:	9305      	str	r3, [sp, #20]
 8010666:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801073c <_vfiprintf_r+0x22c>
 801066a:	7821      	ldrb	r1, [r4, #0]
 801066c:	2203      	movs	r2, #3
 801066e:	4650      	mov	r0, sl
 8010670:	f7ef fdae 	bl	80001d0 <memchr>
 8010674:	b138      	cbz	r0, 8010686 <_vfiprintf_r+0x176>
 8010676:	9b04      	ldr	r3, [sp, #16]
 8010678:	eba0 000a 	sub.w	r0, r0, sl
 801067c:	2240      	movs	r2, #64	@ 0x40
 801067e:	4082      	lsls	r2, r0
 8010680:	4313      	orrs	r3, r2
 8010682:	3401      	adds	r4, #1
 8010684:	9304      	str	r3, [sp, #16]
 8010686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801068a:	4829      	ldr	r0, [pc, #164]	@ (8010730 <_vfiprintf_r+0x220>)
 801068c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010690:	2206      	movs	r2, #6
 8010692:	f7ef fd9d 	bl	80001d0 <memchr>
 8010696:	2800      	cmp	r0, #0
 8010698:	d03f      	beq.n	801071a <_vfiprintf_r+0x20a>
 801069a:	4b26      	ldr	r3, [pc, #152]	@ (8010734 <_vfiprintf_r+0x224>)
 801069c:	bb1b      	cbnz	r3, 80106e6 <_vfiprintf_r+0x1d6>
 801069e:	9b03      	ldr	r3, [sp, #12]
 80106a0:	3307      	adds	r3, #7
 80106a2:	f023 0307 	bic.w	r3, r3, #7
 80106a6:	3308      	adds	r3, #8
 80106a8:	9303      	str	r3, [sp, #12]
 80106aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ac:	443b      	add	r3, r7
 80106ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80106b0:	e76a      	b.n	8010588 <_vfiprintf_r+0x78>
 80106b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80106b6:	460c      	mov	r4, r1
 80106b8:	2001      	movs	r0, #1
 80106ba:	e7a8      	b.n	801060e <_vfiprintf_r+0xfe>
 80106bc:	2300      	movs	r3, #0
 80106be:	3401      	adds	r4, #1
 80106c0:	9305      	str	r3, [sp, #20]
 80106c2:	4619      	mov	r1, r3
 80106c4:	f04f 0c0a 	mov.w	ip, #10
 80106c8:	4620      	mov	r0, r4
 80106ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ce:	3a30      	subs	r2, #48	@ 0x30
 80106d0:	2a09      	cmp	r2, #9
 80106d2:	d903      	bls.n	80106dc <_vfiprintf_r+0x1cc>
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d0c6      	beq.n	8010666 <_vfiprintf_r+0x156>
 80106d8:	9105      	str	r1, [sp, #20]
 80106da:	e7c4      	b.n	8010666 <_vfiprintf_r+0x156>
 80106dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80106e0:	4604      	mov	r4, r0
 80106e2:	2301      	movs	r3, #1
 80106e4:	e7f0      	b.n	80106c8 <_vfiprintf_r+0x1b8>
 80106e6:	ab03      	add	r3, sp, #12
 80106e8:	9300      	str	r3, [sp, #0]
 80106ea:	462a      	mov	r2, r5
 80106ec:	4b12      	ldr	r3, [pc, #72]	@ (8010738 <_vfiprintf_r+0x228>)
 80106ee:	a904      	add	r1, sp, #16
 80106f0:	4630      	mov	r0, r6
 80106f2:	f7fd fd2d 	bl	800e150 <_printf_float>
 80106f6:	4607      	mov	r7, r0
 80106f8:	1c78      	adds	r0, r7, #1
 80106fa:	d1d6      	bne.n	80106aa <_vfiprintf_r+0x19a>
 80106fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106fe:	07d9      	lsls	r1, r3, #31
 8010700:	d405      	bmi.n	801070e <_vfiprintf_r+0x1fe>
 8010702:	89ab      	ldrh	r3, [r5, #12]
 8010704:	059a      	lsls	r2, r3, #22
 8010706:	d402      	bmi.n	801070e <_vfiprintf_r+0x1fe>
 8010708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801070a:	f7fe fa8f 	bl	800ec2c <__retarget_lock_release_recursive>
 801070e:	89ab      	ldrh	r3, [r5, #12]
 8010710:	065b      	lsls	r3, r3, #25
 8010712:	f53f af1f 	bmi.w	8010554 <_vfiprintf_r+0x44>
 8010716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010718:	e71e      	b.n	8010558 <_vfiprintf_r+0x48>
 801071a:	ab03      	add	r3, sp, #12
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	462a      	mov	r2, r5
 8010720:	4b05      	ldr	r3, [pc, #20]	@ (8010738 <_vfiprintf_r+0x228>)
 8010722:	a904      	add	r1, sp, #16
 8010724:	4630      	mov	r0, r6
 8010726:	f7fd ffab 	bl	800e680 <_printf_i>
 801072a:	e7e4      	b.n	80106f6 <_vfiprintf_r+0x1e6>
 801072c:	08012970 	.word	0x08012970
 8010730:	0801297a 	.word	0x0801297a
 8010734:	0800e151 	.word	0x0800e151
 8010738:	080104eb 	.word	0x080104eb
 801073c:	08012976 	.word	0x08012976

08010740 <__sflush_r>:
 8010740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010748:	0716      	lsls	r6, r2, #28
 801074a:	4605      	mov	r5, r0
 801074c:	460c      	mov	r4, r1
 801074e:	d454      	bmi.n	80107fa <__sflush_r+0xba>
 8010750:	684b      	ldr	r3, [r1, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	dc02      	bgt.n	801075c <__sflush_r+0x1c>
 8010756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010758:	2b00      	cmp	r3, #0
 801075a:	dd48      	ble.n	80107ee <__sflush_r+0xae>
 801075c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801075e:	2e00      	cmp	r6, #0
 8010760:	d045      	beq.n	80107ee <__sflush_r+0xae>
 8010762:	2300      	movs	r3, #0
 8010764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010768:	682f      	ldr	r7, [r5, #0]
 801076a:	6a21      	ldr	r1, [r4, #32]
 801076c:	602b      	str	r3, [r5, #0]
 801076e:	d030      	beq.n	80107d2 <__sflush_r+0x92>
 8010770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	0759      	lsls	r1, r3, #29
 8010776:	d505      	bpl.n	8010784 <__sflush_r+0x44>
 8010778:	6863      	ldr	r3, [r4, #4]
 801077a:	1ad2      	subs	r2, r2, r3
 801077c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801077e:	b10b      	cbz	r3, 8010784 <__sflush_r+0x44>
 8010780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010782:	1ad2      	subs	r2, r2, r3
 8010784:	2300      	movs	r3, #0
 8010786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010788:	6a21      	ldr	r1, [r4, #32]
 801078a:	4628      	mov	r0, r5
 801078c:	47b0      	blx	r6
 801078e:	1c43      	adds	r3, r0, #1
 8010790:	89a3      	ldrh	r3, [r4, #12]
 8010792:	d106      	bne.n	80107a2 <__sflush_r+0x62>
 8010794:	6829      	ldr	r1, [r5, #0]
 8010796:	291d      	cmp	r1, #29
 8010798:	d82b      	bhi.n	80107f2 <__sflush_r+0xb2>
 801079a:	4a2a      	ldr	r2, [pc, #168]	@ (8010844 <__sflush_r+0x104>)
 801079c:	410a      	asrs	r2, r1
 801079e:	07d6      	lsls	r6, r2, #31
 80107a0:	d427      	bmi.n	80107f2 <__sflush_r+0xb2>
 80107a2:	2200      	movs	r2, #0
 80107a4:	6062      	str	r2, [r4, #4]
 80107a6:	04d9      	lsls	r1, r3, #19
 80107a8:	6922      	ldr	r2, [r4, #16]
 80107aa:	6022      	str	r2, [r4, #0]
 80107ac:	d504      	bpl.n	80107b8 <__sflush_r+0x78>
 80107ae:	1c42      	adds	r2, r0, #1
 80107b0:	d101      	bne.n	80107b6 <__sflush_r+0x76>
 80107b2:	682b      	ldr	r3, [r5, #0]
 80107b4:	b903      	cbnz	r3, 80107b8 <__sflush_r+0x78>
 80107b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80107b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107ba:	602f      	str	r7, [r5, #0]
 80107bc:	b1b9      	cbz	r1, 80107ee <__sflush_r+0xae>
 80107be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107c2:	4299      	cmp	r1, r3
 80107c4:	d002      	beq.n	80107cc <__sflush_r+0x8c>
 80107c6:	4628      	mov	r0, r5
 80107c8:	f7ff f89e 	bl	800f908 <_free_r>
 80107cc:	2300      	movs	r3, #0
 80107ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80107d0:	e00d      	b.n	80107ee <__sflush_r+0xae>
 80107d2:	2301      	movs	r3, #1
 80107d4:	4628      	mov	r0, r5
 80107d6:	47b0      	blx	r6
 80107d8:	4602      	mov	r2, r0
 80107da:	1c50      	adds	r0, r2, #1
 80107dc:	d1c9      	bne.n	8010772 <__sflush_r+0x32>
 80107de:	682b      	ldr	r3, [r5, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d0c6      	beq.n	8010772 <__sflush_r+0x32>
 80107e4:	2b1d      	cmp	r3, #29
 80107e6:	d001      	beq.n	80107ec <__sflush_r+0xac>
 80107e8:	2b16      	cmp	r3, #22
 80107ea:	d11e      	bne.n	801082a <__sflush_r+0xea>
 80107ec:	602f      	str	r7, [r5, #0]
 80107ee:	2000      	movs	r0, #0
 80107f0:	e022      	b.n	8010838 <__sflush_r+0xf8>
 80107f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107f6:	b21b      	sxth	r3, r3
 80107f8:	e01b      	b.n	8010832 <__sflush_r+0xf2>
 80107fa:	690f      	ldr	r7, [r1, #16]
 80107fc:	2f00      	cmp	r7, #0
 80107fe:	d0f6      	beq.n	80107ee <__sflush_r+0xae>
 8010800:	0793      	lsls	r3, r2, #30
 8010802:	680e      	ldr	r6, [r1, #0]
 8010804:	bf08      	it	eq
 8010806:	694b      	ldreq	r3, [r1, #20]
 8010808:	600f      	str	r7, [r1, #0]
 801080a:	bf18      	it	ne
 801080c:	2300      	movne	r3, #0
 801080e:	eba6 0807 	sub.w	r8, r6, r7
 8010812:	608b      	str	r3, [r1, #8]
 8010814:	f1b8 0f00 	cmp.w	r8, #0
 8010818:	dde9      	ble.n	80107ee <__sflush_r+0xae>
 801081a:	6a21      	ldr	r1, [r4, #32]
 801081c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801081e:	4643      	mov	r3, r8
 8010820:	463a      	mov	r2, r7
 8010822:	4628      	mov	r0, r5
 8010824:	47b0      	blx	r6
 8010826:	2800      	cmp	r0, #0
 8010828:	dc08      	bgt.n	801083c <__sflush_r+0xfc>
 801082a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801082e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010832:	81a3      	strh	r3, [r4, #12]
 8010834:	f04f 30ff 	mov.w	r0, #4294967295
 8010838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801083c:	4407      	add	r7, r0
 801083e:	eba8 0800 	sub.w	r8, r8, r0
 8010842:	e7e7      	b.n	8010814 <__sflush_r+0xd4>
 8010844:	dfbffffe 	.word	0xdfbffffe

08010848 <_fflush_r>:
 8010848:	b538      	push	{r3, r4, r5, lr}
 801084a:	690b      	ldr	r3, [r1, #16]
 801084c:	4605      	mov	r5, r0
 801084e:	460c      	mov	r4, r1
 8010850:	b913      	cbnz	r3, 8010858 <_fflush_r+0x10>
 8010852:	2500      	movs	r5, #0
 8010854:	4628      	mov	r0, r5
 8010856:	bd38      	pop	{r3, r4, r5, pc}
 8010858:	b118      	cbz	r0, 8010862 <_fflush_r+0x1a>
 801085a:	6a03      	ldr	r3, [r0, #32]
 801085c:	b90b      	cbnz	r3, 8010862 <_fflush_r+0x1a>
 801085e:	f7fe f8bb 	bl	800e9d8 <__sinit>
 8010862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d0f3      	beq.n	8010852 <_fflush_r+0xa>
 801086a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801086c:	07d0      	lsls	r0, r2, #31
 801086e:	d404      	bmi.n	801087a <_fflush_r+0x32>
 8010870:	0599      	lsls	r1, r3, #22
 8010872:	d402      	bmi.n	801087a <_fflush_r+0x32>
 8010874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010876:	f7fe f9d8 	bl	800ec2a <__retarget_lock_acquire_recursive>
 801087a:	4628      	mov	r0, r5
 801087c:	4621      	mov	r1, r4
 801087e:	f7ff ff5f 	bl	8010740 <__sflush_r>
 8010882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010884:	07da      	lsls	r2, r3, #31
 8010886:	4605      	mov	r5, r0
 8010888:	d4e4      	bmi.n	8010854 <_fflush_r+0xc>
 801088a:	89a3      	ldrh	r3, [r4, #12]
 801088c:	059b      	lsls	r3, r3, #22
 801088e:	d4e1      	bmi.n	8010854 <_fflush_r+0xc>
 8010890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010892:	f7fe f9cb 	bl	800ec2c <__retarget_lock_release_recursive>
 8010896:	e7dd      	b.n	8010854 <_fflush_r+0xc>

08010898 <__swbuf_r>:
 8010898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801089a:	460e      	mov	r6, r1
 801089c:	4614      	mov	r4, r2
 801089e:	4605      	mov	r5, r0
 80108a0:	b118      	cbz	r0, 80108aa <__swbuf_r+0x12>
 80108a2:	6a03      	ldr	r3, [r0, #32]
 80108a4:	b90b      	cbnz	r3, 80108aa <__swbuf_r+0x12>
 80108a6:	f7fe f897 	bl	800e9d8 <__sinit>
 80108aa:	69a3      	ldr	r3, [r4, #24]
 80108ac:	60a3      	str	r3, [r4, #8]
 80108ae:	89a3      	ldrh	r3, [r4, #12]
 80108b0:	071a      	lsls	r2, r3, #28
 80108b2:	d501      	bpl.n	80108b8 <__swbuf_r+0x20>
 80108b4:	6923      	ldr	r3, [r4, #16]
 80108b6:	b943      	cbnz	r3, 80108ca <__swbuf_r+0x32>
 80108b8:	4621      	mov	r1, r4
 80108ba:	4628      	mov	r0, r5
 80108bc:	f000 f82a 	bl	8010914 <__swsetup_r>
 80108c0:	b118      	cbz	r0, 80108ca <__swbuf_r+0x32>
 80108c2:	f04f 37ff 	mov.w	r7, #4294967295
 80108c6:	4638      	mov	r0, r7
 80108c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	6922      	ldr	r2, [r4, #16]
 80108ce:	1a98      	subs	r0, r3, r2
 80108d0:	6963      	ldr	r3, [r4, #20]
 80108d2:	b2f6      	uxtb	r6, r6
 80108d4:	4283      	cmp	r3, r0
 80108d6:	4637      	mov	r7, r6
 80108d8:	dc05      	bgt.n	80108e6 <__swbuf_r+0x4e>
 80108da:	4621      	mov	r1, r4
 80108dc:	4628      	mov	r0, r5
 80108de:	f7ff ffb3 	bl	8010848 <_fflush_r>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d1ed      	bne.n	80108c2 <__swbuf_r+0x2a>
 80108e6:	68a3      	ldr	r3, [r4, #8]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	60a3      	str	r3, [r4, #8]
 80108ec:	6823      	ldr	r3, [r4, #0]
 80108ee:	1c5a      	adds	r2, r3, #1
 80108f0:	6022      	str	r2, [r4, #0]
 80108f2:	701e      	strb	r6, [r3, #0]
 80108f4:	6962      	ldr	r2, [r4, #20]
 80108f6:	1c43      	adds	r3, r0, #1
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d004      	beq.n	8010906 <__swbuf_r+0x6e>
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	07db      	lsls	r3, r3, #31
 8010900:	d5e1      	bpl.n	80108c6 <__swbuf_r+0x2e>
 8010902:	2e0a      	cmp	r6, #10
 8010904:	d1df      	bne.n	80108c6 <__swbuf_r+0x2e>
 8010906:	4621      	mov	r1, r4
 8010908:	4628      	mov	r0, r5
 801090a:	f7ff ff9d 	bl	8010848 <_fflush_r>
 801090e:	2800      	cmp	r0, #0
 8010910:	d0d9      	beq.n	80108c6 <__swbuf_r+0x2e>
 8010912:	e7d6      	b.n	80108c2 <__swbuf_r+0x2a>

08010914 <__swsetup_r>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	4b29      	ldr	r3, [pc, #164]	@ (80109bc <__swsetup_r+0xa8>)
 8010918:	4605      	mov	r5, r0
 801091a:	6818      	ldr	r0, [r3, #0]
 801091c:	460c      	mov	r4, r1
 801091e:	b118      	cbz	r0, 8010928 <__swsetup_r+0x14>
 8010920:	6a03      	ldr	r3, [r0, #32]
 8010922:	b90b      	cbnz	r3, 8010928 <__swsetup_r+0x14>
 8010924:	f7fe f858 	bl	800e9d8 <__sinit>
 8010928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801092c:	0719      	lsls	r1, r3, #28
 801092e:	d422      	bmi.n	8010976 <__swsetup_r+0x62>
 8010930:	06da      	lsls	r2, r3, #27
 8010932:	d407      	bmi.n	8010944 <__swsetup_r+0x30>
 8010934:	2209      	movs	r2, #9
 8010936:	602a      	str	r2, [r5, #0]
 8010938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801093c:	81a3      	strh	r3, [r4, #12]
 801093e:	f04f 30ff 	mov.w	r0, #4294967295
 8010942:	e033      	b.n	80109ac <__swsetup_r+0x98>
 8010944:	0758      	lsls	r0, r3, #29
 8010946:	d512      	bpl.n	801096e <__swsetup_r+0x5a>
 8010948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801094a:	b141      	cbz	r1, 801095e <__swsetup_r+0x4a>
 801094c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010950:	4299      	cmp	r1, r3
 8010952:	d002      	beq.n	801095a <__swsetup_r+0x46>
 8010954:	4628      	mov	r0, r5
 8010956:	f7fe ffd7 	bl	800f908 <_free_r>
 801095a:	2300      	movs	r3, #0
 801095c:	6363      	str	r3, [r4, #52]	@ 0x34
 801095e:	89a3      	ldrh	r3, [r4, #12]
 8010960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010964:	81a3      	strh	r3, [r4, #12]
 8010966:	2300      	movs	r3, #0
 8010968:	6063      	str	r3, [r4, #4]
 801096a:	6923      	ldr	r3, [r4, #16]
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	89a3      	ldrh	r3, [r4, #12]
 8010970:	f043 0308 	orr.w	r3, r3, #8
 8010974:	81a3      	strh	r3, [r4, #12]
 8010976:	6923      	ldr	r3, [r4, #16]
 8010978:	b94b      	cbnz	r3, 801098e <__swsetup_r+0x7a>
 801097a:	89a3      	ldrh	r3, [r4, #12]
 801097c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010984:	d003      	beq.n	801098e <__swsetup_r+0x7a>
 8010986:	4621      	mov	r1, r4
 8010988:	4628      	mov	r0, r5
 801098a:	f000 f8fb 	bl	8010b84 <__smakebuf_r>
 801098e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010992:	f013 0201 	ands.w	r2, r3, #1
 8010996:	d00a      	beq.n	80109ae <__swsetup_r+0x9a>
 8010998:	2200      	movs	r2, #0
 801099a:	60a2      	str	r2, [r4, #8]
 801099c:	6962      	ldr	r2, [r4, #20]
 801099e:	4252      	negs	r2, r2
 80109a0:	61a2      	str	r2, [r4, #24]
 80109a2:	6922      	ldr	r2, [r4, #16]
 80109a4:	b942      	cbnz	r2, 80109b8 <__swsetup_r+0xa4>
 80109a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80109aa:	d1c5      	bne.n	8010938 <__swsetup_r+0x24>
 80109ac:	bd38      	pop	{r3, r4, r5, pc}
 80109ae:	0799      	lsls	r1, r3, #30
 80109b0:	bf58      	it	pl
 80109b2:	6962      	ldrpl	r2, [r4, #20]
 80109b4:	60a2      	str	r2, [r4, #8]
 80109b6:	e7f4      	b.n	80109a2 <__swsetup_r+0x8e>
 80109b8:	2000      	movs	r0, #0
 80109ba:	e7f7      	b.n	80109ac <__swsetup_r+0x98>
 80109bc:	20000138 	.word	0x20000138

080109c0 <memmove>:
 80109c0:	4288      	cmp	r0, r1
 80109c2:	b510      	push	{r4, lr}
 80109c4:	eb01 0402 	add.w	r4, r1, r2
 80109c8:	d902      	bls.n	80109d0 <memmove+0x10>
 80109ca:	4284      	cmp	r4, r0
 80109cc:	4623      	mov	r3, r4
 80109ce:	d807      	bhi.n	80109e0 <memmove+0x20>
 80109d0:	1e43      	subs	r3, r0, #1
 80109d2:	42a1      	cmp	r1, r4
 80109d4:	d008      	beq.n	80109e8 <memmove+0x28>
 80109d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109de:	e7f8      	b.n	80109d2 <memmove+0x12>
 80109e0:	4402      	add	r2, r0
 80109e2:	4601      	mov	r1, r0
 80109e4:	428a      	cmp	r2, r1
 80109e6:	d100      	bne.n	80109ea <memmove+0x2a>
 80109e8:	bd10      	pop	{r4, pc}
 80109ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109f2:	e7f7      	b.n	80109e4 <memmove+0x24>

080109f4 <_sbrk_r>:
 80109f4:	b538      	push	{r3, r4, r5, lr}
 80109f6:	4d06      	ldr	r5, [pc, #24]	@ (8010a10 <_sbrk_r+0x1c>)
 80109f8:	2300      	movs	r3, #0
 80109fa:	4604      	mov	r4, r0
 80109fc:	4608      	mov	r0, r1
 80109fe:	602b      	str	r3, [r5, #0]
 8010a00:	f7f3 fbfe 	bl	8004200 <_sbrk>
 8010a04:	1c43      	adds	r3, r0, #1
 8010a06:	d102      	bne.n	8010a0e <_sbrk_r+0x1a>
 8010a08:	682b      	ldr	r3, [r5, #0]
 8010a0a:	b103      	cbz	r3, 8010a0e <_sbrk_r+0x1a>
 8010a0c:	6023      	str	r3, [r4, #0]
 8010a0e:	bd38      	pop	{r3, r4, r5, pc}
 8010a10:	200027f4 	.word	0x200027f4

08010a14 <__assert_func>:
 8010a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a16:	4614      	mov	r4, r2
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4b09      	ldr	r3, [pc, #36]	@ (8010a40 <__assert_func+0x2c>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	4605      	mov	r5, r0
 8010a20:	68d8      	ldr	r0, [r3, #12]
 8010a22:	b954      	cbnz	r4, 8010a3a <__assert_func+0x26>
 8010a24:	4b07      	ldr	r3, [pc, #28]	@ (8010a44 <__assert_func+0x30>)
 8010a26:	461c      	mov	r4, r3
 8010a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a2c:	9100      	str	r1, [sp, #0]
 8010a2e:	462b      	mov	r3, r5
 8010a30:	4905      	ldr	r1, [pc, #20]	@ (8010a48 <__assert_func+0x34>)
 8010a32:	f000 f86f 	bl	8010b14 <fiprintf>
 8010a36:	f000 f903 	bl	8010c40 <abort>
 8010a3a:	4b04      	ldr	r3, [pc, #16]	@ (8010a4c <__assert_func+0x38>)
 8010a3c:	e7f4      	b.n	8010a28 <__assert_func+0x14>
 8010a3e:	bf00      	nop
 8010a40:	20000138 	.word	0x20000138
 8010a44:	080129c6 	.word	0x080129c6
 8010a48:	08012998 	.word	0x08012998
 8010a4c:	0801298b 	.word	0x0801298b

08010a50 <_calloc_r>:
 8010a50:	b570      	push	{r4, r5, r6, lr}
 8010a52:	fba1 5402 	umull	r5, r4, r1, r2
 8010a56:	b93c      	cbnz	r4, 8010a68 <_calloc_r+0x18>
 8010a58:	4629      	mov	r1, r5
 8010a5a:	f7fe ffc9 	bl	800f9f0 <_malloc_r>
 8010a5e:	4606      	mov	r6, r0
 8010a60:	b928      	cbnz	r0, 8010a6e <_calloc_r+0x1e>
 8010a62:	2600      	movs	r6, #0
 8010a64:	4630      	mov	r0, r6
 8010a66:	bd70      	pop	{r4, r5, r6, pc}
 8010a68:	220c      	movs	r2, #12
 8010a6a:	6002      	str	r2, [r0, #0]
 8010a6c:	e7f9      	b.n	8010a62 <_calloc_r+0x12>
 8010a6e:	462a      	mov	r2, r5
 8010a70:	4621      	mov	r1, r4
 8010a72:	f7fe f85c 	bl	800eb2e <memset>
 8010a76:	e7f5      	b.n	8010a64 <_calloc_r+0x14>

08010a78 <__ascii_mbtowc>:
 8010a78:	b082      	sub	sp, #8
 8010a7a:	b901      	cbnz	r1, 8010a7e <__ascii_mbtowc+0x6>
 8010a7c:	a901      	add	r1, sp, #4
 8010a7e:	b142      	cbz	r2, 8010a92 <__ascii_mbtowc+0x1a>
 8010a80:	b14b      	cbz	r3, 8010a96 <__ascii_mbtowc+0x1e>
 8010a82:	7813      	ldrb	r3, [r2, #0]
 8010a84:	600b      	str	r3, [r1, #0]
 8010a86:	7812      	ldrb	r2, [r2, #0]
 8010a88:	1e10      	subs	r0, r2, #0
 8010a8a:	bf18      	it	ne
 8010a8c:	2001      	movne	r0, #1
 8010a8e:	b002      	add	sp, #8
 8010a90:	4770      	bx	lr
 8010a92:	4610      	mov	r0, r2
 8010a94:	e7fb      	b.n	8010a8e <__ascii_mbtowc+0x16>
 8010a96:	f06f 0001 	mvn.w	r0, #1
 8010a9a:	e7f8      	b.n	8010a8e <__ascii_mbtowc+0x16>

08010a9c <_realloc_r>:
 8010a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa0:	4680      	mov	r8, r0
 8010aa2:	4615      	mov	r5, r2
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	b921      	cbnz	r1, 8010ab2 <_realloc_r+0x16>
 8010aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aac:	4611      	mov	r1, r2
 8010aae:	f7fe bf9f 	b.w	800f9f0 <_malloc_r>
 8010ab2:	b92a      	cbnz	r2, 8010ac0 <_realloc_r+0x24>
 8010ab4:	f7fe ff28 	bl	800f908 <_free_r>
 8010ab8:	2400      	movs	r4, #0
 8010aba:	4620      	mov	r0, r4
 8010abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac0:	f000 f8c5 	bl	8010c4e <_malloc_usable_size_r>
 8010ac4:	4285      	cmp	r5, r0
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	d802      	bhi.n	8010ad0 <_realloc_r+0x34>
 8010aca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010ace:	d8f4      	bhi.n	8010aba <_realloc_r+0x1e>
 8010ad0:	4629      	mov	r1, r5
 8010ad2:	4640      	mov	r0, r8
 8010ad4:	f7fe ff8c 	bl	800f9f0 <_malloc_r>
 8010ad8:	4607      	mov	r7, r0
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d0ec      	beq.n	8010ab8 <_realloc_r+0x1c>
 8010ade:	42b5      	cmp	r5, r6
 8010ae0:	462a      	mov	r2, r5
 8010ae2:	4621      	mov	r1, r4
 8010ae4:	bf28      	it	cs
 8010ae6:	4632      	movcs	r2, r6
 8010ae8:	f7fe f8a1 	bl	800ec2e <memcpy>
 8010aec:	4621      	mov	r1, r4
 8010aee:	4640      	mov	r0, r8
 8010af0:	f7fe ff0a 	bl	800f908 <_free_r>
 8010af4:	463c      	mov	r4, r7
 8010af6:	e7e0      	b.n	8010aba <_realloc_r+0x1e>

08010af8 <__ascii_wctomb>:
 8010af8:	4603      	mov	r3, r0
 8010afa:	4608      	mov	r0, r1
 8010afc:	b141      	cbz	r1, 8010b10 <__ascii_wctomb+0x18>
 8010afe:	2aff      	cmp	r2, #255	@ 0xff
 8010b00:	d904      	bls.n	8010b0c <__ascii_wctomb+0x14>
 8010b02:	228a      	movs	r2, #138	@ 0x8a
 8010b04:	601a      	str	r2, [r3, #0]
 8010b06:	f04f 30ff 	mov.w	r0, #4294967295
 8010b0a:	4770      	bx	lr
 8010b0c:	700a      	strb	r2, [r1, #0]
 8010b0e:	2001      	movs	r0, #1
 8010b10:	4770      	bx	lr
	...

08010b14 <fiprintf>:
 8010b14:	b40e      	push	{r1, r2, r3}
 8010b16:	b503      	push	{r0, r1, lr}
 8010b18:	4601      	mov	r1, r0
 8010b1a:	ab03      	add	r3, sp, #12
 8010b1c:	4805      	ldr	r0, [pc, #20]	@ (8010b34 <fiprintf+0x20>)
 8010b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b22:	6800      	ldr	r0, [r0, #0]
 8010b24:	9301      	str	r3, [sp, #4]
 8010b26:	f7ff fcf3 	bl	8010510 <_vfiprintf_r>
 8010b2a:	b002      	add	sp, #8
 8010b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b30:	b003      	add	sp, #12
 8010b32:	4770      	bx	lr
 8010b34:	20000138 	.word	0x20000138

08010b38 <__swhatbuf_r>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	460c      	mov	r4, r1
 8010b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b40:	2900      	cmp	r1, #0
 8010b42:	b096      	sub	sp, #88	@ 0x58
 8010b44:	4615      	mov	r5, r2
 8010b46:	461e      	mov	r6, r3
 8010b48:	da0d      	bge.n	8010b66 <__swhatbuf_r+0x2e>
 8010b4a:	89a3      	ldrh	r3, [r4, #12]
 8010b4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b50:	f04f 0100 	mov.w	r1, #0
 8010b54:	bf14      	ite	ne
 8010b56:	2340      	movne	r3, #64	@ 0x40
 8010b58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	6031      	str	r1, [r6, #0]
 8010b60:	602b      	str	r3, [r5, #0]
 8010b62:	b016      	add	sp, #88	@ 0x58
 8010b64:	bd70      	pop	{r4, r5, r6, pc}
 8010b66:	466a      	mov	r2, sp
 8010b68:	f000 f848 	bl	8010bfc <_fstat_r>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	dbec      	blt.n	8010b4a <__swhatbuf_r+0x12>
 8010b70:	9901      	ldr	r1, [sp, #4]
 8010b72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b7a:	4259      	negs	r1, r3
 8010b7c:	4159      	adcs	r1, r3
 8010b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b82:	e7eb      	b.n	8010b5c <__swhatbuf_r+0x24>

08010b84 <__smakebuf_r>:
 8010b84:	898b      	ldrh	r3, [r1, #12]
 8010b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b88:	079d      	lsls	r5, r3, #30
 8010b8a:	4606      	mov	r6, r0
 8010b8c:	460c      	mov	r4, r1
 8010b8e:	d507      	bpl.n	8010ba0 <__smakebuf_r+0x1c>
 8010b90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b94:	6023      	str	r3, [r4, #0]
 8010b96:	6123      	str	r3, [r4, #16]
 8010b98:	2301      	movs	r3, #1
 8010b9a:	6163      	str	r3, [r4, #20]
 8010b9c:	b003      	add	sp, #12
 8010b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ba0:	ab01      	add	r3, sp, #4
 8010ba2:	466a      	mov	r2, sp
 8010ba4:	f7ff ffc8 	bl	8010b38 <__swhatbuf_r>
 8010ba8:	9f00      	ldr	r7, [sp, #0]
 8010baa:	4605      	mov	r5, r0
 8010bac:	4639      	mov	r1, r7
 8010bae:	4630      	mov	r0, r6
 8010bb0:	f7fe ff1e 	bl	800f9f0 <_malloc_r>
 8010bb4:	b948      	cbnz	r0, 8010bca <__smakebuf_r+0x46>
 8010bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bba:	059a      	lsls	r2, r3, #22
 8010bbc:	d4ee      	bmi.n	8010b9c <__smakebuf_r+0x18>
 8010bbe:	f023 0303 	bic.w	r3, r3, #3
 8010bc2:	f043 0302 	orr.w	r3, r3, #2
 8010bc6:	81a3      	strh	r3, [r4, #12]
 8010bc8:	e7e2      	b.n	8010b90 <__smakebuf_r+0xc>
 8010bca:	89a3      	ldrh	r3, [r4, #12]
 8010bcc:	6020      	str	r0, [r4, #0]
 8010bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bd2:	81a3      	strh	r3, [r4, #12]
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010bda:	b15b      	cbz	r3, 8010bf4 <__smakebuf_r+0x70>
 8010bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010be0:	4630      	mov	r0, r6
 8010be2:	f000 f81d 	bl	8010c20 <_isatty_r>
 8010be6:	b128      	cbz	r0, 8010bf4 <__smakebuf_r+0x70>
 8010be8:	89a3      	ldrh	r3, [r4, #12]
 8010bea:	f023 0303 	bic.w	r3, r3, #3
 8010bee:	f043 0301 	orr.w	r3, r3, #1
 8010bf2:	81a3      	strh	r3, [r4, #12]
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	431d      	orrs	r5, r3
 8010bf8:	81a5      	strh	r5, [r4, #12]
 8010bfa:	e7cf      	b.n	8010b9c <__smakebuf_r+0x18>

08010bfc <_fstat_r>:
 8010bfc:	b538      	push	{r3, r4, r5, lr}
 8010bfe:	4d07      	ldr	r5, [pc, #28]	@ (8010c1c <_fstat_r+0x20>)
 8010c00:	2300      	movs	r3, #0
 8010c02:	4604      	mov	r4, r0
 8010c04:	4608      	mov	r0, r1
 8010c06:	4611      	mov	r1, r2
 8010c08:	602b      	str	r3, [r5, #0]
 8010c0a:	f7f3 fad1 	bl	80041b0 <_fstat>
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	d102      	bne.n	8010c18 <_fstat_r+0x1c>
 8010c12:	682b      	ldr	r3, [r5, #0]
 8010c14:	b103      	cbz	r3, 8010c18 <_fstat_r+0x1c>
 8010c16:	6023      	str	r3, [r4, #0]
 8010c18:	bd38      	pop	{r3, r4, r5, pc}
 8010c1a:	bf00      	nop
 8010c1c:	200027f4 	.word	0x200027f4

08010c20 <_isatty_r>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	4d06      	ldr	r5, [pc, #24]	@ (8010c3c <_isatty_r+0x1c>)
 8010c24:	2300      	movs	r3, #0
 8010c26:	4604      	mov	r4, r0
 8010c28:	4608      	mov	r0, r1
 8010c2a:	602b      	str	r3, [r5, #0]
 8010c2c:	f7f3 fad0 	bl	80041d0 <_isatty>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	d102      	bne.n	8010c3a <_isatty_r+0x1a>
 8010c34:	682b      	ldr	r3, [r5, #0]
 8010c36:	b103      	cbz	r3, 8010c3a <_isatty_r+0x1a>
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	bd38      	pop	{r3, r4, r5, pc}
 8010c3c:	200027f4 	.word	0x200027f4

08010c40 <abort>:
 8010c40:	b508      	push	{r3, lr}
 8010c42:	2006      	movs	r0, #6
 8010c44:	f000 f834 	bl	8010cb0 <raise>
 8010c48:	2001      	movs	r0, #1
 8010c4a:	f7f3 fa61 	bl	8004110 <_exit>

08010c4e <_malloc_usable_size_r>:
 8010c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c52:	1f18      	subs	r0, r3, #4
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	bfbc      	itt	lt
 8010c58:	580b      	ldrlt	r3, [r1, r0]
 8010c5a:	18c0      	addlt	r0, r0, r3
 8010c5c:	4770      	bx	lr

08010c5e <_raise_r>:
 8010c5e:	291f      	cmp	r1, #31
 8010c60:	b538      	push	{r3, r4, r5, lr}
 8010c62:	4605      	mov	r5, r0
 8010c64:	460c      	mov	r4, r1
 8010c66:	d904      	bls.n	8010c72 <_raise_r+0x14>
 8010c68:	2316      	movs	r3, #22
 8010c6a:	6003      	str	r3, [r0, #0]
 8010c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c70:	bd38      	pop	{r3, r4, r5, pc}
 8010c72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c74:	b112      	cbz	r2, 8010c7c <_raise_r+0x1e>
 8010c76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c7a:	b94b      	cbnz	r3, 8010c90 <_raise_r+0x32>
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	f000 f831 	bl	8010ce4 <_getpid_r>
 8010c82:	4622      	mov	r2, r4
 8010c84:	4601      	mov	r1, r0
 8010c86:	4628      	mov	r0, r5
 8010c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c8c:	f000 b818 	b.w	8010cc0 <_kill_r>
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d00a      	beq.n	8010caa <_raise_r+0x4c>
 8010c94:	1c59      	adds	r1, r3, #1
 8010c96:	d103      	bne.n	8010ca0 <_raise_r+0x42>
 8010c98:	2316      	movs	r3, #22
 8010c9a:	6003      	str	r3, [r0, #0]
 8010c9c:	2001      	movs	r0, #1
 8010c9e:	e7e7      	b.n	8010c70 <_raise_r+0x12>
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	4798      	blx	r3
 8010caa:	2000      	movs	r0, #0
 8010cac:	e7e0      	b.n	8010c70 <_raise_r+0x12>
	...

08010cb0 <raise>:
 8010cb0:	4b02      	ldr	r3, [pc, #8]	@ (8010cbc <raise+0xc>)
 8010cb2:	4601      	mov	r1, r0
 8010cb4:	6818      	ldr	r0, [r3, #0]
 8010cb6:	f7ff bfd2 	b.w	8010c5e <_raise_r>
 8010cba:	bf00      	nop
 8010cbc:	20000138 	.word	0x20000138

08010cc0 <_kill_r>:
 8010cc0:	b538      	push	{r3, r4, r5, lr}
 8010cc2:	4d07      	ldr	r5, [pc, #28]	@ (8010ce0 <_kill_r+0x20>)
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	4608      	mov	r0, r1
 8010cca:	4611      	mov	r1, r2
 8010ccc:	602b      	str	r3, [r5, #0]
 8010cce:	f7f3 fa0f 	bl	80040f0 <_kill>
 8010cd2:	1c43      	adds	r3, r0, #1
 8010cd4:	d102      	bne.n	8010cdc <_kill_r+0x1c>
 8010cd6:	682b      	ldr	r3, [r5, #0]
 8010cd8:	b103      	cbz	r3, 8010cdc <_kill_r+0x1c>
 8010cda:	6023      	str	r3, [r4, #0]
 8010cdc:	bd38      	pop	{r3, r4, r5, pc}
 8010cde:	bf00      	nop
 8010ce0:	200027f4 	.word	0x200027f4

08010ce4 <_getpid_r>:
 8010ce4:	f7f3 b9fc 	b.w	80040e0 <_getpid>

08010ce8 <asin>:
 8010ce8:	b538      	push	{r3, r4, r5, lr}
 8010cea:	ed2d 8b02 	vpush	{d8}
 8010cee:	ec55 4b10 	vmov	r4, r5, d0
 8010cf2:	f000 f9ed 	bl	80110d0 <__ieee754_asin>
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	462b      	mov	r3, r5
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	4629      	mov	r1, r5
 8010cfe:	eeb0 8a40 	vmov.f32	s16, s0
 8010d02:	eef0 8a60 	vmov.f32	s17, s1
 8010d06:	f7ef ff11 	bl	8000b2c <__aeabi_dcmpun>
 8010d0a:	b9a8      	cbnz	r0, 8010d38 <asin+0x50>
 8010d0c:	ec45 4b10 	vmov	d0, r4, r5
 8010d10:	f000 f820 	bl	8010d54 <fabs>
 8010d14:	4b0c      	ldr	r3, [pc, #48]	@ (8010d48 <asin+0x60>)
 8010d16:	ec51 0b10 	vmov	r0, r1, d0
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	f7ef fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8010d20:	b150      	cbz	r0, 8010d38 <asin+0x50>
 8010d22:	f7fd ff57 	bl	800ebd4 <__errno>
 8010d26:	ecbd 8b02 	vpop	{d8}
 8010d2a:	2321      	movs	r3, #33	@ 0x21
 8010d2c:	6003      	str	r3, [r0, #0]
 8010d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d32:	4806      	ldr	r0, [pc, #24]	@ (8010d4c <asin+0x64>)
 8010d34:	f000 b8e0 	b.w	8010ef8 <nan>
 8010d38:	eeb0 0a48 	vmov.f32	s0, s16
 8010d3c:	eef0 0a68 	vmov.f32	s1, s17
 8010d40:	ecbd 8b02 	vpop	{d8}
 8010d44:	bd38      	pop	{r3, r4, r5, pc}
 8010d46:	bf00      	nop
 8010d48:	3ff00000 	.word	0x3ff00000
 8010d4c:	080129c6 	.word	0x080129c6

08010d50 <atan2>:
 8010d50:	f000 bbc2 	b.w	80114d8 <__ieee754_atan2>

08010d54 <fabs>:
 8010d54:	ec51 0b10 	vmov	r0, r1, d0
 8010d58:	4602      	mov	r2, r0
 8010d5a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010d5e:	ec43 2b10 	vmov	d0, r2, r3
 8010d62:	4770      	bx	lr

08010d64 <expf>:
 8010d64:	b508      	push	{r3, lr}
 8010d66:	ed2d 8b02 	vpush	{d8}
 8010d6a:	eef0 8a40 	vmov.f32	s17, s0
 8010d6e:	f000 feb3 	bl	8011ad8 <__ieee754_expf>
 8010d72:	eeb0 8a40 	vmov.f32	s16, s0
 8010d76:	eeb0 0a68 	vmov.f32	s0, s17
 8010d7a:	f000 f8c5 	bl	8010f08 <finitef>
 8010d7e:	b160      	cbz	r0, 8010d9a <expf+0x36>
 8010d80:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8010dc0 <expf+0x5c>
 8010d84:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8c:	dd0a      	ble.n	8010da4 <expf+0x40>
 8010d8e:	f7fd ff21 	bl	800ebd4 <__errno>
 8010d92:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8010dc4 <expf+0x60>
 8010d96:	2322      	movs	r3, #34	@ 0x22
 8010d98:	6003      	str	r3, [r0, #0]
 8010d9a:	eeb0 0a48 	vmov.f32	s0, s16
 8010d9e:	ecbd 8b02 	vpop	{d8}
 8010da2:	bd08      	pop	{r3, pc}
 8010da4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010dc8 <expf+0x64>
 8010da8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db0:	d5f3      	bpl.n	8010d9a <expf+0x36>
 8010db2:	f7fd ff0f 	bl	800ebd4 <__errno>
 8010db6:	2322      	movs	r3, #34	@ 0x22
 8010db8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8010dcc <expf+0x68>
 8010dbc:	6003      	str	r3, [r0, #0]
 8010dbe:	e7ec      	b.n	8010d9a <expf+0x36>
 8010dc0:	42b17217 	.word	0x42b17217
 8010dc4:	7f800000 	.word	0x7f800000
 8010dc8:	c2cff1b5 	.word	0xc2cff1b5
 8010dcc:	00000000 	.word	0x00000000

08010dd0 <cosf>:
 8010dd0:	ee10 3a10 	vmov	r3, s0
 8010dd4:	b507      	push	{r0, r1, r2, lr}
 8010dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8010e50 <cosf+0x80>)
 8010dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d806      	bhi.n	8010dee <cosf+0x1e>
 8010de0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010e54 <cosf+0x84>
 8010de4:	b003      	add	sp, #12
 8010de6:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dea:	f000 bdd5 	b.w	8011998 <__kernel_cosf>
 8010dee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010df2:	d304      	bcc.n	8010dfe <cosf+0x2e>
 8010df4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010df8:	b003      	add	sp, #12
 8010dfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dfe:	4668      	mov	r0, sp
 8010e00:	f000 ff38 	bl	8011c74 <__ieee754_rem_pio2f>
 8010e04:	f000 0003 	and.w	r0, r0, #3
 8010e08:	2801      	cmp	r0, #1
 8010e0a:	d009      	beq.n	8010e20 <cosf+0x50>
 8010e0c:	2802      	cmp	r0, #2
 8010e0e:	d010      	beq.n	8010e32 <cosf+0x62>
 8010e10:	b9b0      	cbnz	r0, 8010e40 <cosf+0x70>
 8010e12:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e16:	ed9d 0a00 	vldr	s0, [sp]
 8010e1a:	f000 fdbd 	bl	8011998 <__kernel_cosf>
 8010e1e:	e7eb      	b.n	8010df8 <cosf+0x28>
 8010e20:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e24:	ed9d 0a00 	vldr	s0, [sp]
 8010e28:	f000 fe0e 	bl	8011a48 <__kernel_sinf>
 8010e2c:	eeb1 0a40 	vneg.f32	s0, s0
 8010e30:	e7e2      	b.n	8010df8 <cosf+0x28>
 8010e32:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e36:	ed9d 0a00 	vldr	s0, [sp]
 8010e3a:	f000 fdad 	bl	8011998 <__kernel_cosf>
 8010e3e:	e7f5      	b.n	8010e2c <cosf+0x5c>
 8010e40:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e44:	ed9d 0a00 	vldr	s0, [sp]
 8010e48:	2001      	movs	r0, #1
 8010e4a:	f000 fdfd 	bl	8011a48 <__kernel_sinf>
 8010e4e:	e7d3      	b.n	8010df8 <cosf+0x28>
 8010e50:	3f490fd8 	.word	0x3f490fd8
 8010e54:	00000000 	.word	0x00000000

08010e58 <fabsf>:
 8010e58:	ee10 3a10 	vmov	r3, s0
 8010e5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e60:	ee00 3a10 	vmov	s0, r3
 8010e64:	4770      	bx	lr
	...

08010e68 <sinf>:
 8010e68:	ee10 3a10 	vmov	r3, s0
 8010e6c:	b507      	push	{r0, r1, r2, lr}
 8010e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8010eec <sinf+0x84>)
 8010e70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d807      	bhi.n	8010e88 <sinf+0x20>
 8010e78:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8010ef0 <sinf+0x88>
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	b003      	add	sp, #12
 8010e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e84:	f000 bde0 	b.w	8011a48 <__kernel_sinf>
 8010e88:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010e8c:	d304      	bcc.n	8010e98 <sinf+0x30>
 8010e8e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010e92:	b003      	add	sp, #12
 8010e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e98:	4668      	mov	r0, sp
 8010e9a:	f000 feeb 	bl	8011c74 <__ieee754_rem_pio2f>
 8010e9e:	f000 0003 	and.w	r0, r0, #3
 8010ea2:	2801      	cmp	r0, #1
 8010ea4:	d00a      	beq.n	8010ebc <sinf+0x54>
 8010ea6:	2802      	cmp	r0, #2
 8010ea8:	d00f      	beq.n	8010eca <sinf+0x62>
 8010eaa:	b9c0      	cbnz	r0, 8010ede <sinf+0x76>
 8010eac:	eddd 0a01 	vldr	s1, [sp, #4]
 8010eb0:	ed9d 0a00 	vldr	s0, [sp]
 8010eb4:	2001      	movs	r0, #1
 8010eb6:	f000 fdc7 	bl	8011a48 <__kernel_sinf>
 8010eba:	e7ea      	b.n	8010e92 <sinf+0x2a>
 8010ebc:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ec0:	ed9d 0a00 	vldr	s0, [sp]
 8010ec4:	f000 fd68 	bl	8011998 <__kernel_cosf>
 8010ec8:	e7e3      	b.n	8010e92 <sinf+0x2a>
 8010eca:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ece:	ed9d 0a00 	vldr	s0, [sp]
 8010ed2:	2001      	movs	r0, #1
 8010ed4:	f000 fdb8 	bl	8011a48 <__kernel_sinf>
 8010ed8:	eeb1 0a40 	vneg.f32	s0, s0
 8010edc:	e7d9      	b.n	8010e92 <sinf+0x2a>
 8010ede:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ee2:	ed9d 0a00 	vldr	s0, [sp]
 8010ee6:	f000 fd57 	bl	8011998 <__kernel_cosf>
 8010eea:	e7f5      	b.n	8010ed8 <sinf+0x70>
 8010eec:	3f490fd8 	.word	0x3f490fd8
	...

08010ef8 <nan>:
 8010ef8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010f00 <nan+0x8>
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	00000000 	.word	0x00000000
 8010f04:	7ff80000 	.word	0x7ff80000

08010f08 <finitef>:
 8010f08:	ee10 3a10 	vmov	r3, s0
 8010f0c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010f10:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010f14:	bfac      	ite	ge
 8010f16:	2000      	movge	r0, #0
 8010f18:	2001      	movlt	r0, #1
 8010f1a:	4770      	bx	lr

08010f1c <__ieee754_sqrt>:
 8010f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f20:	4a68      	ldr	r2, [pc, #416]	@ (80110c4 <__ieee754_sqrt+0x1a8>)
 8010f22:	ec55 4b10 	vmov	r4, r5, d0
 8010f26:	43aa      	bics	r2, r5
 8010f28:	462b      	mov	r3, r5
 8010f2a:	4621      	mov	r1, r4
 8010f2c:	d110      	bne.n	8010f50 <__ieee754_sqrt+0x34>
 8010f2e:	4622      	mov	r2, r4
 8010f30:	4620      	mov	r0, r4
 8010f32:	4629      	mov	r1, r5
 8010f34:	f7ef fb60 	bl	80005f8 <__aeabi_dmul>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	4629      	mov	r1, r5
 8010f40:	f7ef f9a4 	bl	800028c <__adddf3>
 8010f44:	4604      	mov	r4, r0
 8010f46:	460d      	mov	r5, r1
 8010f48:	ec45 4b10 	vmov	d0, r4, r5
 8010f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f50:	2d00      	cmp	r5, #0
 8010f52:	dc0e      	bgt.n	8010f72 <__ieee754_sqrt+0x56>
 8010f54:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010f58:	4322      	orrs	r2, r4
 8010f5a:	d0f5      	beq.n	8010f48 <__ieee754_sqrt+0x2c>
 8010f5c:	b19d      	cbz	r5, 8010f86 <__ieee754_sqrt+0x6a>
 8010f5e:	4622      	mov	r2, r4
 8010f60:	4620      	mov	r0, r4
 8010f62:	4629      	mov	r1, r5
 8010f64:	f7ef f990 	bl	8000288 <__aeabi_dsub>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	f7ef fc6e 	bl	800084c <__aeabi_ddiv>
 8010f70:	e7e8      	b.n	8010f44 <__ieee754_sqrt+0x28>
 8010f72:	152a      	asrs	r2, r5, #20
 8010f74:	d115      	bne.n	8010fa2 <__ieee754_sqrt+0x86>
 8010f76:	2000      	movs	r0, #0
 8010f78:	e009      	b.n	8010f8e <__ieee754_sqrt+0x72>
 8010f7a:	0acb      	lsrs	r3, r1, #11
 8010f7c:	3a15      	subs	r2, #21
 8010f7e:	0549      	lsls	r1, r1, #21
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d0fa      	beq.n	8010f7a <__ieee754_sqrt+0x5e>
 8010f84:	e7f7      	b.n	8010f76 <__ieee754_sqrt+0x5a>
 8010f86:	462a      	mov	r2, r5
 8010f88:	e7fa      	b.n	8010f80 <__ieee754_sqrt+0x64>
 8010f8a:	005b      	lsls	r3, r3, #1
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	02dc      	lsls	r4, r3, #11
 8010f90:	d5fb      	bpl.n	8010f8a <__ieee754_sqrt+0x6e>
 8010f92:	1e44      	subs	r4, r0, #1
 8010f94:	1b12      	subs	r2, r2, r4
 8010f96:	f1c0 0420 	rsb	r4, r0, #32
 8010f9a:	fa21 f404 	lsr.w	r4, r1, r4
 8010f9e:	4323      	orrs	r3, r4
 8010fa0:	4081      	lsls	r1, r0
 8010fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fa6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010fae:	07d2      	lsls	r2, r2, #31
 8010fb0:	bf5c      	itt	pl
 8010fb2:	005b      	lslpl	r3, r3, #1
 8010fb4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010fb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010fbc:	bf58      	it	pl
 8010fbe:	0049      	lslpl	r1, r1, #1
 8010fc0:	2600      	movs	r6, #0
 8010fc2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010fc6:	106d      	asrs	r5, r5, #1
 8010fc8:	0049      	lsls	r1, r1, #1
 8010fca:	2016      	movs	r0, #22
 8010fcc:	4632      	mov	r2, r6
 8010fce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010fd2:	1917      	adds	r7, r2, r4
 8010fd4:	429f      	cmp	r7, r3
 8010fd6:	bfde      	ittt	le
 8010fd8:	193a      	addle	r2, r7, r4
 8010fda:	1bdb      	suble	r3, r3, r7
 8010fdc:	1936      	addle	r6, r6, r4
 8010fde:	0fcf      	lsrs	r7, r1, #31
 8010fe0:	3801      	subs	r0, #1
 8010fe2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010fe6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010fea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010fee:	d1f0      	bne.n	8010fd2 <__ieee754_sqrt+0xb6>
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	2720      	movs	r7, #32
 8010ff4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	eb00 0e0c 	add.w	lr, r0, ip
 8010ffe:	db02      	blt.n	8011006 <__ieee754_sqrt+0xea>
 8011000:	d113      	bne.n	801102a <__ieee754_sqrt+0x10e>
 8011002:	458e      	cmp	lr, r1
 8011004:	d811      	bhi.n	801102a <__ieee754_sqrt+0x10e>
 8011006:	f1be 0f00 	cmp.w	lr, #0
 801100a:	eb0e 000c 	add.w	r0, lr, ip
 801100e:	da42      	bge.n	8011096 <__ieee754_sqrt+0x17a>
 8011010:	2800      	cmp	r0, #0
 8011012:	db40      	blt.n	8011096 <__ieee754_sqrt+0x17a>
 8011014:	f102 0801 	add.w	r8, r2, #1
 8011018:	1a9b      	subs	r3, r3, r2
 801101a:	458e      	cmp	lr, r1
 801101c:	bf88      	it	hi
 801101e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011022:	eba1 010e 	sub.w	r1, r1, lr
 8011026:	4464      	add	r4, ip
 8011028:	4642      	mov	r2, r8
 801102a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801102e:	3f01      	subs	r7, #1
 8011030:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011034:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011038:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801103c:	d1dc      	bne.n	8010ff8 <__ieee754_sqrt+0xdc>
 801103e:	4319      	orrs	r1, r3
 8011040:	d01b      	beq.n	801107a <__ieee754_sqrt+0x15e>
 8011042:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80110c8 <__ieee754_sqrt+0x1ac>
 8011046:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80110cc <__ieee754_sqrt+0x1b0>
 801104a:	e9da 0100 	ldrd	r0, r1, [sl]
 801104e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011052:	f7ef f919 	bl	8000288 <__aeabi_dsub>
 8011056:	e9da 8900 	ldrd	r8, r9, [sl]
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	4640      	mov	r0, r8
 8011060:	4649      	mov	r1, r9
 8011062:	f7ef fd45 	bl	8000af0 <__aeabi_dcmple>
 8011066:	b140      	cbz	r0, 801107a <__ieee754_sqrt+0x15e>
 8011068:	f1b4 3fff 	cmp.w	r4, #4294967295
 801106c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011070:	e9db 2300 	ldrd	r2, r3, [fp]
 8011074:	d111      	bne.n	801109a <__ieee754_sqrt+0x17e>
 8011076:	3601      	adds	r6, #1
 8011078:	463c      	mov	r4, r7
 801107a:	1072      	asrs	r2, r6, #1
 801107c:	0863      	lsrs	r3, r4, #1
 801107e:	07f1      	lsls	r1, r6, #31
 8011080:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011084:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011088:	bf48      	it	mi
 801108a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801108e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8011092:	4618      	mov	r0, r3
 8011094:	e756      	b.n	8010f44 <__ieee754_sqrt+0x28>
 8011096:	4690      	mov	r8, r2
 8011098:	e7be      	b.n	8011018 <__ieee754_sqrt+0xfc>
 801109a:	f7ef f8f7 	bl	800028c <__adddf3>
 801109e:	e9da 8900 	ldrd	r8, r9, [sl]
 80110a2:	4602      	mov	r2, r0
 80110a4:	460b      	mov	r3, r1
 80110a6:	4640      	mov	r0, r8
 80110a8:	4649      	mov	r1, r9
 80110aa:	f7ef fd17 	bl	8000adc <__aeabi_dcmplt>
 80110ae:	b120      	cbz	r0, 80110ba <__ieee754_sqrt+0x19e>
 80110b0:	1ca0      	adds	r0, r4, #2
 80110b2:	bf08      	it	eq
 80110b4:	3601      	addeq	r6, #1
 80110b6:	3402      	adds	r4, #2
 80110b8:	e7df      	b.n	801107a <__ieee754_sqrt+0x15e>
 80110ba:	1c63      	adds	r3, r4, #1
 80110bc:	f023 0401 	bic.w	r4, r3, #1
 80110c0:	e7db      	b.n	801107a <__ieee754_sqrt+0x15e>
 80110c2:	bf00      	nop
 80110c4:	7ff00000 	.word	0x7ff00000
 80110c8:	20000300 	.word	0x20000300
 80110cc:	200002f8 	.word	0x200002f8

080110d0 <__ieee754_asin>:
 80110d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	ec55 4b10 	vmov	r4, r5, d0
 80110d8:	4bc7      	ldr	r3, [pc, #796]	@ (80113f8 <__ieee754_asin+0x328>)
 80110da:	b087      	sub	sp, #28
 80110dc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80110e0:	429e      	cmp	r6, r3
 80110e2:	9501      	str	r5, [sp, #4]
 80110e4:	d92d      	bls.n	8011142 <__ieee754_asin+0x72>
 80110e6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80110ea:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80110ee:	4326      	orrs	r6, r4
 80110f0:	d116      	bne.n	8011120 <__ieee754_asin+0x50>
 80110f2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8011390 <__ieee754_asin+0x2c0>)
 80110f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f8:	4620      	mov	r0, r4
 80110fa:	4629      	mov	r1, r5
 80110fc:	f7ef fa7c 	bl	80005f8 <__aeabi_dmul>
 8011100:	a3a5      	add	r3, pc, #660	@ (adr r3, 8011398 <__ieee754_asin+0x2c8>)
 8011102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011106:	4606      	mov	r6, r0
 8011108:	460f      	mov	r7, r1
 801110a:	4620      	mov	r0, r4
 801110c:	4629      	mov	r1, r5
 801110e:	f7ef fa73 	bl	80005f8 <__aeabi_dmul>
 8011112:	4602      	mov	r2, r0
 8011114:	460b      	mov	r3, r1
 8011116:	4630      	mov	r0, r6
 8011118:	4639      	mov	r1, r7
 801111a:	f7ef f8b7 	bl	800028c <__adddf3>
 801111e:	e009      	b.n	8011134 <__ieee754_asin+0x64>
 8011120:	4622      	mov	r2, r4
 8011122:	462b      	mov	r3, r5
 8011124:	4620      	mov	r0, r4
 8011126:	4629      	mov	r1, r5
 8011128:	f7ef f8ae 	bl	8000288 <__aeabi_dsub>
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	f7ef fb8c 	bl	800084c <__aeabi_ddiv>
 8011134:	4604      	mov	r4, r0
 8011136:	460d      	mov	r5, r1
 8011138:	ec45 4b10 	vmov	d0, r4, r5
 801113c:	b007      	add	sp, #28
 801113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011142:	4bae      	ldr	r3, [pc, #696]	@ (80113fc <__ieee754_asin+0x32c>)
 8011144:	429e      	cmp	r6, r3
 8011146:	d810      	bhi.n	801116a <__ieee754_asin+0x9a>
 8011148:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 801114c:	f080 80ad 	bcs.w	80112aa <__ieee754_asin+0x1da>
 8011150:	a393      	add	r3, pc, #588	@ (adr r3, 80113a0 <__ieee754_asin+0x2d0>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	4620      	mov	r0, r4
 8011158:	4629      	mov	r1, r5
 801115a:	f7ef f897 	bl	800028c <__adddf3>
 801115e:	4ba8      	ldr	r3, [pc, #672]	@ (8011400 <__ieee754_asin+0x330>)
 8011160:	2200      	movs	r2, #0
 8011162:	f7ef fcd9 	bl	8000b18 <__aeabi_dcmpgt>
 8011166:	2800      	cmp	r0, #0
 8011168:	d1e6      	bne.n	8011138 <__ieee754_asin+0x68>
 801116a:	ec45 4b10 	vmov	d0, r4, r5
 801116e:	f7ff fdf1 	bl	8010d54 <fabs>
 8011172:	49a3      	ldr	r1, [pc, #652]	@ (8011400 <__ieee754_asin+0x330>)
 8011174:	ec53 2b10 	vmov	r2, r3, d0
 8011178:	2000      	movs	r0, #0
 801117a:	f7ef f885 	bl	8000288 <__aeabi_dsub>
 801117e:	4ba1      	ldr	r3, [pc, #644]	@ (8011404 <__ieee754_asin+0x334>)
 8011180:	2200      	movs	r2, #0
 8011182:	f7ef fa39 	bl	80005f8 <__aeabi_dmul>
 8011186:	a388      	add	r3, pc, #544	@ (adr r3, 80113a8 <__ieee754_asin+0x2d8>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	4604      	mov	r4, r0
 801118e:	460d      	mov	r5, r1
 8011190:	f7ef fa32 	bl	80005f8 <__aeabi_dmul>
 8011194:	a386      	add	r3, pc, #536	@ (adr r3, 80113b0 <__ieee754_asin+0x2e0>)
 8011196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119a:	f7ef f877 	bl	800028c <__adddf3>
 801119e:	4622      	mov	r2, r4
 80111a0:	462b      	mov	r3, r5
 80111a2:	f7ef fa29 	bl	80005f8 <__aeabi_dmul>
 80111a6:	a384      	add	r3, pc, #528	@ (adr r3, 80113b8 <__ieee754_asin+0x2e8>)
 80111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ac:	f7ef f86c 	bl	8000288 <__aeabi_dsub>
 80111b0:	4622      	mov	r2, r4
 80111b2:	462b      	mov	r3, r5
 80111b4:	f7ef fa20 	bl	80005f8 <__aeabi_dmul>
 80111b8:	a381      	add	r3, pc, #516	@ (adr r3, 80113c0 <__ieee754_asin+0x2f0>)
 80111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111be:	f7ef f865 	bl	800028c <__adddf3>
 80111c2:	4622      	mov	r2, r4
 80111c4:	462b      	mov	r3, r5
 80111c6:	f7ef fa17 	bl	80005f8 <__aeabi_dmul>
 80111ca:	a37f      	add	r3, pc, #508	@ (adr r3, 80113c8 <__ieee754_asin+0x2f8>)
 80111cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d0:	f7ef f85a 	bl	8000288 <__aeabi_dsub>
 80111d4:	4622      	mov	r2, r4
 80111d6:	462b      	mov	r3, r5
 80111d8:	f7ef fa0e 	bl	80005f8 <__aeabi_dmul>
 80111dc:	a37c      	add	r3, pc, #496	@ (adr r3, 80113d0 <__ieee754_asin+0x300>)
 80111de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e2:	f7ef f853 	bl	800028c <__adddf3>
 80111e6:	4622      	mov	r2, r4
 80111e8:	462b      	mov	r3, r5
 80111ea:	f7ef fa05 	bl	80005f8 <__aeabi_dmul>
 80111ee:	a37a      	add	r3, pc, #488	@ (adr r3, 80113d8 <__ieee754_asin+0x308>)
 80111f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111f8:	4620      	mov	r0, r4
 80111fa:	4629      	mov	r1, r5
 80111fc:	f7ef f9fc 	bl	80005f8 <__aeabi_dmul>
 8011200:	a377      	add	r3, pc, #476	@ (adr r3, 80113e0 <__ieee754_asin+0x310>)
 8011202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011206:	f7ef f83f 	bl	8000288 <__aeabi_dsub>
 801120a:	4622      	mov	r2, r4
 801120c:	462b      	mov	r3, r5
 801120e:	f7ef f9f3 	bl	80005f8 <__aeabi_dmul>
 8011212:	a375      	add	r3, pc, #468	@ (adr r3, 80113e8 <__ieee754_asin+0x318>)
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	f7ef f838 	bl	800028c <__adddf3>
 801121c:	4622      	mov	r2, r4
 801121e:	462b      	mov	r3, r5
 8011220:	f7ef f9ea 	bl	80005f8 <__aeabi_dmul>
 8011224:	a372      	add	r3, pc, #456	@ (adr r3, 80113f0 <__ieee754_asin+0x320>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	f7ef f82d 	bl	8000288 <__aeabi_dsub>
 801122e:	4622      	mov	r2, r4
 8011230:	462b      	mov	r3, r5
 8011232:	f7ef f9e1 	bl	80005f8 <__aeabi_dmul>
 8011236:	4b72      	ldr	r3, [pc, #456]	@ (8011400 <__ieee754_asin+0x330>)
 8011238:	2200      	movs	r2, #0
 801123a:	f7ef f827 	bl	800028c <__adddf3>
 801123e:	ec45 4b10 	vmov	d0, r4, r5
 8011242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011246:	f7ff fe69 	bl	8010f1c <__ieee754_sqrt>
 801124a:	4b6f      	ldr	r3, [pc, #444]	@ (8011408 <__ieee754_asin+0x338>)
 801124c:	429e      	cmp	r6, r3
 801124e:	ec5b ab10 	vmov	sl, fp, d0
 8011252:	f240 80db 	bls.w	801140c <__ieee754_asin+0x33c>
 8011256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801125a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801125e:	f7ef faf5 	bl	800084c <__aeabi_ddiv>
 8011262:	4652      	mov	r2, sl
 8011264:	465b      	mov	r3, fp
 8011266:	f7ef f9c7 	bl	80005f8 <__aeabi_dmul>
 801126a:	4652      	mov	r2, sl
 801126c:	465b      	mov	r3, fp
 801126e:	f7ef f80d 	bl	800028c <__adddf3>
 8011272:	4602      	mov	r2, r0
 8011274:	460b      	mov	r3, r1
 8011276:	f7ef f809 	bl	800028c <__adddf3>
 801127a:	a347      	add	r3, pc, #284	@ (adr r3, 8011398 <__ieee754_asin+0x2c8>)
 801127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011280:	f7ef f802 	bl	8000288 <__aeabi_dsub>
 8011284:	4602      	mov	r2, r0
 8011286:	460b      	mov	r3, r1
 8011288:	a141      	add	r1, pc, #260	@ (adr r1, 8011390 <__ieee754_asin+0x2c0>)
 801128a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801128e:	f7ee fffb 	bl	8000288 <__aeabi_dsub>
 8011292:	9b01      	ldr	r3, [sp, #4]
 8011294:	2b00      	cmp	r3, #0
 8011296:	bfdc      	itt	le
 8011298:	4602      	movle	r2, r0
 801129a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801129e:	4604      	mov	r4, r0
 80112a0:	460d      	mov	r5, r1
 80112a2:	bfdc      	itt	le
 80112a4:	4614      	movle	r4, r2
 80112a6:	461d      	movle	r5, r3
 80112a8:	e746      	b.n	8011138 <__ieee754_asin+0x68>
 80112aa:	4622      	mov	r2, r4
 80112ac:	462b      	mov	r3, r5
 80112ae:	4620      	mov	r0, r4
 80112b0:	4629      	mov	r1, r5
 80112b2:	f7ef f9a1 	bl	80005f8 <__aeabi_dmul>
 80112b6:	a33c      	add	r3, pc, #240	@ (adr r3, 80113a8 <__ieee754_asin+0x2d8>)
 80112b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112bc:	4606      	mov	r6, r0
 80112be:	460f      	mov	r7, r1
 80112c0:	f7ef f99a 	bl	80005f8 <__aeabi_dmul>
 80112c4:	a33a      	add	r3, pc, #232	@ (adr r3, 80113b0 <__ieee754_asin+0x2e0>)
 80112c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ca:	f7ee ffdf 	bl	800028c <__adddf3>
 80112ce:	4632      	mov	r2, r6
 80112d0:	463b      	mov	r3, r7
 80112d2:	f7ef f991 	bl	80005f8 <__aeabi_dmul>
 80112d6:	a338      	add	r3, pc, #224	@ (adr r3, 80113b8 <__ieee754_asin+0x2e8>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f7ee ffd4 	bl	8000288 <__aeabi_dsub>
 80112e0:	4632      	mov	r2, r6
 80112e2:	463b      	mov	r3, r7
 80112e4:	f7ef f988 	bl	80005f8 <__aeabi_dmul>
 80112e8:	a335      	add	r3, pc, #212	@ (adr r3, 80113c0 <__ieee754_asin+0x2f0>)
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	f7ee ffcd 	bl	800028c <__adddf3>
 80112f2:	4632      	mov	r2, r6
 80112f4:	463b      	mov	r3, r7
 80112f6:	f7ef f97f 	bl	80005f8 <__aeabi_dmul>
 80112fa:	a333      	add	r3, pc, #204	@ (adr r3, 80113c8 <__ieee754_asin+0x2f8>)
 80112fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011300:	f7ee ffc2 	bl	8000288 <__aeabi_dsub>
 8011304:	4632      	mov	r2, r6
 8011306:	463b      	mov	r3, r7
 8011308:	f7ef f976 	bl	80005f8 <__aeabi_dmul>
 801130c:	a330      	add	r3, pc, #192	@ (adr r3, 80113d0 <__ieee754_asin+0x300>)
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	f7ee ffbb 	bl	800028c <__adddf3>
 8011316:	4632      	mov	r2, r6
 8011318:	463b      	mov	r3, r7
 801131a:	f7ef f96d 	bl	80005f8 <__aeabi_dmul>
 801131e:	a32e      	add	r3, pc, #184	@ (adr r3, 80113d8 <__ieee754_asin+0x308>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	4680      	mov	r8, r0
 8011326:	4689      	mov	r9, r1
 8011328:	4630      	mov	r0, r6
 801132a:	4639      	mov	r1, r7
 801132c:	f7ef f964 	bl	80005f8 <__aeabi_dmul>
 8011330:	a32b      	add	r3, pc, #172	@ (adr r3, 80113e0 <__ieee754_asin+0x310>)
 8011332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011336:	f7ee ffa7 	bl	8000288 <__aeabi_dsub>
 801133a:	4632      	mov	r2, r6
 801133c:	463b      	mov	r3, r7
 801133e:	f7ef f95b 	bl	80005f8 <__aeabi_dmul>
 8011342:	a329      	add	r3, pc, #164	@ (adr r3, 80113e8 <__ieee754_asin+0x318>)
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f7ee ffa0 	bl	800028c <__adddf3>
 801134c:	4632      	mov	r2, r6
 801134e:	463b      	mov	r3, r7
 8011350:	f7ef f952 	bl	80005f8 <__aeabi_dmul>
 8011354:	a326      	add	r3, pc, #152	@ (adr r3, 80113f0 <__ieee754_asin+0x320>)
 8011356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135a:	f7ee ff95 	bl	8000288 <__aeabi_dsub>
 801135e:	4632      	mov	r2, r6
 8011360:	463b      	mov	r3, r7
 8011362:	f7ef f949 	bl	80005f8 <__aeabi_dmul>
 8011366:	4b26      	ldr	r3, [pc, #152]	@ (8011400 <__ieee754_asin+0x330>)
 8011368:	2200      	movs	r2, #0
 801136a:	f7ee ff8f 	bl	800028c <__adddf3>
 801136e:	4602      	mov	r2, r0
 8011370:	460b      	mov	r3, r1
 8011372:	4640      	mov	r0, r8
 8011374:	4649      	mov	r1, r9
 8011376:	f7ef fa69 	bl	800084c <__aeabi_ddiv>
 801137a:	4622      	mov	r2, r4
 801137c:	462b      	mov	r3, r5
 801137e:	f7ef f93b 	bl	80005f8 <__aeabi_dmul>
 8011382:	4602      	mov	r2, r0
 8011384:	460b      	mov	r3, r1
 8011386:	4620      	mov	r0, r4
 8011388:	4629      	mov	r1, r5
 801138a:	e6c6      	b.n	801111a <__ieee754_asin+0x4a>
 801138c:	f3af 8000 	nop.w
 8011390:	54442d18 	.word	0x54442d18
 8011394:	3ff921fb 	.word	0x3ff921fb
 8011398:	33145c07 	.word	0x33145c07
 801139c:	3c91a626 	.word	0x3c91a626
 80113a0:	8800759c 	.word	0x8800759c
 80113a4:	7e37e43c 	.word	0x7e37e43c
 80113a8:	0dfdf709 	.word	0x0dfdf709
 80113ac:	3f023de1 	.word	0x3f023de1
 80113b0:	7501b288 	.word	0x7501b288
 80113b4:	3f49efe0 	.word	0x3f49efe0
 80113b8:	b5688f3b 	.word	0xb5688f3b
 80113bc:	3fa48228 	.word	0x3fa48228
 80113c0:	0e884455 	.word	0x0e884455
 80113c4:	3fc9c155 	.word	0x3fc9c155
 80113c8:	03eb6f7d 	.word	0x03eb6f7d
 80113cc:	3fd4d612 	.word	0x3fd4d612
 80113d0:	55555555 	.word	0x55555555
 80113d4:	3fc55555 	.word	0x3fc55555
 80113d8:	b12e9282 	.word	0xb12e9282
 80113dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80113e0:	1b8d0159 	.word	0x1b8d0159
 80113e4:	3fe6066c 	.word	0x3fe6066c
 80113e8:	9c598ac8 	.word	0x9c598ac8
 80113ec:	40002ae5 	.word	0x40002ae5
 80113f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80113f4:	40033a27 	.word	0x40033a27
 80113f8:	3fefffff 	.word	0x3fefffff
 80113fc:	3fdfffff 	.word	0x3fdfffff
 8011400:	3ff00000 	.word	0x3ff00000
 8011404:	3fe00000 	.word	0x3fe00000
 8011408:	3fef3332 	.word	0x3fef3332
 801140c:	4652      	mov	r2, sl
 801140e:	465b      	mov	r3, fp
 8011410:	4650      	mov	r0, sl
 8011412:	4659      	mov	r1, fp
 8011414:	f7ee ff3a 	bl	800028c <__adddf3>
 8011418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801141c:	4606      	mov	r6, r0
 801141e:	460f      	mov	r7, r1
 8011420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011424:	f7ef fa12 	bl	800084c <__aeabi_ddiv>
 8011428:	4602      	mov	r2, r0
 801142a:	460b      	mov	r3, r1
 801142c:	4630      	mov	r0, r6
 801142e:	4639      	mov	r1, r7
 8011430:	f7ef f8e2 	bl	80005f8 <__aeabi_dmul>
 8011434:	f04f 0800 	mov.w	r8, #0
 8011438:	4606      	mov	r6, r0
 801143a:	460f      	mov	r7, r1
 801143c:	4642      	mov	r2, r8
 801143e:	465b      	mov	r3, fp
 8011440:	4640      	mov	r0, r8
 8011442:	4659      	mov	r1, fp
 8011444:	f7ef f8d8 	bl	80005f8 <__aeabi_dmul>
 8011448:	4602      	mov	r2, r0
 801144a:	460b      	mov	r3, r1
 801144c:	4620      	mov	r0, r4
 801144e:	4629      	mov	r1, r5
 8011450:	f7ee ff1a 	bl	8000288 <__aeabi_dsub>
 8011454:	4642      	mov	r2, r8
 8011456:	4604      	mov	r4, r0
 8011458:	460d      	mov	r5, r1
 801145a:	465b      	mov	r3, fp
 801145c:	4650      	mov	r0, sl
 801145e:	4659      	mov	r1, fp
 8011460:	f7ee ff14 	bl	800028c <__adddf3>
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	4620      	mov	r0, r4
 801146a:	4629      	mov	r1, r5
 801146c:	f7ef f9ee 	bl	800084c <__aeabi_ddiv>
 8011470:	4602      	mov	r2, r0
 8011472:	460b      	mov	r3, r1
 8011474:	f7ee ff0a 	bl	800028c <__adddf3>
 8011478:	4602      	mov	r2, r0
 801147a:	460b      	mov	r3, r1
 801147c:	a112      	add	r1, pc, #72	@ (adr r1, 80114c8 <__ieee754_asin+0x3f8>)
 801147e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011482:	f7ee ff01 	bl	8000288 <__aeabi_dsub>
 8011486:	4602      	mov	r2, r0
 8011488:	460b      	mov	r3, r1
 801148a:	4630      	mov	r0, r6
 801148c:	4639      	mov	r1, r7
 801148e:	f7ee fefb 	bl	8000288 <__aeabi_dsub>
 8011492:	4642      	mov	r2, r8
 8011494:	4604      	mov	r4, r0
 8011496:	460d      	mov	r5, r1
 8011498:	465b      	mov	r3, fp
 801149a:	4640      	mov	r0, r8
 801149c:	4659      	mov	r1, fp
 801149e:	f7ee fef5 	bl	800028c <__adddf3>
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80114d0 <__ieee754_asin+0x400>)
 80114a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114ac:	f7ee feec 	bl	8000288 <__aeabi_dsub>
 80114b0:	4602      	mov	r2, r0
 80114b2:	460b      	mov	r3, r1
 80114b4:	4620      	mov	r0, r4
 80114b6:	4629      	mov	r1, r5
 80114b8:	f7ee fee6 	bl	8000288 <__aeabi_dsub>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	a103      	add	r1, pc, #12	@ (adr r1, 80114d0 <__ieee754_asin+0x400>)
 80114c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114c6:	e6e2      	b.n	801128e <__ieee754_asin+0x1be>
 80114c8:	33145c07 	.word	0x33145c07
 80114cc:	3c91a626 	.word	0x3c91a626
 80114d0:	54442d18 	.word	0x54442d18
 80114d4:	3fe921fb 	.word	0x3fe921fb

080114d8 <__ieee754_atan2>:
 80114d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114dc:	ec57 6b11 	vmov	r6, r7, d1
 80114e0:	4273      	negs	r3, r6
 80114e2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8011660 <__ieee754_atan2+0x188>
 80114e6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80114ea:	4333      	orrs	r3, r6
 80114ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80114f0:	4543      	cmp	r3, r8
 80114f2:	ec51 0b10 	vmov	r0, r1, d0
 80114f6:	4635      	mov	r5, r6
 80114f8:	d809      	bhi.n	801150e <__ieee754_atan2+0x36>
 80114fa:	4244      	negs	r4, r0
 80114fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011500:	4304      	orrs	r4, r0
 8011502:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011506:	4544      	cmp	r4, r8
 8011508:	468e      	mov	lr, r1
 801150a:	4681      	mov	r9, r0
 801150c:	d907      	bls.n	801151e <__ieee754_atan2+0x46>
 801150e:	4632      	mov	r2, r6
 8011510:	463b      	mov	r3, r7
 8011512:	f7ee febb 	bl	800028c <__adddf3>
 8011516:	ec41 0b10 	vmov	d0, r0, r1
 801151a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801151e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8011522:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8011526:	4334      	orrs	r4, r6
 8011528:	d103      	bne.n	8011532 <__ieee754_atan2+0x5a>
 801152a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801152e:	f000 b89b 	b.w	8011668 <atan>
 8011532:	17bc      	asrs	r4, r7, #30
 8011534:	f004 0402 	and.w	r4, r4, #2
 8011538:	ea53 0909 	orrs.w	r9, r3, r9
 801153c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011540:	d107      	bne.n	8011552 <__ieee754_atan2+0x7a>
 8011542:	2c02      	cmp	r4, #2
 8011544:	d05f      	beq.n	8011606 <__ieee754_atan2+0x12e>
 8011546:	2c03      	cmp	r4, #3
 8011548:	d1e5      	bne.n	8011516 <__ieee754_atan2+0x3e>
 801154a:	a141      	add	r1, pc, #260	@ (adr r1, 8011650 <__ieee754_atan2+0x178>)
 801154c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011550:	e7e1      	b.n	8011516 <__ieee754_atan2+0x3e>
 8011552:	4315      	orrs	r5, r2
 8011554:	d106      	bne.n	8011564 <__ieee754_atan2+0x8c>
 8011556:	f1be 0f00 	cmp.w	lr, #0
 801155a:	da5f      	bge.n	801161c <__ieee754_atan2+0x144>
 801155c:	a13e      	add	r1, pc, #248	@ (adr r1, 8011658 <__ieee754_atan2+0x180>)
 801155e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011562:	e7d8      	b.n	8011516 <__ieee754_atan2+0x3e>
 8011564:	4542      	cmp	r2, r8
 8011566:	d10f      	bne.n	8011588 <__ieee754_atan2+0xb0>
 8011568:	4293      	cmp	r3, r2
 801156a:	f104 34ff 	add.w	r4, r4, #4294967295
 801156e:	d107      	bne.n	8011580 <__ieee754_atan2+0xa8>
 8011570:	2c02      	cmp	r4, #2
 8011572:	d84c      	bhi.n	801160e <__ieee754_atan2+0x136>
 8011574:	4b34      	ldr	r3, [pc, #208]	@ (8011648 <__ieee754_atan2+0x170>)
 8011576:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801157e:	e7ca      	b.n	8011516 <__ieee754_atan2+0x3e>
 8011580:	2c02      	cmp	r4, #2
 8011582:	d848      	bhi.n	8011616 <__ieee754_atan2+0x13e>
 8011584:	4b31      	ldr	r3, [pc, #196]	@ (801164c <__ieee754_atan2+0x174>)
 8011586:	e7f6      	b.n	8011576 <__ieee754_atan2+0x9e>
 8011588:	4543      	cmp	r3, r8
 801158a:	d0e4      	beq.n	8011556 <__ieee754_atan2+0x7e>
 801158c:	1a9b      	subs	r3, r3, r2
 801158e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8011592:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011596:	da1e      	bge.n	80115d6 <__ieee754_atan2+0xfe>
 8011598:	2f00      	cmp	r7, #0
 801159a:	da01      	bge.n	80115a0 <__ieee754_atan2+0xc8>
 801159c:	323c      	adds	r2, #60	@ 0x3c
 801159e:	db1e      	blt.n	80115de <__ieee754_atan2+0x106>
 80115a0:	4632      	mov	r2, r6
 80115a2:	463b      	mov	r3, r7
 80115a4:	f7ef f952 	bl	800084c <__aeabi_ddiv>
 80115a8:	ec41 0b10 	vmov	d0, r0, r1
 80115ac:	f7ff fbd2 	bl	8010d54 <fabs>
 80115b0:	f000 f85a 	bl	8011668 <atan>
 80115b4:	ec51 0b10 	vmov	r0, r1, d0
 80115b8:	2c01      	cmp	r4, #1
 80115ba:	d013      	beq.n	80115e4 <__ieee754_atan2+0x10c>
 80115bc:	2c02      	cmp	r4, #2
 80115be:	d015      	beq.n	80115ec <__ieee754_atan2+0x114>
 80115c0:	2c00      	cmp	r4, #0
 80115c2:	d0a8      	beq.n	8011516 <__ieee754_atan2+0x3e>
 80115c4:	a318      	add	r3, pc, #96	@ (adr r3, 8011628 <__ieee754_atan2+0x150>)
 80115c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ca:	f7ee fe5d 	bl	8000288 <__aeabi_dsub>
 80115ce:	a318      	add	r3, pc, #96	@ (adr r3, 8011630 <__ieee754_atan2+0x158>)
 80115d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d4:	e014      	b.n	8011600 <__ieee754_atan2+0x128>
 80115d6:	a118      	add	r1, pc, #96	@ (adr r1, 8011638 <__ieee754_atan2+0x160>)
 80115d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115dc:	e7ec      	b.n	80115b8 <__ieee754_atan2+0xe0>
 80115de:	2000      	movs	r0, #0
 80115e0:	2100      	movs	r1, #0
 80115e2:	e7e9      	b.n	80115b8 <__ieee754_atan2+0xe0>
 80115e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80115e8:	4619      	mov	r1, r3
 80115ea:	e794      	b.n	8011516 <__ieee754_atan2+0x3e>
 80115ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8011628 <__ieee754_atan2+0x150>)
 80115ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f2:	f7ee fe49 	bl	8000288 <__aeabi_dsub>
 80115f6:	4602      	mov	r2, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	a10d      	add	r1, pc, #52	@ (adr r1, 8011630 <__ieee754_atan2+0x158>)
 80115fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011600:	f7ee fe42 	bl	8000288 <__aeabi_dsub>
 8011604:	e787      	b.n	8011516 <__ieee754_atan2+0x3e>
 8011606:	a10a      	add	r1, pc, #40	@ (adr r1, 8011630 <__ieee754_atan2+0x158>)
 8011608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801160c:	e783      	b.n	8011516 <__ieee754_atan2+0x3e>
 801160e:	a10c      	add	r1, pc, #48	@ (adr r1, 8011640 <__ieee754_atan2+0x168>)
 8011610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011614:	e77f      	b.n	8011516 <__ieee754_atan2+0x3e>
 8011616:	2000      	movs	r0, #0
 8011618:	2100      	movs	r1, #0
 801161a:	e77c      	b.n	8011516 <__ieee754_atan2+0x3e>
 801161c:	a106      	add	r1, pc, #24	@ (adr r1, 8011638 <__ieee754_atan2+0x160>)
 801161e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011622:	e778      	b.n	8011516 <__ieee754_atan2+0x3e>
 8011624:	f3af 8000 	nop.w
 8011628:	33145c07 	.word	0x33145c07
 801162c:	3ca1a626 	.word	0x3ca1a626
 8011630:	54442d18 	.word	0x54442d18
 8011634:	400921fb 	.word	0x400921fb
 8011638:	54442d18 	.word	0x54442d18
 801163c:	3ff921fb 	.word	0x3ff921fb
 8011640:	54442d18 	.word	0x54442d18
 8011644:	3fe921fb 	.word	0x3fe921fb
 8011648:	080129e0 	.word	0x080129e0
 801164c:	080129c8 	.word	0x080129c8
 8011650:	54442d18 	.word	0x54442d18
 8011654:	c00921fb 	.word	0xc00921fb
 8011658:	54442d18 	.word	0x54442d18
 801165c:	bff921fb 	.word	0xbff921fb
 8011660:	7ff00000 	.word	0x7ff00000
 8011664:	00000000 	.word	0x00000000

08011668 <atan>:
 8011668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166c:	ec55 4b10 	vmov	r4, r5, d0
 8011670:	4bbf      	ldr	r3, [pc, #764]	@ (8011970 <atan+0x308>)
 8011672:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011676:	429e      	cmp	r6, r3
 8011678:	46ab      	mov	fp, r5
 801167a:	d918      	bls.n	80116ae <atan+0x46>
 801167c:	4bbd      	ldr	r3, [pc, #756]	@ (8011974 <atan+0x30c>)
 801167e:	429e      	cmp	r6, r3
 8011680:	d801      	bhi.n	8011686 <atan+0x1e>
 8011682:	d109      	bne.n	8011698 <atan+0x30>
 8011684:	b144      	cbz	r4, 8011698 <atan+0x30>
 8011686:	4622      	mov	r2, r4
 8011688:	462b      	mov	r3, r5
 801168a:	4620      	mov	r0, r4
 801168c:	4629      	mov	r1, r5
 801168e:	f7ee fdfd 	bl	800028c <__adddf3>
 8011692:	4604      	mov	r4, r0
 8011694:	460d      	mov	r5, r1
 8011696:	e006      	b.n	80116a6 <atan+0x3e>
 8011698:	f1bb 0f00 	cmp.w	fp, #0
 801169c:	f340 812b 	ble.w	80118f6 <atan+0x28e>
 80116a0:	a597      	add	r5, pc, #604	@ (adr r5, 8011900 <atan+0x298>)
 80116a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80116a6:	ec45 4b10 	vmov	d0, r4, r5
 80116aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ae:	4bb2      	ldr	r3, [pc, #712]	@ (8011978 <atan+0x310>)
 80116b0:	429e      	cmp	r6, r3
 80116b2:	d813      	bhi.n	80116dc <atan+0x74>
 80116b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80116b8:	429e      	cmp	r6, r3
 80116ba:	d80c      	bhi.n	80116d6 <atan+0x6e>
 80116bc:	a392      	add	r3, pc, #584	@ (adr r3, 8011908 <atan+0x2a0>)
 80116be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c2:	4620      	mov	r0, r4
 80116c4:	4629      	mov	r1, r5
 80116c6:	f7ee fde1 	bl	800028c <__adddf3>
 80116ca:	4bac      	ldr	r3, [pc, #688]	@ (801197c <atan+0x314>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	f7ef fa23 	bl	8000b18 <__aeabi_dcmpgt>
 80116d2:	2800      	cmp	r0, #0
 80116d4:	d1e7      	bne.n	80116a6 <atan+0x3e>
 80116d6:	f04f 3aff 	mov.w	sl, #4294967295
 80116da:	e029      	b.n	8011730 <atan+0xc8>
 80116dc:	f7ff fb3a 	bl	8010d54 <fabs>
 80116e0:	4ba7      	ldr	r3, [pc, #668]	@ (8011980 <atan+0x318>)
 80116e2:	429e      	cmp	r6, r3
 80116e4:	ec55 4b10 	vmov	r4, r5, d0
 80116e8:	f200 80bc 	bhi.w	8011864 <atan+0x1fc>
 80116ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80116f0:	429e      	cmp	r6, r3
 80116f2:	f200 809e 	bhi.w	8011832 <atan+0x1ca>
 80116f6:	4622      	mov	r2, r4
 80116f8:	462b      	mov	r3, r5
 80116fa:	4620      	mov	r0, r4
 80116fc:	4629      	mov	r1, r5
 80116fe:	f7ee fdc5 	bl	800028c <__adddf3>
 8011702:	4b9e      	ldr	r3, [pc, #632]	@ (801197c <atan+0x314>)
 8011704:	2200      	movs	r2, #0
 8011706:	f7ee fdbf 	bl	8000288 <__aeabi_dsub>
 801170a:	2200      	movs	r2, #0
 801170c:	4606      	mov	r6, r0
 801170e:	460f      	mov	r7, r1
 8011710:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011714:	4620      	mov	r0, r4
 8011716:	4629      	mov	r1, r5
 8011718:	f7ee fdb8 	bl	800028c <__adddf3>
 801171c:	4602      	mov	r2, r0
 801171e:	460b      	mov	r3, r1
 8011720:	4630      	mov	r0, r6
 8011722:	4639      	mov	r1, r7
 8011724:	f7ef f892 	bl	800084c <__aeabi_ddiv>
 8011728:	f04f 0a00 	mov.w	sl, #0
 801172c:	4604      	mov	r4, r0
 801172e:	460d      	mov	r5, r1
 8011730:	4622      	mov	r2, r4
 8011732:	462b      	mov	r3, r5
 8011734:	4620      	mov	r0, r4
 8011736:	4629      	mov	r1, r5
 8011738:	f7ee ff5e 	bl	80005f8 <__aeabi_dmul>
 801173c:	4602      	mov	r2, r0
 801173e:	460b      	mov	r3, r1
 8011740:	4680      	mov	r8, r0
 8011742:	4689      	mov	r9, r1
 8011744:	f7ee ff58 	bl	80005f8 <__aeabi_dmul>
 8011748:	a371      	add	r3, pc, #452	@ (adr r3, 8011910 <atan+0x2a8>)
 801174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174e:	4606      	mov	r6, r0
 8011750:	460f      	mov	r7, r1
 8011752:	f7ee ff51 	bl	80005f8 <__aeabi_dmul>
 8011756:	a370      	add	r3, pc, #448	@ (adr r3, 8011918 <atan+0x2b0>)
 8011758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175c:	f7ee fd96 	bl	800028c <__adddf3>
 8011760:	4632      	mov	r2, r6
 8011762:	463b      	mov	r3, r7
 8011764:	f7ee ff48 	bl	80005f8 <__aeabi_dmul>
 8011768:	a36d      	add	r3, pc, #436	@ (adr r3, 8011920 <atan+0x2b8>)
 801176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176e:	f7ee fd8d 	bl	800028c <__adddf3>
 8011772:	4632      	mov	r2, r6
 8011774:	463b      	mov	r3, r7
 8011776:	f7ee ff3f 	bl	80005f8 <__aeabi_dmul>
 801177a:	a36b      	add	r3, pc, #428	@ (adr r3, 8011928 <atan+0x2c0>)
 801177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011780:	f7ee fd84 	bl	800028c <__adddf3>
 8011784:	4632      	mov	r2, r6
 8011786:	463b      	mov	r3, r7
 8011788:	f7ee ff36 	bl	80005f8 <__aeabi_dmul>
 801178c:	a368      	add	r3, pc, #416	@ (adr r3, 8011930 <atan+0x2c8>)
 801178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011792:	f7ee fd7b 	bl	800028c <__adddf3>
 8011796:	4632      	mov	r2, r6
 8011798:	463b      	mov	r3, r7
 801179a:	f7ee ff2d 	bl	80005f8 <__aeabi_dmul>
 801179e:	a366      	add	r3, pc, #408	@ (adr r3, 8011938 <atan+0x2d0>)
 80117a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a4:	f7ee fd72 	bl	800028c <__adddf3>
 80117a8:	4642      	mov	r2, r8
 80117aa:	464b      	mov	r3, r9
 80117ac:	f7ee ff24 	bl	80005f8 <__aeabi_dmul>
 80117b0:	a363      	add	r3, pc, #396	@ (adr r3, 8011940 <atan+0x2d8>)
 80117b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b6:	4680      	mov	r8, r0
 80117b8:	4689      	mov	r9, r1
 80117ba:	4630      	mov	r0, r6
 80117bc:	4639      	mov	r1, r7
 80117be:	f7ee ff1b 	bl	80005f8 <__aeabi_dmul>
 80117c2:	a361      	add	r3, pc, #388	@ (adr r3, 8011948 <atan+0x2e0>)
 80117c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c8:	f7ee fd5e 	bl	8000288 <__aeabi_dsub>
 80117cc:	4632      	mov	r2, r6
 80117ce:	463b      	mov	r3, r7
 80117d0:	f7ee ff12 	bl	80005f8 <__aeabi_dmul>
 80117d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8011950 <atan+0x2e8>)
 80117d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117da:	f7ee fd55 	bl	8000288 <__aeabi_dsub>
 80117de:	4632      	mov	r2, r6
 80117e0:	463b      	mov	r3, r7
 80117e2:	f7ee ff09 	bl	80005f8 <__aeabi_dmul>
 80117e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8011958 <atan+0x2f0>)
 80117e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ec:	f7ee fd4c 	bl	8000288 <__aeabi_dsub>
 80117f0:	4632      	mov	r2, r6
 80117f2:	463b      	mov	r3, r7
 80117f4:	f7ee ff00 	bl	80005f8 <__aeabi_dmul>
 80117f8:	a359      	add	r3, pc, #356	@ (adr r3, 8011960 <atan+0x2f8>)
 80117fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fe:	f7ee fd43 	bl	8000288 <__aeabi_dsub>
 8011802:	4632      	mov	r2, r6
 8011804:	463b      	mov	r3, r7
 8011806:	f7ee fef7 	bl	80005f8 <__aeabi_dmul>
 801180a:	4602      	mov	r2, r0
 801180c:	460b      	mov	r3, r1
 801180e:	4640      	mov	r0, r8
 8011810:	4649      	mov	r1, r9
 8011812:	f7ee fd3b 	bl	800028c <__adddf3>
 8011816:	4622      	mov	r2, r4
 8011818:	462b      	mov	r3, r5
 801181a:	f7ee feed 	bl	80005f8 <__aeabi_dmul>
 801181e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011822:	4602      	mov	r2, r0
 8011824:	460b      	mov	r3, r1
 8011826:	d148      	bne.n	80118ba <atan+0x252>
 8011828:	4620      	mov	r0, r4
 801182a:	4629      	mov	r1, r5
 801182c:	f7ee fd2c 	bl	8000288 <__aeabi_dsub>
 8011830:	e72f      	b.n	8011692 <atan+0x2a>
 8011832:	4b52      	ldr	r3, [pc, #328]	@ (801197c <atan+0x314>)
 8011834:	2200      	movs	r2, #0
 8011836:	4620      	mov	r0, r4
 8011838:	4629      	mov	r1, r5
 801183a:	f7ee fd25 	bl	8000288 <__aeabi_dsub>
 801183e:	4b4f      	ldr	r3, [pc, #316]	@ (801197c <atan+0x314>)
 8011840:	4606      	mov	r6, r0
 8011842:	460f      	mov	r7, r1
 8011844:	2200      	movs	r2, #0
 8011846:	4620      	mov	r0, r4
 8011848:	4629      	mov	r1, r5
 801184a:	f7ee fd1f 	bl	800028c <__adddf3>
 801184e:	4602      	mov	r2, r0
 8011850:	460b      	mov	r3, r1
 8011852:	4630      	mov	r0, r6
 8011854:	4639      	mov	r1, r7
 8011856:	f7ee fff9 	bl	800084c <__aeabi_ddiv>
 801185a:	f04f 0a01 	mov.w	sl, #1
 801185e:	4604      	mov	r4, r0
 8011860:	460d      	mov	r5, r1
 8011862:	e765      	b.n	8011730 <atan+0xc8>
 8011864:	4b47      	ldr	r3, [pc, #284]	@ (8011984 <atan+0x31c>)
 8011866:	429e      	cmp	r6, r3
 8011868:	d21c      	bcs.n	80118a4 <atan+0x23c>
 801186a:	4b47      	ldr	r3, [pc, #284]	@ (8011988 <atan+0x320>)
 801186c:	2200      	movs	r2, #0
 801186e:	4620      	mov	r0, r4
 8011870:	4629      	mov	r1, r5
 8011872:	f7ee fd09 	bl	8000288 <__aeabi_dsub>
 8011876:	4b44      	ldr	r3, [pc, #272]	@ (8011988 <atan+0x320>)
 8011878:	4606      	mov	r6, r0
 801187a:	460f      	mov	r7, r1
 801187c:	2200      	movs	r2, #0
 801187e:	4620      	mov	r0, r4
 8011880:	4629      	mov	r1, r5
 8011882:	f7ee feb9 	bl	80005f8 <__aeabi_dmul>
 8011886:	4b3d      	ldr	r3, [pc, #244]	@ (801197c <atan+0x314>)
 8011888:	2200      	movs	r2, #0
 801188a:	f7ee fcff 	bl	800028c <__adddf3>
 801188e:	4602      	mov	r2, r0
 8011890:	460b      	mov	r3, r1
 8011892:	4630      	mov	r0, r6
 8011894:	4639      	mov	r1, r7
 8011896:	f7ee ffd9 	bl	800084c <__aeabi_ddiv>
 801189a:	f04f 0a02 	mov.w	sl, #2
 801189e:	4604      	mov	r4, r0
 80118a0:	460d      	mov	r5, r1
 80118a2:	e745      	b.n	8011730 <atan+0xc8>
 80118a4:	4622      	mov	r2, r4
 80118a6:	462b      	mov	r3, r5
 80118a8:	4938      	ldr	r1, [pc, #224]	@ (801198c <atan+0x324>)
 80118aa:	2000      	movs	r0, #0
 80118ac:	f7ee ffce 	bl	800084c <__aeabi_ddiv>
 80118b0:	f04f 0a03 	mov.w	sl, #3
 80118b4:	4604      	mov	r4, r0
 80118b6:	460d      	mov	r5, r1
 80118b8:	e73a      	b.n	8011730 <atan+0xc8>
 80118ba:	4b35      	ldr	r3, [pc, #212]	@ (8011990 <atan+0x328>)
 80118bc:	4e35      	ldr	r6, [pc, #212]	@ (8011994 <atan+0x32c>)
 80118be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	f7ee fcdf 	bl	8000288 <__aeabi_dsub>
 80118ca:	4622      	mov	r2, r4
 80118cc:	462b      	mov	r3, r5
 80118ce:	f7ee fcdb 	bl	8000288 <__aeabi_dsub>
 80118d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80118d6:	4602      	mov	r2, r0
 80118d8:	460b      	mov	r3, r1
 80118da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80118de:	f7ee fcd3 	bl	8000288 <__aeabi_dsub>
 80118e2:	f1bb 0f00 	cmp.w	fp, #0
 80118e6:	4604      	mov	r4, r0
 80118e8:	460d      	mov	r5, r1
 80118ea:	f6bf aedc 	bge.w	80116a6 <atan+0x3e>
 80118ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80118f2:	461d      	mov	r5, r3
 80118f4:	e6d7      	b.n	80116a6 <atan+0x3e>
 80118f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8011968 <atan+0x300>)
 80118f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80118fc:	e6d3      	b.n	80116a6 <atan+0x3e>
 80118fe:	bf00      	nop
 8011900:	54442d18 	.word	0x54442d18
 8011904:	3ff921fb 	.word	0x3ff921fb
 8011908:	8800759c 	.word	0x8800759c
 801190c:	7e37e43c 	.word	0x7e37e43c
 8011910:	e322da11 	.word	0xe322da11
 8011914:	3f90ad3a 	.word	0x3f90ad3a
 8011918:	24760deb 	.word	0x24760deb
 801191c:	3fa97b4b 	.word	0x3fa97b4b
 8011920:	a0d03d51 	.word	0xa0d03d51
 8011924:	3fb10d66 	.word	0x3fb10d66
 8011928:	c54c206e 	.word	0xc54c206e
 801192c:	3fb745cd 	.word	0x3fb745cd
 8011930:	920083ff 	.word	0x920083ff
 8011934:	3fc24924 	.word	0x3fc24924
 8011938:	5555550d 	.word	0x5555550d
 801193c:	3fd55555 	.word	0x3fd55555
 8011940:	2c6a6c2f 	.word	0x2c6a6c2f
 8011944:	bfa2b444 	.word	0xbfa2b444
 8011948:	52defd9a 	.word	0x52defd9a
 801194c:	3fadde2d 	.word	0x3fadde2d
 8011950:	af749a6d 	.word	0xaf749a6d
 8011954:	3fb3b0f2 	.word	0x3fb3b0f2
 8011958:	fe231671 	.word	0xfe231671
 801195c:	3fbc71c6 	.word	0x3fbc71c6
 8011960:	9998ebc4 	.word	0x9998ebc4
 8011964:	3fc99999 	.word	0x3fc99999
 8011968:	54442d18 	.word	0x54442d18
 801196c:	bff921fb 	.word	0xbff921fb
 8011970:	440fffff 	.word	0x440fffff
 8011974:	7ff00000 	.word	0x7ff00000
 8011978:	3fdbffff 	.word	0x3fdbffff
 801197c:	3ff00000 	.word	0x3ff00000
 8011980:	3ff2ffff 	.word	0x3ff2ffff
 8011984:	40038000 	.word	0x40038000
 8011988:	3ff80000 	.word	0x3ff80000
 801198c:	bff00000 	.word	0xbff00000
 8011990:	080129f8 	.word	0x080129f8
 8011994:	08012a18 	.word	0x08012a18

08011998 <__kernel_cosf>:
 8011998:	ee10 3a10 	vmov	r3, s0
 801199c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119a0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80119a4:	eef0 6a40 	vmov.f32	s13, s0
 80119a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80119ac:	d204      	bcs.n	80119b8 <__kernel_cosf+0x20>
 80119ae:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80119b2:	ee17 2a90 	vmov	r2, s15
 80119b6:	b342      	cbz	r2, 8011a0a <__kernel_cosf+0x72>
 80119b8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80119bc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011a28 <__kernel_cosf+0x90>
 80119c0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011a2c <__kernel_cosf+0x94>
 80119c4:	4a1a      	ldr	r2, [pc, #104]	@ (8011a30 <__kernel_cosf+0x98>)
 80119c6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80119ca:	4293      	cmp	r3, r2
 80119cc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011a34 <__kernel_cosf+0x9c>
 80119d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80119d4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011a38 <__kernel_cosf+0xa0>
 80119d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80119dc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011a3c <__kernel_cosf+0xa4>
 80119e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80119e4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011a40 <__kernel_cosf+0xa8>
 80119e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80119ec:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80119f0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80119f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80119f8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80119fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a00:	d804      	bhi.n	8011a0c <__kernel_cosf+0x74>
 8011a02:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011a06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a0a:	4770      	bx	lr
 8011a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8011a44 <__kernel_cosf+0xac>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	bf9a      	itte	ls
 8011a12:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8011a16:	ee07 3a10 	vmovls	s14, r3
 8011a1a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011a1e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a26:	e7ec      	b.n	8011a02 <__kernel_cosf+0x6a>
 8011a28:	ad47d74e 	.word	0xad47d74e
 8011a2c:	310f74f6 	.word	0x310f74f6
 8011a30:	3e999999 	.word	0x3e999999
 8011a34:	b493f27c 	.word	0xb493f27c
 8011a38:	37d00d01 	.word	0x37d00d01
 8011a3c:	bab60b61 	.word	0xbab60b61
 8011a40:	3d2aaaab 	.word	0x3d2aaaab
 8011a44:	3f480000 	.word	0x3f480000

08011a48 <__kernel_sinf>:
 8011a48:	ee10 3a10 	vmov	r3, s0
 8011a4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a50:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011a54:	d204      	bcs.n	8011a60 <__kernel_sinf+0x18>
 8011a56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011a5a:	ee17 3a90 	vmov	r3, s15
 8011a5e:	b35b      	cbz	r3, 8011ab8 <__kernel_sinf+0x70>
 8011a60:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011a64:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011abc <__kernel_sinf+0x74>
 8011a68:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011ac0 <__kernel_sinf+0x78>
 8011a6c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011a70:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8011ac4 <__kernel_sinf+0x7c>
 8011a74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011a78:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011ac8 <__kernel_sinf+0x80>
 8011a7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011a80:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011acc <__kernel_sinf+0x84>
 8011a84:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011a88:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011a8c:	b930      	cbnz	r0, 8011a9c <__kernel_sinf+0x54>
 8011a8e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011ad0 <__kernel_sinf+0x88>
 8011a92:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011a96:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011a9a:	4770      	bx	lr
 8011a9c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011aa0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011aa4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011aa8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011aac:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8011ad4 <__kernel_sinf+0x8c>
 8011ab0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011ab4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop
 8011abc:	2f2ec9d3 	.word	0x2f2ec9d3
 8011ac0:	b2d72f34 	.word	0xb2d72f34
 8011ac4:	3638ef1b 	.word	0x3638ef1b
 8011ac8:	b9500d01 	.word	0xb9500d01
 8011acc:	3c088889 	.word	0x3c088889
 8011ad0:	be2aaaab 	.word	0xbe2aaaab
 8011ad4:	3e2aaaab 	.word	0x3e2aaaab

08011ad8 <__ieee754_expf>:
 8011ad8:	ee10 2a10 	vmov	r2, s0
 8011adc:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8011ae0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011ae4:	d902      	bls.n	8011aec <__ieee754_expf+0x14>
 8011ae6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011aea:	4770      	bx	lr
 8011aec:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8011af0:	d106      	bne.n	8011b00 <__ieee754_expf+0x28>
 8011af2:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8011c2c <__ieee754_expf+0x154>
 8011af6:	2900      	cmp	r1, #0
 8011af8:	bf18      	it	ne
 8011afa:	eeb0 0a67 	vmovne.f32	s0, s15
 8011afe:	4770      	bx	lr
 8011b00:	484b      	ldr	r0, [pc, #300]	@ (8011c30 <__ieee754_expf+0x158>)
 8011b02:	4282      	cmp	r2, r0
 8011b04:	dd02      	ble.n	8011b0c <__ieee754_expf+0x34>
 8011b06:	2000      	movs	r0, #0
 8011b08:	f000 ba6a 	b.w	8011fe0 <__math_oflowf>
 8011b0c:	2a00      	cmp	r2, #0
 8011b0e:	da05      	bge.n	8011b1c <__ieee754_expf+0x44>
 8011b10:	4a48      	ldr	r2, [pc, #288]	@ (8011c34 <__ieee754_expf+0x15c>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d902      	bls.n	8011b1c <__ieee754_expf+0x44>
 8011b16:	2000      	movs	r0, #0
 8011b18:	f000 ba5c 	b.w	8011fd4 <__math_uflowf>
 8011b1c:	4a46      	ldr	r2, [pc, #280]	@ (8011c38 <__ieee754_expf+0x160>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8011b24:	d952      	bls.n	8011bcc <__ieee754_expf+0xf4>
 8011b26:	4a45      	ldr	r2, [pc, #276]	@ (8011c3c <__ieee754_expf+0x164>)
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8011b2e:	d834      	bhi.n	8011b9a <__ieee754_expf+0xc2>
 8011b30:	4b43      	ldr	r3, [pc, #268]	@ (8011c40 <__ieee754_expf+0x168>)
 8011b32:	4413      	add	r3, r2
 8011b34:	ed93 7a00 	vldr	s14, [r3]
 8011b38:	4b42      	ldr	r3, [pc, #264]	@ (8011c44 <__ieee754_expf+0x16c>)
 8011b3a:	4413      	add	r3, r2
 8011b3c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011b40:	f1c1 0201 	rsb	r2, r1, #1
 8011b44:	edd3 7a00 	vldr	s15, [r3]
 8011b48:	1a52      	subs	r2, r2, r1
 8011b4a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011b4e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8011b52:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8011c48 <__ieee754_expf+0x170>
 8011b56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011c4c <__ieee754_expf+0x174>
 8011b5a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8011b5e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8011c50 <__ieee754_expf+0x178>
 8011b62:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011b66:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011c54 <__ieee754_expf+0x17c>
 8011b6a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8011b6e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8011c58 <__ieee754_expf+0x180>
 8011b72:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011b76:	eef0 6a40 	vmov.f32	s13, s0
 8011b7a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8011b7e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011b82:	ee20 5a26 	vmul.f32	s10, s0, s13
 8011b86:	bb92      	cbnz	r2, 8011bee <__ieee754_expf+0x116>
 8011b88:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011b8c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011b90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011b94:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8011b98:	4770      	bx	lr
 8011b9a:	4b30      	ldr	r3, [pc, #192]	@ (8011c5c <__ieee754_expf+0x184>)
 8011b9c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011c60 <__ieee754_expf+0x188>
 8011ba0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8011c64 <__ieee754_expf+0x18c>
 8011ba4:	4413      	add	r3, r2
 8011ba6:	edd3 7a00 	vldr	s15, [r3]
 8011baa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011bae:	eeb0 7a40 	vmov.f32	s14, s0
 8011bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bb6:	ee17 2a90 	vmov	r2, s15
 8011bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bbe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011bc2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011c68 <__ieee754_expf+0x190>
 8011bc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011bca:	e7be      	b.n	8011b4a <__ieee754_expf+0x72>
 8011bcc:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8011bd0:	d20b      	bcs.n	8011bea <__ieee754_expf+0x112>
 8011bd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011c6c <__ieee754_expf+0x194>
 8011bd6:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011bda:	eef4 6ae5 	vcmpe.f32	s13, s11
 8011bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be2:	dd02      	ble.n	8011bea <__ieee754_expf+0x112>
 8011be4:	ee30 0a25 	vadd.f32	s0, s0, s11
 8011be8:	4770      	bx	lr
 8011bea:	2200      	movs	r2, #0
 8011bec:	e7af      	b.n	8011b4e <__ieee754_expf+0x76>
 8011bee:	ee36 6a66 	vsub.f32	s12, s12, s13
 8011bf2:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8011bf6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8011bfa:	bfb8      	it	lt
 8011bfc:	3264      	addlt	r2, #100	@ 0x64
 8011bfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011c02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c06:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011c0a:	ee17 3a90 	vmov	r3, s15
 8011c0e:	bfab      	itete	ge
 8011c10:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011c14:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011c18:	ee00 3a10 	vmovge	s0, r3
 8011c1c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8011c70 <__ieee754_expf+0x198>
 8011c20:	bfbc      	itt	lt
 8011c22:	ee00 3a10 	vmovlt	s0, r3
 8011c26:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011c2a:	4770      	bx	lr
 8011c2c:	00000000 	.word	0x00000000
 8011c30:	42b17217 	.word	0x42b17217
 8011c34:	42cff1b5 	.word	0x42cff1b5
 8011c38:	3eb17218 	.word	0x3eb17218
 8011c3c:	3f851591 	.word	0x3f851591
 8011c40:	08012a40 	.word	0x08012a40
 8011c44:	08012a38 	.word	0x08012a38
 8011c48:	3331bb4c 	.word	0x3331bb4c
 8011c4c:	b5ddea0e 	.word	0xb5ddea0e
 8011c50:	388ab355 	.word	0x388ab355
 8011c54:	bb360b61 	.word	0xbb360b61
 8011c58:	3e2aaaab 	.word	0x3e2aaaab
 8011c5c:	08012a48 	.word	0x08012a48
 8011c60:	3fb8aa3b 	.word	0x3fb8aa3b
 8011c64:	3f317180 	.word	0x3f317180
 8011c68:	3717f7d1 	.word	0x3717f7d1
 8011c6c:	7149f2ca 	.word	0x7149f2ca
 8011c70:	0d800000 	.word	0x0d800000

08011c74 <__ieee754_rem_pio2f>:
 8011c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c76:	ee10 6a10 	vmov	r6, s0
 8011c7a:	4b88      	ldr	r3, [pc, #544]	@ (8011e9c <__ieee754_rem_pio2f+0x228>)
 8011c7c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011c80:	429d      	cmp	r5, r3
 8011c82:	b087      	sub	sp, #28
 8011c84:	4604      	mov	r4, r0
 8011c86:	d805      	bhi.n	8011c94 <__ieee754_rem_pio2f+0x20>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	ed80 0a00 	vstr	s0, [r0]
 8011c8e:	6043      	str	r3, [r0, #4]
 8011c90:	2000      	movs	r0, #0
 8011c92:	e022      	b.n	8011cda <__ieee754_rem_pio2f+0x66>
 8011c94:	4b82      	ldr	r3, [pc, #520]	@ (8011ea0 <__ieee754_rem_pio2f+0x22c>)
 8011c96:	429d      	cmp	r5, r3
 8011c98:	d83a      	bhi.n	8011d10 <__ieee754_rem_pio2f+0x9c>
 8011c9a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011c9e:	2e00      	cmp	r6, #0
 8011ca0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011ea4 <__ieee754_rem_pio2f+0x230>
 8011ca4:	4a80      	ldr	r2, [pc, #512]	@ (8011ea8 <__ieee754_rem_pio2f+0x234>)
 8011ca6:	f023 030f 	bic.w	r3, r3, #15
 8011caa:	dd18      	ble.n	8011cde <__ieee754_rem_pio2f+0x6a>
 8011cac:	4293      	cmp	r3, r2
 8011cae:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011cb2:	bf09      	itett	eq
 8011cb4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011eac <__ieee754_rem_pio2f+0x238>
 8011cb8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011eb0 <__ieee754_rem_pio2f+0x23c>
 8011cbc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011eb4 <__ieee754_rem_pio2f+0x240>
 8011cc0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011cc4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ccc:	ed80 7a00 	vstr	s14, [r0]
 8011cd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011cd4:	edc0 7a01 	vstr	s15, [r0, #4]
 8011cd8:	2001      	movs	r0, #1
 8011cda:	b007      	add	sp, #28
 8011cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011ce4:	bf09      	itett	eq
 8011ce6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011eac <__ieee754_rem_pio2f+0x238>
 8011cea:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011eb0 <__ieee754_rem_pio2f+0x23c>
 8011cee:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011eb4 <__ieee754_rem_pio2f+0x240>
 8011cf2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011cf6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011cfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cfe:	ed80 7a00 	vstr	s14, [r0]
 8011d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011d06:	edc0 7a01 	vstr	s15, [r0, #4]
 8011d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d0e:	e7e4      	b.n	8011cda <__ieee754_rem_pio2f+0x66>
 8011d10:	4b69      	ldr	r3, [pc, #420]	@ (8011eb8 <__ieee754_rem_pio2f+0x244>)
 8011d12:	429d      	cmp	r5, r3
 8011d14:	d873      	bhi.n	8011dfe <__ieee754_rem_pio2f+0x18a>
 8011d16:	f7ff f89f 	bl	8010e58 <fabsf>
 8011d1a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011ebc <__ieee754_rem_pio2f+0x248>
 8011d1e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011d22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011d2e:	ee17 0a90 	vmov	r0, s15
 8011d32:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011ea4 <__ieee754_rem_pio2f+0x230>
 8011d36:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011d3a:	281f      	cmp	r0, #31
 8011d3c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011eb0 <__ieee754_rem_pio2f+0x23c>
 8011d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d44:	eeb1 6a47 	vneg.f32	s12, s14
 8011d48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011d4c:	ee16 1a90 	vmov	r1, s13
 8011d50:	dc09      	bgt.n	8011d66 <__ieee754_rem_pio2f+0xf2>
 8011d52:	4a5b      	ldr	r2, [pc, #364]	@ (8011ec0 <__ieee754_rem_pio2f+0x24c>)
 8011d54:	1e47      	subs	r7, r0, #1
 8011d56:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011d5a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8011d5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d107      	bne.n	8011d76 <__ieee754_rem_pio2f+0x102>
 8011d66:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011d6a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011d6e:	2a08      	cmp	r2, #8
 8011d70:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011d74:	dc14      	bgt.n	8011da0 <__ieee754_rem_pio2f+0x12c>
 8011d76:	6021      	str	r1, [r4, #0]
 8011d78:	ed94 7a00 	vldr	s14, [r4]
 8011d7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011d80:	2e00      	cmp	r6, #0
 8011d82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d86:	ed84 0a01 	vstr	s0, [r4, #4]
 8011d8a:	daa6      	bge.n	8011cda <__ieee754_rem_pio2f+0x66>
 8011d8c:	eeb1 7a47 	vneg.f32	s14, s14
 8011d90:	eeb1 0a40 	vneg.f32	s0, s0
 8011d94:	ed84 7a00 	vstr	s14, [r4]
 8011d98:	ed84 0a01 	vstr	s0, [r4, #4]
 8011d9c:	4240      	negs	r0, r0
 8011d9e:	e79c      	b.n	8011cda <__ieee754_rem_pio2f+0x66>
 8011da0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011eac <__ieee754_rem_pio2f+0x238>
 8011da4:	eef0 6a40 	vmov.f32	s13, s0
 8011da8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011dac:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011db0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011db4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011eb4 <__ieee754_rem_pio2f+0x240>
 8011db8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011dbc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011dc0:	ee15 2a90 	vmov	r2, s11
 8011dc4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011dc8:	1a5b      	subs	r3, r3, r1
 8011dca:	2b19      	cmp	r3, #25
 8011dcc:	dc04      	bgt.n	8011dd8 <__ieee754_rem_pio2f+0x164>
 8011dce:	edc4 5a00 	vstr	s11, [r4]
 8011dd2:	eeb0 0a66 	vmov.f32	s0, s13
 8011dd6:	e7cf      	b.n	8011d78 <__ieee754_rem_pio2f+0x104>
 8011dd8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011ec4 <__ieee754_rem_pio2f+0x250>
 8011ddc:	eeb0 0a66 	vmov.f32	s0, s13
 8011de0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011de4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011de8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011ec8 <__ieee754_rem_pio2f+0x254>
 8011dec:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011df0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011df4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011df8:	ed84 7a00 	vstr	s14, [r4]
 8011dfc:	e7bc      	b.n	8011d78 <__ieee754_rem_pio2f+0x104>
 8011dfe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011e02:	d306      	bcc.n	8011e12 <__ieee754_rem_pio2f+0x19e>
 8011e04:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011e08:	edc0 7a01 	vstr	s15, [r0, #4]
 8011e0c:	edc0 7a00 	vstr	s15, [r0]
 8011e10:	e73e      	b.n	8011c90 <__ieee754_rem_pio2f+0x1c>
 8011e12:	15ea      	asrs	r2, r5, #23
 8011e14:	3a86      	subs	r2, #134	@ 0x86
 8011e16:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011e1a:	ee07 3a90 	vmov	s15, r3
 8011e1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011e22:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011ecc <__ieee754_rem_pio2f+0x258>
 8011e26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e2e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011e32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011e3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e42:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011e46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e52:	edcd 7a05 	vstr	s15, [sp, #20]
 8011e56:	d11e      	bne.n	8011e96 <__ieee754_rem_pio2f+0x222>
 8011e58:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e60:	bf0c      	ite	eq
 8011e62:	2301      	moveq	r3, #1
 8011e64:	2302      	movne	r3, #2
 8011e66:	491a      	ldr	r1, [pc, #104]	@ (8011ed0 <__ieee754_rem_pio2f+0x25c>)
 8011e68:	9101      	str	r1, [sp, #4]
 8011e6a:	2102      	movs	r1, #2
 8011e6c:	9100      	str	r1, [sp, #0]
 8011e6e:	a803      	add	r0, sp, #12
 8011e70:	4621      	mov	r1, r4
 8011e72:	f000 f8bb 	bl	8011fec <__kernel_rem_pio2f>
 8011e76:	2e00      	cmp	r6, #0
 8011e78:	f6bf af2f 	bge.w	8011cda <__ieee754_rem_pio2f+0x66>
 8011e7c:	edd4 7a00 	vldr	s15, [r4]
 8011e80:	eef1 7a67 	vneg.f32	s15, s15
 8011e84:	edc4 7a00 	vstr	s15, [r4]
 8011e88:	edd4 7a01 	vldr	s15, [r4, #4]
 8011e8c:	eef1 7a67 	vneg.f32	s15, s15
 8011e90:	edc4 7a01 	vstr	s15, [r4, #4]
 8011e94:	e782      	b.n	8011d9c <__ieee754_rem_pio2f+0x128>
 8011e96:	2303      	movs	r3, #3
 8011e98:	e7e5      	b.n	8011e66 <__ieee754_rem_pio2f+0x1f2>
 8011e9a:	bf00      	nop
 8011e9c:	3f490fd8 	.word	0x3f490fd8
 8011ea0:	4016cbe3 	.word	0x4016cbe3
 8011ea4:	3fc90f80 	.word	0x3fc90f80
 8011ea8:	3fc90fd0 	.word	0x3fc90fd0
 8011eac:	37354400 	.word	0x37354400
 8011eb0:	37354443 	.word	0x37354443
 8011eb4:	2e85a308 	.word	0x2e85a308
 8011eb8:	43490f80 	.word	0x43490f80
 8011ebc:	3f22f984 	.word	0x3f22f984
 8011ec0:	08012a50 	.word	0x08012a50
 8011ec4:	2e85a300 	.word	0x2e85a300
 8011ec8:	248d3132 	.word	0x248d3132
 8011ecc:	43800000 	.word	0x43800000
 8011ed0:	08012ad0 	.word	0x08012ad0

08011ed4 <scalbnf>:
 8011ed4:	ee10 3a10 	vmov	r3, s0
 8011ed8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011edc:	d02b      	beq.n	8011f36 <scalbnf+0x62>
 8011ede:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011ee2:	d302      	bcc.n	8011eea <scalbnf+0x16>
 8011ee4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011ee8:	4770      	bx	lr
 8011eea:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011eee:	d123      	bne.n	8011f38 <scalbnf+0x64>
 8011ef0:	4b24      	ldr	r3, [pc, #144]	@ (8011f84 <scalbnf+0xb0>)
 8011ef2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011f88 <scalbnf+0xb4>
 8011ef6:	4298      	cmp	r0, r3
 8011ef8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011efc:	db17      	blt.n	8011f2e <scalbnf+0x5a>
 8011efe:	ee10 3a10 	vmov	r3, s0
 8011f02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011f06:	3a19      	subs	r2, #25
 8011f08:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011f0c:	4288      	cmp	r0, r1
 8011f0e:	dd15      	ble.n	8011f3c <scalbnf+0x68>
 8011f10:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011f8c <scalbnf+0xb8>
 8011f14:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011f90 <scalbnf+0xbc>
 8011f18:	ee10 3a10 	vmov	r3, s0
 8011f1c:	eeb0 7a67 	vmov.f32	s14, s15
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	bfb8      	it	lt
 8011f24:	eef0 7a66 	vmovlt.f32	s15, s13
 8011f28:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011f2c:	4770      	bx	lr
 8011f2e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011f94 <scalbnf+0xc0>
 8011f32:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011f36:	4770      	bx	lr
 8011f38:	0dd2      	lsrs	r2, r2, #23
 8011f3a:	e7e5      	b.n	8011f08 <scalbnf+0x34>
 8011f3c:	4410      	add	r0, r2
 8011f3e:	28fe      	cmp	r0, #254	@ 0xfe
 8011f40:	dce6      	bgt.n	8011f10 <scalbnf+0x3c>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	dd06      	ble.n	8011f54 <scalbnf+0x80>
 8011f46:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011f4a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011f4e:	ee00 3a10 	vmov	s0, r3
 8011f52:	4770      	bx	lr
 8011f54:	f110 0f16 	cmn.w	r0, #22
 8011f58:	da09      	bge.n	8011f6e <scalbnf+0x9a>
 8011f5a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011f94 <scalbnf+0xc0>
 8011f5e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011f98 <scalbnf+0xc4>
 8011f62:	ee10 3a10 	vmov	r3, s0
 8011f66:	eeb0 7a67 	vmov.f32	s14, s15
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	e7d9      	b.n	8011f22 <scalbnf+0x4e>
 8011f6e:	3019      	adds	r0, #25
 8011f70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011f74:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011f78:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011f9c <scalbnf+0xc8>
 8011f7c:	ee07 3a90 	vmov	s15, r3
 8011f80:	e7d7      	b.n	8011f32 <scalbnf+0x5e>
 8011f82:	bf00      	nop
 8011f84:	ffff3cb0 	.word	0xffff3cb0
 8011f88:	4c000000 	.word	0x4c000000
 8011f8c:	7149f2ca 	.word	0x7149f2ca
 8011f90:	f149f2ca 	.word	0xf149f2ca
 8011f94:	0da24260 	.word	0x0da24260
 8011f98:	8da24260 	.word	0x8da24260
 8011f9c:	33000000 	.word	0x33000000

08011fa0 <with_errnof>:
 8011fa0:	b510      	push	{r4, lr}
 8011fa2:	ed2d 8b02 	vpush	{d8}
 8011fa6:	eeb0 8a40 	vmov.f32	s16, s0
 8011faa:	4604      	mov	r4, r0
 8011fac:	f7fc fe12 	bl	800ebd4 <__errno>
 8011fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8011fb4:	ecbd 8b02 	vpop	{d8}
 8011fb8:	6004      	str	r4, [r0, #0]
 8011fba:	bd10      	pop	{r4, pc}

08011fbc <xflowf>:
 8011fbc:	b130      	cbz	r0, 8011fcc <xflowf+0x10>
 8011fbe:	eef1 7a40 	vneg.f32	s15, s0
 8011fc2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011fc6:	2022      	movs	r0, #34	@ 0x22
 8011fc8:	f7ff bfea 	b.w	8011fa0 <with_errnof>
 8011fcc:	eef0 7a40 	vmov.f32	s15, s0
 8011fd0:	e7f7      	b.n	8011fc2 <xflowf+0x6>
	...

08011fd4 <__math_uflowf>:
 8011fd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011fdc <__math_uflowf+0x8>
 8011fd8:	f7ff bff0 	b.w	8011fbc <xflowf>
 8011fdc:	10000000 	.word	0x10000000

08011fe0 <__math_oflowf>:
 8011fe0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011fe8 <__math_oflowf+0x8>
 8011fe4:	f7ff bfea 	b.w	8011fbc <xflowf>
 8011fe8:	70000000 	.word	0x70000000

08011fec <__kernel_rem_pio2f>:
 8011fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff0:	ed2d 8b04 	vpush	{d8-d9}
 8011ff4:	b0d9      	sub	sp, #356	@ 0x164
 8011ff6:	4690      	mov	r8, r2
 8011ff8:	9001      	str	r0, [sp, #4]
 8011ffa:	4ab9      	ldr	r2, [pc, #740]	@ (80122e0 <__kernel_rem_pio2f+0x2f4>)
 8011ffc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011ffe:	f118 0f04 	cmn.w	r8, #4
 8012002:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8012006:	460f      	mov	r7, r1
 8012008:	f103 3bff 	add.w	fp, r3, #4294967295
 801200c:	db27      	blt.n	801205e <__kernel_rem_pio2f+0x72>
 801200e:	f1b8 0203 	subs.w	r2, r8, #3
 8012012:	bf48      	it	mi
 8012014:	f108 0204 	addmi.w	r2, r8, #4
 8012018:	10d2      	asrs	r2, r2, #3
 801201a:	1c55      	adds	r5, r2, #1
 801201c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801201e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80122f0 <__kernel_rem_pio2f+0x304>
 8012022:	00e8      	lsls	r0, r5, #3
 8012024:	eba2 060b 	sub.w	r6, r2, fp
 8012028:	9002      	str	r0, [sp, #8]
 801202a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801202e:	eb0a 0c0b 	add.w	ip, sl, fp
 8012032:	ac1c      	add	r4, sp, #112	@ 0x70
 8012034:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8012038:	2000      	movs	r0, #0
 801203a:	4560      	cmp	r0, ip
 801203c:	dd11      	ble.n	8012062 <__kernel_rem_pio2f+0x76>
 801203e:	a91c      	add	r1, sp, #112	@ 0x70
 8012040:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012044:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8012048:	f04f 0c00 	mov.w	ip, #0
 801204c:	45d4      	cmp	ip, sl
 801204e:	dc27      	bgt.n	80120a0 <__kernel_rem_pio2f+0xb4>
 8012050:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012054:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80122f0 <__kernel_rem_pio2f+0x304>
 8012058:	4606      	mov	r6, r0
 801205a:	2400      	movs	r4, #0
 801205c:	e016      	b.n	801208c <__kernel_rem_pio2f+0xa0>
 801205e:	2200      	movs	r2, #0
 8012060:	e7db      	b.n	801201a <__kernel_rem_pio2f+0x2e>
 8012062:	42c6      	cmn	r6, r0
 8012064:	bf5d      	ittte	pl
 8012066:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801206a:	ee07 1a90 	vmovpl	s15, r1
 801206e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012072:	eef0 7a47 	vmovmi.f32	s15, s14
 8012076:	ece4 7a01 	vstmia	r4!, {s15}
 801207a:	3001      	adds	r0, #1
 801207c:	e7dd      	b.n	801203a <__kernel_rem_pio2f+0x4e>
 801207e:	ecfe 6a01 	vldmia	lr!, {s13}
 8012082:	ed96 7a00 	vldr	s14, [r6]
 8012086:	eee6 7a87 	vfma.f32	s15, s13, s14
 801208a:	3401      	adds	r4, #1
 801208c:	455c      	cmp	r4, fp
 801208e:	f1a6 0604 	sub.w	r6, r6, #4
 8012092:	ddf4      	ble.n	801207e <__kernel_rem_pio2f+0x92>
 8012094:	ece9 7a01 	vstmia	r9!, {s15}
 8012098:	f10c 0c01 	add.w	ip, ip, #1
 801209c:	3004      	adds	r0, #4
 801209e:	e7d5      	b.n	801204c <__kernel_rem_pio2f+0x60>
 80120a0:	a908      	add	r1, sp, #32
 80120a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120a6:	9104      	str	r1, [sp, #16]
 80120a8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80120aa:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80122ec <__kernel_rem_pio2f+0x300>
 80120ae:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80122e8 <__kernel_rem_pio2f+0x2fc>
 80120b2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80120b6:	9203      	str	r2, [sp, #12]
 80120b8:	4654      	mov	r4, sl
 80120ba:	00a2      	lsls	r2, r4, #2
 80120bc:	9205      	str	r2, [sp, #20]
 80120be:	aa58      	add	r2, sp, #352	@ 0x160
 80120c0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80120c4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80120c8:	a944      	add	r1, sp, #272	@ 0x110
 80120ca:	aa08      	add	r2, sp, #32
 80120cc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80120d0:	4694      	mov	ip, r2
 80120d2:	4626      	mov	r6, r4
 80120d4:	2e00      	cmp	r6, #0
 80120d6:	f1a0 0004 	sub.w	r0, r0, #4
 80120da:	dc4c      	bgt.n	8012176 <__kernel_rem_pio2f+0x18a>
 80120dc:	4628      	mov	r0, r5
 80120de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80120e2:	f7ff fef7 	bl	8011ed4 <scalbnf>
 80120e6:	eeb0 8a40 	vmov.f32	s16, s0
 80120ea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80120ee:	ee28 0a00 	vmul.f32	s0, s16, s0
 80120f2:	f000 f9ed 	bl	80124d0 <floorf>
 80120f6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80120fa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80120fe:	2d00      	cmp	r5, #0
 8012100:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012104:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012108:	ee17 9a90 	vmov	r9, s15
 801210c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012110:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012114:	dd41      	ble.n	801219a <__kernel_rem_pio2f+0x1ae>
 8012116:	f104 3cff 	add.w	ip, r4, #4294967295
 801211a:	a908      	add	r1, sp, #32
 801211c:	f1c5 0e08 	rsb	lr, r5, #8
 8012120:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8012124:	fa46 f00e 	asr.w	r0, r6, lr
 8012128:	4481      	add	r9, r0
 801212a:	fa00 f00e 	lsl.w	r0, r0, lr
 801212e:	1a36      	subs	r6, r6, r0
 8012130:	f1c5 0007 	rsb	r0, r5, #7
 8012134:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012138:	4106      	asrs	r6, r0
 801213a:	2e00      	cmp	r6, #0
 801213c:	dd3c      	ble.n	80121b8 <__kernel_rem_pio2f+0x1cc>
 801213e:	f04f 0e00 	mov.w	lr, #0
 8012142:	f109 0901 	add.w	r9, r9, #1
 8012146:	4670      	mov	r0, lr
 8012148:	4574      	cmp	r4, lr
 801214a:	dc68      	bgt.n	801221e <__kernel_rem_pio2f+0x232>
 801214c:	2d00      	cmp	r5, #0
 801214e:	dd03      	ble.n	8012158 <__kernel_rem_pio2f+0x16c>
 8012150:	2d01      	cmp	r5, #1
 8012152:	d074      	beq.n	801223e <__kernel_rem_pio2f+0x252>
 8012154:	2d02      	cmp	r5, #2
 8012156:	d07d      	beq.n	8012254 <__kernel_rem_pio2f+0x268>
 8012158:	2e02      	cmp	r6, #2
 801215a:	d12d      	bne.n	80121b8 <__kernel_rem_pio2f+0x1cc>
 801215c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012160:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012164:	b340      	cbz	r0, 80121b8 <__kernel_rem_pio2f+0x1cc>
 8012166:	4628      	mov	r0, r5
 8012168:	9306      	str	r3, [sp, #24]
 801216a:	f7ff feb3 	bl	8011ed4 <scalbnf>
 801216e:	9b06      	ldr	r3, [sp, #24]
 8012170:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012174:	e020      	b.n	80121b8 <__kernel_rem_pio2f+0x1cc>
 8012176:	ee60 7a28 	vmul.f32	s15, s0, s17
 801217a:	3e01      	subs	r6, #1
 801217c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012184:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012188:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801218c:	ecac 0a01 	vstmia	ip!, {s0}
 8012190:	ed90 0a00 	vldr	s0, [r0]
 8012194:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012198:	e79c      	b.n	80120d4 <__kernel_rem_pio2f+0xe8>
 801219a:	d105      	bne.n	80121a8 <__kernel_rem_pio2f+0x1bc>
 801219c:	1e60      	subs	r0, r4, #1
 801219e:	a908      	add	r1, sp, #32
 80121a0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80121a4:	11f6      	asrs	r6, r6, #7
 80121a6:	e7c8      	b.n	801213a <__kernel_rem_pio2f+0x14e>
 80121a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80121ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80121b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b4:	da31      	bge.n	801221a <__kernel_rem_pio2f+0x22e>
 80121b6:	2600      	movs	r6, #0
 80121b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80121bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c0:	f040 8098 	bne.w	80122f4 <__kernel_rem_pio2f+0x308>
 80121c4:	1e60      	subs	r0, r4, #1
 80121c6:	2200      	movs	r2, #0
 80121c8:	4550      	cmp	r0, sl
 80121ca:	da4b      	bge.n	8012264 <__kernel_rem_pio2f+0x278>
 80121cc:	2a00      	cmp	r2, #0
 80121ce:	d065      	beq.n	801229c <__kernel_rem_pio2f+0x2b0>
 80121d0:	3c01      	subs	r4, #1
 80121d2:	ab08      	add	r3, sp, #32
 80121d4:	3d08      	subs	r5, #8
 80121d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d0f8      	beq.n	80121d0 <__kernel_rem_pio2f+0x1e4>
 80121de:	4628      	mov	r0, r5
 80121e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80121e4:	f7ff fe76 	bl	8011ed4 <scalbnf>
 80121e8:	1c63      	adds	r3, r4, #1
 80121ea:	aa44      	add	r2, sp, #272	@ 0x110
 80121ec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80122ec <__kernel_rem_pio2f+0x300>
 80121f0:	0099      	lsls	r1, r3, #2
 80121f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80121f6:	4623      	mov	r3, r4
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f280 80a9 	bge.w	8012350 <__kernel_rem_pio2f+0x364>
 80121fe:	4623      	mov	r3, r4
 8012200:	2b00      	cmp	r3, #0
 8012202:	f2c0 80c7 	blt.w	8012394 <__kernel_rem_pio2f+0x3a8>
 8012206:	aa44      	add	r2, sp, #272	@ 0x110
 8012208:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801220c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80122e4 <__kernel_rem_pio2f+0x2f8>
 8012210:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80122f0 <__kernel_rem_pio2f+0x304>
 8012214:	2000      	movs	r0, #0
 8012216:	1ae2      	subs	r2, r4, r3
 8012218:	e0b1      	b.n	801237e <__kernel_rem_pio2f+0x392>
 801221a:	2602      	movs	r6, #2
 801221c:	e78f      	b.n	801213e <__kernel_rem_pio2f+0x152>
 801221e:	f852 1b04 	ldr.w	r1, [r2], #4
 8012222:	b948      	cbnz	r0, 8012238 <__kernel_rem_pio2f+0x24c>
 8012224:	b121      	cbz	r1, 8012230 <__kernel_rem_pio2f+0x244>
 8012226:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801222a:	f842 1c04 	str.w	r1, [r2, #-4]
 801222e:	2101      	movs	r1, #1
 8012230:	f10e 0e01 	add.w	lr, lr, #1
 8012234:	4608      	mov	r0, r1
 8012236:	e787      	b.n	8012148 <__kernel_rem_pio2f+0x15c>
 8012238:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801223c:	e7f5      	b.n	801222a <__kernel_rem_pio2f+0x23e>
 801223e:	f104 3cff 	add.w	ip, r4, #4294967295
 8012242:	aa08      	add	r2, sp, #32
 8012244:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012248:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801224c:	a908      	add	r1, sp, #32
 801224e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012252:	e781      	b.n	8012158 <__kernel_rem_pio2f+0x16c>
 8012254:	f104 3cff 	add.w	ip, r4, #4294967295
 8012258:	aa08      	add	r2, sp, #32
 801225a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801225e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012262:	e7f3      	b.n	801224c <__kernel_rem_pio2f+0x260>
 8012264:	a908      	add	r1, sp, #32
 8012266:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801226a:	3801      	subs	r0, #1
 801226c:	430a      	orrs	r2, r1
 801226e:	e7ab      	b.n	80121c8 <__kernel_rem_pio2f+0x1dc>
 8012270:	3201      	adds	r2, #1
 8012272:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8012276:	2e00      	cmp	r6, #0
 8012278:	d0fa      	beq.n	8012270 <__kernel_rem_pio2f+0x284>
 801227a:	9905      	ldr	r1, [sp, #20]
 801227c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012280:	eb0d 0001 	add.w	r0, sp, r1
 8012284:	18e6      	adds	r6, r4, r3
 8012286:	a91c      	add	r1, sp, #112	@ 0x70
 8012288:	f104 0c01 	add.w	ip, r4, #1
 801228c:	384c      	subs	r0, #76	@ 0x4c
 801228e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012292:	4422      	add	r2, r4
 8012294:	4562      	cmp	r2, ip
 8012296:	da04      	bge.n	80122a2 <__kernel_rem_pio2f+0x2b6>
 8012298:	4614      	mov	r4, r2
 801229a:	e70e      	b.n	80120ba <__kernel_rem_pio2f+0xce>
 801229c:	9804      	ldr	r0, [sp, #16]
 801229e:	2201      	movs	r2, #1
 80122a0:	e7e7      	b.n	8012272 <__kernel_rem_pio2f+0x286>
 80122a2:	9903      	ldr	r1, [sp, #12]
 80122a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80122a8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80122ac:	9105      	str	r1, [sp, #20]
 80122ae:	ee07 1a90 	vmov	s15, r1
 80122b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122b6:	2400      	movs	r4, #0
 80122b8:	ece6 7a01 	vstmia	r6!, {s15}
 80122bc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80122f0 <__kernel_rem_pio2f+0x304>
 80122c0:	46b1      	mov	r9, r6
 80122c2:	455c      	cmp	r4, fp
 80122c4:	dd04      	ble.n	80122d0 <__kernel_rem_pio2f+0x2e4>
 80122c6:	ece0 7a01 	vstmia	r0!, {s15}
 80122ca:	f10c 0c01 	add.w	ip, ip, #1
 80122ce:	e7e1      	b.n	8012294 <__kernel_rem_pio2f+0x2a8>
 80122d0:	ecfe 6a01 	vldmia	lr!, {s13}
 80122d4:	ed39 7a01 	vldmdb	r9!, {s14}
 80122d8:	3401      	adds	r4, #1
 80122da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122de:	e7f0      	b.n	80122c2 <__kernel_rem_pio2f+0x2d6>
 80122e0:	08012e14 	.word	0x08012e14
 80122e4:	08012de8 	.word	0x08012de8
 80122e8:	43800000 	.word	0x43800000
 80122ec:	3b800000 	.word	0x3b800000
 80122f0:	00000000 	.word	0x00000000
 80122f4:	9b02      	ldr	r3, [sp, #8]
 80122f6:	eeb0 0a48 	vmov.f32	s0, s16
 80122fa:	eba3 0008 	sub.w	r0, r3, r8
 80122fe:	f7ff fde9 	bl	8011ed4 <scalbnf>
 8012302:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80122e8 <__kernel_rem_pio2f+0x2fc>
 8012306:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801230e:	db19      	blt.n	8012344 <__kernel_rem_pio2f+0x358>
 8012310:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80122ec <__kernel_rem_pio2f+0x300>
 8012314:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012318:	aa08      	add	r2, sp, #32
 801231a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801231e:	3508      	adds	r5, #8
 8012320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012324:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801232c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012330:	ee10 3a10 	vmov	r3, s0
 8012334:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012338:	ee17 3a90 	vmov	r3, s15
 801233c:	3401      	adds	r4, #1
 801233e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012342:	e74c      	b.n	80121de <__kernel_rem_pio2f+0x1f2>
 8012344:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012348:	aa08      	add	r2, sp, #32
 801234a:	ee10 3a10 	vmov	r3, s0
 801234e:	e7f6      	b.n	801233e <__kernel_rem_pio2f+0x352>
 8012350:	a808      	add	r0, sp, #32
 8012352:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012356:	9001      	str	r0, [sp, #4]
 8012358:	ee07 0a90 	vmov	s15, r0
 801235c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012360:	3b01      	subs	r3, #1
 8012362:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012366:	ee20 0a07 	vmul.f32	s0, s0, s14
 801236a:	ed62 7a01 	vstmdb	r2!, {s15}
 801236e:	e743      	b.n	80121f8 <__kernel_rem_pio2f+0x20c>
 8012370:	ecfc 6a01 	vldmia	ip!, {s13}
 8012374:	ecb5 7a01 	vldmia	r5!, {s14}
 8012378:	eee6 7a87 	vfma.f32	s15, s13, s14
 801237c:	3001      	adds	r0, #1
 801237e:	4550      	cmp	r0, sl
 8012380:	dc01      	bgt.n	8012386 <__kernel_rem_pio2f+0x39a>
 8012382:	4282      	cmp	r2, r0
 8012384:	daf4      	bge.n	8012370 <__kernel_rem_pio2f+0x384>
 8012386:	a858      	add	r0, sp, #352	@ 0x160
 8012388:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801238c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012390:	3b01      	subs	r3, #1
 8012392:	e735      	b.n	8012200 <__kernel_rem_pio2f+0x214>
 8012394:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012396:	2b02      	cmp	r3, #2
 8012398:	dc09      	bgt.n	80123ae <__kernel_rem_pio2f+0x3c2>
 801239a:	2b00      	cmp	r3, #0
 801239c:	dc2b      	bgt.n	80123f6 <__kernel_rem_pio2f+0x40a>
 801239e:	d044      	beq.n	801242a <__kernel_rem_pio2f+0x43e>
 80123a0:	f009 0007 	and.w	r0, r9, #7
 80123a4:	b059      	add	sp, #356	@ 0x164
 80123a6:	ecbd 8b04 	vpop	{d8-d9}
 80123aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80123b0:	2b03      	cmp	r3, #3
 80123b2:	d1f5      	bne.n	80123a0 <__kernel_rem_pio2f+0x3b4>
 80123b4:	aa30      	add	r2, sp, #192	@ 0xc0
 80123b6:	1f0b      	subs	r3, r1, #4
 80123b8:	4413      	add	r3, r2
 80123ba:	461a      	mov	r2, r3
 80123bc:	4620      	mov	r0, r4
 80123be:	2800      	cmp	r0, #0
 80123c0:	f1a2 0204 	sub.w	r2, r2, #4
 80123c4:	dc52      	bgt.n	801246c <__kernel_rem_pio2f+0x480>
 80123c6:	4622      	mov	r2, r4
 80123c8:	2a01      	cmp	r2, #1
 80123ca:	f1a3 0304 	sub.w	r3, r3, #4
 80123ce:	dc5d      	bgt.n	801248c <__kernel_rem_pio2f+0x4a0>
 80123d0:	ab30      	add	r3, sp, #192	@ 0xc0
 80123d2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80122f0 <__kernel_rem_pio2f+0x304>
 80123d6:	440b      	add	r3, r1
 80123d8:	2c01      	cmp	r4, #1
 80123da:	dc67      	bgt.n	80124ac <__kernel_rem_pio2f+0x4c0>
 80123dc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80123e0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80123e4:	2e00      	cmp	r6, #0
 80123e6:	d167      	bne.n	80124b8 <__kernel_rem_pio2f+0x4cc>
 80123e8:	edc7 6a00 	vstr	s13, [r7]
 80123ec:	ed87 7a01 	vstr	s14, [r7, #4]
 80123f0:	edc7 7a02 	vstr	s15, [r7, #8]
 80123f4:	e7d4      	b.n	80123a0 <__kernel_rem_pio2f+0x3b4>
 80123f6:	ab30      	add	r3, sp, #192	@ 0xc0
 80123f8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80122f0 <__kernel_rem_pio2f+0x304>
 80123fc:	440b      	add	r3, r1
 80123fe:	4622      	mov	r2, r4
 8012400:	2a00      	cmp	r2, #0
 8012402:	da24      	bge.n	801244e <__kernel_rem_pio2f+0x462>
 8012404:	b34e      	cbz	r6, 801245a <__kernel_rem_pio2f+0x46e>
 8012406:	eef1 7a47 	vneg.f32	s15, s14
 801240a:	edc7 7a00 	vstr	s15, [r7]
 801240e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8012412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012416:	aa31      	add	r2, sp, #196	@ 0xc4
 8012418:	2301      	movs	r3, #1
 801241a:	429c      	cmp	r4, r3
 801241c:	da20      	bge.n	8012460 <__kernel_rem_pio2f+0x474>
 801241e:	b10e      	cbz	r6, 8012424 <__kernel_rem_pio2f+0x438>
 8012420:	eef1 7a67 	vneg.f32	s15, s15
 8012424:	edc7 7a01 	vstr	s15, [r7, #4]
 8012428:	e7ba      	b.n	80123a0 <__kernel_rem_pio2f+0x3b4>
 801242a:	ab30      	add	r3, sp, #192	@ 0xc0
 801242c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80122f0 <__kernel_rem_pio2f+0x304>
 8012430:	440b      	add	r3, r1
 8012432:	2c00      	cmp	r4, #0
 8012434:	da05      	bge.n	8012442 <__kernel_rem_pio2f+0x456>
 8012436:	b10e      	cbz	r6, 801243c <__kernel_rem_pio2f+0x450>
 8012438:	eef1 7a67 	vneg.f32	s15, s15
 801243c:	edc7 7a00 	vstr	s15, [r7]
 8012440:	e7ae      	b.n	80123a0 <__kernel_rem_pio2f+0x3b4>
 8012442:	ed33 7a01 	vldmdb	r3!, {s14}
 8012446:	3c01      	subs	r4, #1
 8012448:	ee77 7a87 	vadd.f32	s15, s15, s14
 801244c:	e7f1      	b.n	8012432 <__kernel_rem_pio2f+0x446>
 801244e:	ed73 7a01 	vldmdb	r3!, {s15}
 8012452:	3a01      	subs	r2, #1
 8012454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012458:	e7d2      	b.n	8012400 <__kernel_rem_pio2f+0x414>
 801245a:	eef0 7a47 	vmov.f32	s15, s14
 801245e:	e7d4      	b.n	801240a <__kernel_rem_pio2f+0x41e>
 8012460:	ecb2 7a01 	vldmia	r2!, {s14}
 8012464:	3301      	adds	r3, #1
 8012466:	ee77 7a87 	vadd.f32	s15, s15, s14
 801246a:	e7d6      	b.n	801241a <__kernel_rem_pio2f+0x42e>
 801246c:	edd2 7a00 	vldr	s15, [r2]
 8012470:	edd2 6a01 	vldr	s13, [r2, #4]
 8012474:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012478:	3801      	subs	r0, #1
 801247a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801247e:	ed82 7a00 	vstr	s14, [r2]
 8012482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012486:	edc2 7a01 	vstr	s15, [r2, #4]
 801248a:	e798      	b.n	80123be <__kernel_rem_pio2f+0x3d2>
 801248c:	edd3 7a00 	vldr	s15, [r3]
 8012490:	edd3 6a01 	vldr	s13, [r3, #4]
 8012494:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012498:	3a01      	subs	r2, #1
 801249a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801249e:	ed83 7a00 	vstr	s14, [r3]
 80124a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80124a6:	edc3 7a01 	vstr	s15, [r3, #4]
 80124aa:	e78d      	b.n	80123c8 <__kernel_rem_pio2f+0x3dc>
 80124ac:	ed33 7a01 	vldmdb	r3!, {s14}
 80124b0:	3c01      	subs	r4, #1
 80124b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124b6:	e78f      	b.n	80123d8 <__kernel_rem_pio2f+0x3ec>
 80124b8:	eef1 6a66 	vneg.f32	s13, s13
 80124bc:	eeb1 7a47 	vneg.f32	s14, s14
 80124c0:	edc7 6a00 	vstr	s13, [r7]
 80124c4:	ed87 7a01 	vstr	s14, [r7, #4]
 80124c8:	eef1 7a67 	vneg.f32	s15, s15
 80124cc:	e790      	b.n	80123f0 <__kernel_rem_pio2f+0x404>
 80124ce:	bf00      	nop

080124d0 <floorf>:
 80124d0:	ee10 3a10 	vmov	r3, s0
 80124d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80124d8:	3a7f      	subs	r2, #127	@ 0x7f
 80124da:	2a16      	cmp	r2, #22
 80124dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80124e0:	dc2b      	bgt.n	801253a <floorf+0x6a>
 80124e2:	2a00      	cmp	r2, #0
 80124e4:	da12      	bge.n	801250c <floorf+0x3c>
 80124e6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801254c <floorf+0x7c>
 80124ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80124f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f6:	dd06      	ble.n	8012506 <floorf+0x36>
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	da24      	bge.n	8012546 <floorf+0x76>
 80124fc:	2900      	cmp	r1, #0
 80124fe:	4b14      	ldr	r3, [pc, #80]	@ (8012550 <floorf+0x80>)
 8012500:	bf08      	it	eq
 8012502:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012506:	ee00 3a10 	vmov	s0, r3
 801250a:	4770      	bx	lr
 801250c:	4911      	ldr	r1, [pc, #68]	@ (8012554 <floorf+0x84>)
 801250e:	4111      	asrs	r1, r2
 8012510:	420b      	tst	r3, r1
 8012512:	d0fa      	beq.n	801250a <floorf+0x3a>
 8012514:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801254c <floorf+0x7c>
 8012518:	ee30 0a27 	vadd.f32	s0, s0, s15
 801251c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012524:	ddef      	ble.n	8012506 <floorf+0x36>
 8012526:	2b00      	cmp	r3, #0
 8012528:	bfbe      	ittt	lt
 801252a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801252e:	fa40 f202 	asrlt.w	r2, r0, r2
 8012532:	189b      	addlt	r3, r3, r2
 8012534:	ea23 0301 	bic.w	r3, r3, r1
 8012538:	e7e5      	b.n	8012506 <floorf+0x36>
 801253a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801253e:	d3e4      	bcc.n	801250a <floorf+0x3a>
 8012540:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012544:	4770      	bx	lr
 8012546:	2300      	movs	r3, #0
 8012548:	e7dd      	b.n	8012506 <floorf+0x36>
 801254a:	bf00      	nop
 801254c:	7149f2ca 	.word	0x7149f2ca
 8012550:	bf800000 	.word	0xbf800000
 8012554:	007fffff 	.word	0x007fffff

08012558 <_init>:
 8012558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255a:	bf00      	nop
 801255c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801255e:	bc08      	pop	{r3}
 8012560:	469e      	mov	lr, r3
 8012562:	4770      	bx	lr

08012564 <_fini>:
 8012564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012566:	bf00      	nop
 8012568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801256a:	bc08      	pop	{r3}
 801256c:	469e      	mov	lr, r3
 801256e:	4770      	bx	lr
