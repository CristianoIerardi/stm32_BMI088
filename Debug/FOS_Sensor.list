
FOS_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012718  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  080128a8  080128a8  000138a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013170  08013170  00015308  2**0
                  CONTENTS
  4 .ARM          00000008  08013170  08013170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013178  08013178  00015308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013178  08013178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801317c  0801317c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000308  20000000  08013180  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015308  2**0
                  CONTENTS
 10 .bss          000024fc  20000308  20000308  00015308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002804  20002804  00015308  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ceef  00000000  00000000  00015338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004695  00000000  00000000  00032227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  000368c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001326  00000000  00000000  000381a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d0c  00000000  00000000  000394c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ddf  00000000  00000000  0005e1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbe82  00000000  00000000  0007efb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ae33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e38  00000000  00000000  0014ae78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00152cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012890 	.word	0x08012890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	08012890 	.word	0x08012890

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <is_valid_number>:
 * @brief Checks whether a string contains only numeric digits.
 * @param s Pointer to null-terminated string to check.
 * @return 1 if the string is a valid number, 0 otherwise.
 */
uint8_t is_valid_number(const char *s)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    // Check for NULL or empty string
    if (s == NULL || *s == '\0')
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <is_valid_number+0x16>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <is_valid_number+0x1a>
    	return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e01a      	b.n	8000f88 <is_valid_number+0x50>

    // Iterate through each character to verify it's a digit
    for (int i = 0; s[i] != '\0'; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e010      	b.n	8000f7a <is_valid_number+0x42>
        if (s[i] < '0' || s[i] > '9')
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f62:	d905      	bls.n	8000f70 <is_valid_number+0x38>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b39      	cmp	r3, #57	@ 0x39
 8000f6e:	d901      	bls.n	8000f74 <is_valid_number+0x3c>
        	return 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e009      	b.n	8000f88 <is_valid_number+0x50>
    for (int i = 0; s[i] != '\0'; i++) {
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1e8      	bne.n	8000f58 <is_valid_number+0x20>
    }

    return 1;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HandleReceivedString>:
/**
 * @brief Handles a received string, parses it as an integer, and updates the sampling time.
 * @param str Pointer to the received null-terminated string.
 */
void HandleReceivedString(char *str)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	//char rxBuff[64];  // Buffer for optional debug response

    // Remove possible trailing \r or \n characters
    char *clean_str = str;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	613b      	str	r3, [r7, #16]

    // Trim line endings
    for (int i = 0; clean_str[i] != '\0'; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e014      	b.n	8000fd0 <HandleReceivedString+0x3c>
        if (clean_str[i] == '\r' || clean_str[i] == '\n') {
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b0d      	cmp	r3, #13
 8000fb0:	d005      	beq.n	8000fbe <HandleReceivedString+0x2a>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b0a      	cmp	r3, #10
 8000fbc:	d105      	bne.n	8000fca <HandleReceivedString+0x36>
            clean_str[i] = '\0';
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
            break;
 8000fc8:	e008      	b.n	8000fdc <HandleReceivedString+0x48>
    for (int i = 0; clean_str[i] != '\0'; i++) {
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e4      	bne.n	8000fa6 <HandleReceivedString+0x12>
        }
    }

    // Validate that input is numeric
	if (!is_valid_number(clean_str)) {
 8000fdc:	6938      	ldr	r0, [r7, #16]
 8000fde:	f7ff ffab 	bl	8000f38 <is_valid_number>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d010      	beq.n	800100a <HandleReceivedString+0x76>
		//CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));
		return;
	}

    // Convert string to unsigned integer
    uint32_t value = (uint32_t)strtoul(clean_str, NULL, 10);
 8000fe8:	220a      	movs	r2, #10
 8000fea:	2100      	movs	r1, #0
 8000fec:	6938      	ldr	r0, [r7, #16]
 8000fee:	f00d f9a3 	bl	800e338 <strtoul>
 8000ff2:	60f8      	str	r0, [r7, #12]

    // Check that value is in acceptable range
    if (value >= 0 && value <= 5000)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d806      	bhi.n	800100c <HandleReceivedString+0x78>
    {
        uint32_t parsed_value = value;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	60bb      	str	r3, [r7, #8]
        //sprintf(rxBuff, "ParsVal: %i", parsed_value);
        //CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));

        // Update global sampling time
        SAMPLE_TIME_MS_TOGGLE = parsed_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HandleReceivedString+0x80>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e000      	b.n	800100c <HandleReceivedString+0x78>
		return;
 800100a:	bf00      	nop
    else
    {
    	//sprintf(rxBuff, "Parsing error");
    	//CDC_Transmit_FS((uint8_t *) rxBuff, strlen(rxBuff));
    }
}
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008

08001018 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	887a      	ldrh	r2, [r7, #2]
 8001036:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a3a      	ldr	r2, [r7, #32]
 800103c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001042:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6858      	ldr	r0, [r3, #4]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	899b      	ldrh	r3, [r3, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	f004 f8de 	bl	8005220 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f003 fa07 	bl	8004478 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	899b      	ldrh	r3, [r3, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	f004 f8d3 	bl	8005220 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800107a:	2032      	movs	r0, #50	@ 0x32
 800107c:	f003 f9fc 	bl	8004478 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8001080:	22b6      	movs	r2, #182	@ 0xb6
 8001082:	217e      	movs	r1, #126	@ 0x7e
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fa29 	bl	80014dc <BMI088_WriteAccRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	4413      	add	r3, r2
 8001092:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8001094:	2032      	movs	r0, #50	@ 0x32
 8001096:	f003 f9ef 	bl	8004478 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800109a:	f107 0316 	add.w	r3, r7, #22
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f9a0 	bl	80013e8 <BMI088_ReadAccRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	4413      	add	r3, r2
 80010b0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f003 f9e0 	bl	8004478 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0x09); /* (no oversampling, ODR = 200 Hz, BW = ?? Hz /////////////////////////BW = 40 Hz) */
 80010b8:	2209      	movs	r2, #9
 80010ba:	2140      	movs	r1, #64	@ 0x40
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 fa0d 	bl	80014dc <BMI088_WriteAccRegister>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	4413      	add	r3, r2
 80010ca:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f003 f9d3 	bl	8004478 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x01); /* +- 6g range */
 80010d2:	2201      	movs	r2, #1
 80010d4:	2141      	movs	r1, #65	@ 0x41
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 fa00 	bl	80014dc <BMI088_WriteAccRegister>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	4413      	add	r3, r2
 80010e4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f003 f9c6 	bl	8004478 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80010ec:	220a      	movs	r2, #10
 80010ee:	2153      	movs	r1, #83	@ 0x53
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f000 f9f3 	bl	80014dc <BMI088_WriteAccRegister>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	4413      	add	r3, r2
 80010fe:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f003 f9b9 	bl	8004478 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8001106:	2204      	movs	r2, #4
 8001108:	2158      	movs	r1, #88	@ 0x58
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 f9e6 	bl	80014dc <BMI088_WriteAccRegister>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	4413      	add	r3, r2
 8001118:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800111a:	200a      	movs	r0, #10
 800111c:	f003 f9ac 	bl	8004478 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8001120:	2200      	movs	r2, #0
 8001122:	217c      	movs	r1, #124	@ 0x7c
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f9d9 	bl	80014dc <BMI088_WriteAccRegister>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	4413      	add	r3, r2
 8001132:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f003 f99f 	bl	8004478 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800113a:	2204      	movs	r2, #4
 800113c:	217d      	movs	r1, #125	@ 0x7d
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f9cc 	bl	80014dc <BMI088_WriteAccRegister>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	4413      	add	r3, r2
 800114c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f003 f992 	bl	8004478 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a3a      	ldr	r2, [pc, #232]	@ (8001240 <BMI088_Init+0x228>)
 8001158:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2292      	movs	r2, #146	@ 0x92
 800115e:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	89db      	ldrh	r3, [r3, #14]
 8001168:	2201      	movs	r2, #1
 800116a:	4619      	mov	r1, r3
 800116c:	f004 f858 	bl	8005220 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001170:	22b6      	movs	r2, #182	@ 0xb6
 8001172:	2114      	movs	r1, #20
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f9eb 	bl	8001550 <BMI088_WriteGyrRegister>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	4413      	add	r3, r2
 8001182:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001184:	20fa      	movs	r0, #250	@ 0xfa
 8001186:	f003 f977 	bl	8004478 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800118a:	f107 0316 	add.w	r3, r7, #22
 800118e:	461a      	mov	r2, r3
 8001190:	2100      	movs	r1, #0
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f966 	bl	8001464 <BMI088_ReadGyrRegister>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	4413      	add	r3, r2
 80011a0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f003 f968 	bl	8004478 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80011a8:	2201      	movs	r2, #1
 80011aa:	210f      	movs	r1, #15
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f000 f9cf 	bl	8001550 <BMI088_WriteGyrRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4413      	add	r3, r2
 80011ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f003 f95b 	bl	8004478 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* ODR = 200 Hz, Filter bandwidth = 64 Hz */
 80011c2:	2206      	movs	r2, #6
 80011c4:	2110      	movs	r1, #16
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f9c2 	bl	8001550 <BMI088_WriteGyrRegister>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	4413      	add	r3, r2
 80011d4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f003 f94e 	bl	8004478 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	2115      	movs	r1, #21
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f9b5 	bl	8001550 <BMI088_WriteGyrRegister>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	4413      	add	r3, r2
 80011ee:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f003 f941 	bl	8004478 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80011f6:	2201      	movs	r2, #1
 80011f8:	2116      	movs	r1, #22
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f9a8 	bl	8001550 <BMI088_WriteGyrRegister>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	4413      	add	r3, r2
 8001208:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f003 f934 	bl	8004478 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001210:	2201      	movs	r2, #1
 8001212:	2118      	movs	r1, #24
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f99b 	bl	8001550 <BMI088_WriteGyrRegister>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	4413      	add	r3, r2
 8001222:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001224:	200a      	movs	r0, #10
 8001226:	f003 f927 	bl	8004478 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <BMI088_Init+0x22c>)
 800122e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2282      	movs	r2, #130	@ 0x82
 8001234:	769a      	strb	r2, [r3, #26]

	return status;
 8001236:	7dfb      	ldrb	r3, [r7, #23]

}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	3a6b70a4 	.word	0x3a6b70a4
 8001244:	3a0ba058 	.word	0x3a0ba058

08001248 <Init_BMI088_Bias>:


void Init_BMI088_Bias(BMI088* imu, int cycles)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < cycles; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e044      	b.n	80012e2 <Init_BMI088_Bias+0x9a>
    {
        imu->gyr_bias[0] += imu->gyr_rps[0];
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        imu->gyr_bias[1] += imu->gyr_rps[1];
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        imu->gyr_bias[2] += imu->gyr_rps[2];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        imu->acc_bias[0] += imu->acc_mps2[0];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
        imu->acc_bias[1] += imu->acc_mps2[1];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        imu->acc_bias[2] += imu->acc_mps2[2];
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80012d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    for (int i = 0; i < cycles; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbb6      	blt.n	8001258 <Init_BMI088_Bias+0x10>
    }
    for (int i = 0; i < 3; i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	e02e      	b.n	800134e <Init_BMI088_Bias+0x106>
    {
    	imu->gyr_bias[i] = imu->gyr_bias[i] / cycles;
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3316      	adds	r3, #22
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3304      	adds	r3, #4
 80012fc:	edd3 6a00 	vldr	s13, [r3]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3316      	adds	r3, #22
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3304      	adds	r3, #4
 800131a:	edc3 7a00 	vstr	s15, [r3]
    	imu->acc_bias[i] = imu->acc_bias[i] / cycles;
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3314      	adds	r3, #20
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	edd3 6a00 	vldr	s13, [r3]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3314      	adds	r3, #20
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b02      	cmp	r3, #2
 8001352:	ddcd      	ble.n	80012f0 <Init_BMI088_Bias+0xa8>
    }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <Take_IMU_Measurements>:


/// Function to insert IMU measurements from memory to memory (data is adjusted)
void Take_IMU_Measurements(BMI088 *imu, BinaryPacket *pkt)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
	pkt->timestamp = HAL_GetTick();		// Timestamp when data is taken from memory to memory (not from BMI088 to memory!)
 800136c:	f003 f878 	bl	8004460 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	605a      	str	r2, [r3, #4]
	/* Here a sign and axis correction is applied.
	 * In the rest of the code I will use gyr and acc that are the shared variables
	 * elaborated by the algorithms while instead, in imu->___[__] there are pure values
	 * taken from the memory of the sensor BMI088
	 */
	pkt->gyr[0] = -imu->gyr_rps[1] + imu->gyr_bias[1];			// + 0.0051;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	ee17 2a90 	vmov	r2, s15
 800138c:	615a      	str	r2, [r3, #20]
	pkt->gyr[1] = imu->gyr_rps[0] - imu->gyr_bias[0];			// + 0.0025;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	ee17 2a90 	vmov	r2, s15
 80013a4:	619a      	str	r2, [r3, #24]
	pkt->gyr[2] = imu->gyr_rps[2] - imu->gyr_bias[2];			// + 0.0047;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	ee17 2a90 	vmov	r2, s15
 80013bc:	61da      	str	r2, [r3, #28]
	pkt->acc[0] = -imu->acc_mps2[1];
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80013c4:	eef1 7a67 	vneg.f32	s15, s15
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	ee17 2a90 	vmov	r2, s15
 80013ce:	621a      	str	r2, [r3, #32]
	pkt->acc[1] = imu->acc_mps2[0];
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24
	pkt->acc[2] = imu->acc_mps2[2];
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	460b      	mov	r3, r1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	753b      	strb	r3, [r7, #20]
 8001400:	2300      	movs	r3, #0
 8001402:	757b      	strb	r3, [r7, #21]
 8001404:	2300      	movs	r3, #0
 8001406:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6858      	ldr	r0, [r3, #4]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	899b      	ldrh	r3, [r3, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	f003 ff04 	bl	8005220 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	f107 0210 	add.w	r2, r7, #16
 8001420:	f107 0114 	add.w	r1, r7, #20
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2303      	movs	r3, #3
 800142c:	f005 fff9 	bl	8007422 <HAL_SPI_TransmitReceive>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6858      	ldr	r0, [r3, #4]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	899b      	ldrh	r3, [r3, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	4619      	mov	r1, r3
 800144a:	f003 fee9 	bl	8005220 <HAL_GPIO_WritePin>

	if (status == 1) {
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001454:	7cba      	ldrb	r2, [r7, #18]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800145a:	7dfb      	ldrb	r3, [r7, #23]

}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af02      	add	r7, sp, #8
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	460b      	mov	r3, r1
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001478:	b2db      	uxtb	r3, r3
 800147a:	753b      	strb	r3, [r7, #20]
 800147c:	2300      	movs	r3, #0
 800147e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	89db      	ldrh	r3, [r3, #14]
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	f003 fec8 	bl	8005220 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f107 0210 	add.w	r2, r7, #16
 8001498:	f107 0114 	add.w	r1, r7, #20
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2302      	movs	r3, #2
 80014a4:	f005 ffbd 	bl	8007422 <HAL_SPI_TransmitReceive>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf0c      	ite	eq
 80014ae:	2301      	moveq	r3, #1
 80014b0:	2300      	movne	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6898      	ldr	r0, [r3, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	89db      	ldrh	r3, [r3, #14]
 80014be:	2201      	movs	r2, #1
 80014c0:	4619      	mov	r1, r3
 80014c2:	f003 fead 	bl	8005220 <HAL_GPIO_WritePin>

	if (status == 1) {
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80014cc:	7c7a      	ldrb	r2, [r7, #17]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80014d2:	7dfb      	ldrb	r3, [r7, #23]

}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	4613      	mov	r3, r2
 80014ea:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	733b      	strb	r3, [r7, #12]
 80014f0:	78bb      	ldrb	r3, [r7, #2]
 80014f2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6858      	ldr	r0, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	899b      	ldrh	r3, [r3, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	f003 fe8e 	bl	8005220 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f107 010c 	add.w	r1, r7, #12
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	2202      	movs	r2, #2
 8001512:	f005 fe42 	bl	800719a <HAL_SPI_Transmit>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001524:	bf00      	nop
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f006 fb3a 	bl	8007ba4 <HAL_SPI_GetState>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d1f7      	bne.n	8001526 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6858      	ldr	r0, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	899b      	ldrh	r3, [r3, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	f003 fe6d 	bl	8005220 <HAL_GPIO_WritePin>

	return status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]

}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
 800155c:	4613      	mov	r3, r2
 800155e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	78bb      	ldrb	r3, [r7, #2]
 8001566:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	89db      	ldrh	r3, [r3, #14]
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	f003 fe54 	bl	8005220 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	2202      	movs	r2, #2
 8001586:	f005 fe08 	bl	800719a <HAL_SPI_Transmit>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001598:	bf00      	nop
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 fb00 	bl	8007ba4 <HAL_SPI_GetState>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d1f7      	bne.n	800159a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6898      	ldr	r0, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	89db      	ldrh	r3, [r3, #14]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4619      	mov	r1, r3
 80015b6:	f003 fe33 	bl	8005220 <HAL_GPIO_WritePin>

	return status;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]

}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

	if (imu->readingAcc)  // To not have double calls
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7c1b      	ldrb	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <BMI088_ReadAccelerometerDMA+0x14>
		return 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e023      	b.n	8001620 <BMI088_ReadAccelerometerDMA+0x5c>

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6858      	ldr	r0, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	899b      	ldrh	r3, [r3, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	f003 fe1c 	bl	8005220 <HAL_GPIO_WritePin>

	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f103 0112 	add.w	r1, r3, #18
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80015f8:	2308      	movs	r3, #8
 80015fa:	f006 f8bb 	bl	8007774 <HAL_SPI_TransmitReceive_DMA>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d104      	bne.n	800160e <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	741a      	strb	r2, [r3, #16]
		return 1;
 800160a:	2301      	movs	r3, #1
 800160c:	e008      	b.n	8001620 <BMI088_ReadAccelerometerDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6858      	ldr	r0, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	899b      	ldrh	r3, [r3, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	f003 fe01 	bl	8005220 <HAL_GPIO_WritePin>
		return 0;
 800161e:	2300      	movs	r3, #0

	}

}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6858      	ldr	r0, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	899b      	ldrh	r3, [r3, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	4619      	mov	r1, r3
 800163c:	f003 fdf0 	bl	8005220 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800164c:	b2db      	uxtb	r3, r3
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001658:	b2db      	uxtb	r3, r3
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001666:	b2db      	uxtb	r3, r3
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001680:	b2db      	uxtb	r3, r3
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX * 2;		// *2 was added by Cristiano.
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800169a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY * 2;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80016ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ * 2;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80016da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

	if (imu->readingGyr)  // To not have double calls
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7c5b      	ldrb	r3, [r3, #17]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <BMI088_ReadGyroscopeDMA+0x14>
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e023      	b.n	8001758 <BMI088_ReadGyroscopeDMA+0x5c>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6898      	ldr	r0, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	89db      	ldrh	r3, [r3, #14]
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	f003 fd80 	bl	8005220 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f103 011a 	add.w	r1, r3, #26
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001730:	2307      	movs	r3, #7
 8001732:	f006 f81f 	bl	8007774 <HAL_SPI_TransmitReceive_DMA>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d104      	bne.n	8001746 <BMI088_ReadGyroscopeDMA+0x4a>

		imu->readingGyr = 1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	745a      	strb	r2, [r3, #17]
		return 1;
 8001742:	2301      	movs	r3, #1
 8001744:	e008      	b.n	8001758 <BMI088_ReadGyroscopeDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6898      	ldr	r0, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	89db      	ldrh	r3, [r3, #14]
 800174e:	2201      	movs	r2, #1
 8001750:	4619      	mov	r1, r3
 8001752:	f003 fd65 	bl	8005220 <HAL_GPIO_WritePin>
		return 0;
 8001756:	2300      	movs	r3, #0

	}

}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6898      	ldr	r0, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	89db      	ldrh	r3, [r3, #14]
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	f003 fd54 	bl	8005220 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001784:	b2db      	uxtb	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001790:	b2db      	uxtb	r3, r3
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80017ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800180a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <QuaternionToEuler>:
    NormalizeQuaternion(q_out);
}


// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b08c      	sub	sp, #48	@ 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	eeb0 6a40 	vmov.f32	s12, s0
 8001832:	eef0 6a60 	vmov.f32	s13, s1
 8001836:	eeb0 7a41 	vmov.f32	s14, s2
 800183a:	eef0 7a61 	vmov.f32	s15, s3
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	ed87 6a02 	vstr	s12, [r7, #8]
 8001844:	edc7 6a03 	vstr	s13, [r7, #12]
 8001848:	ed87 7a04 	vstr	s14, [r7, #16]
 800184c:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 8001850:	ed97 7a02 	vldr	s14, [r7, #8]
 8001854:	edd7 7a03 	vldr	s15, [r7, #12]
 8001858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001860:	edd7 7a05 	vldr	s15, [r7, #20]
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001870:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 8001874:	ed97 7a03 	vldr	s14, [r7, #12]
 8001878:	edd7 7a03 	vldr	s15, [r7, #12]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	edd7 6a04 	vldr	s13, [r7, #16]
 8001884:	edd7 7a04 	vldr	s15, [r7, #16]
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001890:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 80018a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	4604      	mov	r4, r0
 80018a8:	460d      	mov	r5, r1
 80018aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018ac:	f7fe fe4c 	bl	8000548 <__aeabi_f2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	ec43 2b11 	vmov	d1, r2, r3
 80018b8:	ec45 4b10 	vmov	d0, r4, r5
 80018bc:	f00f fbe4 	bl	8011088 <atan2>
 80018c0:	ec51 0b10 	vmov	r0, r1, d0
 80018c4:	a356      	add	r3, pc, #344	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f967 	bl	8000ba8 <__aeabi_d2f>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 80018e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80018e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ec:	edd7 6a05 	vldr	s13, [r7, #20]
 80018f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001900:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 8001904:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001908:	eef0 7ae7 	vabs.f32	s15, s15
 800190c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	db13      	blt.n	8001942 <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 800191a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800191c:	f7fe fe14 	bl	8000548 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	ec43 2b11 	vmov	d1, r2, r3
 8001928:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001a18 <QuaternionToEuler+0x1f0>
 800192c:	f00d fb2b 	bl	800ef86 <copysign>
 8001930:	ec51 0b10 	vmov	r0, r1, d0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	1d1c      	adds	r4, r3, #4
 8001938:	f7ff f936 	bl	8000ba8 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	6023      	str	r3, [r4, #0]
 8001940:	e019      	b.n	8001976 <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 8001942:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001944:	f7fe fe00 	bl	8000548 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	ec43 2b10 	vmov	d0, r2, r3
 8001950:	f00f fb66 	bl	8011020 <asin>
 8001954:	ec51 0b10 	vmov	r0, r1, d0
 8001958:	a331      	add	r3, pc, #196	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe4b 	bl	80005f8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	1d1c      	adds	r4, r3, #4
 800196e:	f7ff f91b 	bl	8000ba8 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 8001976:	ed97 7a02 	vldr	s14, [r7, #8]
 800197a:	edd7 7a05 	vldr	s15, [r7, #20]
 800197e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001982:	edd7 6a03 	vldr	s13, [r7, #12]
 8001986:	edd7 7a04 	vldr	s15, [r7, #16]
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001996:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 800199a:	ed97 7a04 	vldr	s14, [r7, #16]
 800199e:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80019aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 80019c6:	6a38      	ldr	r0, [r7, #32]
 80019c8:	f7fe fdbe 	bl	8000548 <__aeabi_f2d>
 80019cc:	4604      	mov	r4, r0
 80019ce:	460d      	mov	r5, r1
 80019d0:	69f8      	ldr	r0, [r7, #28]
 80019d2:	f7fe fdb9 	bl	8000548 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ec43 2b11 	vmov	d1, r2, r3
 80019de:	ec45 4b10 	vmov	d0, r4, r5
 80019e2:	f00f fb51 	bl	8011088 <atan2>
 80019e6:	ec51 0b10 	vmov	r0, r1, d0
 80019ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a20 <QuaternionToEuler+0x1f8>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe02 	bl	80005f8 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0408 	add.w	r4, r3, #8
 8001a02:	f7ff f8d1 	bl	8000ba8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	@ 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40568000 	.word	0x40568000
 8001a20:	20000000 	.word	0x20000000
 8001a24:	404ca5dc 	.word	0x404ca5dc

08001a28 <SetQuaternionFromEuler>:


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a34:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a38:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 8001a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a40:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a48:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 8001a4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a50:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a58:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 8001a5c:	edd7 7a00 	vldr	s15, [r7]
 8001a60:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001bcc <SetQuaternionFromEuler+0x1a4>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 8001a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f00f fb44 	bl	8011108 <cosf>
 8001a80:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 8001a84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	f00f fb84 	bl	80111a0 <sinf>
 8001a98:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 8001a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	f00f fb2c 	bl	8011108 <cosf>
 8001ab0:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 8001ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f00f fb6c 	bl	80111a0 <sinf>
 8001ac8:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 8001acc:	edd7 7a00 	vldr	s15, [r7]
 8001ad0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f00f fb14 	bl	8011108 <cosf>
 8001ae0:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 8001ae4:	edd7 7a00 	vldr	s15, [r7]
 8001ae8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af0:	eeb0 0a67 	vmov.f32	s0, s15
 8001af4:	f00f fb54 	bl	80111a0 <sinf>
 8001af8:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 8001afc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 8001b2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001b46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 8001b60:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b74:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 8001b92:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b96:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001baa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	3c8efa39 	.word	0x3c8efa39

08001bd0 <Filter_Init>:
/// ######################################################################################################
/// ##### FILTER SECTION #################################################################################
/// ######################################################################################################

void Filter_Init(LPF_FILTER *filt, float f_LP_gyr, float f_LP_acc, float f_HP_gyr, float f_HP_acc, float f_LP_angles, float dt)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	61f8      	str	r0, [r7, #28]
 8001bd8:	ed87 0a06 	vstr	s0, [r7, #24]
 8001bdc:	edc7 0a05 	vstr	s1, [r7, #20]
 8001be0:	ed87 1a04 	vstr	s2, [r7, #16]
 8001be4:	edc7 1a03 	vstr	s3, [r7, #12]
 8001be8:	ed87 2a02 	vstr	s4, [r7, #8]
 8001bec:	edc7 2a01 	vstr	s5, [r7, #4]
	LPF_Init(filt, f_LP_gyr, f_LP_acc, f_LP_angles, dt);
 8001bf0:	edd7 1a01 	vldr	s3, [r7, #4]
 8001bf4:	ed97 1a02 	vldr	s2, [r7, #8]
 8001bf8:	edd7 0a05 	vldr	s1, [r7, #20]
 8001bfc:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c00:	69f8      	ldr	r0, [r7, #28]
 8001c02:	f000 f968 	bl	8001ed6 <LPF_Init>
	HPF_Init(filt, f_HP_gyr, f_HP_acc, dt);
 8001c06:	ed97 1a01 	vldr	s2, [r7, #4]
 8001c0a:	edd7 0a03 	vldr	s1, [r7, #12]
 8001c0e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c12:	69f8      	ldr	r0, [r7, #28]
 8001c14:	f000 fa65 	bl	80020e2 <HPF_Init>

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c1c:	e038      	b.n	8001c90 <Filter_Init+0xc0>
	{
		filt->filt_gyr_x[i] = 0.0f;					// filt_gyr_x[0] -> past filtered sample   //	filt_gyr_x[1] -> curr filtered sample
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c22:	3304      	adds	r3, #4
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_y[i] = 0.0f;					// filt_gyr_x[0] ==> y(n)
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	3306      	adds	r3, #6
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_z[i] = 0.0f;					// filt_gyr_x[1] ==> y(n-1)
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	3308      	adds	r3, #8
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
		filt->filt_acc_x[i] = 0.0f;
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c58:	330a      	adds	r3, #10
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
		filt->filt_acc_y[i] = 0.0f;
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	330c      	adds	r3, #12
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
		filt->filt_acc_z[i] = 0.0f;
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7c:	330e      	adds	r3, #14
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3304      	adds	r3, #4
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	ddc3      	ble.n	8001c1e <Filter_Init+0x4e>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c9a:	e038      	b.n	8001d0e <Filter_Init+0x13e>
	{
		filt->not_filt_gyr_x[i] = 0.0f;					// not_filt_gyr_x[0] -> past not filtered sample   //	not_filt_gyr_x[1] -> curr not filtered sample
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	3310      	adds	r3, #16
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_y[i] = 0.0f;					// not_filt_gyr_x[0] ==> x(n)
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb2:	3312      	adds	r3, #18
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_z[i] = 0.0f;					// not_filt_gyr_x[1] ==> x(n-1)
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_x[i] = 0.0f;
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd6:	3316      	adds	r3, #22
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_y[i] = 0.0f;
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce8:	3318      	adds	r3, #24
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_z[i] = 0.0f;
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfa:	331a      	adds	r3, #26
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	ddc3      	ble.n	8001c9c <Filter_Init+0xcc>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d18:	e01d      	b.n	8001d56 <Filter_Init+0x186>
	{
		filt->filt_ang_x[i] = 0.0f;
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	331c      	adds	r3, #28
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
		filt->filt_ang_y[i] = 0.0f;
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	331e      	adds	r3, #30
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
		filt->filt_ang_z[i] = 0.0f;
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	3320      	adds	r3, #32
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3304      	adds	r3, #4
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	3301      	adds	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	ddde      	ble.n	8001d1a <Filter_Init+0x14a>
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	@ 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <LPF_CalculateAlpha>:
/// ##### LOW PASS FILTER for GYRO&ACC SECTION ###########################################################
/// ######################################################################################################

/// Alpha calculation for LPF filter in general --> (GYR&ACC and ANGLES)
float LPF_CalculateAlpha(float f_cut, float dt)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d72:	edc7 0a00 	vstr	s1, [r7]
	float tau = 1.0f / (2.0f * M_PI * f_cut);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe fbe6 	bl	8000548 <__aeabi_f2d>
 8001d7c:	a313      	add	r3, pc, #76	@ (adr r3, 8001dcc <LPF_CalculateAlpha+0x64>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fc39 	bl	80005f8 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <LPF_CalculateAlpha+0x60>)
 8001d90:	f7fe fd5c 	bl	800084c <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe ff04 	bl	8000ba8 <__aeabi_d2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
	return dt / (tau + dt);
 8001da4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da8:	edd7 7a00 	vldr	s15, [r7]
 8001dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db0:	ed97 7a00 	vldr	s14, [r7]
 8001db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001db8:	eef0 7a66 	vmov.f32	s15, s13
}
 8001dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	3ff00000 	.word	0x3ff00000
 8001dcc:	54442d18 	.word	0x54442d18
 8001dd0:	401921fb 	.word	0x401921fb

08001dd4 <LPF_Update_Single>:

/// ------ LOW PF ILTER, 1° ORDER ------------------------------------------------------------------------------------
float LPF_Update_Single(LPF_FILTER *filt, float old_data, float data, float alpha)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001de0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001de4:	ed87 1a00 	vstr	s2, [r7]
	 return ( (alpha * data) + ((1-alpha) * old_data) );
 8001de8:	ed97 7a00 	vldr	s14, [r7]
 8001dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001df8:	edd7 7a00 	vldr	s15, [r7]
 8001dfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LPF_SetAlpha>:

/// ------ LPF set over boundaries coefficients ----------------------------------------------------------------------
void LPF_SetAlpha(LPF_FILTER *filt, float alpha_gyr, float alpha_acc, float coeff_filt_angl)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e26:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e2a:	ed87 1a00 	vstr	s2, [r7]
	// Alpha gyr COEFF
	if(alpha_gyr > 1.0f)
 8001e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	dd03      	ble.n	8001e48 <LPF_SetAlpha+0x2e>
		alpha_gyr = 1.0f;
 8001e40:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	e009      	b.n	8001e5c <LPF_SetAlpha+0x42>
	else if(alpha_gyr < 0.0f)
 8001e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	d502      	bpl.n	8001e5c <LPF_SetAlpha+0x42>
		alpha_gyr = 0.0f;
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
	// Alpha_acc COEFF
	if(alpha_acc > 1.0f)
 8001e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	dd03      	ble.n	8001e76 <LPF_SetAlpha+0x5c>
		alpha_acc = 1.0f;
 8001e6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	e009      	b.n	8001e8a <LPF_SetAlpha+0x70>
	else if(alpha_acc < 0.0f)
 8001e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d502      	bpl.n	8001e8a <LPF_SetAlpha+0x70>
		alpha_acc = 0.0f;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
	// coeff_filt_angl COEFF
	if(coeff_filt_angl > 1.0f)
 8001e8a:	edd7 7a00 	vldr	s15, [r7]
 8001e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	dd03      	ble.n	8001ea4 <LPF_SetAlpha+0x8a>
		coeff_filt_angl = 1.0f;
 8001e9c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	e009      	b.n	8001eb8 <LPF_SetAlpha+0x9e>
	else if(coeff_filt_angl < 0)
 8001ea4:	edd7 7a00 	vldr	s15, [r7]
 8001ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d502      	bpl.n	8001eb8 <LPF_SetAlpha+0x9e>
		coeff_filt_angl = 0.0f;
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	603b      	str	r3, [r7, #0]

	filt->alpha_gyr = alpha_gyr;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	601a      	str	r2, [r3, #0]
	filt->alpha_acc = alpha_acc;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	605a      	str	r2, [r3, #4]
	filt->coeff_filt_ang = coeff_filt_angl;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	611a      	str	r2, [r3, #16]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LPF_Init>:

void LPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float f_cut_angles, float dt)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b08a      	sub	sp, #40	@ 0x28
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6178      	str	r0, [r7, #20]
 8001ede:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ee2:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ee6:	ed87 1a02 	vstr	s2, [r7, #8]
 8001eea:	edc7 1a01 	vstr	s3, [r7, #4]
	// aplha for LPF settings
	float alpha_gyr = LPF_CalculateAlpha(f_cut_gyr, dt);
 8001eee:	edd7 0a01 	vldr	s1, [r7, #4]
 8001ef2:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ef6:	f7ff ff37 	bl	8001d68 <LPF_CalculateAlpha>
 8001efa:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float alpha_acc = LPF_CalculateAlpha(f_cut_acc, dt);
 8001efe:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f02:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f06:	f7ff ff2f 	bl	8001d68 <LPF_CalculateAlpha>
 8001f0a:	ed87 0a08 	vstr	s0, [r7, #32]
	float coeff_filt_angl = LPF_CalculateAlpha(f_cut_angles, dt);
 8001f0e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f12:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f16:	f7ff ff27 	bl	8001d68 <LPF_CalculateAlpha>
 8001f1a:	ed87 0a07 	vstr	s0, [r7, #28]
	LPF_SetAlpha(filt, alpha_gyr, alpha_acc, f_cut_angles);
 8001f1e:	ed97 1a02 	vldr	s2, [r7, #8]
 8001f22:	edd7 0a08 	vldr	s1, [r7, #32]
 8001f26:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff75 	bl	8001e1a <LPF_SetAlpha>

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <LPF_GyrAcc_Update_All>:


LPF_FILTER LPF_GyrAcc_Update_All(LPF_FILTER *filt, float *gyr, float *acc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
	/* I compute the LPF filter */
	filt->filt_gyr_x[0] = LPF_Update_Single(filt, filt->filt_gyr_x[1], gyr[0], filt->alpha_gyr);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	ed93 7a00 	vldr	s14, [r3]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	edd3 6a00 	vldr	s13, [r3]
 8001f58:	eeb0 1a66 	vmov.f32	s2, s13
 8001f5c:	eef0 0a47 	vmov.f32	s1, s14
 8001f60:	eeb0 0a67 	vmov.f32	s0, s15
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	f7ff ff35 	bl	8001dd4 <LPF_Update_Single>
 8001f6a:	eef0 7a40 	vmov.f32	s15, s0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	edc3 7a05 	vstr	s15, [r3, #20]
	filt->filt_gyr_y[0] = LPF_Update_Single(filt, filt->filt_gyr_y[1], gyr[1], filt->alpha_gyr);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	edd3 6a00 	vldr	s13, [r3]
 8001f88:	eeb0 1a66 	vmov.f32	s2, s13
 8001f8c:	eef0 0a47 	vmov.f32	s1, s14
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f7ff ff1d 	bl	8001dd4 <LPF_Update_Single>
 8001f9a:	eef0 7a40 	vmov.f32	s15, s0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->filt_gyr_z[0] = LPF_Update_Single(filt, filt->filt_gyr_z[1], gyr[2], filt->alpha_gyr);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3308      	adds	r3, #8
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	edd3 6a00 	vldr	s13, [r3]
 8001fb8:	eeb0 1a66 	vmov.f32	s2, s13
 8001fbc:	eef0 0a47 	vmov.f32	s1, s14
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	68b8      	ldr	r0, [r7, #8]
 8001fc6:	f7ff ff05 	bl	8001dd4 <LPF_Update_Single>
 8001fca:	eef0 7a40 	vmov.f32	s15, s0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	filt->filt_acc_x[0] = LPF_Update_Single(filt, filt->filt_acc_x[1], acc[0], filt->alpha_acc);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	ed93 7a00 	vldr	s14, [r3]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fe6:	eeb0 1a66 	vmov.f32	s2, s13
 8001fea:	eef0 0a47 	vmov.f32	s1, s14
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f7ff feee 	bl	8001dd4 <LPF_Update_Single>
 8001ff8:	eef0 7a40 	vmov.f32	s15, s0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	filt->filt_acc_y[0] = LPF_Update_Single(filt, filt->filt_acc_y[1], acc[1], filt->alpha_acc);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3304      	adds	r3, #4
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	edd3 6a01 	vldr	s13, [r3, #4]
 8002016:	eeb0 1a66 	vmov.f32	s2, s13
 800201a:	eef0 0a47 	vmov.f32	s1, s14
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	f7ff fed6 	bl	8001dd4 <LPF_Update_Single>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	filt->filt_acc_z[0] = LPF_Update_Single(filt, filt->filt_acc_z[1], acc[2], filt->alpha_acc);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3308      	adds	r3, #8
 800203c:	ed93 7a00 	vldr	s14, [r3]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	edd3 6a01 	vldr	s13, [r3, #4]
 8002046:	eeb0 1a66 	vmov.f32	s2, s13
 800204a:	eef0 0a47 	vmov.f32	s1, s14
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	68b8      	ldr	r0, [r7, #8]
 8002054:	f7ff febe 	bl	8001dd4 <LPF_Update_Single>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	/* the current sample will become the next old one */
	filt->filt_gyr_x[1] = filt->filt_gyr_x[0];
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	619a      	str	r2, [r3, #24]
	filt->filt_gyr_y[1] = filt->filt_gyr_y[0];
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	621a      	str	r2, [r3, #32]
	filt->filt_gyr_z[1] = filt->filt_gyr_z[0];
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28
	filt->filt_acc_x[1] = filt->filt_acc_x[0];
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
	filt->filt_acc_y[1] = filt->filt_acc_y[0];
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
	filt->filt_acc_z[1] = filt->filt_acc_z[0];
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40

	/* I update gyro and acc global variables */
	gyr[0] = filt->filt_gyr_x[0];
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
	gyr[1] = filt->filt_gyr_y[0];
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	69d2      	ldr	r2, [r2, #28]
 80020a2:	601a      	str	r2, [r3, #0]
	gyr[2] = filt->filt_gyr_z[0];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3308      	adds	r3, #8
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ac:	601a      	str	r2, [r3, #0]
	acc[0] = filt->filt_acc_x[0];
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	601a      	str	r2, [r3, #0]
	acc[1] = filt->filt_acc_y[0];
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3304      	adds	r3, #4
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020be:	601a      	str	r2, [r3, #0]
	acc[2] = filt->filt_acc_z[0];
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	3308      	adds	r3, #8
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020c8:	601a      	str	r2, [r3, #0]

	return *filt;
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	238c      	movs	r3, #140	@ 0x8c
 80020d4:	461a      	mov	r2, r3
 80020d6:	f00c ff48 	bl	800ef6a <memcpy>
}
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HPF_Init>:
/// ##### HIGH PASS FILTER SECTION #######################################################################
/// ######################################################################################################


void HPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float dt)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	ed87 0a02 	vstr	s0, [r7, #8]
 80020ee:	edc7 0a01 	vstr	s1, [r7, #4]
 80020f2:	ed87 1a00 	vstr	s2, [r7]
	// beta for HPF settings
	float beta_gyr = HPF_CalculateBeta(f_cut_gyr, dt);
 80020f6:	edd7 0a00 	vldr	s1, [r7]
 80020fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80020fe:	f000 f815 	bl	800212c <HPF_CalculateBeta>
 8002102:	ed87 0a05 	vstr	s0, [r7, #20]
	float beta_acc = HPF_CalculateBeta(f_cut_acc, dt);
 8002106:	edd7 0a00 	vldr	s1, [r7]
 800210a:	ed97 0a01 	vldr	s0, [r7, #4]
 800210e:	f000 f80d 	bl	800212c <HPF_CalculateBeta>
 8002112:	ed87 0a04 	vstr	s0, [r7, #16]
	HPF_SetBeta(filt, beta_gyr, beta_acc);
 8002116:	edd7 0a04 	vldr	s1, [r7, #16]
 800211a:	ed97 0a05 	vldr	s0, [r7, #20]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f826 	bl	8002170 <HPF_SetBeta>

}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HPF_CalculateBeta>:


float HPF_CalculateBeta(float f_cut, float dt)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	ed87 0a01 	vstr	s0, [r7, #4]
 8002136:	edc7 0a00 	vstr	s1, [r7]
	return 1.0f - expf(-2.0f * (float)M_PI * f_cut * dt);
 800213a:	edd7 7a01 	vldr	s15, [r7, #4]
 800213e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800216c <HPF_CalculateBeta+0x40>
 8002142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002146:	edd7 7a00 	vldr	s15, [r7]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	f00e ffa3 	bl	801109c <expf>
 8002156:	eef0 7a40 	vmov.f32	s15, s0
 800215a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	c0c90fdb 	.word	0xc0c90fdb

08002170 <HPF_SetBeta>:


void HPF_SetBeta(LPF_FILTER *filt, float beta_gyr, float beta_acc)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	ed87 0a02 	vstr	s0, [r7, #8]
 800217c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(beta_gyr > 1.0f)
 8002180:	edd7 7a02 	vldr	s15, [r7, #8]
 8002184:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	dd03      	ble.n	800219a <HPF_SetBeta+0x2a>
	{
		beta_gyr = 1.0f;
 8002192:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	e009      	b.n	80021ae <HPF_SetBeta+0x3e>
	}
	else if(beta_gyr < 0.0f)
 800219a:	edd7 7a02 	vldr	s15, [r7, #8]
 800219e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	d502      	bpl.n	80021ae <HPF_SetBeta+0x3e>
	{
		beta_gyr = 0.0f;
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
	}

	if(beta_acc > 1.0f)
 80021ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	dd03      	ble.n	80021c8 <HPF_SetBeta+0x58>
	{
		beta_acc = 1.0f;
 80021c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	e009      	b.n	80021dc <HPF_SetBeta+0x6c>
	}
	else if(beta_acc < 0.0f)
 80021c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	d502      	bpl.n	80021dc <HPF_SetBeta+0x6c>
	{
		beta_acc = 0.0f;
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
	}

	filt->beta_gyr = beta_gyr;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	609a      	str	r2, [r3, #8]
	filt->beta_acc = beta_acc;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sampleFreq) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b09e      	sub	sp, #120	@ 0x78
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	ed87 0a07 	vstr	s0, [r7, #28]
 80021fe:	edc7 0a06 	vstr	s1, [r7, #24]
 8002202:	ed87 1a05 	vstr	s2, [r7, #20]
 8002206:	edc7 1a04 	vstr	s3, [r7, #16]
 800220a:	ed87 2a03 	vstr	s4, [r7, #12]
 800220e:	edc7 2a02 	vstr	s5, [r7, #8]
 8002212:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002216:	4bec      	ldr	r3, [pc, #944]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eeb1 7a67 	vneg.f32	s14, s15
 8002220:	edd7 7a07 	vldr	s15, [r7, #28]
 8002224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002228:	4be8      	ldr	r3, [pc, #928]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800222a:	edd3 6a00 	vldr	s13, [r3]
 800222e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	ee37 7a67 	vsub.f32	s14, s14, s15
 800223a:	4be5      	ldr	r3, [pc, #916]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800223c:	edd3 6a00 	vldr	s13, [r3]
 8002240:	edd7 7a05 	vldr	s15, [r7, #20]
 8002244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002254:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002258:	4bde      	ldr	r3, [pc, #888]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002266:	4bd9      	ldr	r3, [pc, #868]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 8002268:	edd3 6a00 	vldr	s13, [r3]
 800226c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002278:	4bd5      	ldr	r3, [pc, #852]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800227a:	edd3 6a00 	vldr	s13, [r3]
 800227e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002296:	4bcf      	ldr	r3, [pc, #828]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 8002298:	ed93 7a00 	vldr	s14, [r3]
 800229c:	edd7 7a06 	vldr	s15, [r7, #24]
 80022a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a4:	4bc8      	ldr	r3, [pc, #800]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80022a6:	edd3 6a00 	vldr	s13, [r3]
 80022aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b6:	4bc6      	ldr	r3, [pc, #792]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 80022b8:	edd3 6a00 	vldr	s13, [r3]
 80022bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80022d4:	4bbf      	ldr	r3, [pc, #764]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 80022d6:	ed93 7a00 	vldr	s14, [r3]
 80022da:	edd7 7a05 	vldr	s15, [r7, #20]
 80022de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e2:	4bb9      	ldr	r3, [pc, #740]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e4:	edd3 6a00 	vldr	s13, [r3]
 80022e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f4:	4bb5      	ldr	r3, [pc, #724]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80022f6:	edd3 6a00 	vldr	s13, [r3]
 80022fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80022fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800230a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002312:	edd7 7a04 	vldr	s15, [r7, #16]
 8002316:	eef5 7a40 	vcmp.f32	s15, #0.0
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d10e      	bne.n	800233e <MadgwickAHRSupdateIMU+0x14a>
 8002320:	edd7 7a03 	vldr	s15, [r7, #12]
 8002324:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	d107      	bne.n	800233e <MadgwickAHRSupdateIMU+0x14a>
 800232e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002332:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	f000 81e5 	beq.w	8002708 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800233e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002342:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002346:	edd7 7a03 	vldr	s15, [r7, #12]
 800234a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800234e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002352:	edd7 7a02 	vldr	s15, [r7, #8]
 8002356:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	eeb0 0a67 	vmov.f32	s0, s15
 8002362:	f000 fa7b 	bl	800285c <invSqrt>
 8002366:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 800236a:	ed97 7a04 	vldr	s14, [r7, #16]
 800236e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002376:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 800237a:	ed97 7a03 	vldr	s14, [r7, #12]
 800237e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;
 800238a:	ed97 7a02 	vldr	s14, [r7, #8]
 800238e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800239a:	4b8e      	ldr	r3, [pc, #568]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023a4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 80023a8:	4b87      	ldr	r3, [pc, #540]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023b2:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 80023b6:	4b85      	ldr	r3, [pc, #532]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023c0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 80023c4:	4b82      	ldr	r3, [pc, #520]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ce:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 80023d2:	4b80      	ldr	r3, [pc, #512]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 80023e4:	4b78      	ldr	r3, [pc, #480]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 80023f6:	4b75      	ldr	r3, [pc, #468]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002404:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 8002408:	4b6f      	ldr	r3, [pc, #444]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 800241a:	4b6c      	ldr	r3, [pc, #432]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002428:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 800242c:	4b69      	ldr	r3, [pc, #420]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	4b68      	ldr	r3, [pc, #416]	@ (80025d4 <MadgwickAHRSupdateIMU+0x3e0>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 8002440:	4b61      	ldr	r3, [pc, #388]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002442:	ed93 7a00 	vldr	s14, [r3]
 8002446:	4b60      	ldr	r3, [pc, #384]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 8002454:	4b5d      	ldr	r3, [pc, #372]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 8002456:	ed93 7a00 	vldr	s14, [r3]
 800245a:	4b5c      	ldr	r3, [pc, #368]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 8002468:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 800246a:	ed93 7a00 	vldr	s14, [r3]
 800246e:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <MadgwickAHRSupdateIMU+0x3dc>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002478:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800247c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002480:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002488:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800248c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002498:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800249c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a8:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80024ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80024bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80024c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c8:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80024cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024d8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024dc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80024e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024e4:	4b38      	ldr	r3, [pc, #224]	@ (80025c8 <MadgwickAHRSupdateIMU+0x3d4>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80024f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002502:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800250e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800251e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252a:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800252e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800253e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002542:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002546:	ee27 7a87 	vmul.f32	s14, s15, s14
 800254a:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <MadgwickAHRSupdateIMU+0x3d8>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002554:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8002558:	edd7 7a04 	vldr	s15, [r7, #16]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002564:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002568:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800256c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002574:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002578:	edd7 7a03 	vldr	s15, [r7, #12]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002584:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002588:	ee37 7a67 	vsub.f32	s14, s14, s15
 800258c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002590:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80025a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ac:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80025b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80025c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025c4:	e008      	b.n	80025d8 <MadgwickAHRSupdateIMU+0x3e4>
 80025c6:	bf00      	nop
 80025c8:	20000324 	.word	0x20000324
 80025cc:	20000328 	.word	0x20000328
 80025d0:	2000032c 	.word	0x2000032c
 80025d4:	20000004 	.word	0x20000004
 80025d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80025dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025e0:	4b99      	ldr	r3, [pc, #612]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ea:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80025ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025fe:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002602:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002606:	4b90      	ldr	r3, [pc, #576]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002614:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002618:	edd7 7a03 	vldr	s15, [r7, #12]
 800261c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002624:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002628:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800262c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002630:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002634:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002640:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	edd7 7a08 	vldr	s15, [r7, #32]
 800264c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	f000 f900 	bl	800285c <invSqrt>
 800265c:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 8002660:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002664:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 8002670:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002674:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 8002680:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002684:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 8002690:	ed97 7a08 	vldr	s14, [r7, #32]
 8002694:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 80026a0:	4b6a      	ldr	r3, [pc, #424]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026a2:	ed93 7a00 	vldr	s14, [r3]
 80026a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80026b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 80026ba:	4b64      	ldr	r3, [pc, #400]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026bc:	ed93 7a00 	vldr	s14, [r3]
 80026c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80026c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 80026d4:	4b5d      	ldr	r3, [pc, #372]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026d6:	ed93 7a00 	vldr	s14, [r3]
 80026da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80026e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ea:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 80026ee:	4b57      	ldr	r3, [pc, #348]	@ (800284c <MadgwickAHRSupdateIMU+0x658>)
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80026f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fc:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800270c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002714:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800271c:	4b4c      	ldr	r3, [pc, #304]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 8002728:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800272c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002730:	edd7 7a01 	vldr	s15, [r7, #4]
 8002734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002738:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	4b42      	ldr	r3, [pc, #264]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 800274c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002750:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002754:	edd7 7a01 	vldr	s15, [r7, #4]
 8002758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002764:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002770:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002778:	edd7 7a01 	vldr	s15, [r7, #4]
 800277c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002780:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	4b2f      	ldr	r3, [pc, #188]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 8002794:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 800279a:	ed93 7a00 	vldr	s14, [r3]
 800279e:	4b2c      	ldr	r3, [pc, #176]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 80027aa:	edd3 6a00 	vldr	s13, [r3]
 80027ae:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027bc:	4b26      	ldr	r3, [pc, #152]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 80027be:	edd3 6a00 	vldr	s13, [r3]
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80027d2:	edd3 6a00 	vldr	s13, [r3]
 80027d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	f000 f838 	bl	800285c <invSqrt>
 80027ec:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 80027f0:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 80027f2:	ed93 7a00 	vldr	s14, [r3]
 80027f6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <MadgwickAHRSupdateIMU+0x65c>)
 8002800:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <MadgwickAHRSupdateIMU+0x660>)
 8002814:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 800281a:	ed93 7a00 	vldr	s14, [r3]
 800281e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <MadgwickAHRSupdateIMU+0x664>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <MadgwickAHRSupdateIMU+0x654>)
 800283c:	edc3 7a00 	vstr	s15, [r3]
}
 8002840:	bf00      	nop
 8002842:	3778      	adds	r7, #120	@ 0x78
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000032c 	.word	0x2000032c
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004
 8002854:	20000324 	.word	0x20000324
 8002858:	20000328 	.word	0x20000328

0800285c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002866:	edd7 7a01 	vldr	s15, [r7, #4]
 800286a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800286e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002872:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	105a      	asrs	r2, r3, #1
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <invSqrt+0x74>)
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002894:	ed97 7a04 	vldr	s14, [r7, #16]
 8002898:	edd7 7a05 	vldr	s15, [r7, #20]
 800289c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80028ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	ee07 3a90 	vmov	s15, r3
}
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	5f3759df 	.word	0x5f3759df

080028d4 <SetPriorities>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++ PRIORITIES SETTINGS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void SetPriorities(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	 HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80028d8:	2005      	movs	r0, #5
 80028da:	f001 fec1 	bl	8004660 <HAL_NVIC_SetPriorityGrouping>

	  // DMA: max priority
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	2038      	movs	r0, #56	@ 0x38
 80028e4:	f001 fec7 	bl	8004676 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 2);
 80028e8:	2202      	movs	r2, #2
 80028ea:	2100      	movs	r1, #0
 80028ec:	203b      	movs	r0, #59	@ 0x3b
 80028ee:	f001 fec2 	bl	8004676 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 1);   // RX SPI2
 80028f2:	2201      	movs	r2, #1
 80028f4:	2100      	movs	r1, #0
 80028f6:	200e      	movs	r0, #14
 80028f8:	f001 febd 	bl	8004676 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 3);   // TX SPI2
 80028fc:	2203      	movs	r2, #3
 80028fe:	2100      	movs	r1, #0
 8002900:	200f      	movs	r0, #15
 8002902:	f001 feb8 	bl	8004676 <HAL_NVIC_SetPriority>

	  // USB CDC (OTG_FS) - high but under DMA
	  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 4);
 8002906:	2204      	movs	r2, #4
 8002908:	2100      	movs	r1, #0
 800290a:	2043      	movs	r0, #67	@ 0x43
 800290c:	f001 feb3 	bl	8004676 <HAL_NVIC_SetPriority>

	  // EXTI (GPIO sensors)
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2101      	movs	r1, #1
 8002914:	2008      	movs	r0, #8
 8002916:	f001 feae 	bl	8004676 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 800291a:	2201      	movs	r2, #1
 800291c:	2101      	movs	r1, #1
 800291e:	2009      	movs	r0, #9
 8002920:	f001 fea9 	bl	8004676 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 2);
 8002924:	2202      	movs	r2, #2
 8002926:	2101      	movs	r1, #1
 8002928:	200a      	movs	r0, #10
 800292a:	f001 fea4 	bl	8004676 <HAL_NVIC_SetPriority>

	  // UART (commands and debug)
	  HAL_NVIC_SetPriority(USART1_IRQn, 1, 3);
 800292e:	2203      	movs	r2, #3
 8002930:	2101      	movs	r1, #1
 8002932:	2025      	movs	r0, #37	@ 0x25
 8002934:	f001 fe9f 	bl	8004676 <HAL_NVIC_SetPriority>

	  // Timer - low priority
	  HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2102      	movs	r1, #2
 800293c:	201e      	movs	r0, #30
 800293e:	f001 fe9a 	bl	8004676 <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 1);  // If we use TIM2
 8002942:	2201      	movs	r2, #1
 8002944:	2102      	movs	r1, #2
 8002946:	201c      	movs	r0, #28
 8002948:	f001 fe95 	bl	8004676 <HAL_NVIC_SetPriority>

	  // Enable
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800294c:	2038      	movs	r0, #56	@ 0x38
 800294e:	f001 feae 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002952:	203b      	movs	r0, #59	@ 0x3b
 8002954:	f001 feab 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002958:	200e      	movs	r0, #14
 800295a:	f001 fea8 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800295e:	200f      	movs	r0, #15
 8002960:	f001 fea5 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002964:	2043      	movs	r0, #67	@ 0x43
 8002966:	f001 fea2 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800296a:	2008      	movs	r0, #8
 800296c:	f001 fe9f 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002970:	2009      	movs	r0, #9
 8002972:	f001 fe9c 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002976:	200a      	movs	r0, #10
 8002978:	f001 fe99 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800297c:	2025      	movs	r0, #37	@ 0x25
 800297e:	f001 fe96 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002982:	201e      	movs	r0, #30
 8002984:	f001 fe93 	bl	80046ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002988:	201c      	movs	r0, #28
 800298a:	f001 fe90 	bl	80046ae <HAL_NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <Toggle>:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++ DEBUG FUNCTIONS ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// Function that toggles the led of the board to show if the device is working
void Toggle(uint32_t waitingTime)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= waitingTime)
 800299c:	f001 fd60 	bl	8004460 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <Toggle+0x40>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d808      	bhi.n	80029c0 <Toggle+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80029ae:	2110      	movs	r1, #16
 80029b0:	4809      	ldr	r0, [pc, #36]	@ (80029d8 <Toggle+0x44>)
 80029b2:	f002 fc4e 	bl	8005252 <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 80029b6:	f001 fd53 	bl	8004460 <HAL_GetTick>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <Toggle+0x40>)
 80029be:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 80029c0:	f001 fd4e 	bl	8004460 <HAL_GetTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <Toggle+0x48>)
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000874 	.word	0x20000874
 80029d8:	40020400 	.word	0x40020400
 80029dc:	20000870 	.word	0x20000870

080029e0 <HAL_UART_RxCpltCallback>:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++ CALLBACK FUNCTIONS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// UART CALLBACK FUNCTION
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	@ (8002a54 <HAL_UART_RxCpltCallback+0x74>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12c      	bne.n	8002a4c <HAL_UART_RxCpltCallback+0x6c>
    {
        if (rx_byte == '\n' || rx_byte == '\r')
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b0a      	cmp	r3, #10
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_RxCpltCallback+0x22>
 80029fa:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b0d      	cmp	r3, #13
 8002a00:	d10c      	bne.n	8002a1c <HAL_UART_RxCpltCallback+0x3c>
        {
            rx_uart_buff[rx_index] = '\0';  // termina stringa
 8002a02:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]
            HandleReceivedString((char*)rx_uart_buff);
 8002a0e:	4814      	ldr	r0, [pc, #80]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a10:	f7fe fac0 	bl	8000f94 <HandleReceivedString>
            rx_index = 0;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]
        {
 8002a1a:	e012      	b.n	8002a42 <HAL_UART_RxCpltCallback+0x62>
        }
        else
        {
            if (rx_index < UART_RX_BUFFER_SIZE - 1)
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a22:	d80b      	bhi.n	8002a3c <HAL_UART_RxCpltCallback+0x5c>
            {
                rx_uart_buff[rx_index++] = rx_byte;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	b291      	uxth	r1, r2
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a2e:	8011      	strh	r1, [r2, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 8002a34:	7819      	ldrb	r1, [r3, #0]
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_UART_RxCpltCallback+0x80>)
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	e002      	b.n	8002a42 <HAL_UART_RxCpltCallback+0x62>
            }
            else
            {
                rx_index = 0;  // overflow protection
 8002a3c:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	801a      	strh	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);  // restart interrupt
 8002a42:	2201      	movs	r2, #1
 8002a44:	4904      	ldr	r1, [pc, #16]	@ (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 8002a46:	4807      	ldr	r0, [pc, #28]	@ (8002a64 <HAL_UART_RxCpltCallback+0x84>)
 8002a48:	f006 fb6a 	bl	8009120 <HAL_UART_Receive_IT>
    }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40011000 	.word	0x40011000
 8002a58:	200008b8 	.word	0x200008b8
 8002a5c:	200008ba 	.word	0x200008ba
 8002a60:	20000878 	.word	0x20000878
 8002a64:	20000680 	.word	0x20000680

08002a68 <HAL_GPIO_EXTI_Callback>:



/// DMA Start Reading
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)				/// DMA2
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d107      	bne.n	8002a88 <HAL_GPIO_EXTI_Callback+0x20>
	{
		// we check if the interrupt pin is the accelerometer one
		if (!imu.readingAcc)
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a7a:	7c1b      	ldrb	r3, [r3, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d114      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
			BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8002a80:	480c      	ldr	r0, [pc, #48]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a82:	f7fe fd9f 	bl	80015c4 <BMI088_ReadAccelerometerDMA>
	}
	else if (GPIO_Pin == MCP3564_IRQ_Pin) {	/// DMA1
		MCP3561_StartReadADCData_DMA(&hspi2);			// Start reading with DMA1
		//allDiffCh = MCP3561_ReadADCData(&hspi2, pkt.adc);	// It read the value from the sensor MCP3564R and it writes into the variable adc[4] the measurements
	}
}
 8002a86:	e010      	b.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
	else if(GPIO_Pin == INT_GYR_Pin)	/// DMA2
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d107      	bne.n	8002a9e <HAL_GPIO_EXTI_Callback+0x36>
	if (!imu.readingGyr)
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a90:	7c5b      	ldrb	r3, [r3, #17]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
		BMI088_ReadGyroscopeDMA(&imu);
 8002a96:	4807      	ldr	r0, [pc, #28]	@ (8002ab4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a98:	f7fe fe30 	bl	80016fc <BMI088_ReadGyroscopeDMA>
}
 8002a9c:	e005      	b.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
	else if (GPIO_Pin == MCP3564_IRQ_Pin) {	/// DMA1
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x42>
		MCP3561_StartReadADCData_DMA(&hspi2);			// Start reading with DMA1
 8002aa4:	4804      	ldr	r0, [pc, #16]	@ (8002ab8 <HAL_GPIO_EXTI_Callback+0x50>)
 8002aa6:	f000 ff41 	bl	800392c <MCP3561_StartReadADCData_DMA>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000728 	.word	0x20000728
 8002ab8:	20000388 	.word	0x20000388

08002abc <HAL_SPI_TxRxCpltCallback>:


/// DMA CALLBACK
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)	// SPI1 used for Acc and Gyro
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	@ (8002b18 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10d      	bne.n	8002aea <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 8002ace:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <HAL_SPI_TxRxCpltCallback+0x60>)
 8002ad0:	7c1b      	ldrb	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8002ad6:	4811      	ldr	r0, [pc, #68]	@ (8002b1c <HAL_SPI_TxRxCpltCallback+0x60>)
 8002ad8:	f7fe fda6 	bl	8001628 <BMI088_ReadAccelerometerDMA_Complete>

		}

		if (imu.readingGyr)
 8002adc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_SPI_TxRxCpltCallback+0x60>)
 8002ade:	7c5b      	ldrb	r3, [r3, #17]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8002ae4:	480d      	ldr	r0, [pc, #52]	@ (8002b1c <HAL_SPI_TxRxCpltCallback+0x60>)
 8002ae6:	f7fe fe3b 	bl	8001760 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
	if (hspi->Instance == SPI2)	// SPI2 used for MCP3564R sensor
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <HAL_SPI_TxRxCpltCallback+0x64>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10d      	bne.n	8002b10 <HAL_SPI_TxRxCpltCallback+0x54>
	{
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002afa:	480a      	ldr	r0, [pc, #40]	@ (8002b24 <HAL_SPI_TxRxCpltCallback+0x68>)
 8002afc:	f002 fb90 	bl	8005220 <HAL_GPIO_WritePin>
		allDiffCh = MCP3561_ReadADCData_DMA(&hspi2, pkt.adc);	// It change the global variable adc[4] with the update value
 8002b00:	4909      	ldr	r1, [pc, #36]	@ (8002b28 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8002b02:	480a      	ldr	r0, [pc, #40]	@ (8002b2c <HAL_SPI_TxRxCpltCallback+0x70>)
 8002b04:	f000 ff2c 	bl	8003960 <MCP3561_ReadADCData_DMA>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <HAL_SPI_TxRxCpltCallback+0x74>)
 8002b0e:	701a      	strb	r2, [r3, #0]
//		pkt.adc[0] = adc[0];
//		pkt.adc[1] = adc[1];
//		pkt.adc[2] = adc[2];
//		pkt.adc[3] = adc[3];
	}
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40013000 	.word	0x40013000
 8002b1c:	20000728 	.word	0x20000728
 8002b20:	40003800 	.word	0x40003800
 8002b24:	40020400 	.word	0x40020400
 8002b28:	2000085c 	.word	0x2000085c
 8002b2c:	20000388 	.word	0x20000388
 8002b30:	200008bc 	.word	0x200008bc

08002b34 <HAL_TIM_PeriodElapsedCallback>:


/// TIMERS CALLBACK
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	b0d9      	sub	sp, #356	@ 0x164
 8002b3a:	af1e      	add	r7, sp, #120	@ 0x78
 8002b3c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
	// Calculate angles with quaternions
    if(htim->Instance == TIM2)
 8002b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4a:	d160      	bne.n	8002c0e <HAL_TIM_PeriodElapsedCallback+0xda>
    {
    	timestamp_TIM2++;	// how many times TIM2 is called (not used yet)
 8002b4c:	4b91      	ldr	r3, [pc, #580]	@ (8002d94 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	4a90      	ldr	r2, [pc, #576]	@ (8002d94 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002b54:	6013      	str	r3, [r2, #0]
        // Code to execute at constant sample rate
        Take_IMU_Measurements(&imu, &pkt);
 8002b56:	4990      	ldr	r1, [pc, #576]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b58:	4890      	ldr	r0, [pc, #576]	@ (8002d9c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002b5a:	f7fe fc02 	bl	8001362 <Take_IMU_Measurements>

        /// Filtering Gyro and Acc measurements
        filt = LPF_GyrAcc_Update_All(&filt, pkt.gyr, pkt.acc);
 8002b5e:	4c90      	ldr	r4, [pc, #576]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002b60:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002b64:	4b8f      	ldr	r3, [pc, #572]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002b66:	4a90      	ldr	r2, [pc, #576]	@ (8002da8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002b68:	498d      	ldr	r1, [pc, #564]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002b6a:	f7ff f9e5 	bl	8001f38 <LPF_GyrAcc_Update_All>
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002b74:	228c      	movs	r2, #140	@ 0x8c
 8002b76:	4619      	mov	r1, r3
 8002b78:	f00c f9f7 	bl	800ef6a <memcpy>

		/// Algorithm application to find angles
        MadgwickAHRSupdateIMU(pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2], F_TIM2);
 8002b7c:	4b86      	ldr	r3, [pc, #536]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b82:	4b85      	ldr	r3, [pc, #532]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b84:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b88:	4b83      	ldr	r3, [pc, #524]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b8a:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b8e:	4b82      	ldr	r3, [pc, #520]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b90:	ed93 6a08 	vldr	s12, [r3, #32]
 8002b94:	4b80      	ldr	r3, [pc, #512]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b96:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 8002b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b9c:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
 8002ba0:	4b82      	ldr	r3, [pc, #520]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002ba2:	edd3 4a00 	vldr	s9, [r3]
 8002ba6:	eeb0 3a64 	vmov.f32	s6, s9
 8002baa:	eef0 2a45 	vmov.f32	s5, s10
 8002bae:	eeb0 2a65 	vmov.f32	s4, s11
 8002bb2:	eef0 1a46 	vmov.f32	s3, s12
 8002bb6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bba:	eef0 0a47 	vmov.f32	s1, s14
 8002bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc2:	f7ff fb17 	bl	80021f4 <MadgwickAHRSupdateIMU>
        q.w = q0; q.x = q1; q.y = q2; q.z = q3;
 8002bc6:	4b7a      	ldr	r3, [pc, #488]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7a      	ldr	r2, [pc, #488]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b7a      	ldr	r3, [pc, #488]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a78      	ldr	r2, [pc, #480]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002bd4:	6053      	str	r3, [r2, #4]
 8002bd6:	4b79      	ldr	r3, [pc, #484]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a76      	ldr	r2, [pc, #472]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002bdc:	6093      	str	r3, [r2, #8]
 8002bde:	4b78      	ldr	r3, [pc, #480]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a74      	ldr	r2, [pc, #464]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002be4:	60d3      	str	r3, [r2, #12]
        QuaternionToEuler(q, pkt.ang);
 8002be6:	4b73      	ldr	r3, [pc, #460]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002be8:	ed93 6a00 	vldr	s12, [r3]
 8002bec:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bf8:	4872      	ldr	r0, [pc, #456]	@ (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002bfa:	eeb0 0a46 	vmov.f32	s0, s12
 8002bfe:	eef0 0a66 	vmov.f32	s1, s13
 8002c02:	eeb0 1a47 	vmov.f32	s2, s14
 8002c06:	eef0 1a67 	vmov.f32	s3, s15
 8002c0a:	f7fe fe0d 	bl	8001828 <QuaternionToEuler>
        /* module of the acceleration vector (not used right now) */
        //pkt.abs_acc = sqrt(pow(pkt.acc[0],2)+pow(pkt.acc[1],2) + pow(pkt.acc[2],2));
    }

    // Send data with CDC_Transfer_FS if enabled!!!
    if(htim->Instance == TIM3)
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6c      	ldr	r2, [pc, #432]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	f040 80a5 	bne.w	8002d66 <HAL_TIM_PeriodElapsedCallback+0x232>
	{
    	timestamp_TIM3++;	// how many times TIM3 is called (not used yet)
 8002c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002dcc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	4a6a      	ldr	r2, [pc, #424]	@ (8002dcc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002c24:	6013      	str	r3, [r2, #0]

    	// Send every data using just one string and one TX
		static char txBuff[256];
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c26:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
					measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fc89 	bl	8000548 <__aeabi_f2d>
 8002c36:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
					measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c3a:	4b57      	ldr	r3, [pc, #348]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc82 	bl	8000548 <__aeabi_f2d>
 8002c44:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
					measureTick, pkt.ang[0], pkt.ang[1], pkt.ang[2],
 8002c48:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc7b 	bl	8000548 <__aeabi_f2d>
 8002c52:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8002c56:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	64b9      	str	r1, [r7, #72]	@ 0x48
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fc71 	bl	8000548 <__aeabi_f2d>
 8002c66:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c6c:	699b      	ldr	r3, [r3, #24]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fc6a 	bl	8000548 <__aeabi_f2d>
 8002c74:	e9c7 0108 	strd	r0, r1, [r7, #32]
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002c78:	4b47      	ldr	r3, [pc, #284]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc63 	bl	8000548 <__aeabi_f2d>
 8002c82:	e9c7 0106 	strd	r0, r1, [r7, #24]
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002c86:	4b44      	ldr	r3, [pc, #272]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fc5c 	bl	8000548 <__aeabi_f2d>
 8002c90:	e9c7 0104 	strd	r0, r1, [r7, #16]
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002c94:	4b40      	ldr	r3, [pc, #256]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fc55 	bl	8000548 <__aeabi_f2d>
 8002c9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
					measureTick, pkt.gyr[0], pkt.gyr[1], pkt.gyr[2], pkt.acc[0], pkt.acc[1], pkt.acc[2],
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc4e 	bl	8000548 <__aeabi_f2d>
 8002cac:	e9c7 0100 	strd	r0, r1, [r7]
 8002cb0:	4b47      	ldr	r3, [pc, #284]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002cb2:	681e      	ldr	r6, [r3, #0]
					measureTick, pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002cb4:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc45 	bl	8000548 <__aeabi_f2d>
 8002cbe:	4682      	mov	sl, r0
 8002cc0:	468b      	mov	fp, r1
					measureTick, pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002cc2:	4b35      	ldr	r3, [pc, #212]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fc3e 	bl	8000548 <__aeabi_f2d>
 8002ccc:	4680      	mov	r8, r0
 8002cce:	4689      	mov	r9, r1
					measureTick, pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002cd0:	4b31      	ldr	r3, [pc, #196]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fc37 	bl	8000548 <__aeabi_f2d>
 8002cda:	4604      	mov	r4, r0
 8002cdc:	460d      	mov	r5, r1
					measureTick, pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002cde:	4b2e      	ldr	r3, [pc, #184]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nS,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fc30 	bl	8000548 <__aeabi_f2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8002cf0:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
 8002cf4:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
 8002cf8:	e9cd ab16 	strd	sl, fp, [sp, #88]	@ 0x58
 8002cfc:	9614      	str	r6, [sp, #80]	@ 0x50
 8002cfe:	ed97 7b00 	vldr	d7, [r7]
 8002d02:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8002d06:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d0a:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8002d0e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d12:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002d16:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002d1e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002d26:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002d2a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002d2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d30:	9106      	str	r1, [sp, #24]
 8002d32:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002d36:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d3a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002d3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d42:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8002d46:	ed8d 7b00 	vstr	d7, [sp]
 8002d4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d4c:	4921      	ldr	r1, [pc, #132]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d4e:	4822      	ldr	r0, [pc, #136]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002d50:	f00c f828 	bl	800eda4 <siprintf>
				//measureTick, pkt.abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
		CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff));
 8002d54:	4820      	ldr	r0, [pc, #128]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002d56:	f7fd fa8b 	bl	8000270 <strlen>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	481d      	ldr	r0, [pc, #116]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002d62:	f00a fe1f 	bl	800d9a4 <CDC_Transmit_FS>
	}

    if (htim->Instance == TIM4)
 8002d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10a      	bne.n	8002d88 <HAL_TIM_PeriodElapsedCallback+0x254>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uartBuff, strlen(uartBuff));*/
		//CDC_Transmit_FS((uint8_t *) uartBuff, strlen(uartBuff));*/

    	/*------- SEND NUMBER --------------------------*/
    	pkt.header = PACKET_HEADER;
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002d74:	4a1a      	ldr	r2, [pc, #104]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002d76:	601a      	str	r2, [r3, #0]
    	pkt.footer = PACKET_FOOTER;
 8002d78:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8002de4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002d7c:	63da      	str	r2, [r3, #60]	@ 0x3c
		pkt.acc[2] = 0;  //-21.6;
		*/


    	//print_packet_hex(&pkt);		// Function to debug the sent HEX string
    	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&pkt, sizeof(pkt));
 8002d7e:	2240      	movs	r2, #64	@ 0x40
 8002d80:	4905      	ldr	r1, [pc, #20]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002d82:	4819      	ldr	r0, [pc, #100]	@ (8002de8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002d84:	f006 f9f2 	bl	800916c <HAL_UART_Transmit_DMA>


	}
}
 8002d88:	bf00      	nop
 8002d8a:	37ec      	adds	r7, #236	@ 0xec
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d92:	bf00      	nop
 8002d94:	20000828 	.word	0x20000828
 8002d98:	20000830 	.word	0x20000830
 8002d9c:	20000728 	.word	0x20000728
 8002da0:	20000790 	.word	0x20000790
 8002da4:	20000850 	.word	0x20000850
 8002da8:	20000844 	.word	0x20000844
 8002dac:	20000820 	.word	0x20000820
 8002db0:	20000004 	.word	0x20000004
 8002db4:	2000000c 	.word	0x2000000c
 8002db8:	20000324 	.word	0x20000324
 8002dbc:	20000328 	.word	0x20000328
 8002dc0:	2000032c 	.word	0x2000032c
 8002dc4:	20000838 	.word	0x20000838
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	20000824 	.word	0x20000824
 8002dd0:	2000082c 	.word	0x2000082c
 8002dd4:	080128bc 	.word	0x080128bc
 8002dd8:	200009c4 	.word	0x200009c4
 8002ddc:	40000800 	.word	0x40000800
 8002de0:	aabbccdd 	.word	0xaabbccdd
 8002de4:	ee8899ff 	.word	0xee8899ff
 8002de8:	20000680 	.word	0x20000680

08002dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002df4:	f001 face 	bl	8004394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002df8:	f000 f8e0 	bl	8002fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dfc:	f000 fb9e 	bl	800353c <MX_GPIO_Init>
  MX_DMA_Init();
 8002e00:	f000 fb4e 	bl	80034a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8002e04:	f000 f944 	bl	8003090 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002e08:	f000 f9ae 	bl	8003168 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002e0c:	f00a fd0c 	bl	800d828 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002e10:	f000 fa1e 	bl	8003250 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002e14:	f000 fb1a 	bl	800344c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002e18:	f000 fa68 	bl	80032ec <MX_TIM4_Init>
  MX_SPI2_Init();
 8002e1c:	f000 f96e 	bl	80030fc <MX_SPI2_Init>
  MX_TIM9_Init();
 8002e20:	f000 fab2 	bl	8003388 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  SetPriorities();	// function to set priorities
 8002e24:	f7ff fd56 	bl	80028d4 <SetPriorities>

  HAL_Delay(500);
 8002e28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e2c:	f001 fb24 	bl	8004478 <HAL_Delay>

  /* ----- BMI088 and MADGWICK SETUP ------------------------------------------*/
  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8002e30:	2310      	movs	r3, #16
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	4b49      	ldr	r3, [pc, #292]	@ (8002f5c <main+0x170>)
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2310      	movs	r3, #16
 8002e3a:	4a49      	ldr	r2, [pc, #292]	@ (8002f60 <main+0x174>)
 8002e3c:	4949      	ldr	r1, [pc, #292]	@ (8002f64 <main+0x178>)
 8002e3e:	484a      	ldr	r0, [pc, #296]	@ (8002f68 <main+0x17c>)
 8002e40:	f7fe f8ea 	bl	8001018 <BMI088_Init>
  SetQuaternionFromEuler(&q, 0, 0, 0);				// Angles on the starting position: roll=0, pitch=0, yaw=0
 8002e44:	ed9f 1a49 	vldr	s2, [pc, #292]	@ 8002f6c <main+0x180>
 8002e48:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8002f6c <main+0x180>
 8002e4c:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8002f6c <main+0x180>
 8002e50:	4847      	ldr	r0, [pc, #284]	@ (8002f70 <main+0x184>)
 8002e52:	f7fe fde9 	bl	8001a28 <SetQuaternionFromEuler>
  Filter_Init(&filt, f_LP_gyr, f_LP_acc, f_HP_gyr, f_HP_acc, f_LP_angles, T_TIM2);
 8002e56:	4b47      	ldr	r3, [pc, #284]	@ (8002f74 <main+0x188>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	4b46      	ldr	r3, [pc, #280]	@ (8002f78 <main+0x18c>)
 8002e5e:	ed93 7a00 	vldr	s14, [r3]
 8002e62:	4b46      	ldr	r3, [pc, #280]	@ (8002f7c <main+0x190>)
 8002e64:	edd3 6a00 	vldr	s13, [r3]
 8002e68:	4b45      	ldr	r3, [pc, #276]	@ (8002f80 <main+0x194>)
 8002e6a:	ed93 6a00 	vldr	s12, [r3]
 8002e6e:	4b45      	ldr	r3, [pc, #276]	@ (8002f84 <main+0x198>)
 8002e70:	edd3 5a00 	vldr	s11, [r3]
 8002e74:	4b44      	ldr	r3, [pc, #272]	@ (8002f88 <main+0x19c>)
 8002e76:	ed93 5a00 	vldr	s10, [r3]
 8002e7a:	eef0 2a45 	vmov.f32	s5, s10
 8002e7e:	eeb0 2a65 	vmov.f32	s4, s11
 8002e82:	eef0 1a46 	vmov.f32	s3, s12
 8002e86:	eeb0 1a66 	vmov.f32	s2, s13
 8002e8a:	eef0 0a47 	vmov.f32	s1, s14
 8002e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e92:	483e      	ldr	r0, [pc, #248]	@ (8002f8c <main+0x1a0>)
 8002e94:	f7fe fe9c 	bl	8001bd0 <Filter_Init>

  HAL_Delay(500);
 8002e98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e9c:	f001 faec 	bl	8004478 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim2);     // Start timer: calculation of the algorithm
 8002ea0:	483b      	ldr	r0, [pc, #236]	@ (8002f90 <main+0x1a4>)
 8002ea2:	f005 f973 	bl	800818c <HAL_TIM_Base_Start_IT>
  Init_BMI088_Bias(&imu, 1000000);	 // the second passed variable is the number of iterations to find the offset
 8002ea6:	493b      	ldr	r1, [pc, #236]	@ (8002f94 <main+0x1a8>)
 8002ea8:	482f      	ldr	r0, [pc, #188]	@ (8002f68 <main+0x17c>)
 8002eaa:	f7fe f9cd 	bl	8001248 <Init_BMI088_Bias>
  //HAL_TIM_Base_Start_IT(&htim3);   // Start timer: send data with CDC_Transmit_FS serial interface !!!!!!!! --> Not needed


  /* ----- MCP3564R SETUP ----------------------------------------------------- */
  HAL_TIM_Base_Start(&htim9);
 8002eae:	483a      	ldr	r0, [pc, #232]	@ (8002f98 <main+0x1ac>)
 8002eb0:	f005 f904 	bl	80080bc <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_1);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4838      	ldr	r0, [pc, #224]	@ (8002f98 <main+0x1ac>)
 8002eb8:	f005 fa32 	bl	8008320 <HAL_TIM_OC_Start>
  HAL_Delay(20);
 8002ebc:	2014      	movs	r0, #20
 8002ebe:	f001 fadb 	bl	8004478 <HAL_Delay>

  MCP3561_Reset(&hspi2);
 8002ec2:	4836      	ldr	r0, [pc, #216]	@ (8002f9c <main+0x1b0>)
 8002ec4:	f000 fd04 	bl	80038d0 <MCP3561_Reset>
  HAL_Delay(20);
 8002ec8:	2014      	movs	r0, #20
 8002eca:	f001 fad5 	bl	8004478 <HAL_Delay>
  //MCP3561_PrintRegisters(&hspi2);
  //printf("\n");

  MCP3561_Init(&hspi2);
 8002ece:	4833      	ldr	r0, [pc, #204]	@ (8002f9c <main+0x1b0>)
 8002ed0:	f000 fc74 	bl	80037bc <MCP3561_Init>
  HAL_Delay(20);
 8002ed4:	2014      	movs	r0, #20
 8002ed6:	f001 facf 	bl	8004478 <HAL_Delay>
  //MCP3561_PrintRegisters(&hspi2);
  //printf("\n");
  HAL_Delay(2000);
 8002eda:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ede:	f001 facb 	bl	8004478 <HAL_Delay>


  /* ----- START ESP32 TRANSMISSION --------------------------------------------*/
  HAL_TIM_Base_Start_IT(&htim4);     // Start the UART transmission to ESP32
 8002ee2:	482f      	ldr	r0, [pc, #188]	@ (8002fa0 <main+0x1b4>)
 8002ee4:	f005 f952 	bl	800818c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_uart_buff, 1);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	492e      	ldr	r1, [pc, #184]	@ (8002fa4 <main+0x1b8>)
 8002eec:	482e      	ldr	r0, [pc, #184]	@ (8002fa8 <main+0x1bc>)
 8002eee:	f006 f917 	bl	8009120 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//MCP3561_PrintRegisters(&hspi2);
	  Toggle(SAMPLE_TIME_MS_TOGGLE);
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <main+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fd4c 	bl	8002994 <Toggle>
	if(allDiffCh)
 8002efc:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb0 <main+0x1c4>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f6      	beq.n	8002ef2 <main+0x106>
	{
		printf("%.3f\t%.3f\t%.3f\t%.3f\n", pkt.adc[0], pkt.adc[1], pkt.adc[2], pkt.adc[3]);
 8002f04:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb4 <main+0x1c8>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fb1d 	bl	8000548 <__aeabi_f2d>
 8002f0e:	4682      	mov	sl, r0
 8002f10:	468b      	mov	fp, r1
 8002f12:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <main+0x1c8>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fb16 	bl	8000548 <__aeabi_f2d>
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	460d      	mov	r5, r1
 8002f20:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <main+0x1c8>)
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fb0f 	bl	8000548 <__aeabi_f2d>
 8002f2a:	4680      	mov	r8, r0
 8002f2c:	4689      	mov	r9, r1
 8002f2e:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <main+0x1c8>)
 8002f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fb08 	bl	8000548 <__aeabi_f2d>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f44:	e9cd 4500 	strd	r4, r5, [sp]
 8002f48:	4652      	mov	r2, sl
 8002f4a:	465b      	mov	r3, fp
 8002f4c:	481a      	ldr	r0, [pc, #104]	@ (8002fb8 <main+0x1cc>)
 8002f4e:	f00b ff17 	bl	800ed80 <iprintf>
		allDiffCh = 0;
 8002f52:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <main+0x1c4>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
	  Toggle(SAMPLE_TIME_MS_TOGGLE);
 8002f58:	e7cb      	b.n	8002ef2 <main+0x106>
 8002f5a:	bf00      	nop
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	20000330 	.word	0x20000330
 8002f68:	20000728 	.word	0x20000728
 8002f6c:	00000000 	.word	0x00000000
 8002f70:	2000000c 	.word	0x2000000c
 8002f74:	2000001c 	.word	0x2000001c
 8002f78:	20000020 	.word	0x20000020
 8002f7c:	20000028 	.word	0x20000028
 8002f80:	2000002c 	.word	0x2000002c
 8002f84:	20000024 	.word	0x20000024
 8002f88:	2000081c 	.word	0x2000081c
 8002f8c:	20000790 	.word	0x20000790
 8002f90:	20000560 	.word	0x20000560
 8002f94:	000f4240 	.word	0x000f4240
 8002f98:	20000638 	.word	0x20000638
 8002f9c:	20000388 	.word	0x20000388
 8002fa0:	200005f0 	.word	0x200005f0
 8002fa4:	20000878 	.word	0x20000878
 8002fa8:	20000680 	.word	0x20000680
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	200008bc 	.word	0x200008bc
 8002fb4:	20000830 	.word	0x20000830
 8002fb8:	08012914 	.word	0x08012914

08002fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b094      	sub	sp, #80	@ 0x50
 8002fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fc2:	f107 0320 	add.w	r3, r7, #32
 8002fc6:	2230      	movs	r2, #48	@ 0x30
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f00b ff4d 	bl	800ee6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	4b28      	ldr	r3, [pc, #160]	@ (8003088 <SystemClock_Config+0xcc>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	4a27      	ldr	r2, [pc, #156]	@ (8003088 <SystemClock_Config+0xcc>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <SystemClock_Config+0xcc>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	4b22      	ldr	r3, [pc, #136]	@ (800308c <SystemClock_Config+0xd0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a21      	ldr	r2, [pc, #132]	@ (800308c <SystemClock_Config+0xd0>)
 8003006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b1f      	ldr	r3, [pc, #124]	@ (800308c <SystemClock_Config+0xd0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003018:	2301      	movs	r3, #1
 800301a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800301c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003022:	2302      	movs	r3, #2
 8003024:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003026:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800302c:	2308      	movs	r3, #8
 800302e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003030:	23a8      	movs	r3, #168	@ 0xa8
 8003032:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003034:	2302      	movs	r3, #2
 8003036:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003038:	2307      	movs	r3, #7
 800303a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800303c:	f107 0320 	add.w	r3, r7, #32
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fb8b 	bl	800675c <HAL_RCC_OscConfig>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800304c:	f000 fb78 	bl	8003740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003050:	230f      	movs	r3, #15
 8003052:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003054:	2302      	movs	r3, #2
 8003056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800305c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003068:	f107 030c 	add.w	r3, r7, #12
 800306c:	2105      	movs	r1, #5
 800306e:	4618      	mov	r0, r3
 8003070:	f003 fdec 	bl	8006c4c <HAL_RCC_ClockConfig>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800307a:	f000 fb61 	bl	8003740 <Error_Handler>
  }
}
 800307e:	bf00      	nop
 8003080:	3750      	adds	r7, #80	@ 0x50
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000

08003090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003094:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <MX_SPI1_Init+0x64>)
 8003096:	4a18      	ldr	r2, [pc, #96]	@ (80030f8 <MX_SPI1_Init+0x68>)
 8003098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800309a:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <MX_SPI1_Init+0x64>)
 800309c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030a2:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ae:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030b4:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030c4:	2210      	movs	r2, #16
 80030c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030c8:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d4:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030dc:	220a      	movs	r2, #10
 80030de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030e0:	4804      	ldr	r0, [pc, #16]	@ (80030f4 <MX_SPI1_Init+0x64>)
 80030e2:	f003 ffd1 	bl	8007088 <HAL_SPI_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030ec:	f000 fb28 	bl	8003740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000330 	.word	0x20000330
 80030f8:	40013000 	.word	0x40013000

080030fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003100:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003102:	4a18      	ldr	r2, [pc, #96]	@ (8003164 <MX_SPI2_Init+0x68>)
 8003104:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003106:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003108:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800310c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800310e:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003114:	4b12      	ldr	r3, [pc, #72]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800311a:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <MX_SPI2_Init+0x64>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800312c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800312e:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003130:	2218      	movs	r2, #24
 8003132:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003134:	4b0a      	ldr	r3, [pc, #40]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003136:	2200      	movs	r2, #0
 8003138:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <MX_SPI2_Init+0x64>)
 800313c:	2200      	movs	r2, #0
 800313e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003140:	4b07      	ldr	r3, [pc, #28]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003142:	2200      	movs	r2, #0
 8003144:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003146:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <MX_SPI2_Init+0x64>)
 8003148:	220a      	movs	r2, #10
 800314a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800314c:	4804      	ldr	r0, [pc, #16]	@ (8003160 <MX_SPI2_Init+0x64>)
 800314e:	f003 ff9b 	bl	8007088 <HAL_SPI_Init>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003158:	f000 faf2 	bl	8003740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000388 	.word	0x20000388
 8003164:	40003800 	.word	0x40003800

08003168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800316e:	f107 0308 	add.w	r3, r7, #8
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800317c:	463b      	mov	r3, r7
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003184:	4b2e      	ldr	r3, [pc, #184]	@ (8003240 <MX_TIM2_Init+0xd8>)
 8003186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800318a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 800318c:	4b2c      	ldr	r3, [pc, #176]	@ (8003240 <MX_TIM2_Init+0xd8>)
 800318e:	2229      	movs	r2, #41	@ 0x29
 8003190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003192:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <MX_TIM2_Init+0xd8>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8003198:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <MX_TIM2_Init+0xd8>)
 800319a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800319e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <MX_TIM2_Init+0xd8>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a6:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <MX_TIM2_Init+0xd8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031ac:	4824      	ldr	r0, [pc, #144]	@ (8003240 <MX_TIM2_Init+0xd8>)
 80031ae:	f004 ff35 	bl	800801c <HAL_TIM_Base_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80031b8:	f000 fac2 	bl	8003740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031c2:	f107 0308 	add.w	r3, r7, #8
 80031c6:	4619      	mov	r1, r3
 80031c8:	481d      	ldr	r0, [pc, #116]	@ (8003240 <MX_TIM2_Init+0xd8>)
 80031ca:	f005 fabd 	bl	8008748 <HAL_TIM_ConfigClockSource>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80031d4:	f000 fab4 	bl	8003740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d8:	2300      	movs	r3, #0
 80031da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031dc:	2300      	movs	r3, #0
 80031de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031e0:	463b      	mov	r3, r7
 80031e2:	4619      	mov	r1, r3
 80031e4:	4816      	ldr	r0, [pc, #88]	@ (8003240 <MX_TIM2_Init+0xd8>)
 80031e6:	f005 febb 	bl	8008f60 <HAL_TIMEx_MasterConfigSynchronization>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80031f0:	f000 faa6 	bl	8003740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* These following 2 lines calculate the Frequency and the Period of the Timer TIM2*/
	T_TIM2 = 1.0f / (f_CK / (float)((htim2.Init.Period +1 ) * htim2.Init.Prescaler + 1));
 80031f4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003244 <MX_TIM2_Init+0xdc>
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <MX_TIM2_Init+0xd8>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	3301      	adds	r3, #1
 80031fe:	4a10      	ldr	r2, [pc, #64]	@ (8003240 <MX_TIM2_Init+0xd8>)
 8003200:	6852      	ldr	r2, [r2, #4]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	3301      	adds	r3, #1
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003214:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <MX_TIM2_Init+0xe0>)
 800321e:	edc3 7a00 	vstr	s15, [r3]
	F_TIM2 = 1 / T_TIM2;
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <MX_TIM2_Init+0xe0>)
 8003224:	ed93 7a00 	vldr	s14, [r3]
 8003228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800322c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <MX_TIM2_Init+0xe4>)
 8003232:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM2_Init 2 */

}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000560 	.word	0x20000560
 8003244:	4ca037a0 	.word	0x4ca037a0
 8003248:	2000081c 	.word	0x2000081c
 800324c:	20000820 	.word	0x20000820

08003250 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003256:	f107 0308 	add.w	r3, r7, #8
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003264:	463b      	mov	r3, r7
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800326c:	4b1d      	ldr	r3, [pc, #116]	@ (80032e4 <MX_TIM3_Init+0x94>)
 800326e:	4a1e      	ldr	r2, [pc, #120]	@ (80032e8 <MX_TIM3_Init+0x98>)
 8003270:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8003272:	4b1c      	ldr	r3, [pc, #112]	@ (80032e4 <MX_TIM3_Init+0x94>)
 8003274:	2229      	movs	r2, #41	@ 0x29
 8003276:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003278:	4b1a      	ldr	r3, [pc, #104]	@ (80032e4 <MX_TIM3_Init+0x94>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800327e:	4b19      	ldr	r3, [pc, #100]	@ (80032e4 <MX_TIM3_Init+0x94>)
 8003280:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003284:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003286:	4b17      	ldr	r3, [pc, #92]	@ (80032e4 <MX_TIM3_Init+0x94>)
 8003288:	2200      	movs	r2, #0
 800328a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800328c:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <MX_TIM3_Init+0x94>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003292:	4814      	ldr	r0, [pc, #80]	@ (80032e4 <MX_TIM3_Init+0x94>)
 8003294:	f004 fec2 	bl	800801c <HAL_TIM_Base_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800329e:	f000 fa4f 	bl	8003740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032a8:	f107 0308 	add.w	r3, r7, #8
 80032ac:	4619      	mov	r1, r3
 80032ae:	480d      	ldr	r0, [pc, #52]	@ (80032e4 <MX_TIM3_Init+0x94>)
 80032b0:	f005 fa4a 	bl	8008748 <HAL_TIM_ConfigClockSource>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80032ba:	f000 fa41 	bl	8003740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032c6:	463b      	mov	r3, r7
 80032c8:	4619      	mov	r1, r3
 80032ca:	4806      	ldr	r0, [pc, #24]	@ (80032e4 <MX_TIM3_Init+0x94>)
 80032cc:	f005 fe48 	bl	8008f60 <HAL_TIMEx_MasterConfigSynchronization>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80032d6:	f000 fa33 	bl	8003740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200005a8 	.word	0x200005a8
 80032e8:	40000400 	.word	0x40000400

080032ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032f2:	f107 0308 	add.w	r3, r7, #8
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003300:	463b      	mov	r3, r7
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003308:	4b1d      	ldr	r3, [pc, #116]	@ (8003380 <MX_TIM4_Init+0x94>)
 800330a:	4a1e      	ldr	r2, [pc, #120]	@ (8003384 <MX_TIM4_Init+0x98>)
 800330c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 800330e:	4b1c      	ldr	r3, [pc, #112]	@ (8003380 <MX_TIM4_Init+0x94>)
 8003310:	2229      	movs	r2, #41	@ 0x29
 8003312:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003314:	4b1a      	ldr	r3, [pc, #104]	@ (8003380 <MX_TIM4_Init+0x94>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800331a:	4b19      	ldr	r3, [pc, #100]	@ (8003380 <MX_TIM4_Init+0x94>)
 800331c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003320:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003322:	4b17      	ldr	r3, [pc, #92]	@ (8003380 <MX_TIM4_Init+0x94>)
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003328:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <MX_TIM4_Init+0x94>)
 800332a:	2200      	movs	r2, #0
 800332c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800332e:	4814      	ldr	r0, [pc, #80]	@ (8003380 <MX_TIM4_Init+0x94>)
 8003330:	f004 fe74 	bl	800801c <HAL_TIM_Base_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800333a:	f000 fa01 	bl	8003740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800333e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4619      	mov	r1, r3
 800334a:	480d      	ldr	r0, [pc, #52]	@ (8003380 <MX_TIM4_Init+0x94>)
 800334c:	f005 f9fc 	bl	8008748 <HAL_TIM_ConfigClockSource>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003356:	f000 f9f3 	bl	8003740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003362:	463b      	mov	r3, r7
 8003364:	4619      	mov	r1, r3
 8003366:	4806      	ldr	r0, [pc, #24]	@ (8003380 <MX_TIM4_Init+0x94>)
 8003368:	f005 fdfa 	bl	8008f60 <HAL_TIMEx_MasterConfigSynchronization>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003372:	f000 f9e5 	bl	8003740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200005f0 	.word	0x200005f0
 8003384:	40000800 	.word	0x40000800

08003388 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	@ 0x30
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800338e:	f107 0320 	add.w	r3, r7, #32
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	611a      	str	r2, [r3, #16]
 80033aa:	615a      	str	r2, [r3, #20]
 80033ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80033ae:	4b25      	ldr	r3, [pc, #148]	@ (8003444 <MX_TIM9_Init+0xbc>)
 80033b0:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <MX_TIM9_Init+0xc0>)
 80033b2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80033b4:	4b23      	ldr	r3, [pc, #140]	@ (8003444 <MX_TIM9_Init+0xbc>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ba:	4b22      	ldr	r3, [pc, #136]	@ (8003444 <MX_TIM9_Init+0xbc>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 17-1;
 80033c0:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <MX_TIM9_Init+0xbc>)
 80033c2:	2210      	movs	r2, #16
 80033c4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003444 <MX_TIM9_Init+0xbc>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003444 <MX_TIM9_Init+0xbc>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80033d2:	481c      	ldr	r0, [pc, #112]	@ (8003444 <MX_TIM9_Init+0xbc>)
 80033d4:	f004 fe22 	bl	800801c <HAL_TIM_Base_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 80033de:	f000 f9af 	bl	8003740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80033e8:	f107 0320 	add.w	r3, r7, #32
 80033ec:	4619      	mov	r1, r3
 80033ee:	4815      	ldr	r0, [pc, #84]	@ (8003444 <MX_TIM9_Init+0xbc>)
 80033f0:	f005 f9aa 	bl	8008748 <HAL_TIM_ConfigClockSource>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80033fa:	f000 f9a1 	bl	8003740 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 80033fe:	4811      	ldr	r0, [pc, #68]	@ (8003444 <MX_TIM9_Init+0xbc>)
 8003400:	f004 ff34 	bl	800826c <HAL_TIM_OC_Init>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 800340a:	f000 f999 	bl	8003740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800340e:	2330      	movs	r3, #48	@ 0x30
 8003410:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2200      	movs	r2, #0
 8003422:	4619      	mov	r1, r3
 8003424:	4807      	ldr	r0, [pc, #28]	@ (8003444 <MX_TIM9_Init+0xbc>)
 8003426:	f005 f933 	bl	8008690 <HAL_TIM_OC_ConfigChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8003430:	f000 f986 	bl	8003740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003434:	4803      	ldr	r0, [pc, #12]	@ (8003444 <MX_TIM9_Init+0xbc>)
 8003436:	f000 fd33 	bl	8003ea0 <HAL_TIM_MspPostInit>

}
 800343a:	bf00      	nop
 800343c:	3730      	adds	r7, #48	@ 0x30
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000638 	.word	0x20000638
 8003448:	40014000 	.word	0x40014000

0800344c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 8003452:	4a12      	ldr	r2, [pc, #72]	@ (800349c <MX_USART1_UART_Init+0x50>)
 8003454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 8003458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800345c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800345e:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003470:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 8003472:	220c      	movs	r2, #12
 8003474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003476:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003482:	4805      	ldr	r0, [pc, #20]	@ (8003498 <MX_USART1_UART_Init+0x4c>)
 8003484:	f005 fdfc 	bl	8009080 <HAL_UART_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800348e:	f000 f957 	bl	8003740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000680 	.word	0x20000680
 800349c:	40011000 	.word	0x40011000

080034a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	4b23      	ldr	r3, [pc, #140]	@ (8003538 <MX_DMA_Init+0x98>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	4a22      	ldr	r2, [pc, #136]	@ (8003538 <MX_DMA_Init+0x98>)
 80034b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b6:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <MX_DMA_Init+0x98>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003538 <MX_DMA_Init+0x98>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003538 <MX_DMA_Init+0x98>)
 80034cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d2:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <MX_DMA_Init+0x98>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	200e      	movs	r0, #14
 80034e4:	f001 f8c7 	bl	8004676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80034e8:	200e      	movs	r0, #14
 80034ea:	f001 f8e0 	bl	80046ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	200f      	movs	r0, #15
 80034f4:	f001 f8bf 	bl	8004676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80034f8:	200f      	movs	r0, #15
 80034fa:	f001 f8d8 	bl	80046ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	2038      	movs	r0, #56	@ 0x38
 8003504:	f001 f8b7 	bl	8004676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003508:	2038      	movs	r0, #56	@ 0x38
 800350a:	f001 f8d0 	bl	80046ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	203b      	movs	r0, #59	@ 0x3b
 8003514:	f001 f8af 	bl	8004676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003518:	203b      	movs	r0, #59	@ 0x3b
 800351a:	f001 f8c8 	bl	80046ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	2100      	movs	r1, #0
 8003522:	2046      	movs	r0, #70	@ 0x46
 8003524:	f001 f8a7 	bl	8004676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003528:	2046      	movs	r0, #70	@ 0x46
 800352a:	f001 f8c0 	bl	80046ae <HAL_NVIC_EnableIRQ>

}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800

0800353c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	@ 0x28
 8003540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b53      	ldr	r3, [pc, #332]	@ (80036a4 <MX_GPIO_Init+0x168>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	4a52      	ldr	r2, [pc, #328]	@ (80036a4 <MX_GPIO_Init+0x168>)
 800355c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003560:	6313      	str	r3, [r2, #48]	@ 0x30
 8003562:	4b50      	ldr	r3, [pc, #320]	@ (80036a4 <MX_GPIO_Init+0x168>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b4c      	ldr	r3, [pc, #304]	@ (80036a4 <MX_GPIO_Init+0x168>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	4a4b      	ldr	r2, [pc, #300]	@ (80036a4 <MX_GPIO_Init+0x168>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	6313      	str	r3, [r2, #48]	@ 0x30
 800357e:	4b49      	ldr	r3, [pc, #292]	@ (80036a4 <MX_GPIO_Init+0x168>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	4b45      	ldr	r3, [pc, #276]	@ (80036a4 <MX_GPIO_Init+0x168>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	4a44      	ldr	r2, [pc, #272]	@ (80036a4 <MX_GPIO_Init+0x168>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6313      	str	r3, [r2, #48]	@ 0x30
 800359a:	4b42      	ldr	r3, [pc, #264]	@ (80036a4 <MX_GPIO_Init+0x168>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4b3e      	ldr	r3, [pc, #248]	@ (80036a4 <MX_GPIO_Init+0x168>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	4a3d      	ldr	r2, [pc, #244]	@ (80036a4 <MX_GPIO_Init+0x168>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035b6:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <MX_GPIO_Init+0x168>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2110      	movs	r1, #16
 80035c6:	4838      	ldr	r0, [pc, #224]	@ (80036a8 <MX_GPIO_Init+0x16c>)
 80035c8:	f001 fe2a 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 80035cc:	2200      	movs	r2, #0
 80035ce:	2110      	movs	r1, #16
 80035d0:	4836      	ldr	r0, [pc, #216]	@ (80036ac <MX_GPIO_Init+0x170>)
 80035d2:	f001 fe25 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80035dc:	4834      	ldr	r0, [pc, #208]	@ (80036b0 <MX_GPIO_Init+0x174>)
 80035de:	f001 fe1f 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 80035e2:	230c      	movs	r3, #12
 80035e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4619      	mov	r1, r3
 80035f6:	482d      	ldr	r0, [pc, #180]	@ (80036ac <MX_GPIO_Init+0x170>)
 80035f8:	f001 fc76 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 80035fc:	2310      	movs	r3, #16
 80035fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003600:	2301      	movs	r3, #1
 8003602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003608:	2300      	movs	r3, #0
 800360a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	4619      	mov	r1, r3
 8003612:	4825      	ldr	r0, [pc, #148]	@ (80036a8 <MX_GPIO_Init+0x16c>)
 8003614:	f001 fc68 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 8003618:	2310      	movs	r3, #16
 800361a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361c:	2301      	movs	r3, #1
 800361e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	481f      	ldr	r0, [pc, #124]	@ (80036ac <MX_GPIO_Init+0x170>)
 8003630:	f001 fc5a 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP3564_IRQ_Pin */
  GPIO_InitStruct.Pin = MCP3564_IRQ_Pin;
 8003634:	2301      	movs	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003638:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800363c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCP3564_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4819      	ldr	r0, [pc, #100]	@ (80036b0 <MX_GPIO_Init+0x174>)
 800364a:	f001 fc4d 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin PB4 */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|GPIO_PIN_4;
 800364e:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8003652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003654:	2301      	movs	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	2300      	movs	r3, #0
 800365e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4619      	mov	r1, r3
 8003666:	4812      	ldr	r0, [pc, #72]	@ (80036b0 <MX_GPIO_Init+0x174>)
 8003668:	f001 fc3e 	bl	8004ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	2006      	movs	r0, #6
 8003672:	f001 f800 	bl	8004676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003676:	2006      	movs	r0, #6
 8003678:	f001 f819 	bl	80046ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	2008      	movs	r0, #8
 8003682:	f000 fff8 	bl	8004676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003686:	2008      	movs	r0, #8
 8003688:	f001 f811 	bl	80046ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	2009      	movs	r0, #9
 8003692:	f000 fff0 	bl	8004676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003696:	2009      	movs	r0, #9
 8003698:	f001 f809 	bl	80046ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800369c:	bf00      	nop
 800369e:	3728      	adds	r7, #40	@ 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020400 	.word	0x40020400

080036b4 <__io_putchar>:
 * to output a single character. Characters are buffered and
 * transmitted when a newline is encountered or the buffer is full.
 * @param  ch: The character to be output.
 * @retval The character output.
 */
PUTCHAR_PROTOTYPE {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
    // Optional: Add carriage return before newline if only newline is received.
    // This ensures proper line ending (\r\n) for terminals expecting it
    // when printf only outputs '\n'.
    if (ch == '\n') {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b0a      	cmp	r3, #10
 80036c0:	d116      	bne.n	80036f0 <__io_putchar+0x3c>
        if (s_printf_buffer_idx == 0 || s_printf_buffer[s_printf_buffer_idx - 1] != '\r') {
 80036c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003738 <__io_putchar+0x84>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <__io_putchar+0x24>
 80036ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <__io_putchar+0x84>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	4a1a      	ldr	r2, [pc, #104]	@ (800373c <__io_putchar+0x88>)
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	2b0d      	cmp	r3, #13
 80036d6:	d00b      	beq.n	80036f0 <__io_putchar+0x3c>
            // Ensure there's space for '\r' before adding it
            if (s_printf_buffer_idx < PRINTF_BUFFER_SIZE) {
 80036d8:	4b17      	ldr	r3, [pc, #92]	@ (8003738 <__io_putchar+0x84>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2bff      	cmp	r3, #255	@ 0xff
 80036de:	dc07      	bgt.n	80036f0 <__io_putchar+0x3c>
                s_printf_buffer[s_printf_buffer_idx++] = '\r';
 80036e0:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <__io_putchar+0x84>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	4914      	ldr	r1, [pc, #80]	@ (8003738 <__io_putchar+0x84>)
 80036e8:	600a      	str	r2, [r1, #0]
 80036ea:	4a14      	ldr	r2, [pc, #80]	@ (800373c <__io_putchar+0x88>)
 80036ec:	210d      	movs	r1, #13
 80036ee:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Store the current character in the buffer
    // Ensure there's space for the character before adding it
    if (s_printf_buffer_idx < PRINTF_BUFFER_SIZE) {
 80036f0:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <__io_putchar+0x84>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2bff      	cmp	r3, #255	@ 0xff
 80036f6:	dc08      	bgt.n	800370a <__io_putchar+0x56>
        s_printf_buffer[s_printf_buffer_idx++] = (char)ch;
 80036f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003738 <__io_putchar+0x84>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	490e      	ldr	r1, [pc, #56]	@ (8003738 <__io_putchar+0x84>)
 8003700:	600a      	str	r2, [r1, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	b2d1      	uxtb	r1, r2
 8003706:	4a0d      	ldr	r2, [pc, #52]	@ (800373c <__io_putchar+0x88>)
 8003708:	54d1      	strb	r1, [r2, r3]
    }

    // Check if the buffer is full or if a newline character was received.
    // If either condition is true, transmit the buffered data.
    if (s_printf_buffer_idx >= PRINTF_BUFFER_SIZE || ch == '\n') {
 800370a:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <__io_putchar+0x84>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2bff      	cmp	r3, #255	@ 0xff
 8003710:	dc02      	bgt.n	8003718 <__io_putchar+0x64>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0a      	cmp	r3, #10
 8003716:	d109      	bne.n	800372c <__io_putchar+0x78>
        // Transmit the buffered data via USB CDC
        // The CDC_Transmit_FS function will handle the actual USB transfer.
        CDC_Transmit_FS((uint8_t*)s_printf_buffer, s_printf_buffer_idx);
 8003718:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <__io_putchar+0x84>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	4619      	mov	r1, r3
 8003720:	4806      	ldr	r0, [pc, #24]	@ (800373c <__io_putchar+0x88>)
 8003722:	f00a f93f 	bl	800d9a4 <CDC_Transmit_FS>

        // Reset the buffer index after transmission
        s_printf_buffer_idx = 0;
 8003726:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <__io_putchar+0x84>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
    }

    return ch; // Return the character that was put
 800372c:	687b      	ldr	r3, [r7, #4]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200009c0 	.word	0x200009c0
 800373c:	200008c0 	.word	0x200008c0

08003740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b0a0      	sub	sp, #128	@ 0x80
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	char txBuff[128];
	sprintf(txBuff, "SPI Error!");
 8003746:	463b      	mov	r3, r7
 8003748:	490b      	ldr	r1, [pc, #44]	@ (8003778 <Error_Handler+0x38>)
 800374a:	4618      	mov	r0, r3
 800374c:	f00b fb2a 	bl	800eda4 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 8003750:	bf00      	nop
 8003752:	463b      	mov	r3, r7
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fd8b 	bl	8000270 <strlen>
 800375a:	4603      	mov	r3, r0
 800375c:	b29a      	uxth	r2, r3
 800375e:	463b      	mov	r3, r7
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f00a f91e 	bl	800d9a4 <CDC_Transmit_FS>
 8003768:	4603      	mov	r3, r0
 800376a:	2b02      	cmp	r3, #2
 800376c:	d0f1      	beq.n	8003752 <Error_Handler+0x12>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800376e:	b672      	cpsid	i
}
 8003770:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <Error_Handler+0x32>
 8003776:	bf00      	nop
 8003778:	0801292c 	.word	0x0801292c

0800377c <_MCP3561_write>:
    MCP3561_SREAD_DATA_COMMAND,  // Comando di lettura
    0x00, 0x00, 0x00, 0x00, 0x00 // Padding
};
/* ----------------------------------------- */

void _MCP3561_write(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t size){
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
	// manually operate the !CS signal, because the STM32 hardware NSS signal is (sadly) useless
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_RESET);
 800378a:	2200      	movs	r2, #0
 800378c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003790:	4809      	ldr	r0, [pc, #36]	@ (80037b8 <_MCP3561_write+0x3c>)
 8003792:	f001 fd45 	bl	8005220 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, size, MCP3561_HAL_TIMEOUT);
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	2303      	movs	r3, #3
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f003 fcfc 	bl	800719a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MCP3561_CHIP_SELECT_GPIO_Port, MCP3561_CHIP_SELECT_GPIO_Pin, GPIO_PIN_SET);
 80037a2:	2201      	movs	r2, #1
 80037a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037a8:	4803      	ldr	r0, [pc, #12]	@ (80037b8 <_MCP3561_write+0x3c>)
 80037aa:	f001 fd39 	bl	8005220 <HAL_GPIO_WritePin>
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40020400 	.word	0x40020400

080037bc <MCP3561_Init>:

/**
 * @brief  Initializes the MCP356x chip according to user config
 * @note   must be edited by the user
 */
void MCP3561_Init(SPI_HandleTypeDef *hspi){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {0,0,0,0};
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]

	// be careful with the bitwise or operator "|"
	cmd[0]  = MCP3561_CONFIG0_WRITE;
 80037c8:	2346      	movs	r3, #70	@ 0x46
 80037ca:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG0_CLK_SEL_EXT;   // clock selection
 80037cc:	2300      	movs	r3, #0
 80037ce:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_ADC_MODE_CONV; // standby or converting
 80037d0:	7b7b      	ldrb	r3, [r7, #13]
 80037d2:	f043 0303 	orr.w	r3, r3, #3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG0_CS_SEL_NONE;   // input current
 80037da:	7b7b      	ldrb	r3, [r7, #13]
 80037dc:	737b      	strb	r3, [r7, #13]
	cmd[1] |= (1 << 7);                      // Enable extern VREF (VREF_SEL = 1)	/* added by user*/
 80037de:	7b7b      	ldrb	r3, [r7, #13]
 80037e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	2202      	movs	r2, #2
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ffc3 	bl	800377c <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG1_WRITE;
 80037f6:	234a      	movs	r3, #74	@ 0x4a
 80037f8:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG1_OSR_256;       // over sampling rate
 80037fa:	230c      	movs	r3, #12
 80037fc:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG1_AMCLK_DIV8;    // sampling clock prescaler
 80037fe:	7b7b      	ldrb	r3, [r7, #13]
 8003800:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8003804:	b2db      	uxtb	r3, r3
 8003806:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	2202      	movs	r2, #2
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ffb3 	bl	800377c <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG2_WRITE;
 8003816:	234e      	movs	r3, #78	@ 0x4e
 8003818:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG2_BOOST_x1;   // Boost
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_GAIN_x64;    // Gain
 800381e:	7b7b      	ldrb	r3, [r7, #13]
 8003820:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8003824:	b2db      	uxtb	r3, r3
 8003826:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG2_AZ_MUX_OFF; // offset cancellation algorithm
 8003828:	7b7b      	ldrb	r3, [r7, #13]
 800382a:	737b      	strb	r3, [r7, #13]
	cmd[1] += 3; // last two bytes must always be '11'
 800382c:	7b7b      	ldrb	r3, [r7, #13]
 800382e:	3303      	adds	r3, #3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	2202      	movs	r2, #2
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff9d 	bl	800377c <_MCP3561_write>

	cmd[0]  = MCP3561_CONFIG3_WRITE;
 8003842:	2352      	movs	r3, #82	@ 0x52
 8003844:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_CONFIG3_CONV_MODE_CONTINUOUS; // conversion mode
 8003846:	23c0      	movs	r3, #192	@ 0xc0
 8003848:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_DATA_FORMAT_32BIT_CHID_SGN; 	//
 800384a:	7b7b      	ldrb	r3, [r7, #13]
 800384c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003850:	b2db      	uxtb	r3, r3
 8003852:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_CRCCOM_OFF;            // CRC
 8003854:	7b7b      	ldrb	r3, [r7, #13]
 8003856:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_GAINCAL_OFF;          // gain calibration
 8003858:	7b7b      	ldrb	r3, [r7, #13]
 800385a:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_CONFIG3_OFFCAL_OFF;           // offset calibration
 800385c:	7b7b      	ldrb	r3, [r7, #13]
 800385e:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 8003860:	f107 030c 	add.w	r3, r7, #12
 8003864:	2202      	movs	r2, #2
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff87 	bl	800377c <_MCP3561_write>


	cmd[0]  = MCP3561_IRQ_WRITE;
 800386e:	2356      	movs	r3, #86	@ 0x56
 8003870:	733b      	strb	r3, [r7, #12]
	cmd[1]  = MCP3561_IRQ_MODE_IRQ_HIGH;  // IRQ default pin state
 8003872:	2304      	movs	r3, #4
 8003874:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_FASTCMD_ON;     // fast commands
 8003876:	7b7b      	ldrb	r3, [r7, #13]
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	b2db      	uxtb	r3, r3
 800387e:	737b      	strb	r3, [r7, #13]
	cmd[1] |= MCP3561_IRQ_STP_ON;         // start of conversion IRQ
 8003880:	7b7b      	ldrb	r3, [r7, #13]
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	737b      	strb	r3, [r7, #13]
	_MCP3561_write(hspi, cmd, 2);
 800388a:	f107 030c 	add.w	r3, r7, #12
 800388e:	2202      	movs	r2, #2
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff72 	bl	800377c <_MCP3561_write>

	cmd[0]  = MCP3561_MUX_WRITE;
 8003898:	235a      	movs	r3, #90	@ 0x5a
 800389a:	733b      	strb	r3, [r7, #12]
	//cmd[1]  = (MCP3561_MUX_CH0 << 4) | MCP3561_MUX_CH1;   // [7..4] VIN+ / [3..0] VIN-
	//cmd[1]  = (MCP3561_MUX_CH_AVDD << _MCP3561_MUX_VIN_P_POS) | (MCP3561_MUX_CH_AGND << _MCP3561_MUX_VIN_N_POS);
	_MCP3561_write(hspi, cmd, 2);
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	2202      	movs	r2, #2
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff69 	bl	800377c <_MCP3561_write>

	// configure SCAN mode to automatically cycle through channels
	// only available for MCP3562 and MCP356^4, and only for certain input combinations
	// @see Datasheet Table 5-14 on p. 54

	cmd[0] = MCP3561_SCAN_WRITE;
 80038aa:	235e      	movs	r3, #94	@ 0x5e
 80038ac:	733b      	strb	r3, [r7, #12]
	cmd[1] = MCP3561_SCAN_DLY_NONE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0F;  // MBS
 80038b2:	230f      	movs	r3, #15
 80038b4:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x00;	// LSB
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
	_MCP3561_write(hspi, cmd, 4);
 80038ba:	f107 030c 	add.w	r3, r7, #12
 80038be:	2204      	movs	r2, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ff5a 	bl	800377c <_MCP3561_write>

}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <MCP3561_Reset>:

/**
 * @brief resets the configuration to the default values
 * @todo  test this function
 */
void MCP3561_Reset(SPI_HandleTypeDef *hspi){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 80038d8:	2201      	movs	r2, #1
 80038da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038de:	4812      	ldr	r0, [pc, #72]	@ (8003928 <MCP3561_Reset+0x58>)
 80038e0:	f001 fc9e 	bl	8005220 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80038e4:	200a      	movs	r0, #10
 80038e6:	f000 fdc7 	bl	8004478 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038f0:	480d      	ldr	r0, [pc, #52]	@ (8003928 <MCP3561_Reset+0x58>)
 80038f2:	f001 fc95 	bl	8005220 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80038f6:	200a      	movs	r0, #10
 80038f8:	f000 fdbe 	bl	8004478 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 80038fc:	2201      	movs	r2, #1
 80038fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003902:	4809      	ldr	r0, [pc, #36]	@ (8003928 <MCP3561_Reset+0x58>)
 8003904:	f001 fc8c 	bl	8005220 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003908:	200a      	movs	r0, #10
 800390a:	f000 fdb5 	bl	8004478 <HAL_Delay>
	uint8_t cmd;
	cmd = DEVICE_RESET_COMMAND;
 800390e:	237a      	movs	r3, #122	@ 0x7a
 8003910:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &cmd, 1, 10);
 8003912:	f107 010f 	add.w	r1, r7, #15
 8003916:	230a      	movs	r3, #10
 8003918:	2201      	movs	r2, #1
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f003 fc3d 	bl	800719a <HAL_SPI_Transmit>
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40020400 	.word	0x40020400

0800392c <MCP3561_StartReadADCData_DMA>:
	//printf("ch: %d\t V: %.6f V\n", channel_id, adc_volt[channel_id]);

}

void MCP3561_StartReadADCData_DMA(SPI_HandleTypeDef *hspi)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
    // CS pin low
    HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800393a:	4806      	ldr	r0, [pc, #24]	@ (8003954 <MCP3561_StartReadADCData_DMA+0x28>)
 800393c:	f001 fc70 	bl	8005220 <HAL_GPIO_WritePin>
    // Start transmission
    HAL_SPI_TransmitReceive_DMA(hspi, mcp356x_tx_buf, mcp356x_rx_buf, MCP3561_DMA_RX_SIZE);
 8003940:	2306      	movs	r3, #6
 8003942:	4a05      	ldr	r2, [pc, #20]	@ (8003958 <MCP3561_StartReadADCData_DMA+0x2c>)
 8003944:	4905      	ldr	r1, [pc, #20]	@ (800395c <MCP3561_StartReadADCData_DMA+0x30>)
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f003 ff14 	bl	8007774 <HAL_SPI_TransmitReceive_DMA>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40020400 	.word	0x40020400
 8003958:	20000ac4 	.word	0x20000ac4
 800395c:	08012980 	.word	0x08012980

08003960 <MCP3561_ReadADCData_DMA>:
/**
 * @brief read 24 Bit left justified ADC register
 * @todo  how to read from other data formats?
 */
uint8_t MCP3561_ReadADCData_DMA(SPI_HandleTypeDef *hspi, float *adc_volt)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
	uint8_t *val = mcp356x_rx_buf;
 800396a:	4b33      	ldr	r3, [pc, #204]	@ (8003a38 <MCP3561_ReadADCData_DMA+0xd8>)
 800396c:	60fb      	str	r3, [r7, #12]

	//printf("%02X %02X %02X %02X %02X %02X\t\t", val[0], val[1], val[2], val[3], val[4], val[5]);	// Debug received data

	// Extract 24 bit raw data values
	uint8_t channel_id = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]
	uint32_t current_adc_raw_val = 0xFFFF;
 8003972:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003976:	613b      	str	r3, [r7, #16]
	if(val[0] != 0x13)			// Delay with the transmission
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b13      	cmp	r3, #19
 800397e:	d01e      	beq.n	80039be <MCP3561_ReadADCData_DMA+0x5e>
	{
		if((val[2] & 0x80) != 0)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3302      	adds	r3, #2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b25b      	sxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	da16      	bge.n	80039ba <MCP3561_ReadADCData_DMA+0x5a>
		{
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3303      	adds	r3, #3
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	041a      	lsls	r2, r3, #16
									((uint32_t)val[4] << 8)  |
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3304      	adds	r3, #4
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	021b      	lsls	r3, r3, #8
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 800399c:	4313      	orrs	r3, r2
									((uint32_t)val[5]);
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	3205      	adds	r2, #5
 80039a2:	7812      	ldrb	r2, [r2, #0]
			current_adc_raw_val = 	((uint32_t)val[3] << 16) |
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
			// Find corresponding channel
			channel_id = (val[2] & 0x30) >> 4; // Extract the ID
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3302      	adds	r3, #2
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	111b      	asrs	r3, r3, #4
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	75fb      	strb	r3, [r7, #23]
 80039b8:	e026      	b.n	8003a08 <MCP3561_ReadADCData_DMA+0xa8>
		}
		else
		{
			return 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e037      	b.n	8003a2e <MCP3561_ReadADCData_DMA+0xce>
		}
	}
	else if(val[0] == 0x13)		// if it's not 0x13 it is trush data
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b13      	cmp	r3, #19
 80039c4:	d11e      	bne.n	8003a04 <MCP3561_ReadADCData_DMA+0xa4>
	{
		if((val[1] & 0x80) != 0)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3301      	adds	r3, #1
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da16      	bge.n	8003a00 <MCP3561_ReadADCData_DMA+0xa0>
		{
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3302      	adds	r3, #2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	041a      	lsls	r2, r3, #16
									((uint32_t)val[3] << 8)  |
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3303      	adds	r3, #3
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	021b      	lsls	r3, r3, #8
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 80039e2:	4313      	orrs	r3, r2
									((uint32_t)val[4]);
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	3204      	adds	r2, #4
 80039e8:	7812      	ldrb	r2, [r2, #0]
			current_adc_raw_val = 	((uint32_t)val[2] << 16) |
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
			// Find corresponding channel
			channel_id = (val[1] & 0x30) >> 4; // Extract the ID
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3301      	adds	r3, #1
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	111b      	asrs	r3, r3, #4
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	75fb      	strb	r3, [r7, #23]
 80039fe:	e003      	b.n	8003a08 <MCP3561_ReadADCData_DMA+0xa8>
		}
		else
		{
			return 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e014      	b.n	8003a2e <MCP3561_ReadADCData_DMA+0xce>
		}
	}
	else
	{
		return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e012      	b.n	8003a2e <MCP3561_ReadADCData_DMA+0xce>
	}

	// Convert from row data to float
	adc_volt[channel_id] = convertAdcToVoltage(current_adc_raw_val);
 8003a08:	6938      	ldr	r0, [r7, #16]
 8003a0a:	f000 f819 	bl	8003a40 <convertAdcToVoltage>
 8003a0e:	ec51 0b10 	vmov	r0, r1, d0
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	18d4      	adds	r4, r2, r3
 8003a1a:	f7fd f8c5 	bl	8000ba8 <__aeabi_d2f>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6023      	str	r3, [r4, #0]

	// If it is the channel 1 it means that we did an entire conversion of every differential channel
	if(channel_id == 0)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <MCP3561_ReadADCData_DMA+0xcc>
		return 1;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <MCP3561_ReadADCData_DMA+0xce>
	else
		return 0;
 8003a2c:	2300      	movs	r3, #0

	printf("ch: %d\t V: %.6f V\n", channel_id, adc_volt[channel_id]);

}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000ac4 	.word	0x20000ac4
 8003a3c:	00000000 	.word	0x00000000

08003a40 <convertAdcToVoltage>:
}



// Function to convert a row value into float voltage
double convertAdcToVoltage(uint32_t raw_adc_value) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    int32_t signed_adc_value;

    // Convert the unsigned 24-bit value (from uint32_t) to a signed 24-bit value (in int32_t)
    // If bit 23 is set (MSB of a 24-bit number), it is negative.
    if ((raw_adc_value & 0x00800000) != 0) { 						// If bit 23 is 1, it is a negative number
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <convertAdcToVoltage+0x1c>
        signed_adc_value = (int32_t)(raw_adc_value | 0xFF000000); 	// Extend the sign for the upper bits (only for display in int32_t)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e001      	b.n	8003a60 <convertAdcToVoltage+0x20>
    } else {
        signed_adc_value = (int32_t)raw_adc_value;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	617b      	str	r3, [r7, #20]
    }

    double voltage = ((double)signed_adc_value * VREF_VOLTAGE_V) / (ADC_MAX_COUNT * ADC_GAIN);
 8003a60:	6978      	ldr	r0, [r7, #20]
 8003a62:	f7fc fd5f 	bl	8000524 <__aeabi_i2d>
 8003a66:	a30f      	add	r3, pc, #60	@ (adr r3, 8003aa4 <convertAdcToVoltage+0x64>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fdc4 	bl	80005f8 <__aeabi_dmul>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <convertAdcToVoltage+0x60>)
 8003a7e:	f7fc fee5 	bl	800084c <__aeabi_ddiv>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return voltage;
 8003a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a92:	eeb0 0a47 	vmov.f32	s0, s14
 8003a96:	eef0 0a67 	vmov.f32	s1, s15
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	41600000 	.word	0x41600000
 8003aa4:	66666666 	.word	0x66666666
 8003aa8:	400a6666 	.word	0x400a6666

08003aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
 8003ab6:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	4a0f      	ldr	r2, [pc, #60]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800

08003afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	@ 0x30
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b04:	f107 031c 	add.w	r3, r7, #28
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a98      	ldr	r2, [pc, #608]	@ (8003d7c <HAL_SPI_MspInit+0x280>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	f040 8093 	bne.w	8003c46 <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	4b96      	ldr	r3, [pc, #600]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b28:	4a95      	ldr	r2, [pc, #596]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003b2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b30:	4b93      	ldr	r3, [pc, #588]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	4b8f      	ldr	r3, [pc, #572]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	4a8e      	ldr	r2, [pc, #568]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b58:	23e0      	movs	r3, #224	@ 0xe0
 8003b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b64:	2303      	movs	r3, #3
 8003b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b68:	2305      	movs	r3, #5
 8003b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	4884      	ldr	r0, [pc, #528]	@ (8003d84 <HAL_SPI_MspInit+0x288>)
 8003b74:	f001 f9b8 	bl	8004ee8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003b78:	4b83      	ldr	r3, [pc, #524]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003b7a:	4a84      	ldr	r2, [pc, #528]	@ (8003d8c <HAL_SPI_MspInit+0x290>)
 8003b7c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003b7e:	4b82      	ldr	r3, [pc, #520]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003b80:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003b84:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b86:	4b80      	ldr	r3, [pc, #512]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b92:	4b7d      	ldr	r3, [pc, #500]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003b94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b98:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ba0:	4b79      	ldr	r3, [pc, #484]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003ba6:	4b78      	ldr	r3, [pc, #480]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003bac:	4b76      	ldr	r3, [pc, #472]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003bae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003bb2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bb4:	4b74      	ldr	r3, [pc, #464]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003bba:	4873      	ldr	r0, [pc, #460]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003bbc:	f000 fd92 	bl	80046e4 <HAL_DMA_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8003bc6:	f7ff fdbb 	bl	8003740 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003bce:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003bd0:	4a6d      	ldr	r2, [pc, #436]	@ (8003d88 <HAL_SPI_MspInit+0x28c>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003bd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003d94 <HAL_SPI_MspInit+0x298>)
 8003bda:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003bde:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003be2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003be4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003be6:	2240      	movs	r2, #64	@ 0x40
 8003be8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bea:	4b69      	ldr	r3, [pc, #420]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bf0:	4b67      	ldr	r3, [pc, #412]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bf6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bf8:	4b65      	ldr	r3, [pc, #404]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bfe:	4b64      	ldr	r3, [pc, #400]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003c04:	4b62      	ldr	r3, [pc, #392]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003c0a:	4b61      	ldr	r3, [pc, #388]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003c0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c10:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c12:	4b5f      	ldr	r3, [pc, #380]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003c18:	485d      	ldr	r0, [pc, #372]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003c1a:	f000 fd63 	bl	80046e4 <HAL_DMA_Init>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003c24:	f7ff fd8c 	bl	8003740 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a59      	ldr	r2, [pc, #356]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003c2c:	649a      	str	r2, [r3, #72]	@ 0x48
 8003c2e:	4a58      	ldr	r2, [pc, #352]	@ (8003d90 <HAL_SPI_MspInit+0x294>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003c34:	2200      	movs	r2, #0
 8003c36:	2100      	movs	r1, #0
 8003c38:	2023      	movs	r0, #35	@ 0x23
 8003c3a:	f000 fd1c 	bl	8004676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003c3e:	2023      	movs	r0, #35	@ 0x23
 8003c40:	f000 fd35 	bl	80046ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c44:	e096      	b.n	8003d74 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a53      	ldr	r2, [pc, #332]	@ (8003d98 <HAL_SPI_MspInit+0x29c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	f040 8091 	bne.w	8003d74 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	4b4a      	ldr	r3, [pc, #296]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	4a49      	ldr	r2, [pc, #292]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c62:	4b47      	ldr	r3, [pc, #284]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	4b43      	ldr	r3, [pc, #268]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	4a42      	ldr	r2, [pc, #264]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7e:	4b40      	ldr	r3, [pc, #256]	@ (8003d80 <HAL_SPI_MspInit+0x284>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003c8a:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8003c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c9c:	2305      	movs	r3, #5
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	483d      	ldr	r0, [pc, #244]	@ (8003d9c <HAL_SPI_MspInit+0x2a0>)
 8003ca8:	f001 f91e 	bl	8004ee8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003cac:	4b3c      	ldr	r3, [pc, #240]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cae:	4a3d      	ldr	r2, [pc, #244]	@ (8003da4 <HAL_SPI_MspInit+0x2a8>)
 8003cb0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cb8:	4b39      	ldr	r3, [pc, #228]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cbe:	4b38      	ldr	r3, [pc, #224]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cc4:	4b36      	ldr	r3, [pc, #216]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cca:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ccc:	4b34      	ldr	r3, [pc, #208]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cd2:	4b33      	ldr	r3, [pc, #204]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003cd8:	4b31      	ldr	r3, [pc, #196]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cde:	4b30      	ldr	r3, [pc, #192]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003ce0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ce4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003cec:	482c      	ldr	r0, [pc, #176]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003cee:	f000 fcf9 	bl	80046e4 <HAL_DMA_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_SPI_MspInit+0x200>
      Error_Handler();
 8003cf8:	f7ff fd22 	bl	8003740 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003d00:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003d02:	4a27      	ldr	r2, [pc, #156]	@ (8003da0 <HAL_SPI_MspInit+0x2a4>)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003d08:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d0a:	4a28      	ldr	r2, [pc, #160]	@ (8003dac <HAL_SPI_MspInit+0x2b0>)
 8003d0c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003d0e:	4b26      	ldr	r3, [pc, #152]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d14:	4b24      	ldr	r3, [pc, #144]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d16:	2240      	movs	r2, #64	@ 0x40
 8003d18:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1a:	4b23      	ldr	r3, [pc, #140]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d20:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d26:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d28:	4b1f      	ldr	r3, [pc, #124]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003d34:	4b1c      	ldr	r3, [pc, #112]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d3c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003d40:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d42:	4b19      	ldr	r3, [pc, #100]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003d48:	4817      	ldr	r0, [pc, #92]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d4a:	f000 fccb 	bl	80046e4 <HAL_DMA_Init>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_SPI_MspInit+0x25c>
      Error_Handler();
 8003d54:	f7ff fcf4 	bl	8003740 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a13      	ldr	r2, [pc, #76]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d5c:	649a      	str	r2, [r3, #72]	@ 0x48
 8003d5e:	4a12      	ldr	r2, [pc, #72]	@ (8003da8 <HAL_SPI_MspInit+0x2ac>)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003d64:	2200      	movs	r2, #0
 8003d66:	2100      	movs	r1, #0
 8003d68:	2024      	movs	r0, #36	@ 0x24
 8003d6a:	f000 fc84 	bl	8004676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003d6e:	2024      	movs	r0, #36	@ 0x24
 8003d70:	f000 fc9d 	bl	80046ae <HAL_NVIC_EnableIRQ>
}
 8003d74:	bf00      	nop
 8003d76:	3730      	adds	r7, #48	@ 0x30
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40013000 	.word	0x40013000
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40020000 	.word	0x40020000
 8003d88:	200003e0 	.word	0x200003e0
 8003d8c:	40026410 	.word	0x40026410
 8003d90:	20000440 	.word	0x20000440
 8003d94:	40026458 	.word	0x40026458
 8003d98:	40003800 	.word	0x40003800
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	200004a0 	.word	0x200004a0
 8003da4:	40026058 	.word	0x40026058
 8003da8:	20000500 	.word	0x20000500
 8003dac:	40026070 	.word	0x40026070

08003db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc0:	d116      	bne.n	8003df0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	4b32      	ldr	r3, [pc, #200]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	4a31      	ldr	r2, [pc, #196]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003dde:	2200      	movs	r2, #0
 8003de0:	2100      	movs	r1, #0
 8003de2:	201c      	movs	r0, #28
 8003de4:	f000 fc47 	bl	8004676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003de8:	201c      	movs	r0, #28
 8003dea:	f000 fc60 	bl	80046ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003dee:	e04a      	b.n	8003e86 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a27      	ldr	r2, [pc, #156]	@ (8003e94 <HAL_TIM_Base_MspInit+0xe4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d116      	bne.n	8003e28 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	4a23      	ldr	r2, [pc, #140]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e0a:	4b21      	ldr	r3, [pc, #132]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e16:	2200      	movs	r2, #0
 8003e18:	2100      	movs	r1, #0
 8003e1a:	201d      	movs	r0, #29
 8003e1c:	f000 fc2b 	bl	8004676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e20:	201d      	movs	r0, #29
 8003e22:	f000 fc44 	bl	80046ae <HAL_NVIC_EnableIRQ>
}
 8003e26:	e02e      	b.n	8003e86 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e98 <HAL_TIM_Base_MspInit+0xe8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d116      	bne.n	8003e60 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e3c:	f043 0304 	orr.w	r3, r3, #4
 8003e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e42:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2100      	movs	r1, #0
 8003e52:	201e      	movs	r0, #30
 8003e54:	f000 fc0f 	bl	8004676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e58:	201e      	movs	r0, #30
 8003e5a:	f000 fc28 	bl	80046ae <HAL_NVIC_EnableIRQ>
}
 8003e5e:	e012      	b.n	8003e86 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0d      	ldr	r2, [pc, #52]	@ (8003e9c <HAL_TIM_Base_MspInit+0xec>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10d      	bne.n	8003e86 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	4a07      	ldr	r2, [pc, #28]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e7a:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_TIM_Base_MspInit+0xe0>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40014000 	.word	0x40014000

08003ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a12      	ldr	r2, [pc, #72]	@ (8003f08 <HAL_TIM_MspPostInit+0x68>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d11d      	bne.n	8003efe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_TIM_MspPostInit+0x6c>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	4a10      	ldr	r2, [pc, #64]	@ (8003f0c <HAL_TIM_MspPostInit+0x6c>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f0c <HAL_TIM_MspPostInit+0x6c>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ede:	2304      	movs	r3, #4
 8003ee0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef2:	f107 030c 	add.w	r3, r7, #12
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4805      	ldr	r0, [pc, #20]	@ (8003f10 <HAL_TIM_MspPostInit+0x70>)
 8003efa:	f000 fff5 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003efe:	bf00      	nop
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40020000 	.word	0x40020000

08003f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	@ 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 0314 	add.w	r3, r7, #20
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a34      	ldr	r2, [pc, #208]	@ (8004004 <HAL_UART_MspInit+0xf0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d162      	bne.n	8003ffc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	4b33      	ldr	r3, [pc, #204]	@ (8004008 <HAL_UART_MspInit+0xf4>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	4a32      	ldr	r2, [pc, #200]	@ (8004008 <HAL_UART_MspInit+0xf4>)
 8003f40:	f043 0310 	orr.w	r3, r3, #16
 8003f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f46:	4b30      	ldr	r3, [pc, #192]	@ (8004008 <HAL_UART_MspInit+0xf4>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	4b2c      	ldr	r3, [pc, #176]	@ (8004008 <HAL_UART_MspInit+0xf4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004008 <HAL_UART_MspInit+0xf4>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f62:	4b29      	ldr	r3, [pc, #164]	@ (8004008 <HAL_UART_MspInit+0xf4>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f80:	2307      	movs	r3, #7
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4820      	ldr	r0, [pc, #128]	@ (800400c <HAL_UART_MspInit+0xf8>)
 8003f8c:	f000 ffac 	bl	8004ee8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003f90:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003f92:	4a20      	ldr	r2, [pc, #128]	@ (8004014 <HAL_UART_MspInit+0x100>)
 8003f94:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003f96:	4b1e      	ldr	r3, [pc, #120]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003f98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fa0:	2240      	movs	r2, #64	@ 0x40
 8003fa2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003faa:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fb2:	4b17      	ldr	r3, [pc, #92]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fb8:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003fbe:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fca:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003fd0:	480f      	ldr	r0, [pc, #60]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fd2:	f000 fb87 	bl	80046e4 <HAL_DMA_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003fdc:	f7ff fbb0 	bl	8003740 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fe4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8004010 <HAL_UART_MspInit+0xfc>)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fec:	2200      	movs	r2, #0
 8003fee:	2100      	movs	r1, #0
 8003ff0:	2025      	movs	r0, #37	@ 0x25
 8003ff2:	f000 fb40 	bl	8004676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ff6:	2025      	movs	r0, #37	@ 0x25
 8003ff8:	f000 fb59 	bl	80046ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003ffc:	bf00      	nop
 8003ffe:	3728      	adds	r7, #40	@ 0x28
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40011000 	.word	0x40011000
 8004008:	40023800 	.word	0x40023800
 800400c:	40020000 	.word	0x40020000
 8004010:	200006c8 	.word	0x200006c8
 8004014:	400264b8 	.word	0x400264b8

08004018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800401c:	bf00      	nop
 800401e:	e7fd      	b.n	800401c <NMI_Handler+0x4>

08004020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <HardFault_Handler+0x4>

08004028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <MemManage_Handler+0x4>

08004030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <BusFault_Handler+0x4>

08004038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <UsageFault_Handler+0x4>

08004040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800406e:	f000 f9e3 	bl	8004438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}

08004076 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP3564_IRQ_Pin);
 800407a:	2001      	movs	r0, #1
 800407c:	f001 f904 	bl	8005288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004080:	bf00      	nop
 8004082:	bd80      	pop	{r7, pc}

08004084 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8004088:	2004      	movs	r0, #4
 800408a:	f001 f8fd 	bl	8005288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}

08004092 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8004096:	2008      	movs	r0, #8
 8004098:	f001 f8f6 	bl	8005288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}

080040a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80040a4:	4802      	ldr	r0, [pc, #8]	@ (80040b0 <DMA1_Stream3_IRQHandler+0x10>)
 80040a6:	f000 fcb5 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200004a0 	.word	0x200004a0

080040b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80040b8:	4802      	ldr	r0, [pc, #8]	@ (80040c4 <DMA1_Stream4_IRQHandler+0x10>)
 80040ba:	f000 fcab 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000500 	.word	0x20000500

080040c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040cc:	4802      	ldr	r0, [pc, #8]	@ (80040d8 <TIM2_IRQHandler+0x10>)
 80040ce:	f004 f9ef 	bl	80084b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000560 	.word	0x20000560

080040dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80040e0:	4802      	ldr	r0, [pc, #8]	@ (80040ec <TIM3_IRQHandler+0x10>)
 80040e2:	f004 f9e5 	bl	80084b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200005a8 	.word	0x200005a8

080040f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80040f4:	4802      	ldr	r0, [pc, #8]	@ (8004100 <TIM4_IRQHandler+0x10>)
 80040f6:	f004 f9db 	bl	80084b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200005f0 	.word	0x200005f0

08004104 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004108:	4802      	ldr	r0, [pc, #8]	@ (8004114 <SPI1_IRQHandler+0x10>)
 800410a:	f003 fc2f 	bl	800796c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000330 	.word	0x20000330

08004118 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800411c:	4802      	ldr	r0, [pc, #8]	@ (8004128 <SPI2_IRQHandler+0x10>)
 800411e:	f003 fc25 	bl	800796c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000388 	.word	0x20000388

0800412c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004130:	4802      	ldr	r0, [pc, #8]	@ (800413c <USART1_IRQHandler+0x10>)
 8004132:	f005 f88b 	bl	800924c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000680 	.word	0x20000680

08004140 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004144:	4802      	ldr	r0, [pc, #8]	@ (8004150 <DMA2_Stream0_IRQHandler+0x10>)
 8004146:	f000 fc65 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200003e0 	.word	0x200003e0

08004154 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004158:	4802      	ldr	r0, [pc, #8]	@ (8004164 <DMA2_Stream3_IRQHandler+0x10>)
 800415a:	f000 fc5b 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000440 	.word	0x20000440

08004168 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800416c:	4802      	ldr	r0, [pc, #8]	@ (8004178 <OTG_FS_IRQHandler+0x10>)
 800416e:	f001 f9e7 	bl	8005540 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20001fb4 	.word	0x20001fb4

0800417c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004180:	4802      	ldr	r0, [pc, #8]	@ (800418c <DMA2_Stream7_IRQHandler+0x10>)
 8004182:	f000 fc47 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200006c8 	.word	0x200006c8

08004190 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return 1;
 8004194:	2301      	movs	r3, #1
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <_kill>:

int _kill(int pid, int sig)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041aa:	f00a feb1 	bl	800ef10 <__errno>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2216      	movs	r2, #22
 80041b2:	601a      	str	r2, [r3, #0]
  return -1;
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <_exit>:

void _exit (int status)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041c8:	f04f 31ff 	mov.w	r1, #4294967295
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ffe7 	bl	80041a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <_exit+0x12>

080041d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e00a      	b.n	80041fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041e8:	f3af 8000 	nop.w
 80041ec:	4601      	mov	r1, r0
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	60ba      	str	r2, [r7, #8]
 80041f4:	b2ca      	uxtb	r2, r1
 80041f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3301      	adds	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	dbf0      	blt.n	80041e8 <_read+0x12>
  }

  return len;
 8004206:	687b      	ldr	r3, [r7, #4]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e009      	b.n	8004236 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	60ba      	str	r2, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fa42 	bl	80036b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3301      	adds	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	dbf1      	blt.n	8004222 <_write+0x12>
  }
  return len;
 800423e:	687b      	ldr	r3, [r7, #4]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <_close>:

int _close(int file)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004270:	605a      	str	r2, [r3, #4]
  return 0;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <_isatty>:

int _isatty(int file)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004288:	2301      	movs	r3, #1
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042b8:	4a14      	ldr	r2, [pc, #80]	@ (800430c <_sbrk+0x5c>)
 80042ba:	4b15      	ldr	r3, [pc, #84]	@ (8004310 <_sbrk+0x60>)
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042c4:	4b13      	ldr	r3, [pc, #76]	@ (8004314 <_sbrk+0x64>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042cc:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <_sbrk+0x64>)
 80042ce:	4a12      	ldr	r2, [pc, #72]	@ (8004318 <_sbrk+0x68>)
 80042d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042d2:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <_sbrk+0x64>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4413      	add	r3, r2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d207      	bcs.n	80042f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042e0:	f00a fe16 	bl	800ef10 <__errno>
 80042e4:	4603      	mov	r3, r0
 80042e6:	220c      	movs	r2, #12
 80042e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ea:	f04f 33ff 	mov.w	r3, #4294967295
 80042ee:	e009      	b.n	8004304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042f0:	4b08      	ldr	r3, [pc, #32]	@ (8004314 <_sbrk+0x64>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042f6:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <_sbrk+0x64>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	4a05      	ldr	r2, [pc, #20]	@ (8004314 <_sbrk+0x64>)
 8004300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20020000 	.word	0x20020000
 8004310:	00000400 	.word	0x00000400
 8004314:	20000acc 	.word	0x20000acc
 8004318:	20002808 	.word	0x20002808

0800431c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004320:	4b06      	ldr	r3, [pc, #24]	@ (800433c <SystemInit+0x20>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	4a05      	ldr	r2, [pc, #20]	@ (800433c <SystemInit+0x20>)
 8004328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800432c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004340:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004378 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004344:	f7ff ffea 	bl	800431c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004348:	480c      	ldr	r0, [pc, #48]	@ (800437c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800434a:	490d      	ldr	r1, [pc, #52]	@ (8004380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800434c:	4a0d      	ldr	r2, [pc, #52]	@ (8004384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004350:	e002      	b.n	8004358 <LoopCopyDataInit>

08004352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004356:	3304      	adds	r3, #4

08004358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800435a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800435c:	d3f9      	bcc.n	8004352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800435e:	4a0a      	ldr	r2, [pc, #40]	@ (8004388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004360:	4c0a      	ldr	r4, [pc, #40]	@ (800438c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004364:	e001      	b.n	800436a <LoopFillZerobss>

08004366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004368:	3204      	adds	r2, #4

0800436a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800436a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800436c:	d3fb      	bcc.n	8004366 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800436e:	f00a fdd5 	bl	800ef1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004372:	f7fe fd3b 	bl	8002dec <main>
  bx  lr    
 8004376:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800437c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004380:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8004384:	08013180 	.word	0x08013180
  ldr r2, =_sbss
 8004388:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 800438c:	20002804 	.word	0x20002804

08004390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004390:	e7fe      	b.n	8004390 <ADC_IRQHandler>
	...

08004394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004398:	4b0e      	ldr	r3, [pc, #56]	@ (80043d4 <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0d      	ldr	r2, [pc, #52]	@ (80043d4 <HAL_Init+0x40>)
 800439e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_Init+0x40>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0a      	ldr	r2, [pc, #40]	@ (80043d4 <HAL_Init+0x40>)
 80043aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043b0:	4b08      	ldr	r3, [pc, #32]	@ (80043d4 <HAL_Init+0x40>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a07      	ldr	r2, [pc, #28]	@ (80043d4 <HAL_Init+0x40>)
 80043b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043bc:	2003      	movs	r0, #3
 80043be:	f000 f94f 	bl	8004660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043c2:	200f      	movs	r0, #15
 80043c4:	f000 f808 	bl	80043d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043c8:	f7ff fb70 	bl	8003aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023c00 	.word	0x40023c00

080043d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043e0:	4b12      	ldr	r3, [pc, #72]	@ (800442c <HAL_InitTick+0x54>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <HAL_InitTick+0x58>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	4619      	mov	r1, r3
 80043ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f967 	bl	80046ca <HAL_SYSTICK_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e00e      	b.n	8004424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b0f      	cmp	r3, #15
 800440a:	d80a      	bhi.n	8004422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800440c:	2200      	movs	r2, #0
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	f000 f92f 	bl	8004676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004418:	4a06      	ldr	r2, [pc, #24]	@ (8004434 <HAL_InitTick+0x5c>)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000030 	.word	0x20000030
 8004430:	20000038 	.word	0x20000038
 8004434:	20000034 	.word	0x20000034

08004438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800443c:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <HAL_IncTick+0x20>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_IncTick+0x24>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4413      	add	r3, r2
 8004448:	4a04      	ldr	r2, [pc, #16]	@ (800445c <HAL_IncTick+0x24>)
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000038 	.word	0x20000038
 800445c:	20000ad0 	.word	0x20000ad0

08004460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return uwTick;
 8004464:	4b03      	ldr	r3, [pc, #12]	@ (8004474 <HAL_GetTick+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000ad0 	.word	0x20000ad0

08004478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004480:	f7ff ffee 	bl	8004460 <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d005      	beq.n	800449e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_Delay+0x44>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800449e:	bf00      	nop
 80044a0:	f7ff ffde 	bl	8004460 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d8f7      	bhi.n	80044a0 <HAL_Delay+0x28>
  {
  }
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000038 	.word	0x20000038

080044c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <__NVIC_SetPriorityGrouping+0x44>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044dc:	4013      	ands	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f2:	4a04      	ldr	r2, [pc, #16]	@ (8004504 <__NVIC_SetPriorityGrouping+0x44>)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	60d3      	str	r3, [r2, #12]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800450c:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <__NVIC_GetPriorityGrouping+0x18>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	f003 0307 	and.w	r3, r3, #7
}
 8004516:	4618      	mov	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	2b00      	cmp	r3, #0
 8004534:	db0b      	blt.n	800454e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	f003 021f 	and.w	r2, r3, #31
 800453c:	4907      	ldr	r1, [pc, #28]	@ (800455c <__NVIC_EnableIRQ+0x38>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2001      	movs	r0, #1
 8004546:	fa00 f202 	lsl.w	r2, r0, r2
 800454a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000e100 	.word	0xe000e100

08004560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	db0a      	blt.n	800458a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	b2da      	uxtb	r2, r3
 8004578:	490c      	ldr	r1, [pc, #48]	@ (80045ac <__NVIC_SetPriority+0x4c>)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	0112      	lsls	r2, r2, #4
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	440b      	add	r3, r1
 8004584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004588:	e00a      	b.n	80045a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	4908      	ldr	r1, [pc, #32]	@ (80045b0 <__NVIC_SetPriority+0x50>)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	3b04      	subs	r3, #4
 8004598:	0112      	lsls	r2, r2, #4
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	440b      	add	r3, r1
 800459e:	761a      	strb	r2, [r3, #24]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000e100 	.word	0xe000e100
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b089      	sub	sp, #36	@ 0x24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f1c3 0307 	rsb	r3, r3, #7
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	bf28      	it	cs
 80045d2:	2304      	movcs	r3, #4
 80045d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3304      	adds	r3, #4
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d902      	bls.n	80045e4 <NVIC_EncodePriority+0x30>
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3b03      	subs	r3, #3
 80045e2:	e000      	b.n	80045e6 <NVIC_EncodePriority+0x32>
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43da      	mvns	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	401a      	ands	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	43d9      	mvns	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800460c:	4313      	orrs	r3, r2
         );
}
 800460e:	4618      	mov	r0, r3
 8004610:	3724      	adds	r7, #36	@ 0x24
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3b01      	subs	r3, #1
 8004628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800462c:	d301      	bcc.n	8004632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800462e:	2301      	movs	r3, #1
 8004630:	e00f      	b.n	8004652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004632:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <SysTick_Config+0x40>)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3b01      	subs	r3, #1
 8004638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800463a:	210f      	movs	r1, #15
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	f7ff ff8e 	bl	8004560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004644:	4b05      	ldr	r3, [pc, #20]	@ (800465c <SysTick_Config+0x40>)
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800464a:	4b04      	ldr	r3, [pc, #16]	@ (800465c <SysTick_Config+0x40>)
 800464c:	2207      	movs	r2, #7
 800464e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	e000e010 	.word	0xe000e010

08004660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff ff29 	bl	80044c0 <__NVIC_SetPriorityGrouping>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	4603      	mov	r3, r0
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004688:	f7ff ff3e 	bl	8004508 <__NVIC_GetPriorityGrouping>
 800468c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7ff ff8e 	bl	80045b4 <NVIC_EncodePriority>
 8004698:	4602      	mov	r2, r0
 800469a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff5d 	bl	8004560 <__NVIC_SetPriority>
}
 80046a6:	bf00      	nop
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	4603      	mov	r3, r0
 80046b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff31 	bl	8004524 <__NVIC_EnableIRQ>
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ffa2 	bl	800461c <SysTick_Config>
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046f0:	f7ff feb6 	bl	8004460 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e099      	b.n	8004834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004720:	e00f      	b.n	8004742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004722:	f7ff fe9d 	bl	8004460 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b05      	cmp	r3, #5
 800472e:	d908      	bls.n	8004742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2203      	movs	r2, #3
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e078      	b.n	8004834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e8      	bne.n	8004722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4b38      	ldr	r3, [pc, #224]	@ (800483c <HAL_DMA_Init+0x158>)
 800475c:	4013      	ands	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	2b04      	cmp	r3, #4
 800479a:	d107      	bne.n	80047ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a4:	4313      	orrs	r3, r2
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0307 	bic.w	r3, r3, #7
 80047c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d117      	bne.n	8004806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00e      	beq.n	8004806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fb01 	bl	8004df0 <DMA_CheckFifoParam>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2240      	movs	r2, #64	@ 0x40
 80047f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004802:	2301      	movs	r3, #1
 8004804:	e016      	b.n	8004834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fab8 	bl	8004d84 <DMA_CalcBaseAndBitshift>
 8004814:	4603      	mov	r3, r0
 8004816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481c:	223f      	movs	r2, #63	@ 0x3f
 800481e:	409a      	lsls	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	f010803f 	.word	0xf010803f

08004840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004856:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_DMA_Start_IT+0x26>
 8004862:	2302      	movs	r3, #2
 8004864:	e040      	b.n	80048e8 <HAL_DMA_Start_IT+0xa8>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d12f      	bne.n	80048da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fa4a 	bl	8004d28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004898:	223f      	movs	r2, #63	@ 0x3f
 800489a:	409a      	lsls	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0216 	orr.w	r2, r2, #22
 80048ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0208 	orr.w	r2, r2, #8
 80048c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e005      	b.n	80048e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
 80048e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048fe:	f7ff fdaf 	bl	8004460 <HAL_GetTick>
 8004902:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d008      	beq.n	8004922 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2280      	movs	r2, #128	@ 0x80
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e052      	b.n	80049c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0216 	bic.w	r2, r2, #22
 8004930:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004940:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d103      	bne.n	8004952 <HAL_DMA_Abort+0x62>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0208 	bic.w	r2, r2, #8
 8004960:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004972:	e013      	b.n	800499c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004974:	f7ff fd74 	bl	8004460 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b05      	cmp	r3, #5
 8004980:	d90c      	bls.n	800499c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2203      	movs	r2, #3
 800498c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e015      	b.n	80049c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e4      	bne.n	8004974 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ae:	223f      	movs	r2, #63	@ 0x3f
 80049b0:	409a      	lsls	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d004      	beq.n	80049ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2280      	movs	r2, #128	@ 0x80
 80049e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e00c      	b.n	8004a08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2205      	movs	r2, #5
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a20:	4b8e      	ldr	r3, [pc, #568]	@ (8004c5c <HAL_DMA_IRQHandler+0x248>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a8e      	ldr	r2, [pc, #568]	@ (8004c60 <HAL_DMA_IRQHandler+0x24c>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	0a9b      	lsrs	r3, r3, #10
 8004a2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3e:	2208      	movs	r2, #8
 8004a40:	409a      	lsls	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01a      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d013      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a78:	f043 0201 	orr.w	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a84:	2201      	movs	r2, #1
 8004a86:	409a      	lsls	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d012      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aae:	f043 0202 	orr.w	r2, r3, #2
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	2204      	movs	r2, #4
 8004abc:	409a      	lsls	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d012      	beq.n	8004aec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00b      	beq.n	8004aec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad8:	2204      	movs	r2, #4
 8004ada:	409a      	lsls	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae4:	f043 0204 	orr.w	r2, r3, #4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	2210      	movs	r2, #16
 8004af2:	409a      	lsls	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d043      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d03c      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0e:	2210      	movs	r2, #16
 8004b10:	409a      	lsls	r2, r3
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d018      	beq.n	8004b56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d024      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
 8004b42:	e01f      	b.n	8004b84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
 8004b54:	e016      	b.n	8004b84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d107      	bne.n	8004b74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0208 	bic.w	r2, r2, #8
 8004b72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b88:	2220      	movs	r2, #32
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 808f 	beq.w	8004cb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8087 	beq.w	8004cb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004baa:	2220      	movs	r2, #32
 8004bac:	409a      	lsls	r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d136      	bne.n	8004c2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0216 	bic.w	r2, r2, #22
 8004bcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_DMA_IRQHandler+0x1da>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0208 	bic.w	r2, r2, #8
 8004bfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c02:	223f      	movs	r2, #63	@ 0x3f
 8004c04:	409a      	lsls	r2, r3
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d07e      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
        }
        return;
 8004c2a:	e079      	b.n	8004d20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01d      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10d      	bne.n	8004c64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d031      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
 8004c58:	e02c      	b.n	8004cb4 <HAL_DMA_IRQHandler+0x2a0>
 8004c5a:	bf00      	nop
 8004c5c:	20000030 	.word	0x20000030
 8004c60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d023      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
 8004c74:	e01e      	b.n	8004cb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10f      	bne.n	8004ca4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0210 	bic.w	r2, r2, #16
 8004c92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d032      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d022      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2205      	movs	r2, #5
 8004ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d307      	bcc.n	8004cfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f2      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x2cc>
 8004cfa:	e000      	b.n	8004cfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004cfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
 8004d1e:	e000      	b.n	8004d22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d20:	bf00      	nop
    }
  }
}
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b40      	cmp	r3, #64	@ 0x40
 8004d54:	d108      	bne.n	8004d68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d66:	e007      	b.n	8004d78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	3b10      	subs	r3, #16
 8004d94:	4a14      	ldr	r2, [pc, #80]	@ (8004de8 <DMA_CalcBaseAndBitshift+0x64>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d9e:	4a13      	ldr	r2, [pc, #76]	@ (8004dec <DMA_CalcBaseAndBitshift+0x68>)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d909      	bls.n	8004dc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	1d1a      	adds	r2, r3, #4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004dc4:	e007      	b.n	8004dd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	aaaaaaab 	.word	0xaaaaaaab
 8004dec:	080129a0 	.word	0x080129a0

08004df0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d11f      	bne.n	8004e4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d856      	bhi.n	8004ebe <DMA_CheckFifoParam+0xce>
 8004e10:	a201      	add	r2, pc, #4	@ (adr r2, 8004e18 <DMA_CheckFifoParam+0x28>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e3b 	.word	0x08004e3b
 8004e20:	08004e29 	.word	0x08004e29
 8004e24:	08004ebf 	.word	0x08004ebf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d046      	beq.n	8004ec2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e38:	e043      	b.n	8004ec2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e42:	d140      	bne.n	8004ec6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e48:	e03d      	b.n	8004ec6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e52:	d121      	bne.n	8004e98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d837      	bhi.n	8004eca <DMA_CheckFifoParam+0xda>
 8004e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <DMA_CheckFifoParam+0x70>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e77 	.word	0x08004e77
 8004e68:	08004e71 	.word	0x08004e71
 8004e6c:	08004e89 	.word	0x08004e89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	e030      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d025      	beq.n	8004ece <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e86:	e022      	b.n	8004ece <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e90:	d11f      	bne.n	8004ed2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e96:	e01c      	b.n	8004ed2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d903      	bls.n	8004ea6 <DMA_CheckFifoParam+0xb6>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d003      	beq.n	8004eac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ea4:	e018      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eaa:	e015      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00e      	beq.n	8004ed6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
      break;
 8004ebc:	e00b      	b.n	8004ed6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ebe:	bf00      	nop
 8004ec0:	e00a      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e008      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e006      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e004      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ece:	bf00      	nop
 8004ed0:	e002      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ed2:	bf00      	nop
 8004ed4:	e000      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ed6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop

08004ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b089      	sub	sp, #36	@ 0x24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	e16b      	b.n	80051dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f04:	2201      	movs	r2, #1
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4013      	ands	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	f040 815a 	bne.w	80051d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d005      	beq.n	8004f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d130      	bne.n	8004f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	2203      	movs	r2, #3
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f70:	2201      	movs	r2, #1
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 0201 	and.w	r2, r3, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d017      	beq.n	8004fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d123      	bne.n	800502c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	08da      	lsrs	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3208      	adds	r2, #8
 8004fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	220f      	movs	r2, #15
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	08da      	lsrs	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3208      	adds	r2, #8
 8005026:	69b9      	ldr	r1, [r7, #24]
 8005028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	2203      	movs	r2, #3
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 0203 	and.w	r2, r3, #3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80b4 	beq.w	80051d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	4b60      	ldr	r3, [pc, #384]	@ (80051f4 <HAL_GPIO_Init+0x30c>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	4a5f      	ldr	r2, [pc, #380]	@ (80051f4 <HAL_GPIO_Init+0x30c>)
 8005078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800507c:	6453      	str	r3, [r2, #68]	@ 0x44
 800507e:	4b5d      	ldr	r3, [pc, #372]	@ (80051f4 <HAL_GPIO_Init+0x30c>)
 8005080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800508a:	4a5b      	ldr	r2, [pc, #364]	@ (80051f8 <HAL_GPIO_Init+0x310>)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	089b      	lsrs	r3, r3, #2
 8005090:	3302      	adds	r3, #2
 8005092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	220f      	movs	r2, #15
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a52      	ldr	r2, [pc, #328]	@ (80051fc <HAL_GPIO_Init+0x314>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02b      	beq.n	800510e <HAL_GPIO_Init+0x226>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a51      	ldr	r2, [pc, #324]	@ (8005200 <HAL_GPIO_Init+0x318>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d025      	beq.n	800510a <HAL_GPIO_Init+0x222>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a50      	ldr	r2, [pc, #320]	@ (8005204 <HAL_GPIO_Init+0x31c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01f      	beq.n	8005106 <HAL_GPIO_Init+0x21e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005208 <HAL_GPIO_Init+0x320>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d019      	beq.n	8005102 <HAL_GPIO_Init+0x21a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a4e      	ldr	r2, [pc, #312]	@ (800520c <HAL_GPIO_Init+0x324>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_GPIO_Init+0x216>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a4d      	ldr	r2, [pc, #308]	@ (8005210 <HAL_GPIO_Init+0x328>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00d      	beq.n	80050fa <HAL_GPIO_Init+0x212>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a4c      	ldr	r2, [pc, #304]	@ (8005214 <HAL_GPIO_Init+0x32c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <HAL_GPIO_Init+0x20e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005218 <HAL_GPIO_Init+0x330>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d101      	bne.n	80050f2 <HAL_GPIO_Init+0x20a>
 80050ee:	2307      	movs	r3, #7
 80050f0:	e00e      	b.n	8005110 <HAL_GPIO_Init+0x228>
 80050f2:	2308      	movs	r3, #8
 80050f4:	e00c      	b.n	8005110 <HAL_GPIO_Init+0x228>
 80050f6:	2306      	movs	r3, #6
 80050f8:	e00a      	b.n	8005110 <HAL_GPIO_Init+0x228>
 80050fa:	2305      	movs	r3, #5
 80050fc:	e008      	b.n	8005110 <HAL_GPIO_Init+0x228>
 80050fe:	2304      	movs	r3, #4
 8005100:	e006      	b.n	8005110 <HAL_GPIO_Init+0x228>
 8005102:	2303      	movs	r3, #3
 8005104:	e004      	b.n	8005110 <HAL_GPIO_Init+0x228>
 8005106:	2302      	movs	r3, #2
 8005108:	e002      	b.n	8005110 <HAL_GPIO_Init+0x228>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_GPIO_Init+0x228>
 800510e:	2300      	movs	r3, #0
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	f002 0203 	and.w	r2, r2, #3
 8005116:	0092      	lsls	r2, r2, #2
 8005118:	4093      	lsls	r3, r2
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4313      	orrs	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005120:	4935      	ldr	r1, [pc, #212]	@ (80051f8 <HAL_GPIO_Init+0x310>)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	3302      	adds	r3, #2
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800512e:	4b3b      	ldr	r3, [pc, #236]	@ (800521c <HAL_GPIO_Init+0x334>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005152:	4a32      	ldr	r2, [pc, #200]	@ (800521c <HAL_GPIO_Init+0x334>)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005158:	4b30      	ldr	r3, [pc, #192]	@ (800521c <HAL_GPIO_Init+0x334>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800517c:	4a27      	ldr	r2, [pc, #156]	@ (800521c <HAL_GPIO_Init+0x334>)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005182:	4b26      	ldr	r3, [pc, #152]	@ (800521c <HAL_GPIO_Init+0x334>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051a6:	4a1d      	ldr	r2, [pc, #116]	@ (800521c <HAL_GPIO_Init+0x334>)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051ac:	4b1b      	ldr	r3, [pc, #108]	@ (800521c <HAL_GPIO_Init+0x334>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051d0:	4a12      	ldr	r2, [pc, #72]	@ (800521c <HAL_GPIO_Init+0x334>)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3301      	adds	r3, #1
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	f67f ae90 	bls.w	8004f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
 80051e8:	3724      	adds	r7, #36	@ 0x24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40013800 	.word	0x40013800
 80051fc:	40020000 	.word	0x40020000
 8005200:	40020400 	.word	0x40020400
 8005204:	40020800 	.word	0x40020800
 8005208:	40020c00 	.word	0x40020c00
 800520c:	40021000 	.word	0x40021000
 8005210:	40021400 	.word	0x40021400
 8005214:	40021800 	.word	0x40021800
 8005218:	40021c00 	.word	0x40021c00
 800521c:	40013c00 	.word	0x40013c00

08005220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	807b      	strh	r3, [r7, #2]
 800522c:	4613      	mov	r3, r2
 800522e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005230:	787b      	ldrb	r3, [r7, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005236:	887a      	ldrh	r2, [r7, #2]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800523c:	e003      	b.n	8005246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	041a      	lsls	r2, r3, #16
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	619a      	str	r2, [r3, #24]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	460b      	mov	r3, r1
 800525c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005264:	887a      	ldrh	r2, [r7, #2]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4013      	ands	r3, r2
 800526a:	041a      	lsls	r2, r3, #16
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	43d9      	mvns	r1, r3
 8005270:	887b      	ldrh	r3, [r7, #2]
 8005272:	400b      	ands	r3, r1
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	619a      	str	r2, [r3, #24]
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005292:	4b08      	ldr	r3, [pc, #32]	@ (80052b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800529e:	4a05      	ldr	r2, [pc, #20]	@ (80052b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fd fbde 	bl	8002a68 <HAL_GPIO_EXTI_Callback>
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40013c00 	.word	0x40013c00

080052b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e101      	b.n	80054ce <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f008 fca5 	bl	800dc34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2203      	movs	r2, #3
 80052ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052f8:	d102      	bne.n	8005300 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f005 f88c 	bl	800a422 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	7c1a      	ldrb	r2, [r3, #16]
 8005312:	f88d 2000 	strb.w	r2, [sp]
 8005316:	3304      	adds	r3, #4
 8005318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800531a:	f004 ff6b 	bl	800a1f4 <USB_CoreInit>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0ce      	b.n	80054ce <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f005 f884 	bl	800a444 <USB_SetCurrentMode>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e0bf      	b.n	80054ce <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]
 8005352:	e04a      	b.n	80053ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005354:	7bfa      	ldrb	r2, [r7, #15]
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	3315      	adds	r3, #21
 8005364:	2201      	movs	r2, #1
 8005366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005368:	7bfa      	ldrb	r2, [r7, #15]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	3314      	adds	r3, #20
 8005378:	7bfa      	ldrb	r2, [r7, #15]
 800537a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800537c:	7bfa      	ldrb	r2, [r7, #15]
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	b298      	uxth	r0, r3
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	332e      	adds	r3, #46	@ 0x2e
 8005390:	4602      	mov	r2, r0
 8005392:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3318      	adds	r3, #24
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	331c      	adds	r3, #28
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053bc:	7bfa      	ldrb	r2, [r7, #15]
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3320      	adds	r3, #32
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053d0:	7bfa      	ldrb	r2, [r7, #15]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	3324      	adds	r3, #36	@ 0x24
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	3301      	adds	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	791b      	ldrb	r3, [r3, #4]
 80053ee:	7bfa      	ldrb	r2, [r7, #15]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d3af      	bcc.n	8005354 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f4:	2300      	movs	r3, #0
 80053f6:	73fb      	strb	r3, [r7, #15]
 80053f8:	e044      	b.n	8005484 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005410:	7bfa      	ldrb	r2, [r7, #15]
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005422:	7bfa      	ldrb	r2, [r7, #15]
 8005424:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005438:	2200      	movs	r2, #0
 800543a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800543c:	7bfa      	ldrb	r2, [r7, #15]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005452:	7bfa      	ldrb	r2, [r7, #15]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	3301      	adds	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	791b      	ldrb	r3, [r3, #4]
 8005488:	7bfa      	ldrb	r2, [r7, #15]
 800548a:	429a      	cmp	r2, r3
 800548c:	d3b5      	bcc.n	80053fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	7c1a      	ldrb	r2, [r3, #16]
 8005496:	f88d 2000 	strb.w	r2, [sp]
 800549a:	3304      	adds	r3, #4
 800549c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800549e:	f005 f81d 	bl	800a4dc <USB_DevInit>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e00c      	b.n	80054ce <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f006 f867 	bl	800b59a <USB_DevDisconnect>

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_PCD_Start+0x1c>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e022      	b.n	8005538 <HAL_PCD_Start+0x62>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800550a:	2b01      	cmp	r3, #1
 800550c:	d105      	bne.n	800551a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f004 ff6e 	bl	800a400 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f006 f815 	bl	800b558 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b08d      	sub	sp, #52	@ 0x34
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f006 f8d3 	bl	800b702 <USB_GetMode>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 848c 	bne.w	8005e7c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f006 f837 	bl	800b5dc <USB_ReadInterrupts>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8482 	beq.w	8005e7a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f006 f824 	bl	800b5dc <USB_ReadInterrupts>
 8005594:	4603      	mov	r3, r0
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d107      	bne.n	80055ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f002 0202 	and.w	r2, r2, #2
 80055ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f006 f812 	bl	800b5dc <USB_ReadInterrupts>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d161      	bne.n	8005686 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0210 	bic.w	r2, r2, #16
 80055d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f003 020f 	and.w	r2, r3, #15
 80055de:	4613      	mov	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	3304      	adds	r3, #4
 80055f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	0c5b      	lsrs	r3, r3, #17
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d124      	bne.n	8005648 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005604:	4013      	ands	r3, r2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d035      	beq.n	8005676 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005618:	b29b      	uxth	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	6a38      	ldr	r0, [r7, #32]
 800561e:	f005 fe49 	bl	800b2b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800562e:	441a      	add	r2, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	695a      	ldr	r2, [r3, #20]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	091b      	lsrs	r3, r3, #4
 800563c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005640:	441a      	add	r2, r3
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	615a      	str	r2, [r3, #20]
 8005646:	e016      	b.n	8005676 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	0c5b      	lsrs	r3, r3, #17
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	2b06      	cmp	r3, #6
 8005652:	d110      	bne.n	8005676 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800565a:	2208      	movs	r2, #8
 800565c:	4619      	mov	r1, r3
 800565e:	6a38      	ldr	r0, [r7, #32]
 8005660:	f005 fe28 	bl	800b2b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005670:	441a      	add	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0210 	orr.w	r2, r2, #16
 8005684:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f005 ffa6 	bl	800b5dc <USB_ReadInterrupts>
 8005690:	4603      	mov	r3, r0
 8005692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005696:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800569a:	f040 80a7 	bne.w	80057ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f005 ffab 	bl	800b602 <USB_ReadDevAllOutEpInterrupt>
 80056ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80056ae:	e099      	b.n	80057e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 808e 	beq.w	80057d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	4611      	mov	r1, r2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f005 ffcf 	bl	800b66a <USB_ReadDevOutEPInterrupt>
 80056cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e4:	461a      	mov	r2, r3
 80056e6:	2301      	movs	r3, #1
 80056e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80056ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fea3 	bl	8006438 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00c      	beq.n	8005716 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005708:	461a      	mov	r2, r3
 800570a:	2308      	movs	r3, #8
 800570c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800570e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 ff79 	bl	8006608 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572c:	461a      	mov	r2, r3
 800572e:	2310      	movs	r3, #16
 8005730:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d030      	beq.n	800579e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005744:	2b80      	cmp	r3, #128	@ 0x80
 8005746:	d109      	bne.n	800575c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800575a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800575c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575e:	4613      	mov	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	3304      	adds	r3, #4
 8005770:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	78db      	ldrb	r3, [r3, #3]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d108      	bne.n	800578c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	b2db      	uxtb	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f008 fb5a 	bl	800de40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005798:	461a      	mov	r2, r3
 800579a:	2302      	movs	r3, #2
 800579c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	2320      	movs	r3, #32
 80057b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d0:	461a      	mov	r2, r3
 80057d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80057d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	3301      	adds	r3, #1
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f47f af62 	bne.w	80056b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f005 fef3 	bl	800b5dc <USB_ReadInterrupts>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005800:	f040 80db 	bne.w	80059ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f005 ff14 	bl	800b636 <USB_ReadDevAllInEpInterrupt>
 800580e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005814:	e0cd      	b.n	80059b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80c2 	beq.w	80059a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	4611      	mov	r1, r2
 800582c:	4618      	mov	r0, r3
 800582e:	f005 ff3a 	bl	800b6a6 <USB_ReadDevInEPInterrupt>
 8005832:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d057      	beq.n	80058ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	2201      	movs	r2, #1
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	43db      	mvns	r3, r3
 8005858:	69f9      	ldr	r1, [r7, #28]
 800585a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800585e:	4013      	ands	r3, r2
 8005860:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800586e:	461a      	mov	r2, r3
 8005870:	2301      	movs	r3, #1
 8005872:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	799b      	ldrb	r3, [r3, #6]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d132      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005880:	4613      	mov	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	3320      	adds	r3, #32
 800588c:	6819      	ldr	r1, [r3, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4403      	add	r3, r0
 800589c:	331c      	adds	r3, #28
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4419      	add	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4403      	add	r3, r0
 80058b0:	3320      	adds	r3, #32
 80058b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d113      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x3a2>
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3324      	adds	r3, #36	@ 0x24
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058da:	461a      	mov	r2, r3
 80058dc:	2101      	movs	r1, #1
 80058de:	f005 ff41 	bl	800b764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f008 fa24 	bl	800dd36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005904:	461a      	mov	r2, r3
 8005906:	2308      	movs	r3, #8
 8005908:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005920:	461a      	mov	r2, r3
 8005922:	2310      	movs	r3, #16
 8005924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593c:	461a      	mov	r2, r3
 800593e:	2340      	movs	r3, #64	@ 0x40
 8005940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d023      	beq.n	8005994 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800594c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800594e:	6a38      	ldr	r0, [r7, #32]
 8005950:	f004 ff28 	bl	800a7a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005956:	4613      	mov	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	3310      	adds	r3, #16
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	3304      	adds	r3, #4
 8005966:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	78db      	ldrb	r3, [r3, #3]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d108      	bne.n	8005982 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2200      	movs	r2, #0
 8005974:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	b2db      	uxtb	r3, r3
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f008 fa71 	bl	800de64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598e:	461a      	mov	r2, r3
 8005990:	2302      	movs	r3, #2
 8005992:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800599e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fcbd 	bl	8006320 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	3301      	adds	r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f47f af2e 	bne.w	8005816 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f005 fe0c 	bl	800b5dc <USB_ReadInterrupts>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059ce:	d122      	bne.n	8005a16 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d108      	bne.n	8005a00 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059f6:	2100      	movs	r1, #0
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fea3 	bl	8006744 <HAL_PCDEx_LPM_Callback>
 80059fe:	e002      	b.n	8005a06 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f008 fa0f 	bl	800de24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f005 fdde 	bl	800b5dc <USB_ReadInterrupts>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a2a:	d112      	bne.n	8005a52 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d102      	bne.n	8005a42 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f008 f9cb 	bl	800ddd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005a50:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f005 fdc0 	bl	800b5dc <USB_ReadInterrupts>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a66:	f040 80b7 	bne.w	8005bd8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2110      	movs	r1, #16
 8005a84:	4618      	mov	r0, r3
 8005a86:	f004 fe8d 	bl	800a7a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a8e:	e046      	b.n	8005b1e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005aa2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005abe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ac2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ad6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005af2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005af6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b16:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	791b      	ldrb	r3, [r3, #4]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d3b2      	bcc.n	8005a90 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b38:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005b3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	7bdb      	ldrb	r3, [r3, #15]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b56:	f043 030b 	orr.w	r3, r3, #11
 8005b5a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b6c:	f043 030b 	orr.w	r3, r3, #11
 8005b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b72:	e015      	b.n	8005ba0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005b86:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005b8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b9a:	f043 030b 	orr.w	r3, r3, #11
 8005b9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005bb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f005 fdce 	bl	800b764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f005 fcfd 	bl	800b5dc <USB_ReadInterrupts>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bec:	d123      	bne.n	8005c36 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f005 fd93 	bl	800b71e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f004 fe4a 	bl	800a896 <USB_GetDevSpeed>
 8005c02:	4603      	mov	r3, r0
 8005c04:	461a      	mov	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681c      	ldr	r4, [r3, #0]
 8005c0e:	f001 fa07 	bl	8007020 <HAL_RCC_GetHCLKFreq>
 8005c12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f004 fb4e 	bl	800a2bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f008 f8b0 	bl	800dd86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f005 fcce 	bl	800b5dc <USB_ReadInterrupts>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d10a      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f008 f88d 	bl	800dd6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f002 0208 	and.w	r2, r2, #8
 8005c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f005 fcb9 	bl	800b5dc <USB_ReadInterrupts>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c70:	2b80      	cmp	r3, #128	@ 0x80
 8005c72:	d123      	bne.n	8005cbc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c80:	2301      	movs	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c84:	e014      	b.n	8005cb0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d105      	bne.n	8005caa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fb0a 	bl	80062be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	3301      	adds	r3, #1
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	791b      	ldrb	r3, [r3, #4]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d3e4      	bcc.n	8005c86 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f005 fc8b 	bl	800b5dc <USB_ReadInterrupts>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ccc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cd0:	d13c      	bne.n	8005d4c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd6:	e02b      	b.n	8005d30 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	3318      	adds	r3, #24
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d115      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005cfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	da12      	bge.n	8005d2a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	3317      	adds	r3, #23
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 faca 	bl	80062be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	791b      	ldrb	r3, [r3, #4]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d3cd      	bcc.n	8005cd8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f005 fc43 	bl	800b5dc <USB_ReadInterrupts>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d60:	d156      	bne.n	8005e10 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d62:	2301      	movs	r3, #1
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d66:	e045      	b.n	8005df4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d12e      	bne.n	8005dee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	da2b      	bge.n	8005dee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005da2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d121      	bne.n	8005dee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dae:	4613      	mov	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dea:	6053      	str	r3, [r2, #4]
            break;
 8005dec:	e008      	b.n	8005e00 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	3301      	adds	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	791b      	ldrb	r3, [r3, #4]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d3b3      	bcc.n	8005d68 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f005 fbe1 	bl	800b5dc <USB_ReadInterrupts>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e24:	d10a      	bne.n	8005e3c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f008 f82e 	bl	800de88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f005 fbcb 	bl	800b5dc <USB_ReadInterrupts>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d115      	bne.n	8005e7c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f008 f81e 	bl	800dea4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
 8005e78:	e000      	b.n	8005e7c <HAL_PCD_IRQHandler+0x93c>
      return;
 8005e7a:	bf00      	nop
    }
  }
}
 8005e7c:	3734      	adds	r7, #52	@ 0x34
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd90      	pop	{r4, r7, pc}

08005e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_PCD_SetAddress+0x1a>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e012      	b.n	8005ec2 <HAL_PCD_SetAddress+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	78fa      	ldrb	r2, [r7, #3]
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f005 fb2a 	bl	800b50c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	4608      	mov	r0, r1
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4603      	mov	r3, r0
 8005eda:	70fb      	strb	r3, [r7, #3]
 8005edc:	460b      	mov	r3, r1
 8005ede:	803b      	strh	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da0f      	bge.n	8005f10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f003 020f 	and.w	r2, r3, #15
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	3310      	adds	r3, #16
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	3304      	adds	r3, #4
 8005f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	705a      	strb	r2, [r3, #1]
 8005f0e:	e00f      	b.n	8005f30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	f003 020f 	and.w	r2, r3, #15
 8005f16:	4613      	mov	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	3304      	adds	r3, #4
 8005f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005f3c:	883b      	ldrh	r3, [r7, #0]
 8005f3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	78ba      	ldrb	r2, [r7, #2]
 8005f4a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f5e:	78bb      	ldrb	r3, [r7, #2]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d102      	bne.n	8005f6a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_PCD_EP_Open+0xae>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e00e      	b.n	8005f96 <HAL_PCD_EP_Open+0xcc>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f004 fcaa 	bl	800a8e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005f94:	7afb      	ldrb	r3, [r7, #11]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	da0f      	bge.n	8005fd2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	f003 020f 	and.w	r2, r3, #15
 8005fb8:	4613      	mov	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	3310      	adds	r3, #16
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	705a      	strb	r2, [r3, #1]
 8005fd0:	e00f      	b.n	8005ff2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	f003 020f 	and.w	r2, r3, #15
 8005fd8:	4613      	mov	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3304      	adds	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_PCD_EP_Close+0x6e>
 8006008:	2302      	movs	r3, #2
 800600a:	e00e      	b.n	800602a <HAL_PCD_EP_Close+0x8c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	4618      	mov	r0, r3
 800601c:	f004 fce8 	bl	800a9f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	460b      	mov	r3, r1
 8006040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006042:	7afb      	ldrb	r3, [r7, #11]
 8006044:	f003 020f 	and.w	r2, r3, #15
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	3304      	adds	r3, #4
 800605a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2200      	movs	r2, #0
 8006072:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	b2da      	uxtb	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	799b      	ldrb	r3, [r3, #6]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d102      	bne.n	800608e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	799b      	ldrb	r3, [r3, #6]
 8006096:	461a      	mov	r2, r3
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	f004 fd85 	bl	800aba8 <USB_EPStartXfer>

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	f003 020f 	and.w	r2, r3, #15
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80060ca:	681b      	ldr	r3, [r3, #0]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	607a      	str	r2, [r7, #4]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	460b      	mov	r3, r1
 80060e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060e8:	7afb      	ldrb	r3, [r7, #11]
 80060ea:	f003 020f 	and.w	r2, r3, #15
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	3310      	adds	r3, #16
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2200      	movs	r2, #0
 8006110:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2201      	movs	r2, #1
 8006116:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006118:	7afb      	ldrb	r3, [r7, #11]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	b2da      	uxtb	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	799b      	ldrb	r3, [r3, #6]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d102      	bne.n	8006132 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	799b      	ldrb	r3, [r3, #6]
 800613a:	461a      	mov	r2, r3
 800613c:	6979      	ldr	r1, [r7, #20]
 800613e:	f004 fd33 	bl	800aba8 <USB_EPStartXfer>

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	7912      	ldrb	r2, [r2, #4]
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e04f      	b.n	800620a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800616a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800616e:	2b00      	cmp	r3, #0
 8006170:	da0f      	bge.n	8006192 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	3310      	adds	r3, #16
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	3304      	adds	r3, #4
 8006188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	705a      	strb	r2, [r3, #1]
 8006190:	e00d      	b.n	80061ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006192:	78fa      	ldrb	r2, [r7, #3]
 8006194:	4613      	mov	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4413      	add	r3, r2
 80061a4:	3304      	adds	r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_PCD_EP_SetStall+0x82>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e01d      	b.n	800620a <HAL_PCD_EP_SetStall+0xbe>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	4618      	mov	r0, r3
 80061de:	f005 f8c1 	bl	800b364 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d109      	bne.n	8006200 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7999      	ldrb	r1, [r3, #6]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061fa:	461a      	mov	r2, r3
 80061fc:	f005 fab2 	bl	800b764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	7912      	ldrb	r2, [r2, #4]
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e042      	b.n	80062b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006234:	2b00      	cmp	r3, #0
 8006236:	da0f      	bge.n	8006258 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	f003 020f 	and.w	r2, r3, #15
 800623e:	4613      	mov	r3, r2
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	3310      	adds	r3, #16
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4413      	add	r3, r2
 800624c:	3304      	adds	r3, #4
 800624e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	705a      	strb	r2, [r3, #1]
 8006256:	e00f      	b.n	8006278 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	f003 020f 	and.w	r2, r3, #15
 800625e:	4613      	mov	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4413      	add	r3, r2
 800626e:	3304      	adds	r3, #4
 8006270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	b2da      	uxtb	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_PCD_EP_ClrStall+0x86>
 8006294:	2302      	movs	r3, #2
 8006296:	e00e      	b.n	80062b6 <HAL_PCD_EP_ClrStall+0xa4>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f005 f8ca 	bl	800b440 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80062ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da0c      	bge.n	80062ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	4613      	mov	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	3310      	adds	r3, #16
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	4413      	add	r3, r2
 80062e6:	3304      	adds	r3, #4
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e00c      	b.n	8006306 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	f003 020f 	and.w	r2, r3, #15
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	3304      	adds	r3, #4
 8006304:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68f9      	ldr	r1, [r7, #12]
 800630c:	4618      	mov	r0, r3
 800630e:	f004 fee9 	bl	800b0e4 <USB_EPStopXfer>
 8006312:	4603      	mov	r3, r0
 8006314:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006316:	7afb      	ldrb	r3, [r7, #11]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	@ 0x28
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	4613      	mov	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	3310      	adds	r3, #16
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4413      	add	r3, r2
 8006344:	3304      	adds	r3, #4
 8006346:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	429a      	cmp	r2, r3
 8006352:	d901      	bls.n	8006358 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e06b      	b.n	8006430 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	429a      	cmp	r2, r3
 800636c:	d902      	bls.n	8006374 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	3303      	adds	r3, #3
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800637c:	e02a      	b.n	80063d4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	429a      	cmp	r2, r3
 8006392:	d902      	bls.n	800639a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	3303      	adds	r3, #3
 800639e:	089b      	lsrs	r3, r3, #2
 80063a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68d9      	ldr	r1, [r3, #12]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	4603      	mov	r3, r0
 80063b6:	6978      	ldr	r0, [r7, #20]
 80063b8:	f004 ff3e 	bl	800b238 <USB_WritePacket>

    ep->xfer_buff  += len;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	441a      	add	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	695a      	ldr	r2, [r3, #20]
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	441a      	add	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d809      	bhi.n	80063fe <PCD_WriteEmptyTxFifo+0xde>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d203      	bcs.n	80063fe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1bf      	bne.n	800637e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	429a      	cmp	r2, r3
 8006408:	d811      	bhi.n	800642e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	2201      	movs	r2, #1
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	43db      	mvns	r3, r3
 8006424:	6939      	ldr	r1, [r7, #16]
 8006426:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800642a:	4013      	ands	r3, r2
 800642c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	333c      	adds	r3, #60	@ 0x3c
 8006450:	3304      	adds	r3, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	799b      	ldrb	r3, [r3, #6]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d17b      	bne.n	8006566 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d015      	beq.n	80064a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	4a61      	ldr	r2, [pc, #388]	@ (8006600 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	f240 80b9 	bls.w	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80b3 	beq.w	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649a:	461a      	mov	r2, r3
 800649c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064a0:	6093      	str	r3, [r2, #8]
 80064a2:	e0a7      	b.n	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ba:	461a      	mov	r2, r3
 80064bc:	2320      	movs	r3, #32
 80064be:	6093      	str	r3, [r2, #8]
 80064c0:	e098      	b.n	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f040 8093 	bne.w	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	4a4b      	ldr	r2, [pc, #300]	@ (8006600 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d90f      	bls.n	80064f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	461a      	mov	r2, r3
 80064ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f2:	6093      	str	r3, [r2, #8]
 80064f4:	e07e      	b.n	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	3304      	adds	r3, #4
 800650a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	0159      	lsls	r1, r3, #5
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	440b      	add	r3, r1
 8006518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d114      	bne.n	8006558 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006540:	461a      	mov	r2, r3
 8006542:	2101      	movs	r1, #1
 8006544:	f005 f90e 	bl	800b764 <USB_EP0_OutStart>
 8006548:	e006      	b.n	8006558 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	441a      	add	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f007 fbce 	bl	800dd00 <HAL_PCD_DataOutStageCallback>
 8006564:	e046      	b.n	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	4a26      	ldr	r2, [pc, #152]	@ (8006604 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d124      	bne.n	80065b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006584:	461a      	mov	r2, r3
 8006586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800658a:	6093      	str	r3, [r2, #8]
 800658c:	e032      	b.n	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a4:	461a      	mov	r2, r3
 80065a6:	2320      	movs	r3, #32
 80065a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f007 fba5 	bl	800dd00 <HAL_PCD_DataOutStageCallback>
 80065b6:	e01d      	b.n	80065f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d114      	bne.n	80065e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	4613      	mov	r3, r2
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d108      	bne.n	80065e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065e0:	461a      	mov	r2, r3
 80065e2:	2100      	movs	r1, #0
 80065e4:	f005 f8be 	bl	800b764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f007 fb86 	bl	800dd00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	4f54300a 	.word	0x4f54300a
 8006604:	4f54310a 	.word	0x4f54310a

08006608 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	333c      	adds	r3, #60	@ 0x3c
 8006620:	3304      	adds	r3, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a15      	ldr	r2, [pc, #84]	@ (8006690 <PCD_EP_OutSetupPacket_int+0x88>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d90e      	bls.n	800665c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006654:	461a      	mov	r2, r3
 8006656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f007 fb3d 	bl	800dcdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4a0a      	ldr	r2, [pc, #40]	@ (8006690 <PCD_EP_OutSetupPacket_int+0x88>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d90c      	bls.n	8006684 <PCD_EP_OutSetupPacket_int+0x7c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	799b      	ldrb	r3, [r3, #6]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d108      	bne.n	8006684 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800667c:	461a      	mov	r2, r3
 800667e:	2101      	movs	r1, #1
 8006680:	f005 f870 	bl	800b764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	4f54300a 	.word	0x4f54300a

08006694 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
 80066a0:	4613      	mov	r3, r2
 80066a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066b2:	883b      	ldrh	r3, [r7, #0]
 80066b4:	0419      	lsls	r1, r3, #16
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	430a      	orrs	r2, r1
 80066be:	629a      	str	r2, [r3, #40]	@ 0x28
 80066c0:	e028      	b.n	8006714 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	0c1b      	lsrs	r3, r3, #16
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	e00d      	b.n	80066f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	3340      	adds	r3, #64	@ 0x40
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	4413      	add	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	3301      	adds	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
 80066f2:	7bfa      	ldrb	r2, [r7, #15]
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d3ec      	bcc.n	80066d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066fc:	883b      	ldrh	r3, [r7, #0]
 80066fe:	0418      	lsls	r0, r3, #16
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6819      	ldr	r1, [r3, #0]
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	3b01      	subs	r3, #1
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	4302      	orrs	r2, r0
 800670c:	3340      	adds	r3, #64	@ 0x40
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	887a      	ldrh	r2, [r7, #2]
 8006734:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e267      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d075      	beq.n	8006866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800677a:	4b88      	ldr	r3, [pc, #544]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b04      	cmp	r3, #4
 8006784:	d00c      	beq.n	80067a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006786:	4b85      	ldr	r3, [pc, #532]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800678e:	2b08      	cmp	r3, #8
 8006790:	d112      	bne.n	80067b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006792:	4b82      	ldr	r3, [pc, #520]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800679a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800679e:	d10b      	bne.n	80067b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067a0:	4b7e      	ldr	r3, [pc, #504]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d05b      	beq.n	8006864 <HAL_RCC_OscConfig+0x108>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d157      	bne.n	8006864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e242      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067c0:	d106      	bne.n	80067d0 <HAL_RCC_OscConfig+0x74>
 80067c2:	4b76      	ldr	r3, [pc, #472]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a75      	ldr	r2, [pc, #468]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e01d      	b.n	800680c <HAL_RCC_OscConfig+0xb0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067d8:	d10c      	bne.n	80067f4 <HAL_RCC_OscConfig+0x98>
 80067da:	4b70      	ldr	r3, [pc, #448]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a6f      	ldr	r2, [pc, #444]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b6d      	ldr	r3, [pc, #436]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a6c      	ldr	r2, [pc, #432]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e00b      	b.n	800680c <HAL_RCC_OscConfig+0xb0>
 80067f4:	4b69      	ldr	r3, [pc, #420]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a68      	ldr	r2, [pc, #416]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80067fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	4b66      	ldr	r3, [pc, #408]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a65      	ldr	r2, [pc, #404]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800680a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d013      	beq.n	800683c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006814:	f7fd fe24 	bl	8004460 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800681c:	f7fd fe20 	bl	8004460 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b64      	cmp	r3, #100	@ 0x64
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e207      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800682e:	4b5b      	ldr	r3, [pc, #364]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0xc0>
 800683a:	e014      	b.n	8006866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683c:	f7fd fe10 	bl	8004460 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006844:	f7fd fe0c 	bl	8004460 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b64      	cmp	r3, #100	@ 0x64
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e1f3      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006856:	4b51      	ldr	r3, [pc, #324]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0xe8>
 8006862:	e000      	b.n	8006866 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d063      	beq.n	800693a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006872:	4b4a      	ldr	r3, [pc, #296]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800687e:	4b47      	ldr	r3, [pc, #284]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006886:	2b08      	cmp	r3, #8
 8006888:	d11c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800688a:	4b44      	ldr	r3, [pc, #272]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d116      	bne.n	80068c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006896:	4b41      	ldr	r3, [pc, #260]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_RCC_OscConfig+0x152>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d001      	beq.n	80068ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e1c7      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ae:	4b3b      	ldr	r3, [pc, #236]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	4937      	ldr	r1, [pc, #220]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068c2:	e03a      	b.n	800693a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d020      	beq.n	800690e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068cc:	4b34      	ldr	r3, [pc, #208]	@ (80069a0 <HAL_RCC_OscConfig+0x244>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d2:	f7fd fdc5 	bl	8004460 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068da:	f7fd fdc1 	bl	8004460 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e1a8      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ec:	4b2b      	ldr	r3, [pc, #172]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f8:	4b28      	ldr	r3, [pc, #160]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	4925      	ldr	r1, [pc, #148]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006908:	4313      	orrs	r3, r2
 800690a:	600b      	str	r3, [r1, #0]
 800690c:	e015      	b.n	800693a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800690e:	4b24      	ldr	r3, [pc, #144]	@ (80069a0 <HAL_RCC_OscConfig+0x244>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006914:	f7fd fda4 	bl	8004460 <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800691c:	f7fd fda0 	bl	8004460 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e187      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800692e:	4b1b      	ldr	r3, [pc, #108]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f0      	bne.n	800691c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d036      	beq.n	80069b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800694e:	4b15      	ldr	r3, [pc, #84]	@ (80069a4 <HAL_RCC_OscConfig+0x248>)
 8006950:	2201      	movs	r2, #1
 8006952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006954:	f7fd fd84 	bl	8004460 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800695c:	f7fd fd80 	bl	8004460 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e167      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800696e:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <HAL_RCC_OscConfig+0x240>)
 8006970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0x200>
 800697a:	e01b      	b.n	80069b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800697c:	4b09      	ldr	r3, [pc, #36]	@ (80069a4 <HAL_RCC_OscConfig+0x248>)
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006982:	f7fd fd6d 	bl	8004460 <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006988:	e00e      	b.n	80069a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800698a:	f7fd fd69 	bl	8004460 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d907      	bls.n	80069a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e150      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
 800699c:	40023800 	.word	0x40023800
 80069a0:	42470000 	.word	0x42470000
 80069a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a8:	4b88      	ldr	r3, [pc, #544]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 80069aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ea      	bne.n	800698a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8097 	beq.w	8006af0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069c6:	4b81      	ldr	r3, [pc, #516]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10f      	bne.n	80069f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069d2:	2300      	movs	r3, #0
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	4b7d      	ldr	r3, [pc, #500]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069da:	4a7c      	ldr	r2, [pc, #496]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 80069dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80069e2:	4b7a      	ldr	r3, [pc, #488]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ee:	2301      	movs	r3, #1
 80069f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f2:	4b77      	ldr	r3, [pc, #476]	@ (8006bd0 <HAL_RCC_OscConfig+0x474>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d118      	bne.n	8006a30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069fe:	4b74      	ldr	r3, [pc, #464]	@ (8006bd0 <HAL_RCC_OscConfig+0x474>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a73      	ldr	r2, [pc, #460]	@ (8006bd0 <HAL_RCC_OscConfig+0x474>)
 8006a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a0a:	f7fd fd29 	bl	8004460 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a12:	f7fd fd25 	bl	8004460 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e10c      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a24:	4b6a      	ldr	r3, [pc, #424]	@ (8006bd0 <HAL_RCC_OscConfig+0x474>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d106      	bne.n	8006a46 <HAL_RCC_OscConfig+0x2ea>
 8006a38:	4b64      	ldr	r3, [pc, #400]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3c:	4a63      	ldr	r2, [pc, #396]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a44:	e01c      	b.n	8006a80 <HAL_RCC_OscConfig+0x324>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d10c      	bne.n	8006a68 <HAL_RCC_OscConfig+0x30c>
 8006a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a52:	4a5e      	ldr	r2, [pc, #376]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a54:	f043 0304 	orr.w	r3, r3, #4
 8006a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a66:	e00b      	b.n	8006a80 <HAL_RCC_OscConfig+0x324>
 8006a68:	4b58      	ldr	r3, [pc, #352]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6c:	4a57      	ldr	r2, [pc, #348]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a6e:	f023 0301 	bic.w	r3, r3, #1
 8006a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a74:	4b55      	ldr	r3, [pc, #340]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a78:	4a54      	ldr	r2, [pc, #336]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006a7a:	f023 0304 	bic.w	r3, r3, #4
 8006a7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d015      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a88:	f7fd fcea 	bl	8004460 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a8e:	e00a      	b.n	8006aa6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a90:	f7fd fce6 	bl	8004460 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e0cb      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa6:	4b49      	ldr	r3, [pc, #292]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0ee      	beq.n	8006a90 <HAL_RCC_OscConfig+0x334>
 8006ab2:	e014      	b.n	8006ade <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab4:	f7fd fcd4 	bl	8004460 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aba:	e00a      	b.n	8006ad2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006abc:	f7fd fcd0 	bl	8004460 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e0b5      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1ee      	bne.n	8006abc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d105      	bne.n	8006af0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ae4:	4b39      	ldr	r3, [pc, #228]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae8:	4a38      	ldr	r2, [pc, #224]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80a1 	beq.w	8006c3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006afa:	4b34      	ldr	r3, [pc, #208]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d05c      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d141      	bne.n	8006b92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b0e:	4b31      	ldr	r3, [pc, #196]	@ (8006bd4 <HAL_RCC_OscConfig+0x478>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b14:	f7fd fca4 	bl	8004460 <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b1c:	f7fd fca0 	bl	8004460 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e087      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2e:	4b27      	ldr	r3, [pc, #156]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f0      	bne.n	8006b1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69da      	ldr	r2, [r3, #28]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	019b      	lsls	r3, r3, #6
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	3b01      	subs	r3, #1
 8006b54:	041b      	lsls	r3, r3, #16
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	061b      	lsls	r3, r3, #24
 8006b5e:	491b      	ldr	r1, [pc, #108]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b64:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd4 <HAL_RCC_OscConfig+0x478>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6a:	f7fd fc79 	bl	8004460 <HAL_GetTick>
 8006b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b72:	f7fd fc75 	bl	8004460 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e05c      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b84:	4b11      	ldr	r3, [pc, #68]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0f0      	beq.n	8006b72 <HAL_RCC_OscConfig+0x416>
 8006b90:	e054      	b.n	8006c3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b92:	4b10      	ldr	r3, [pc, #64]	@ (8006bd4 <HAL_RCC_OscConfig+0x478>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b98:	f7fd fc62 	bl	8004460 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba0:	f7fd fc5e 	bl	8004460 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e045      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb2:	4b06      	ldr	r3, [pc, #24]	@ (8006bcc <HAL_RCC_OscConfig+0x470>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x444>
 8006bbe:	e03d      	b.n	8006c3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e038      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	40007000 	.word	0x40007000
 8006bd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c48 <HAL_RCC_OscConfig+0x4ec>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d028      	beq.n	8006c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d121      	bne.n	8006c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d11a      	bne.n	8006c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c08:	4013      	ands	r3, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d111      	bne.n	8006c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	3b01      	subs	r3, #1
 8006c22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d107      	bne.n	8006c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d001      	beq.n	8006c3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	40023800 	.word	0x40023800

08006c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0cc      	b.n	8006dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c60:	4b68      	ldr	r3, [pc, #416]	@ (8006e04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d90c      	bls.n	8006c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b65      	ldr	r3, [pc, #404]	@ (8006e04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c76:	4b63      	ldr	r3, [pc, #396]	@ (8006e04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d001      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0b8      	b.n	8006dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d020      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ca0:	4b59      	ldr	r3, [pc, #356]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	4a58      	ldr	r2, [pc, #352]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0308 	and.w	r3, r3, #8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cb8:	4b53      	ldr	r3, [pc, #332]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	4a52      	ldr	r2, [pc, #328]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cc4:	4b50      	ldr	r3, [pc, #320]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	494d      	ldr	r1, [pc, #308]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d044      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d107      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cea:	4b47      	ldr	r3, [pc, #284]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d119      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e07f      	b.n	8006dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d003      	beq.n	8006d0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d107      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e06f      	b.n	8006dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e067      	b.n	8006dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d2a:	4b37      	ldr	r3, [pc, #220]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f023 0203 	bic.w	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4934      	ldr	r1, [pc, #208]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d3c:	f7fd fb90 	bl	8004460 <HAL_GetTick>
 8006d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d42:	e00a      	b.n	8006d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d44:	f7fd fb8c 	bl	8004460 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e04f      	b.n	8006dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 020c 	and.w	r2, r3, #12
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d1eb      	bne.n	8006d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d6c:	4b25      	ldr	r3, [pc, #148]	@ (8006e04 <HAL_RCC_ClockConfig+0x1b8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d20c      	bcs.n	8006d94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7a:	4b22      	ldr	r3, [pc, #136]	@ (8006e04 <HAL_RCC_ClockConfig+0x1b8>)
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d82:	4b20      	ldr	r3, [pc, #128]	@ (8006e04 <HAL_RCC_ClockConfig+0x1b8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d001      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e032      	b.n	8006dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da0:	4b19      	ldr	r3, [pc, #100]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	4916      	ldr	r1, [pc, #88]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dbe:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	490e      	ldr	r1, [pc, #56]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dd2:	f000 f821 	bl	8006e18 <HAL_RCC_GetSysClockFreq>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	490a      	ldr	r1, [pc, #40]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006de4:	5ccb      	ldrb	r3, [r1, r3]
 8006de6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dea:	4a09      	ldr	r2, [pc, #36]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006dee:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <HAL_RCC_ClockConfig+0x1c8>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fd faf0 	bl	80043d8 <HAL_InitTick>

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40023c00 	.word	0x40023c00
 8006e08:	40023800 	.word	0x40023800
 8006e0c:	08012988 	.word	0x08012988
 8006e10:	20000030 	.word	0x20000030
 8006e14:	20000034 	.word	0x20000034

08006e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e1c:	b094      	sub	sp, #80	@ 0x50
 8006e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e30:	4b79      	ldr	r3, [pc, #484]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 030c 	and.w	r3, r3, #12
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d00d      	beq.n	8006e58 <HAL_RCC_GetSysClockFreq+0x40>
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	f200 80e1 	bhi.w	8007004 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_RCC_GetSysClockFreq+0x34>
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d003      	beq.n	8006e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e4a:	e0db      	b.n	8007004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e4c:	4b73      	ldr	r3, [pc, #460]	@ (800701c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e50:	e0db      	b.n	800700a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e52:	4b72      	ldr	r3, [pc, #456]	@ (800701c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e56:	e0d8      	b.n	800700a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e58:	4b6f      	ldr	r3, [pc, #444]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e62:	4b6d      	ldr	r3, [pc, #436]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d063      	beq.n	8006f36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	099b      	lsrs	r3, r3, #6
 8006e74:	2200      	movs	r2, #0
 8006e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e82:	2300      	movs	r3, #0
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	f04f 0000 	mov.w	r0, #0
 8006e92:	f04f 0100 	mov.w	r1, #0
 8006e96:	0159      	lsls	r1, r3, #5
 8006e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e9c:	0150      	lsls	r0, r2, #5
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	1a51      	subs	r1, r2, r1
 8006ea6:	6139      	str	r1, [r7, #16]
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ebc:	4659      	mov	r1, fp
 8006ebe:	018b      	lsls	r3, r1, #6
 8006ec0:	4651      	mov	r1, sl
 8006ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ec6:	4651      	mov	r1, sl
 8006ec8:	018a      	lsls	r2, r1, #6
 8006eca:	4651      	mov	r1, sl
 8006ecc:	ebb2 0801 	subs.w	r8, r2, r1
 8006ed0:	4659      	mov	r1, fp
 8006ed2:	eb63 0901 	sbc.w	r9, r3, r1
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eea:	4690      	mov	r8, r2
 8006eec:	4699      	mov	r9, r3
 8006eee:	4623      	mov	r3, r4
 8006ef0:	eb18 0303 	adds.w	r3, r8, r3
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	eb49 0303 	adc.w	r3, r9, r3
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	028b      	lsls	r3, r1, #10
 8006f0e:	4621      	mov	r1, r4
 8006f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f14:	4621      	mov	r1, r4
 8006f16:	028a      	lsls	r2, r1, #10
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f1e:	2200      	movs	r2, #0
 8006f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f28:	f7f9 fe8e 	bl	8000c48 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4613      	mov	r3, r2
 8006f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f34:	e058      	b.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f36:	4b38      	ldr	r3, [pc, #224]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	099b      	lsrs	r3, r3, #6
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4618      	mov	r0, r3
 8006f40:	4611      	mov	r1, r2
 8006f42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f46:	623b      	str	r3, [r7, #32]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	f04f 0000 	mov.w	r0, #0
 8006f58:	f04f 0100 	mov.w	r1, #0
 8006f5c:	0159      	lsls	r1, r3, #5
 8006f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f62:	0150      	lsls	r0, r2, #5
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4641      	mov	r1, r8
 8006f6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f6e:	4649      	mov	r1, r9
 8006f70:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f88:	ebb2 040a 	subs.w	r4, r2, sl
 8006f8c:	eb63 050b 	sbc.w	r5, r3, fp
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	00eb      	lsls	r3, r5, #3
 8006f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f9e:	00e2      	lsls	r2, r4, #3
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	461d      	mov	r5, r3
 8006fa4:	4643      	mov	r3, r8
 8006fa6:	18e3      	adds	r3, r4, r3
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	464b      	mov	r3, r9
 8006fac:	eb45 0303 	adc.w	r3, r5, r3
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	028b      	lsls	r3, r1, #10
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fc8:	4621      	mov	r1, r4
 8006fca:	028a      	lsls	r2, r1, #10
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	61fa      	str	r2, [r7, #28]
 8006fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fdc:	f7f9 fe34 	bl	8000c48 <__aeabi_uldivmod>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007002:	e002      	b.n	800700a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007004:	4b05      	ldr	r3, [pc, #20]	@ (800701c <HAL_RCC_GetSysClockFreq+0x204>)
 8007006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800700a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800700c:	4618      	mov	r0, r3
 800700e:	3750      	adds	r7, #80	@ 0x50
 8007010:	46bd      	mov	sp, r7
 8007012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007016:	bf00      	nop
 8007018:	40023800 	.word	0x40023800
 800701c:	00f42400 	.word	0x00f42400

08007020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007024:	4b03      	ldr	r3, [pc, #12]	@ (8007034 <HAL_RCC_GetHCLKFreq+0x14>)
 8007026:	681b      	ldr	r3, [r3, #0]
}
 8007028:	4618      	mov	r0, r3
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000030 	.word	0x20000030

08007038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800703c:	f7ff fff0 	bl	8007020 <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	0a9b      	lsrs	r3, r3, #10
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4903      	ldr	r1, [pc, #12]	@ (800705c <HAL_RCC_GetPCLK1Freq+0x24>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40023800 	.word	0x40023800
 800705c:	08012998 	.word	0x08012998

08007060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007064:	f7ff ffdc 	bl	8007020 <HAL_RCC_GetHCLKFreq>
 8007068:	4602      	mov	r2, r0
 800706a:	4b05      	ldr	r3, [pc, #20]	@ (8007080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	0b5b      	lsrs	r3, r3, #13
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	4903      	ldr	r1, [pc, #12]	@ (8007084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007076:	5ccb      	ldrb	r3, [r1, r3]
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40023800 	.word	0x40023800
 8007084:	08012998 	.word	0x08012998

08007088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e07b      	b.n	8007192 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d108      	bne.n	80070b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070aa:	d009      	beq.n	80070c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	61da      	str	r2, [r3, #28]
 80070b2:	e005      	b.n	80070c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fc fd0e 	bl	8003afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007144:	ea42 0103 	orr.w	r1, r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	f003 0104 	and.w	r1, r3, #4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	f003 0210 	and.w	r2, r3, #16
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b088      	sub	sp, #32
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071aa:	f7fd f959 	bl	8004460 <HAL_GetTick>
 80071ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d001      	beq.n	80071c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
 80071c2:	e12a      	b.n	800741a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_SPI_Transmit+0x36>
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e122      	b.n	800741a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_SPI_Transmit+0x48>
 80071de:	2302      	movs	r3, #2
 80071e0:	e11b      	b.n	800741a <HAL_SPI_Transmit+0x280>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2203      	movs	r2, #3
 80071ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	88fa      	ldrh	r2, [r7, #6]
 8007202:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007230:	d10f      	bne.n	8007252 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007240:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007250:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800725c:	2b40      	cmp	r3, #64	@ 0x40
 800725e:	d007      	beq.n	8007270 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800726e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007278:	d152      	bne.n	8007320 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <HAL_SPI_Transmit+0xee>
 8007282:	8b7b      	ldrh	r3, [r7, #26]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d145      	bne.n	8007314 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	881a      	ldrh	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3b01      	subs	r3, #1
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072ac:	e032      	b.n	8007314 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d112      	bne.n	80072e2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c0:	881a      	ldrh	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072cc:	1c9a      	adds	r2, r3, #2
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072e0:	e018      	b.n	8007314 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072e2:	f7fd f8bd 	bl	8004460 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d803      	bhi.n	80072fa <HAL_SPI_Transmit+0x160>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d102      	bne.n	8007300 <HAL_SPI_Transmit+0x166>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d109      	bne.n	8007314 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e082      	b.n	800741a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1c7      	bne.n	80072ae <HAL_SPI_Transmit+0x114>
 800731e:	e053      	b.n	80073c8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_SPI_Transmit+0x194>
 8007328:	8b7b      	ldrh	r3, [r7, #26]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d147      	bne.n	80073be <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	330c      	adds	r3, #12
 8007338:	7812      	ldrb	r2, [r2, #0]
 800733a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007354:	e033      	b.n	80073be <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b02      	cmp	r3, #2
 8007362:	d113      	bne.n	800738c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330c      	adds	r3, #12
 800736e:	7812      	ldrb	r2, [r2, #0]
 8007370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	86da      	strh	r2, [r3, #54]	@ 0x36
 800738a:	e018      	b.n	80073be <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800738c:	f7fd f868 	bl	8004460 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d803      	bhi.n	80073a4 <HAL_SPI_Transmit+0x20a>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d102      	bne.n	80073aa <HAL_SPI_Transmit+0x210>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d109      	bne.n	80073be <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e02d      	b.n	800741a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1c6      	bne.n	8007356 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073c8:	69fa      	ldr	r2, [r7, #28]
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fdd1 	bl	8007f74 <SPI_EndRxTxTransaction>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2220      	movs	r2, #32
 80073dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e000      	b.n	800741a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007418:	2300      	movs	r3, #0
  }
}
 800741a:	4618      	mov	r0, r3
 800741c:	3720      	adds	r7, #32
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b08a      	sub	sp, #40	@ 0x28
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007430:	2301      	movs	r3, #1
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007434:	f7fd f814 	bl	8004460 <HAL_GetTick>
 8007438:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007440:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007448:	887b      	ldrh	r3, [r7, #2]
 800744a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800744c:	7ffb      	ldrb	r3, [r7, #31]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d00c      	beq.n	800746c <HAL_SPI_TransmitReceive+0x4a>
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007458:	d106      	bne.n	8007468 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <HAL_SPI_TransmitReceive+0x46>
 8007462:	7ffb      	ldrb	r3, [r7, #31]
 8007464:	2b04      	cmp	r3, #4
 8007466:	d001      	beq.n	800746c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007468:	2302      	movs	r3, #2
 800746a:	e17f      	b.n	800776c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <HAL_SPI_TransmitReceive+0x5c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_SPI_TransmitReceive+0x5c>
 8007478:	887b      	ldrh	r3, [r7, #2]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e174      	b.n	800776c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x6e>
 800748c:	2302      	movs	r3, #2
 800748e:	e16d      	b.n	800776c <HAL_SPI_TransmitReceive+0x34a>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d003      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2205      	movs	r2, #5
 80074a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	887a      	ldrh	r2, [r7, #2]
 80074bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	887a      	ldrh	r2, [r7, #2]
 80074c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	887a      	ldrh	r2, [r7, #2]
 80074ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	887a      	ldrh	r2, [r7, #2]
 80074d4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ec:	2b40      	cmp	r3, #64	@ 0x40
 80074ee:	d007      	beq.n	8007500 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007508:	d17e      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_SPI_TransmitReceive+0xf6>
 8007512:	8afb      	ldrh	r3, [r7, #22]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d16c      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751c:	881a      	ldrh	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007528:	1c9a      	adds	r2, r3, #2
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800753c:	e059      	b.n	80075f2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d11b      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x162>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d016      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x162>
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	2b01      	cmp	r3, #1
 800755a:	d113      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007560:	881a      	ldrh	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	1c9a      	adds	r2, r3, #2
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b01      	cmp	r3, #1
 8007590:	d119      	bne.n	80075c6 <HAL_SPI_TransmitReceive+0x1a4>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d014      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	b292      	uxth	r2, r2
 80075a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	1c9a      	adds	r2, r3, #2
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075c2:	2301      	movs	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075c6:	f7fc ff4b 	bl	8004460 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d80d      	bhi.n	80075f2 <HAL_SPI_TransmitReceive+0x1d0>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d009      	beq.n	80075f2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e0bc      	b.n	800776c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1a0      	bne.n	800753e <HAL_SPI_TransmitReceive+0x11c>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d19b      	bne.n	800753e <HAL_SPI_TransmitReceive+0x11c>
 8007606:	e082      	b.n	800770e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <HAL_SPI_TransmitReceive+0x1f4>
 8007610:	8afb      	ldrh	r3, [r7, #22]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d171      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	7812      	ldrb	r2, [r2, #0]
 8007622:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007632:	b29b      	uxth	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800763c:	e05d      	b.n	80076fa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b02      	cmp	r3, #2
 800764a:	d11c      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x264>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d017      	beq.n	8007686 <HAL_SPI_TransmitReceive+0x264>
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	2b01      	cmp	r3, #1
 800765a:	d114      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	7812      	ldrb	r2, [r2, #0]
 8007668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b01      	cmp	r3, #1
 8007692:	d119      	bne.n	80076c8 <HAL_SPI_TransmitReceive+0x2a6>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076c4:	2301      	movs	r3, #1
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076c8:	f7fc feca 	bl	8004460 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d803      	bhi.n	80076e0 <HAL_SPI_TransmitReceive+0x2be>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076de:	d102      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x2c4>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e038      	b.n	800776c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d19c      	bne.n	800763e <HAL_SPI_TransmitReceive+0x21c>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d197      	bne.n	800763e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800770e:	6a3a      	ldr	r2, [r7, #32]
 8007710:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fc2e 	bl	8007f74 <SPI_EndRxTxTransaction>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d008      	beq.n	8007730 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2220      	movs	r2, #32
 8007722:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e01d      	b.n	800776c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007738:	2300      	movs	r3, #0
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	613b      	str	r3, [r7, #16]
 800774c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800776a:	2300      	movs	r3, #0
  }
}
 800776c:	4618      	mov	r0, r3
 800776e:	3728      	adds	r7, #40	@ 0x28
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007788:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d00c      	beq.n	80077b0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800779c:	d106      	bne.n	80077ac <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <HAL_SPI_TransmitReceive_DMA+0x38>
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d001      	beq.n	80077b0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80077ac:	2302      	movs	r3, #2
 80077ae:	e0cf      	b.n	8007950 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80077bc:	887b      	ldrh	r3, [r7, #2]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e0c4      	b.n	8007950 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_SPI_TransmitReceive_DMA+0x60>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e0bd      	b.n	8007950 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d003      	beq.n	80077f0 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2205      	movs	r2, #5
 80077ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	887a      	ldrh	r2, [r7, #2]
 8007800:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	887a      	ldrh	r2, [r7, #2]
 8007806:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	887a      	ldrh	r2, [r7, #2]
 8007812:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	887a      	ldrh	r2, [r7, #2]
 8007818:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b04      	cmp	r3, #4
 8007830:	d108      	bne.n	8007844 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007836:	4a48      	ldr	r2, [pc, #288]	@ (8007958 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007838:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783e:	4a47      	ldr	r2, [pc, #284]	@ (800795c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007840:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007842:	e007      	b.n	8007854 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007848:	4a45      	ldr	r2, [pc, #276]	@ (8007960 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800784a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007850:	4a44      	ldr	r2, [pc, #272]	@ (8007964 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007852:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007858:	4a43      	ldr	r2, [pc, #268]	@ (8007968 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800785a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007860:	2200      	movs	r2, #0
 8007862:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	4619      	mov	r1, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800787a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800787c:	f7fc ffe0 	bl	8004840 <HAL_DMA_Start_IT>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788a:	f043 0210 	orr.w	r2, r3, #16
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e058      	b.n	8007950 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0201 	orr.w	r2, r2, #1
 80078ac:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b2:	2200      	movs	r2, #0
 80078b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ba:	2200      	movs	r2, #0
 80078bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c2:	2200      	movs	r2, #0
 80078c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ca:	2200      	movs	r2, #0
 80078cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d6:	4619      	mov	r1, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078e6:	f7fc ffab 	bl	8004840 <HAL_DMA_Start_IT>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f4:	f043 0210 	orr.w	r2, r3, #16
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e023      	b.n	8007950 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007912:	2b40      	cmp	r3, #64	@ 0x40
 8007914:	d007      	beq.n	8007926 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007924:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0220 	orr.w	r2, r2, #32
 800793c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0202 	orr.w	r2, r2, #2
 800794c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	08007cf9 	.word	0x08007cf9
 800795c:	08007bc1 	.word	0x08007bc1
 8007960:	08007d15 	.word	0x08007d15
 8007964:	08007c69 	.word	0x08007c69
 8007968:	08007d31 	.word	0x08007d31

0800796c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10e      	bne.n	80079ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
    return;
 80079aa:	e0ce      	b.n	8007b4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <HAL_SPI_IRQHandler+0x5e>
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d004      	beq.n	80079ca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
    return;
 80079c8:	e0bf      	b.n	8007b4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <HAL_SPI_IRQHandler+0x7e>
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d105      	bne.n	80079ea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80b0 	beq.w	8007b4a <HAL_SPI_IRQHandler+0x1de>
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	f003 0320 	and.w	r3, r3, #32
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80aa 	beq.w	8007b4a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d023      	beq.n	8007a48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d011      	beq.n	8007a30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a10:	f043 0204 	orr.w	r2, r3, #4
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	e00b      	b.n	8007a48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a30:	2300      	movs	r3, #0
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	693b      	ldr	r3, [r7, #16]
        return;
 8007a46:	e080      	b.n	8007b4a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d014      	beq.n	8007a7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a56:	f043 0201 	orr.w	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00c      	beq.n	8007aa0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8a:	f043 0208 	orr.w	r2, r3, #8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a92:	2300      	movs	r3, #0
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d04f      	beq.n	8007b48 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ab6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <HAL_SPI_IRQHandler+0x168>
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d034      	beq.n	8007b3e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0203 	bic.w	r2, r2, #3
 8007ae2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d011      	beq.n	8007b10 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007af0:	4a17      	ldr	r2, [pc, #92]	@ (8007b50 <HAL_SPI_IRQHandler+0x1e4>)
 8007af2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fc ff69 	bl	80049d0 <HAL_DMA_Abort_IT>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d016      	beq.n	8007b46 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8007b50 <HAL_SPI_IRQHandler+0x1e4>)
 8007b1e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fc ff53 	bl	80049d0 <HAL_DMA_Abort_IT>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007b3c:	e003      	b.n	8007b46 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f826 	bl	8007b90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b44:	e000      	b.n	8007b48 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007b46:	bf00      	nop
    return;
 8007b48:	bf00      	nop
  }
}
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	08007d71 	.word	0x08007d71

08007b54 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bb2:	b2db      	uxtb	r3, r3
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bcc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bce:	f7fc fc47 	bl	8004460 <HAL_GetTick>
 8007bd2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007be2:	d03b      	beq.n	8007c5c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0220 	bic.w	r2, r2, #32
 8007bf2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10d      	bne.n	8007c18 <SPI_DMAReceiveCplt+0x58>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c04:	d108      	bne.n	8007c18 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0203 	bic.w	r2, r2, #3
 8007c14:	605a      	str	r2, [r3, #4]
 8007c16:	e007      	b.n	8007c28 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0201 	bic.w	r2, r2, #1
 8007c26:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	2164      	movs	r1, #100	@ 0x64
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f93b 	bl	8007ea8 <SPI_EndRxTransaction>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff ff9b 	bl	8007b90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007c5a:	e002      	b.n	8007c62 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff ff79 	bl	8007b54 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c74:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c76:	f7fc fbf3 	bl	8004460 <HAL_GetTick>
 8007c7a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c8a:	d02f      	beq.n	8007cec <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0220 	bic.w	r2, r2, #32
 8007c9a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	2164      	movs	r1, #100	@ 0x64
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 f967 	bl	8007f74 <SPI_EndRxTxTransaction>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb0:	f043 0220 	orr.w	r2, r3, #32
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0203 	bic.w	r2, r2, #3
 8007cc6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff ff53 	bl	8007b90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007cea:	e002      	b.n	8007cf2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7fa fee5 	bl	8002abc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff ff2e 	bl	8007b68 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d20:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff ff2a 	bl	8007b7c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0203 	bic.w	r2, r2, #3
 8007d4c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d52:	f043 0210 	orr.w	r2, r3, #16
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff ff14 	bl	8007b90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff ff00 	bl	8007b90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007da8:	f7fc fb5a 	bl	8004460 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007db8:	f7fc fb52 	bl	8004460 <HAL_GetTick>
 8007dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dbe:	4b39      	ldr	r3, [pc, #228]	@ (8007ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	015b      	lsls	r3, r3, #5
 8007dc4:	0d1b      	lsrs	r3, r3, #20
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	fb02 f303 	mul.w	r3, r2, r3
 8007dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dce:	e054      	b.n	8007e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd6:	d050      	beq.n	8007e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dd8:	f7fc fb42 	bl	8004460 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d902      	bls.n	8007dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d13d      	bne.n	8007e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e06:	d111      	bne.n	8007e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e10:	d004      	beq.n	8007e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e1a:	d107      	bne.n	8007e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e34:	d10f      	bne.n	8007e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e017      	b.n	8007e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4013      	ands	r3, r2
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	bf0c      	ite	eq
 8007e8a:	2301      	moveq	r3, #1
 8007e8c:	2300      	movne	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d19b      	bne.n	8007dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000030 	.word	0x20000030

08007ea8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ebc:	d111      	bne.n	8007ee2 <SPI_EndRxTransaction+0x3a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ec6:	d004      	beq.n	8007ed2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed0:	d107      	bne.n	8007ee2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ee0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eea:	d12a      	bne.n	8007f42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ef4:	d012      	beq.n	8007f1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2200      	movs	r2, #0
 8007efe:	2180      	movs	r1, #128	@ 0x80
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff ff49 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d02d      	beq.n	8007f68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f10:	f043 0220 	orr.w	r2, r3, #32
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e026      	b.n	8007f6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	2101      	movs	r1, #1
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff ff36 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01a      	beq.n	8007f68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f36:	f043 0220 	orr.w	r2, r3, #32
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e013      	b.n	8007f6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f7ff ff23 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5c:	f043 0220 	orr.w	r2, r3, #32
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e000      	b.n	8007f6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2201      	movs	r2, #1
 8007f88:	2102      	movs	r1, #2
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff ff04 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9a:	f043 0220 	orr.w	r2, r3, #32
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e032      	b.n	800800c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8008014 <SPI_EndRxTxTransaction+0xa0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a1b      	ldr	r2, [pc, #108]	@ (8008018 <SPI_EndRxTxTransaction+0xa4>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	0d5b      	lsrs	r3, r3, #21
 8007fb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fc4:	d112      	bne.n	8007fec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2180      	movs	r1, #128	@ 0x80
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fee1 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d016      	beq.n	800800a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe0:	f043 0220 	orr.w	r2, r3, #32
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e00f      	b.n	800800c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008002:	2b80      	cmp	r3, #128	@ 0x80
 8008004:	d0f2      	beq.n	8007fec <SPI_EndRxTxTransaction+0x78>
 8008006:	e000      	b.n	800800a <SPI_EndRxTxTransaction+0x96>
        break;
 8008008:	bf00      	nop
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	20000030 	.word	0x20000030
 8008018:	165e9f81 	.word	0x165e9f81

0800801c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e041      	b.n	80080b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fb feb4 	bl	8003db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3304      	adds	r3, #4
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f000 fc64 	bl	8008928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d001      	beq.n	80080d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e046      	b.n	8008162 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a23      	ldr	r2, [pc, #140]	@ (8008170 <HAL_TIM_Base_Start+0xb4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d022      	beq.n	800812c <HAL_TIM_Base_Start+0x70>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ee:	d01d      	beq.n	800812c <HAL_TIM_Base_Start+0x70>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008174 <HAL_TIM_Base_Start+0xb8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d018      	beq.n	800812c <HAL_TIM_Base_Start+0x70>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008178 <HAL_TIM_Base_Start+0xbc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d013      	beq.n	800812c <HAL_TIM_Base_Start+0x70>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1c      	ldr	r2, [pc, #112]	@ (800817c <HAL_TIM_Base_Start+0xc0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00e      	beq.n	800812c <HAL_TIM_Base_Start+0x70>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a1b      	ldr	r2, [pc, #108]	@ (8008180 <HAL_TIM_Base_Start+0xc4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d009      	beq.n	800812c <HAL_TIM_Base_Start+0x70>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a19      	ldr	r2, [pc, #100]	@ (8008184 <HAL_TIM_Base_Start+0xc8>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d004      	beq.n	800812c <HAL_TIM_Base_Start+0x70>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a18      	ldr	r2, [pc, #96]	@ (8008188 <HAL_TIM_Base_Start+0xcc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d111      	bne.n	8008150 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b06      	cmp	r3, #6
 800813c:	d010      	beq.n	8008160 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0201 	orr.w	r2, r2, #1
 800814c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814e:	e007      	b.n	8008160 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0201 	orr.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	40010000 	.word	0x40010000
 8008174:	40000400 	.word	0x40000400
 8008178:	40000800 	.word	0x40000800
 800817c:	40000c00 	.word	0x40000c00
 8008180:	40010400 	.word	0x40010400
 8008184:	40014000 	.word	0x40014000
 8008188:	40001800 	.word	0x40001800

0800818c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b01      	cmp	r3, #1
 800819e:	d001      	beq.n	80081a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e04e      	b.n	8008242 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0201 	orr.w	r2, r2, #1
 80081ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a23      	ldr	r2, [pc, #140]	@ (8008250 <HAL_TIM_Base_Start_IT+0xc4>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d022      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x80>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ce:	d01d      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x80>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008254 <HAL_TIM_Base_Start_IT+0xc8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d018      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x80>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a1e      	ldr	r2, [pc, #120]	@ (8008258 <HAL_TIM_Base_Start_IT+0xcc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d013      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x80>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a1c      	ldr	r2, [pc, #112]	@ (800825c <HAL_TIM_Base_Start_IT+0xd0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00e      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x80>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008260 <HAL_TIM_Base_Start_IT+0xd4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d009      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x80>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a19      	ldr	r2, [pc, #100]	@ (8008264 <HAL_TIM_Base_Start_IT+0xd8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d004      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x80>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a18      	ldr	r2, [pc, #96]	@ (8008268 <HAL_TIM_Base_Start_IT+0xdc>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d111      	bne.n	8008230 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b06      	cmp	r3, #6
 800821c:	d010      	beq.n	8008240 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f042 0201 	orr.w	r2, r2, #1
 800822c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822e:	e007      	b.n	8008240 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	40010000 	.word	0x40010000
 8008254:	40000400 	.word	0x40000400
 8008258:	40000800 	.word	0x40000800
 800825c:	40000c00 	.word	0x40000c00
 8008260:	40010400 	.word	0x40010400
 8008264:	40014000 	.word	0x40014000
 8008268:	40001800 	.word	0x40001800

0800826c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e041      	b.n	8008302 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f839 	bl	800830a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f000 fb3c 	bl	8008928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d109      	bne.n	8008344 <HAL_TIM_OC_Start+0x24>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	bf14      	ite	ne
 800833c:	2301      	movne	r3, #1
 800833e:	2300      	moveq	r3, #0
 8008340:	b2db      	uxtb	r3, r3
 8008342:	e022      	b.n	800838a <HAL_TIM_OC_Start+0x6a>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b04      	cmp	r3, #4
 8008348:	d109      	bne.n	800835e <HAL_TIM_OC_Start+0x3e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b01      	cmp	r3, #1
 8008354:	bf14      	ite	ne
 8008356:	2301      	movne	r3, #1
 8008358:	2300      	moveq	r3, #0
 800835a:	b2db      	uxtb	r3, r3
 800835c:	e015      	b.n	800838a <HAL_TIM_OC_Start+0x6a>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d109      	bne.n	8008378 <HAL_TIM_OC_Start+0x58>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b01      	cmp	r3, #1
 800836e:	bf14      	ite	ne
 8008370:	2301      	movne	r3, #1
 8008372:	2300      	moveq	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	e008      	b.n	800838a <HAL_TIM_OC_Start+0x6a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b01      	cmp	r3, #1
 8008382:	bf14      	ite	ne
 8008384:	2301      	movne	r3, #1
 8008386:	2300      	moveq	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e07c      	b.n	800848c <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_OC_Start+0x82>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083a0:	e013      	b.n	80083ca <HAL_TIM_OC_Start+0xaa>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d104      	bne.n	80083b2 <HAL_TIM_OC_Start+0x92>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083b0:	e00b      	b.n	80083ca <HAL_TIM_OC_Start+0xaa>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d104      	bne.n	80083c2 <HAL_TIM_OC_Start+0xa2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083c0:	e003      	b.n	80083ca <HAL_TIM_OC_Start+0xaa>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2202      	movs	r2, #2
 80083c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2201      	movs	r2, #1
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fd9e 	bl	8008f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a2d      	ldr	r2, [pc, #180]	@ (8008494 <HAL_TIM_OC_Start+0x174>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d004      	beq.n	80083ec <HAL_TIM_OC_Start+0xcc>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008498 <HAL_TIM_OC_Start+0x178>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d101      	bne.n	80083f0 <HAL_TIM_OC_Start+0xd0>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <HAL_TIM_OC_Start+0xd2>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d007      	beq.n	8008406 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008404:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a22      	ldr	r2, [pc, #136]	@ (8008494 <HAL_TIM_OC_Start+0x174>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d022      	beq.n	8008456 <HAL_TIM_OC_Start+0x136>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008418:	d01d      	beq.n	8008456 <HAL_TIM_OC_Start+0x136>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a1f      	ldr	r2, [pc, #124]	@ (800849c <HAL_TIM_OC_Start+0x17c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d018      	beq.n	8008456 <HAL_TIM_OC_Start+0x136>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a1d      	ldr	r2, [pc, #116]	@ (80084a0 <HAL_TIM_OC_Start+0x180>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <HAL_TIM_OC_Start+0x136>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a1c      	ldr	r2, [pc, #112]	@ (80084a4 <HAL_TIM_OC_Start+0x184>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00e      	beq.n	8008456 <HAL_TIM_OC_Start+0x136>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a16      	ldr	r2, [pc, #88]	@ (8008498 <HAL_TIM_OC_Start+0x178>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d009      	beq.n	8008456 <HAL_TIM_OC_Start+0x136>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a18      	ldr	r2, [pc, #96]	@ (80084a8 <HAL_TIM_OC_Start+0x188>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d004      	beq.n	8008456 <HAL_TIM_OC_Start+0x136>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a16      	ldr	r2, [pc, #88]	@ (80084ac <HAL_TIM_OC_Start+0x18c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d111      	bne.n	800847a <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b06      	cmp	r3, #6
 8008466:	d010      	beq.n	800848a <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0201 	orr.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008478:	e007      	b.n	800848a <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0201 	orr.w	r2, r2, #1
 8008488:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	40010000 	.word	0x40010000
 8008498:	40010400 	.word	0x40010400
 800849c:	40000400 	.word	0x40000400
 80084a0:	40000800 	.word	0x40000800
 80084a4:	40000c00 	.word	0x40000c00
 80084a8:	40014000 	.word	0x40014000
 80084ac:	40001800 	.word	0x40001800

080084b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d020      	beq.n	8008514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01b      	beq.n	8008514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0202 	mvn.w	r2, #2
 80084e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9f5 	bl	80088ea <HAL_TIM_IC_CaptureCallback>
 8008500:	e005      	b.n	800850e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f9e7 	bl	80088d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f9f8 	bl	80088fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d020      	beq.n	8008560 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01b      	beq.n	8008560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0204 	mvn.w	r2, #4
 8008530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2202      	movs	r2, #2
 8008536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f9cf 	bl	80088ea <HAL_TIM_IC_CaptureCallback>
 800854c:	e005      	b.n	800855a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f9c1 	bl	80088d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f9d2 	bl	80088fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f003 0308 	and.w	r3, r3, #8
 8008566:	2b00      	cmp	r3, #0
 8008568:	d020      	beq.n	80085ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01b      	beq.n	80085ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f06f 0208 	mvn.w	r2, #8
 800857c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2204      	movs	r2, #4
 8008582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f003 0303 	and.w	r3, r3, #3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f9a9 	bl	80088ea <HAL_TIM_IC_CaptureCallback>
 8008598:	e005      	b.n	80085a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f99b 	bl	80088d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f9ac 	bl	80088fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f003 0310 	and.w	r3, r3, #16
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d020      	beq.n	80085f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01b      	beq.n	80085f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f06f 0210 	mvn.w	r2, #16
 80085c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2208      	movs	r2, #8
 80085ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f983 	bl	80088ea <HAL_TIM_IC_CaptureCallback>
 80085e4:	e005      	b.n	80085f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f975 	bl	80088d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f986 	bl	80088fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00c      	beq.n	800861c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d007      	beq.n	800861c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f06f 0201 	mvn.w	r2, #1
 8008614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fa fa8c 	bl	8002b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00c      	beq.n	8008640 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fd16 	bl	800906c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00c      	beq.n	8008664 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	d007      	beq.n	8008664 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800865c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f957 	bl	8008912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00c      	beq.n	8008688 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f003 0320 	and.w	r3, r3, #32
 8008674:	2b00      	cmp	r3, #0
 8008676:	d007      	beq.n	8008688 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0220 	mvn.w	r2, #32
 8008680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fce8 	bl	8009058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008688:	bf00      	nop
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <HAL_TIM_OC_ConfigChannel+0x1e>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e048      	b.n	8008740 <HAL_TIM_OC_ConfigChannel+0xb0>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b0c      	cmp	r3, #12
 80086ba:	d839      	bhi.n	8008730 <HAL_TIM_OC_ConfigChannel+0xa0>
 80086bc:	a201      	add	r2, pc, #4	@ (adr r2, 80086c4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80086be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c2:	bf00      	nop
 80086c4:	080086f9 	.word	0x080086f9
 80086c8:	08008731 	.word	0x08008731
 80086cc:	08008731 	.word	0x08008731
 80086d0:	08008731 	.word	0x08008731
 80086d4:	08008707 	.word	0x08008707
 80086d8:	08008731 	.word	0x08008731
 80086dc:	08008731 	.word	0x08008731
 80086e0:	08008731 	.word	0x08008731
 80086e4:	08008715 	.word	0x08008715
 80086e8:	08008731 	.word	0x08008731
 80086ec:	08008731 	.word	0x08008731
 80086f0:	08008731 	.word	0x08008731
 80086f4:	08008723 	.word	0x08008723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 f9be 	bl	8008a80 <TIM_OC1_SetConfig>
      break;
 8008704:	e017      	b.n	8008736 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fa27 	bl	8008b60 <TIM_OC2_SetConfig>
      break;
 8008712:	e010      	b.n	8008736 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fa96 	bl	8008c4c <TIM_OC3_SetConfig>
      break;
 8008720:	e009      	b.n	8008736 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fb03 	bl	8008d34 <TIM_OC4_SetConfig>
      break;
 800872e:	e002      	b.n	8008736 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	75fb      	strb	r3, [r7, #23]
      break;
 8008734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_TIM_ConfigClockSource+0x1c>
 8008760:	2302      	movs	r3, #2
 8008762:	e0b4      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x186>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800878a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879c:	d03e      	beq.n	800881c <HAL_TIM_ConfigClockSource+0xd4>
 800879e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087a2:	f200 8087 	bhi.w	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087aa:	f000 8086 	beq.w	80088ba <HAL_TIM_ConfigClockSource+0x172>
 80087ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b2:	d87f      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087b4:	2b70      	cmp	r3, #112	@ 0x70
 80087b6:	d01a      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0xa6>
 80087b8:	2b70      	cmp	r3, #112	@ 0x70
 80087ba:	d87b      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087bc:	2b60      	cmp	r3, #96	@ 0x60
 80087be:	d050      	beq.n	8008862 <HAL_TIM_ConfigClockSource+0x11a>
 80087c0:	2b60      	cmp	r3, #96	@ 0x60
 80087c2:	d877      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087c4:	2b50      	cmp	r3, #80	@ 0x50
 80087c6:	d03c      	beq.n	8008842 <HAL_TIM_ConfigClockSource+0xfa>
 80087c8:	2b50      	cmp	r3, #80	@ 0x50
 80087ca:	d873      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087cc:	2b40      	cmp	r3, #64	@ 0x40
 80087ce:	d058      	beq.n	8008882 <HAL_TIM_ConfigClockSource+0x13a>
 80087d0:	2b40      	cmp	r3, #64	@ 0x40
 80087d2:	d86f      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087d4:	2b30      	cmp	r3, #48	@ 0x30
 80087d6:	d064      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x15a>
 80087d8:	2b30      	cmp	r3, #48	@ 0x30
 80087da:	d86b      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d060      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x15a>
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d867      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d05c      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x15a>
 80087e8:	2b10      	cmp	r3, #16
 80087ea:	d05a      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x15a>
 80087ec:	e062      	b.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087fe:	f000 fb69 	bl	8008ed4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	609a      	str	r2, [r3, #8]
      break;
 800881a:	e04f      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800882c:	f000 fb52 	bl	8008ed4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800883e:	609a      	str	r2, [r3, #8]
      break;
 8008840:	e03c      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800884e:	461a      	mov	r2, r3
 8008850:	f000 fac6 	bl	8008de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2150      	movs	r1, #80	@ 0x50
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fb1f 	bl	8008e9e <TIM_ITRx_SetConfig>
      break;
 8008860:	e02c      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800886e:	461a      	mov	r2, r3
 8008870:	f000 fae5 	bl	8008e3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2160      	movs	r1, #96	@ 0x60
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fb0f 	bl	8008e9e <TIM_ITRx_SetConfig>
      break;
 8008880:	e01c      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800888e:	461a      	mov	r2, r3
 8008890:	f000 faa6 	bl	8008de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2140      	movs	r1, #64	@ 0x40
 800889a:	4618      	mov	r0, r3
 800889c:	f000 faff 	bl	8008e9e <TIM_ITRx_SetConfig>
      break;
 80088a0:	e00c      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f000 faf6 	bl	8008e9e <TIM_ITRx_SetConfig>
      break;
 80088b2:	e003      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
      break;
 80088b8:	e000      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088de:	bf00      	nop
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
	...

08008928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a46      	ldr	r2, [pc, #280]	@ (8008a54 <TIM_Base_SetConfig+0x12c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d013      	beq.n	8008968 <TIM_Base_SetConfig+0x40>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008946:	d00f      	beq.n	8008968 <TIM_Base_SetConfig+0x40>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a43      	ldr	r2, [pc, #268]	@ (8008a58 <TIM_Base_SetConfig+0x130>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00b      	beq.n	8008968 <TIM_Base_SetConfig+0x40>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a42      	ldr	r2, [pc, #264]	@ (8008a5c <TIM_Base_SetConfig+0x134>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d007      	beq.n	8008968 <TIM_Base_SetConfig+0x40>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a41      	ldr	r2, [pc, #260]	@ (8008a60 <TIM_Base_SetConfig+0x138>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_Base_SetConfig+0x40>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a40      	ldr	r2, [pc, #256]	@ (8008a64 <TIM_Base_SetConfig+0x13c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d108      	bne.n	800897a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800896e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a35      	ldr	r2, [pc, #212]	@ (8008a54 <TIM_Base_SetConfig+0x12c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d02b      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008988:	d027      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a32      	ldr	r2, [pc, #200]	@ (8008a58 <TIM_Base_SetConfig+0x130>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d023      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a31      	ldr	r2, [pc, #196]	@ (8008a5c <TIM_Base_SetConfig+0x134>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d01f      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a30      	ldr	r2, [pc, #192]	@ (8008a60 <TIM_Base_SetConfig+0x138>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d01b      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a2f      	ldr	r2, [pc, #188]	@ (8008a64 <TIM_Base_SetConfig+0x13c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d017      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a2e      	ldr	r2, [pc, #184]	@ (8008a68 <TIM_Base_SetConfig+0x140>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d013      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a2d      	ldr	r2, [pc, #180]	@ (8008a6c <TIM_Base_SetConfig+0x144>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00f      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a2c      	ldr	r2, [pc, #176]	@ (8008a70 <TIM_Base_SetConfig+0x148>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d00b      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a2b      	ldr	r2, [pc, #172]	@ (8008a74 <TIM_Base_SetConfig+0x14c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d007      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a2a      	ldr	r2, [pc, #168]	@ (8008a78 <TIM_Base_SetConfig+0x150>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d003      	beq.n	80089da <TIM_Base_SetConfig+0xb2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a29      	ldr	r2, [pc, #164]	@ (8008a7c <TIM_Base_SetConfig+0x154>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d108      	bne.n	80089ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a10      	ldr	r2, [pc, #64]	@ (8008a54 <TIM_Base_SetConfig+0x12c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d003      	beq.n	8008a20 <TIM_Base_SetConfig+0xf8>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a12      	ldr	r2, [pc, #72]	@ (8008a64 <TIM_Base_SetConfig+0x13c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d103      	bne.n	8008a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	691a      	ldr	r2, [r3, #16]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d105      	bne.n	8008a46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	f023 0201 	bic.w	r2, r3, #1
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	611a      	str	r2, [r3, #16]
  }
}
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	40010000 	.word	0x40010000
 8008a58:	40000400 	.word	0x40000400
 8008a5c:	40000800 	.word	0x40000800
 8008a60:	40000c00 	.word	0x40000c00
 8008a64:	40010400 	.word	0x40010400
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40014400 	.word	0x40014400
 8008a70:	40014800 	.word	0x40014800
 8008a74:	40001800 	.word	0x40001800
 8008a78:	40001c00 	.word	0x40001c00
 8008a7c:	40002000 	.word	0x40002000

08008a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b087      	sub	sp, #28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	f023 0201 	bic.w	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0303 	bic.w	r3, r3, #3
 8008ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f023 0302 	bic.w	r3, r3, #2
 8008ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a20      	ldr	r2, [pc, #128]	@ (8008b58 <TIM_OC1_SetConfig+0xd8>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d003      	beq.n	8008ae4 <TIM_OC1_SetConfig+0x64>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a1f      	ldr	r2, [pc, #124]	@ (8008b5c <TIM_OC1_SetConfig+0xdc>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d10c      	bne.n	8008afe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f023 0308 	bic.w	r3, r3, #8
 8008aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f023 0304 	bic.w	r3, r3, #4
 8008afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a15      	ldr	r2, [pc, #84]	@ (8008b58 <TIM_OC1_SetConfig+0xd8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_OC1_SetConfig+0x8e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a14      	ldr	r2, [pc, #80]	@ (8008b5c <TIM_OC1_SetConfig+0xdc>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d111      	bne.n	8008b32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	621a      	str	r2, [r3, #32]
}
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40010400 	.word	0x40010400

08008b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	f023 0210 	bic.w	r2, r3, #16
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f023 0320 	bic.w	r3, r3, #32
 8008baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	011b      	lsls	r3, r3, #4
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a22      	ldr	r2, [pc, #136]	@ (8008c44 <TIM_OC2_SetConfig+0xe4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d003      	beq.n	8008bc8 <TIM_OC2_SetConfig+0x68>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a21      	ldr	r2, [pc, #132]	@ (8008c48 <TIM_OC2_SetConfig+0xe8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d10d      	bne.n	8008be4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008be2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a17      	ldr	r2, [pc, #92]	@ (8008c44 <TIM_OC2_SetConfig+0xe4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <TIM_OC2_SetConfig+0x94>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a16      	ldr	r2, [pc, #88]	@ (8008c48 <TIM_OC2_SetConfig+0xe8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d113      	bne.n	8008c1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	40010000 	.word	0x40010000
 8008c48:	40010400 	.word	0x40010400

08008c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0303 	bic.w	r3, r3, #3
 8008c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a21      	ldr	r2, [pc, #132]	@ (8008d2c <TIM_OC3_SetConfig+0xe0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d003      	beq.n	8008cb2 <TIM_OC3_SetConfig+0x66>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a20      	ldr	r2, [pc, #128]	@ (8008d30 <TIM_OC3_SetConfig+0xe4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d10d      	bne.n	8008cce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a16      	ldr	r2, [pc, #88]	@ (8008d2c <TIM_OC3_SetConfig+0xe0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_OC3_SetConfig+0x92>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a15      	ldr	r2, [pc, #84]	@ (8008d30 <TIM_OC3_SetConfig+0xe4>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d113      	bne.n	8008d06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	621a      	str	r2, [r3, #32]
}
 8008d20:	bf00      	nop
 8008d22:	371c      	adds	r7, #28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	40010000 	.word	0x40010000
 8008d30:	40010400 	.word	0x40010400

08008d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	021b      	lsls	r3, r3, #8
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	031b      	lsls	r3, r3, #12
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a12      	ldr	r2, [pc, #72]	@ (8008dd8 <TIM_OC4_SetConfig+0xa4>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d003      	beq.n	8008d9c <TIM_OC4_SetConfig+0x68>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a11      	ldr	r2, [pc, #68]	@ (8008ddc <TIM_OC4_SetConfig+0xa8>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d109      	bne.n	8008db0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	019b      	lsls	r3, r3, #6
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	621a      	str	r2, [r3, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40010000 	.word	0x40010000
 8008ddc:	40010400 	.word	0x40010400

08008de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	f023 0201 	bic.w	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	011b      	lsls	r3, r3, #4
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f023 030a 	bic.w	r3, r3, #10
 8008e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	621a      	str	r2, [r3, #32]
}
 8008e32:	bf00      	nop
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b087      	sub	sp, #28
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	f023 0210 	bic.w	r2, r3, #16
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	031b      	lsls	r3, r3, #12
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	011b      	lsls	r3, r3, #4
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	621a      	str	r2, [r3, #32]
}
 8008e92:	bf00      	nop
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b085      	sub	sp, #20
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	f043 0307 	orr.w	r3, r3, #7
 8008ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	609a      	str	r2, [r3, #8]
}
 8008ec8:	bf00      	nop
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	021a      	lsls	r2, r3, #8
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	609a      	str	r2, [r3, #8]
}
 8008f08:	bf00      	nop
 8008f0a:	371c      	adds	r7, #28
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f003 031f 	and.w	r3, r3, #31
 8008f26:	2201      	movs	r2, #1
 8008f28:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6a1a      	ldr	r2, [r3, #32]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	43db      	mvns	r3, r3
 8008f36:	401a      	ands	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6a1a      	ldr	r2, [r3, #32]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f003 031f 	and.w	r3, r3, #31
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	621a      	str	r2, [r3, #32]
}
 8008f52:	bf00      	nop
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
	...

08008f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d101      	bne.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e05a      	b.n	800902e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a21      	ldr	r2, [pc, #132]	@ (800903c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d022      	beq.n	8009002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fc4:	d01d      	beq.n	8009002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1d      	ldr	r2, [pc, #116]	@ (8009040 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d018      	beq.n	8009002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8009044 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d013      	beq.n	8009002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1a      	ldr	r2, [pc, #104]	@ (8009048 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00e      	beq.n	8009002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a18      	ldr	r2, [pc, #96]	@ (800904c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d009      	beq.n	8009002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a17      	ldr	r2, [pc, #92]	@ (8009050 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d004      	beq.n	8009002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a15      	ldr	r2, [pc, #84]	@ (8009054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d10c      	bne.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	4313      	orrs	r3, r2
 8009012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	40010000 	.word	0x40010000
 8009040:	40000400 	.word	0x40000400
 8009044:	40000800 	.word	0x40000800
 8009048:	40000c00 	.word	0x40000c00
 800904c:	40010400 	.word	0x40010400
 8009050:	40014000 	.word	0x40014000
 8009054:	40001800 	.word	0x40001800

08009058 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e042      	b.n	8009118 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7fa ff34 	bl	8003f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2224      	movs	r2, #36	@ 0x24
 80090b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68da      	ldr	r2, [r3, #12]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fe21 	bl	8009d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	695a      	ldr	r2, [r3, #20]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b20      	cmp	r3, #32
 8009138:	d112      	bne.n	8009160 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <HAL_UART_Receive_IT+0x26>
 8009140:	88fb      	ldrh	r3, [r7, #6]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e00b      	b.n	8009162 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009150:	88fb      	ldrh	r3, [r7, #6]
 8009152:	461a      	mov	r2, r3
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fbd9 	bl	800990e <UART_Start_Receive_IT>
 800915c:	4603      	mov	r3, r0
 800915e:	e000      	b.n	8009162 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009160:	2302      	movs	r3, #2
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08c      	sub	sp, #48	@ 0x30
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b20      	cmp	r3, #32
 8009184:	d156      	bne.n	8009234 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <HAL_UART_Transmit_DMA+0x26>
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e04f      	b.n	8009236 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	88fa      	ldrh	r2, [r7, #6]
 80091a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	88fa      	ldrh	r2, [r7, #6]
 80091a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2221      	movs	r2, #33	@ 0x21
 80091b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ba:	4a21      	ldr	r2, [pc, #132]	@ (8009240 <HAL_UART_Transmit_DMA+0xd4>)
 80091bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c2:	4a20      	ldr	r2, [pc, #128]	@ (8009244 <HAL_UART_Transmit_DMA+0xd8>)
 80091c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009248 <HAL_UART_Transmit_DMA+0xdc>)
 80091cc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d2:	2200      	movs	r2, #0
 80091d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80091d6:	f107 0308 	add.w	r3, r7, #8
 80091da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80091e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e2:	6819      	ldr	r1, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3304      	adds	r3, #4
 80091ea:	461a      	mov	r2, r3
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	f7fb fb27 	bl	8004840 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3314      	adds	r3, #20
 8009202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	617b      	str	r3, [r7, #20]
   return(result);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3314      	adds	r3, #20
 800921a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800921c:	627a      	str	r2, [r7, #36]	@ 0x24
 800921e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6a39      	ldr	r1, [r7, #32]
 8009222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	61fb      	str	r3, [r7, #28]
   return(result);
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e5      	bne.n	80091fc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	e000      	b.n	8009236 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009234:	2302      	movs	r3, #2
  }
}
 8009236:	4618      	mov	r0, r3
 8009238:	3730      	adds	r7, #48	@ 0x30
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	080097c5 	.word	0x080097c5
 8009244:	0800985f 	.word	0x0800985f
 8009248:	0800987b 	.word	0x0800987b

0800924c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b0ba      	sub	sp, #232	@ 0xe8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009272:	2300      	movs	r3, #0
 8009274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009278:	2300      	movs	r3, #0
 800927a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800927e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009282:	f003 030f 	and.w	r3, r3, #15
 8009286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800928a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10f      	bne.n	80092b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <HAL_UART_IRQHandler+0x66>
 800929e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a2:	f003 0320 	and.w	r3, r3, #32
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fc70 	bl	8009b90 <UART_Receive_IT>
      return;
 80092b0:	e25b      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80092b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 80de 	beq.w	8009478 <HAL_UART_IRQHandler+0x22c>
 80092bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80092c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 80d1 	beq.w	8009478 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80092d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00b      	beq.n	80092fa <HAL_UART_IRQHandler+0xae>
 80092e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092f2:	f043 0201 	orr.w	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fe:	f003 0304 	and.w	r3, r3, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00b      	beq.n	800931e <HAL_UART_IRQHandler+0xd2>
 8009306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d005      	beq.n	800931e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009316:	f043 0202 	orr.w	r2, r3, #2
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800931e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00b      	beq.n	8009342 <HAL_UART_IRQHandler+0xf6>
 800932a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d005      	beq.n	8009342 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933a:	f043 0204 	orr.w	r2, r3, #4
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009346:	f003 0308 	and.w	r3, r3, #8
 800934a:	2b00      	cmp	r3, #0
 800934c:	d011      	beq.n	8009372 <HAL_UART_IRQHandler+0x126>
 800934e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d105      	bne.n	8009366 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800935a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d005      	beq.n	8009372 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800936a:	f043 0208 	orr.w	r2, r3, #8
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 81f2 	beq.w	8009760 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009380:	f003 0320 	and.w	r3, r3, #32
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <HAL_UART_IRQHandler+0x14e>
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938c:	f003 0320 	and.w	r3, r3, #32
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fbfb 	bl	8009b90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a4:	2b40      	cmp	r3, #64	@ 0x40
 80093a6:	bf0c      	ite	eq
 80093a8:	2301      	moveq	r3, #1
 80093aa:	2300      	movne	r3, #0
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b6:	f003 0308 	and.w	r3, r3, #8
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d103      	bne.n	80093c6 <HAL_UART_IRQHandler+0x17a>
 80093be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d04f      	beq.n	8009466 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fb03 	bl	80099d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d6:	2b40      	cmp	r3, #64	@ 0x40
 80093d8:	d141      	bne.n	800945e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3314      	adds	r3, #20
 80093e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3314      	adds	r3, #20
 8009402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800940a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800941e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1d9      	bne.n	80093da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d013      	beq.n	8009456 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009432:	4a7e      	ldr	r2, [pc, #504]	@ (800962c <HAL_UART_IRQHandler+0x3e0>)
 8009434:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800943a:	4618      	mov	r0, r3
 800943c:	f7fb fac8 	bl	80049d0 <HAL_DMA_Abort_IT>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d016      	beq.n	8009474 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009450:	4610      	mov	r0, r2
 8009452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009454:	e00e      	b.n	8009474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f99e 	bl	8009798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945c:	e00a      	b.n	8009474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f99a 	bl	8009798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009464:	e006      	b.n	8009474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f996 	bl	8009798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009472:	e175      	b.n	8009760 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009474:	bf00      	nop
    return;
 8009476:	e173      	b.n	8009760 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947c:	2b01      	cmp	r3, #1
 800947e:	f040 814f 	bne.w	8009720 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 8148 	beq.w	8009720 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 8141 	beq.w	8009720 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800949e:	2300      	movs	r3, #0
 80094a0:	60bb      	str	r3, [r7, #8]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	60bb      	str	r3, [r7, #8]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094be:	2b40      	cmp	r3, #64	@ 0x40
 80094c0:	f040 80b6 	bne.w	8009630 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8145 	beq.w	8009764 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094e2:	429a      	cmp	r2, r3
 80094e4:	f080 813e 	bcs.w	8009764 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094fa:	f000 8088 	beq.w	800960e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	330c      	adds	r3, #12
 8009504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800951c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	330c      	adds	r3, #12
 8009526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800952a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800952e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1d9      	bne.n	80094fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3314      	adds	r3, #20
 8009550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800955a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800955c:	f023 0301 	bic.w	r3, r3, #1
 8009560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3314      	adds	r3, #20
 800956a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800956e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e1      	bne.n	800954a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3314      	adds	r3, #20
 800958c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800959c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3314      	adds	r3, #20
 80095a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80095b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e3      	bne.n	8009586 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	330c      	adds	r3, #12
 80095d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095de:	f023 0310 	bic.w	r3, r3, #16
 80095e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	330c      	adds	r3, #12
 80095ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80095f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80095f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e3      	bne.n	80095cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009608:	4618      	mov	r0, r3
 800960a:	f7fb f971 	bl	80048f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2202      	movs	r2, #2
 8009612:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800961c:	b29b      	uxth	r3, r3
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	b29b      	uxth	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f8c1 	bl	80097ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800962a:	e09b      	b.n	8009764 <HAL_UART_IRQHandler+0x518>
 800962c:	08009a99 	.word	0x08009a99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009638:	b29b      	uxth	r3, r3
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 808e 	beq.w	8009768 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800964c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8089 	beq.w	8009768 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	330c      	adds	r3, #12
 800965c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800966c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800967a:	647a      	str	r2, [r7, #68]	@ 0x44
 800967c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e3      	bne.n	8009656 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3314      	adds	r3, #20
 8009694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	e853 3f00 	ldrex	r3, [r3]
 800969c:	623b      	str	r3, [r7, #32]
   return(result);
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	f023 0301 	bic.w	r3, r3, #1
 80096a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3314      	adds	r3, #20
 80096ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80096b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80096b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e3      	bne.n	800968e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	330c      	adds	r3, #12
 80096da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0310 	bic.w	r3, r3, #16
 80096ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	330c      	adds	r3, #12
 80096f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80096f8:	61fa      	str	r2, [r7, #28]
 80096fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	69b9      	ldr	r1, [r7, #24]
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	617b      	str	r3, [r7, #20]
   return(result);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e3      	bne.n	80096d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f847 	bl	80097ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800971e:	e023      	b.n	8009768 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009728:	2b00      	cmp	r3, #0
 800972a:	d009      	beq.n	8009740 <HAL_UART_IRQHandler+0x4f4>
 800972c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f9c1 	bl	8009ac0 <UART_Transmit_IT>
    return;
 800973e:	e014      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00e      	beq.n	800976a <HAL_UART_IRQHandler+0x51e>
 800974c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	d008      	beq.n	800976a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fa01 	bl	8009b60 <UART_EndTransmit_IT>
    return;
 800975e:	e004      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
    return;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
      return;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
      return;
 8009768:	bf00      	nop
  }
}
 800976a:	37e8      	adds	r7, #232	@ 0xe8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b090      	sub	sp, #64	@ 0x40
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d137      	bne.n	8009850 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80097e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097e2:	2200      	movs	r2, #0
 80097e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3314      	adds	r3, #20
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	623b      	str	r3, [r7, #32]
   return(result);
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3314      	adds	r3, #20
 8009804:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009806:	633a      	str	r2, [r7, #48]	@ 0x30
 8009808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800980c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e5      	bne.n	80097e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800981a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	330c      	adds	r3, #12
 8009820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	60fb      	str	r3, [r7, #12]
   return(result);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009830:	637b      	str	r3, [r7, #52]	@ 0x34
 8009832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	330c      	adds	r3, #12
 8009838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800983a:	61fa      	str	r2, [r7, #28]
 800983c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	69b9      	ldr	r1, [r7, #24]
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	617b      	str	r3, [r7, #20]
   return(result);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e5      	bne.n	800981a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800984e:	e002      	b.n	8009856 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009850:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009852:	f7ff ff8d 	bl	8009770 <HAL_UART_TxCpltCallback>
}
 8009856:	bf00      	nop
 8009858:	3740      	adds	r7, #64	@ 0x40
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800986a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7ff ff89 	bl	8009784 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800988a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009896:	2b80      	cmp	r3, #128	@ 0x80
 8009898:	bf0c      	ite	eq
 800989a:	2301      	moveq	r3, #1
 800989c:	2300      	movne	r3, #0
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b21      	cmp	r3, #33	@ 0x21
 80098ac:	d108      	bne.n	80098c0 <UART_DMAError+0x46>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d005      	beq.n	80098c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2200      	movs	r2, #0
 80098b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80098ba:	68b8      	ldr	r0, [r7, #8]
 80098bc:	f000 f861 	bl	8009982 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ca:	2b40      	cmp	r3, #64	@ 0x40
 80098cc:	bf0c      	ite	eq
 80098ce:	2301      	moveq	r3, #1
 80098d0:	2300      	movne	r3, #0
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b22      	cmp	r3, #34	@ 0x22
 80098e0:	d108      	bne.n	80098f4 <UART_DMAError+0x7a>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d005      	beq.n	80098f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2200      	movs	r2, #0
 80098ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80098ee:	68b8      	ldr	r0, [r7, #8]
 80098f0:	f000 f86f 	bl	80099d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f8:	f043 0210 	orr.w	r2, r3, #16
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009900:	68b8      	ldr	r0, [r7, #8]
 8009902:	f7ff ff49 	bl	8009798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800990e:	b480      	push	{r7}
 8009910:	b085      	sub	sp, #20
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	4613      	mov	r3, r2
 800991a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	88fa      	ldrh	r2, [r7, #6]
 8009926:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	88fa      	ldrh	r2, [r7, #6]
 800992c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2222      	movs	r2, #34	@ 0x22
 8009938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d007      	beq.n	8009954 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009952:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	695a      	ldr	r2, [r3, #20]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0220 	orr.w	r2, r2, #32
 8009972:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009982:	b480      	push	{r7}
 8009984:	b089      	sub	sp, #36	@ 0x24
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	330c      	adds	r3, #12
 8009990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	60bb      	str	r3, [r7, #8]
   return(result);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80099a0:	61fb      	str	r3, [r7, #28]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	330c      	adds	r3, #12
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	61ba      	str	r2, [r7, #24]
 80099ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	6979      	ldr	r1, [r7, #20]
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	613b      	str	r3, [r7, #16]
   return(result);
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e5      	bne.n	800998a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80099c6:	bf00      	nop
 80099c8:	3724      	adds	r7, #36	@ 0x24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b095      	sub	sp, #84	@ 0x54
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	330c      	adds	r3, #12
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	330c      	adds	r3, #12
 80099f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80099fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e5      	bne.n	80099da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3314      	adds	r3, #20
 8009a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3314      	adds	r3, #20
 8009a2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e5      	bne.n	8009a0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d119      	bne.n	8009a7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	330c      	adds	r3, #12
 8009a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	e853 3f00 	ldrex	r3, [r3]
 8009a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	f023 0310 	bic.w	r3, r3, #16
 8009a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	330c      	adds	r3, #12
 8009a68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a6a:	61ba      	str	r2, [r7, #24]
 8009a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	6979      	ldr	r1, [r7, #20]
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	e841 2300 	strex	r3, r2, [r1]
 8009a76:	613b      	str	r3, [r7, #16]
   return(result);
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e5      	bne.n	8009a4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009a8c:	bf00      	nop
 8009a8e:	3754      	adds	r7, #84	@ 0x54
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f7ff fe70 	bl	8009798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ab8:	bf00      	nop
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b21      	cmp	r3, #33	@ 0x21
 8009ad2:	d13e      	bne.n	8009b52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009adc:	d114      	bne.n	8009b08 <UART_Transmit_IT+0x48>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d110      	bne.n	8009b08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009afa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	1c9a      	adds	r2, r3, #2
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	621a      	str	r2, [r3, #32]
 8009b06:	e008      	b.n	8009b1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	1c59      	adds	r1, r3, #1
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	6211      	str	r1, [r2, #32]
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	3b01      	subs	r3, #1
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	4619      	mov	r1, r3
 8009b28:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10f      	bne.n	8009b4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e000      	b.n	8009b54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b52:	2302      	movs	r3, #2
  }
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fdf5 	bl	8009770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08c      	sub	sp, #48	@ 0x30
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b22      	cmp	r3, #34	@ 0x22
 8009ba2:	f040 80ae 	bne.w	8009d02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bae:	d117      	bne.n	8009be0 <UART_Receive_IT+0x50>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d113      	bne.n	8009be0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd8:	1c9a      	adds	r2, r3, #2
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8009bde:	e026      	b.n	8009c2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bf2:	d007      	beq.n	8009c04 <UART_Receive_IT+0x74>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <UART_Receive_IT+0x82>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d106      	bne.n	8009c12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	e008      	b.n	8009c24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d15d      	bne.n	8009cfe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68da      	ldr	r2, [r3, #12]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 0220 	bic.w	r2, r2, #32
 8009c50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68da      	ldr	r2, [r3, #12]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	695a      	ldr	r2, [r3, #20]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0201 	bic.w	r2, r2, #1
 8009c70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2220      	movs	r2, #32
 8009c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d135      	bne.n	8009cf4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	330c      	adds	r3, #12
 8009c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	f023 0310 	bic.w	r3, r3, #16
 8009ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cae:	623a      	str	r2, [r7, #32]
 8009cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	69f9      	ldr	r1, [r7, #28]
 8009cb4:	6a3a      	ldr	r2, [r7, #32]
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e5      	bne.n	8009c8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	2b10      	cmp	r3, #16
 8009cce:	d10a      	bne.n	8009ce6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff fd5d 	bl	80097ac <HAL_UARTEx_RxEventCallback>
 8009cf2:	e002      	b.n	8009cfa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7f8 fe73 	bl	80029e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e002      	b.n	8009d04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e000      	b.n	8009d04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d02:	2302      	movs	r3, #2
  }
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3730      	adds	r7, #48	@ 0x30
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d10:	b0c0      	sub	sp, #256	@ 0x100
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d28:	68d9      	ldr	r1, [r3, #12]
 8009d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	ea40 0301 	orr.w	r3, r0, r1
 8009d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	431a      	orrs	r2, r3
 8009d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009d64:	f021 010c 	bic.w	r1, r1, #12
 8009d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d72:	430b      	orrs	r3, r1
 8009d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d86:	6999      	ldr	r1, [r3, #24]
 8009d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	ea40 0301 	orr.w	r3, r0, r1
 8009d92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	4b8f      	ldr	r3, [pc, #572]	@ (8009fd8 <UART_SetConfig+0x2cc>)
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d005      	beq.n	8009dac <UART_SetConfig+0xa0>
 8009da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	4b8d      	ldr	r3, [pc, #564]	@ (8009fdc <UART_SetConfig+0x2d0>)
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d104      	bne.n	8009db6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009dac:	f7fd f958 	bl	8007060 <HAL_RCC_GetPCLK2Freq>
 8009db0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009db4:	e003      	b.n	8009dbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009db6:	f7fd f93f 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 8009dba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc2:	69db      	ldr	r3, [r3, #28]
 8009dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dc8:	f040 810c 	bne.w	8009fe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009dd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009dde:	4622      	mov	r2, r4
 8009de0:	462b      	mov	r3, r5
 8009de2:	1891      	adds	r1, r2, r2
 8009de4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009de6:	415b      	adcs	r3, r3
 8009de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009dee:	4621      	mov	r1, r4
 8009df0:	eb12 0801 	adds.w	r8, r2, r1
 8009df4:	4629      	mov	r1, r5
 8009df6:	eb43 0901 	adc.w	r9, r3, r1
 8009dfa:	f04f 0200 	mov.w	r2, #0
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e0e:	4690      	mov	r8, r2
 8009e10:	4699      	mov	r9, r3
 8009e12:	4623      	mov	r3, r4
 8009e14:	eb18 0303 	adds.w	r3, r8, r3
 8009e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e1c:	462b      	mov	r3, r5
 8009e1e:	eb49 0303 	adc.w	r3, r9, r3
 8009e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009e32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	18db      	adds	r3, r3, r3
 8009e3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e40:	4613      	mov	r3, r2
 8009e42:	eb42 0303 	adc.w	r3, r2, r3
 8009e46:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009e4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009e50:	f7f6 fefa 	bl	8000c48 <__aeabi_uldivmod>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4b61      	ldr	r3, [pc, #388]	@ (8009fe0 <UART_SetConfig+0x2d4>)
 8009e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	011c      	lsls	r4, r3, #4
 8009e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e66:	2200      	movs	r2, #0
 8009e68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009e70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009e74:	4642      	mov	r2, r8
 8009e76:	464b      	mov	r3, r9
 8009e78:	1891      	adds	r1, r2, r2
 8009e7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009e7c:	415b      	adcs	r3, r3
 8009e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009e84:	4641      	mov	r1, r8
 8009e86:	eb12 0a01 	adds.w	sl, r2, r1
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	eb43 0b01 	adc.w	fp, r3, r1
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ea4:	4692      	mov	sl, r2
 8009ea6:	469b      	mov	fp, r3
 8009ea8:	4643      	mov	r3, r8
 8009eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8009eae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8009eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ec8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009ecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	18db      	adds	r3, r3, r3
 8009ed4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	eb42 0303 	adc.w	r3, r2, r3
 8009edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009ee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009ee6:	f7f6 feaf 	bl	8000c48 <__aeabi_uldivmod>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4611      	mov	r1, r2
 8009ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8009fe0 <UART_SetConfig+0x2d4>)
 8009ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ef6:	095b      	lsrs	r3, r3, #5
 8009ef8:	2264      	movs	r2, #100	@ 0x64
 8009efa:	fb02 f303 	mul.w	r3, r2, r3
 8009efe:	1acb      	subs	r3, r1, r3
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009f06:	4b36      	ldr	r3, [pc, #216]	@ (8009fe0 <UART_SetConfig+0x2d4>)
 8009f08:	fba3 2302 	umull	r2, r3, r3, r2
 8009f0c:	095b      	lsrs	r3, r3, #5
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009f14:	441c      	add	r4, r3
 8009f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009f24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	1891      	adds	r1, r2, r2
 8009f2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009f30:	415b      	adcs	r3, r3
 8009f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009f38:	4641      	mov	r1, r8
 8009f3a:	1851      	adds	r1, r2, r1
 8009f3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f3e:	4649      	mov	r1, r9
 8009f40:	414b      	adcs	r3, r1
 8009f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f44:	f04f 0200 	mov.w	r2, #0
 8009f48:	f04f 0300 	mov.w	r3, #0
 8009f4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009f50:	4659      	mov	r1, fp
 8009f52:	00cb      	lsls	r3, r1, #3
 8009f54:	4651      	mov	r1, sl
 8009f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f5a:	4651      	mov	r1, sl
 8009f5c:	00ca      	lsls	r2, r1, #3
 8009f5e:	4610      	mov	r0, r2
 8009f60:	4619      	mov	r1, r3
 8009f62:	4603      	mov	r3, r0
 8009f64:	4642      	mov	r2, r8
 8009f66:	189b      	adds	r3, r3, r2
 8009f68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f6c:	464b      	mov	r3, r9
 8009f6e:	460a      	mov	r2, r1
 8009f70:	eb42 0303 	adc.w	r3, r2, r3
 8009f74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	18db      	adds	r3, r3, r3
 8009f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f92:	4613      	mov	r3, r2
 8009f94:	eb42 0303 	adc.w	r3, r2, r3
 8009f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009f9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009fa2:	f7f6 fe51 	bl	8000c48 <__aeabi_uldivmod>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe0 <UART_SetConfig+0x2d4>)
 8009fac:	fba3 1302 	umull	r1, r3, r3, r2
 8009fb0:	095b      	lsrs	r3, r3, #5
 8009fb2:	2164      	movs	r1, #100	@ 0x64
 8009fb4:	fb01 f303 	mul.w	r3, r1, r3
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	3332      	adds	r3, #50	@ 0x32
 8009fbe:	4a08      	ldr	r2, [pc, #32]	@ (8009fe0 <UART_SetConfig+0x2d4>)
 8009fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc4:	095b      	lsrs	r3, r3, #5
 8009fc6:	f003 0207 	and.w	r2, r3, #7
 8009fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4422      	add	r2, r4
 8009fd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fd4:	e106      	b.n	800a1e4 <UART_SetConfig+0x4d8>
 8009fd6:	bf00      	nop
 8009fd8:	40011000 	.word	0x40011000
 8009fdc:	40011400 	.word	0x40011400
 8009fe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009fee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009ff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009ff6:	4642      	mov	r2, r8
 8009ff8:	464b      	mov	r3, r9
 8009ffa:	1891      	adds	r1, r2, r2
 8009ffc:	6239      	str	r1, [r7, #32]
 8009ffe:	415b      	adcs	r3, r3
 800a000:	627b      	str	r3, [r7, #36]	@ 0x24
 800a002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a006:	4641      	mov	r1, r8
 800a008:	1854      	adds	r4, r2, r1
 800a00a:	4649      	mov	r1, r9
 800a00c:	eb43 0501 	adc.w	r5, r3, r1
 800a010:	f04f 0200 	mov.w	r2, #0
 800a014:	f04f 0300 	mov.w	r3, #0
 800a018:	00eb      	lsls	r3, r5, #3
 800a01a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a01e:	00e2      	lsls	r2, r4, #3
 800a020:	4614      	mov	r4, r2
 800a022:	461d      	mov	r5, r3
 800a024:	4643      	mov	r3, r8
 800a026:	18e3      	adds	r3, r4, r3
 800a028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a02c:	464b      	mov	r3, r9
 800a02e:	eb45 0303 	adc.w	r3, r5, r3
 800a032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a042:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a052:	4629      	mov	r1, r5
 800a054:	008b      	lsls	r3, r1, #2
 800a056:	4621      	mov	r1, r4
 800a058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a05c:	4621      	mov	r1, r4
 800a05e:	008a      	lsls	r2, r1, #2
 800a060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a064:	f7f6 fdf0 	bl	8000c48 <__aeabi_uldivmod>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4b60      	ldr	r3, [pc, #384]	@ (800a1f0 <UART_SetConfig+0x4e4>)
 800a06e:	fba3 2302 	umull	r2, r3, r3, r2
 800a072:	095b      	lsrs	r3, r3, #5
 800a074:	011c      	lsls	r4, r3, #4
 800a076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a080:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a088:	4642      	mov	r2, r8
 800a08a:	464b      	mov	r3, r9
 800a08c:	1891      	adds	r1, r2, r2
 800a08e:	61b9      	str	r1, [r7, #24]
 800a090:	415b      	adcs	r3, r3
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a098:	4641      	mov	r1, r8
 800a09a:	1851      	adds	r1, r2, r1
 800a09c:	6139      	str	r1, [r7, #16]
 800a09e:	4649      	mov	r1, r9
 800a0a0:	414b      	adcs	r3, r1
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	f04f 0200 	mov.w	r2, #0
 800a0a8:	f04f 0300 	mov.w	r3, #0
 800a0ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a0b0:	4659      	mov	r1, fp
 800a0b2:	00cb      	lsls	r3, r1, #3
 800a0b4:	4651      	mov	r1, sl
 800a0b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0ba:	4651      	mov	r1, sl
 800a0bc:	00ca      	lsls	r2, r1, #3
 800a0be:	4610      	mov	r0, r2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	189b      	adds	r3, r3, r2
 800a0c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0cc:	464b      	mov	r3, r9
 800a0ce:	460a      	mov	r2, r1
 800a0d0:	eb42 0303 	adc.w	r3, r2, r3
 800a0d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a0e4:	f04f 0200 	mov.w	r2, #0
 800a0e8:	f04f 0300 	mov.w	r3, #0
 800a0ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	008b      	lsls	r3, r1, #2
 800a0f4:	4641      	mov	r1, r8
 800a0f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0fa:	4641      	mov	r1, r8
 800a0fc:	008a      	lsls	r2, r1, #2
 800a0fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a102:	f7f6 fda1 	bl	8000c48 <__aeabi_uldivmod>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4611      	mov	r1, r2
 800a10c:	4b38      	ldr	r3, [pc, #224]	@ (800a1f0 <UART_SetConfig+0x4e4>)
 800a10e:	fba3 2301 	umull	r2, r3, r3, r1
 800a112:	095b      	lsrs	r3, r3, #5
 800a114:	2264      	movs	r2, #100	@ 0x64
 800a116:	fb02 f303 	mul.w	r3, r2, r3
 800a11a:	1acb      	subs	r3, r1, r3
 800a11c:	011b      	lsls	r3, r3, #4
 800a11e:	3332      	adds	r3, #50	@ 0x32
 800a120:	4a33      	ldr	r2, [pc, #204]	@ (800a1f0 <UART_SetConfig+0x4e4>)
 800a122:	fba2 2303 	umull	r2, r3, r2, r3
 800a126:	095b      	lsrs	r3, r3, #5
 800a128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a12c:	441c      	add	r4, r3
 800a12e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a132:	2200      	movs	r2, #0
 800a134:	673b      	str	r3, [r7, #112]	@ 0x70
 800a136:	677a      	str	r2, [r7, #116]	@ 0x74
 800a138:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a13c:	4642      	mov	r2, r8
 800a13e:	464b      	mov	r3, r9
 800a140:	1891      	adds	r1, r2, r2
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	415b      	adcs	r3, r3
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a14c:	4641      	mov	r1, r8
 800a14e:	1851      	adds	r1, r2, r1
 800a150:	6039      	str	r1, [r7, #0]
 800a152:	4649      	mov	r1, r9
 800a154:	414b      	adcs	r3, r1
 800a156:	607b      	str	r3, [r7, #4]
 800a158:	f04f 0200 	mov.w	r2, #0
 800a15c:	f04f 0300 	mov.w	r3, #0
 800a160:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a164:	4659      	mov	r1, fp
 800a166:	00cb      	lsls	r3, r1, #3
 800a168:	4651      	mov	r1, sl
 800a16a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a16e:	4651      	mov	r1, sl
 800a170:	00ca      	lsls	r2, r1, #3
 800a172:	4610      	mov	r0, r2
 800a174:	4619      	mov	r1, r3
 800a176:	4603      	mov	r3, r0
 800a178:	4642      	mov	r2, r8
 800a17a:	189b      	adds	r3, r3, r2
 800a17c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a17e:	464b      	mov	r3, r9
 800a180:	460a      	mov	r2, r1
 800a182:	eb42 0303 	adc.w	r3, r2, r3
 800a186:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	663b      	str	r3, [r7, #96]	@ 0x60
 800a192:	667a      	str	r2, [r7, #100]	@ 0x64
 800a194:	f04f 0200 	mov.w	r2, #0
 800a198:	f04f 0300 	mov.w	r3, #0
 800a19c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	008b      	lsls	r3, r1, #2
 800a1a4:	4641      	mov	r1, r8
 800a1a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1aa:	4641      	mov	r1, r8
 800a1ac:	008a      	lsls	r2, r1, #2
 800a1ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a1b2:	f7f6 fd49 	bl	8000c48 <__aeabi_uldivmod>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f0 <UART_SetConfig+0x4e4>)
 800a1bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a1c0:	095b      	lsrs	r3, r3, #5
 800a1c2:	2164      	movs	r1, #100	@ 0x64
 800a1c4:	fb01 f303 	mul.w	r3, r1, r3
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	011b      	lsls	r3, r3, #4
 800a1cc:	3332      	adds	r3, #50	@ 0x32
 800a1ce:	4a08      	ldr	r2, [pc, #32]	@ (800a1f0 <UART_SetConfig+0x4e4>)
 800a1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d4:	095b      	lsrs	r3, r3, #5
 800a1d6:	f003 020f 	and.w	r2, r3, #15
 800a1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4422      	add	r2, r4
 800a1e2:	609a      	str	r2, [r3, #8]
}
 800a1e4:	bf00      	nop
 800a1e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1f0:	51eb851f 	.word	0x51eb851f

0800a1f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	f107 001c 	add.w	r0, r7, #28
 800a202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a206:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d123      	bne.n	800a256 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a236:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d105      	bne.n	800a24a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 fae8 	bl	800b820 <USB_CoreReset>
 800a250:	4603      	mov	r3, r0
 800a252:	73fb      	strb	r3, [r7, #15]
 800a254:	e01b      	b.n	800a28e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fadc 	bl	800b820 <USB_CoreReset>
 800a268:	4603      	mov	r3, r0
 800a26a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a26c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a278:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a280:	e005      	b.n	800a28e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a286:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a28e:	7fbb      	ldrb	r3, [r7, #30]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d10b      	bne.n	800a2ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f043 0206 	orr.w	r2, r3, #6
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f043 0220 	orr.w	r2, r3, #32
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2b8:	b004      	add	sp, #16
 800a2ba:	4770      	bx	lr

0800a2bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d165      	bne.n	800a39c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4a41      	ldr	r2, [pc, #260]	@ (800a3d8 <USB_SetTurnaroundTime+0x11c>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d906      	bls.n	800a2e6 <USB_SetTurnaroundTime+0x2a>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4a40      	ldr	r2, [pc, #256]	@ (800a3dc <USB_SetTurnaroundTime+0x120>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d202      	bcs.n	800a2e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a2e0:	230f      	movs	r3, #15
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	e062      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	4a3c      	ldr	r2, [pc, #240]	@ (800a3dc <USB_SetTurnaroundTime+0x120>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d306      	bcc.n	800a2fc <USB_SetTurnaroundTime+0x40>
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	4a3b      	ldr	r2, [pc, #236]	@ (800a3e0 <USB_SetTurnaroundTime+0x124>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d202      	bcs.n	800a2fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a2f6:	230e      	movs	r3, #14
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	e057      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	4a38      	ldr	r2, [pc, #224]	@ (800a3e0 <USB_SetTurnaroundTime+0x124>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d306      	bcc.n	800a312 <USB_SetTurnaroundTime+0x56>
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	4a37      	ldr	r2, [pc, #220]	@ (800a3e4 <USB_SetTurnaroundTime+0x128>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d202      	bcs.n	800a312 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a30c:	230d      	movs	r3, #13
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	e04c      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	4a33      	ldr	r2, [pc, #204]	@ (800a3e4 <USB_SetTurnaroundTime+0x128>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d306      	bcc.n	800a328 <USB_SetTurnaroundTime+0x6c>
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	4a32      	ldr	r2, [pc, #200]	@ (800a3e8 <USB_SetTurnaroundTime+0x12c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d802      	bhi.n	800a328 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a322:	230c      	movs	r3, #12
 800a324:	617b      	str	r3, [r7, #20]
 800a326:	e041      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4a2f      	ldr	r2, [pc, #188]	@ (800a3e8 <USB_SetTurnaroundTime+0x12c>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d906      	bls.n	800a33e <USB_SetTurnaroundTime+0x82>
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	4a2e      	ldr	r2, [pc, #184]	@ (800a3ec <USB_SetTurnaroundTime+0x130>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d802      	bhi.n	800a33e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a338:	230b      	movs	r3, #11
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	e036      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	4a2a      	ldr	r2, [pc, #168]	@ (800a3ec <USB_SetTurnaroundTime+0x130>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d906      	bls.n	800a354 <USB_SetTurnaroundTime+0x98>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	4a29      	ldr	r2, [pc, #164]	@ (800a3f0 <USB_SetTurnaroundTime+0x134>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d802      	bhi.n	800a354 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a34e:	230a      	movs	r3, #10
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	e02b      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4a26      	ldr	r2, [pc, #152]	@ (800a3f0 <USB_SetTurnaroundTime+0x134>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d906      	bls.n	800a36a <USB_SetTurnaroundTime+0xae>
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	4a25      	ldr	r2, [pc, #148]	@ (800a3f4 <USB_SetTurnaroundTime+0x138>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d202      	bcs.n	800a36a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a364:	2309      	movs	r3, #9
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e020      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	4a21      	ldr	r2, [pc, #132]	@ (800a3f4 <USB_SetTurnaroundTime+0x138>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d306      	bcc.n	800a380 <USB_SetTurnaroundTime+0xc4>
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	4a20      	ldr	r2, [pc, #128]	@ (800a3f8 <USB_SetTurnaroundTime+0x13c>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d802      	bhi.n	800a380 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a37a:	2308      	movs	r3, #8
 800a37c:	617b      	str	r3, [r7, #20]
 800a37e:	e015      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f8 <USB_SetTurnaroundTime+0x13c>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d906      	bls.n	800a396 <USB_SetTurnaroundTime+0xda>
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4a1c      	ldr	r2, [pc, #112]	@ (800a3fc <USB_SetTurnaroundTime+0x140>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d202      	bcs.n	800a396 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a390:	2307      	movs	r3, #7
 800a392:	617b      	str	r3, [r7, #20]
 800a394:	e00a      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a396:	2306      	movs	r3, #6
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	e007      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d102      	bne.n	800a3a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a3a2:	2309      	movs	r3, #9
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	e001      	b.n	800a3ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a3a8:	2309      	movs	r3, #9
 800a3aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	029b      	lsls	r3, r3, #10
 800a3c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a3c4:	431a      	orrs	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	371c      	adds	r7, #28
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	00d8acbf 	.word	0x00d8acbf
 800a3dc:	00e4e1c0 	.word	0x00e4e1c0
 800a3e0:	00f42400 	.word	0x00f42400
 800a3e4:	01067380 	.word	0x01067380
 800a3e8:	011a499f 	.word	0x011a499f
 800a3ec:	01312cff 	.word	0x01312cff
 800a3f0:	014ca43f 	.word	0x014ca43f
 800a3f4:	016e3600 	.word	0x016e3600
 800a3f8:	01a6ab1f 	.word	0x01a6ab1f
 800a3fc:	01e84800 	.word	0x01e84800

0800a400 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f043 0201 	orr.w	r2, r3, #1
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f023 0201 	bic.w	r2, r3, #1
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d115      	bne.n	800a492 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a472:	200a      	movs	r0, #10
 800a474:	f7fa f800 	bl	8004478 <HAL_Delay>
      ms += 10U;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	330a      	adds	r3, #10
 800a47c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 f93f 	bl	800b702 <USB_GetMode>
 800a484:	4603      	mov	r3, r0
 800a486:	2b01      	cmp	r3, #1
 800a488:	d01e      	beq.n	800a4c8 <USB_SetCurrentMode+0x84>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a48e:	d9f0      	bls.n	800a472 <USB_SetCurrentMode+0x2e>
 800a490:	e01a      	b.n	800a4c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a492:	78fb      	ldrb	r3, [r7, #3]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d115      	bne.n	800a4c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a4a4:	200a      	movs	r0, #10
 800a4a6:	f7f9 ffe7 	bl	8004478 <HAL_Delay>
      ms += 10U;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	330a      	adds	r3, #10
 800a4ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 f926 	bl	800b702 <USB_GetMode>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d005      	beq.n	800a4c8 <USB_SetCurrentMode+0x84>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2bc7      	cmp	r3, #199	@ 0xc7
 800a4c0:	d9f0      	bls.n	800a4a4 <USB_SetCurrentMode+0x60>
 800a4c2:	e001      	b.n	800a4c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e005      	b.n	800a4d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2bc8      	cmp	r3, #200	@ 0xc8
 800a4cc:	d101      	bne.n	800a4d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e000      	b.n	800a4d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4dc:	b084      	sub	sp, #16
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b086      	sub	sp, #24
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a4ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	613b      	str	r3, [r7, #16]
 800a4fa:	e009      	b.n	800a510 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	3340      	adds	r3, #64	@ 0x40
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	2200      	movs	r2, #0
 800a508:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	3301      	adds	r3, #1
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	2b0e      	cmp	r3, #14
 800a514:	d9f2      	bls.n	800a4fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a516:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d11c      	bne.n	800a558 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a52c:	f043 0302 	orr.w	r3, r3, #2
 800a530:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a536:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a542:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	639a      	str	r2, [r3, #56]	@ 0x38
 800a556:	e00b      	b.n	800a570 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a568:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a576:	461a      	mov	r2, r3
 800a578:	2300      	movs	r3, #0
 800a57a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a57c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a580:	2b01      	cmp	r3, #1
 800a582:	d10d      	bne.n	800a5a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d104      	bne.n	800a596 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a58c:	2100      	movs	r1, #0
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f968 	bl	800a864 <USB_SetDevSpeed>
 800a594:	e008      	b.n	800a5a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a596:	2101      	movs	r1, #1
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f963 	bl	800a864 <USB_SetDevSpeed>
 800a59e:	e003      	b.n	800a5a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a5a0:	2103      	movs	r1, #3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f95e 	bl	800a864 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a5a8:	2110      	movs	r1, #16
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f8fa 	bl	800a7a4 <USB_FlushTxFifo>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f924 	bl	800a808 <USB_FlushRxFifo>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	613b      	str	r3, [r7, #16]
 800a5f2:	e043      	b.n	800a67c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a606:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a60a:	d118      	bne.n	800a63e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10a      	bne.n	800a628 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a61e:	461a      	mov	r2, r3
 800a620:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	e013      	b.n	800a650 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a634:	461a      	mov	r2, r3
 800a636:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	e008      	b.n	800a650 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	015a      	lsls	r2, r3, #5
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	4413      	add	r3, r2
 800a646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a64a:	461a      	mov	r2, r3
 800a64c:	2300      	movs	r3, #0
 800a64e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a65c:	461a      	mov	r2, r3
 800a65e:	2300      	movs	r3, #0
 800a660:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a66e:	461a      	mov	r2, r3
 800a670:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a674:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	3301      	adds	r3, #1
 800a67a:	613b      	str	r3, [r7, #16]
 800a67c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a680:	461a      	mov	r2, r3
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	4293      	cmp	r3, r2
 800a686:	d3b5      	bcc.n	800a5f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a688:	2300      	movs	r3, #0
 800a68a:	613b      	str	r3, [r7, #16]
 800a68c:	e043      	b.n	800a716 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6a4:	d118      	bne.n	800a6d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	e013      	b.n	800a6ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	e008      	b.n	800a6ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a708:	461a      	mov	r2, r3
 800a70a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a70e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	3301      	adds	r3, #1
 800a714:	613b      	str	r3, [r7, #16]
 800a716:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a71a:	461a      	mov	r2, r3
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	4293      	cmp	r3, r2
 800a720:	d3b5      	bcc.n	800a68e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a734:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a742:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a744:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d105      	bne.n	800a758 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	f043 0210 	orr.w	r2, r3, #16
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	699a      	ldr	r2, [r3, #24]
 800a75c:	4b10      	ldr	r3, [pc, #64]	@ (800a7a0 <USB_DevInit+0x2c4>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a764:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d005      	beq.n	800a778 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	f043 0208 	orr.w	r2, r3, #8
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a778:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d107      	bne.n	800a790 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a788:	f043 0304 	orr.w	r3, r3, #4
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a790:	7dfb      	ldrb	r3, [r7, #23]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a79c:	b004      	add	sp, #16
 800a79e:	4770      	bx	lr
 800a7a0:	803c3800 	.word	0x803c3800

0800a7a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7be:	d901      	bls.n	800a7c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	e01b      	b.n	800a7fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	daf2      	bge.n	800a7b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	019b      	lsls	r3, r3, #6
 800a7d4:	f043 0220 	orr.w	r2, r3, #32
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7e8:	d901      	bls.n	800a7ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e006      	b.n	800a7fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0320 	and.w	r3, r3, #32
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	d0f0      	beq.n	800a7dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	3301      	adds	r3, #1
 800a818:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a820:	d901      	bls.n	800a826 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	e018      	b.n	800a858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	daf2      	bge.n	800a814 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2210      	movs	r2, #16
 800a836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3301      	adds	r3, #1
 800a83c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a844:	d901      	bls.n	800a84a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e006      	b.n	800a858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	f003 0310 	and.w	r3, r3, #16
 800a852:	2b10      	cmp	r3, #16
 800a854:	d0f0      	beq.n	800a838 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	68f9      	ldr	r1, [r7, #12]
 800a880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a884:	4313      	orrs	r3, r2
 800a886:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a896:	b480      	push	{r7}
 800a898:	b087      	sub	sp, #28
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f003 0306 	and.w	r3, r3, #6
 800a8ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d102      	bne.n	800a8bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	75fb      	strb	r3, [r7, #23]
 800a8ba:	e00a      	b.n	800a8d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d002      	beq.n	800a8c8 <USB_GetDevSpeed+0x32>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b06      	cmp	r3, #6
 800a8c6:	d102      	bne.n	800a8ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	75fb      	strb	r3, [r7, #23]
 800a8cc:	e001      	b.n	800a8d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a8ce:	230f      	movs	r3, #15
 800a8d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	371c      	adds	r7, #28
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d13a      	bne.n	800a972 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a902:	69da      	ldr	r2, [r3, #28]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	f003 030f 	and.w	r3, r3, #15
 800a90c:	2101      	movs	r1, #1
 800a90e:	fa01 f303 	lsl.w	r3, r1, r3
 800a912:	b29b      	uxth	r3, r3
 800a914:	68f9      	ldr	r1, [r7, #12]
 800a916:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a91a:	4313      	orrs	r3, r2
 800a91c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d155      	bne.n	800a9e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	791b      	ldrb	r3, [r3, #4]
 800a94e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a950:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	059b      	lsls	r3, r3, #22
 800a956:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a958:	4313      	orrs	r3, r2
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	0151      	lsls	r1, r2, #5
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	440a      	add	r2, r1
 800a962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a96a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a96e:	6013      	str	r3, [r2, #0]
 800a970:	e036      	b.n	800a9e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a978:	69da      	ldr	r2, [r3, #28]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	f003 030f 	and.w	r3, r3, #15
 800a982:	2101      	movs	r1, #1
 800a984:	fa01 f303 	lsl.w	r3, r1, r3
 800a988:	041b      	lsls	r3, r3, #16
 800a98a:	68f9      	ldr	r1, [r7, #12]
 800a98c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a990:	4313      	orrs	r3, r2
 800a992:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d11a      	bne.n	800a9e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	791b      	ldrb	r3, [r3, #4]
 800a9c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	0151      	lsls	r1, r2, #5
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	440a      	add	r2, r1
 800a9d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
	...

0800a9f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	785b      	ldrb	r3, [r3, #1]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d161      	bne.n	800aad0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa22:	d11f      	bne.n	800aa64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	0151      	lsls	r1, r2, #5
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	440a      	add	r2, r1
 800aa3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	015a      	lsls	r2, r3, #5
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	0151      	lsls	r1, r2, #5
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	440a      	add	r2, r1
 800aa5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	f003 030f 	and.w	r3, r3, #15
 800aa74:	2101      	movs	r1, #1
 800aa76:	fa01 f303 	lsl.w	r3, r1, r3
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	43db      	mvns	r3, r3
 800aa7e:	68f9      	ldr	r1, [r7, #12]
 800aa80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa84:	4013      	ands	r3, r2
 800aa86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa8e:	69da      	ldr	r2, [r3, #28]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f003 030f 	and.w	r3, r3, #15
 800aa98:	2101      	movs	r1, #1
 800aa9a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	43db      	mvns	r3, r3
 800aaa2:	68f9      	ldr	r1, [r7, #12]
 800aaa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	0159      	lsls	r1, r3, #5
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	440b      	add	r3, r1
 800aac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac6:	4619      	mov	r1, r3
 800aac8:	4b35      	ldr	r3, [pc, #212]	@ (800aba0 <USB_DeactivateEndpoint+0x1b0>)
 800aaca:	4013      	ands	r3, r2
 800aacc:	600b      	str	r3, [r1, #0]
 800aace:	e060      	b.n	800ab92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aae2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aae6:	d11f      	bne.n	800ab28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	015a      	lsls	r2, r3, #5
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4413      	add	r3, r2
 800aaf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	0151      	lsls	r1, r2, #5
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	440a      	add	r2, r1
 800aafe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	0151      	lsls	r1, r2, #5
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	440a      	add	r2, r1
 800ab1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	f003 030f 	and.w	r3, r3, #15
 800ab38:	2101      	movs	r1, #1
 800ab3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab3e:	041b      	lsls	r3, r3, #16
 800ab40:	43db      	mvns	r3, r3
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab48:	4013      	ands	r3, r2
 800ab4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab52:	69da      	ldr	r2, [r3, #28]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 030f 	and.w	r3, r3, #15
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab62:	041b      	lsls	r3, r3, #16
 800ab64:	43db      	mvns	r3, r3
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	0159      	lsls	r1, r3, #5
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	440b      	add	r3, r1
 800ab86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4b05      	ldr	r3, [pc, #20]	@ (800aba4 <USB_DeactivateEndpoint+0x1b4>)
 800ab8e:	4013      	ands	r3, r2
 800ab90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	ec337800 	.word	0xec337800
 800aba4:	eff37800 	.word	0xeff37800

0800aba8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08a      	sub	sp, #40	@ 0x28
 800abac:	af02      	add	r7, sp, #8
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	4613      	mov	r3, r2
 800abb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	785b      	ldrb	r3, [r3, #1]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	f040 817f 	bne.w	800aec8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d132      	bne.n	800ac38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	69fa      	ldr	r2, [r7, #28]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800abf0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800abf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	0151      	lsls	r1, r2, #5
 800ac08:	69fa      	ldr	r2, [r7, #28]
 800ac0a:	440a      	add	r2, r1
 800ac0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	015a      	lsls	r2, r3, #5
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	0151      	lsls	r1, r2, #5
 800ac28:	69fa      	ldr	r2, [r7, #28]
 800ac2a:	440a      	add	r2, r1
 800ac2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac30:	0cdb      	lsrs	r3, r3, #19
 800ac32:	04db      	lsls	r3, r3, #19
 800ac34:	6113      	str	r3, [r2, #16]
 800ac36:	e097      	b.n	800ad68 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac52:	0cdb      	lsrs	r3, r3, #19
 800ac54:	04db      	lsls	r3, r3, #19
 800ac56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	0151      	lsls	r1, r2, #5
 800ac6a:	69fa      	ldr	r2, [r7, #28]
 800ac6c:	440a      	add	r2, r1
 800ac6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac72:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ac76:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac7a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d11a      	bne.n	800acb8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	691a      	ldr	r2, [r3, #16]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d903      	bls.n	800ac96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	689a      	ldr	r2, [r3, #8]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	0151      	lsls	r1, r2, #5
 800aca8:	69fa      	ldr	r2, [r7, #28]
 800acaa:	440a      	add	r2, r1
 800acac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800acb4:	6113      	str	r3, [r2, #16]
 800acb6:	e044      	b.n	800ad42 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	691a      	ldr	r2, [r3, #16]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	4413      	add	r3, r2
 800acc2:	1e5a      	subs	r2, r3, #1
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800accc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	015a      	lsls	r2, r3, #5
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	4413      	add	r3, r2
 800acd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	8afb      	ldrh	r3, [r7, #22]
 800acde:	04d9      	lsls	r1, r3, #19
 800ace0:	4ba4      	ldr	r3, [pc, #656]	@ (800af74 <USB_EPStartXfer+0x3cc>)
 800ace2:	400b      	ands	r3, r1
 800ace4:	69b9      	ldr	r1, [r7, #24]
 800ace6:	0148      	lsls	r0, r1, #5
 800ace8:	69f9      	ldr	r1, [r7, #28]
 800acea:	4401      	add	r1, r0
 800acec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800acf0:	4313      	orrs	r3, r2
 800acf2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	791b      	ldrb	r3, [r3, #4]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d122      	bne.n	800ad42 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	0151      	lsls	r1, r2, #5
 800ad0e:	69fa      	ldr	r2, [r7, #28]
 800ad10:	440a      	add	r2, r1
 800ad12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad16:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ad1a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad28:	691a      	ldr	r2, [r3, #16]
 800ad2a:	8afb      	ldrh	r3, [r7, #22]
 800ad2c:	075b      	lsls	r3, r3, #29
 800ad2e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ad32:	69b9      	ldr	r1, [r7, #24]
 800ad34:	0148      	lsls	r0, r1, #5
 800ad36:	69f9      	ldr	r1, [r7, #28]
 800ad38:	4401      	add	r1, r0
 800ad3a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad4e:	691a      	ldr	r2, [r3, #16]
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad58:	69b9      	ldr	r1, [r7, #24]
 800ad5a:	0148      	lsls	r0, r1, #5
 800ad5c:	69f9      	ldr	r1, [r7, #28]
 800ad5e:	4401      	add	r1, r0
 800ad60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ad64:	4313      	orrs	r3, r2
 800ad66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d14b      	bne.n	800ae06 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d009      	beq.n	800ad8a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad82:	461a      	mov	r2, r3
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	69db      	ldr	r3, [r3, #28]
 800ad88:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	791b      	ldrb	r3, [r3, #4]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d128      	bne.n	800ade4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d110      	bne.n	800adc4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	015a      	lsls	r2, r3, #5
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	4413      	add	r3, r2
 800adaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	69ba      	ldr	r2, [r7, #24]
 800adb2:	0151      	lsls	r1, r2, #5
 800adb4:	69fa      	ldr	r2, [r7, #28]
 800adb6:	440a      	add	r2, r1
 800adb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800adc0:	6013      	str	r3, [r2, #0]
 800adc2:	e00f      	b.n	800ade4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	0151      	lsls	r1, r2, #5
 800add6:	69fa      	ldr	r2, [r7, #28]
 800add8:	440a      	add	r2, r1
 800adda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ade2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adfe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	e166      	b.n	800b0d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	015a      	lsls	r2, r3, #5
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	69ba      	ldr	r2, [r7, #24]
 800ae16:	0151      	lsls	r1, r2, #5
 800ae18:	69fa      	ldr	r2, [r7, #28]
 800ae1a:	440a      	add	r2, r1
 800ae1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae24:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	791b      	ldrb	r3, [r3, #4]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d015      	beq.n	800ae5a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 814e 	beq.w	800b0d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	2101      	movs	r1, #1
 800ae4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae4e:	69f9      	ldr	r1, [r7, #28]
 800ae50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae54:	4313      	orrs	r3, r2
 800ae56:	634b      	str	r3, [r1, #52]	@ 0x34
 800ae58:	e13c      	b.n	800b0d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d110      	bne.n	800ae8c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	0151      	lsls	r1, r2, #5
 800ae7c:	69fa      	ldr	r2, [r7, #28]
 800ae7e:	440a      	add	r2, r1
 800ae80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e00f      	b.n	800aeac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	69fa      	ldr	r2, [r7, #28]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aeaa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	68d9      	ldr	r1, [r3, #12]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	781a      	ldrb	r2, [r3, #0]
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	b298      	uxth	r0, r3
 800aeba:	79fb      	ldrb	r3, [r7, #7]
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	4603      	mov	r3, r0
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f000 f9b9 	bl	800b238 <USB_WritePacket>
 800aec6:	e105      	b.n	800b0d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	015a      	lsls	r2, r3, #5
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	4413      	add	r3, r2
 800aed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	0151      	lsls	r1, r2, #5
 800aeda:	69fa      	ldr	r2, [r7, #28]
 800aedc:	440a      	add	r2, r1
 800aede:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aee2:	0cdb      	lsrs	r3, r3, #19
 800aee4:	04db      	lsls	r3, r3, #19
 800aee6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af02:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800af06:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800af0a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d132      	bne.n	800af78 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	689a      	ldr	r2, [r3, #8]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	689a      	ldr	r2, [r3, #8]
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	4413      	add	r3, r2
 800af32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af40:	69b9      	ldr	r1, [r7, #24]
 800af42:	0148      	lsls	r0, r1, #5
 800af44:	69f9      	ldr	r1, [r7, #28]
 800af46:	4401      	add	r1, r0
 800af48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800af4c:	4313      	orrs	r3, r2
 800af4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	69ba      	ldr	r2, [r7, #24]
 800af60:	0151      	lsls	r1, r2, #5
 800af62:	69fa      	ldr	r2, [r7, #28]
 800af64:	440a      	add	r2, r1
 800af66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af6e:	6113      	str	r3, [r2, #16]
 800af70:	e062      	b.n	800b038 <USB_EPStartXfer+0x490>
 800af72:	bf00      	nop
 800af74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d123      	bne.n	800afc8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8c:	691a      	ldr	r2, [r3, #16]
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af96:	69b9      	ldr	r1, [r7, #24]
 800af98:	0148      	lsls	r0, r1, #5
 800af9a:	69f9      	ldr	r1, [r7, #28]
 800af9c:	4401      	add	r1, r0
 800af9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800afa2:	4313      	orrs	r3, r2
 800afa4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	015a      	lsls	r2, r3, #5
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	4413      	add	r3, r2
 800afae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	69ba      	ldr	r2, [r7, #24]
 800afb6:	0151      	lsls	r1, r2, #5
 800afb8:	69fa      	ldr	r2, [r7, #28]
 800afba:	440a      	add	r2, r1
 800afbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800afc4:	6113      	str	r3, [r2, #16]
 800afc6:	e037      	b.n	800b038 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	691a      	ldr	r2, [r3, #16]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	4413      	add	r3, r2
 800afd2:	1e5a      	subs	r2, r3, #1
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afdc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	8afa      	ldrh	r2, [r7, #22]
 800afe4:	fb03 f202 	mul.w	r2, r3, r2
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff8:	691a      	ldr	r2, [r3, #16]
 800affa:	8afb      	ldrh	r3, [r7, #22]
 800affc:	04d9      	lsls	r1, r3, #19
 800affe:	4b38      	ldr	r3, [pc, #224]	@ (800b0e0 <USB_EPStartXfer+0x538>)
 800b000:	400b      	ands	r3, r1
 800b002:	69b9      	ldr	r1, [r7, #24]
 800b004:	0148      	lsls	r0, r1, #5
 800b006:	69f9      	ldr	r1, [r7, #28]
 800b008:	4401      	add	r1, r0
 800b00a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b00e:	4313      	orrs	r3, r2
 800b010:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b028:	69b9      	ldr	r1, [r7, #24]
 800b02a:	0148      	lsls	r0, r1, #5
 800b02c:	69f9      	ldr	r1, [r7, #28]
 800b02e:	4401      	add	r1, r0
 800b030:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b034:	4313      	orrs	r3, r2
 800b036:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b038:	79fb      	ldrb	r3, [r7, #7]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d10d      	bne.n	800b05a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d009      	beq.n	800b05a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	68d9      	ldr	r1, [r3, #12]
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	4413      	add	r3, r2
 800b052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b056:	460a      	mov	r2, r1
 800b058:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	791b      	ldrb	r3, [r3, #4]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d128      	bne.n	800b0b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d110      	bne.n	800b094 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	0151      	lsls	r1, r2, #5
 800b084:	69fa      	ldr	r2, [r7, #28]
 800b086:	440a      	add	r2, r1
 800b088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b08c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b090:	6013      	str	r3, [r2, #0]
 800b092:	e00f      	b.n	800b0b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	015a      	lsls	r2, r3, #5
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69ba      	ldr	r2, [r7, #24]
 800b0a4:	0151      	lsls	r1, r2, #5
 800b0a6:	69fa      	ldr	r2, [r7, #28]
 800b0a8:	440a      	add	r2, r1
 800b0aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	69fa      	ldr	r2, [r7, #28]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b0d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3720      	adds	r7, #32
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	1ff80000 	.word	0x1ff80000

0800b0e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	785b      	ldrb	r3, [r3, #1]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d14a      	bne.n	800b198 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b11a:	f040 8086 	bne.w	800b22a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	7812      	ldrb	r2, [r2, #0]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b13c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b140:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	015a      	lsls	r2, r3, #5
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	4413      	add	r3, r2
 800b14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	7812      	ldrb	r2, [r2, #0]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b160:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3301      	adds	r3, #1
 800b16a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b172:	4293      	cmp	r3, r2
 800b174:	d902      	bls.n	800b17c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	75fb      	strb	r3, [r7, #23]
          break;
 800b17a:	e056      	b.n	800b22a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b194:	d0e7      	beq.n	800b166 <USB_EPStopXfer+0x82>
 800b196:	e048      	b.n	800b22a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1b0:	d13b      	bne.n	800b22a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	7812      	ldrb	r2, [r2, #0]
 800b1c6:	0151      	lsls	r1, r2, #5
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	440a      	add	r2, r1
 800b1cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	7812      	ldrb	r2, [r2, #0]
 800b1ea:	0151      	lsls	r1, r2, #5
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	440a      	add	r2, r1
 800b1f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b1f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b206:	4293      	cmp	r3, r2
 800b208:	d902      	bls.n	800b210 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	75fb      	strb	r3, [r7, #23]
          break;
 800b20e:	e00c      	b.n	800b22a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b228:	d0e7      	beq.n	800b1fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	371c      	adds	r7, #28
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b238:	b480      	push	{r7}
 800b23a:	b089      	sub	sp, #36	@ 0x24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	4611      	mov	r1, r2
 800b244:	461a      	mov	r2, r3
 800b246:	460b      	mov	r3, r1
 800b248:	71fb      	strb	r3, [r7, #7]
 800b24a:	4613      	mov	r3, r2
 800b24c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b256:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d123      	bne.n	800b2a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b25e:	88bb      	ldrh	r3, [r7, #4]
 800b260:	3303      	adds	r3, #3
 800b262:	089b      	lsrs	r3, r3, #2
 800b264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b266:	2300      	movs	r3, #0
 800b268:	61bb      	str	r3, [r7, #24]
 800b26a:	e018      	b.n	800b29e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	031a      	lsls	r2, r3, #12
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	4413      	add	r3, r2
 800b274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b278:	461a      	mov	r2, r3
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	3301      	adds	r3, #1
 800b284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	3301      	adds	r3, #1
 800b28a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	3301      	adds	r3, #1
 800b290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	3301      	adds	r3, #1
 800b296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	3301      	adds	r3, #1
 800b29c:	61bb      	str	r3, [r7, #24]
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d3e2      	bcc.n	800b26c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3724      	adds	r7, #36	@ 0x24
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b08b      	sub	sp, #44	@ 0x2c
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b2ca:	88fb      	ldrh	r3, [r7, #6]
 800b2cc:	089b      	lsrs	r3, r3, #2
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b2d2:	88fb      	ldrh	r3, [r7, #6]
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b2da:	2300      	movs	r3, #0
 800b2dc:	623b      	str	r3, [r7, #32]
 800b2de:	e014      	b.n	800b30a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b300:	3301      	adds	r3, #1
 800b302:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	3301      	adds	r3, #1
 800b308:	623b      	str	r3, [r7, #32]
 800b30a:	6a3a      	ldr	r2, [r7, #32]
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d3e6      	bcc.n	800b2e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b312:	8bfb      	ldrh	r3, [r7, #30]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01e      	beq.n	800b356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b322:	461a      	mov	r2, r3
 800b324:	f107 0310 	add.w	r3, r7, #16
 800b328:	6812      	ldr	r2, [r2, #0]
 800b32a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	b2db      	uxtb	r3, r3
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	fa22 f303 	lsr.w	r3, r2, r3
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33c:	701a      	strb	r2, [r3, #0]
      i++;
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	3301      	adds	r3, #1
 800b342:	623b      	str	r3, [r7, #32]
      pDest++;
 800b344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b346:	3301      	adds	r3, #1
 800b348:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b34a:	8bfb      	ldrh	r3, [r7, #30]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b350:	8bfb      	ldrh	r3, [r7, #30]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1ea      	bne.n	800b32c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b358:	4618      	mov	r0, r3
 800b35a:	372c      	adds	r7, #44	@ 0x2c
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d12c      	bne.n	800b3da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	db12      	blt.n	800b3b8 <USB_EPSetStall+0x54>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00f      	beq.n	800b3b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	0151      	lsls	r1, r2, #5
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	440a      	add	r2, r1
 800b3ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b3b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	0151      	lsls	r1, r2, #5
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	440a      	add	r2, r1
 800b3ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	e02b      	b.n	800b432 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	db12      	blt.n	800b412 <USB_EPSetStall+0xae>
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00f      	beq.n	800b412 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	0151      	lsls	r1, r2, #5
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	440a      	add	r2, r1
 800b408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b40c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b410:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	0151      	lsls	r1, r2, #5
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	440a      	add	r2, r1
 800b428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b42c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b430:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	785b      	ldrb	r3, [r3, #1]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d128      	bne.n	800b4ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	0151      	lsls	r1, r2, #5
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	440a      	add	r2, r1
 800b472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b476:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b47a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	791b      	ldrb	r3, [r3, #4]
 800b480:	2b03      	cmp	r3, #3
 800b482:	d003      	beq.n	800b48c <USB_EPClearStall+0x4c>
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	791b      	ldrb	r3, [r3, #4]
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d138      	bne.n	800b4fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	e027      	b.n	800b4fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	0151      	lsls	r1, r2, #5
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	440a      	add	r2, r1
 800b4c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b4cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	791b      	ldrb	r3, [r3, #4]
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d003      	beq.n	800b4de <USB_EPClearStall+0x9e>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	791b      	ldrb	r3, [r3, #4]
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d10f      	bne.n	800b4fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	015a      	lsls	r2, r3, #5
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	0151      	lsls	r1, r2, #5
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	440a      	add	r2, r1
 800b4f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b52a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b52e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b540:	68f9      	ldr	r1, [r7, #12]
 800b542:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b546:	4313      	orrs	r3, r2
 800b548:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b572:	f023 0303 	bic.w	r3, r3, #3
 800b576:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b586:	f023 0302 	bic.w	r3, r3, #2
 800b58a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b085      	sub	sp, #20
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5c8:	f043 0302 	orr.w	r3, r3, #2
 800b5cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	695b      	ldr	r3, [r3, #20]
 800b5e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b602:	b480      	push	{r7}
 800b604:	b085      	sub	sp, #20
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	4013      	ands	r3, r2
 800b624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	0c1b      	lsrs	r3, r3, #16
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b636:	b480      	push	{r7}
 800b638:	b085      	sub	sp, #20
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	4013      	ands	r3, r2
 800b658:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	b29b      	uxth	r3, r3
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b085      	sub	sp, #20
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	4013      	ands	r3, r2
 800b696:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b698:	68bb      	ldr	r3, [r7, #8]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b087      	sub	sp, #28
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	f003 030f 	and.w	r3, r3, #15
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d6:	01db      	lsls	r3, r3, #7
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	f003 0301 	and.w	r3, r3, #1
}
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b71e:	b480      	push	{r7}
 800b720:	b085      	sub	sp, #20
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b738:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b73c:	f023 0307 	bic.w	r3, r3, #7
 800b740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	460b      	mov	r3, r1
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	333c      	adds	r3, #60	@ 0x3c
 800b77a:	3304      	adds	r3, #4
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	4a26      	ldr	r2, [pc, #152]	@ (800b81c <USB_EP0_OutStart+0xb8>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d90a      	bls.n	800b79e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b798:	d101      	bne.n	800b79e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	e037      	b.n	800b80e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b7bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7cc:	f043 0318 	orr.w	r3, r3, #24
 800b7d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b7e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d10f      	bne.n	800b80c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b806:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b80a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	371c      	adds	r7, #28
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	4f54300a 	.word	0x4f54300a

0800b820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b828:	2300      	movs	r3, #0
 800b82a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	3301      	adds	r3, #1
 800b830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b838:	d901      	bls.n	800b83e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e01b      	b.n	800b876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	daf2      	bge.n	800b82c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	f043 0201 	orr.w	r2, r3, #1
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b862:	d901      	bls.n	800b868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e006      	b.n	800b876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b01      	cmp	r3, #1
 800b872:	d0f0      	beq.n	800b856 <USB_CoreReset+0x36>

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
	...

0800b884 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b890:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b894:	f002 fc9e 	bl	800e1d4 <USBD_static_malloc>
 800b898:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d109      	bne.n	800b8b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	32b0      	adds	r2, #176	@ 0xb0
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	e0d4      	b.n	800ba5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b8b4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f003 fad5 	bl	800ee6a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	32b0      	adds	r2, #176	@ 0xb0
 800b8ca:	68f9      	ldr	r1, [r7, #12]
 800b8cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	32b0      	adds	r2, #176	@ 0xb0
 800b8da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	7c1b      	ldrb	r3, [r3, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d138      	bne.n	800b95e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b8ec:	4b5e      	ldr	r3, [pc, #376]	@ (800ba68 <USBD_CDC_Init+0x1e4>)
 800b8ee:	7819      	ldrb	r1, [r3, #0]
 800b8f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f002 fb49 	bl	800df8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8fc:	4b5a      	ldr	r3, [pc, #360]	@ (800ba68 <USBD_CDC_Init+0x1e4>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	f003 020f 	and.w	r2, r3, #15
 800b904:	6879      	ldr	r1, [r7, #4]
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	440b      	add	r3, r1
 800b910:	3324      	adds	r3, #36	@ 0x24
 800b912:	2201      	movs	r2, #1
 800b914:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b916:	4b55      	ldr	r3, [pc, #340]	@ (800ba6c <USBD_CDC_Init+0x1e8>)
 800b918:	7819      	ldrb	r1, [r3, #0]
 800b91a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b91e:	2202      	movs	r2, #2
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f002 fb34 	bl	800df8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b926:	4b51      	ldr	r3, [pc, #324]	@ (800ba6c <USBD_CDC_Init+0x1e8>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	f003 020f 	and.w	r2, r3, #15
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	4613      	mov	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4413      	add	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	440b      	add	r3, r1
 800b93a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b93e:	2201      	movs	r2, #1
 800b940:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b942:	4b4b      	ldr	r3, [pc, #300]	@ (800ba70 <USBD_CDC_Init+0x1ec>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	f003 020f 	and.w	r2, r3, #15
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	4613      	mov	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	440b      	add	r3, r1
 800b956:	3326      	adds	r3, #38	@ 0x26
 800b958:	2210      	movs	r2, #16
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	e035      	b.n	800b9ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b95e:	4b42      	ldr	r3, [pc, #264]	@ (800ba68 <USBD_CDC_Init+0x1e4>)
 800b960:	7819      	ldrb	r1, [r3, #0]
 800b962:	2340      	movs	r3, #64	@ 0x40
 800b964:	2202      	movs	r2, #2
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f002 fb11 	bl	800df8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b96c:	4b3e      	ldr	r3, [pc, #248]	@ (800ba68 <USBD_CDC_Init+0x1e4>)
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	f003 020f 	and.w	r2, r3, #15
 800b974:	6879      	ldr	r1, [r7, #4]
 800b976:	4613      	mov	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	440b      	add	r3, r1
 800b980:	3324      	adds	r3, #36	@ 0x24
 800b982:	2201      	movs	r2, #1
 800b984:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b986:	4b39      	ldr	r3, [pc, #228]	@ (800ba6c <USBD_CDC_Init+0x1e8>)
 800b988:	7819      	ldrb	r1, [r3, #0]
 800b98a:	2340      	movs	r3, #64	@ 0x40
 800b98c:	2202      	movs	r2, #2
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f002 fafd 	bl	800df8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b994:	4b35      	ldr	r3, [pc, #212]	@ (800ba6c <USBD_CDC_Init+0x1e8>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	f003 020f 	and.w	r2, r3, #15
 800b99c:	6879      	ldr	r1, [r7, #4]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	440b      	add	r3, r1
 800b9a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b9b0:	4b2f      	ldr	r3, [pc, #188]	@ (800ba70 <USBD_CDC_Init+0x1ec>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	f003 020f 	and.w	r2, r3, #15
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	440b      	add	r3, r1
 800b9c4:	3326      	adds	r3, #38	@ 0x26
 800b9c6:	2210      	movs	r2, #16
 800b9c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b9ca:	4b29      	ldr	r3, [pc, #164]	@ (800ba70 <USBD_CDC_Init+0x1ec>)
 800b9cc:	7819      	ldrb	r1, [r3, #0]
 800b9ce:	2308      	movs	r3, #8
 800b9d0:	2203      	movs	r2, #3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f002 fadb 	bl	800df8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b9d8:	4b25      	ldr	r3, [pc, #148]	@ (800ba70 <USBD_CDC_Init+0x1ec>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	f003 020f 	and.w	r2, r3, #15
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	440b      	add	r3, r1
 800b9ec:	3324      	adds	r3, #36	@ 0x24
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	33b0      	adds	r3, #176	@ 0xb0
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d101      	bne.n	800ba2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ba28:	2302      	movs	r3, #2
 800ba2a:	e018      	b.n	800ba5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	7c1b      	ldrb	r3, [r3, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba34:	4b0d      	ldr	r3, [pc, #52]	@ (800ba6c <USBD_CDC_Init+0x1e8>)
 800ba36:	7819      	ldrb	r1, [r3, #0]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ba3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f002 fb92 	bl	800e16c <USBD_LL_PrepareReceive>
 800ba48:	e008      	b.n	800ba5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba4a:	4b08      	ldr	r3, [pc, #32]	@ (800ba6c <USBD_CDC_Init+0x1e8>)
 800ba4c:	7819      	ldrb	r1, [r3, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ba54:	2340      	movs	r3, #64	@ 0x40
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f002 fb88 	bl	800e16c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	200000c3 	.word	0x200000c3
 800ba6c:	200000c4 	.word	0x200000c4
 800ba70:	200000c5 	.word	0x200000c5

0800ba74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ba80:	4b3a      	ldr	r3, [pc, #232]	@ (800bb6c <USBD_CDC_DeInit+0xf8>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	4619      	mov	r1, r3
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f002 faa7 	bl	800dfda <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ba8c:	4b37      	ldr	r3, [pc, #220]	@ (800bb6c <USBD_CDC_DeInit+0xf8>)
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	f003 020f 	and.w	r2, r3, #15
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	4613      	mov	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	440b      	add	r3, r1
 800baa0:	3324      	adds	r3, #36	@ 0x24
 800baa2:	2200      	movs	r2, #0
 800baa4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800baa6:	4b32      	ldr	r3, [pc, #200]	@ (800bb70 <USBD_CDC_DeInit+0xfc>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f002 fa94 	bl	800dfda <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bab2:	4b2f      	ldr	r3, [pc, #188]	@ (800bb70 <USBD_CDC_DeInit+0xfc>)
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	f003 020f 	and.w	r2, r3, #15
 800baba:	6879      	ldr	r1, [r7, #4]
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	440b      	add	r3, r1
 800bac6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800baca:	2200      	movs	r2, #0
 800bacc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bace:	4b29      	ldr	r3, [pc, #164]	@ (800bb74 <USBD_CDC_DeInit+0x100>)
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f002 fa80 	bl	800dfda <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bada:	4b26      	ldr	r3, [pc, #152]	@ (800bb74 <USBD_CDC_DeInit+0x100>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	f003 020f 	and.w	r2, r3, #15
 800bae2:	6879      	ldr	r1, [r7, #4]
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	440b      	add	r3, r1
 800baee:	3324      	adds	r3, #36	@ 0x24
 800baf0:	2200      	movs	r2, #0
 800baf2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800baf4:	4b1f      	ldr	r3, [pc, #124]	@ (800bb74 <USBD_CDC_DeInit+0x100>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 020f 	and.w	r2, r3, #15
 800bafc:	6879      	ldr	r1, [r7, #4]
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	440b      	add	r3, r1
 800bb08:	3326      	adds	r3, #38	@ 0x26
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	32b0      	adds	r2, #176	@ 0xb0
 800bb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d01f      	beq.n	800bb60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	33b0      	adds	r3, #176	@ 0xb0
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	32b0      	adds	r2, #176	@ 0xb0
 800bb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f002 fb54 	bl	800e1f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	32b0      	adds	r2, #176	@ 0xb0
 800bb52:	2100      	movs	r1, #0
 800bb54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	200000c3 	.word	0x200000c3
 800bb70:	200000c4 	.word	0x200000c4
 800bb74:	200000c5 	.word	0x200000c5

0800bb78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	32b0      	adds	r2, #176	@ 0xb0
 800bb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bb96:	2300      	movs	r3, #0
 800bb98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d101      	bne.n	800bba8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e0bf      	b.n	800bd28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d050      	beq.n	800bc56 <USBD_CDC_Setup+0xde>
 800bbb4:	2b20      	cmp	r3, #32
 800bbb6:	f040 80af 	bne.w	800bd18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	88db      	ldrh	r3, [r3, #6]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d03a      	beq.n	800bc38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	b25b      	sxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	da1b      	bge.n	800bc04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	33b0      	adds	r3, #176	@ 0xb0
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bbe2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbe4:	683a      	ldr	r2, [r7, #0]
 800bbe6:	88d2      	ldrh	r2, [r2, #6]
 800bbe8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	88db      	ldrh	r3, [r3, #6]
 800bbee:	2b07      	cmp	r3, #7
 800bbf0:	bf28      	it	cs
 800bbf2:	2307      	movcs	r3, #7
 800bbf4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	89fa      	ldrh	r2, [r7, #14]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f001 fd93 	bl	800d728 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bc02:	e090      	b.n	800bd26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	785a      	ldrb	r2, [r3, #1]
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	88db      	ldrh	r3, [r3, #6]
 800bc12:	2b3f      	cmp	r3, #63	@ 0x3f
 800bc14:	d803      	bhi.n	800bc1e <USBD_CDC_Setup+0xa6>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	88db      	ldrh	r3, [r3, #6]
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	e000      	b.n	800bc20 <USBD_CDC_Setup+0xa8>
 800bc1e:	2240      	movs	r2, #64	@ 0x40
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bc26:	6939      	ldr	r1, [r7, #16]
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bc2e:	461a      	mov	r2, r3
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f001 fda5 	bl	800d780 <USBD_CtlPrepareRx>
      break;
 800bc36:	e076      	b.n	800bd26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	33b0      	adds	r3, #176	@ 0xb0
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	7850      	ldrb	r0, [r2, #1]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	4798      	blx	r3
      break;
 800bc54:	e067      	b.n	800bd26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	785b      	ldrb	r3, [r3, #1]
 800bc5a:	2b0b      	cmp	r3, #11
 800bc5c:	d851      	bhi.n	800bd02 <USBD_CDC_Setup+0x18a>
 800bc5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc64 <USBD_CDC_Setup+0xec>)
 800bc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc64:	0800bc95 	.word	0x0800bc95
 800bc68:	0800bd11 	.word	0x0800bd11
 800bc6c:	0800bd03 	.word	0x0800bd03
 800bc70:	0800bd03 	.word	0x0800bd03
 800bc74:	0800bd03 	.word	0x0800bd03
 800bc78:	0800bd03 	.word	0x0800bd03
 800bc7c:	0800bd03 	.word	0x0800bd03
 800bc80:	0800bd03 	.word	0x0800bd03
 800bc84:	0800bd03 	.word	0x0800bd03
 800bc88:	0800bd03 	.word	0x0800bd03
 800bc8c:	0800bcbf 	.word	0x0800bcbf
 800bc90:	0800bce9 	.word	0x0800bce9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	d107      	bne.n	800bcb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bca0:	f107 030a 	add.w	r3, r7, #10
 800bca4:	2202      	movs	r2, #2
 800bca6:	4619      	mov	r1, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f001 fd3d 	bl	800d728 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcae:	e032      	b.n	800bd16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f001 fcbb 	bl	800d62e <USBD_CtlError>
            ret = USBD_FAIL;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	75fb      	strb	r3, [r7, #23]
          break;
 800bcbc:	e02b      	b.n	800bd16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b03      	cmp	r3, #3
 800bcc8:	d107      	bne.n	800bcda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bcca:	f107 030d 	add.w	r3, r7, #13
 800bcce:	2201      	movs	r2, #1
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f001 fd28 	bl	800d728 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcd8:	e01d      	b.n	800bd16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 fca6 	bl	800d62e <USBD_CtlError>
            ret = USBD_FAIL;
 800bce2:	2303      	movs	r3, #3
 800bce4:	75fb      	strb	r3, [r7, #23]
          break;
 800bce6:	e016      	b.n	800bd16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d00f      	beq.n	800bd14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f001 fc99 	bl	800d62e <USBD_CtlError>
            ret = USBD_FAIL;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bd00:	e008      	b.n	800bd14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 fc92 	bl	800d62e <USBD_CtlError>
          ret = USBD_FAIL;
 800bd0a:	2303      	movs	r3, #3
 800bd0c:	75fb      	strb	r3, [r7, #23]
          break;
 800bd0e:	e002      	b.n	800bd16 <USBD_CDC_Setup+0x19e>
          break;
 800bd10:	bf00      	nop
 800bd12:	e008      	b.n	800bd26 <USBD_CDC_Setup+0x1ae>
          break;
 800bd14:	bf00      	nop
      }
      break;
 800bd16:	e006      	b.n	800bd26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f001 fc87 	bl	800d62e <USBD_CtlError>
      ret = USBD_FAIL;
 800bd20:	2303      	movs	r3, #3
 800bd22:	75fb      	strb	r3, [r7, #23]
      break;
 800bd24:	bf00      	nop
  }

  return (uint8_t)ret;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	32b0      	adds	r2, #176	@ 0xb0
 800bd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e065      	b.n	800be26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	32b0      	adds	r2, #176	@ 0xb0
 800bd64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd6a:	78fb      	ldrb	r3, [r7, #3]
 800bd6c:	f003 020f 	and.w	r2, r3, #15
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3318      	adds	r3, #24
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d02f      	beq.n	800bde4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bd84:	78fb      	ldrb	r3, [r7, #3]
 800bd86:	f003 020f 	and.w	r2, r3, #15
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	440b      	add	r3, r1
 800bd96:	3318      	adds	r3, #24
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	78fb      	ldrb	r3, [r7, #3]
 800bd9c:	f003 010f 	and.w	r1, r3, #15
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	460b      	mov	r3, r1
 800bda4:	00db      	lsls	r3, r3, #3
 800bda6:	440b      	add	r3, r1
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4403      	add	r3, r0
 800bdac:	331c      	adds	r3, #28
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	fbb2 f1f3 	udiv	r1, r2, r3
 800bdb4:	fb01 f303 	mul.w	r3, r1, r3
 800bdb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d112      	bne.n	800bde4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bdbe:	78fb      	ldrb	r3, [r7, #3]
 800bdc0:	f003 020f 	and.w	r2, r3, #15
 800bdc4:	6879      	ldr	r1, [r7, #4]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	440b      	add	r3, r1
 800bdd0:	3318      	adds	r3, #24
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bdd6:	78f9      	ldrb	r1, [r7, #3]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	2200      	movs	r2, #0
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f002 f9a4 	bl	800e12a <USBD_LL_Transmit>
 800bde2:	e01f      	b.n	800be24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	33b0      	adds	r3, #176	@ 0xb0
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4413      	add	r3, r2
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d010      	beq.n	800be24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	33b0      	adds	r3, #176	@ 0xb0
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4413      	add	r3, r2
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800be20:	78fa      	ldrb	r2, [r7, #3]
 800be22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	32b0      	adds	r2, #176	@ 0xb0
 800be44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	32b0      	adds	r2, #176	@ 0xb0
 800be54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800be5c:	2303      	movs	r3, #3
 800be5e:	e01a      	b.n	800be96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800be60:	78fb      	ldrb	r3, [r7, #3]
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f002 f9a2 	bl	800e1ae <USBD_LL_GetRxDataSize>
 800be6a:	4602      	mov	r2, r0
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	33b0      	adds	r3, #176	@ 0xb0
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800be90:	4611      	mov	r1, r2
 800be92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	32b0      	adds	r2, #176	@ 0xb0
 800beb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e024      	b.n	800bf0a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	33b0      	adds	r3, #176	@ 0xb0
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d019      	beq.n	800bf08 <USBD_CDC_EP0_RxReady+0x6a>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800beda:	2bff      	cmp	r3, #255	@ 0xff
 800bedc:	d014      	beq.n	800bf08 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	33b0      	adds	r3, #176	@ 0xb0
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bef6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800befe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	22ff      	movs	r2, #255	@ 0xff
 800bf04:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf1c:	2182      	movs	r1, #130	@ 0x82
 800bf1e:	4818      	ldr	r0, [pc, #96]	@ (800bf80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf20:	f000 fd4f 	bl	800c9c2 <USBD_GetEpDesc>
 800bf24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf26:	2101      	movs	r1, #1
 800bf28:	4815      	ldr	r0, [pc, #84]	@ (800bf80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf2a:	f000 fd4a 	bl	800c9c2 <USBD_GetEpDesc>
 800bf2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf30:	2181      	movs	r1, #129	@ 0x81
 800bf32:	4813      	ldr	r0, [pc, #76]	@ (800bf80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf34:	f000 fd45 	bl	800c9c2 <USBD_GetEpDesc>
 800bf38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2210      	movs	r2, #16
 800bf44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d006      	beq.n	800bf5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf54:	711a      	strb	r2, [r3, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d006      	beq.n	800bf6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf68:	711a      	strb	r2, [r3, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2243      	movs	r2, #67	@ 0x43
 800bf72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf74:	4b02      	ldr	r3, [pc, #8]	@ (800bf80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000080 	.word	0x20000080

0800bf84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf8c:	2182      	movs	r1, #130	@ 0x82
 800bf8e:	4818      	ldr	r0, [pc, #96]	@ (800bff0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf90:	f000 fd17 	bl	800c9c2 <USBD_GetEpDesc>
 800bf94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf96:	2101      	movs	r1, #1
 800bf98:	4815      	ldr	r0, [pc, #84]	@ (800bff0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf9a:	f000 fd12 	bl	800c9c2 <USBD_GetEpDesc>
 800bf9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bfa0:	2181      	movs	r1, #129	@ 0x81
 800bfa2:	4813      	ldr	r0, [pc, #76]	@ (800bff0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfa4:	f000 fd0d 	bl	800c9c2 <USBD_GetEpDesc>
 800bfa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2210      	movs	r2, #16
 800bfb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d006      	beq.n	800bfca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	711a      	strb	r2, [r3, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f042 0202 	orr.w	r2, r2, #2
 800bfc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d006      	beq.n	800bfde <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	711a      	strb	r2, [r3, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f042 0202 	orr.w	r2, r2, #2
 800bfdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2243      	movs	r2, #67	@ 0x43
 800bfe2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfe4:	4b02      	ldr	r3, [pc, #8]	@ (800bff0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3718      	adds	r7, #24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20000080 	.word	0x20000080

0800bff4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bffc:	2182      	movs	r1, #130	@ 0x82
 800bffe:	4818      	ldr	r0, [pc, #96]	@ (800c060 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c000:	f000 fcdf 	bl	800c9c2 <USBD_GetEpDesc>
 800c004:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c006:	2101      	movs	r1, #1
 800c008:	4815      	ldr	r0, [pc, #84]	@ (800c060 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c00a:	f000 fcda 	bl	800c9c2 <USBD_GetEpDesc>
 800c00e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c010:	2181      	movs	r1, #129	@ 0x81
 800c012:	4813      	ldr	r0, [pc, #76]	@ (800c060 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c014:	f000 fcd5 	bl	800c9c2 <USBD_GetEpDesc>
 800c018:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d002      	beq.n	800c026 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	2210      	movs	r2, #16
 800c024:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d006      	beq.n	800c03a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	2200      	movs	r2, #0
 800c030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c034:	711a      	strb	r2, [r3, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d006      	beq.n	800c04e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c048:	711a      	strb	r2, [r3, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2243      	movs	r2, #67	@ 0x43
 800c052:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c054:	4b02      	ldr	r3, [pc, #8]	@ (800c060 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c056:	4618      	mov	r0, r3
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20000080 	.word	0x20000080

0800c064 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	220a      	movs	r2, #10
 800c070:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c072:	4b03      	ldr	r3, [pc, #12]	@ (800c080 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	2000003c 	.word	0x2000003c

0800c084 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c094:	2303      	movs	r3, #3
 800c096:	e009      	b.n	800c0ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	33b0      	adds	r3, #176	@ 0xb0
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	32b0      	adds	r2, #176	@ 0xb0
 800c0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e008      	b.n	800c0f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	371c      	adds	r7, #28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	32b0      	adds	r2, #176	@ 0xb0
 800c110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c114:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d101      	bne.n	800c120 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c11c:	2303      	movs	r3, #3
 800c11e:	e004      	b.n	800c12a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
	...

0800c138 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	32b0      	adds	r2, #176	@ 0xb0
 800c14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c150:	2301      	movs	r3, #1
 800c152:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d101      	bne.n	800c15e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e025      	b.n	800c1aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c164:	2b00      	cmp	r3, #0
 800c166:	d11f      	bne.n	800c1a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c170:	4b10      	ldr	r3, [pc, #64]	@ (800c1b4 <USBD_CDC_TransmitPacket+0x7c>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	f003 020f 	and.w	r2, r3, #15
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	4613      	mov	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4403      	add	r3, r0
 800c18a:	3318      	adds	r3, #24
 800c18c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c18e:	4b09      	ldr	r3, [pc, #36]	@ (800c1b4 <USBD_CDC_TransmitPacket+0x7c>)
 800c190:	7819      	ldrb	r1, [r3, #0]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f001 ffc3 	bl	800e12a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	200000c3 	.word	0x200000c3

0800c1b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	32b0      	adds	r2, #176	@ 0xb0
 800c1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	32b0      	adds	r2, #176	@ 0xb0
 800c1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e018      	b.n	800c218 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	7c1b      	ldrb	r3, [r3, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10a      	bne.n	800c204 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c220 <USBD_CDC_ReceivePacket+0x68>)
 800c1f0:	7819      	ldrb	r1, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c1f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f001 ffb5 	bl	800e16c <USBD_LL_PrepareReceive>
 800c202:	e008      	b.n	800c216 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c204:	4b06      	ldr	r3, [pc, #24]	@ (800c220 <USBD_CDC_ReceivePacket+0x68>)
 800c206:	7819      	ldrb	r1, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c20e:	2340      	movs	r3, #64	@ 0x40
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f001 ffab 	bl	800e16c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	200000c4 	.word	0x200000c4

0800c224 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	4613      	mov	r3, r2
 800c230:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d101      	bne.n	800c23c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c238:	2303      	movs	r3, #3
 800c23a:	e01f      	b.n	800c27c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d003      	beq.n	800c262 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	79fa      	ldrb	r2, [r7, #7]
 800c26e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f001 fe25 	bl	800dec0 <USBD_LL_Init>
 800c276:	4603      	mov	r3, r0
 800c278:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c27a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c28e:	2300      	movs	r3, #0
 800c290:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c298:	2303      	movs	r3, #3
 800c29a:	e025      	b.n	800c2e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	683a      	ldr	r2, [r7, #0]
 800c2a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	32ae      	adds	r2, #174	@ 0xae
 800c2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00f      	beq.n	800c2d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	32ae      	adds	r2, #174	@ 0xae
 800c2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c8:	f107 020e 	add.w	r2, r7, #14
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	4798      	blx	r3
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f001 fe2d 	bl	800df58 <USBD_LL_Start>
 800c2fe:	4603      	mov	r3, r0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c310:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c312:	4618      	mov	r0, r3
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr

0800c31e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b084      	sub	sp, #16
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	460b      	mov	r3, r1
 800c328:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c32a:	2300      	movs	r3, #0
 800c32c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c334:	2b00      	cmp	r3, #0
 800c336:	d009      	beq.n	800c34c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	78fa      	ldrb	r2, [r7, #3]
 800c342:	4611      	mov	r1, r2
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	4798      	blx	r3
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	460b      	mov	r3, r1
 800c360:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	78fa      	ldrb	r2, [r7, #3]
 800c370:	4611      	mov	r1, r2
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	4798      	blx	r3
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c37c:	2303      	movs	r3, #3
 800c37e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c380:	7bfb      	ldrb	r3, [r7, #15]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f001 f90c 	bl	800d5ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c3be:	f003 031f 	and.w	r3, r3, #31
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d01a      	beq.n	800c3fc <USBD_LL_SetupStage+0x72>
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d822      	bhi.n	800c410 <USBD_LL_SetupStage+0x86>
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <USBD_LL_SetupStage+0x4a>
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d00a      	beq.n	800c3e8 <USBD_LL_SetupStage+0x5e>
 800c3d2:	e01d      	b.n	800c410 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fb63 	bl	800caa8 <USBD_StdDevReq>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c3e6:	e020      	b.n	800c42a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fbcb 	bl	800cb8c <USBD_StdItfReq>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c3fa:	e016      	b.n	800c42a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fc2d 	bl	800cc64 <USBD_StdEPReq>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73fb      	strb	r3, [r7, #15]
      break;
 800c40e:	e00c      	b.n	800c42a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c416:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f001 fdfa 	bl	800e018 <USBD_LL_StallEP>
 800c424:	4603      	mov	r3, r0
 800c426:	73fb      	strb	r3, [r7, #15]
      break;
 800c428:	bf00      	nop
  }

  return ret;
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b086      	sub	sp, #24
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	460b      	mov	r3, r1
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c446:	7afb      	ldrb	r3, [r7, #11]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d16e      	bne.n	800c52a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c452:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	f040 8098 	bne.w	800c590 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	689a      	ldr	r2, [r3, #8]
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d913      	bls.n	800c494 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	1ad2      	subs	r2, r2, r3
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	68da      	ldr	r2, [r3, #12]
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	4293      	cmp	r3, r2
 800c484:	bf28      	it	cs
 800c486:	4613      	movcs	r3, r2
 800c488:	461a      	mov	r2, r3
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f001 f994 	bl	800d7ba <USBD_CtlContinueRx>
 800c492:	e07d      	b.n	800c590 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c49a:	f003 031f 	and.w	r3, r3, #31
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d014      	beq.n	800c4cc <USBD_LL_DataOutStage+0x98>
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d81d      	bhi.n	800c4e2 <USBD_LL_DataOutStage+0xae>
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d002      	beq.n	800c4b0 <USBD_LL_DataOutStage+0x7c>
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d003      	beq.n	800c4b6 <USBD_LL_DataOutStage+0x82>
 800c4ae:	e018      	b.n	800c4e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	75bb      	strb	r3, [r7, #22]
            break;
 800c4b4:	e018      	b.n	800c4e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	4619      	mov	r1, r3
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 fa64 	bl	800c98e <USBD_CoreFindIF>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	75bb      	strb	r3, [r7, #22]
            break;
 800c4ca:	e00d      	b.n	800c4e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f000 fa66 	bl	800c9a8 <USBD_CoreFindEP>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75bb      	strb	r3, [r7, #22]
            break;
 800c4e0:	e002      	b.n	800c4e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	75bb      	strb	r3, [r7, #22]
            break;
 800c4e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c4e8:	7dbb      	ldrb	r3, [r7, #22]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d119      	bne.n	800c522 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d113      	bne.n	800c522 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c4fa:	7dba      	ldrb	r2, [r7, #22]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	32ae      	adds	r2, #174	@ 0xae
 800c500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00b      	beq.n	800c522 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c50a:	7dba      	ldrb	r2, [r7, #22]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c512:	7dba      	ldrb	r2, [r7, #22]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	32ae      	adds	r2, #174	@ 0xae
 800c518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f001 f95a 	bl	800d7dc <USBD_CtlSendStatus>
 800c528:	e032      	b.n	800c590 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c52a:	7afb      	ldrb	r3, [r7, #11]
 800c52c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c530:	b2db      	uxtb	r3, r3
 800c532:	4619      	mov	r1, r3
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f000 fa37 	bl	800c9a8 <USBD_CoreFindEP>
 800c53a:	4603      	mov	r3, r0
 800c53c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c53e:	7dbb      	ldrb	r3, [r7, #22]
 800c540:	2bff      	cmp	r3, #255	@ 0xff
 800c542:	d025      	beq.n	800c590 <USBD_LL_DataOutStage+0x15c>
 800c544:	7dbb      	ldrb	r3, [r7, #22]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d122      	bne.n	800c590 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c550:	b2db      	uxtb	r3, r3
 800c552:	2b03      	cmp	r3, #3
 800c554:	d117      	bne.n	800c586 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c556:	7dba      	ldrb	r2, [r7, #22]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	32ae      	adds	r2, #174	@ 0xae
 800c55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00f      	beq.n	800c586 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c566:	7dba      	ldrb	r2, [r7, #22]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c56e:	7dba      	ldrb	r2, [r7, #22]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	32ae      	adds	r2, #174	@ 0xae
 800c574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	7afa      	ldrb	r2, [r7, #11]
 800c57c:	4611      	mov	r1, r2
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	4798      	blx	r3
 800c582:	4603      	mov	r3, r0
 800c584:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
 800c58e:	e000      	b.n	800c592 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b086      	sub	sp, #24
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	607a      	str	r2, [r7, #4]
 800c5a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c5a8:	7afb      	ldrb	r3, [r7, #11]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d16f      	bne.n	800c68e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3314      	adds	r3, #20
 800c5b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d15a      	bne.n	800c674 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	689a      	ldr	r2, [r3, #8]
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d914      	bls.n	800c5f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	689a      	ldr	r2, [r3, #8]
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	1ad2      	subs	r2, r2, r3
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6879      	ldr	r1, [r7, #4]
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f001 f8bc 	bl	800d75e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f001 fdbd 	bl	800e16c <USBD_LL_PrepareReceive>
 800c5f2:	e03f      	b.n	800c674 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	68da      	ldr	r2, [r3, #12]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d11c      	bne.n	800c63a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c608:	429a      	cmp	r2, r3
 800c60a:	d316      	bcc.n	800c63a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c616:	429a      	cmp	r2, r3
 800c618:	d20f      	bcs.n	800c63a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c61a:	2200      	movs	r2, #0
 800c61c:	2100      	movs	r1, #0
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f001 f89d 	bl	800d75e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c62c:	2300      	movs	r3, #0
 800c62e:	2200      	movs	r2, #0
 800c630:	2100      	movs	r1, #0
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f001 fd9a 	bl	800e16c <USBD_LL_PrepareReceive>
 800c638:	e01c      	b.n	800c674 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b03      	cmp	r3, #3
 800c644:	d10f      	bne.n	800c666 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d009      	beq.n	800c666 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c666:	2180      	movs	r1, #128	@ 0x80
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f001 fcd5 	bl	800e018 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f001 f8c7 	bl	800d802 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d03a      	beq.n	800c6f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f7ff fe42 	bl	800c308 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c68c:	e032      	b.n	800c6f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c694:	b2db      	uxtb	r3, r3
 800c696:	4619      	mov	r1, r3
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f000 f985 	bl	800c9a8 <USBD_CoreFindEP>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	2bff      	cmp	r3, #255	@ 0xff
 800c6a6:	d025      	beq.n	800c6f4 <USBD_LL_DataInStage+0x15a>
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d122      	bne.n	800c6f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d11c      	bne.n	800c6f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c6ba:	7dfa      	ldrb	r2, [r7, #23]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	32ae      	adds	r2, #174	@ 0xae
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d014      	beq.n	800c6f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c6ca:	7dfa      	ldrb	r2, [r7, #23]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c6d2:	7dfa      	ldrb	r2, [r7, #23]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	32ae      	adds	r2, #174	@ 0xae
 800c6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	7afa      	ldrb	r2, [r7, #11]
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	4798      	blx	r3
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c6ea:	7dbb      	ldrb	r3, [r7, #22]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c6f0:	7dbb      	ldrb	r3, [r7, #22]
 800c6f2:	e000      	b.n	800c6f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3718      	adds	r7, #24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c736:	2b00      	cmp	r3, #0
 800c738:	d014      	beq.n	800c764 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00e      	beq.n	800c764 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	6852      	ldr	r2, [r2, #4]
 800c752:	b2d2      	uxtb	r2, r2
 800c754:	4611      	mov	r1, r2
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	4798      	blx	r3
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d001      	beq.n	800c764 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c760:	2303      	movs	r3, #3
 800c762:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c764:	2340      	movs	r3, #64	@ 0x40
 800c766:	2200      	movs	r2, #0
 800c768:	2100      	movs	r1, #0
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f001 fc0f 	bl	800df8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2240      	movs	r2, #64	@ 0x40
 800c77c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c780:	2340      	movs	r3, #64	@ 0x40
 800c782:	2200      	movs	r2, #0
 800c784:	2180      	movs	r1, #128	@ 0x80
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f001 fc01 	bl	800df8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2240      	movs	r2, #64	@ 0x40
 800c796:	621a      	str	r2, [r3, #32]

  return ret;
 800c798:	7bfb      	ldrb	r3, [r7, #15]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7a2:	b480      	push	{r7}
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	78fa      	ldrb	r2, [r7, #3]
 800c7b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d006      	beq.n	800c7e4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2204      	movs	r2, #4
 800c7e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c7fa:	b480      	push	{r7}
 800c7fc:	b083      	sub	sp, #12
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b04      	cmp	r3, #4
 800c80c:	d106      	bne.n	800c81c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c814:	b2da      	uxtb	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b03      	cmp	r3, #3
 800c83c:	d110      	bne.n	800c860 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00b      	beq.n	800c860 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d005      	beq.n	800c860 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c85a:	69db      	ldr	r3, [r3, #28]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b082      	sub	sp, #8
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	460b      	mov	r3, r1
 800c874:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	32ae      	adds	r2, #174	@ 0xae
 800c880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d101      	bne.n	800c88c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c888:	2303      	movs	r3, #3
 800c88a:	e01c      	b.n	800c8c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b03      	cmp	r3, #3
 800c896:	d115      	bne.n	800c8c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	32ae      	adds	r2, #174	@ 0xae
 800c8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a6:	6a1b      	ldr	r3, [r3, #32]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00b      	beq.n	800c8c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	32ae      	adds	r2, #174	@ 0xae
 800c8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ba:	6a1b      	ldr	r3, [r3, #32]
 800c8bc:	78fa      	ldrb	r2, [r7, #3]
 800c8be:	4611      	mov	r1, r2
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	32ae      	adds	r2, #174	@ 0xae
 800c8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e01c      	b.n	800c92a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d115      	bne.n	800c928 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	32ae      	adds	r2, #174	@ 0xae
 800c906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00b      	beq.n	800c928 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	32ae      	adds	r2, #174	@ 0xae
 800c91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c920:	78fa      	ldrb	r2, [r7, #3]
 800c922:	4611      	mov	r1, r2
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c932:	b480      	push	{r7}
 800c934:	b083      	sub	sp, #12
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00e      	beq.n	800c984 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	6852      	ldr	r2, [r2, #4]
 800c972:	b2d2      	uxtb	r2, r2
 800c974:	4611      	mov	r1, r2
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	4798      	blx	r3
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c980:	2303      	movs	r3, #3
 800c982:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c984:	7bfb      	ldrb	r3, [r7, #15]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	460b      	mov	r3, r1
 800c998:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c99a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c9b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b086      	sub	sp, #24
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	885b      	ldrh	r3, [r3, #2]
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	7812      	ldrb	r2, [r2, #0]
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d91f      	bls.n	800ca28 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c9ee:	e013      	b.n	800ca18 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c9f0:	f107 030a 	add.w	r3, r7, #10
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6978      	ldr	r0, [r7, #20]
 800c9f8:	f000 f81b 	bl	800ca32 <USBD_GetNextDesc>
 800c9fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	785b      	ldrb	r3, [r3, #1]
 800ca02:	2b05      	cmp	r3, #5
 800ca04:	d108      	bne.n	800ca18 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	789b      	ldrb	r3, [r3, #2]
 800ca0e:	78fa      	ldrb	r2, [r7, #3]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d008      	beq.n	800ca26 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ca14:	2300      	movs	r3, #0
 800ca16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	885b      	ldrh	r3, [r3, #2]
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	897b      	ldrh	r3, [r7, #10]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d8e5      	bhi.n	800c9f0 <USBD_GetEpDesc+0x2e>
 800ca24:	e000      	b.n	800ca28 <USBD_GetEpDesc+0x66>
          break;
 800ca26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ca28:	693b      	ldr	r3, [r7, #16]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3718      	adds	r7, #24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ca32:	b480      	push	{r7}
 800ca34:	b085      	sub	sp, #20
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	7812      	ldrb	r2, [r2, #0]
 800ca48:	4413      	add	r3, r2
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	461a      	mov	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4413      	add	r3, r2
 800ca5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3714      	adds	r7, #20
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr

0800ca6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b087      	sub	sp, #28
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ca88:	8a3b      	ldrh	r3, [r7, #16]
 800ca8a:	021b      	lsls	r3, r3, #8
 800ca8c:	b21a      	sxth	r2, r3
 800ca8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	b21b      	sxth	r3, r3
 800ca96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ca98:	89fb      	ldrh	r3, [r7, #14]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	371c      	adds	r7, #28
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
	...

0800caa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cabe:	2b40      	cmp	r3, #64	@ 0x40
 800cac0:	d005      	beq.n	800cace <USBD_StdDevReq+0x26>
 800cac2:	2b40      	cmp	r3, #64	@ 0x40
 800cac4:	d857      	bhi.n	800cb76 <USBD_StdDevReq+0xce>
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00f      	beq.n	800caea <USBD_StdDevReq+0x42>
 800caca:	2b20      	cmp	r3, #32
 800cacc:	d153      	bne.n	800cb76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	32ae      	adds	r2, #174	@ 0xae
 800cad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	6839      	ldr	r1, [r7, #0]
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	4798      	blx	r3
 800cae4:	4603      	mov	r3, r0
 800cae6:	73fb      	strb	r3, [r7, #15]
      break;
 800cae8:	e04a      	b.n	800cb80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	785b      	ldrb	r3, [r3, #1]
 800caee:	2b09      	cmp	r3, #9
 800caf0:	d83b      	bhi.n	800cb6a <USBD_StdDevReq+0xc2>
 800caf2:	a201      	add	r2, pc, #4	@ (adr r2, 800caf8 <USBD_StdDevReq+0x50>)
 800caf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf8:	0800cb4d 	.word	0x0800cb4d
 800cafc:	0800cb61 	.word	0x0800cb61
 800cb00:	0800cb6b 	.word	0x0800cb6b
 800cb04:	0800cb57 	.word	0x0800cb57
 800cb08:	0800cb6b 	.word	0x0800cb6b
 800cb0c:	0800cb2b 	.word	0x0800cb2b
 800cb10:	0800cb21 	.word	0x0800cb21
 800cb14:	0800cb6b 	.word	0x0800cb6b
 800cb18:	0800cb43 	.word	0x0800cb43
 800cb1c:	0800cb35 	.word	0x0800cb35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fa3c 	bl	800cfa0 <USBD_GetDescriptor>
          break;
 800cb28:	e024      	b.n	800cb74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fba1 	bl	800d274 <USBD_SetAddress>
          break;
 800cb32:	e01f      	b.n	800cb74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cb34:	6839      	ldr	r1, [r7, #0]
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 fbe0 	bl	800d2fc <USBD_SetConfig>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	73fb      	strb	r3, [r7, #15]
          break;
 800cb40:	e018      	b.n	800cb74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fc83 	bl	800d450 <USBD_GetConfig>
          break;
 800cb4a:	e013      	b.n	800cb74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cb4c:	6839      	ldr	r1, [r7, #0]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fcb4 	bl	800d4bc <USBD_GetStatus>
          break;
 800cb54:	e00e      	b.n	800cb74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 fce3 	bl	800d524 <USBD_SetFeature>
          break;
 800cb5e:	e009      	b.n	800cb74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 fd07 	bl	800d576 <USBD_ClrFeature>
          break;
 800cb68:	e004      	b.n	800cb74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fd5e 	bl	800d62e <USBD_CtlError>
          break;
 800cb72:	bf00      	nop
      }
      break;
 800cb74:	e004      	b.n	800cb80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fd58 	bl	800d62e <USBD_CtlError>
      break;
 800cb7e:	bf00      	nop
  }

  return ret;
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop

0800cb8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb96:	2300      	movs	r3, #0
 800cb98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cba2:	2b40      	cmp	r3, #64	@ 0x40
 800cba4:	d005      	beq.n	800cbb2 <USBD_StdItfReq+0x26>
 800cba6:	2b40      	cmp	r3, #64	@ 0x40
 800cba8:	d852      	bhi.n	800cc50 <USBD_StdItfReq+0xc4>
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <USBD_StdItfReq+0x26>
 800cbae:	2b20      	cmp	r3, #32
 800cbb0:	d14e      	bne.n	800cc50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d840      	bhi.n	800cc42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	889b      	ldrh	r3, [r3, #4]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d836      	bhi.n	800cc38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	889b      	ldrh	r3, [r3, #4]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff fedb 	bl	800c98e <USBD_CoreFindIF>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	2bff      	cmp	r3, #255	@ 0xff
 800cbe0:	d01d      	beq.n	800cc1e <USBD_StdItfReq+0x92>
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d11a      	bne.n	800cc1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cbe8:	7bba      	ldrb	r2, [r7, #14]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	32ae      	adds	r2, #174	@ 0xae
 800cbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00f      	beq.n	800cc18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cbf8:	7bba      	ldrb	r2, [r7, #14]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc00:	7bba      	ldrb	r2, [r7, #14]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	32ae      	adds	r2, #174	@ 0xae
 800cc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	4798      	blx	r3
 800cc12:	4603      	mov	r3, r0
 800cc14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc16:	e004      	b.n	800cc22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc1c:	e001      	b.n	800cc22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cc1e:	2303      	movs	r3, #3
 800cc20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	88db      	ldrh	r3, [r3, #6]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d110      	bne.n	800cc4c <USBD_StdItfReq+0xc0>
 800cc2a:	7bfb      	ldrb	r3, [r7, #15]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10d      	bne.n	800cc4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 fdd3 	bl	800d7dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cc36:	e009      	b.n	800cc4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cc38:	6839      	ldr	r1, [r7, #0]
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fcf7 	bl	800d62e <USBD_CtlError>
          break;
 800cc40:	e004      	b.n	800cc4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fcf2 	bl	800d62e <USBD_CtlError>
          break;
 800cc4a:	e000      	b.n	800cc4e <USBD_StdItfReq+0xc2>
          break;
 800cc4c:	bf00      	nop
      }
      break;
 800cc4e:	e004      	b.n	800cc5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fceb 	bl	800d62e <USBD_CtlError>
      break;
 800cc58:	bf00      	nop
  }

  return ret;
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	889b      	ldrh	r3, [r3, #4]
 800cc76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc80:	2b40      	cmp	r3, #64	@ 0x40
 800cc82:	d007      	beq.n	800cc94 <USBD_StdEPReq+0x30>
 800cc84:	2b40      	cmp	r3, #64	@ 0x40
 800cc86:	f200 817f 	bhi.w	800cf88 <USBD_StdEPReq+0x324>
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d02a      	beq.n	800cce4 <USBD_StdEPReq+0x80>
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	f040 817a 	bne.w	800cf88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f7ff fe85 	bl	800c9a8 <USBD_CoreFindEP>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cca2:	7b7b      	ldrb	r3, [r7, #13]
 800cca4:	2bff      	cmp	r3, #255	@ 0xff
 800cca6:	f000 8174 	beq.w	800cf92 <USBD_StdEPReq+0x32e>
 800ccaa:	7b7b      	ldrb	r3, [r7, #13]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f040 8170 	bne.w	800cf92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ccb2:	7b7a      	ldrb	r2, [r7, #13]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ccba:	7b7a      	ldrb	r2, [r7, #13]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	32ae      	adds	r2, #174	@ 0xae
 800ccc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f000 8163 	beq.w	800cf92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cccc:	7b7a      	ldrb	r2, [r7, #13]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	32ae      	adds	r2, #174	@ 0xae
 800ccd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	4798      	blx	r3
 800ccde:	4603      	mov	r3, r0
 800cce0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cce2:	e156      	b.n	800cf92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	785b      	ldrb	r3, [r3, #1]
 800cce8:	2b03      	cmp	r3, #3
 800ccea:	d008      	beq.n	800ccfe <USBD_StdEPReq+0x9a>
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	f300 8145 	bgt.w	800cf7c <USBD_StdEPReq+0x318>
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f000 809b 	beq.w	800ce2e <USBD_StdEPReq+0x1ca>
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d03c      	beq.n	800cd76 <USBD_StdEPReq+0x112>
 800ccfc:	e13e      	b.n	800cf7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d002      	beq.n	800cd10 <USBD_StdEPReq+0xac>
 800cd0a:	2b03      	cmp	r3, #3
 800cd0c:	d016      	beq.n	800cd3c <USBD_StdEPReq+0xd8>
 800cd0e:	e02c      	b.n	800cd6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00d      	beq.n	800cd32 <USBD_StdEPReq+0xce>
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
 800cd18:	2b80      	cmp	r3, #128	@ 0x80
 800cd1a:	d00a      	beq.n	800cd32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd1c:	7bbb      	ldrb	r3, [r7, #14]
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f001 f979 	bl	800e018 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd26:	2180      	movs	r1, #128	@ 0x80
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f001 f975 	bl	800e018 <USBD_LL_StallEP>
 800cd2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd30:	e020      	b.n	800cd74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fc7a 	bl	800d62e <USBD_CtlError>
              break;
 800cd3a:	e01b      	b.n	800cd74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	885b      	ldrh	r3, [r3, #2]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10e      	bne.n	800cd62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd44:	7bbb      	ldrb	r3, [r7, #14]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00b      	beq.n	800cd62 <USBD_StdEPReq+0xfe>
 800cd4a:	7bbb      	ldrb	r3, [r7, #14]
 800cd4c:	2b80      	cmp	r3, #128	@ 0x80
 800cd4e:	d008      	beq.n	800cd62 <USBD_StdEPReq+0xfe>
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	88db      	ldrh	r3, [r3, #6]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d104      	bne.n	800cd62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f001 f95b 	bl	800e018 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fd3a 	bl	800d7dc <USBD_CtlSendStatus>

              break;
 800cd68:	e004      	b.n	800cd74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 fc5e 	bl	800d62e <USBD_CtlError>
              break;
 800cd72:	bf00      	nop
          }
          break;
 800cd74:	e107      	b.n	800cf86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d002      	beq.n	800cd88 <USBD_StdEPReq+0x124>
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d016      	beq.n	800cdb4 <USBD_StdEPReq+0x150>
 800cd86:	e04b      	b.n	800ce20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd88:	7bbb      	ldrb	r3, [r7, #14]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00d      	beq.n	800cdaa <USBD_StdEPReq+0x146>
 800cd8e:	7bbb      	ldrb	r3, [r7, #14]
 800cd90:	2b80      	cmp	r3, #128	@ 0x80
 800cd92:	d00a      	beq.n	800cdaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
 800cd96:	4619      	mov	r1, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f001 f93d 	bl	800e018 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd9e:	2180      	movs	r1, #128	@ 0x80
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f001 f939 	bl	800e018 <USBD_LL_StallEP>
 800cda6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cda8:	e040      	b.n	800ce2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fc3e 	bl	800d62e <USBD_CtlError>
              break;
 800cdb2:	e03b      	b.n	800ce2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	885b      	ldrh	r3, [r3, #2]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d136      	bne.n	800ce2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cdbc:	7bbb      	ldrb	r3, [r7, #14]
 800cdbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d004      	beq.n	800cdd0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cdc6:	7bbb      	ldrb	r3, [r7, #14]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f001 f943 	bl	800e056 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 fd03 	bl	800d7dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cdd6:	7bbb      	ldrb	r3, [r7, #14]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff fde4 	bl	800c9a8 <USBD_CoreFindEP>
 800cde0:	4603      	mov	r3, r0
 800cde2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cde4:	7b7b      	ldrb	r3, [r7, #13]
 800cde6:	2bff      	cmp	r3, #255	@ 0xff
 800cde8:	d01f      	beq.n	800ce2a <USBD_StdEPReq+0x1c6>
 800cdea:	7b7b      	ldrb	r3, [r7, #13]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d11c      	bne.n	800ce2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cdf0:	7b7a      	ldrb	r2, [r7, #13]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cdf8:	7b7a      	ldrb	r2, [r7, #13]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	32ae      	adds	r2, #174	@ 0xae
 800cdfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d010      	beq.n	800ce2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce08:	7b7a      	ldrb	r2, [r7, #13]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	32ae      	adds	r2, #174	@ 0xae
 800ce0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	4798      	blx	r3
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ce1e:	e004      	b.n	800ce2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fc03 	bl	800d62e <USBD_CtlError>
              break;
 800ce28:	e000      	b.n	800ce2c <USBD_StdEPReq+0x1c8>
              break;
 800ce2a:	bf00      	nop
          }
          break;
 800ce2c:	e0ab      	b.n	800cf86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d002      	beq.n	800ce40 <USBD_StdEPReq+0x1dc>
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d032      	beq.n	800cea4 <USBD_StdEPReq+0x240>
 800ce3e:	e097      	b.n	800cf70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d007      	beq.n	800ce56 <USBD_StdEPReq+0x1f2>
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
 800ce48:	2b80      	cmp	r3, #128	@ 0x80
 800ce4a:	d004      	beq.n	800ce56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fbed 	bl	800d62e <USBD_CtlError>
                break;
 800ce54:	e091      	b.n	800cf7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	da0b      	bge.n	800ce76 <USBD_StdEPReq+0x212>
 800ce5e:	7bbb      	ldrb	r3, [r7, #14]
 800ce60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce64:	4613      	mov	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	3310      	adds	r3, #16
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	4413      	add	r3, r2
 800ce72:	3304      	adds	r3, #4
 800ce74:	e00b      	b.n	800ce8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce76:	7bbb      	ldrb	r3, [r7, #14]
 800ce78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4413      	add	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2202      	movs	r2, #2
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fc43 	bl	800d728 <USBD_CtlSendData>
              break;
 800cea2:	e06a      	b.n	800cf7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	da11      	bge.n	800ced0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ceac:	7bbb      	ldrb	r3, [r7, #14]
 800ceae:	f003 020f 	and.w	r2, r3, #15
 800ceb2:	6879      	ldr	r1, [r7, #4]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	440b      	add	r3, r1
 800cebe:	3324      	adds	r3, #36	@ 0x24
 800cec0:	881b      	ldrh	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d117      	bne.n	800cef6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cec6:	6839      	ldr	r1, [r7, #0]
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fbb0 	bl	800d62e <USBD_CtlError>
                  break;
 800cece:	e054      	b.n	800cf7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ced0:	7bbb      	ldrb	r3, [r7, #14]
 800ced2:	f003 020f 	and.w	r2, r3, #15
 800ced6:	6879      	ldr	r1, [r7, #4]
 800ced8:	4613      	mov	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	440b      	add	r3, r1
 800cee2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cee6:	881b      	ldrh	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d104      	bne.n	800cef6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fb9d 	bl	800d62e <USBD_CtlError>
                  break;
 800cef4:	e041      	b.n	800cf7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	da0b      	bge.n	800cf16 <USBD_StdEPReq+0x2b2>
 800cefe:	7bbb      	ldrb	r3, [r7, #14]
 800cf00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf04:	4613      	mov	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4413      	add	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	3310      	adds	r3, #16
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	4413      	add	r3, r2
 800cf12:	3304      	adds	r3, #4
 800cf14:	e00b      	b.n	800cf2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf16:	7bbb      	ldrb	r3, [r7, #14]
 800cf18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf30:	7bbb      	ldrb	r3, [r7, #14]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d002      	beq.n	800cf3c <USBD_StdEPReq+0x2d8>
 800cf36:	7bbb      	ldrb	r3, [r7, #14]
 800cf38:	2b80      	cmp	r3, #128	@ 0x80
 800cf3a:	d103      	bne.n	800cf44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	601a      	str	r2, [r3, #0]
 800cf42:	e00e      	b.n	800cf62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf44:	7bbb      	ldrb	r3, [r7, #14]
 800cf46:	4619      	mov	r1, r3
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f001 f8a3 	bl	800e094 <USBD_LL_IsStallEP>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d003      	beq.n	800cf5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	2201      	movs	r2, #1
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	e002      	b.n	800cf62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2202      	movs	r2, #2
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fbdd 	bl	800d728 <USBD_CtlSendData>
              break;
 800cf6e:	e004      	b.n	800cf7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fb5b 	bl	800d62e <USBD_CtlError>
              break;
 800cf78:	bf00      	nop
          }
          break;
 800cf7a:	e004      	b.n	800cf86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fb55 	bl	800d62e <USBD_CtlError>
          break;
 800cf84:	bf00      	nop
      }
      break;
 800cf86:	e005      	b.n	800cf94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 fb4f 	bl	800d62e <USBD_CtlError>
      break;
 800cf90:	e000      	b.n	800cf94 <USBD_StdEPReq+0x330>
      break;
 800cf92:	bf00      	nop
  }

  return ret;
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	885b      	ldrh	r3, [r3, #2]
 800cfba:	0a1b      	lsrs	r3, r3, #8
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	2b06      	cmp	r3, #6
 800cfc2:	f200 8128 	bhi.w	800d216 <USBD_GetDescriptor+0x276>
 800cfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfcc <USBD_GetDescriptor+0x2c>)
 800cfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfcc:	0800cfe9 	.word	0x0800cfe9
 800cfd0:	0800d001 	.word	0x0800d001
 800cfd4:	0800d041 	.word	0x0800d041
 800cfd8:	0800d217 	.word	0x0800d217
 800cfdc:	0800d217 	.word	0x0800d217
 800cfe0:	0800d1b7 	.word	0x0800d1b7
 800cfe4:	0800d1e3 	.word	0x0800d1e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	7c12      	ldrb	r2, [r2, #16]
 800cff4:	f107 0108 	add.w	r1, r7, #8
 800cff8:	4610      	mov	r0, r2
 800cffa:	4798      	blx	r3
 800cffc:	60f8      	str	r0, [r7, #12]
      break;
 800cffe:	e112      	b.n	800d226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	7c1b      	ldrb	r3, [r3, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10d      	bne.n	800d024 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d010:	f107 0208 	add.w	r2, r7, #8
 800d014:	4610      	mov	r0, r2
 800d016:	4798      	blx	r3
 800d018:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	3301      	adds	r3, #1
 800d01e:	2202      	movs	r2, #2
 800d020:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d022:	e100      	b.n	800d226 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d02c:	f107 0208 	add.w	r2, r7, #8
 800d030:	4610      	mov	r0, r2
 800d032:	4798      	blx	r3
 800d034:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	3301      	adds	r3, #1
 800d03a:	2202      	movs	r2, #2
 800d03c:	701a      	strb	r2, [r3, #0]
      break;
 800d03e:	e0f2      	b.n	800d226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	885b      	ldrh	r3, [r3, #2]
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b05      	cmp	r3, #5
 800d048:	f200 80ac 	bhi.w	800d1a4 <USBD_GetDescriptor+0x204>
 800d04c:	a201      	add	r2, pc, #4	@ (adr r2, 800d054 <USBD_GetDescriptor+0xb4>)
 800d04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d052:	bf00      	nop
 800d054:	0800d06d 	.word	0x0800d06d
 800d058:	0800d0a1 	.word	0x0800d0a1
 800d05c:	0800d0d5 	.word	0x0800d0d5
 800d060:	0800d109 	.word	0x0800d109
 800d064:	0800d13d 	.word	0x0800d13d
 800d068:	0800d171 	.word	0x0800d171
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00b      	beq.n	800d090 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	7c12      	ldrb	r2, [r2, #16]
 800d084:	f107 0108 	add.w	r1, r7, #8
 800d088:	4610      	mov	r0, r2
 800d08a:	4798      	blx	r3
 800d08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d08e:	e091      	b.n	800d1b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 facb 	bl	800d62e <USBD_CtlError>
            err++;
 800d098:	7afb      	ldrb	r3, [r7, #11]
 800d09a:	3301      	adds	r3, #1
 800d09c:	72fb      	strb	r3, [r7, #11]
          break;
 800d09e:	e089      	b.n	800d1b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00b      	beq.n	800d0c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	7c12      	ldrb	r2, [r2, #16]
 800d0b8:	f107 0108 	add.w	r1, r7, #8
 800d0bc:	4610      	mov	r0, r2
 800d0be:	4798      	blx	r3
 800d0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0c2:	e077      	b.n	800d1b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0c4:	6839      	ldr	r1, [r7, #0]
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fab1 	bl	800d62e <USBD_CtlError>
            err++;
 800d0cc:	7afb      	ldrb	r3, [r7, #11]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d0d2:	e06f      	b.n	800d1b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00b      	beq.n	800d0f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	7c12      	ldrb	r2, [r2, #16]
 800d0ec:	f107 0108 	add.w	r1, r7, #8
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	4798      	blx	r3
 800d0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0f6:	e05d      	b.n	800d1b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fa97 	bl	800d62e <USBD_CtlError>
            err++;
 800d100:	7afb      	ldrb	r3, [r7, #11]
 800d102:	3301      	adds	r3, #1
 800d104:	72fb      	strb	r3, [r7, #11]
          break;
 800d106:	e055      	b.n	800d1b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00b      	beq.n	800d12c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	7c12      	ldrb	r2, [r2, #16]
 800d120:	f107 0108 	add.w	r1, r7, #8
 800d124:	4610      	mov	r0, r2
 800d126:	4798      	blx	r3
 800d128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d12a:	e043      	b.n	800d1b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d12c:	6839      	ldr	r1, [r7, #0]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fa7d 	bl	800d62e <USBD_CtlError>
            err++;
 800d134:	7afb      	ldrb	r3, [r7, #11]
 800d136:	3301      	adds	r3, #1
 800d138:	72fb      	strb	r3, [r7, #11]
          break;
 800d13a:	e03b      	b.n	800d1b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d142:	695b      	ldr	r3, [r3, #20]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00b      	beq.n	800d160 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	7c12      	ldrb	r2, [r2, #16]
 800d154:	f107 0108 	add.w	r1, r7, #8
 800d158:	4610      	mov	r0, r2
 800d15a:	4798      	blx	r3
 800d15c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d15e:	e029      	b.n	800d1b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fa63 	bl	800d62e <USBD_CtlError>
            err++;
 800d168:	7afb      	ldrb	r3, [r7, #11]
 800d16a:	3301      	adds	r3, #1
 800d16c:	72fb      	strb	r3, [r7, #11]
          break;
 800d16e:	e021      	b.n	800d1b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00b      	beq.n	800d194 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d182:	699b      	ldr	r3, [r3, #24]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	7c12      	ldrb	r2, [r2, #16]
 800d188:	f107 0108 	add.w	r1, r7, #8
 800d18c:	4610      	mov	r0, r2
 800d18e:	4798      	blx	r3
 800d190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d192:	e00f      	b.n	800d1b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d194:	6839      	ldr	r1, [r7, #0]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fa49 	bl	800d62e <USBD_CtlError>
            err++;
 800d19c:	7afb      	ldrb	r3, [r7, #11]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1a2:	e007      	b.n	800d1b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d1a4:	6839      	ldr	r1, [r7, #0]
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fa41 	bl	800d62e <USBD_CtlError>
          err++;
 800d1ac:	7afb      	ldrb	r3, [r7, #11]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d1b2:	bf00      	nop
      }
      break;
 800d1b4:	e037      	b.n	800d226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	7c1b      	ldrb	r3, [r3, #16]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d109      	bne.n	800d1d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1c6:	f107 0208 	add.w	r2, r7, #8
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	4798      	blx	r3
 800d1ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1d0:	e029      	b.n	800d226 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d1d2:	6839      	ldr	r1, [r7, #0]
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 fa2a 	bl	800d62e <USBD_CtlError>
        err++;
 800d1da:	7afb      	ldrb	r3, [r7, #11]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	72fb      	strb	r3, [r7, #11]
      break;
 800d1e0:	e021      	b.n	800d226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	7c1b      	ldrb	r3, [r3, #16]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d10d      	bne.n	800d206 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f2:	f107 0208 	add.w	r2, r7, #8
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	4798      	blx	r3
 800d1fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	3301      	adds	r3, #1
 800d200:	2207      	movs	r2, #7
 800d202:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d204:	e00f      	b.n	800d226 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fa10 	bl	800d62e <USBD_CtlError>
        err++;
 800d20e:	7afb      	ldrb	r3, [r7, #11]
 800d210:	3301      	adds	r3, #1
 800d212:	72fb      	strb	r3, [r7, #11]
      break;
 800d214:	e007      	b.n	800d226 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d216:	6839      	ldr	r1, [r7, #0]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fa08 	bl	800d62e <USBD_CtlError>
      err++;
 800d21e:	7afb      	ldrb	r3, [r7, #11]
 800d220:	3301      	adds	r3, #1
 800d222:	72fb      	strb	r3, [r7, #11]
      break;
 800d224:	bf00      	nop
  }

  if (err != 0U)
 800d226:	7afb      	ldrb	r3, [r7, #11]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d11e      	bne.n	800d26a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	88db      	ldrh	r3, [r3, #6]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d016      	beq.n	800d262 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d234:	893b      	ldrh	r3, [r7, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00e      	beq.n	800d258 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	88da      	ldrh	r2, [r3, #6]
 800d23e:	893b      	ldrh	r3, [r7, #8]
 800d240:	4293      	cmp	r3, r2
 800d242:	bf28      	it	cs
 800d244:	4613      	movcs	r3, r2
 800d246:	b29b      	uxth	r3, r3
 800d248:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d24a:	893b      	ldrh	r3, [r7, #8]
 800d24c:	461a      	mov	r2, r3
 800d24e:	68f9      	ldr	r1, [r7, #12]
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fa69 	bl	800d728 <USBD_CtlSendData>
 800d256:	e009      	b.n	800d26c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f9e7 	bl	800d62e <USBD_CtlError>
 800d260:	e004      	b.n	800d26c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 faba 	bl	800d7dc <USBD_CtlSendStatus>
 800d268:	e000      	b.n	800d26c <USBD_GetDescriptor+0x2cc>
    return;
 800d26a:	bf00      	nop
  }
}
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop

0800d274 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	889b      	ldrh	r3, [r3, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d131      	bne.n	800d2ea <USBD_SetAddress+0x76>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	88db      	ldrh	r3, [r3, #6]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d12d      	bne.n	800d2ea <USBD_SetAddress+0x76>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	885b      	ldrh	r3, [r3, #2]
 800d292:	2b7f      	cmp	r3, #127	@ 0x7f
 800d294:	d829      	bhi.n	800d2ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	885b      	ldrh	r3, [r3, #2]
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	d104      	bne.n	800d2b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d2ae:	6839      	ldr	r1, [r7, #0]
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 f9bc 	bl	800d62e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b6:	e01d      	b.n	800d2f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7bfa      	ldrb	r2, [r7, #15]
 800d2bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d2c0:	7bfb      	ldrb	r3, [r7, #15]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 ff11 	bl	800e0ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 fa86 	bl	800d7dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d004      	beq.n	800d2e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2202      	movs	r2, #2
 800d2da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2de:	e009      	b.n	800d2f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2e8:	e004      	b.n	800d2f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f99e 	bl	800d62e <USBD_CtlError>
  }
}
 800d2f2:	bf00      	nop
 800d2f4:	bf00      	nop
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	885b      	ldrh	r3, [r3, #2]
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	4b4e      	ldr	r3, [pc, #312]	@ (800d44c <USBD_SetConfig+0x150>)
 800d312:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d314:	4b4d      	ldr	r3, [pc, #308]	@ (800d44c <USBD_SetConfig+0x150>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d905      	bls.n	800d328 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 f985 	bl	800d62e <USBD_CtlError>
    return USBD_FAIL;
 800d324:	2303      	movs	r3, #3
 800d326:	e08c      	b.n	800d442 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	2b02      	cmp	r3, #2
 800d332:	d002      	beq.n	800d33a <USBD_SetConfig+0x3e>
 800d334:	2b03      	cmp	r3, #3
 800d336:	d029      	beq.n	800d38c <USBD_SetConfig+0x90>
 800d338:	e075      	b.n	800d426 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d33a:	4b44      	ldr	r3, [pc, #272]	@ (800d44c <USBD_SetConfig+0x150>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d020      	beq.n	800d384 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d342:	4b42      	ldr	r3, [pc, #264]	@ (800d44c <USBD_SetConfig+0x150>)
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d34c:	4b3f      	ldr	r3, [pc, #252]	@ (800d44c <USBD_SetConfig+0x150>)
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	4619      	mov	r1, r3
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f7fe ffe3 	bl	800c31e <USBD_SetClassConfig>
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d35c:	7bfb      	ldrb	r3, [r7, #15]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d008      	beq.n	800d374 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f962 	bl	800d62e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2202      	movs	r2, #2
 800d36e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d372:	e065      	b.n	800d440 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fa31 	bl	800d7dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2203      	movs	r2, #3
 800d37e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d382:	e05d      	b.n	800d440 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fa29 	bl	800d7dc <USBD_CtlSendStatus>
      break;
 800d38a:	e059      	b.n	800d440 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d38c:	4b2f      	ldr	r3, [pc, #188]	@ (800d44c <USBD_SetConfig+0x150>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d112      	bne.n	800d3ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2202      	movs	r2, #2
 800d398:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d39c:	4b2b      	ldr	r3, [pc, #172]	@ (800d44c <USBD_SetConfig+0x150>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3a6:	4b29      	ldr	r3, [pc, #164]	@ (800d44c <USBD_SetConfig+0x150>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7fe ffd2 	bl	800c356 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 fa12 	bl	800d7dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3b8:	e042      	b.n	800d440 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d3ba:	4b24      	ldr	r3, [pc, #144]	@ (800d44c <USBD_SetConfig+0x150>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d02a      	beq.n	800d41e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f7fe ffc0 	bl	800c356 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d3d6:	4b1d      	ldr	r3, [pc, #116]	@ (800d44c <USBD_SetConfig+0x150>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d44c <USBD_SetConfig+0x150>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7fe ff99 	bl	800c31e <USBD_SetClassConfig>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00f      	beq.n	800d416 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d3f6:	6839      	ldr	r1, [r7, #0]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f918 	bl	800d62e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	b2db      	uxtb	r3, r3
 800d404:	4619      	mov	r1, r3
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7fe ffa5 	bl	800c356 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2202      	movs	r2, #2
 800d410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d414:	e014      	b.n	800d440 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f9e0 	bl	800d7dc <USBD_CtlSendStatus>
      break;
 800d41c:	e010      	b.n	800d440 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f9dc 	bl	800d7dc <USBD_CtlSendStatus>
      break;
 800d424:	e00c      	b.n	800d440 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f900 	bl	800d62e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d42e:	4b07      	ldr	r3, [pc, #28]	@ (800d44c <USBD_SetConfig+0x150>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	4619      	mov	r1, r3
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7fe ff8e 	bl	800c356 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d43a:	2303      	movs	r3, #3
 800d43c:	73fb      	strb	r3, [r7, #15]
      break;
 800d43e:	bf00      	nop
  }

  return ret;
 800d440:	7bfb      	ldrb	r3, [r7, #15]
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20000ad4 	.word	0x20000ad4

0800d450 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	88db      	ldrh	r3, [r3, #6]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d004      	beq.n	800d46c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 f8e2 	bl	800d62e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d46a:	e023      	b.n	800d4b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d472:	b2db      	uxtb	r3, r3
 800d474:	2b02      	cmp	r3, #2
 800d476:	dc02      	bgt.n	800d47e <USBD_GetConfig+0x2e>
 800d478:	2b00      	cmp	r3, #0
 800d47a:	dc03      	bgt.n	800d484 <USBD_GetConfig+0x34>
 800d47c:	e015      	b.n	800d4aa <USBD_GetConfig+0x5a>
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d00b      	beq.n	800d49a <USBD_GetConfig+0x4a>
 800d482:	e012      	b.n	800d4aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	3308      	adds	r3, #8
 800d48e:	2201      	movs	r2, #1
 800d490:	4619      	mov	r1, r3
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 f948 	bl	800d728 <USBD_CtlSendData>
        break;
 800d498:	e00c      	b.n	800d4b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3304      	adds	r3, #4
 800d49e:	2201      	movs	r2, #1
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f940 	bl	800d728 <USBD_CtlSendData>
        break;
 800d4a8:	e004      	b.n	800d4b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 f8be 	bl	800d62e <USBD_CtlError>
        break;
 800d4b2:	bf00      	nop
}
 800d4b4:	bf00      	nop
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d81e      	bhi.n	800d512 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	88db      	ldrh	r3, [r3, #6]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d004      	beq.n	800d4e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f8a5 	bl	800d62e <USBD_CtlError>
        break;
 800d4e4:	e01a      	b.n	800d51c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d005      	beq.n	800d502 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	f043 0202 	orr.w	r2, r3, #2
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	330c      	adds	r3, #12
 800d506:	2202      	movs	r2, #2
 800d508:	4619      	mov	r1, r3
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f90c 	bl	800d728 <USBD_CtlSendData>
      break;
 800d510:	e004      	b.n	800d51c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f88a 	bl	800d62e <USBD_CtlError>
      break;
 800d51a:	bf00      	nop
  }
}
 800d51c:	bf00      	nop
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	885b      	ldrh	r3, [r3, #2]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d107      	bne.n	800d546 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f94c 	bl	800d7dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d544:	e013      	b.n	800d56e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	885b      	ldrh	r3, [r3, #2]
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d10b      	bne.n	800d566 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	889b      	ldrh	r3, [r3, #4]
 800d552:	0a1b      	lsrs	r3, r3, #8
 800d554:	b29b      	uxth	r3, r3
 800d556:	b2da      	uxtb	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f93c 	bl	800d7dc <USBD_CtlSendStatus>
}
 800d564:	e003      	b.n	800d56e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f860 	bl	800d62e <USBD_CtlError>
}
 800d56e:	bf00      	nop
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b082      	sub	sp, #8
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
 800d57e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d586:	b2db      	uxtb	r3, r3
 800d588:	3b01      	subs	r3, #1
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d80b      	bhi.n	800d5a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	885b      	ldrh	r3, [r3, #2]
 800d592:	2b01      	cmp	r3, #1
 800d594:	d10c      	bne.n	800d5b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f91c 	bl	800d7dc <USBD_CtlSendStatus>
      }
      break;
 800d5a4:	e004      	b.n	800d5b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d5a6:	6839      	ldr	r1, [r7, #0]
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f840 	bl	800d62e <USBD_CtlError>
      break;
 800d5ae:	e000      	b.n	800d5b2 <USBD_ClrFeature+0x3c>
      break;
 800d5b0:	bf00      	nop
  }
}
 800d5b2:	bf00      	nop
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	781a      	ldrb	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	781a      	ldrb	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f7ff fa40 	bl	800ca6a <SWAPBYTE>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f7ff fa33 	bl	800ca6a <SWAPBYTE>
 800d604:	4603      	mov	r3, r0
 800d606:	461a      	mov	r2, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	3301      	adds	r3, #1
 800d610:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3301      	adds	r3, #1
 800d616:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7ff fa26 	bl	800ca6a <SWAPBYTE>
 800d61e:	4603      	mov	r3, r0
 800d620:	461a      	mov	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	80da      	strh	r2, [r3, #6]
}
 800d626:	bf00      	nop
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d638:	2180      	movs	r1, #128	@ 0x80
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fcec 	bl	800e018 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d640:	2100      	movs	r1, #0
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fce8 	bl	800e018 <USBD_LL_StallEP>
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d65c:	2300      	movs	r3, #0
 800d65e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d042      	beq.n	800d6ec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d66a:	6938      	ldr	r0, [r7, #16]
 800d66c:	f000 f842 	bl	800d6f4 <USBD_GetLen>
 800d670:	4603      	mov	r3, r0
 800d672:	3301      	adds	r3, #1
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d67a:	d808      	bhi.n	800d68e <USBD_GetString+0x3e>
 800d67c:	6938      	ldr	r0, [r7, #16]
 800d67e:	f000 f839 	bl	800d6f4 <USBD_GetLen>
 800d682:	4603      	mov	r3, r0
 800d684:	3301      	adds	r3, #1
 800d686:	b29b      	uxth	r3, r3
 800d688:	005b      	lsls	r3, r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	e001      	b.n	800d692 <USBD_GetString+0x42>
 800d68e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d696:	7dfb      	ldrb	r3, [r7, #23]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	4413      	add	r3, r2
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	7812      	ldrb	r2, [r2, #0]
 800d6a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6a8:	7dfb      	ldrb	r3, [r7, #23]
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	2203      	movs	r2, #3
 800d6b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d6b8:	e013      	b.n	800d6e2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	4413      	add	r3, r2
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	7812      	ldrb	r2, [r2, #0]
 800d6c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	613b      	str	r3, [r7, #16]
    idx++;
 800d6cc:	7dfb      	ldrb	r3, [r7, #23]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	2200      	movs	r2, #0
 800d6da:	701a      	strb	r2, [r3, #0]
    idx++;
 800d6dc:	7dfb      	ldrb	r3, [r7, #23]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1e7      	bne.n	800d6ba <USBD_GetString+0x6a>
 800d6ea:	e000      	b.n	800d6ee <USBD_GetString+0x9e>
    return;
 800d6ec:	bf00      	nop
  }
}
 800d6ee:	3718      	adds	r7, #24
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d704:	e005      	b.n	800d712 <USBD_GetLen+0x1e>
  {
    len++;
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	3301      	adds	r3, #1
 800d70a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	3301      	adds	r3, #1
 800d710:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1f5      	bne.n	800d706 <USBD_GetLen+0x12>
  }

  return len;
 800d71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3714      	adds	r7, #20
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2202      	movs	r2, #2
 800d738:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	2100      	movs	r1, #0
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f000 fceb 	bl	800e12a <USBD_LL_Transmit>

  return USBD_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	60f8      	str	r0, [r7, #12]
 800d766:	60b9      	str	r1, [r7, #8]
 800d768:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	2100      	movs	r1, #0
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f000 fcda 	bl	800e12a <USBD_LL_Transmit>

  return USBD_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2203      	movs	r2, #3
 800d790:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f000 fcde 	bl	800e16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f000 fccd 	bl	800e16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2204      	movs	r2, #4
 800d7e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fc99 	bl	800e12a <USBD_LL_Transmit>

  return USBD_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2205      	movs	r2, #5
 800d80e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d812:	2300      	movs	r3, #0
 800d814:	2200      	movs	r2, #0
 800d816:	2100      	movs	r1, #0
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fca7 	bl	800e16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d82c:	2200      	movs	r2, #0
 800d82e:	4912      	ldr	r1, [pc, #72]	@ (800d878 <MX_USB_DEVICE_Init+0x50>)
 800d830:	4812      	ldr	r0, [pc, #72]	@ (800d87c <MX_USB_DEVICE_Init+0x54>)
 800d832:	f7fe fcf7 	bl	800c224 <USBD_Init>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d83c:	f7f5 ff80 	bl	8003740 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d840:	490f      	ldr	r1, [pc, #60]	@ (800d880 <MX_USB_DEVICE_Init+0x58>)
 800d842:	480e      	ldr	r0, [pc, #56]	@ (800d87c <MX_USB_DEVICE_Init+0x54>)
 800d844:	f7fe fd1e 	bl	800c284 <USBD_RegisterClass>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d001      	beq.n	800d852 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d84e:	f7f5 ff77 	bl	8003740 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d852:	490c      	ldr	r1, [pc, #48]	@ (800d884 <MX_USB_DEVICE_Init+0x5c>)
 800d854:	4809      	ldr	r0, [pc, #36]	@ (800d87c <MX_USB_DEVICE_Init+0x54>)
 800d856:	f7fe fc15 	bl	800c084 <USBD_CDC_RegisterInterface>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d860:	f7f5 ff6e 	bl	8003740 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d864:	4805      	ldr	r0, [pc, #20]	@ (800d87c <MX_USB_DEVICE_Init+0x54>)
 800d866:	f7fe fd43 	bl	800c2f0 <USBD_Start>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d870:	f7f5 ff66 	bl	8003740 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d874:	bf00      	nop
 800d876:	bd80      	pop	{r7, pc}
 800d878:	200000dc 	.word	0x200000dc
 800d87c:	20000ad8 	.word	0x20000ad8
 800d880:	20000048 	.word	0x20000048
 800d884:	200000c8 	.word	0x200000c8

0800d888 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d88c:	2200      	movs	r2, #0
 800d88e:	4905      	ldr	r1, [pc, #20]	@ (800d8a4 <CDC_Init_FS+0x1c>)
 800d890:	4805      	ldr	r0, [pc, #20]	@ (800d8a8 <CDC_Init_FS+0x20>)
 800d892:	f7fe fc11 	bl	800c0b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d896:	4905      	ldr	r1, [pc, #20]	@ (800d8ac <CDC_Init_FS+0x24>)
 800d898:	4803      	ldr	r0, [pc, #12]	@ (800d8a8 <CDC_Init_FS+0x20>)
 800d89a:	f7fe fc2f 	bl	800c0fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d89e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	200015b4 	.word	0x200015b4
 800d8a8:	20000ad8 	.word	0x20000ad8
 800d8ac:	20000db4 	.word	0x20000db4

0800d8b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d8b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	6039      	str	r1, [r7, #0]
 800d8ca:	71fb      	strb	r3, [r7, #7]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d8d0:	79fb      	ldrb	r3, [r7, #7]
 800d8d2:	2b23      	cmp	r3, #35	@ 0x23
 800d8d4:	d84a      	bhi.n	800d96c <CDC_Control_FS+0xac>
 800d8d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d8dc <CDC_Control_FS+0x1c>)
 800d8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8dc:	0800d96d 	.word	0x0800d96d
 800d8e0:	0800d96d 	.word	0x0800d96d
 800d8e4:	0800d96d 	.word	0x0800d96d
 800d8e8:	0800d96d 	.word	0x0800d96d
 800d8ec:	0800d96d 	.word	0x0800d96d
 800d8f0:	0800d96d 	.word	0x0800d96d
 800d8f4:	0800d96d 	.word	0x0800d96d
 800d8f8:	0800d96d 	.word	0x0800d96d
 800d8fc:	0800d96d 	.word	0x0800d96d
 800d900:	0800d96d 	.word	0x0800d96d
 800d904:	0800d96d 	.word	0x0800d96d
 800d908:	0800d96d 	.word	0x0800d96d
 800d90c:	0800d96d 	.word	0x0800d96d
 800d910:	0800d96d 	.word	0x0800d96d
 800d914:	0800d96d 	.word	0x0800d96d
 800d918:	0800d96d 	.word	0x0800d96d
 800d91c:	0800d96d 	.word	0x0800d96d
 800d920:	0800d96d 	.word	0x0800d96d
 800d924:	0800d96d 	.word	0x0800d96d
 800d928:	0800d96d 	.word	0x0800d96d
 800d92c:	0800d96d 	.word	0x0800d96d
 800d930:	0800d96d 	.word	0x0800d96d
 800d934:	0800d96d 	.word	0x0800d96d
 800d938:	0800d96d 	.word	0x0800d96d
 800d93c:	0800d96d 	.word	0x0800d96d
 800d940:	0800d96d 	.word	0x0800d96d
 800d944:	0800d96d 	.word	0x0800d96d
 800d948:	0800d96d 	.word	0x0800d96d
 800d94c:	0800d96d 	.word	0x0800d96d
 800d950:	0800d96d 	.word	0x0800d96d
 800d954:	0800d96d 	.word	0x0800d96d
 800d958:	0800d96d 	.word	0x0800d96d
 800d95c:	0800d96d 	.word	0x0800d96d
 800d960:	0800d96d 	.word	0x0800d96d
 800d964:	0800d96d 	.word	0x0800d96d
 800d968:	0800d96d 	.word	0x0800d96d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d96c:	bf00      	nop
  }

  return (USBD_OK);
 800d96e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d970:	4618      	mov	r0, r3
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	4805      	ldr	r0, [pc, #20]	@ (800d9a0 <CDC_Receive_FS+0x24>)
 800d98a:	f7fe fbb7 	bl	800c0fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d98e:	4804      	ldr	r0, [pc, #16]	@ (800d9a0 <CDC_Receive_FS+0x24>)
 800d990:	f7fe fc12 	bl	800c1b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d994:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	20000ad8 	.word	0x20000ad8

0800d9a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d9b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ec <CDC_Transmit_FS+0x48>)
 800d9b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d9ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	e00b      	b.n	800d9e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d9ca:	887b      	ldrh	r3, [r7, #2]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	6879      	ldr	r1, [r7, #4]
 800d9d0:	4806      	ldr	r0, [pc, #24]	@ (800d9ec <CDC_Transmit_FS+0x48>)
 800d9d2:	f7fe fb71 	bl	800c0b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d9d6:	4805      	ldr	r0, [pc, #20]	@ (800d9ec <CDC_Transmit_FS+0x48>)
 800d9d8:	f7fe fbae 	bl	800c138 <USBD_CDC_TransmitPacket>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3710      	adds	r7, #16
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000ad8 	.word	0x20000ad8

0800d9f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b087      	sub	sp, #28
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800da02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da06:	4618      	mov	r0, r3
 800da08:	371c      	adds	r7, #28
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
	...

0800da14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	4603      	mov	r3, r0
 800da1c:	6039      	str	r1, [r7, #0]
 800da1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	2212      	movs	r2, #18
 800da24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da26:	4b03      	ldr	r3, [pc, #12]	@ (800da34 <USBD_FS_DeviceDescriptor+0x20>)
}
 800da28:	4618      	mov	r0, r3
 800da2a:	370c      	adds	r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr
 800da34:	200000f8 	.word	0x200000f8

0800da38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	6039      	str	r1, [r7, #0]
 800da42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	2204      	movs	r2, #4
 800da48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da4a:	4b03      	ldr	r3, [pc, #12]	@ (800da58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	2000010c 	.word	0x2000010c

0800da5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	4603      	mov	r3, r0
 800da64:	6039      	str	r1, [r7, #0]
 800da66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da68:	79fb      	ldrb	r3, [r7, #7]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d105      	bne.n	800da7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	4907      	ldr	r1, [pc, #28]	@ (800da90 <USBD_FS_ProductStrDescriptor+0x34>)
 800da72:	4808      	ldr	r0, [pc, #32]	@ (800da94 <USBD_FS_ProductStrDescriptor+0x38>)
 800da74:	f7ff fdec 	bl	800d650 <USBD_GetString>
 800da78:	e004      	b.n	800da84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	4904      	ldr	r1, [pc, #16]	@ (800da90 <USBD_FS_ProductStrDescriptor+0x34>)
 800da7e:	4805      	ldr	r0, [pc, #20]	@ (800da94 <USBD_FS_ProductStrDescriptor+0x38>)
 800da80:	f7ff fde6 	bl	800d650 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da84:	4b02      	ldr	r3, [pc, #8]	@ (800da90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800da86:	4618      	mov	r0, r3
 800da88:	3708      	adds	r7, #8
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	20001db4 	.word	0x20001db4
 800da94:	08012938 	.word	0x08012938

0800da98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	4603      	mov	r3, r0
 800daa0:	6039      	str	r1, [r7, #0]
 800daa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	4904      	ldr	r1, [pc, #16]	@ (800dab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800daa8:	4804      	ldr	r0, [pc, #16]	@ (800dabc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800daaa:	f7ff fdd1 	bl	800d650 <USBD_GetString>
  return USBD_StrDesc;
 800daae:	4b02      	ldr	r3, [pc, #8]	@ (800dab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	20001db4 	.word	0x20001db4
 800dabc:	08012950 	.word	0x08012950

0800dac0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	4603      	mov	r3, r0
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	221a      	movs	r2, #26
 800dad0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dad2:	f000 f843 	bl	800db5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dad6:	4b02      	ldr	r3, [pc, #8]	@ (800dae0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	20000110 	.word	0x20000110

0800dae4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	4603      	mov	r3, r0
 800daec:	6039      	str	r1, [r7, #0]
 800daee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800daf0:	79fb      	ldrb	r3, [r7, #7]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d105      	bne.n	800db02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	4907      	ldr	r1, [pc, #28]	@ (800db18 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dafa:	4808      	ldr	r0, [pc, #32]	@ (800db1c <USBD_FS_ConfigStrDescriptor+0x38>)
 800dafc:	f7ff fda8 	bl	800d650 <USBD_GetString>
 800db00:	e004      	b.n	800db0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	4904      	ldr	r1, [pc, #16]	@ (800db18 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db06:	4805      	ldr	r0, [pc, #20]	@ (800db1c <USBD_FS_ConfigStrDescriptor+0x38>)
 800db08:	f7ff fda2 	bl	800d650 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db0c:	4b02      	ldr	r3, [pc, #8]	@ (800db18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3708      	adds	r7, #8
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20001db4 	.word	0x20001db4
 800db1c:	08012964 	.word	0x08012964

0800db20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	6039      	str	r1, [r7, #0]
 800db2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db2c:	79fb      	ldrb	r3, [r7, #7]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d105      	bne.n	800db3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	4907      	ldr	r1, [pc, #28]	@ (800db54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db36:	4808      	ldr	r0, [pc, #32]	@ (800db58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db38:	f7ff fd8a 	bl	800d650 <USBD_GetString>
 800db3c:	e004      	b.n	800db48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	4904      	ldr	r1, [pc, #16]	@ (800db54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db42:	4805      	ldr	r0, [pc, #20]	@ (800db58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db44:	f7ff fd84 	bl	800d650 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db48:	4b02      	ldr	r3, [pc, #8]	@ (800db54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	20001db4 	.word	0x20001db4
 800db58:	08012970 	.word	0x08012970

0800db5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db62:	4b0f      	ldr	r3, [pc, #60]	@ (800dba0 <Get_SerialNum+0x44>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db68:	4b0e      	ldr	r3, [pc, #56]	@ (800dba4 <Get_SerialNum+0x48>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db6e:	4b0e      	ldr	r3, [pc, #56]	@ (800dba8 <Get_SerialNum+0x4c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4413      	add	r3, r2
 800db7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d009      	beq.n	800db96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db82:	2208      	movs	r2, #8
 800db84:	4909      	ldr	r1, [pc, #36]	@ (800dbac <Get_SerialNum+0x50>)
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 f814 	bl	800dbb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db8c:	2204      	movs	r2, #4
 800db8e:	4908      	ldr	r1, [pc, #32]	@ (800dbb0 <Get_SerialNum+0x54>)
 800db90:	68b8      	ldr	r0, [r7, #8]
 800db92:	f000 f80f 	bl	800dbb4 <IntToUnicode>
  }
}
 800db96:	bf00      	nop
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	1fff7a10 	.word	0x1fff7a10
 800dba4:	1fff7a14 	.word	0x1fff7a14
 800dba8:	1fff7a18 	.word	0x1fff7a18
 800dbac:	20000112 	.word	0x20000112
 800dbb0:	20000122 	.word	0x20000122

0800dbb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b087      	sub	sp, #28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	75fb      	strb	r3, [r7, #23]
 800dbca:	e027      	b.n	800dc1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	0f1b      	lsrs	r3, r3, #28
 800dbd0:	2b09      	cmp	r3, #9
 800dbd2:	d80b      	bhi.n	800dbec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	0f1b      	lsrs	r3, r3, #28
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	7dfb      	ldrb	r3, [r7, #23]
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	4619      	mov	r1, r3
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	440b      	add	r3, r1
 800dbe4:	3230      	adds	r2, #48	@ 0x30
 800dbe6:	b2d2      	uxtb	r2, r2
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	e00a      	b.n	800dc02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	0f1b      	lsrs	r3, r3, #28
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	005b      	lsls	r3, r3, #1
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	440b      	add	r3, r1
 800dbfc:	3237      	adds	r2, #55	@ 0x37
 800dbfe:	b2d2      	uxtb	r2, r2
 800dc00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	011b      	lsls	r3, r3, #4
 800dc06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
 800dc0a:	005b      	lsls	r3, r3, #1
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	68ba      	ldr	r2, [r7, #8]
 800dc10:	4413      	add	r3, r2
 800dc12:	2200      	movs	r2, #0
 800dc14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	75fb      	strb	r3, [r7, #23]
 800dc1c:	7dfa      	ldrb	r2, [r7, #23]
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d3d3      	bcc.n	800dbcc <IntToUnicode+0x18>
  }
}
 800dc24:	bf00      	nop
 800dc26:	bf00      	nop
 800dc28:	371c      	adds	r7, #28
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
	...

0800dc34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08a      	sub	sp, #40	@ 0x28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc3c:	f107 0314 	add.w	r3, r7, #20
 800dc40:	2200      	movs	r2, #0
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	605a      	str	r2, [r3, #4]
 800dc46:	609a      	str	r2, [r3, #8]
 800dc48:	60da      	str	r2, [r3, #12]
 800dc4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dc54:	d13a      	bne.n	800dccc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc56:	2300      	movs	r3, #0
 800dc58:	613b      	str	r3, [r7, #16]
 800dc5a:	4b1e      	ldr	r3, [pc, #120]	@ (800dcd4 <HAL_PCD_MspInit+0xa0>)
 800dc5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc5e:	4a1d      	ldr	r2, [pc, #116]	@ (800dcd4 <HAL_PCD_MspInit+0xa0>)
 800dc60:	f043 0301 	orr.w	r3, r3, #1
 800dc64:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc66:	4b1b      	ldr	r3, [pc, #108]	@ (800dcd4 <HAL_PCD_MspInit+0xa0>)
 800dc68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	613b      	str	r3, [r7, #16]
 800dc70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dc72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800dc76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc78:	2302      	movs	r3, #2
 800dc7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc80:	2303      	movs	r3, #3
 800dc82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dc84:	230a      	movs	r3, #10
 800dc86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc88:	f107 0314 	add.w	r3, r7, #20
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	4812      	ldr	r0, [pc, #72]	@ (800dcd8 <HAL_PCD_MspInit+0xa4>)
 800dc90:	f7f7 f92a 	bl	8004ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc94:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd4 <HAL_PCD_MspInit+0xa0>)
 800dc96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc98:	4a0e      	ldr	r2, [pc, #56]	@ (800dcd4 <HAL_PCD_MspInit+0xa0>)
 800dc9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc9e:	6353      	str	r3, [r2, #52]	@ 0x34
 800dca0:	2300      	movs	r3, #0
 800dca2:	60fb      	str	r3, [r7, #12]
 800dca4:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd4 <HAL_PCD_MspInit+0xa0>)
 800dca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dca8:	4a0a      	ldr	r2, [pc, #40]	@ (800dcd4 <HAL_PCD_MspInit+0xa0>)
 800dcaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dcae:	6453      	str	r3, [r2, #68]	@ 0x44
 800dcb0:	4b08      	ldr	r3, [pc, #32]	@ (800dcd4 <HAL_PCD_MspInit+0xa0>)
 800dcb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcb8:	60fb      	str	r3, [r7, #12]
 800dcba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	2043      	movs	r0, #67	@ 0x43
 800dcc2:	f7f6 fcd8 	bl	8004676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dcc6:	2043      	movs	r0, #67	@ 0x43
 800dcc8:	f7f6 fcf1 	bl	80046ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dccc:	bf00      	nop
 800dcce:	3728      	adds	r7, #40	@ 0x28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	40023800 	.word	0x40023800
 800dcd8:	40020000 	.word	0x40020000

0800dcdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	f7fe fb49 	bl	800c38a <USBD_LL_SetupStage>
}
 800dcf8:	bf00      	nop
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dd12:	78fa      	ldrb	r2, [r7, #3]
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	4613      	mov	r3, r2
 800dd18:	00db      	lsls	r3, r3, #3
 800dd1a:	4413      	add	r3, r2
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	440b      	add	r3, r1
 800dd20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	78fb      	ldrb	r3, [r7, #3]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	f7fe fb83 	bl	800c434 <USBD_LL_DataOutStage>
}
 800dd2e:	bf00      	nop
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	460b      	mov	r3, r1
 800dd40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dd48:	78fa      	ldrb	r2, [r7, #3]
 800dd4a:	6879      	ldr	r1, [r7, #4]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	00db      	lsls	r3, r3, #3
 800dd50:	4413      	add	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	440b      	add	r3, r1
 800dd56:	3320      	adds	r3, #32
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	f7fe fc1c 	bl	800c59a <USBD_LL_DataInStage>
}
 800dd62:	bf00      	nop
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b082      	sub	sp, #8
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fe fd56 	bl	800c82a <USBD_LL_SOF>
}
 800dd7e:	bf00      	nop
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b084      	sub	sp, #16
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	79db      	ldrb	r3, [r3, #7]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d102      	bne.n	800dda0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	73fb      	strb	r3, [r7, #15]
 800dd9e:	e008      	b.n	800ddb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	79db      	ldrb	r3, [r3, #7]
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d102      	bne.n	800ddae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	73fb      	strb	r3, [r7, #15]
 800ddac:	e001      	b.n	800ddb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ddae:	f7f5 fcc7 	bl	8003740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddb8:	7bfa      	ldrb	r2, [r7, #15]
 800ddba:	4611      	mov	r1, r2
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe fcf0 	bl	800c7a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7fe fc98 	bl	800c6fe <USBD_LL_Reset>
}
 800ddce:	bf00      	nop
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
	...

0800ddd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fe fceb 	bl	800c7c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	6812      	ldr	r2, [r2, #0]
 800ddfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ddfe:	f043 0301 	orr.w	r3, r3, #1
 800de02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	7adb      	ldrb	r3, [r3, #11]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d005      	beq.n	800de18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de0c:	4b04      	ldr	r3, [pc, #16]	@ (800de20 <HAL_PCD_SuspendCallback+0x48>)
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	4a03      	ldr	r2, [pc, #12]	@ (800de20 <HAL_PCD_SuspendCallback+0x48>)
 800de12:	f043 0306 	orr.w	r3, r3, #6
 800de16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800de18:	bf00      	nop
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	e000ed00 	.word	0xe000ed00

0800de24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe fce1 	bl	800c7fa <USBD_LL_Resume>
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	460b      	mov	r3, r1
 800de4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de52:	78fa      	ldrb	r2, [r7, #3]
 800de54:	4611      	mov	r1, r2
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe fd39 	bl	800c8ce <USBD_LL_IsoOUTIncomplete>
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de76:	78fa      	ldrb	r2, [r7, #3]
 800de78:	4611      	mov	r1, r2
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fe fcf5 	bl	800c86a <USBD_LL_IsoINIncomplete>
}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de96:	4618      	mov	r0, r3
 800de98:	f7fe fd4b 	bl	800c932 <USBD_LL_DevConnected>
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe fd48 	bl	800c948 <USBD_LL_DevDisconnected>
}
 800deb8:	bf00      	nop
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d13c      	bne.n	800df4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ded0:	4a20      	ldr	r2, [pc, #128]	@ (800df54 <USBD_LL_Init+0x94>)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a1e      	ldr	r2, [pc, #120]	@ (800df54 <USBD_LL_Init+0x94>)
 800dedc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dee0:	4b1c      	ldr	r3, [pc, #112]	@ (800df54 <USBD_LL_Init+0x94>)
 800dee2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dee6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dee8:	4b1a      	ldr	r3, [pc, #104]	@ (800df54 <USBD_LL_Init+0x94>)
 800deea:	2204      	movs	r2, #4
 800deec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800deee:	4b19      	ldr	r3, [pc, #100]	@ (800df54 <USBD_LL_Init+0x94>)
 800def0:	2202      	movs	r2, #2
 800def2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800def4:	4b17      	ldr	r3, [pc, #92]	@ (800df54 <USBD_LL_Init+0x94>)
 800def6:	2200      	movs	r2, #0
 800def8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800defa:	4b16      	ldr	r3, [pc, #88]	@ (800df54 <USBD_LL_Init+0x94>)
 800defc:	2202      	movs	r2, #2
 800defe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800df00:	4b14      	ldr	r3, [pc, #80]	@ (800df54 <USBD_LL_Init+0x94>)
 800df02:	2200      	movs	r2, #0
 800df04:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800df06:	4b13      	ldr	r3, [pc, #76]	@ (800df54 <USBD_LL_Init+0x94>)
 800df08:	2200      	movs	r2, #0
 800df0a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800df0c:	4b11      	ldr	r3, [pc, #68]	@ (800df54 <USBD_LL_Init+0x94>)
 800df0e:	2200      	movs	r2, #0
 800df10:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800df12:	4b10      	ldr	r3, [pc, #64]	@ (800df54 <USBD_LL_Init+0x94>)
 800df14:	2200      	movs	r2, #0
 800df16:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800df18:	4b0e      	ldr	r3, [pc, #56]	@ (800df54 <USBD_LL_Init+0x94>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800df1e:	480d      	ldr	r0, [pc, #52]	@ (800df54 <USBD_LL_Init+0x94>)
 800df20:	f7f7 f9ca 	bl	80052b8 <HAL_PCD_Init>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800df2a:	f7f5 fc09 	bl	8003740 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800df2e:	2180      	movs	r1, #128	@ 0x80
 800df30:	4808      	ldr	r0, [pc, #32]	@ (800df54 <USBD_LL_Init+0x94>)
 800df32:	f7f8 fbf6 	bl	8006722 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800df36:	2240      	movs	r2, #64	@ 0x40
 800df38:	2100      	movs	r1, #0
 800df3a:	4806      	ldr	r0, [pc, #24]	@ (800df54 <USBD_LL_Init+0x94>)
 800df3c:	f7f8 fbaa 	bl	8006694 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800df40:	2280      	movs	r2, #128	@ 0x80
 800df42:	2101      	movs	r1, #1
 800df44:	4803      	ldr	r0, [pc, #12]	@ (800df54 <USBD_LL_Init+0x94>)
 800df46:	f7f8 fba5 	bl	8006694 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	20001fb4 	.word	0x20001fb4

0800df58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df6e:	4618      	mov	r0, r3
 800df70:	f7f7 fab1 	bl	80054d6 <HAL_PCD_Start>
 800df74:	4603      	mov	r3, r0
 800df76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df78:	7bfb      	ldrb	r3, [r7, #15]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f000 f942 	bl	800e204 <USBD_Get_USB_Status>
 800df80:	4603      	mov	r3, r0
 800df82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df84:	7bbb      	ldrb	r3, [r7, #14]
}
 800df86:	4618      	mov	r0, r3
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b084      	sub	sp, #16
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	4608      	mov	r0, r1
 800df98:	4611      	mov	r1, r2
 800df9a:	461a      	mov	r2, r3
 800df9c:	4603      	mov	r3, r0
 800df9e:	70fb      	strb	r3, [r7, #3]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	70bb      	strb	r3, [r7, #2]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dfb6:	78bb      	ldrb	r3, [r7, #2]
 800dfb8:	883a      	ldrh	r2, [r7, #0]
 800dfba:	78f9      	ldrb	r1, [r7, #3]
 800dfbc:	f7f7 ff85 	bl	8005eca <HAL_PCD_EP_Open>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfc4:	7bfb      	ldrb	r3, [r7, #15]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f000 f91c 	bl	800e204 <USBD_Get_USB_Status>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b084      	sub	sp, #16
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dff4:	78fa      	ldrb	r2, [r7, #3]
 800dff6:	4611      	mov	r1, r2
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7f7 ffd0 	bl	8005f9e <HAL_PCD_EP_Close>
 800dffe:	4603      	mov	r3, r0
 800e000:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e002:	7bfb      	ldrb	r3, [r7, #15]
 800e004:	4618      	mov	r0, r3
 800e006:	f000 f8fd 	bl	800e204 <USBD_Get_USB_Status>
 800e00a:	4603      	mov	r3, r0
 800e00c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e00e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	460b      	mov	r3, r1
 800e022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e032:	78fa      	ldrb	r2, [r7, #3]
 800e034:	4611      	mov	r1, r2
 800e036:	4618      	mov	r0, r3
 800e038:	f7f8 f888 	bl	800614c <HAL_PCD_EP_SetStall>
 800e03c:	4603      	mov	r3, r0
 800e03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e040:	7bfb      	ldrb	r3, [r7, #15]
 800e042:	4618      	mov	r0, r3
 800e044:	f000 f8de 	bl	800e204 <USBD_Get_USB_Status>
 800e048:	4603      	mov	r3, r0
 800e04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b084      	sub	sp, #16
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
 800e05e:	460b      	mov	r3, r1
 800e060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e062:	2300      	movs	r3, #0
 800e064:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e066:	2300      	movs	r3, #0
 800e068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e070:	78fa      	ldrb	r2, [r7, #3]
 800e072:	4611      	mov	r1, r2
 800e074:	4618      	mov	r0, r3
 800e076:	f7f8 f8cc 	bl	8006212 <HAL_PCD_EP_ClrStall>
 800e07a:	4603      	mov	r3, r0
 800e07c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
 800e080:	4618      	mov	r0, r3
 800e082:	f000 f8bf 	bl	800e204 <USBD_Get_USB_Status>
 800e086:	4603      	mov	r3, r0
 800e088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e094:	b480      	push	{r7}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e0a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	da0b      	bge.n	800e0c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e0b0:	78fb      	ldrb	r3, [r7, #3]
 800e0b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e0b6:	68f9      	ldr	r1, [r7, #12]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	4413      	add	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	440b      	add	r3, r1
 800e0c2:	3316      	adds	r3, #22
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	e00b      	b.n	800e0e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e0c8:	78fb      	ldrb	r3, [r7, #3]
 800e0ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e0ce:	68f9      	ldr	r1, [r7, #12]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	440b      	add	r3, r1
 800e0da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e0de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3714      	adds	r7, #20
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e106:	78fa      	ldrb	r2, [r7, #3]
 800e108:	4611      	mov	r1, r2
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7f7 feb9 	bl	8005e82 <HAL_PCD_SetAddress>
 800e110:	4603      	mov	r3, r0
 800e112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e114:	7bfb      	ldrb	r3, [r7, #15]
 800e116:	4618      	mov	r0, r3
 800e118:	f000 f874 	bl	800e204 <USBD_Get_USB_Status>
 800e11c:	4603      	mov	r3, r0
 800e11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e120:	7bbb      	ldrb	r3, [r7, #14]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b086      	sub	sp, #24
 800e12e:	af00      	add	r7, sp, #0
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	607a      	str	r2, [r7, #4]
 800e134:	603b      	str	r3, [r7, #0]
 800e136:	460b      	mov	r3, r1
 800e138:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e13e:	2300      	movs	r3, #0
 800e140:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e148:	7af9      	ldrb	r1, [r7, #11]
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	f7f7 ffc3 	bl	80060d8 <HAL_PCD_EP_Transmit>
 800e152:	4603      	mov	r3, r0
 800e154:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e156:	7dfb      	ldrb	r3, [r7, #23]
 800e158:	4618      	mov	r0, r3
 800e15a:	f000 f853 	bl	800e204 <USBD_Get_USB_Status>
 800e15e:	4603      	mov	r3, r0
 800e160:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e162:	7dbb      	ldrb	r3, [r7, #22]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	607a      	str	r2, [r7, #4]
 800e176:	603b      	str	r3, [r7, #0]
 800e178:	460b      	mov	r3, r1
 800e17a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e18a:	7af9      	ldrb	r1, [r7, #11]
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	f7f7 ff4f 	bl	8006032 <HAL_PCD_EP_Receive>
 800e194:	4603      	mov	r3, r0
 800e196:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e198:	7dfb      	ldrb	r3, [r7, #23]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f000 f832 	bl	800e204 <USBD_Get_USB_Status>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e1a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b082      	sub	sp, #8
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1c0:	78fa      	ldrb	r2, [r7, #3]
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7f7 ff6f 	bl	80060a8 <HAL_PCD_EP_GetRxCount>
 800e1ca:	4603      	mov	r3, r0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e1dc:	4b03      	ldr	r3, [pc, #12]	@ (800e1ec <USBD_static_malloc+0x18>)
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	370c      	adds	r7, #12
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr
 800e1ea:	bf00      	nop
 800e1ec:	20002498 	.word	0x20002498

0800e1f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]

}
 800e1f8:	bf00      	nop
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e204:	b480      	push	{r7}
 800e206:	b085      	sub	sp, #20
 800e208:	af00      	add	r7, sp, #0
 800e20a:	4603      	mov	r3, r0
 800e20c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e20e:	2300      	movs	r3, #0
 800e210:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	2b03      	cmp	r3, #3
 800e216:	d817      	bhi.n	800e248 <USBD_Get_USB_Status+0x44>
 800e218:	a201      	add	r2, pc, #4	@ (adr r2, 800e220 <USBD_Get_USB_Status+0x1c>)
 800e21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21e:	bf00      	nop
 800e220:	0800e231 	.word	0x0800e231
 800e224:	0800e237 	.word	0x0800e237
 800e228:	0800e23d 	.word	0x0800e23d
 800e22c:	0800e243 	.word	0x0800e243
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	73fb      	strb	r3, [r7, #15]
    break;
 800e234:	e00b      	b.n	800e24e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e236:	2303      	movs	r3, #3
 800e238:	73fb      	strb	r3, [r7, #15]
    break;
 800e23a:	e008      	b.n	800e24e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e23c:	2301      	movs	r3, #1
 800e23e:	73fb      	strb	r3, [r7, #15]
    break;
 800e240:	e005      	b.n	800e24e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e242:	2303      	movs	r3, #3
 800e244:	73fb      	strb	r3, [r7, #15]
    break;
 800e246:	e002      	b.n	800e24e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e248:	2303      	movs	r3, #3
 800e24a:	73fb      	strb	r3, [r7, #15]
    break;
 800e24c:	bf00      	nop
  }
  return usb_status;
 800e24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3714      	adds	r7, #20
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <_strtoul_l.constprop.0>:
 800e25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e260:	4e34      	ldr	r6, [pc, #208]	@ (800e334 <_strtoul_l.constprop.0+0xd8>)
 800e262:	4686      	mov	lr, r0
 800e264:	460d      	mov	r5, r1
 800e266:	4628      	mov	r0, r5
 800e268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e26c:	5d37      	ldrb	r7, [r6, r4]
 800e26e:	f017 0708 	ands.w	r7, r7, #8
 800e272:	d1f8      	bne.n	800e266 <_strtoul_l.constprop.0+0xa>
 800e274:	2c2d      	cmp	r4, #45	@ 0x2d
 800e276:	d12f      	bne.n	800e2d8 <_strtoul_l.constprop.0+0x7c>
 800e278:	782c      	ldrb	r4, [r5, #0]
 800e27a:	2701      	movs	r7, #1
 800e27c:	1c85      	adds	r5, r0, #2
 800e27e:	f033 0010 	bics.w	r0, r3, #16
 800e282:	d109      	bne.n	800e298 <_strtoul_l.constprop.0+0x3c>
 800e284:	2c30      	cmp	r4, #48	@ 0x30
 800e286:	d12c      	bne.n	800e2e2 <_strtoul_l.constprop.0+0x86>
 800e288:	7828      	ldrb	r0, [r5, #0]
 800e28a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e28e:	2858      	cmp	r0, #88	@ 0x58
 800e290:	d127      	bne.n	800e2e2 <_strtoul_l.constprop.0+0x86>
 800e292:	786c      	ldrb	r4, [r5, #1]
 800e294:	2310      	movs	r3, #16
 800e296:	3502      	adds	r5, #2
 800e298:	f04f 38ff 	mov.w	r8, #4294967295
 800e29c:	2600      	movs	r6, #0
 800e29e:	fbb8 f8f3 	udiv	r8, r8, r3
 800e2a2:	fb03 f908 	mul.w	r9, r3, r8
 800e2a6:	ea6f 0909 	mvn.w	r9, r9
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e2b0:	f1bc 0f09 	cmp.w	ip, #9
 800e2b4:	d81c      	bhi.n	800e2f0 <_strtoul_l.constprop.0+0x94>
 800e2b6:	4664      	mov	r4, ip
 800e2b8:	42a3      	cmp	r3, r4
 800e2ba:	dd2a      	ble.n	800e312 <_strtoul_l.constprop.0+0xb6>
 800e2bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e2c0:	d007      	beq.n	800e2d2 <_strtoul_l.constprop.0+0x76>
 800e2c2:	4580      	cmp	r8, r0
 800e2c4:	d322      	bcc.n	800e30c <_strtoul_l.constprop.0+0xb0>
 800e2c6:	d101      	bne.n	800e2cc <_strtoul_l.constprop.0+0x70>
 800e2c8:	45a1      	cmp	r9, r4
 800e2ca:	db1f      	blt.n	800e30c <_strtoul_l.constprop.0+0xb0>
 800e2cc:	fb00 4003 	mla	r0, r0, r3, r4
 800e2d0:	2601      	movs	r6, #1
 800e2d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2d6:	e7e9      	b.n	800e2ac <_strtoul_l.constprop.0+0x50>
 800e2d8:	2c2b      	cmp	r4, #43	@ 0x2b
 800e2da:	bf04      	itt	eq
 800e2dc:	782c      	ldrbeq	r4, [r5, #0]
 800e2de:	1c85      	addeq	r5, r0, #2
 800e2e0:	e7cd      	b.n	800e27e <_strtoul_l.constprop.0+0x22>
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1d8      	bne.n	800e298 <_strtoul_l.constprop.0+0x3c>
 800e2e6:	2c30      	cmp	r4, #48	@ 0x30
 800e2e8:	bf0c      	ite	eq
 800e2ea:	2308      	moveq	r3, #8
 800e2ec:	230a      	movne	r3, #10
 800e2ee:	e7d3      	b.n	800e298 <_strtoul_l.constprop.0+0x3c>
 800e2f0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e2f4:	f1bc 0f19 	cmp.w	ip, #25
 800e2f8:	d801      	bhi.n	800e2fe <_strtoul_l.constprop.0+0xa2>
 800e2fa:	3c37      	subs	r4, #55	@ 0x37
 800e2fc:	e7dc      	b.n	800e2b8 <_strtoul_l.constprop.0+0x5c>
 800e2fe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e302:	f1bc 0f19 	cmp.w	ip, #25
 800e306:	d804      	bhi.n	800e312 <_strtoul_l.constprop.0+0xb6>
 800e308:	3c57      	subs	r4, #87	@ 0x57
 800e30a:	e7d5      	b.n	800e2b8 <_strtoul_l.constprop.0+0x5c>
 800e30c:	f04f 36ff 	mov.w	r6, #4294967295
 800e310:	e7df      	b.n	800e2d2 <_strtoul_l.constprop.0+0x76>
 800e312:	1c73      	adds	r3, r6, #1
 800e314:	d106      	bne.n	800e324 <_strtoul_l.constprop.0+0xc8>
 800e316:	2322      	movs	r3, #34	@ 0x22
 800e318:	f8ce 3000 	str.w	r3, [lr]
 800e31c:	4630      	mov	r0, r6
 800e31e:	b932      	cbnz	r2, 800e32e <_strtoul_l.constprop.0+0xd2>
 800e320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e324:	b107      	cbz	r7, 800e328 <_strtoul_l.constprop.0+0xcc>
 800e326:	4240      	negs	r0, r0
 800e328:	2a00      	cmp	r2, #0
 800e32a:	d0f9      	beq.n	800e320 <_strtoul_l.constprop.0+0xc4>
 800e32c:	b106      	cbz	r6, 800e330 <_strtoul_l.constprop.0+0xd4>
 800e32e:	1e69      	subs	r1, r5, #1
 800e330:	6011      	str	r1, [r2, #0]
 800e332:	e7f5      	b.n	800e320 <_strtoul_l.constprop.0+0xc4>
 800e334:	080129a9 	.word	0x080129a9

0800e338 <strtoul>:
 800e338:	4613      	mov	r3, r2
 800e33a:	460a      	mov	r2, r1
 800e33c:	4601      	mov	r1, r0
 800e33e:	4802      	ldr	r0, [pc, #8]	@ (800e348 <strtoul+0x10>)
 800e340:	6800      	ldr	r0, [r0, #0]
 800e342:	f7ff bf8b 	b.w	800e25c <_strtoul_l.constprop.0>
 800e346:	bf00      	nop
 800e348:	20000138 	.word	0x20000138

0800e34c <__cvt>:
 800e34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e350:	ec57 6b10 	vmov	r6, r7, d0
 800e354:	2f00      	cmp	r7, #0
 800e356:	460c      	mov	r4, r1
 800e358:	4619      	mov	r1, r3
 800e35a:	463b      	mov	r3, r7
 800e35c:	bfbb      	ittet	lt
 800e35e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e362:	461f      	movlt	r7, r3
 800e364:	2300      	movge	r3, #0
 800e366:	232d      	movlt	r3, #45	@ 0x2d
 800e368:	700b      	strb	r3, [r1, #0]
 800e36a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e36c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e370:	4691      	mov	r9, r2
 800e372:	f023 0820 	bic.w	r8, r3, #32
 800e376:	bfbc      	itt	lt
 800e378:	4632      	movlt	r2, r6
 800e37a:	4616      	movlt	r6, r2
 800e37c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e380:	d005      	beq.n	800e38e <__cvt+0x42>
 800e382:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e386:	d100      	bne.n	800e38a <__cvt+0x3e>
 800e388:	3401      	adds	r4, #1
 800e38a:	2102      	movs	r1, #2
 800e38c:	e000      	b.n	800e390 <__cvt+0x44>
 800e38e:	2103      	movs	r1, #3
 800e390:	ab03      	add	r3, sp, #12
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	ab02      	add	r3, sp, #8
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	ec47 6b10 	vmov	d0, r6, r7
 800e39c:	4653      	mov	r3, sl
 800e39e:	4622      	mov	r2, r4
 800e3a0:	f000 fe8a 	bl	800f0b8 <_dtoa_r>
 800e3a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e3a8:	4605      	mov	r5, r0
 800e3aa:	d119      	bne.n	800e3e0 <__cvt+0x94>
 800e3ac:	f019 0f01 	tst.w	r9, #1
 800e3b0:	d00e      	beq.n	800e3d0 <__cvt+0x84>
 800e3b2:	eb00 0904 	add.w	r9, r0, r4
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	4639      	mov	r1, r7
 800e3be:	f7f2 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3c2:	b108      	cbz	r0, 800e3c8 <__cvt+0x7c>
 800e3c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3c8:	2230      	movs	r2, #48	@ 0x30
 800e3ca:	9b03      	ldr	r3, [sp, #12]
 800e3cc:	454b      	cmp	r3, r9
 800e3ce:	d31e      	bcc.n	800e40e <__cvt+0xc2>
 800e3d0:	9b03      	ldr	r3, [sp, #12]
 800e3d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3d4:	1b5b      	subs	r3, r3, r5
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	6013      	str	r3, [r2, #0]
 800e3da:	b004      	add	sp, #16
 800e3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e3e4:	eb00 0904 	add.w	r9, r0, r4
 800e3e8:	d1e5      	bne.n	800e3b6 <__cvt+0x6a>
 800e3ea:	7803      	ldrb	r3, [r0, #0]
 800e3ec:	2b30      	cmp	r3, #48	@ 0x30
 800e3ee:	d10a      	bne.n	800e406 <__cvt+0xba>
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	f7f2 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3fc:	b918      	cbnz	r0, 800e406 <__cvt+0xba>
 800e3fe:	f1c4 0401 	rsb	r4, r4, #1
 800e402:	f8ca 4000 	str.w	r4, [sl]
 800e406:	f8da 3000 	ldr.w	r3, [sl]
 800e40a:	4499      	add	r9, r3
 800e40c:	e7d3      	b.n	800e3b6 <__cvt+0x6a>
 800e40e:	1c59      	adds	r1, r3, #1
 800e410:	9103      	str	r1, [sp, #12]
 800e412:	701a      	strb	r2, [r3, #0]
 800e414:	e7d9      	b.n	800e3ca <__cvt+0x7e>

0800e416 <__exponent>:
 800e416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e418:	2900      	cmp	r1, #0
 800e41a:	bfba      	itte	lt
 800e41c:	4249      	neglt	r1, r1
 800e41e:	232d      	movlt	r3, #45	@ 0x2d
 800e420:	232b      	movge	r3, #43	@ 0x2b
 800e422:	2909      	cmp	r1, #9
 800e424:	7002      	strb	r2, [r0, #0]
 800e426:	7043      	strb	r3, [r0, #1]
 800e428:	dd29      	ble.n	800e47e <__exponent+0x68>
 800e42a:	f10d 0307 	add.w	r3, sp, #7
 800e42e:	461d      	mov	r5, r3
 800e430:	270a      	movs	r7, #10
 800e432:	461a      	mov	r2, r3
 800e434:	fbb1 f6f7 	udiv	r6, r1, r7
 800e438:	fb07 1416 	mls	r4, r7, r6, r1
 800e43c:	3430      	adds	r4, #48	@ 0x30
 800e43e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e442:	460c      	mov	r4, r1
 800e444:	2c63      	cmp	r4, #99	@ 0x63
 800e446:	f103 33ff 	add.w	r3, r3, #4294967295
 800e44a:	4631      	mov	r1, r6
 800e44c:	dcf1      	bgt.n	800e432 <__exponent+0x1c>
 800e44e:	3130      	adds	r1, #48	@ 0x30
 800e450:	1e94      	subs	r4, r2, #2
 800e452:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e456:	1c41      	adds	r1, r0, #1
 800e458:	4623      	mov	r3, r4
 800e45a:	42ab      	cmp	r3, r5
 800e45c:	d30a      	bcc.n	800e474 <__exponent+0x5e>
 800e45e:	f10d 0309 	add.w	r3, sp, #9
 800e462:	1a9b      	subs	r3, r3, r2
 800e464:	42ac      	cmp	r4, r5
 800e466:	bf88      	it	hi
 800e468:	2300      	movhi	r3, #0
 800e46a:	3302      	adds	r3, #2
 800e46c:	4403      	add	r3, r0
 800e46e:	1a18      	subs	r0, r3, r0
 800e470:	b003      	add	sp, #12
 800e472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e474:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e478:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e47c:	e7ed      	b.n	800e45a <__exponent+0x44>
 800e47e:	2330      	movs	r3, #48	@ 0x30
 800e480:	3130      	adds	r1, #48	@ 0x30
 800e482:	7083      	strb	r3, [r0, #2]
 800e484:	70c1      	strb	r1, [r0, #3]
 800e486:	1d03      	adds	r3, r0, #4
 800e488:	e7f1      	b.n	800e46e <__exponent+0x58>
	...

0800e48c <_printf_float>:
 800e48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e490:	b08d      	sub	sp, #52	@ 0x34
 800e492:	460c      	mov	r4, r1
 800e494:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e498:	4616      	mov	r6, r2
 800e49a:	461f      	mov	r7, r3
 800e49c:	4605      	mov	r5, r0
 800e49e:	f000 fced 	bl	800ee7c <_localeconv_r>
 800e4a2:	6803      	ldr	r3, [r0, #0]
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7f1 fee2 	bl	8000270 <strlen>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b4:	9005      	str	r0, [sp, #20]
 800e4b6:	3307      	adds	r3, #7
 800e4b8:	f023 0307 	bic.w	r3, r3, #7
 800e4bc:	f103 0208 	add.w	r2, r3, #8
 800e4c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e4c4:	f8d4 b000 	ldr.w	fp, [r4]
 800e4c8:	f8c8 2000 	str.w	r2, [r8]
 800e4cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e4d4:	9307      	str	r3, [sp, #28]
 800e4d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e4de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4e2:	4b9c      	ldr	r3, [pc, #624]	@ (800e754 <_printf_float+0x2c8>)
 800e4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e8:	f7f2 fb20 	bl	8000b2c <__aeabi_dcmpun>
 800e4ec:	bb70      	cbnz	r0, 800e54c <_printf_float+0xc0>
 800e4ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4f2:	4b98      	ldr	r3, [pc, #608]	@ (800e754 <_printf_float+0x2c8>)
 800e4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f8:	f7f2 fafa 	bl	8000af0 <__aeabi_dcmple>
 800e4fc:	bb30      	cbnz	r0, 800e54c <_printf_float+0xc0>
 800e4fe:	2200      	movs	r2, #0
 800e500:	2300      	movs	r3, #0
 800e502:	4640      	mov	r0, r8
 800e504:	4649      	mov	r1, r9
 800e506:	f7f2 fae9 	bl	8000adc <__aeabi_dcmplt>
 800e50a:	b110      	cbz	r0, 800e512 <_printf_float+0x86>
 800e50c:	232d      	movs	r3, #45	@ 0x2d
 800e50e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e512:	4a91      	ldr	r2, [pc, #580]	@ (800e758 <_printf_float+0x2cc>)
 800e514:	4b91      	ldr	r3, [pc, #580]	@ (800e75c <_printf_float+0x2d0>)
 800e516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e51a:	bf94      	ite	ls
 800e51c:	4690      	movls	r8, r2
 800e51e:	4698      	movhi	r8, r3
 800e520:	2303      	movs	r3, #3
 800e522:	6123      	str	r3, [r4, #16]
 800e524:	f02b 0304 	bic.w	r3, fp, #4
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	f04f 0900 	mov.w	r9, #0
 800e52e:	9700      	str	r7, [sp, #0]
 800e530:	4633      	mov	r3, r6
 800e532:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e534:	4621      	mov	r1, r4
 800e536:	4628      	mov	r0, r5
 800e538:	f000 f9d2 	bl	800e8e0 <_printf_common>
 800e53c:	3001      	adds	r0, #1
 800e53e:	f040 808d 	bne.w	800e65c <_printf_float+0x1d0>
 800e542:	f04f 30ff 	mov.w	r0, #4294967295
 800e546:	b00d      	add	sp, #52	@ 0x34
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	4642      	mov	r2, r8
 800e54e:	464b      	mov	r3, r9
 800e550:	4640      	mov	r0, r8
 800e552:	4649      	mov	r1, r9
 800e554:	f7f2 faea 	bl	8000b2c <__aeabi_dcmpun>
 800e558:	b140      	cbz	r0, 800e56c <_printf_float+0xe0>
 800e55a:	464b      	mov	r3, r9
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bfbc      	itt	lt
 800e560:	232d      	movlt	r3, #45	@ 0x2d
 800e562:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e566:	4a7e      	ldr	r2, [pc, #504]	@ (800e760 <_printf_float+0x2d4>)
 800e568:	4b7e      	ldr	r3, [pc, #504]	@ (800e764 <_printf_float+0x2d8>)
 800e56a:	e7d4      	b.n	800e516 <_printf_float+0x8a>
 800e56c:	6863      	ldr	r3, [r4, #4]
 800e56e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e572:	9206      	str	r2, [sp, #24]
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	d13b      	bne.n	800e5f0 <_printf_float+0x164>
 800e578:	2306      	movs	r3, #6
 800e57a:	6063      	str	r3, [r4, #4]
 800e57c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e580:	2300      	movs	r3, #0
 800e582:	6022      	str	r2, [r4, #0]
 800e584:	9303      	str	r3, [sp, #12]
 800e586:	ab0a      	add	r3, sp, #40	@ 0x28
 800e588:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e58c:	ab09      	add	r3, sp, #36	@ 0x24
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	6861      	ldr	r1, [r4, #4]
 800e592:	ec49 8b10 	vmov	d0, r8, r9
 800e596:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e59a:	4628      	mov	r0, r5
 800e59c:	f7ff fed6 	bl	800e34c <__cvt>
 800e5a0:	9b06      	ldr	r3, [sp, #24]
 800e5a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5a4:	2b47      	cmp	r3, #71	@ 0x47
 800e5a6:	4680      	mov	r8, r0
 800e5a8:	d129      	bne.n	800e5fe <_printf_float+0x172>
 800e5aa:	1cc8      	adds	r0, r1, #3
 800e5ac:	db02      	blt.n	800e5b4 <_printf_float+0x128>
 800e5ae:	6863      	ldr	r3, [r4, #4]
 800e5b0:	4299      	cmp	r1, r3
 800e5b2:	dd41      	ble.n	800e638 <_printf_float+0x1ac>
 800e5b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800e5b8:	fa5f fa8a 	uxtb.w	sl, sl
 800e5bc:	3901      	subs	r1, #1
 800e5be:	4652      	mov	r2, sl
 800e5c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e5c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e5c6:	f7ff ff26 	bl	800e416 <__exponent>
 800e5ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5cc:	1813      	adds	r3, r2, r0
 800e5ce:	2a01      	cmp	r2, #1
 800e5d0:	4681      	mov	r9, r0
 800e5d2:	6123      	str	r3, [r4, #16]
 800e5d4:	dc02      	bgt.n	800e5dc <_printf_float+0x150>
 800e5d6:	6822      	ldr	r2, [r4, #0]
 800e5d8:	07d2      	lsls	r2, r2, #31
 800e5da:	d501      	bpl.n	800e5e0 <_printf_float+0x154>
 800e5dc:	3301      	adds	r3, #1
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d0a2      	beq.n	800e52e <_printf_float+0xa2>
 800e5e8:	232d      	movs	r3, #45	@ 0x2d
 800e5ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5ee:	e79e      	b.n	800e52e <_printf_float+0xa2>
 800e5f0:	9a06      	ldr	r2, [sp, #24]
 800e5f2:	2a47      	cmp	r2, #71	@ 0x47
 800e5f4:	d1c2      	bne.n	800e57c <_printf_float+0xf0>
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1c0      	bne.n	800e57c <_printf_float+0xf0>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e7bd      	b.n	800e57a <_printf_float+0xee>
 800e5fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e602:	d9db      	bls.n	800e5bc <_printf_float+0x130>
 800e604:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e608:	d118      	bne.n	800e63c <_printf_float+0x1b0>
 800e60a:	2900      	cmp	r1, #0
 800e60c:	6863      	ldr	r3, [r4, #4]
 800e60e:	dd0b      	ble.n	800e628 <_printf_float+0x19c>
 800e610:	6121      	str	r1, [r4, #16]
 800e612:	b913      	cbnz	r3, 800e61a <_printf_float+0x18e>
 800e614:	6822      	ldr	r2, [r4, #0]
 800e616:	07d0      	lsls	r0, r2, #31
 800e618:	d502      	bpl.n	800e620 <_printf_float+0x194>
 800e61a:	3301      	adds	r3, #1
 800e61c:	440b      	add	r3, r1
 800e61e:	6123      	str	r3, [r4, #16]
 800e620:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e622:	f04f 0900 	mov.w	r9, #0
 800e626:	e7db      	b.n	800e5e0 <_printf_float+0x154>
 800e628:	b913      	cbnz	r3, 800e630 <_printf_float+0x1a4>
 800e62a:	6822      	ldr	r2, [r4, #0]
 800e62c:	07d2      	lsls	r2, r2, #31
 800e62e:	d501      	bpl.n	800e634 <_printf_float+0x1a8>
 800e630:	3302      	adds	r3, #2
 800e632:	e7f4      	b.n	800e61e <_printf_float+0x192>
 800e634:	2301      	movs	r3, #1
 800e636:	e7f2      	b.n	800e61e <_printf_float+0x192>
 800e638:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e63e:	4299      	cmp	r1, r3
 800e640:	db05      	blt.n	800e64e <_printf_float+0x1c2>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	6121      	str	r1, [r4, #16]
 800e646:	07d8      	lsls	r0, r3, #31
 800e648:	d5ea      	bpl.n	800e620 <_printf_float+0x194>
 800e64a:	1c4b      	adds	r3, r1, #1
 800e64c:	e7e7      	b.n	800e61e <_printf_float+0x192>
 800e64e:	2900      	cmp	r1, #0
 800e650:	bfd4      	ite	le
 800e652:	f1c1 0202 	rsble	r2, r1, #2
 800e656:	2201      	movgt	r2, #1
 800e658:	4413      	add	r3, r2
 800e65a:	e7e0      	b.n	800e61e <_printf_float+0x192>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	055a      	lsls	r2, r3, #21
 800e660:	d407      	bmi.n	800e672 <_printf_float+0x1e6>
 800e662:	6923      	ldr	r3, [r4, #16]
 800e664:	4642      	mov	r2, r8
 800e666:	4631      	mov	r1, r6
 800e668:	4628      	mov	r0, r5
 800e66a:	47b8      	blx	r7
 800e66c:	3001      	adds	r0, #1
 800e66e:	d12b      	bne.n	800e6c8 <_printf_float+0x23c>
 800e670:	e767      	b.n	800e542 <_printf_float+0xb6>
 800e672:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e676:	f240 80dd 	bls.w	800e834 <_printf_float+0x3a8>
 800e67a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e67e:	2200      	movs	r2, #0
 800e680:	2300      	movs	r3, #0
 800e682:	f7f2 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 800e686:	2800      	cmp	r0, #0
 800e688:	d033      	beq.n	800e6f2 <_printf_float+0x266>
 800e68a:	4a37      	ldr	r2, [pc, #220]	@ (800e768 <_printf_float+0x2dc>)
 800e68c:	2301      	movs	r3, #1
 800e68e:	4631      	mov	r1, r6
 800e690:	4628      	mov	r0, r5
 800e692:	47b8      	blx	r7
 800e694:	3001      	adds	r0, #1
 800e696:	f43f af54 	beq.w	800e542 <_printf_float+0xb6>
 800e69a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e69e:	4543      	cmp	r3, r8
 800e6a0:	db02      	blt.n	800e6a8 <_printf_float+0x21c>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	07d8      	lsls	r0, r3, #31
 800e6a6:	d50f      	bpl.n	800e6c8 <_printf_float+0x23c>
 800e6a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	47b8      	blx	r7
 800e6b2:	3001      	adds	r0, #1
 800e6b4:	f43f af45 	beq.w	800e542 <_printf_float+0xb6>
 800e6b8:	f04f 0900 	mov.w	r9, #0
 800e6bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6c0:	f104 0a1a 	add.w	sl, r4, #26
 800e6c4:	45c8      	cmp	r8, r9
 800e6c6:	dc09      	bgt.n	800e6dc <_printf_float+0x250>
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	079b      	lsls	r3, r3, #30
 800e6cc:	f100 8103 	bmi.w	800e8d6 <_printf_float+0x44a>
 800e6d0:	68e0      	ldr	r0, [r4, #12]
 800e6d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6d4:	4298      	cmp	r0, r3
 800e6d6:	bfb8      	it	lt
 800e6d8:	4618      	movlt	r0, r3
 800e6da:	e734      	b.n	800e546 <_printf_float+0xba>
 800e6dc:	2301      	movs	r3, #1
 800e6de:	4652      	mov	r2, sl
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b8      	blx	r7
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	f43f af2b 	beq.w	800e542 <_printf_float+0xb6>
 800e6ec:	f109 0901 	add.w	r9, r9, #1
 800e6f0:	e7e8      	b.n	800e6c4 <_printf_float+0x238>
 800e6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	dc39      	bgt.n	800e76c <_printf_float+0x2e0>
 800e6f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e768 <_printf_float+0x2dc>)
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	4628      	mov	r0, r5
 800e700:	47b8      	blx	r7
 800e702:	3001      	adds	r0, #1
 800e704:	f43f af1d 	beq.w	800e542 <_printf_float+0xb6>
 800e708:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e70c:	ea59 0303 	orrs.w	r3, r9, r3
 800e710:	d102      	bne.n	800e718 <_printf_float+0x28c>
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	07d9      	lsls	r1, r3, #31
 800e716:	d5d7      	bpl.n	800e6c8 <_printf_float+0x23c>
 800e718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e71c:	4631      	mov	r1, r6
 800e71e:	4628      	mov	r0, r5
 800e720:	47b8      	blx	r7
 800e722:	3001      	adds	r0, #1
 800e724:	f43f af0d 	beq.w	800e542 <_printf_float+0xb6>
 800e728:	f04f 0a00 	mov.w	sl, #0
 800e72c:	f104 0b1a 	add.w	fp, r4, #26
 800e730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e732:	425b      	negs	r3, r3
 800e734:	4553      	cmp	r3, sl
 800e736:	dc01      	bgt.n	800e73c <_printf_float+0x2b0>
 800e738:	464b      	mov	r3, r9
 800e73a:	e793      	b.n	800e664 <_printf_float+0x1d8>
 800e73c:	2301      	movs	r3, #1
 800e73e:	465a      	mov	r2, fp
 800e740:	4631      	mov	r1, r6
 800e742:	4628      	mov	r0, r5
 800e744:	47b8      	blx	r7
 800e746:	3001      	adds	r0, #1
 800e748:	f43f aefb 	beq.w	800e542 <_printf_float+0xb6>
 800e74c:	f10a 0a01 	add.w	sl, sl, #1
 800e750:	e7ee      	b.n	800e730 <_printf_float+0x2a4>
 800e752:	bf00      	nop
 800e754:	7fefffff 	.word	0x7fefffff
 800e758:	08012aa9 	.word	0x08012aa9
 800e75c:	08012aad 	.word	0x08012aad
 800e760:	08012ab1 	.word	0x08012ab1
 800e764:	08012ab5 	.word	0x08012ab5
 800e768:	08012ab9 	.word	0x08012ab9
 800e76c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e76e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e772:	4553      	cmp	r3, sl
 800e774:	bfa8      	it	ge
 800e776:	4653      	movge	r3, sl
 800e778:	2b00      	cmp	r3, #0
 800e77a:	4699      	mov	r9, r3
 800e77c:	dc36      	bgt.n	800e7ec <_printf_float+0x360>
 800e77e:	f04f 0b00 	mov.w	fp, #0
 800e782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e786:	f104 021a 	add.w	r2, r4, #26
 800e78a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e78c:	9306      	str	r3, [sp, #24]
 800e78e:	eba3 0309 	sub.w	r3, r3, r9
 800e792:	455b      	cmp	r3, fp
 800e794:	dc31      	bgt.n	800e7fa <_printf_float+0x36e>
 800e796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e798:	459a      	cmp	sl, r3
 800e79a:	dc3a      	bgt.n	800e812 <_printf_float+0x386>
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	07da      	lsls	r2, r3, #31
 800e7a0:	d437      	bmi.n	800e812 <_printf_float+0x386>
 800e7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7a4:	ebaa 0903 	sub.w	r9, sl, r3
 800e7a8:	9b06      	ldr	r3, [sp, #24]
 800e7aa:	ebaa 0303 	sub.w	r3, sl, r3
 800e7ae:	4599      	cmp	r9, r3
 800e7b0:	bfa8      	it	ge
 800e7b2:	4699      	movge	r9, r3
 800e7b4:	f1b9 0f00 	cmp.w	r9, #0
 800e7b8:	dc33      	bgt.n	800e822 <_printf_float+0x396>
 800e7ba:	f04f 0800 	mov.w	r8, #0
 800e7be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7c2:	f104 0b1a 	add.w	fp, r4, #26
 800e7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7c8:	ebaa 0303 	sub.w	r3, sl, r3
 800e7cc:	eba3 0309 	sub.w	r3, r3, r9
 800e7d0:	4543      	cmp	r3, r8
 800e7d2:	f77f af79 	ble.w	800e6c8 <_printf_float+0x23c>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	465a      	mov	r2, fp
 800e7da:	4631      	mov	r1, r6
 800e7dc:	4628      	mov	r0, r5
 800e7de:	47b8      	blx	r7
 800e7e0:	3001      	adds	r0, #1
 800e7e2:	f43f aeae 	beq.w	800e542 <_printf_float+0xb6>
 800e7e6:	f108 0801 	add.w	r8, r8, #1
 800e7ea:	e7ec      	b.n	800e7c6 <_printf_float+0x33a>
 800e7ec:	4642      	mov	r2, r8
 800e7ee:	4631      	mov	r1, r6
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	47b8      	blx	r7
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	d1c2      	bne.n	800e77e <_printf_float+0x2f2>
 800e7f8:	e6a3      	b.n	800e542 <_printf_float+0xb6>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	4628      	mov	r0, r5
 800e800:	9206      	str	r2, [sp, #24]
 800e802:	47b8      	blx	r7
 800e804:	3001      	adds	r0, #1
 800e806:	f43f ae9c 	beq.w	800e542 <_printf_float+0xb6>
 800e80a:	9a06      	ldr	r2, [sp, #24]
 800e80c:	f10b 0b01 	add.w	fp, fp, #1
 800e810:	e7bb      	b.n	800e78a <_printf_float+0x2fe>
 800e812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e816:	4631      	mov	r1, r6
 800e818:	4628      	mov	r0, r5
 800e81a:	47b8      	blx	r7
 800e81c:	3001      	adds	r0, #1
 800e81e:	d1c0      	bne.n	800e7a2 <_printf_float+0x316>
 800e820:	e68f      	b.n	800e542 <_printf_float+0xb6>
 800e822:	9a06      	ldr	r2, [sp, #24]
 800e824:	464b      	mov	r3, r9
 800e826:	4442      	add	r2, r8
 800e828:	4631      	mov	r1, r6
 800e82a:	4628      	mov	r0, r5
 800e82c:	47b8      	blx	r7
 800e82e:	3001      	adds	r0, #1
 800e830:	d1c3      	bne.n	800e7ba <_printf_float+0x32e>
 800e832:	e686      	b.n	800e542 <_printf_float+0xb6>
 800e834:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e838:	f1ba 0f01 	cmp.w	sl, #1
 800e83c:	dc01      	bgt.n	800e842 <_printf_float+0x3b6>
 800e83e:	07db      	lsls	r3, r3, #31
 800e840:	d536      	bpl.n	800e8b0 <_printf_float+0x424>
 800e842:	2301      	movs	r3, #1
 800e844:	4642      	mov	r2, r8
 800e846:	4631      	mov	r1, r6
 800e848:	4628      	mov	r0, r5
 800e84a:	47b8      	blx	r7
 800e84c:	3001      	adds	r0, #1
 800e84e:	f43f ae78 	beq.w	800e542 <_printf_float+0xb6>
 800e852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e856:	4631      	mov	r1, r6
 800e858:	4628      	mov	r0, r5
 800e85a:	47b8      	blx	r7
 800e85c:	3001      	adds	r0, #1
 800e85e:	f43f ae70 	beq.w	800e542 <_printf_float+0xb6>
 800e862:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e866:	2200      	movs	r2, #0
 800e868:	2300      	movs	r3, #0
 800e86a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e86e:	f7f2 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e872:	b9c0      	cbnz	r0, 800e8a6 <_printf_float+0x41a>
 800e874:	4653      	mov	r3, sl
 800e876:	f108 0201 	add.w	r2, r8, #1
 800e87a:	4631      	mov	r1, r6
 800e87c:	4628      	mov	r0, r5
 800e87e:	47b8      	blx	r7
 800e880:	3001      	adds	r0, #1
 800e882:	d10c      	bne.n	800e89e <_printf_float+0x412>
 800e884:	e65d      	b.n	800e542 <_printf_float+0xb6>
 800e886:	2301      	movs	r3, #1
 800e888:	465a      	mov	r2, fp
 800e88a:	4631      	mov	r1, r6
 800e88c:	4628      	mov	r0, r5
 800e88e:	47b8      	blx	r7
 800e890:	3001      	adds	r0, #1
 800e892:	f43f ae56 	beq.w	800e542 <_printf_float+0xb6>
 800e896:	f108 0801 	add.w	r8, r8, #1
 800e89a:	45d0      	cmp	r8, sl
 800e89c:	dbf3      	blt.n	800e886 <_printf_float+0x3fa>
 800e89e:	464b      	mov	r3, r9
 800e8a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e8a4:	e6df      	b.n	800e666 <_printf_float+0x1da>
 800e8a6:	f04f 0800 	mov.w	r8, #0
 800e8aa:	f104 0b1a 	add.w	fp, r4, #26
 800e8ae:	e7f4      	b.n	800e89a <_printf_float+0x40e>
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	4642      	mov	r2, r8
 800e8b4:	e7e1      	b.n	800e87a <_printf_float+0x3ee>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	464a      	mov	r2, r9
 800e8ba:	4631      	mov	r1, r6
 800e8bc:	4628      	mov	r0, r5
 800e8be:	47b8      	blx	r7
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	f43f ae3e 	beq.w	800e542 <_printf_float+0xb6>
 800e8c6:	f108 0801 	add.w	r8, r8, #1
 800e8ca:	68e3      	ldr	r3, [r4, #12]
 800e8cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8ce:	1a5b      	subs	r3, r3, r1
 800e8d0:	4543      	cmp	r3, r8
 800e8d2:	dcf0      	bgt.n	800e8b6 <_printf_float+0x42a>
 800e8d4:	e6fc      	b.n	800e6d0 <_printf_float+0x244>
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	f104 0919 	add.w	r9, r4, #25
 800e8de:	e7f4      	b.n	800e8ca <_printf_float+0x43e>

0800e8e0 <_printf_common>:
 800e8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	4698      	mov	r8, r3
 800e8e8:	688a      	ldr	r2, [r1, #8]
 800e8ea:	690b      	ldr	r3, [r1, #16]
 800e8ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	bfb8      	it	lt
 800e8f4:	4613      	movlt	r3, r2
 800e8f6:	6033      	str	r3, [r6, #0]
 800e8f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8fc:	4607      	mov	r7, r0
 800e8fe:	460c      	mov	r4, r1
 800e900:	b10a      	cbz	r2, 800e906 <_printf_common+0x26>
 800e902:	3301      	adds	r3, #1
 800e904:	6033      	str	r3, [r6, #0]
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	0699      	lsls	r1, r3, #26
 800e90a:	bf42      	ittt	mi
 800e90c:	6833      	ldrmi	r3, [r6, #0]
 800e90e:	3302      	addmi	r3, #2
 800e910:	6033      	strmi	r3, [r6, #0]
 800e912:	6825      	ldr	r5, [r4, #0]
 800e914:	f015 0506 	ands.w	r5, r5, #6
 800e918:	d106      	bne.n	800e928 <_printf_common+0x48>
 800e91a:	f104 0a19 	add.w	sl, r4, #25
 800e91e:	68e3      	ldr	r3, [r4, #12]
 800e920:	6832      	ldr	r2, [r6, #0]
 800e922:	1a9b      	subs	r3, r3, r2
 800e924:	42ab      	cmp	r3, r5
 800e926:	dc26      	bgt.n	800e976 <_printf_common+0x96>
 800e928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e92c:	6822      	ldr	r2, [r4, #0]
 800e92e:	3b00      	subs	r3, #0
 800e930:	bf18      	it	ne
 800e932:	2301      	movne	r3, #1
 800e934:	0692      	lsls	r2, r2, #26
 800e936:	d42b      	bmi.n	800e990 <_printf_common+0xb0>
 800e938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e93c:	4641      	mov	r1, r8
 800e93e:	4638      	mov	r0, r7
 800e940:	47c8      	blx	r9
 800e942:	3001      	adds	r0, #1
 800e944:	d01e      	beq.n	800e984 <_printf_common+0xa4>
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	6922      	ldr	r2, [r4, #16]
 800e94a:	f003 0306 	and.w	r3, r3, #6
 800e94e:	2b04      	cmp	r3, #4
 800e950:	bf02      	ittt	eq
 800e952:	68e5      	ldreq	r5, [r4, #12]
 800e954:	6833      	ldreq	r3, [r6, #0]
 800e956:	1aed      	subeq	r5, r5, r3
 800e958:	68a3      	ldr	r3, [r4, #8]
 800e95a:	bf0c      	ite	eq
 800e95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e960:	2500      	movne	r5, #0
 800e962:	4293      	cmp	r3, r2
 800e964:	bfc4      	itt	gt
 800e966:	1a9b      	subgt	r3, r3, r2
 800e968:	18ed      	addgt	r5, r5, r3
 800e96a:	2600      	movs	r6, #0
 800e96c:	341a      	adds	r4, #26
 800e96e:	42b5      	cmp	r5, r6
 800e970:	d11a      	bne.n	800e9a8 <_printf_common+0xc8>
 800e972:	2000      	movs	r0, #0
 800e974:	e008      	b.n	800e988 <_printf_common+0xa8>
 800e976:	2301      	movs	r3, #1
 800e978:	4652      	mov	r2, sl
 800e97a:	4641      	mov	r1, r8
 800e97c:	4638      	mov	r0, r7
 800e97e:	47c8      	blx	r9
 800e980:	3001      	adds	r0, #1
 800e982:	d103      	bne.n	800e98c <_printf_common+0xac>
 800e984:	f04f 30ff 	mov.w	r0, #4294967295
 800e988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e98c:	3501      	adds	r5, #1
 800e98e:	e7c6      	b.n	800e91e <_printf_common+0x3e>
 800e990:	18e1      	adds	r1, r4, r3
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	2030      	movs	r0, #48	@ 0x30
 800e996:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e99a:	4422      	add	r2, r4
 800e99c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e9a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9a4:	3302      	adds	r3, #2
 800e9a6:	e7c7      	b.n	800e938 <_printf_common+0x58>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	4641      	mov	r1, r8
 800e9ae:	4638      	mov	r0, r7
 800e9b0:	47c8      	blx	r9
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	d0e6      	beq.n	800e984 <_printf_common+0xa4>
 800e9b6:	3601      	adds	r6, #1
 800e9b8:	e7d9      	b.n	800e96e <_printf_common+0x8e>
	...

0800e9bc <_printf_i>:
 800e9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c0:	7e0f      	ldrb	r7, [r1, #24]
 800e9c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9c4:	2f78      	cmp	r7, #120	@ 0x78
 800e9c6:	4691      	mov	r9, r2
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	469a      	mov	sl, r3
 800e9ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9d2:	d807      	bhi.n	800e9e4 <_printf_i+0x28>
 800e9d4:	2f62      	cmp	r7, #98	@ 0x62
 800e9d6:	d80a      	bhi.n	800e9ee <_printf_i+0x32>
 800e9d8:	2f00      	cmp	r7, #0
 800e9da:	f000 80d2 	beq.w	800eb82 <_printf_i+0x1c6>
 800e9de:	2f58      	cmp	r7, #88	@ 0x58
 800e9e0:	f000 80b9 	beq.w	800eb56 <_printf_i+0x19a>
 800e9e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9ec:	e03a      	b.n	800ea64 <_printf_i+0xa8>
 800e9ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9f2:	2b15      	cmp	r3, #21
 800e9f4:	d8f6      	bhi.n	800e9e4 <_printf_i+0x28>
 800e9f6:	a101      	add	r1, pc, #4	@ (adr r1, 800e9fc <_printf_i+0x40>)
 800e9f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9fc:	0800ea55 	.word	0x0800ea55
 800ea00:	0800ea69 	.word	0x0800ea69
 800ea04:	0800e9e5 	.word	0x0800e9e5
 800ea08:	0800e9e5 	.word	0x0800e9e5
 800ea0c:	0800e9e5 	.word	0x0800e9e5
 800ea10:	0800e9e5 	.word	0x0800e9e5
 800ea14:	0800ea69 	.word	0x0800ea69
 800ea18:	0800e9e5 	.word	0x0800e9e5
 800ea1c:	0800e9e5 	.word	0x0800e9e5
 800ea20:	0800e9e5 	.word	0x0800e9e5
 800ea24:	0800e9e5 	.word	0x0800e9e5
 800ea28:	0800eb69 	.word	0x0800eb69
 800ea2c:	0800ea93 	.word	0x0800ea93
 800ea30:	0800eb23 	.word	0x0800eb23
 800ea34:	0800e9e5 	.word	0x0800e9e5
 800ea38:	0800e9e5 	.word	0x0800e9e5
 800ea3c:	0800eb8b 	.word	0x0800eb8b
 800ea40:	0800e9e5 	.word	0x0800e9e5
 800ea44:	0800ea93 	.word	0x0800ea93
 800ea48:	0800e9e5 	.word	0x0800e9e5
 800ea4c:	0800e9e5 	.word	0x0800e9e5
 800ea50:	0800eb2b 	.word	0x0800eb2b
 800ea54:	6833      	ldr	r3, [r6, #0]
 800ea56:	1d1a      	adds	r2, r3, #4
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	6032      	str	r2, [r6, #0]
 800ea5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea64:	2301      	movs	r3, #1
 800ea66:	e09d      	b.n	800eba4 <_printf_i+0x1e8>
 800ea68:	6833      	ldr	r3, [r6, #0]
 800ea6a:	6820      	ldr	r0, [r4, #0]
 800ea6c:	1d19      	adds	r1, r3, #4
 800ea6e:	6031      	str	r1, [r6, #0]
 800ea70:	0606      	lsls	r6, r0, #24
 800ea72:	d501      	bpl.n	800ea78 <_printf_i+0xbc>
 800ea74:	681d      	ldr	r5, [r3, #0]
 800ea76:	e003      	b.n	800ea80 <_printf_i+0xc4>
 800ea78:	0645      	lsls	r5, r0, #25
 800ea7a:	d5fb      	bpl.n	800ea74 <_printf_i+0xb8>
 800ea7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea80:	2d00      	cmp	r5, #0
 800ea82:	da03      	bge.n	800ea8c <_printf_i+0xd0>
 800ea84:	232d      	movs	r3, #45	@ 0x2d
 800ea86:	426d      	negs	r5, r5
 800ea88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea8c:	4859      	ldr	r0, [pc, #356]	@ (800ebf4 <_printf_i+0x238>)
 800ea8e:	230a      	movs	r3, #10
 800ea90:	e011      	b.n	800eab6 <_printf_i+0xfa>
 800ea92:	6821      	ldr	r1, [r4, #0]
 800ea94:	6833      	ldr	r3, [r6, #0]
 800ea96:	0608      	lsls	r0, r1, #24
 800ea98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea9c:	d402      	bmi.n	800eaa4 <_printf_i+0xe8>
 800ea9e:	0649      	lsls	r1, r1, #25
 800eaa0:	bf48      	it	mi
 800eaa2:	b2ad      	uxthmi	r5, r5
 800eaa4:	2f6f      	cmp	r7, #111	@ 0x6f
 800eaa6:	4853      	ldr	r0, [pc, #332]	@ (800ebf4 <_printf_i+0x238>)
 800eaa8:	6033      	str	r3, [r6, #0]
 800eaaa:	bf14      	ite	ne
 800eaac:	230a      	movne	r3, #10
 800eaae:	2308      	moveq	r3, #8
 800eab0:	2100      	movs	r1, #0
 800eab2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eab6:	6866      	ldr	r6, [r4, #4]
 800eab8:	60a6      	str	r6, [r4, #8]
 800eaba:	2e00      	cmp	r6, #0
 800eabc:	bfa2      	ittt	ge
 800eabe:	6821      	ldrge	r1, [r4, #0]
 800eac0:	f021 0104 	bicge.w	r1, r1, #4
 800eac4:	6021      	strge	r1, [r4, #0]
 800eac6:	b90d      	cbnz	r5, 800eacc <_printf_i+0x110>
 800eac8:	2e00      	cmp	r6, #0
 800eaca:	d04b      	beq.n	800eb64 <_printf_i+0x1a8>
 800eacc:	4616      	mov	r6, r2
 800eace:	fbb5 f1f3 	udiv	r1, r5, r3
 800ead2:	fb03 5711 	mls	r7, r3, r1, r5
 800ead6:	5dc7      	ldrb	r7, [r0, r7]
 800ead8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eadc:	462f      	mov	r7, r5
 800eade:	42bb      	cmp	r3, r7
 800eae0:	460d      	mov	r5, r1
 800eae2:	d9f4      	bls.n	800eace <_printf_i+0x112>
 800eae4:	2b08      	cmp	r3, #8
 800eae6:	d10b      	bne.n	800eb00 <_printf_i+0x144>
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	07df      	lsls	r7, r3, #31
 800eaec:	d508      	bpl.n	800eb00 <_printf_i+0x144>
 800eaee:	6923      	ldr	r3, [r4, #16]
 800eaf0:	6861      	ldr	r1, [r4, #4]
 800eaf2:	4299      	cmp	r1, r3
 800eaf4:	bfde      	ittt	le
 800eaf6:	2330      	movle	r3, #48	@ 0x30
 800eaf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eafc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb00:	1b92      	subs	r2, r2, r6
 800eb02:	6122      	str	r2, [r4, #16]
 800eb04:	f8cd a000 	str.w	sl, [sp]
 800eb08:	464b      	mov	r3, r9
 800eb0a:	aa03      	add	r2, sp, #12
 800eb0c:	4621      	mov	r1, r4
 800eb0e:	4640      	mov	r0, r8
 800eb10:	f7ff fee6 	bl	800e8e0 <_printf_common>
 800eb14:	3001      	adds	r0, #1
 800eb16:	d14a      	bne.n	800ebae <_printf_i+0x1f2>
 800eb18:	f04f 30ff 	mov.w	r0, #4294967295
 800eb1c:	b004      	add	sp, #16
 800eb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	f043 0320 	orr.w	r3, r3, #32
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	4833      	ldr	r0, [pc, #204]	@ (800ebf8 <_printf_i+0x23c>)
 800eb2c:	2778      	movs	r7, #120	@ 0x78
 800eb2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	6831      	ldr	r1, [r6, #0]
 800eb36:	061f      	lsls	r7, r3, #24
 800eb38:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb3c:	d402      	bmi.n	800eb44 <_printf_i+0x188>
 800eb3e:	065f      	lsls	r7, r3, #25
 800eb40:	bf48      	it	mi
 800eb42:	b2ad      	uxthmi	r5, r5
 800eb44:	6031      	str	r1, [r6, #0]
 800eb46:	07d9      	lsls	r1, r3, #31
 800eb48:	bf44      	itt	mi
 800eb4a:	f043 0320 	orrmi.w	r3, r3, #32
 800eb4e:	6023      	strmi	r3, [r4, #0]
 800eb50:	b11d      	cbz	r5, 800eb5a <_printf_i+0x19e>
 800eb52:	2310      	movs	r3, #16
 800eb54:	e7ac      	b.n	800eab0 <_printf_i+0xf4>
 800eb56:	4827      	ldr	r0, [pc, #156]	@ (800ebf4 <_printf_i+0x238>)
 800eb58:	e7e9      	b.n	800eb2e <_printf_i+0x172>
 800eb5a:	6823      	ldr	r3, [r4, #0]
 800eb5c:	f023 0320 	bic.w	r3, r3, #32
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	e7f6      	b.n	800eb52 <_printf_i+0x196>
 800eb64:	4616      	mov	r6, r2
 800eb66:	e7bd      	b.n	800eae4 <_printf_i+0x128>
 800eb68:	6833      	ldr	r3, [r6, #0]
 800eb6a:	6825      	ldr	r5, [r4, #0]
 800eb6c:	6961      	ldr	r1, [r4, #20]
 800eb6e:	1d18      	adds	r0, r3, #4
 800eb70:	6030      	str	r0, [r6, #0]
 800eb72:	062e      	lsls	r6, r5, #24
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	d501      	bpl.n	800eb7c <_printf_i+0x1c0>
 800eb78:	6019      	str	r1, [r3, #0]
 800eb7a:	e002      	b.n	800eb82 <_printf_i+0x1c6>
 800eb7c:	0668      	lsls	r0, r5, #25
 800eb7e:	d5fb      	bpl.n	800eb78 <_printf_i+0x1bc>
 800eb80:	8019      	strh	r1, [r3, #0]
 800eb82:	2300      	movs	r3, #0
 800eb84:	6123      	str	r3, [r4, #16]
 800eb86:	4616      	mov	r6, r2
 800eb88:	e7bc      	b.n	800eb04 <_printf_i+0x148>
 800eb8a:	6833      	ldr	r3, [r6, #0]
 800eb8c:	1d1a      	adds	r2, r3, #4
 800eb8e:	6032      	str	r2, [r6, #0]
 800eb90:	681e      	ldr	r6, [r3, #0]
 800eb92:	6862      	ldr	r2, [r4, #4]
 800eb94:	2100      	movs	r1, #0
 800eb96:	4630      	mov	r0, r6
 800eb98:	f7f1 fb1a 	bl	80001d0 <memchr>
 800eb9c:	b108      	cbz	r0, 800eba2 <_printf_i+0x1e6>
 800eb9e:	1b80      	subs	r0, r0, r6
 800eba0:	6060      	str	r0, [r4, #4]
 800eba2:	6863      	ldr	r3, [r4, #4]
 800eba4:	6123      	str	r3, [r4, #16]
 800eba6:	2300      	movs	r3, #0
 800eba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebac:	e7aa      	b.n	800eb04 <_printf_i+0x148>
 800ebae:	6923      	ldr	r3, [r4, #16]
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4649      	mov	r1, r9
 800ebb4:	4640      	mov	r0, r8
 800ebb6:	47d0      	blx	sl
 800ebb8:	3001      	adds	r0, #1
 800ebba:	d0ad      	beq.n	800eb18 <_printf_i+0x15c>
 800ebbc:	6823      	ldr	r3, [r4, #0]
 800ebbe:	079b      	lsls	r3, r3, #30
 800ebc0:	d413      	bmi.n	800ebea <_printf_i+0x22e>
 800ebc2:	68e0      	ldr	r0, [r4, #12]
 800ebc4:	9b03      	ldr	r3, [sp, #12]
 800ebc6:	4298      	cmp	r0, r3
 800ebc8:	bfb8      	it	lt
 800ebca:	4618      	movlt	r0, r3
 800ebcc:	e7a6      	b.n	800eb1c <_printf_i+0x160>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	4632      	mov	r2, r6
 800ebd2:	4649      	mov	r1, r9
 800ebd4:	4640      	mov	r0, r8
 800ebd6:	47d0      	blx	sl
 800ebd8:	3001      	adds	r0, #1
 800ebda:	d09d      	beq.n	800eb18 <_printf_i+0x15c>
 800ebdc:	3501      	adds	r5, #1
 800ebde:	68e3      	ldr	r3, [r4, #12]
 800ebe0:	9903      	ldr	r1, [sp, #12]
 800ebe2:	1a5b      	subs	r3, r3, r1
 800ebe4:	42ab      	cmp	r3, r5
 800ebe6:	dcf2      	bgt.n	800ebce <_printf_i+0x212>
 800ebe8:	e7eb      	b.n	800ebc2 <_printf_i+0x206>
 800ebea:	2500      	movs	r5, #0
 800ebec:	f104 0619 	add.w	r6, r4, #25
 800ebf0:	e7f5      	b.n	800ebde <_printf_i+0x222>
 800ebf2:	bf00      	nop
 800ebf4:	08012abb 	.word	0x08012abb
 800ebf8:	08012acc 	.word	0x08012acc

0800ebfc <std>:
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	b510      	push	{r4, lr}
 800ec00:	4604      	mov	r4, r0
 800ec02:	e9c0 3300 	strd	r3, r3, [r0]
 800ec06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec0a:	6083      	str	r3, [r0, #8]
 800ec0c:	8181      	strh	r1, [r0, #12]
 800ec0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec10:	81c2      	strh	r2, [r0, #14]
 800ec12:	6183      	str	r3, [r0, #24]
 800ec14:	4619      	mov	r1, r3
 800ec16:	2208      	movs	r2, #8
 800ec18:	305c      	adds	r0, #92	@ 0x5c
 800ec1a:	f000 f926 	bl	800ee6a <memset>
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec54 <std+0x58>)
 800ec20:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec22:	4b0d      	ldr	r3, [pc, #52]	@ (800ec58 <std+0x5c>)
 800ec24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec26:	4b0d      	ldr	r3, [pc, #52]	@ (800ec5c <std+0x60>)
 800ec28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec60 <std+0x64>)
 800ec2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec64 <std+0x68>)
 800ec30:	6224      	str	r4, [r4, #32]
 800ec32:	429c      	cmp	r4, r3
 800ec34:	d006      	beq.n	800ec44 <std+0x48>
 800ec36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec3a:	4294      	cmp	r4, r2
 800ec3c:	d002      	beq.n	800ec44 <std+0x48>
 800ec3e:	33d0      	adds	r3, #208	@ 0xd0
 800ec40:	429c      	cmp	r4, r3
 800ec42:	d105      	bne.n	800ec50 <std+0x54>
 800ec44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec4c:	f000 b98a 	b.w	800ef64 <__retarget_lock_init_recursive>
 800ec50:	bd10      	pop	{r4, pc}
 800ec52:	bf00      	nop
 800ec54:	0800ede5 	.word	0x0800ede5
 800ec58:	0800ee07 	.word	0x0800ee07
 800ec5c:	0800ee3f 	.word	0x0800ee3f
 800ec60:	0800ee63 	.word	0x0800ee63
 800ec64:	200026b8 	.word	0x200026b8

0800ec68 <stdio_exit_handler>:
 800ec68:	4a02      	ldr	r2, [pc, #8]	@ (800ec74 <stdio_exit_handler+0xc>)
 800ec6a:	4903      	ldr	r1, [pc, #12]	@ (800ec78 <stdio_exit_handler+0x10>)
 800ec6c:	4803      	ldr	r0, [pc, #12]	@ (800ec7c <stdio_exit_handler+0x14>)
 800ec6e:	f000 b869 	b.w	800ed44 <_fwalk_sglue>
 800ec72:	bf00      	nop
 800ec74:	2000012c 	.word	0x2000012c
 800ec78:	08010b81 	.word	0x08010b81
 800ec7c:	2000013c 	.word	0x2000013c

0800ec80 <cleanup_stdio>:
 800ec80:	6841      	ldr	r1, [r0, #4]
 800ec82:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb4 <cleanup_stdio+0x34>)
 800ec84:	4299      	cmp	r1, r3
 800ec86:	b510      	push	{r4, lr}
 800ec88:	4604      	mov	r4, r0
 800ec8a:	d001      	beq.n	800ec90 <cleanup_stdio+0x10>
 800ec8c:	f001 ff78 	bl	8010b80 <_fflush_r>
 800ec90:	68a1      	ldr	r1, [r4, #8]
 800ec92:	4b09      	ldr	r3, [pc, #36]	@ (800ecb8 <cleanup_stdio+0x38>)
 800ec94:	4299      	cmp	r1, r3
 800ec96:	d002      	beq.n	800ec9e <cleanup_stdio+0x1e>
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f001 ff71 	bl	8010b80 <_fflush_r>
 800ec9e:	68e1      	ldr	r1, [r4, #12]
 800eca0:	4b06      	ldr	r3, [pc, #24]	@ (800ecbc <cleanup_stdio+0x3c>)
 800eca2:	4299      	cmp	r1, r3
 800eca4:	d004      	beq.n	800ecb0 <cleanup_stdio+0x30>
 800eca6:	4620      	mov	r0, r4
 800eca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecac:	f001 bf68 	b.w	8010b80 <_fflush_r>
 800ecb0:	bd10      	pop	{r4, pc}
 800ecb2:	bf00      	nop
 800ecb4:	200026b8 	.word	0x200026b8
 800ecb8:	20002720 	.word	0x20002720
 800ecbc:	20002788 	.word	0x20002788

0800ecc0 <global_stdio_init.part.0>:
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	4b0b      	ldr	r3, [pc, #44]	@ (800ecf0 <global_stdio_init.part.0+0x30>)
 800ecc4:	4c0b      	ldr	r4, [pc, #44]	@ (800ecf4 <global_stdio_init.part.0+0x34>)
 800ecc6:	4a0c      	ldr	r2, [pc, #48]	@ (800ecf8 <global_stdio_init.part.0+0x38>)
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	4620      	mov	r0, r4
 800eccc:	2200      	movs	r2, #0
 800ecce:	2104      	movs	r1, #4
 800ecd0:	f7ff ff94 	bl	800ebfc <std>
 800ecd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ecd8:	2201      	movs	r2, #1
 800ecda:	2109      	movs	r1, #9
 800ecdc:	f7ff ff8e 	bl	800ebfc <std>
 800ece0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ece4:	2202      	movs	r2, #2
 800ece6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecea:	2112      	movs	r1, #18
 800ecec:	f7ff bf86 	b.w	800ebfc <std>
 800ecf0:	200027f0 	.word	0x200027f0
 800ecf4:	200026b8 	.word	0x200026b8
 800ecf8:	0800ec69 	.word	0x0800ec69

0800ecfc <__sfp_lock_acquire>:
 800ecfc:	4801      	ldr	r0, [pc, #4]	@ (800ed04 <__sfp_lock_acquire+0x8>)
 800ecfe:	f000 b932 	b.w	800ef66 <__retarget_lock_acquire_recursive>
 800ed02:	bf00      	nop
 800ed04:	200027f9 	.word	0x200027f9

0800ed08 <__sfp_lock_release>:
 800ed08:	4801      	ldr	r0, [pc, #4]	@ (800ed10 <__sfp_lock_release+0x8>)
 800ed0a:	f000 b92d 	b.w	800ef68 <__retarget_lock_release_recursive>
 800ed0e:	bf00      	nop
 800ed10:	200027f9 	.word	0x200027f9

0800ed14 <__sinit>:
 800ed14:	b510      	push	{r4, lr}
 800ed16:	4604      	mov	r4, r0
 800ed18:	f7ff fff0 	bl	800ecfc <__sfp_lock_acquire>
 800ed1c:	6a23      	ldr	r3, [r4, #32]
 800ed1e:	b11b      	cbz	r3, 800ed28 <__sinit+0x14>
 800ed20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed24:	f7ff bff0 	b.w	800ed08 <__sfp_lock_release>
 800ed28:	4b04      	ldr	r3, [pc, #16]	@ (800ed3c <__sinit+0x28>)
 800ed2a:	6223      	str	r3, [r4, #32]
 800ed2c:	4b04      	ldr	r3, [pc, #16]	@ (800ed40 <__sinit+0x2c>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1f5      	bne.n	800ed20 <__sinit+0xc>
 800ed34:	f7ff ffc4 	bl	800ecc0 <global_stdio_init.part.0>
 800ed38:	e7f2      	b.n	800ed20 <__sinit+0xc>
 800ed3a:	bf00      	nop
 800ed3c:	0800ec81 	.word	0x0800ec81
 800ed40:	200027f0 	.word	0x200027f0

0800ed44 <_fwalk_sglue>:
 800ed44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed48:	4607      	mov	r7, r0
 800ed4a:	4688      	mov	r8, r1
 800ed4c:	4614      	mov	r4, r2
 800ed4e:	2600      	movs	r6, #0
 800ed50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed54:	f1b9 0901 	subs.w	r9, r9, #1
 800ed58:	d505      	bpl.n	800ed66 <_fwalk_sglue+0x22>
 800ed5a:	6824      	ldr	r4, [r4, #0]
 800ed5c:	2c00      	cmp	r4, #0
 800ed5e:	d1f7      	bne.n	800ed50 <_fwalk_sglue+0xc>
 800ed60:	4630      	mov	r0, r6
 800ed62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed66:	89ab      	ldrh	r3, [r5, #12]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d907      	bls.n	800ed7c <_fwalk_sglue+0x38>
 800ed6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed70:	3301      	adds	r3, #1
 800ed72:	d003      	beq.n	800ed7c <_fwalk_sglue+0x38>
 800ed74:	4629      	mov	r1, r5
 800ed76:	4638      	mov	r0, r7
 800ed78:	47c0      	blx	r8
 800ed7a:	4306      	orrs	r6, r0
 800ed7c:	3568      	adds	r5, #104	@ 0x68
 800ed7e:	e7e9      	b.n	800ed54 <_fwalk_sglue+0x10>

0800ed80 <iprintf>:
 800ed80:	b40f      	push	{r0, r1, r2, r3}
 800ed82:	b507      	push	{r0, r1, r2, lr}
 800ed84:	4906      	ldr	r1, [pc, #24]	@ (800eda0 <iprintf+0x20>)
 800ed86:	ab04      	add	r3, sp, #16
 800ed88:	6808      	ldr	r0, [r1, #0]
 800ed8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed8e:	6881      	ldr	r1, [r0, #8]
 800ed90:	9301      	str	r3, [sp, #4]
 800ed92:	f001 fd59 	bl	8010848 <_vfiprintf_r>
 800ed96:	b003      	add	sp, #12
 800ed98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed9c:	b004      	add	sp, #16
 800ed9e:	4770      	bx	lr
 800eda0:	20000138 	.word	0x20000138

0800eda4 <siprintf>:
 800eda4:	b40e      	push	{r1, r2, r3}
 800eda6:	b500      	push	{lr}
 800eda8:	b09c      	sub	sp, #112	@ 0x70
 800edaa:	ab1d      	add	r3, sp, #116	@ 0x74
 800edac:	9002      	str	r0, [sp, #8]
 800edae:	9006      	str	r0, [sp, #24]
 800edb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800edb4:	4809      	ldr	r0, [pc, #36]	@ (800eddc <siprintf+0x38>)
 800edb6:	9107      	str	r1, [sp, #28]
 800edb8:	9104      	str	r1, [sp, #16]
 800edba:	4909      	ldr	r1, [pc, #36]	@ (800ede0 <siprintf+0x3c>)
 800edbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800edc0:	9105      	str	r1, [sp, #20]
 800edc2:	6800      	ldr	r0, [r0, #0]
 800edc4:	9301      	str	r3, [sp, #4]
 800edc6:	a902      	add	r1, sp, #8
 800edc8:	f001 fc18 	bl	80105fc <_svfiprintf_r>
 800edcc:	9b02      	ldr	r3, [sp, #8]
 800edce:	2200      	movs	r2, #0
 800edd0:	701a      	strb	r2, [r3, #0]
 800edd2:	b01c      	add	sp, #112	@ 0x70
 800edd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800edd8:	b003      	add	sp, #12
 800edda:	4770      	bx	lr
 800eddc:	20000138 	.word	0x20000138
 800ede0:	ffff0208 	.word	0xffff0208

0800ede4 <__sread>:
 800ede4:	b510      	push	{r4, lr}
 800ede6:	460c      	mov	r4, r1
 800ede8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edec:	f000 f86c 	bl	800eec8 <_read_r>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	bfab      	itete	ge
 800edf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800edf6:	89a3      	ldrhlt	r3, [r4, #12]
 800edf8:	181b      	addge	r3, r3, r0
 800edfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800edfe:	bfac      	ite	ge
 800ee00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee02:	81a3      	strhlt	r3, [r4, #12]
 800ee04:	bd10      	pop	{r4, pc}

0800ee06 <__swrite>:
 800ee06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0a:	461f      	mov	r7, r3
 800ee0c:	898b      	ldrh	r3, [r1, #12]
 800ee0e:	05db      	lsls	r3, r3, #23
 800ee10:	4605      	mov	r5, r0
 800ee12:	460c      	mov	r4, r1
 800ee14:	4616      	mov	r6, r2
 800ee16:	d505      	bpl.n	800ee24 <__swrite+0x1e>
 800ee18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f000 f840 	bl	800eea4 <_lseek_r>
 800ee24:	89a3      	ldrh	r3, [r4, #12]
 800ee26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee2e:	81a3      	strh	r3, [r4, #12]
 800ee30:	4632      	mov	r2, r6
 800ee32:	463b      	mov	r3, r7
 800ee34:	4628      	mov	r0, r5
 800ee36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee3a:	f000 b857 	b.w	800eeec <_write_r>

0800ee3e <__sseek>:
 800ee3e:	b510      	push	{r4, lr}
 800ee40:	460c      	mov	r4, r1
 800ee42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee46:	f000 f82d 	bl	800eea4 <_lseek_r>
 800ee4a:	1c43      	adds	r3, r0, #1
 800ee4c:	89a3      	ldrh	r3, [r4, #12]
 800ee4e:	bf15      	itete	ne
 800ee50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ee52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ee56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ee5a:	81a3      	strheq	r3, [r4, #12]
 800ee5c:	bf18      	it	ne
 800ee5e:	81a3      	strhne	r3, [r4, #12]
 800ee60:	bd10      	pop	{r4, pc}

0800ee62 <__sclose>:
 800ee62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee66:	f000 b80d 	b.w	800ee84 <_close_r>

0800ee6a <memset>:
 800ee6a:	4402      	add	r2, r0
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d100      	bne.n	800ee74 <memset+0xa>
 800ee72:	4770      	bx	lr
 800ee74:	f803 1b01 	strb.w	r1, [r3], #1
 800ee78:	e7f9      	b.n	800ee6e <memset+0x4>
	...

0800ee7c <_localeconv_r>:
 800ee7c:	4800      	ldr	r0, [pc, #0]	@ (800ee80 <_localeconv_r+0x4>)
 800ee7e:	4770      	bx	lr
 800ee80:	20000278 	.word	0x20000278

0800ee84 <_close_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d06      	ldr	r5, [pc, #24]	@ (800eea0 <_close_r+0x1c>)
 800ee88:	2300      	movs	r3, #0
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	602b      	str	r3, [r5, #0]
 800ee90:	f7f5 f9da 	bl	8004248 <_close>
 800ee94:	1c43      	adds	r3, r0, #1
 800ee96:	d102      	bne.n	800ee9e <_close_r+0x1a>
 800ee98:	682b      	ldr	r3, [r5, #0]
 800ee9a:	b103      	cbz	r3, 800ee9e <_close_r+0x1a>
 800ee9c:	6023      	str	r3, [r4, #0]
 800ee9e:	bd38      	pop	{r3, r4, r5, pc}
 800eea0:	200027f4 	.word	0x200027f4

0800eea4 <_lseek_r>:
 800eea4:	b538      	push	{r3, r4, r5, lr}
 800eea6:	4d07      	ldr	r5, [pc, #28]	@ (800eec4 <_lseek_r+0x20>)
 800eea8:	4604      	mov	r4, r0
 800eeaa:	4608      	mov	r0, r1
 800eeac:	4611      	mov	r1, r2
 800eeae:	2200      	movs	r2, #0
 800eeb0:	602a      	str	r2, [r5, #0]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	f7f5 f9ef 	bl	8004296 <_lseek>
 800eeb8:	1c43      	adds	r3, r0, #1
 800eeba:	d102      	bne.n	800eec2 <_lseek_r+0x1e>
 800eebc:	682b      	ldr	r3, [r5, #0]
 800eebe:	b103      	cbz	r3, 800eec2 <_lseek_r+0x1e>
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	200027f4 	.word	0x200027f4

0800eec8 <_read_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	@ (800eee8 <_read_r+0x20>)
 800eecc:	4604      	mov	r4, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	602a      	str	r2, [r5, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f5 f97d 	bl	80041d6 <_read>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_read_r+0x1e>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_read_r+0x1e>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	200027f4 	.word	0x200027f4

0800eeec <_write_r>:
 800eeec:	b538      	push	{r3, r4, r5, lr}
 800eeee:	4d07      	ldr	r5, [pc, #28]	@ (800ef0c <_write_r+0x20>)
 800eef0:	4604      	mov	r4, r0
 800eef2:	4608      	mov	r0, r1
 800eef4:	4611      	mov	r1, r2
 800eef6:	2200      	movs	r2, #0
 800eef8:	602a      	str	r2, [r5, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	f7f5 f988 	bl	8004210 <_write>
 800ef00:	1c43      	adds	r3, r0, #1
 800ef02:	d102      	bne.n	800ef0a <_write_r+0x1e>
 800ef04:	682b      	ldr	r3, [r5, #0]
 800ef06:	b103      	cbz	r3, 800ef0a <_write_r+0x1e>
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
 800ef0c:	200027f4 	.word	0x200027f4

0800ef10 <__errno>:
 800ef10:	4b01      	ldr	r3, [pc, #4]	@ (800ef18 <__errno+0x8>)
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	20000138 	.word	0x20000138

0800ef1c <__libc_init_array>:
 800ef1c:	b570      	push	{r4, r5, r6, lr}
 800ef1e:	4d0d      	ldr	r5, [pc, #52]	@ (800ef54 <__libc_init_array+0x38>)
 800ef20:	4c0d      	ldr	r4, [pc, #52]	@ (800ef58 <__libc_init_array+0x3c>)
 800ef22:	1b64      	subs	r4, r4, r5
 800ef24:	10a4      	asrs	r4, r4, #2
 800ef26:	2600      	movs	r6, #0
 800ef28:	42a6      	cmp	r6, r4
 800ef2a:	d109      	bne.n	800ef40 <__libc_init_array+0x24>
 800ef2c:	4d0b      	ldr	r5, [pc, #44]	@ (800ef5c <__libc_init_array+0x40>)
 800ef2e:	4c0c      	ldr	r4, [pc, #48]	@ (800ef60 <__libc_init_array+0x44>)
 800ef30:	f003 fcae 	bl	8012890 <_init>
 800ef34:	1b64      	subs	r4, r4, r5
 800ef36:	10a4      	asrs	r4, r4, #2
 800ef38:	2600      	movs	r6, #0
 800ef3a:	42a6      	cmp	r6, r4
 800ef3c:	d105      	bne.n	800ef4a <__libc_init_array+0x2e>
 800ef3e:	bd70      	pop	{r4, r5, r6, pc}
 800ef40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef44:	4798      	blx	r3
 800ef46:	3601      	adds	r6, #1
 800ef48:	e7ee      	b.n	800ef28 <__libc_init_array+0xc>
 800ef4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef4e:	4798      	blx	r3
 800ef50:	3601      	adds	r6, #1
 800ef52:	e7f2      	b.n	800ef3a <__libc_init_array+0x1e>
 800ef54:	08013178 	.word	0x08013178
 800ef58:	08013178 	.word	0x08013178
 800ef5c:	08013178 	.word	0x08013178
 800ef60:	0801317c 	.word	0x0801317c

0800ef64 <__retarget_lock_init_recursive>:
 800ef64:	4770      	bx	lr

0800ef66 <__retarget_lock_acquire_recursive>:
 800ef66:	4770      	bx	lr

0800ef68 <__retarget_lock_release_recursive>:
 800ef68:	4770      	bx	lr

0800ef6a <memcpy>:
 800ef6a:	440a      	add	r2, r1
 800ef6c:	4291      	cmp	r1, r2
 800ef6e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef72:	d100      	bne.n	800ef76 <memcpy+0xc>
 800ef74:	4770      	bx	lr
 800ef76:	b510      	push	{r4, lr}
 800ef78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef80:	4291      	cmp	r1, r2
 800ef82:	d1f9      	bne.n	800ef78 <memcpy+0xe>
 800ef84:	bd10      	pop	{r4, pc}

0800ef86 <copysign>:
 800ef86:	b082      	sub	sp, #8
 800ef88:	ec51 0b10 	vmov	r0, r1, d0
 800ef8c:	ed8d 1b00 	vstr	d1, [sp]
 800ef90:	4602      	mov	r2, r0
 800ef92:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800ef96:	9901      	ldr	r1, [sp, #4]
 800ef98:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800ef9c:	ea40 0301 	orr.w	r3, r0, r1
 800efa0:	ec43 2b10 	vmov	d0, r2, r3
 800efa4:	b002      	add	sp, #8
 800efa6:	4770      	bx	lr

0800efa8 <quorem>:
 800efa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efac:	6903      	ldr	r3, [r0, #16]
 800efae:	690c      	ldr	r4, [r1, #16]
 800efb0:	42a3      	cmp	r3, r4
 800efb2:	4607      	mov	r7, r0
 800efb4:	db7e      	blt.n	800f0b4 <quorem+0x10c>
 800efb6:	3c01      	subs	r4, #1
 800efb8:	f101 0814 	add.w	r8, r1, #20
 800efbc:	00a3      	lsls	r3, r4, #2
 800efbe:	f100 0514 	add.w	r5, r0, #20
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efd2:	3301      	adds	r3, #1
 800efd4:	429a      	cmp	r2, r3
 800efd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efda:	fbb2 f6f3 	udiv	r6, r2, r3
 800efde:	d32e      	bcc.n	800f03e <quorem+0x96>
 800efe0:	f04f 0a00 	mov.w	sl, #0
 800efe4:	46c4      	mov	ip, r8
 800efe6:	46ae      	mov	lr, r5
 800efe8:	46d3      	mov	fp, sl
 800efea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800efee:	b298      	uxth	r0, r3
 800eff0:	fb06 a000 	mla	r0, r6, r0, sl
 800eff4:	0c02      	lsrs	r2, r0, #16
 800eff6:	0c1b      	lsrs	r3, r3, #16
 800eff8:	fb06 2303 	mla	r3, r6, r3, r2
 800effc:	f8de 2000 	ldr.w	r2, [lr]
 800f000:	b280      	uxth	r0, r0
 800f002:	b292      	uxth	r2, r2
 800f004:	1a12      	subs	r2, r2, r0
 800f006:	445a      	add	r2, fp
 800f008:	f8de 0000 	ldr.w	r0, [lr]
 800f00c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f010:	b29b      	uxth	r3, r3
 800f012:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f016:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f01a:	b292      	uxth	r2, r2
 800f01c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f020:	45e1      	cmp	r9, ip
 800f022:	f84e 2b04 	str.w	r2, [lr], #4
 800f026:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f02a:	d2de      	bcs.n	800efea <quorem+0x42>
 800f02c:	9b00      	ldr	r3, [sp, #0]
 800f02e:	58eb      	ldr	r3, [r5, r3]
 800f030:	b92b      	cbnz	r3, 800f03e <quorem+0x96>
 800f032:	9b01      	ldr	r3, [sp, #4]
 800f034:	3b04      	subs	r3, #4
 800f036:	429d      	cmp	r5, r3
 800f038:	461a      	mov	r2, r3
 800f03a:	d32f      	bcc.n	800f09c <quorem+0xf4>
 800f03c:	613c      	str	r4, [r7, #16]
 800f03e:	4638      	mov	r0, r7
 800f040:	f001 f978 	bl	8010334 <__mcmp>
 800f044:	2800      	cmp	r0, #0
 800f046:	db25      	blt.n	800f094 <quorem+0xec>
 800f048:	4629      	mov	r1, r5
 800f04a:	2000      	movs	r0, #0
 800f04c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f050:	f8d1 c000 	ldr.w	ip, [r1]
 800f054:	fa1f fe82 	uxth.w	lr, r2
 800f058:	fa1f f38c 	uxth.w	r3, ip
 800f05c:	eba3 030e 	sub.w	r3, r3, lr
 800f060:	4403      	add	r3, r0
 800f062:	0c12      	lsrs	r2, r2, #16
 800f064:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f068:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f072:	45c1      	cmp	r9, r8
 800f074:	f841 3b04 	str.w	r3, [r1], #4
 800f078:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f07c:	d2e6      	bcs.n	800f04c <quorem+0xa4>
 800f07e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f086:	b922      	cbnz	r2, 800f092 <quorem+0xea>
 800f088:	3b04      	subs	r3, #4
 800f08a:	429d      	cmp	r5, r3
 800f08c:	461a      	mov	r2, r3
 800f08e:	d30b      	bcc.n	800f0a8 <quorem+0x100>
 800f090:	613c      	str	r4, [r7, #16]
 800f092:	3601      	adds	r6, #1
 800f094:	4630      	mov	r0, r6
 800f096:	b003      	add	sp, #12
 800f098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f09c:	6812      	ldr	r2, [r2, #0]
 800f09e:	3b04      	subs	r3, #4
 800f0a0:	2a00      	cmp	r2, #0
 800f0a2:	d1cb      	bne.n	800f03c <quorem+0x94>
 800f0a4:	3c01      	subs	r4, #1
 800f0a6:	e7c6      	b.n	800f036 <quorem+0x8e>
 800f0a8:	6812      	ldr	r2, [r2, #0]
 800f0aa:	3b04      	subs	r3, #4
 800f0ac:	2a00      	cmp	r2, #0
 800f0ae:	d1ef      	bne.n	800f090 <quorem+0xe8>
 800f0b0:	3c01      	subs	r4, #1
 800f0b2:	e7ea      	b.n	800f08a <quorem+0xe2>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	e7ee      	b.n	800f096 <quorem+0xee>

0800f0b8 <_dtoa_r>:
 800f0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0bc:	69c7      	ldr	r7, [r0, #28]
 800f0be:	b099      	sub	sp, #100	@ 0x64
 800f0c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f0c4:	ec55 4b10 	vmov	r4, r5, d0
 800f0c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f0ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0cc:	4683      	mov	fp, r0
 800f0ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800f0d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0d2:	b97f      	cbnz	r7, 800f0f4 <_dtoa_r+0x3c>
 800f0d4:	2010      	movs	r0, #16
 800f0d6:	f000 fdfd 	bl	800fcd4 <malloc>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800f0e0:	b920      	cbnz	r0, 800f0ec <_dtoa_r+0x34>
 800f0e2:	4ba7      	ldr	r3, [pc, #668]	@ (800f380 <_dtoa_r+0x2c8>)
 800f0e4:	21ef      	movs	r1, #239	@ 0xef
 800f0e6:	48a7      	ldr	r0, [pc, #668]	@ (800f384 <_dtoa_r+0x2cc>)
 800f0e8:	f001 fe30 	bl	8010d4c <__assert_func>
 800f0ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f0f0:	6007      	str	r7, [r0, #0]
 800f0f2:	60c7      	str	r7, [r0, #12]
 800f0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0f8:	6819      	ldr	r1, [r3, #0]
 800f0fa:	b159      	cbz	r1, 800f114 <_dtoa_r+0x5c>
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	604a      	str	r2, [r1, #4]
 800f100:	2301      	movs	r3, #1
 800f102:	4093      	lsls	r3, r2
 800f104:	608b      	str	r3, [r1, #8]
 800f106:	4658      	mov	r0, fp
 800f108:	f000 feda 	bl	800fec0 <_Bfree>
 800f10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f110:	2200      	movs	r2, #0
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	1e2b      	subs	r3, r5, #0
 800f116:	bfb9      	ittee	lt
 800f118:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f11c:	9303      	strlt	r3, [sp, #12]
 800f11e:	2300      	movge	r3, #0
 800f120:	6033      	strge	r3, [r6, #0]
 800f122:	9f03      	ldr	r7, [sp, #12]
 800f124:	4b98      	ldr	r3, [pc, #608]	@ (800f388 <_dtoa_r+0x2d0>)
 800f126:	bfbc      	itt	lt
 800f128:	2201      	movlt	r2, #1
 800f12a:	6032      	strlt	r2, [r6, #0]
 800f12c:	43bb      	bics	r3, r7
 800f12e:	d112      	bne.n	800f156 <_dtoa_r+0x9e>
 800f130:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f132:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f136:	6013      	str	r3, [r2, #0]
 800f138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f13c:	4323      	orrs	r3, r4
 800f13e:	f000 854d 	beq.w	800fbdc <_dtoa_r+0xb24>
 800f142:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f144:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f39c <_dtoa_r+0x2e4>
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 854f 	beq.w	800fbec <_dtoa_r+0xb34>
 800f14e:	f10a 0303 	add.w	r3, sl, #3
 800f152:	f000 bd49 	b.w	800fbe8 <_dtoa_r+0xb30>
 800f156:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f15a:	2200      	movs	r2, #0
 800f15c:	ec51 0b17 	vmov	r0, r1, d7
 800f160:	2300      	movs	r3, #0
 800f162:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f166:	f7f1 fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800f16a:	4680      	mov	r8, r0
 800f16c:	b158      	cbz	r0, 800f186 <_dtoa_r+0xce>
 800f16e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f170:	2301      	movs	r3, #1
 800f172:	6013      	str	r3, [r2, #0]
 800f174:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f176:	b113      	cbz	r3, 800f17e <_dtoa_r+0xc6>
 800f178:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f17a:	4b84      	ldr	r3, [pc, #528]	@ (800f38c <_dtoa_r+0x2d4>)
 800f17c:	6013      	str	r3, [r2, #0]
 800f17e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f3a0 <_dtoa_r+0x2e8>
 800f182:	f000 bd33 	b.w	800fbec <_dtoa_r+0xb34>
 800f186:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f18a:	aa16      	add	r2, sp, #88	@ 0x58
 800f18c:	a917      	add	r1, sp, #92	@ 0x5c
 800f18e:	4658      	mov	r0, fp
 800f190:	f001 f980 	bl	8010494 <__d2b>
 800f194:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f198:	4681      	mov	r9, r0
 800f19a:	2e00      	cmp	r6, #0
 800f19c:	d077      	beq.n	800f28e <_dtoa_r+0x1d6>
 800f19e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f1a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f1b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f1b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	4b74      	ldr	r3, [pc, #464]	@ (800f390 <_dtoa_r+0x2d8>)
 800f1be:	f7f1 f863 	bl	8000288 <__aeabi_dsub>
 800f1c2:	a369      	add	r3, pc, #420	@ (adr r3, 800f368 <_dtoa_r+0x2b0>)
 800f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c8:	f7f1 fa16 	bl	80005f8 <__aeabi_dmul>
 800f1cc:	a368      	add	r3, pc, #416	@ (adr r3, 800f370 <_dtoa_r+0x2b8>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	f7f1 f85b 	bl	800028c <__adddf3>
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4630      	mov	r0, r6
 800f1da:	460d      	mov	r5, r1
 800f1dc:	f7f1 f9a2 	bl	8000524 <__aeabi_i2d>
 800f1e0:	a365      	add	r3, pc, #404	@ (adr r3, 800f378 <_dtoa_r+0x2c0>)
 800f1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e6:	f7f1 fa07 	bl	80005f8 <__aeabi_dmul>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	f7f1 f84b 	bl	800028c <__adddf3>
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	460d      	mov	r5, r1
 800f1fa:	f7f1 fcad 	bl	8000b58 <__aeabi_d2iz>
 800f1fe:	2200      	movs	r2, #0
 800f200:	4607      	mov	r7, r0
 800f202:	2300      	movs	r3, #0
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 fc68 	bl	8000adc <__aeabi_dcmplt>
 800f20c:	b140      	cbz	r0, 800f220 <_dtoa_r+0x168>
 800f20e:	4638      	mov	r0, r7
 800f210:	f7f1 f988 	bl	8000524 <__aeabi_i2d>
 800f214:	4622      	mov	r2, r4
 800f216:	462b      	mov	r3, r5
 800f218:	f7f1 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800f21c:	b900      	cbnz	r0, 800f220 <_dtoa_r+0x168>
 800f21e:	3f01      	subs	r7, #1
 800f220:	2f16      	cmp	r7, #22
 800f222:	d851      	bhi.n	800f2c8 <_dtoa_r+0x210>
 800f224:	4b5b      	ldr	r3, [pc, #364]	@ (800f394 <_dtoa_r+0x2dc>)
 800f226:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f232:	f7f1 fc53 	bl	8000adc <__aeabi_dcmplt>
 800f236:	2800      	cmp	r0, #0
 800f238:	d048      	beq.n	800f2cc <_dtoa_r+0x214>
 800f23a:	3f01      	subs	r7, #1
 800f23c:	2300      	movs	r3, #0
 800f23e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f240:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f242:	1b9b      	subs	r3, r3, r6
 800f244:	1e5a      	subs	r2, r3, #1
 800f246:	bf44      	itt	mi
 800f248:	f1c3 0801 	rsbmi	r8, r3, #1
 800f24c:	2300      	movmi	r3, #0
 800f24e:	9208      	str	r2, [sp, #32]
 800f250:	bf54      	ite	pl
 800f252:	f04f 0800 	movpl.w	r8, #0
 800f256:	9308      	strmi	r3, [sp, #32]
 800f258:	2f00      	cmp	r7, #0
 800f25a:	db39      	blt.n	800f2d0 <_dtoa_r+0x218>
 800f25c:	9b08      	ldr	r3, [sp, #32]
 800f25e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f260:	443b      	add	r3, r7
 800f262:	9308      	str	r3, [sp, #32]
 800f264:	2300      	movs	r3, #0
 800f266:	930a      	str	r3, [sp, #40]	@ 0x28
 800f268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f26a:	2b09      	cmp	r3, #9
 800f26c:	d864      	bhi.n	800f338 <_dtoa_r+0x280>
 800f26e:	2b05      	cmp	r3, #5
 800f270:	bfc4      	itt	gt
 800f272:	3b04      	subgt	r3, #4
 800f274:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f278:	f1a3 0302 	sub.w	r3, r3, #2
 800f27c:	bfcc      	ite	gt
 800f27e:	2400      	movgt	r4, #0
 800f280:	2401      	movle	r4, #1
 800f282:	2b03      	cmp	r3, #3
 800f284:	d863      	bhi.n	800f34e <_dtoa_r+0x296>
 800f286:	e8df f003 	tbb	[pc, r3]
 800f28a:	372a      	.short	0x372a
 800f28c:	5535      	.short	0x5535
 800f28e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f292:	441e      	add	r6, r3
 800f294:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f298:	2b20      	cmp	r3, #32
 800f29a:	bfc1      	itttt	gt
 800f29c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f2a0:	409f      	lslgt	r7, r3
 800f2a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f2a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f2aa:	bfd6      	itet	le
 800f2ac:	f1c3 0320 	rsble	r3, r3, #32
 800f2b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f2b4:	fa04 f003 	lslle.w	r0, r4, r3
 800f2b8:	f7f1 f924 	bl	8000504 <__aeabi_ui2d>
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f2c2:	3e01      	subs	r6, #1
 800f2c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f2c6:	e777      	b.n	800f1b8 <_dtoa_r+0x100>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e7b8      	b.n	800f23e <_dtoa_r+0x186>
 800f2cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800f2ce:	e7b7      	b.n	800f240 <_dtoa_r+0x188>
 800f2d0:	427b      	negs	r3, r7
 800f2d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	eba8 0807 	sub.w	r8, r8, r7
 800f2da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f2dc:	e7c4      	b.n	800f268 <_dtoa_r+0x1b0>
 800f2de:	2300      	movs	r3, #0
 800f2e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	dc35      	bgt.n	800f354 <_dtoa_r+0x29c>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	9300      	str	r3, [sp, #0]
 800f2ec:	9307      	str	r3, [sp, #28]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f2f2:	e00b      	b.n	800f30c <_dtoa_r+0x254>
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e7f3      	b.n	800f2e0 <_dtoa_r+0x228>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2fe:	18fb      	adds	r3, r7, r3
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	2b01      	cmp	r3, #1
 800f306:	9307      	str	r3, [sp, #28]
 800f308:	bfb8      	it	lt
 800f30a:	2301      	movlt	r3, #1
 800f30c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f310:	2100      	movs	r1, #0
 800f312:	2204      	movs	r2, #4
 800f314:	f102 0514 	add.w	r5, r2, #20
 800f318:	429d      	cmp	r5, r3
 800f31a:	d91f      	bls.n	800f35c <_dtoa_r+0x2a4>
 800f31c:	6041      	str	r1, [r0, #4]
 800f31e:	4658      	mov	r0, fp
 800f320:	f000 fd8e 	bl	800fe40 <_Balloc>
 800f324:	4682      	mov	sl, r0
 800f326:	2800      	cmp	r0, #0
 800f328:	d13c      	bne.n	800f3a4 <_dtoa_r+0x2ec>
 800f32a:	4b1b      	ldr	r3, [pc, #108]	@ (800f398 <_dtoa_r+0x2e0>)
 800f32c:	4602      	mov	r2, r0
 800f32e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f332:	e6d8      	b.n	800f0e6 <_dtoa_r+0x2e>
 800f334:	2301      	movs	r3, #1
 800f336:	e7e0      	b.n	800f2fa <_dtoa_r+0x242>
 800f338:	2401      	movs	r4, #1
 800f33a:	2300      	movs	r3, #0
 800f33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f33e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f340:	f04f 33ff 	mov.w	r3, #4294967295
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	9307      	str	r3, [sp, #28]
 800f348:	2200      	movs	r2, #0
 800f34a:	2312      	movs	r3, #18
 800f34c:	e7d0      	b.n	800f2f0 <_dtoa_r+0x238>
 800f34e:	2301      	movs	r3, #1
 800f350:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f352:	e7f5      	b.n	800f340 <_dtoa_r+0x288>
 800f354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	9307      	str	r3, [sp, #28]
 800f35a:	e7d7      	b.n	800f30c <_dtoa_r+0x254>
 800f35c:	3101      	adds	r1, #1
 800f35e:	0052      	lsls	r2, r2, #1
 800f360:	e7d8      	b.n	800f314 <_dtoa_r+0x25c>
 800f362:	bf00      	nop
 800f364:	f3af 8000 	nop.w
 800f368:	636f4361 	.word	0x636f4361
 800f36c:	3fd287a7 	.word	0x3fd287a7
 800f370:	8b60c8b3 	.word	0x8b60c8b3
 800f374:	3fc68a28 	.word	0x3fc68a28
 800f378:	509f79fb 	.word	0x509f79fb
 800f37c:	3fd34413 	.word	0x3fd34413
 800f380:	08012aea 	.word	0x08012aea
 800f384:	08012b01 	.word	0x08012b01
 800f388:	7ff00000 	.word	0x7ff00000
 800f38c:	08012aba 	.word	0x08012aba
 800f390:	3ff80000 	.word	0x3ff80000
 800f394:	08012bf8 	.word	0x08012bf8
 800f398:	08012b59 	.word	0x08012b59
 800f39c:	08012ae6 	.word	0x08012ae6
 800f3a0:	08012ab9 	.word	0x08012ab9
 800f3a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f3a8:	6018      	str	r0, [r3, #0]
 800f3aa:	9b07      	ldr	r3, [sp, #28]
 800f3ac:	2b0e      	cmp	r3, #14
 800f3ae:	f200 80a4 	bhi.w	800f4fa <_dtoa_r+0x442>
 800f3b2:	2c00      	cmp	r4, #0
 800f3b4:	f000 80a1 	beq.w	800f4fa <_dtoa_r+0x442>
 800f3b8:	2f00      	cmp	r7, #0
 800f3ba:	dd33      	ble.n	800f424 <_dtoa_r+0x36c>
 800f3bc:	4bad      	ldr	r3, [pc, #692]	@ (800f674 <_dtoa_r+0x5bc>)
 800f3be:	f007 020f 	and.w	r2, r7, #15
 800f3c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3c6:	ed93 7b00 	vldr	d7, [r3]
 800f3ca:	05f8      	lsls	r0, r7, #23
 800f3cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f3d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f3d4:	d516      	bpl.n	800f404 <_dtoa_r+0x34c>
 800f3d6:	4ba8      	ldr	r3, [pc, #672]	@ (800f678 <_dtoa_r+0x5c0>)
 800f3d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3e0:	f7f1 fa34 	bl	800084c <__aeabi_ddiv>
 800f3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3e8:	f004 040f 	and.w	r4, r4, #15
 800f3ec:	2603      	movs	r6, #3
 800f3ee:	4da2      	ldr	r5, [pc, #648]	@ (800f678 <_dtoa_r+0x5c0>)
 800f3f0:	b954      	cbnz	r4, 800f408 <_dtoa_r+0x350>
 800f3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3fa:	f7f1 fa27 	bl	800084c <__aeabi_ddiv>
 800f3fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f402:	e028      	b.n	800f456 <_dtoa_r+0x39e>
 800f404:	2602      	movs	r6, #2
 800f406:	e7f2      	b.n	800f3ee <_dtoa_r+0x336>
 800f408:	07e1      	lsls	r1, r4, #31
 800f40a:	d508      	bpl.n	800f41e <_dtoa_r+0x366>
 800f40c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f410:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f414:	f7f1 f8f0 	bl	80005f8 <__aeabi_dmul>
 800f418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f41c:	3601      	adds	r6, #1
 800f41e:	1064      	asrs	r4, r4, #1
 800f420:	3508      	adds	r5, #8
 800f422:	e7e5      	b.n	800f3f0 <_dtoa_r+0x338>
 800f424:	f000 80d2 	beq.w	800f5cc <_dtoa_r+0x514>
 800f428:	427c      	negs	r4, r7
 800f42a:	4b92      	ldr	r3, [pc, #584]	@ (800f674 <_dtoa_r+0x5bc>)
 800f42c:	4d92      	ldr	r5, [pc, #584]	@ (800f678 <_dtoa_r+0x5c0>)
 800f42e:	f004 020f 	and.w	r2, r4, #15
 800f432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f43e:	f7f1 f8db 	bl	80005f8 <__aeabi_dmul>
 800f442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f446:	1124      	asrs	r4, r4, #4
 800f448:	2300      	movs	r3, #0
 800f44a:	2602      	movs	r6, #2
 800f44c:	2c00      	cmp	r4, #0
 800f44e:	f040 80b2 	bne.w	800f5b6 <_dtoa_r+0x4fe>
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1d3      	bne.n	800f3fe <_dtoa_r+0x346>
 800f456:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f458:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 80b7 	beq.w	800f5d0 <_dtoa_r+0x518>
 800f462:	4b86      	ldr	r3, [pc, #536]	@ (800f67c <_dtoa_r+0x5c4>)
 800f464:	2200      	movs	r2, #0
 800f466:	4620      	mov	r0, r4
 800f468:	4629      	mov	r1, r5
 800f46a:	f7f1 fb37 	bl	8000adc <__aeabi_dcmplt>
 800f46e:	2800      	cmp	r0, #0
 800f470:	f000 80ae 	beq.w	800f5d0 <_dtoa_r+0x518>
 800f474:	9b07      	ldr	r3, [sp, #28]
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 80aa 	beq.w	800f5d0 <_dtoa_r+0x518>
 800f47c:	9b00      	ldr	r3, [sp, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	dd37      	ble.n	800f4f2 <_dtoa_r+0x43a>
 800f482:	1e7b      	subs	r3, r7, #1
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	4620      	mov	r0, r4
 800f488:	4b7d      	ldr	r3, [pc, #500]	@ (800f680 <_dtoa_r+0x5c8>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	4629      	mov	r1, r5
 800f48e:	f7f1 f8b3 	bl	80005f8 <__aeabi_dmul>
 800f492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f496:	9c00      	ldr	r4, [sp, #0]
 800f498:	3601      	adds	r6, #1
 800f49a:	4630      	mov	r0, r6
 800f49c:	f7f1 f842 	bl	8000524 <__aeabi_i2d>
 800f4a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4a4:	f7f1 f8a8 	bl	80005f8 <__aeabi_dmul>
 800f4a8:	4b76      	ldr	r3, [pc, #472]	@ (800f684 <_dtoa_r+0x5cc>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f7f0 feee 	bl	800028c <__adddf3>
 800f4b0:	4605      	mov	r5, r0
 800f4b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f4b6:	2c00      	cmp	r4, #0
 800f4b8:	f040 808d 	bne.w	800f5d6 <_dtoa_r+0x51e>
 800f4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4c0:	4b71      	ldr	r3, [pc, #452]	@ (800f688 <_dtoa_r+0x5d0>)
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f7f0 fee0 	bl	8000288 <__aeabi_dsub>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4d0:	462a      	mov	r2, r5
 800f4d2:	4633      	mov	r3, r6
 800f4d4:	f7f1 fb20 	bl	8000b18 <__aeabi_dcmpgt>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	f040 828b 	bne.w	800f9f4 <_dtoa_r+0x93c>
 800f4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4e2:	462a      	mov	r2, r5
 800f4e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f4e8:	f7f1 faf8 	bl	8000adc <__aeabi_dcmplt>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	f040 8128 	bne.w	800f742 <_dtoa_r+0x68a>
 800f4f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f4f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f4fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f2c0 815a 	blt.w	800f7b6 <_dtoa_r+0x6fe>
 800f502:	2f0e      	cmp	r7, #14
 800f504:	f300 8157 	bgt.w	800f7b6 <_dtoa_r+0x6fe>
 800f508:	4b5a      	ldr	r3, [pc, #360]	@ (800f674 <_dtoa_r+0x5bc>)
 800f50a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f50e:	ed93 7b00 	vldr	d7, [r3]
 800f512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f514:	2b00      	cmp	r3, #0
 800f516:	ed8d 7b00 	vstr	d7, [sp]
 800f51a:	da03      	bge.n	800f524 <_dtoa_r+0x46c>
 800f51c:	9b07      	ldr	r3, [sp, #28]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f340 8101 	ble.w	800f726 <_dtoa_r+0x66e>
 800f524:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f528:	4656      	mov	r6, sl
 800f52a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f52e:	4620      	mov	r0, r4
 800f530:	4629      	mov	r1, r5
 800f532:	f7f1 f98b 	bl	800084c <__aeabi_ddiv>
 800f536:	f7f1 fb0f 	bl	8000b58 <__aeabi_d2iz>
 800f53a:	4680      	mov	r8, r0
 800f53c:	f7f0 fff2 	bl	8000524 <__aeabi_i2d>
 800f540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f544:	f7f1 f858 	bl	80005f8 <__aeabi_dmul>
 800f548:	4602      	mov	r2, r0
 800f54a:	460b      	mov	r3, r1
 800f54c:	4620      	mov	r0, r4
 800f54e:	4629      	mov	r1, r5
 800f550:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f554:	f7f0 fe98 	bl	8000288 <__aeabi_dsub>
 800f558:	f806 4b01 	strb.w	r4, [r6], #1
 800f55c:	9d07      	ldr	r5, [sp, #28]
 800f55e:	eba6 040a 	sub.w	r4, r6, sl
 800f562:	42a5      	cmp	r5, r4
 800f564:	4602      	mov	r2, r0
 800f566:	460b      	mov	r3, r1
 800f568:	f040 8117 	bne.w	800f79a <_dtoa_r+0x6e2>
 800f56c:	f7f0 fe8e 	bl	800028c <__adddf3>
 800f570:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	f7f1 face 	bl	8000b18 <__aeabi_dcmpgt>
 800f57c:	2800      	cmp	r0, #0
 800f57e:	f040 80f9 	bne.w	800f774 <_dtoa_r+0x6bc>
 800f582:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f1 fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f58e:	b118      	cbz	r0, 800f598 <_dtoa_r+0x4e0>
 800f590:	f018 0f01 	tst.w	r8, #1
 800f594:	f040 80ee 	bne.w	800f774 <_dtoa_r+0x6bc>
 800f598:	4649      	mov	r1, r9
 800f59a:	4658      	mov	r0, fp
 800f59c:	f000 fc90 	bl	800fec0 <_Bfree>
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	7033      	strb	r3, [r6, #0]
 800f5a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5a6:	3701      	adds	r7, #1
 800f5a8:	601f      	str	r7, [r3, #0]
 800f5aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f000 831d 	beq.w	800fbec <_dtoa_r+0xb34>
 800f5b2:	601e      	str	r6, [r3, #0]
 800f5b4:	e31a      	b.n	800fbec <_dtoa_r+0xb34>
 800f5b6:	07e2      	lsls	r2, r4, #31
 800f5b8:	d505      	bpl.n	800f5c6 <_dtoa_r+0x50e>
 800f5ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5be:	f7f1 f81b 	bl	80005f8 <__aeabi_dmul>
 800f5c2:	3601      	adds	r6, #1
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	1064      	asrs	r4, r4, #1
 800f5c8:	3508      	adds	r5, #8
 800f5ca:	e73f      	b.n	800f44c <_dtoa_r+0x394>
 800f5cc:	2602      	movs	r6, #2
 800f5ce:	e742      	b.n	800f456 <_dtoa_r+0x39e>
 800f5d0:	9c07      	ldr	r4, [sp, #28]
 800f5d2:	9704      	str	r7, [sp, #16]
 800f5d4:	e761      	b.n	800f49a <_dtoa_r+0x3e2>
 800f5d6:	4b27      	ldr	r3, [pc, #156]	@ (800f674 <_dtoa_r+0x5bc>)
 800f5d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5e2:	4454      	add	r4, sl
 800f5e4:	2900      	cmp	r1, #0
 800f5e6:	d053      	beq.n	800f690 <_dtoa_r+0x5d8>
 800f5e8:	4928      	ldr	r1, [pc, #160]	@ (800f68c <_dtoa_r+0x5d4>)
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	f7f1 f92e 	bl	800084c <__aeabi_ddiv>
 800f5f0:	4633      	mov	r3, r6
 800f5f2:	462a      	mov	r2, r5
 800f5f4:	f7f0 fe48 	bl	8000288 <__aeabi_dsub>
 800f5f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5fc:	4656      	mov	r6, sl
 800f5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f602:	f7f1 faa9 	bl	8000b58 <__aeabi_d2iz>
 800f606:	4605      	mov	r5, r0
 800f608:	f7f0 ff8c 	bl	8000524 <__aeabi_i2d>
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f614:	f7f0 fe38 	bl	8000288 <__aeabi_dsub>
 800f618:	3530      	adds	r5, #48	@ 0x30
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f622:	f806 5b01 	strb.w	r5, [r6], #1
 800f626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f62a:	f7f1 fa57 	bl	8000adc <__aeabi_dcmplt>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d171      	bne.n	800f716 <_dtoa_r+0x65e>
 800f632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f636:	4911      	ldr	r1, [pc, #68]	@ (800f67c <_dtoa_r+0x5c4>)
 800f638:	2000      	movs	r0, #0
 800f63a:	f7f0 fe25 	bl	8000288 <__aeabi_dsub>
 800f63e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f642:	f7f1 fa4b 	bl	8000adc <__aeabi_dcmplt>
 800f646:	2800      	cmp	r0, #0
 800f648:	f040 8095 	bne.w	800f776 <_dtoa_r+0x6be>
 800f64c:	42a6      	cmp	r6, r4
 800f64e:	f43f af50 	beq.w	800f4f2 <_dtoa_r+0x43a>
 800f652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f656:	4b0a      	ldr	r3, [pc, #40]	@ (800f680 <_dtoa_r+0x5c8>)
 800f658:	2200      	movs	r2, #0
 800f65a:	f7f0 ffcd 	bl	80005f8 <__aeabi_dmul>
 800f65e:	4b08      	ldr	r3, [pc, #32]	@ (800f680 <_dtoa_r+0x5c8>)
 800f660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f664:	2200      	movs	r2, #0
 800f666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f66a:	f7f0 ffc5 	bl	80005f8 <__aeabi_dmul>
 800f66e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f672:	e7c4      	b.n	800f5fe <_dtoa_r+0x546>
 800f674:	08012bf8 	.word	0x08012bf8
 800f678:	08012bd0 	.word	0x08012bd0
 800f67c:	3ff00000 	.word	0x3ff00000
 800f680:	40240000 	.word	0x40240000
 800f684:	401c0000 	.word	0x401c0000
 800f688:	40140000 	.word	0x40140000
 800f68c:	3fe00000 	.word	0x3fe00000
 800f690:	4631      	mov	r1, r6
 800f692:	4628      	mov	r0, r5
 800f694:	f7f0 ffb0 	bl	80005f8 <__aeabi_dmul>
 800f698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f69c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f69e:	4656      	mov	r6, sl
 800f6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a4:	f7f1 fa58 	bl	8000b58 <__aeabi_d2iz>
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	f7f0 ff3b 	bl	8000524 <__aeabi_i2d>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6b6:	f7f0 fde7 	bl	8000288 <__aeabi_dsub>
 800f6ba:	3530      	adds	r5, #48	@ 0x30
 800f6bc:	f806 5b01 	strb.w	r5, [r6], #1
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	42a6      	cmp	r6, r4
 800f6c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6ca:	f04f 0200 	mov.w	r2, #0
 800f6ce:	d124      	bne.n	800f71a <_dtoa_r+0x662>
 800f6d0:	4bac      	ldr	r3, [pc, #688]	@ (800f984 <_dtoa_r+0x8cc>)
 800f6d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f6d6:	f7f0 fdd9 	bl	800028c <__adddf3>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6e2:	f7f1 fa19 	bl	8000b18 <__aeabi_dcmpgt>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d145      	bne.n	800f776 <_dtoa_r+0x6be>
 800f6ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f6ee:	49a5      	ldr	r1, [pc, #660]	@ (800f984 <_dtoa_r+0x8cc>)
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	f7f0 fdc9 	bl	8000288 <__aeabi_dsub>
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6fe:	f7f1 f9ed 	bl	8000adc <__aeabi_dcmplt>
 800f702:	2800      	cmp	r0, #0
 800f704:	f43f aef5 	beq.w	800f4f2 <_dtoa_r+0x43a>
 800f708:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f70a:	1e73      	subs	r3, r6, #1
 800f70c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f70e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f712:	2b30      	cmp	r3, #48	@ 0x30
 800f714:	d0f8      	beq.n	800f708 <_dtoa_r+0x650>
 800f716:	9f04      	ldr	r7, [sp, #16]
 800f718:	e73e      	b.n	800f598 <_dtoa_r+0x4e0>
 800f71a:	4b9b      	ldr	r3, [pc, #620]	@ (800f988 <_dtoa_r+0x8d0>)
 800f71c:	f7f0 ff6c 	bl	80005f8 <__aeabi_dmul>
 800f720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f724:	e7bc      	b.n	800f6a0 <_dtoa_r+0x5e8>
 800f726:	d10c      	bne.n	800f742 <_dtoa_r+0x68a>
 800f728:	4b98      	ldr	r3, [pc, #608]	@ (800f98c <_dtoa_r+0x8d4>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f730:	f7f0 ff62 	bl	80005f8 <__aeabi_dmul>
 800f734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f738:	f7f1 f9e4 	bl	8000b04 <__aeabi_dcmpge>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	f000 8157 	beq.w	800f9f0 <_dtoa_r+0x938>
 800f742:	2400      	movs	r4, #0
 800f744:	4625      	mov	r5, r4
 800f746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f748:	43db      	mvns	r3, r3
 800f74a:	9304      	str	r3, [sp, #16]
 800f74c:	4656      	mov	r6, sl
 800f74e:	2700      	movs	r7, #0
 800f750:	4621      	mov	r1, r4
 800f752:	4658      	mov	r0, fp
 800f754:	f000 fbb4 	bl	800fec0 <_Bfree>
 800f758:	2d00      	cmp	r5, #0
 800f75a:	d0dc      	beq.n	800f716 <_dtoa_r+0x65e>
 800f75c:	b12f      	cbz	r7, 800f76a <_dtoa_r+0x6b2>
 800f75e:	42af      	cmp	r7, r5
 800f760:	d003      	beq.n	800f76a <_dtoa_r+0x6b2>
 800f762:	4639      	mov	r1, r7
 800f764:	4658      	mov	r0, fp
 800f766:	f000 fbab 	bl	800fec0 <_Bfree>
 800f76a:	4629      	mov	r1, r5
 800f76c:	4658      	mov	r0, fp
 800f76e:	f000 fba7 	bl	800fec0 <_Bfree>
 800f772:	e7d0      	b.n	800f716 <_dtoa_r+0x65e>
 800f774:	9704      	str	r7, [sp, #16]
 800f776:	4633      	mov	r3, r6
 800f778:	461e      	mov	r6, r3
 800f77a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f77e:	2a39      	cmp	r2, #57	@ 0x39
 800f780:	d107      	bne.n	800f792 <_dtoa_r+0x6da>
 800f782:	459a      	cmp	sl, r3
 800f784:	d1f8      	bne.n	800f778 <_dtoa_r+0x6c0>
 800f786:	9a04      	ldr	r2, [sp, #16]
 800f788:	3201      	adds	r2, #1
 800f78a:	9204      	str	r2, [sp, #16]
 800f78c:	2230      	movs	r2, #48	@ 0x30
 800f78e:	f88a 2000 	strb.w	r2, [sl]
 800f792:	781a      	ldrb	r2, [r3, #0]
 800f794:	3201      	adds	r2, #1
 800f796:	701a      	strb	r2, [r3, #0]
 800f798:	e7bd      	b.n	800f716 <_dtoa_r+0x65e>
 800f79a:	4b7b      	ldr	r3, [pc, #492]	@ (800f988 <_dtoa_r+0x8d0>)
 800f79c:	2200      	movs	r2, #0
 800f79e:	f7f0 ff2b 	bl	80005f8 <__aeabi_dmul>
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	460d      	mov	r5, r1
 800f7aa:	f7f1 f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	f43f aebb 	beq.w	800f52a <_dtoa_r+0x472>
 800f7b4:	e6f0      	b.n	800f598 <_dtoa_r+0x4e0>
 800f7b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f7b8:	2a00      	cmp	r2, #0
 800f7ba:	f000 80db 	beq.w	800f974 <_dtoa_r+0x8bc>
 800f7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7c0:	2a01      	cmp	r2, #1
 800f7c2:	f300 80bf 	bgt.w	800f944 <_dtoa_r+0x88c>
 800f7c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f7c8:	2a00      	cmp	r2, #0
 800f7ca:	f000 80b7 	beq.w	800f93c <_dtoa_r+0x884>
 800f7ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f7d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f7d4:	4646      	mov	r6, r8
 800f7d6:	9a08      	ldr	r2, [sp, #32]
 800f7d8:	2101      	movs	r1, #1
 800f7da:	441a      	add	r2, r3
 800f7dc:	4658      	mov	r0, fp
 800f7de:	4498      	add	r8, r3
 800f7e0:	9208      	str	r2, [sp, #32]
 800f7e2:	f000 fc21 	bl	8010028 <__i2b>
 800f7e6:	4605      	mov	r5, r0
 800f7e8:	b15e      	cbz	r6, 800f802 <_dtoa_r+0x74a>
 800f7ea:	9b08      	ldr	r3, [sp, #32]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	dd08      	ble.n	800f802 <_dtoa_r+0x74a>
 800f7f0:	42b3      	cmp	r3, r6
 800f7f2:	9a08      	ldr	r2, [sp, #32]
 800f7f4:	bfa8      	it	ge
 800f7f6:	4633      	movge	r3, r6
 800f7f8:	eba8 0803 	sub.w	r8, r8, r3
 800f7fc:	1af6      	subs	r6, r6, r3
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	9308      	str	r3, [sp, #32]
 800f802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f804:	b1f3      	cbz	r3, 800f844 <_dtoa_r+0x78c>
 800f806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f000 80b7 	beq.w	800f97c <_dtoa_r+0x8c4>
 800f80e:	b18c      	cbz	r4, 800f834 <_dtoa_r+0x77c>
 800f810:	4629      	mov	r1, r5
 800f812:	4622      	mov	r2, r4
 800f814:	4658      	mov	r0, fp
 800f816:	f000 fcc7 	bl	80101a8 <__pow5mult>
 800f81a:	464a      	mov	r2, r9
 800f81c:	4601      	mov	r1, r0
 800f81e:	4605      	mov	r5, r0
 800f820:	4658      	mov	r0, fp
 800f822:	f000 fc17 	bl	8010054 <__multiply>
 800f826:	4649      	mov	r1, r9
 800f828:	9004      	str	r0, [sp, #16]
 800f82a:	4658      	mov	r0, fp
 800f82c:	f000 fb48 	bl	800fec0 <_Bfree>
 800f830:	9b04      	ldr	r3, [sp, #16]
 800f832:	4699      	mov	r9, r3
 800f834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f836:	1b1a      	subs	r2, r3, r4
 800f838:	d004      	beq.n	800f844 <_dtoa_r+0x78c>
 800f83a:	4649      	mov	r1, r9
 800f83c:	4658      	mov	r0, fp
 800f83e:	f000 fcb3 	bl	80101a8 <__pow5mult>
 800f842:	4681      	mov	r9, r0
 800f844:	2101      	movs	r1, #1
 800f846:	4658      	mov	r0, fp
 800f848:	f000 fbee 	bl	8010028 <__i2b>
 800f84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f84e:	4604      	mov	r4, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	f000 81cf 	beq.w	800fbf4 <_dtoa_r+0xb3c>
 800f856:	461a      	mov	r2, r3
 800f858:	4601      	mov	r1, r0
 800f85a:	4658      	mov	r0, fp
 800f85c:	f000 fca4 	bl	80101a8 <__pow5mult>
 800f860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f862:	2b01      	cmp	r3, #1
 800f864:	4604      	mov	r4, r0
 800f866:	f300 8095 	bgt.w	800f994 <_dtoa_r+0x8dc>
 800f86a:	9b02      	ldr	r3, [sp, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f040 8087 	bne.w	800f980 <_dtoa_r+0x8c8>
 800f872:	9b03      	ldr	r3, [sp, #12]
 800f874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f040 8089 	bne.w	800f990 <_dtoa_r+0x8d8>
 800f87e:	9b03      	ldr	r3, [sp, #12]
 800f880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f884:	0d1b      	lsrs	r3, r3, #20
 800f886:	051b      	lsls	r3, r3, #20
 800f888:	b12b      	cbz	r3, 800f896 <_dtoa_r+0x7de>
 800f88a:	9b08      	ldr	r3, [sp, #32]
 800f88c:	3301      	adds	r3, #1
 800f88e:	9308      	str	r3, [sp, #32]
 800f890:	f108 0801 	add.w	r8, r8, #1
 800f894:	2301      	movs	r3, #1
 800f896:	930a      	str	r3, [sp, #40]	@ 0x28
 800f898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 81b0 	beq.w	800fc00 <_dtoa_r+0xb48>
 800f8a0:	6923      	ldr	r3, [r4, #16]
 800f8a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8a6:	6918      	ldr	r0, [r3, #16]
 800f8a8:	f000 fb72 	bl	800ff90 <__hi0bits>
 800f8ac:	f1c0 0020 	rsb	r0, r0, #32
 800f8b0:	9b08      	ldr	r3, [sp, #32]
 800f8b2:	4418      	add	r0, r3
 800f8b4:	f010 001f 	ands.w	r0, r0, #31
 800f8b8:	d077      	beq.n	800f9aa <_dtoa_r+0x8f2>
 800f8ba:	f1c0 0320 	rsb	r3, r0, #32
 800f8be:	2b04      	cmp	r3, #4
 800f8c0:	dd6b      	ble.n	800f99a <_dtoa_r+0x8e2>
 800f8c2:	9b08      	ldr	r3, [sp, #32]
 800f8c4:	f1c0 001c 	rsb	r0, r0, #28
 800f8c8:	4403      	add	r3, r0
 800f8ca:	4480      	add	r8, r0
 800f8cc:	4406      	add	r6, r0
 800f8ce:	9308      	str	r3, [sp, #32]
 800f8d0:	f1b8 0f00 	cmp.w	r8, #0
 800f8d4:	dd05      	ble.n	800f8e2 <_dtoa_r+0x82a>
 800f8d6:	4649      	mov	r1, r9
 800f8d8:	4642      	mov	r2, r8
 800f8da:	4658      	mov	r0, fp
 800f8dc:	f000 fcbe 	bl	801025c <__lshift>
 800f8e0:	4681      	mov	r9, r0
 800f8e2:	9b08      	ldr	r3, [sp, #32]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	dd05      	ble.n	800f8f4 <_dtoa_r+0x83c>
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	4658      	mov	r0, fp
 800f8ee:	f000 fcb5 	bl	801025c <__lshift>
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d059      	beq.n	800f9ae <_dtoa_r+0x8f6>
 800f8fa:	4621      	mov	r1, r4
 800f8fc:	4648      	mov	r0, r9
 800f8fe:	f000 fd19 	bl	8010334 <__mcmp>
 800f902:	2800      	cmp	r0, #0
 800f904:	da53      	bge.n	800f9ae <_dtoa_r+0x8f6>
 800f906:	1e7b      	subs	r3, r7, #1
 800f908:	9304      	str	r3, [sp, #16]
 800f90a:	4649      	mov	r1, r9
 800f90c:	2300      	movs	r3, #0
 800f90e:	220a      	movs	r2, #10
 800f910:	4658      	mov	r0, fp
 800f912:	f000 faf7 	bl	800ff04 <__multadd>
 800f916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f918:	4681      	mov	r9, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f000 8172 	beq.w	800fc04 <_dtoa_r+0xb4c>
 800f920:	2300      	movs	r3, #0
 800f922:	4629      	mov	r1, r5
 800f924:	220a      	movs	r2, #10
 800f926:	4658      	mov	r0, fp
 800f928:	f000 faec 	bl	800ff04 <__multadd>
 800f92c:	9b00      	ldr	r3, [sp, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	4605      	mov	r5, r0
 800f932:	dc67      	bgt.n	800fa04 <_dtoa_r+0x94c>
 800f934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f936:	2b02      	cmp	r3, #2
 800f938:	dc41      	bgt.n	800f9be <_dtoa_r+0x906>
 800f93a:	e063      	b.n	800fa04 <_dtoa_r+0x94c>
 800f93c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f93e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f942:	e746      	b.n	800f7d2 <_dtoa_r+0x71a>
 800f944:	9b07      	ldr	r3, [sp, #28]
 800f946:	1e5c      	subs	r4, r3, #1
 800f948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f94a:	42a3      	cmp	r3, r4
 800f94c:	bfbf      	itttt	lt
 800f94e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f950:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f952:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f954:	1ae3      	sublt	r3, r4, r3
 800f956:	bfb4      	ite	lt
 800f958:	18d2      	addlt	r2, r2, r3
 800f95a:	1b1c      	subge	r4, r3, r4
 800f95c:	9b07      	ldr	r3, [sp, #28]
 800f95e:	bfbc      	itt	lt
 800f960:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f962:	2400      	movlt	r4, #0
 800f964:	2b00      	cmp	r3, #0
 800f966:	bfb5      	itete	lt
 800f968:	eba8 0603 	sublt.w	r6, r8, r3
 800f96c:	9b07      	ldrge	r3, [sp, #28]
 800f96e:	2300      	movlt	r3, #0
 800f970:	4646      	movge	r6, r8
 800f972:	e730      	b.n	800f7d6 <_dtoa_r+0x71e>
 800f974:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f976:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f978:	4646      	mov	r6, r8
 800f97a:	e735      	b.n	800f7e8 <_dtoa_r+0x730>
 800f97c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f97e:	e75c      	b.n	800f83a <_dtoa_r+0x782>
 800f980:	2300      	movs	r3, #0
 800f982:	e788      	b.n	800f896 <_dtoa_r+0x7de>
 800f984:	3fe00000 	.word	0x3fe00000
 800f988:	40240000 	.word	0x40240000
 800f98c:	40140000 	.word	0x40140000
 800f990:	9b02      	ldr	r3, [sp, #8]
 800f992:	e780      	b.n	800f896 <_dtoa_r+0x7de>
 800f994:	2300      	movs	r3, #0
 800f996:	930a      	str	r3, [sp, #40]	@ 0x28
 800f998:	e782      	b.n	800f8a0 <_dtoa_r+0x7e8>
 800f99a:	d099      	beq.n	800f8d0 <_dtoa_r+0x818>
 800f99c:	9a08      	ldr	r2, [sp, #32]
 800f99e:	331c      	adds	r3, #28
 800f9a0:	441a      	add	r2, r3
 800f9a2:	4498      	add	r8, r3
 800f9a4:	441e      	add	r6, r3
 800f9a6:	9208      	str	r2, [sp, #32]
 800f9a8:	e792      	b.n	800f8d0 <_dtoa_r+0x818>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	e7f6      	b.n	800f99c <_dtoa_r+0x8e4>
 800f9ae:	9b07      	ldr	r3, [sp, #28]
 800f9b0:	9704      	str	r7, [sp, #16]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	dc20      	bgt.n	800f9f8 <_dtoa_r+0x940>
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	dd1e      	ble.n	800f9fc <_dtoa_r+0x944>
 800f9be:	9b00      	ldr	r3, [sp, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f47f aec0 	bne.w	800f746 <_dtoa_r+0x68e>
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	2205      	movs	r2, #5
 800f9ca:	4658      	mov	r0, fp
 800f9cc:	f000 fa9a 	bl	800ff04 <__multadd>
 800f9d0:	4601      	mov	r1, r0
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	4648      	mov	r0, r9
 800f9d6:	f000 fcad 	bl	8010334 <__mcmp>
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	f77f aeb3 	ble.w	800f746 <_dtoa_r+0x68e>
 800f9e0:	4656      	mov	r6, sl
 800f9e2:	2331      	movs	r3, #49	@ 0x31
 800f9e4:	f806 3b01 	strb.w	r3, [r6], #1
 800f9e8:	9b04      	ldr	r3, [sp, #16]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	9304      	str	r3, [sp, #16]
 800f9ee:	e6ae      	b.n	800f74e <_dtoa_r+0x696>
 800f9f0:	9c07      	ldr	r4, [sp, #28]
 800f9f2:	9704      	str	r7, [sp, #16]
 800f9f4:	4625      	mov	r5, r4
 800f9f6:	e7f3      	b.n	800f9e0 <_dtoa_r+0x928>
 800f9f8:	9b07      	ldr	r3, [sp, #28]
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	f000 8104 	beq.w	800fc0c <_dtoa_r+0xb54>
 800fa04:	2e00      	cmp	r6, #0
 800fa06:	dd05      	ble.n	800fa14 <_dtoa_r+0x95c>
 800fa08:	4629      	mov	r1, r5
 800fa0a:	4632      	mov	r2, r6
 800fa0c:	4658      	mov	r0, fp
 800fa0e:	f000 fc25 	bl	801025c <__lshift>
 800fa12:	4605      	mov	r5, r0
 800fa14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d05a      	beq.n	800fad0 <_dtoa_r+0xa18>
 800fa1a:	6869      	ldr	r1, [r5, #4]
 800fa1c:	4658      	mov	r0, fp
 800fa1e:	f000 fa0f 	bl	800fe40 <_Balloc>
 800fa22:	4606      	mov	r6, r0
 800fa24:	b928      	cbnz	r0, 800fa32 <_dtoa_r+0x97a>
 800fa26:	4b84      	ldr	r3, [pc, #528]	@ (800fc38 <_dtoa_r+0xb80>)
 800fa28:	4602      	mov	r2, r0
 800fa2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fa2e:	f7ff bb5a 	b.w	800f0e6 <_dtoa_r+0x2e>
 800fa32:	692a      	ldr	r2, [r5, #16]
 800fa34:	3202      	adds	r2, #2
 800fa36:	0092      	lsls	r2, r2, #2
 800fa38:	f105 010c 	add.w	r1, r5, #12
 800fa3c:	300c      	adds	r0, #12
 800fa3e:	f7ff fa94 	bl	800ef6a <memcpy>
 800fa42:	2201      	movs	r2, #1
 800fa44:	4631      	mov	r1, r6
 800fa46:	4658      	mov	r0, fp
 800fa48:	f000 fc08 	bl	801025c <__lshift>
 800fa4c:	f10a 0301 	add.w	r3, sl, #1
 800fa50:	9307      	str	r3, [sp, #28]
 800fa52:	9b00      	ldr	r3, [sp, #0]
 800fa54:	4453      	add	r3, sl
 800fa56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa58:	9b02      	ldr	r3, [sp, #8]
 800fa5a:	f003 0301 	and.w	r3, r3, #1
 800fa5e:	462f      	mov	r7, r5
 800fa60:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa62:	4605      	mov	r5, r0
 800fa64:	9b07      	ldr	r3, [sp, #28]
 800fa66:	4621      	mov	r1, r4
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	4648      	mov	r0, r9
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	f7ff fa9b 	bl	800efa8 <quorem>
 800fa72:	4639      	mov	r1, r7
 800fa74:	9002      	str	r0, [sp, #8]
 800fa76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fa7a:	4648      	mov	r0, r9
 800fa7c:	f000 fc5a 	bl	8010334 <__mcmp>
 800fa80:	462a      	mov	r2, r5
 800fa82:	9008      	str	r0, [sp, #32]
 800fa84:	4621      	mov	r1, r4
 800fa86:	4658      	mov	r0, fp
 800fa88:	f000 fc70 	bl	801036c <__mdiff>
 800fa8c:	68c2      	ldr	r2, [r0, #12]
 800fa8e:	4606      	mov	r6, r0
 800fa90:	bb02      	cbnz	r2, 800fad4 <_dtoa_r+0xa1c>
 800fa92:	4601      	mov	r1, r0
 800fa94:	4648      	mov	r0, r9
 800fa96:	f000 fc4d 	bl	8010334 <__mcmp>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	4631      	mov	r1, r6
 800fa9e:	4658      	mov	r0, fp
 800faa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800faa2:	f000 fa0d 	bl	800fec0 <_Bfree>
 800faa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800faaa:	9e07      	ldr	r6, [sp, #28]
 800faac:	ea43 0102 	orr.w	r1, r3, r2
 800fab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fab2:	4319      	orrs	r1, r3
 800fab4:	d110      	bne.n	800fad8 <_dtoa_r+0xa20>
 800fab6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800faba:	d029      	beq.n	800fb10 <_dtoa_r+0xa58>
 800fabc:	9b08      	ldr	r3, [sp, #32]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	dd02      	ble.n	800fac8 <_dtoa_r+0xa10>
 800fac2:	9b02      	ldr	r3, [sp, #8]
 800fac4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fac8:	9b00      	ldr	r3, [sp, #0]
 800faca:	f883 8000 	strb.w	r8, [r3]
 800face:	e63f      	b.n	800f750 <_dtoa_r+0x698>
 800fad0:	4628      	mov	r0, r5
 800fad2:	e7bb      	b.n	800fa4c <_dtoa_r+0x994>
 800fad4:	2201      	movs	r2, #1
 800fad6:	e7e1      	b.n	800fa9c <_dtoa_r+0x9e4>
 800fad8:	9b08      	ldr	r3, [sp, #32]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	db04      	blt.n	800fae8 <_dtoa_r+0xa30>
 800fade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fae0:	430b      	orrs	r3, r1
 800fae2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fae4:	430b      	orrs	r3, r1
 800fae6:	d120      	bne.n	800fb2a <_dtoa_r+0xa72>
 800fae8:	2a00      	cmp	r2, #0
 800faea:	dded      	ble.n	800fac8 <_dtoa_r+0xa10>
 800faec:	4649      	mov	r1, r9
 800faee:	2201      	movs	r2, #1
 800faf0:	4658      	mov	r0, fp
 800faf2:	f000 fbb3 	bl	801025c <__lshift>
 800faf6:	4621      	mov	r1, r4
 800faf8:	4681      	mov	r9, r0
 800fafa:	f000 fc1b 	bl	8010334 <__mcmp>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	dc03      	bgt.n	800fb0a <_dtoa_r+0xa52>
 800fb02:	d1e1      	bne.n	800fac8 <_dtoa_r+0xa10>
 800fb04:	f018 0f01 	tst.w	r8, #1
 800fb08:	d0de      	beq.n	800fac8 <_dtoa_r+0xa10>
 800fb0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb0e:	d1d8      	bne.n	800fac2 <_dtoa_r+0xa0a>
 800fb10:	9a00      	ldr	r2, [sp, #0]
 800fb12:	2339      	movs	r3, #57	@ 0x39
 800fb14:	7013      	strb	r3, [r2, #0]
 800fb16:	4633      	mov	r3, r6
 800fb18:	461e      	mov	r6, r3
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb20:	2a39      	cmp	r2, #57	@ 0x39
 800fb22:	d052      	beq.n	800fbca <_dtoa_r+0xb12>
 800fb24:	3201      	adds	r2, #1
 800fb26:	701a      	strb	r2, [r3, #0]
 800fb28:	e612      	b.n	800f750 <_dtoa_r+0x698>
 800fb2a:	2a00      	cmp	r2, #0
 800fb2c:	dd07      	ble.n	800fb3e <_dtoa_r+0xa86>
 800fb2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb32:	d0ed      	beq.n	800fb10 <_dtoa_r+0xa58>
 800fb34:	9a00      	ldr	r2, [sp, #0]
 800fb36:	f108 0301 	add.w	r3, r8, #1
 800fb3a:	7013      	strb	r3, [r2, #0]
 800fb3c:	e608      	b.n	800f750 <_dtoa_r+0x698>
 800fb3e:	9b07      	ldr	r3, [sp, #28]
 800fb40:	9a07      	ldr	r2, [sp, #28]
 800fb42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fb46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d028      	beq.n	800fb9e <_dtoa_r+0xae6>
 800fb4c:	4649      	mov	r1, r9
 800fb4e:	2300      	movs	r3, #0
 800fb50:	220a      	movs	r2, #10
 800fb52:	4658      	mov	r0, fp
 800fb54:	f000 f9d6 	bl	800ff04 <__multadd>
 800fb58:	42af      	cmp	r7, r5
 800fb5a:	4681      	mov	r9, r0
 800fb5c:	f04f 0300 	mov.w	r3, #0
 800fb60:	f04f 020a 	mov.w	r2, #10
 800fb64:	4639      	mov	r1, r7
 800fb66:	4658      	mov	r0, fp
 800fb68:	d107      	bne.n	800fb7a <_dtoa_r+0xac2>
 800fb6a:	f000 f9cb 	bl	800ff04 <__multadd>
 800fb6e:	4607      	mov	r7, r0
 800fb70:	4605      	mov	r5, r0
 800fb72:	9b07      	ldr	r3, [sp, #28]
 800fb74:	3301      	adds	r3, #1
 800fb76:	9307      	str	r3, [sp, #28]
 800fb78:	e774      	b.n	800fa64 <_dtoa_r+0x9ac>
 800fb7a:	f000 f9c3 	bl	800ff04 <__multadd>
 800fb7e:	4629      	mov	r1, r5
 800fb80:	4607      	mov	r7, r0
 800fb82:	2300      	movs	r3, #0
 800fb84:	220a      	movs	r2, #10
 800fb86:	4658      	mov	r0, fp
 800fb88:	f000 f9bc 	bl	800ff04 <__multadd>
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	e7f0      	b.n	800fb72 <_dtoa_r+0xaba>
 800fb90:	9b00      	ldr	r3, [sp, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	bfcc      	ite	gt
 800fb96:	461e      	movgt	r6, r3
 800fb98:	2601      	movle	r6, #1
 800fb9a:	4456      	add	r6, sl
 800fb9c:	2700      	movs	r7, #0
 800fb9e:	4649      	mov	r1, r9
 800fba0:	2201      	movs	r2, #1
 800fba2:	4658      	mov	r0, fp
 800fba4:	f000 fb5a 	bl	801025c <__lshift>
 800fba8:	4621      	mov	r1, r4
 800fbaa:	4681      	mov	r9, r0
 800fbac:	f000 fbc2 	bl	8010334 <__mcmp>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	dcb0      	bgt.n	800fb16 <_dtoa_r+0xa5e>
 800fbb4:	d102      	bne.n	800fbbc <_dtoa_r+0xb04>
 800fbb6:	f018 0f01 	tst.w	r8, #1
 800fbba:	d1ac      	bne.n	800fb16 <_dtoa_r+0xa5e>
 800fbbc:	4633      	mov	r3, r6
 800fbbe:	461e      	mov	r6, r3
 800fbc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbc4:	2a30      	cmp	r2, #48	@ 0x30
 800fbc6:	d0fa      	beq.n	800fbbe <_dtoa_r+0xb06>
 800fbc8:	e5c2      	b.n	800f750 <_dtoa_r+0x698>
 800fbca:	459a      	cmp	sl, r3
 800fbcc:	d1a4      	bne.n	800fb18 <_dtoa_r+0xa60>
 800fbce:	9b04      	ldr	r3, [sp, #16]
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	9304      	str	r3, [sp, #16]
 800fbd4:	2331      	movs	r3, #49	@ 0x31
 800fbd6:	f88a 3000 	strb.w	r3, [sl]
 800fbda:	e5b9      	b.n	800f750 <_dtoa_r+0x698>
 800fbdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fbde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fc3c <_dtoa_r+0xb84>
 800fbe2:	b11b      	cbz	r3, 800fbec <_dtoa_r+0xb34>
 800fbe4:	f10a 0308 	add.w	r3, sl, #8
 800fbe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fbea:	6013      	str	r3, [r2, #0]
 800fbec:	4650      	mov	r0, sl
 800fbee:	b019      	add	sp, #100	@ 0x64
 800fbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	f77f ae37 	ble.w	800f86a <_dtoa_r+0x7b2>
 800fbfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc00:	2001      	movs	r0, #1
 800fc02:	e655      	b.n	800f8b0 <_dtoa_r+0x7f8>
 800fc04:	9b00      	ldr	r3, [sp, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f77f aed6 	ble.w	800f9b8 <_dtoa_r+0x900>
 800fc0c:	4656      	mov	r6, sl
 800fc0e:	4621      	mov	r1, r4
 800fc10:	4648      	mov	r0, r9
 800fc12:	f7ff f9c9 	bl	800efa8 <quorem>
 800fc16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fc1a:	f806 8b01 	strb.w	r8, [r6], #1
 800fc1e:	9b00      	ldr	r3, [sp, #0]
 800fc20:	eba6 020a 	sub.w	r2, r6, sl
 800fc24:	4293      	cmp	r3, r2
 800fc26:	ddb3      	ble.n	800fb90 <_dtoa_r+0xad8>
 800fc28:	4649      	mov	r1, r9
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	220a      	movs	r2, #10
 800fc2e:	4658      	mov	r0, fp
 800fc30:	f000 f968 	bl	800ff04 <__multadd>
 800fc34:	4681      	mov	r9, r0
 800fc36:	e7ea      	b.n	800fc0e <_dtoa_r+0xb56>
 800fc38:	08012b59 	.word	0x08012b59
 800fc3c:	08012add 	.word	0x08012add

0800fc40 <_free_r>:
 800fc40:	b538      	push	{r3, r4, r5, lr}
 800fc42:	4605      	mov	r5, r0
 800fc44:	2900      	cmp	r1, #0
 800fc46:	d041      	beq.n	800fccc <_free_r+0x8c>
 800fc48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc4c:	1f0c      	subs	r4, r1, #4
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	bfb8      	it	lt
 800fc52:	18e4      	addlt	r4, r4, r3
 800fc54:	f000 f8e8 	bl	800fe28 <__malloc_lock>
 800fc58:	4a1d      	ldr	r2, [pc, #116]	@ (800fcd0 <_free_r+0x90>)
 800fc5a:	6813      	ldr	r3, [r2, #0]
 800fc5c:	b933      	cbnz	r3, 800fc6c <_free_r+0x2c>
 800fc5e:	6063      	str	r3, [r4, #4]
 800fc60:	6014      	str	r4, [r2, #0]
 800fc62:	4628      	mov	r0, r5
 800fc64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc68:	f000 b8e4 	b.w	800fe34 <__malloc_unlock>
 800fc6c:	42a3      	cmp	r3, r4
 800fc6e:	d908      	bls.n	800fc82 <_free_r+0x42>
 800fc70:	6820      	ldr	r0, [r4, #0]
 800fc72:	1821      	adds	r1, r4, r0
 800fc74:	428b      	cmp	r3, r1
 800fc76:	bf01      	itttt	eq
 800fc78:	6819      	ldreq	r1, [r3, #0]
 800fc7a:	685b      	ldreq	r3, [r3, #4]
 800fc7c:	1809      	addeq	r1, r1, r0
 800fc7e:	6021      	streq	r1, [r4, #0]
 800fc80:	e7ed      	b.n	800fc5e <_free_r+0x1e>
 800fc82:	461a      	mov	r2, r3
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	b10b      	cbz	r3, 800fc8c <_free_r+0x4c>
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	d9fa      	bls.n	800fc82 <_free_r+0x42>
 800fc8c:	6811      	ldr	r1, [r2, #0]
 800fc8e:	1850      	adds	r0, r2, r1
 800fc90:	42a0      	cmp	r0, r4
 800fc92:	d10b      	bne.n	800fcac <_free_r+0x6c>
 800fc94:	6820      	ldr	r0, [r4, #0]
 800fc96:	4401      	add	r1, r0
 800fc98:	1850      	adds	r0, r2, r1
 800fc9a:	4283      	cmp	r3, r0
 800fc9c:	6011      	str	r1, [r2, #0]
 800fc9e:	d1e0      	bne.n	800fc62 <_free_r+0x22>
 800fca0:	6818      	ldr	r0, [r3, #0]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	6053      	str	r3, [r2, #4]
 800fca6:	4408      	add	r0, r1
 800fca8:	6010      	str	r0, [r2, #0]
 800fcaa:	e7da      	b.n	800fc62 <_free_r+0x22>
 800fcac:	d902      	bls.n	800fcb4 <_free_r+0x74>
 800fcae:	230c      	movs	r3, #12
 800fcb0:	602b      	str	r3, [r5, #0]
 800fcb2:	e7d6      	b.n	800fc62 <_free_r+0x22>
 800fcb4:	6820      	ldr	r0, [r4, #0]
 800fcb6:	1821      	adds	r1, r4, r0
 800fcb8:	428b      	cmp	r3, r1
 800fcba:	bf04      	itt	eq
 800fcbc:	6819      	ldreq	r1, [r3, #0]
 800fcbe:	685b      	ldreq	r3, [r3, #4]
 800fcc0:	6063      	str	r3, [r4, #4]
 800fcc2:	bf04      	itt	eq
 800fcc4:	1809      	addeq	r1, r1, r0
 800fcc6:	6021      	streq	r1, [r4, #0]
 800fcc8:	6054      	str	r4, [r2, #4]
 800fcca:	e7ca      	b.n	800fc62 <_free_r+0x22>
 800fccc:	bd38      	pop	{r3, r4, r5, pc}
 800fcce:	bf00      	nop
 800fcd0:	20002800 	.word	0x20002800

0800fcd4 <malloc>:
 800fcd4:	4b02      	ldr	r3, [pc, #8]	@ (800fce0 <malloc+0xc>)
 800fcd6:	4601      	mov	r1, r0
 800fcd8:	6818      	ldr	r0, [r3, #0]
 800fcda:	f000 b825 	b.w	800fd28 <_malloc_r>
 800fcde:	bf00      	nop
 800fce0:	20000138 	.word	0x20000138

0800fce4 <sbrk_aligned>:
 800fce4:	b570      	push	{r4, r5, r6, lr}
 800fce6:	4e0f      	ldr	r6, [pc, #60]	@ (800fd24 <sbrk_aligned+0x40>)
 800fce8:	460c      	mov	r4, r1
 800fcea:	6831      	ldr	r1, [r6, #0]
 800fcec:	4605      	mov	r5, r0
 800fcee:	b911      	cbnz	r1, 800fcf6 <sbrk_aligned+0x12>
 800fcf0:	f001 f81c 	bl	8010d2c <_sbrk_r>
 800fcf4:	6030      	str	r0, [r6, #0]
 800fcf6:	4621      	mov	r1, r4
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f001 f817 	bl	8010d2c <_sbrk_r>
 800fcfe:	1c43      	adds	r3, r0, #1
 800fd00:	d103      	bne.n	800fd0a <sbrk_aligned+0x26>
 800fd02:	f04f 34ff 	mov.w	r4, #4294967295
 800fd06:	4620      	mov	r0, r4
 800fd08:	bd70      	pop	{r4, r5, r6, pc}
 800fd0a:	1cc4      	adds	r4, r0, #3
 800fd0c:	f024 0403 	bic.w	r4, r4, #3
 800fd10:	42a0      	cmp	r0, r4
 800fd12:	d0f8      	beq.n	800fd06 <sbrk_aligned+0x22>
 800fd14:	1a21      	subs	r1, r4, r0
 800fd16:	4628      	mov	r0, r5
 800fd18:	f001 f808 	bl	8010d2c <_sbrk_r>
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	d1f2      	bne.n	800fd06 <sbrk_aligned+0x22>
 800fd20:	e7ef      	b.n	800fd02 <sbrk_aligned+0x1e>
 800fd22:	bf00      	nop
 800fd24:	200027fc 	.word	0x200027fc

0800fd28 <_malloc_r>:
 800fd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd2c:	1ccd      	adds	r5, r1, #3
 800fd2e:	f025 0503 	bic.w	r5, r5, #3
 800fd32:	3508      	adds	r5, #8
 800fd34:	2d0c      	cmp	r5, #12
 800fd36:	bf38      	it	cc
 800fd38:	250c      	movcc	r5, #12
 800fd3a:	2d00      	cmp	r5, #0
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	db01      	blt.n	800fd44 <_malloc_r+0x1c>
 800fd40:	42a9      	cmp	r1, r5
 800fd42:	d904      	bls.n	800fd4e <_malloc_r+0x26>
 800fd44:	230c      	movs	r3, #12
 800fd46:	6033      	str	r3, [r6, #0]
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fe24 <_malloc_r+0xfc>
 800fd52:	f000 f869 	bl	800fe28 <__malloc_lock>
 800fd56:	f8d8 3000 	ldr.w	r3, [r8]
 800fd5a:	461c      	mov	r4, r3
 800fd5c:	bb44      	cbnz	r4, 800fdb0 <_malloc_r+0x88>
 800fd5e:	4629      	mov	r1, r5
 800fd60:	4630      	mov	r0, r6
 800fd62:	f7ff ffbf 	bl	800fce4 <sbrk_aligned>
 800fd66:	1c43      	adds	r3, r0, #1
 800fd68:	4604      	mov	r4, r0
 800fd6a:	d158      	bne.n	800fe1e <_malloc_r+0xf6>
 800fd6c:	f8d8 4000 	ldr.w	r4, [r8]
 800fd70:	4627      	mov	r7, r4
 800fd72:	2f00      	cmp	r7, #0
 800fd74:	d143      	bne.n	800fdfe <_malloc_r+0xd6>
 800fd76:	2c00      	cmp	r4, #0
 800fd78:	d04b      	beq.n	800fe12 <_malloc_r+0xea>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	4639      	mov	r1, r7
 800fd7e:	4630      	mov	r0, r6
 800fd80:	eb04 0903 	add.w	r9, r4, r3
 800fd84:	f000 ffd2 	bl	8010d2c <_sbrk_r>
 800fd88:	4581      	cmp	r9, r0
 800fd8a:	d142      	bne.n	800fe12 <_malloc_r+0xea>
 800fd8c:	6821      	ldr	r1, [r4, #0]
 800fd8e:	1a6d      	subs	r5, r5, r1
 800fd90:	4629      	mov	r1, r5
 800fd92:	4630      	mov	r0, r6
 800fd94:	f7ff ffa6 	bl	800fce4 <sbrk_aligned>
 800fd98:	3001      	adds	r0, #1
 800fd9a:	d03a      	beq.n	800fe12 <_malloc_r+0xea>
 800fd9c:	6823      	ldr	r3, [r4, #0]
 800fd9e:	442b      	add	r3, r5
 800fda0:	6023      	str	r3, [r4, #0]
 800fda2:	f8d8 3000 	ldr.w	r3, [r8]
 800fda6:	685a      	ldr	r2, [r3, #4]
 800fda8:	bb62      	cbnz	r2, 800fe04 <_malloc_r+0xdc>
 800fdaa:	f8c8 7000 	str.w	r7, [r8]
 800fdae:	e00f      	b.n	800fdd0 <_malloc_r+0xa8>
 800fdb0:	6822      	ldr	r2, [r4, #0]
 800fdb2:	1b52      	subs	r2, r2, r5
 800fdb4:	d420      	bmi.n	800fdf8 <_malloc_r+0xd0>
 800fdb6:	2a0b      	cmp	r2, #11
 800fdb8:	d917      	bls.n	800fdea <_malloc_r+0xc2>
 800fdba:	1961      	adds	r1, r4, r5
 800fdbc:	42a3      	cmp	r3, r4
 800fdbe:	6025      	str	r5, [r4, #0]
 800fdc0:	bf18      	it	ne
 800fdc2:	6059      	strne	r1, [r3, #4]
 800fdc4:	6863      	ldr	r3, [r4, #4]
 800fdc6:	bf08      	it	eq
 800fdc8:	f8c8 1000 	streq.w	r1, [r8]
 800fdcc:	5162      	str	r2, [r4, r5]
 800fdce:	604b      	str	r3, [r1, #4]
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	f000 f82f 	bl	800fe34 <__malloc_unlock>
 800fdd6:	f104 000b 	add.w	r0, r4, #11
 800fdda:	1d23      	adds	r3, r4, #4
 800fddc:	f020 0007 	bic.w	r0, r0, #7
 800fde0:	1ac2      	subs	r2, r0, r3
 800fde2:	bf1c      	itt	ne
 800fde4:	1a1b      	subne	r3, r3, r0
 800fde6:	50a3      	strne	r3, [r4, r2]
 800fde8:	e7af      	b.n	800fd4a <_malloc_r+0x22>
 800fdea:	6862      	ldr	r2, [r4, #4]
 800fdec:	42a3      	cmp	r3, r4
 800fdee:	bf0c      	ite	eq
 800fdf0:	f8c8 2000 	streq.w	r2, [r8]
 800fdf4:	605a      	strne	r2, [r3, #4]
 800fdf6:	e7eb      	b.n	800fdd0 <_malloc_r+0xa8>
 800fdf8:	4623      	mov	r3, r4
 800fdfa:	6864      	ldr	r4, [r4, #4]
 800fdfc:	e7ae      	b.n	800fd5c <_malloc_r+0x34>
 800fdfe:	463c      	mov	r4, r7
 800fe00:	687f      	ldr	r7, [r7, #4]
 800fe02:	e7b6      	b.n	800fd72 <_malloc_r+0x4a>
 800fe04:	461a      	mov	r2, r3
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	42a3      	cmp	r3, r4
 800fe0a:	d1fb      	bne.n	800fe04 <_malloc_r+0xdc>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	6053      	str	r3, [r2, #4]
 800fe10:	e7de      	b.n	800fdd0 <_malloc_r+0xa8>
 800fe12:	230c      	movs	r3, #12
 800fe14:	6033      	str	r3, [r6, #0]
 800fe16:	4630      	mov	r0, r6
 800fe18:	f000 f80c 	bl	800fe34 <__malloc_unlock>
 800fe1c:	e794      	b.n	800fd48 <_malloc_r+0x20>
 800fe1e:	6005      	str	r5, [r0, #0]
 800fe20:	e7d6      	b.n	800fdd0 <_malloc_r+0xa8>
 800fe22:	bf00      	nop
 800fe24:	20002800 	.word	0x20002800

0800fe28 <__malloc_lock>:
 800fe28:	4801      	ldr	r0, [pc, #4]	@ (800fe30 <__malloc_lock+0x8>)
 800fe2a:	f7ff b89c 	b.w	800ef66 <__retarget_lock_acquire_recursive>
 800fe2e:	bf00      	nop
 800fe30:	200027f8 	.word	0x200027f8

0800fe34 <__malloc_unlock>:
 800fe34:	4801      	ldr	r0, [pc, #4]	@ (800fe3c <__malloc_unlock+0x8>)
 800fe36:	f7ff b897 	b.w	800ef68 <__retarget_lock_release_recursive>
 800fe3a:	bf00      	nop
 800fe3c:	200027f8 	.word	0x200027f8

0800fe40 <_Balloc>:
 800fe40:	b570      	push	{r4, r5, r6, lr}
 800fe42:	69c6      	ldr	r6, [r0, #28]
 800fe44:	4604      	mov	r4, r0
 800fe46:	460d      	mov	r5, r1
 800fe48:	b976      	cbnz	r6, 800fe68 <_Balloc+0x28>
 800fe4a:	2010      	movs	r0, #16
 800fe4c:	f7ff ff42 	bl	800fcd4 <malloc>
 800fe50:	4602      	mov	r2, r0
 800fe52:	61e0      	str	r0, [r4, #28]
 800fe54:	b920      	cbnz	r0, 800fe60 <_Balloc+0x20>
 800fe56:	4b18      	ldr	r3, [pc, #96]	@ (800feb8 <_Balloc+0x78>)
 800fe58:	4818      	ldr	r0, [pc, #96]	@ (800febc <_Balloc+0x7c>)
 800fe5a:	216b      	movs	r1, #107	@ 0x6b
 800fe5c:	f000 ff76 	bl	8010d4c <__assert_func>
 800fe60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe64:	6006      	str	r6, [r0, #0]
 800fe66:	60c6      	str	r6, [r0, #12]
 800fe68:	69e6      	ldr	r6, [r4, #28]
 800fe6a:	68f3      	ldr	r3, [r6, #12]
 800fe6c:	b183      	cbz	r3, 800fe90 <_Balloc+0x50>
 800fe6e:	69e3      	ldr	r3, [r4, #28]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe76:	b9b8      	cbnz	r0, 800fea8 <_Balloc+0x68>
 800fe78:	2101      	movs	r1, #1
 800fe7a:	fa01 f605 	lsl.w	r6, r1, r5
 800fe7e:	1d72      	adds	r2, r6, #5
 800fe80:	0092      	lsls	r2, r2, #2
 800fe82:	4620      	mov	r0, r4
 800fe84:	f000 ff80 	bl	8010d88 <_calloc_r>
 800fe88:	b160      	cbz	r0, 800fea4 <_Balloc+0x64>
 800fe8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe8e:	e00e      	b.n	800feae <_Balloc+0x6e>
 800fe90:	2221      	movs	r2, #33	@ 0x21
 800fe92:	2104      	movs	r1, #4
 800fe94:	4620      	mov	r0, r4
 800fe96:	f000 ff77 	bl	8010d88 <_calloc_r>
 800fe9a:	69e3      	ldr	r3, [r4, #28]
 800fe9c:	60f0      	str	r0, [r6, #12]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d1e4      	bne.n	800fe6e <_Balloc+0x2e>
 800fea4:	2000      	movs	r0, #0
 800fea6:	bd70      	pop	{r4, r5, r6, pc}
 800fea8:	6802      	ldr	r2, [r0, #0]
 800feaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800feae:	2300      	movs	r3, #0
 800feb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800feb4:	e7f7      	b.n	800fea6 <_Balloc+0x66>
 800feb6:	bf00      	nop
 800feb8:	08012aea 	.word	0x08012aea
 800febc:	08012b6a 	.word	0x08012b6a

0800fec0 <_Bfree>:
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	69c6      	ldr	r6, [r0, #28]
 800fec4:	4605      	mov	r5, r0
 800fec6:	460c      	mov	r4, r1
 800fec8:	b976      	cbnz	r6, 800fee8 <_Bfree+0x28>
 800feca:	2010      	movs	r0, #16
 800fecc:	f7ff ff02 	bl	800fcd4 <malloc>
 800fed0:	4602      	mov	r2, r0
 800fed2:	61e8      	str	r0, [r5, #28]
 800fed4:	b920      	cbnz	r0, 800fee0 <_Bfree+0x20>
 800fed6:	4b09      	ldr	r3, [pc, #36]	@ (800fefc <_Bfree+0x3c>)
 800fed8:	4809      	ldr	r0, [pc, #36]	@ (800ff00 <_Bfree+0x40>)
 800feda:	218f      	movs	r1, #143	@ 0x8f
 800fedc:	f000 ff36 	bl	8010d4c <__assert_func>
 800fee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fee4:	6006      	str	r6, [r0, #0]
 800fee6:	60c6      	str	r6, [r0, #12]
 800fee8:	b13c      	cbz	r4, 800fefa <_Bfree+0x3a>
 800feea:	69eb      	ldr	r3, [r5, #28]
 800feec:	6862      	ldr	r2, [r4, #4]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fef4:	6021      	str	r1, [r4, #0]
 800fef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
 800fefc:	08012aea 	.word	0x08012aea
 800ff00:	08012b6a 	.word	0x08012b6a

0800ff04 <__multadd>:
 800ff04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff08:	690d      	ldr	r5, [r1, #16]
 800ff0a:	4607      	mov	r7, r0
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	461e      	mov	r6, r3
 800ff10:	f101 0c14 	add.w	ip, r1, #20
 800ff14:	2000      	movs	r0, #0
 800ff16:	f8dc 3000 	ldr.w	r3, [ip]
 800ff1a:	b299      	uxth	r1, r3
 800ff1c:	fb02 6101 	mla	r1, r2, r1, r6
 800ff20:	0c1e      	lsrs	r6, r3, #16
 800ff22:	0c0b      	lsrs	r3, r1, #16
 800ff24:	fb02 3306 	mla	r3, r2, r6, r3
 800ff28:	b289      	uxth	r1, r1
 800ff2a:	3001      	adds	r0, #1
 800ff2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff30:	4285      	cmp	r5, r0
 800ff32:	f84c 1b04 	str.w	r1, [ip], #4
 800ff36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff3a:	dcec      	bgt.n	800ff16 <__multadd+0x12>
 800ff3c:	b30e      	cbz	r6, 800ff82 <__multadd+0x7e>
 800ff3e:	68a3      	ldr	r3, [r4, #8]
 800ff40:	42ab      	cmp	r3, r5
 800ff42:	dc19      	bgt.n	800ff78 <__multadd+0x74>
 800ff44:	6861      	ldr	r1, [r4, #4]
 800ff46:	4638      	mov	r0, r7
 800ff48:	3101      	adds	r1, #1
 800ff4a:	f7ff ff79 	bl	800fe40 <_Balloc>
 800ff4e:	4680      	mov	r8, r0
 800ff50:	b928      	cbnz	r0, 800ff5e <__multadd+0x5a>
 800ff52:	4602      	mov	r2, r0
 800ff54:	4b0c      	ldr	r3, [pc, #48]	@ (800ff88 <__multadd+0x84>)
 800ff56:	480d      	ldr	r0, [pc, #52]	@ (800ff8c <__multadd+0x88>)
 800ff58:	21ba      	movs	r1, #186	@ 0xba
 800ff5a:	f000 fef7 	bl	8010d4c <__assert_func>
 800ff5e:	6922      	ldr	r2, [r4, #16]
 800ff60:	3202      	adds	r2, #2
 800ff62:	f104 010c 	add.w	r1, r4, #12
 800ff66:	0092      	lsls	r2, r2, #2
 800ff68:	300c      	adds	r0, #12
 800ff6a:	f7fe fffe 	bl	800ef6a <memcpy>
 800ff6e:	4621      	mov	r1, r4
 800ff70:	4638      	mov	r0, r7
 800ff72:	f7ff ffa5 	bl	800fec0 <_Bfree>
 800ff76:	4644      	mov	r4, r8
 800ff78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff7c:	3501      	adds	r5, #1
 800ff7e:	615e      	str	r6, [r3, #20]
 800ff80:	6125      	str	r5, [r4, #16]
 800ff82:	4620      	mov	r0, r4
 800ff84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff88:	08012b59 	.word	0x08012b59
 800ff8c:	08012b6a 	.word	0x08012b6a

0800ff90 <__hi0bits>:
 800ff90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ff94:	4603      	mov	r3, r0
 800ff96:	bf36      	itet	cc
 800ff98:	0403      	lslcc	r3, r0, #16
 800ff9a:	2000      	movcs	r0, #0
 800ff9c:	2010      	movcc	r0, #16
 800ff9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ffa2:	bf3c      	itt	cc
 800ffa4:	021b      	lslcc	r3, r3, #8
 800ffa6:	3008      	addcc	r0, #8
 800ffa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ffac:	bf3c      	itt	cc
 800ffae:	011b      	lslcc	r3, r3, #4
 800ffb0:	3004      	addcc	r0, #4
 800ffb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffb6:	bf3c      	itt	cc
 800ffb8:	009b      	lslcc	r3, r3, #2
 800ffba:	3002      	addcc	r0, #2
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	db05      	blt.n	800ffcc <__hi0bits+0x3c>
 800ffc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ffc4:	f100 0001 	add.w	r0, r0, #1
 800ffc8:	bf08      	it	eq
 800ffca:	2020      	moveq	r0, #32
 800ffcc:	4770      	bx	lr

0800ffce <__lo0bits>:
 800ffce:	6803      	ldr	r3, [r0, #0]
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	f013 0007 	ands.w	r0, r3, #7
 800ffd6:	d00b      	beq.n	800fff0 <__lo0bits+0x22>
 800ffd8:	07d9      	lsls	r1, r3, #31
 800ffda:	d421      	bmi.n	8010020 <__lo0bits+0x52>
 800ffdc:	0798      	lsls	r0, r3, #30
 800ffde:	bf49      	itett	mi
 800ffe0:	085b      	lsrmi	r3, r3, #1
 800ffe2:	089b      	lsrpl	r3, r3, #2
 800ffe4:	2001      	movmi	r0, #1
 800ffe6:	6013      	strmi	r3, [r2, #0]
 800ffe8:	bf5c      	itt	pl
 800ffea:	6013      	strpl	r3, [r2, #0]
 800ffec:	2002      	movpl	r0, #2
 800ffee:	4770      	bx	lr
 800fff0:	b299      	uxth	r1, r3
 800fff2:	b909      	cbnz	r1, 800fff8 <__lo0bits+0x2a>
 800fff4:	0c1b      	lsrs	r3, r3, #16
 800fff6:	2010      	movs	r0, #16
 800fff8:	b2d9      	uxtb	r1, r3
 800fffa:	b909      	cbnz	r1, 8010000 <__lo0bits+0x32>
 800fffc:	3008      	adds	r0, #8
 800fffe:	0a1b      	lsrs	r3, r3, #8
 8010000:	0719      	lsls	r1, r3, #28
 8010002:	bf04      	itt	eq
 8010004:	091b      	lsreq	r3, r3, #4
 8010006:	3004      	addeq	r0, #4
 8010008:	0799      	lsls	r1, r3, #30
 801000a:	bf04      	itt	eq
 801000c:	089b      	lsreq	r3, r3, #2
 801000e:	3002      	addeq	r0, #2
 8010010:	07d9      	lsls	r1, r3, #31
 8010012:	d403      	bmi.n	801001c <__lo0bits+0x4e>
 8010014:	085b      	lsrs	r3, r3, #1
 8010016:	f100 0001 	add.w	r0, r0, #1
 801001a:	d003      	beq.n	8010024 <__lo0bits+0x56>
 801001c:	6013      	str	r3, [r2, #0]
 801001e:	4770      	bx	lr
 8010020:	2000      	movs	r0, #0
 8010022:	4770      	bx	lr
 8010024:	2020      	movs	r0, #32
 8010026:	4770      	bx	lr

08010028 <__i2b>:
 8010028:	b510      	push	{r4, lr}
 801002a:	460c      	mov	r4, r1
 801002c:	2101      	movs	r1, #1
 801002e:	f7ff ff07 	bl	800fe40 <_Balloc>
 8010032:	4602      	mov	r2, r0
 8010034:	b928      	cbnz	r0, 8010042 <__i2b+0x1a>
 8010036:	4b05      	ldr	r3, [pc, #20]	@ (801004c <__i2b+0x24>)
 8010038:	4805      	ldr	r0, [pc, #20]	@ (8010050 <__i2b+0x28>)
 801003a:	f240 1145 	movw	r1, #325	@ 0x145
 801003e:	f000 fe85 	bl	8010d4c <__assert_func>
 8010042:	2301      	movs	r3, #1
 8010044:	6144      	str	r4, [r0, #20]
 8010046:	6103      	str	r3, [r0, #16]
 8010048:	bd10      	pop	{r4, pc}
 801004a:	bf00      	nop
 801004c:	08012b59 	.word	0x08012b59
 8010050:	08012b6a 	.word	0x08012b6a

08010054 <__multiply>:
 8010054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010058:	4614      	mov	r4, r2
 801005a:	690a      	ldr	r2, [r1, #16]
 801005c:	6923      	ldr	r3, [r4, #16]
 801005e:	429a      	cmp	r2, r3
 8010060:	bfa8      	it	ge
 8010062:	4623      	movge	r3, r4
 8010064:	460f      	mov	r7, r1
 8010066:	bfa4      	itt	ge
 8010068:	460c      	movge	r4, r1
 801006a:	461f      	movge	r7, r3
 801006c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010070:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010074:	68a3      	ldr	r3, [r4, #8]
 8010076:	6861      	ldr	r1, [r4, #4]
 8010078:	eb0a 0609 	add.w	r6, sl, r9
 801007c:	42b3      	cmp	r3, r6
 801007e:	b085      	sub	sp, #20
 8010080:	bfb8      	it	lt
 8010082:	3101      	addlt	r1, #1
 8010084:	f7ff fedc 	bl	800fe40 <_Balloc>
 8010088:	b930      	cbnz	r0, 8010098 <__multiply+0x44>
 801008a:	4602      	mov	r2, r0
 801008c:	4b44      	ldr	r3, [pc, #272]	@ (80101a0 <__multiply+0x14c>)
 801008e:	4845      	ldr	r0, [pc, #276]	@ (80101a4 <__multiply+0x150>)
 8010090:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010094:	f000 fe5a 	bl	8010d4c <__assert_func>
 8010098:	f100 0514 	add.w	r5, r0, #20
 801009c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100a0:	462b      	mov	r3, r5
 80100a2:	2200      	movs	r2, #0
 80100a4:	4543      	cmp	r3, r8
 80100a6:	d321      	bcc.n	80100ec <__multiply+0x98>
 80100a8:	f107 0114 	add.w	r1, r7, #20
 80100ac:	f104 0214 	add.w	r2, r4, #20
 80100b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80100b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80100b8:	9302      	str	r3, [sp, #8]
 80100ba:	1b13      	subs	r3, r2, r4
 80100bc:	3b15      	subs	r3, #21
 80100be:	f023 0303 	bic.w	r3, r3, #3
 80100c2:	3304      	adds	r3, #4
 80100c4:	f104 0715 	add.w	r7, r4, #21
 80100c8:	42ba      	cmp	r2, r7
 80100ca:	bf38      	it	cc
 80100cc:	2304      	movcc	r3, #4
 80100ce:	9301      	str	r3, [sp, #4]
 80100d0:	9b02      	ldr	r3, [sp, #8]
 80100d2:	9103      	str	r1, [sp, #12]
 80100d4:	428b      	cmp	r3, r1
 80100d6:	d80c      	bhi.n	80100f2 <__multiply+0x9e>
 80100d8:	2e00      	cmp	r6, #0
 80100da:	dd03      	ble.n	80100e4 <__multiply+0x90>
 80100dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d05b      	beq.n	801019c <__multiply+0x148>
 80100e4:	6106      	str	r6, [r0, #16]
 80100e6:	b005      	add	sp, #20
 80100e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ec:	f843 2b04 	str.w	r2, [r3], #4
 80100f0:	e7d8      	b.n	80100a4 <__multiply+0x50>
 80100f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80100f6:	f1ba 0f00 	cmp.w	sl, #0
 80100fa:	d024      	beq.n	8010146 <__multiply+0xf2>
 80100fc:	f104 0e14 	add.w	lr, r4, #20
 8010100:	46a9      	mov	r9, r5
 8010102:	f04f 0c00 	mov.w	ip, #0
 8010106:	f85e 7b04 	ldr.w	r7, [lr], #4
 801010a:	f8d9 3000 	ldr.w	r3, [r9]
 801010e:	fa1f fb87 	uxth.w	fp, r7
 8010112:	b29b      	uxth	r3, r3
 8010114:	fb0a 330b 	mla	r3, sl, fp, r3
 8010118:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801011c:	f8d9 7000 	ldr.w	r7, [r9]
 8010120:	4463      	add	r3, ip
 8010122:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010126:	fb0a c70b 	mla	r7, sl, fp, ip
 801012a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801012e:	b29b      	uxth	r3, r3
 8010130:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010134:	4572      	cmp	r2, lr
 8010136:	f849 3b04 	str.w	r3, [r9], #4
 801013a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801013e:	d8e2      	bhi.n	8010106 <__multiply+0xb2>
 8010140:	9b01      	ldr	r3, [sp, #4]
 8010142:	f845 c003 	str.w	ip, [r5, r3]
 8010146:	9b03      	ldr	r3, [sp, #12]
 8010148:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801014c:	3104      	adds	r1, #4
 801014e:	f1b9 0f00 	cmp.w	r9, #0
 8010152:	d021      	beq.n	8010198 <__multiply+0x144>
 8010154:	682b      	ldr	r3, [r5, #0]
 8010156:	f104 0c14 	add.w	ip, r4, #20
 801015a:	46ae      	mov	lr, r5
 801015c:	f04f 0a00 	mov.w	sl, #0
 8010160:	f8bc b000 	ldrh.w	fp, [ip]
 8010164:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010168:	fb09 770b 	mla	r7, r9, fp, r7
 801016c:	4457      	add	r7, sl
 801016e:	b29b      	uxth	r3, r3
 8010170:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010174:	f84e 3b04 	str.w	r3, [lr], #4
 8010178:	f85c 3b04 	ldr.w	r3, [ip], #4
 801017c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010180:	f8be 3000 	ldrh.w	r3, [lr]
 8010184:	fb09 330a 	mla	r3, r9, sl, r3
 8010188:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801018c:	4562      	cmp	r2, ip
 801018e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010192:	d8e5      	bhi.n	8010160 <__multiply+0x10c>
 8010194:	9f01      	ldr	r7, [sp, #4]
 8010196:	51eb      	str	r3, [r5, r7]
 8010198:	3504      	adds	r5, #4
 801019a:	e799      	b.n	80100d0 <__multiply+0x7c>
 801019c:	3e01      	subs	r6, #1
 801019e:	e79b      	b.n	80100d8 <__multiply+0x84>
 80101a0:	08012b59 	.word	0x08012b59
 80101a4:	08012b6a 	.word	0x08012b6a

080101a8 <__pow5mult>:
 80101a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ac:	4615      	mov	r5, r2
 80101ae:	f012 0203 	ands.w	r2, r2, #3
 80101b2:	4607      	mov	r7, r0
 80101b4:	460e      	mov	r6, r1
 80101b6:	d007      	beq.n	80101c8 <__pow5mult+0x20>
 80101b8:	4c25      	ldr	r4, [pc, #148]	@ (8010250 <__pow5mult+0xa8>)
 80101ba:	3a01      	subs	r2, #1
 80101bc:	2300      	movs	r3, #0
 80101be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101c2:	f7ff fe9f 	bl	800ff04 <__multadd>
 80101c6:	4606      	mov	r6, r0
 80101c8:	10ad      	asrs	r5, r5, #2
 80101ca:	d03d      	beq.n	8010248 <__pow5mult+0xa0>
 80101cc:	69fc      	ldr	r4, [r7, #28]
 80101ce:	b97c      	cbnz	r4, 80101f0 <__pow5mult+0x48>
 80101d0:	2010      	movs	r0, #16
 80101d2:	f7ff fd7f 	bl	800fcd4 <malloc>
 80101d6:	4602      	mov	r2, r0
 80101d8:	61f8      	str	r0, [r7, #28]
 80101da:	b928      	cbnz	r0, 80101e8 <__pow5mult+0x40>
 80101dc:	4b1d      	ldr	r3, [pc, #116]	@ (8010254 <__pow5mult+0xac>)
 80101de:	481e      	ldr	r0, [pc, #120]	@ (8010258 <__pow5mult+0xb0>)
 80101e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80101e4:	f000 fdb2 	bl	8010d4c <__assert_func>
 80101e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80101ec:	6004      	str	r4, [r0, #0]
 80101ee:	60c4      	str	r4, [r0, #12]
 80101f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80101f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80101f8:	b94c      	cbnz	r4, 801020e <__pow5mult+0x66>
 80101fa:	f240 2171 	movw	r1, #625	@ 0x271
 80101fe:	4638      	mov	r0, r7
 8010200:	f7ff ff12 	bl	8010028 <__i2b>
 8010204:	2300      	movs	r3, #0
 8010206:	f8c8 0008 	str.w	r0, [r8, #8]
 801020a:	4604      	mov	r4, r0
 801020c:	6003      	str	r3, [r0, #0]
 801020e:	f04f 0900 	mov.w	r9, #0
 8010212:	07eb      	lsls	r3, r5, #31
 8010214:	d50a      	bpl.n	801022c <__pow5mult+0x84>
 8010216:	4631      	mov	r1, r6
 8010218:	4622      	mov	r2, r4
 801021a:	4638      	mov	r0, r7
 801021c:	f7ff ff1a 	bl	8010054 <__multiply>
 8010220:	4631      	mov	r1, r6
 8010222:	4680      	mov	r8, r0
 8010224:	4638      	mov	r0, r7
 8010226:	f7ff fe4b 	bl	800fec0 <_Bfree>
 801022a:	4646      	mov	r6, r8
 801022c:	106d      	asrs	r5, r5, #1
 801022e:	d00b      	beq.n	8010248 <__pow5mult+0xa0>
 8010230:	6820      	ldr	r0, [r4, #0]
 8010232:	b938      	cbnz	r0, 8010244 <__pow5mult+0x9c>
 8010234:	4622      	mov	r2, r4
 8010236:	4621      	mov	r1, r4
 8010238:	4638      	mov	r0, r7
 801023a:	f7ff ff0b 	bl	8010054 <__multiply>
 801023e:	6020      	str	r0, [r4, #0]
 8010240:	f8c0 9000 	str.w	r9, [r0]
 8010244:	4604      	mov	r4, r0
 8010246:	e7e4      	b.n	8010212 <__pow5mult+0x6a>
 8010248:	4630      	mov	r0, r6
 801024a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801024e:	bf00      	nop
 8010250:	08012bc4 	.word	0x08012bc4
 8010254:	08012aea 	.word	0x08012aea
 8010258:	08012b6a 	.word	0x08012b6a

0801025c <__lshift>:
 801025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010260:	460c      	mov	r4, r1
 8010262:	6849      	ldr	r1, [r1, #4]
 8010264:	6923      	ldr	r3, [r4, #16]
 8010266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801026a:	68a3      	ldr	r3, [r4, #8]
 801026c:	4607      	mov	r7, r0
 801026e:	4691      	mov	r9, r2
 8010270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010274:	f108 0601 	add.w	r6, r8, #1
 8010278:	42b3      	cmp	r3, r6
 801027a:	db0b      	blt.n	8010294 <__lshift+0x38>
 801027c:	4638      	mov	r0, r7
 801027e:	f7ff fddf 	bl	800fe40 <_Balloc>
 8010282:	4605      	mov	r5, r0
 8010284:	b948      	cbnz	r0, 801029a <__lshift+0x3e>
 8010286:	4602      	mov	r2, r0
 8010288:	4b28      	ldr	r3, [pc, #160]	@ (801032c <__lshift+0xd0>)
 801028a:	4829      	ldr	r0, [pc, #164]	@ (8010330 <__lshift+0xd4>)
 801028c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010290:	f000 fd5c 	bl	8010d4c <__assert_func>
 8010294:	3101      	adds	r1, #1
 8010296:	005b      	lsls	r3, r3, #1
 8010298:	e7ee      	b.n	8010278 <__lshift+0x1c>
 801029a:	2300      	movs	r3, #0
 801029c:	f100 0114 	add.w	r1, r0, #20
 80102a0:	f100 0210 	add.w	r2, r0, #16
 80102a4:	4618      	mov	r0, r3
 80102a6:	4553      	cmp	r3, sl
 80102a8:	db33      	blt.n	8010312 <__lshift+0xb6>
 80102aa:	6920      	ldr	r0, [r4, #16]
 80102ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102b0:	f104 0314 	add.w	r3, r4, #20
 80102b4:	f019 091f 	ands.w	r9, r9, #31
 80102b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102c0:	d02b      	beq.n	801031a <__lshift+0xbe>
 80102c2:	f1c9 0e20 	rsb	lr, r9, #32
 80102c6:	468a      	mov	sl, r1
 80102c8:	2200      	movs	r2, #0
 80102ca:	6818      	ldr	r0, [r3, #0]
 80102cc:	fa00 f009 	lsl.w	r0, r0, r9
 80102d0:	4310      	orrs	r0, r2
 80102d2:	f84a 0b04 	str.w	r0, [sl], #4
 80102d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80102da:	459c      	cmp	ip, r3
 80102dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80102e0:	d8f3      	bhi.n	80102ca <__lshift+0x6e>
 80102e2:	ebac 0304 	sub.w	r3, ip, r4
 80102e6:	3b15      	subs	r3, #21
 80102e8:	f023 0303 	bic.w	r3, r3, #3
 80102ec:	3304      	adds	r3, #4
 80102ee:	f104 0015 	add.w	r0, r4, #21
 80102f2:	4584      	cmp	ip, r0
 80102f4:	bf38      	it	cc
 80102f6:	2304      	movcc	r3, #4
 80102f8:	50ca      	str	r2, [r1, r3]
 80102fa:	b10a      	cbz	r2, 8010300 <__lshift+0xa4>
 80102fc:	f108 0602 	add.w	r6, r8, #2
 8010300:	3e01      	subs	r6, #1
 8010302:	4638      	mov	r0, r7
 8010304:	612e      	str	r6, [r5, #16]
 8010306:	4621      	mov	r1, r4
 8010308:	f7ff fdda 	bl	800fec0 <_Bfree>
 801030c:	4628      	mov	r0, r5
 801030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010312:	f842 0f04 	str.w	r0, [r2, #4]!
 8010316:	3301      	adds	r3, #1
 8010318:	e7c5      	b.n	80102a6 <__lshift+0x4a>
 801031a:	3904      	subs	r1, #4
 801031c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010320:	f841 2f04 	str.w	r2, [r1, #4]!
 8010324:	459c      	cmp	ip, r3
 8010326:	d8f9      	bhi.n	801031c <__lshift+0xc0>
 8010328:	e7ea      	b.n	8010300 <__lshift+0xa4>
 801032a:	bf00      	nop
 801032c:	08012b59 	.word	0x08012b59
 8010330:	08012b6a 	.word	0x08012b6a

08010334 <__mcmp>:
 8010334:	690a      	ldr	r2, [r1, #16]
 8010336:	4603      	mov	r3, r0
 8010338:	6900      	ldr	r0, [r0, #16]
 801033a:	1a80      	subs	r0, r0, r2
 801033c:	b530      	push	{r4, r5, lr}
 801033e:	d10e      	bne.n	801035e <__mcmp+0x2a>
 8010340:	3314      	adds	r3, #20
 8010342:	3114      	adds	r1, #20
 8010344:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010348:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801034c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010354:	4295      	cmp	r5, r2
 8010356:	d003      	beq.n	8010360 <__mcmp+0x2c>
 8010358:	d205      	bcs.n	8010366 <__mcmp+0x32>
 801035a:	f04f 30ff 	mov.w	r0, #4294967295
 801035e:	bd30      	pop	{r4, r5, pc}
 8010360:	42a3      	cmp	r3, r4
 8010362:	d3f3      	bcc.n	801034c <__mcmp+0x18>
 8010364:	e7fb      	b.n	801035e <__mcmp+0x2a>
 8010366:	2001      	movs	r0, #1
 8010368:	e7f9      	b.n	801035e <__mcmp+0x2a>
	...

0801036c <__mdiff>:
 801036c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010370:	4689      	mov	r9, r1
 8010372:	4606      	mov	r6, r0
 8010374:	4611      	mov	r1, r2
 8010376:	4648      	mov	r0, r9
 8010378:	4614      	mov	r4, r2
 801037a:	f7ff ffdb 	bl	8010334 <__mcmp>
 801037e:	1e05      	subs	r5, r0, #0
 8010380:	d112      	bne.n	80103a8 <__mdiff+0x3c>
 8010382:	4629      	mov	r1, r5
 8010384:	4630      	mov	r0, r6
 8010386:	f7ff fd5b 	bl	800fe40 <_Balloc>
 801038a:	4602      	mov	r2, r0
 801038c:	b928      	cbnz	r0, 801039a <__mdiff+0x2e>
 801038e:	4b3f      	ldr	r3, [pc, #252]	@ (801048c <__mdiff+0x120>)
 8010390:	f240 2137 	movw	r1, #567	@ 0x237
 8010394:	483e      	ldr	r0, [pc, #248]	@ (8010490 <__mdiff+0x124>)
 8010396:	f000 fcd9 	bl	8010d4c <__assert_func>
 801039a:	2301      	movs	r3, #1
 801039c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103a0:	4610      	mov	r0, r2
 80103a2:	b003      	add	sp, #12
 80103a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a8:	bfbc      	itt	lt
 80103aa:	464b      	movlt	r3, r9
 80103ac:	46a1      	movlt	r9, r4
 80103ae:	4630      	mov	r0, r6
 80103b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80103b4:	bfba      	itte	lt
 80103b6:	461c      	movlt	r4, r3
 80103b8:	2501      	movlt	r5, #1
 80103ba:	2500      	movge	r5, #0
 80103bc:	f7ff fd40 	bl	800fe40 <_Balloc>
 80103c0:	4602      	mov	r2, r0
 80103c2:	b918      	cbnz	r0, 80103cc <__mdiff+0x60>
 80103c4:	4b31      	ldr	r3, [pc, #196]	@ (801048c <__mdiff+0x120>)
 80103c6:	f240 2145 	movw	r1, #581	@ 0x245
 80103ca:	e7e3      	b.n	8010394 <__mdiff+0x28>
 80103cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80103d0:	6926      	ldr	r6, [r4, #16]
 80103d2:	60c5      	str	r5, [r0, #12]
 80103d4:	f109 0310 	add.w	r3, r9, #16
 80103d8:	f109 0514 	add.w	r5, r9, #20
 80103dc:	f104 0e14 	add.w	lr, r4, #20
 80103e0:	f100 0b14 	add.w	fp, r0, #20
 80103e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80103e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80103ec:	9301      	str	r3, [sp, #4]
 80103ee:	46d9      	mov	r9, fp
 80103f0:	f04f 0c00 	mov.w	ip, #0
 80103f4:	9b01      	ldr	r3, [sp, #4]
 80103f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80103fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80103fe:	9301      	str	r3, [sp, #4]
 8010400:	fa1f f38a 	uxth.w	r3, sl
 8010404:	4619      	mov	r1, r3
 8010406:	b283      	uxth	r3, r0
 8010408:	1acb      	subs	r3, r1, r3
 801040a:	0c00      	lsrs	r0, r0, #16
 801040c:	4463      	add	r3, ip
 801040e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010412:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010416:	b29b      	uxth	r3, r3
 8010418:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801041c:	4576      	cmp	r6, lr
 801041e:	f849 3b04 	str.w	r3, [r9], #4
 8010422:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010426:	d8e5      	bhi.n	80103f4 <__mdiff+0x88>
 8010428:	1b33      	subs	r3, r6, r4
 801042a:	3b15      	subs	r3, #21
 801042c:	f023 0303 	bic.w	r3, r3, #3
 8010430:	3415      	adds	r4, #21
 8010432:	3304      	adds	r3, #4
 8010434:	42a6      	cmp	r6, r4
 8010436:	bf38      	it	cc
 8010438:	2304      	movcc	r3, #4
 801043a:	441d      	add	r5, r3
 801043c:	445b      	add	r3, fp
 801043e:	461e      	mov	r6, r3
 8010440:	462c      	mov	r4, r5
 8010442:	4544      	cmp	r4, r8
 8010444:	d30e      	bcc.n	8010464 <__mdiff+0xf8>
 8010446:	f108 0103 	add.w	r1, r8, #3
 801044a:	1b49      	subs	r1, r1, r5
 801044c:	f021 0103 	bic.w	r1, r1, #3
 8010450:	3d03      	subs	r5, #3
 8010452:	45a8      	cmp	r8, r5
 8010454:	bf38      	it	cc
 8010456:	2100      	movcc	r1, #0
 8010458:	440b      	add	r3, r1
 801045a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801045e:	b191      	cbz	r1, 8010486 <__mdiff+0x11a>
 8010460:	6117      	str	r7, [r2, #16]
 8010462:	e79d      	b.n	80103a0 <__mdiff+0x34>
 8010464:	f854 1b04 	ldr.w	r1, [r4], #4
 8010468:	46e6      	mov	lr, ip
 801046a:	0c08      	lsrs	r0, r1, #16
 801046c:	fa1c fc81 	uxtah	ip, ip, r1
 8010470:	4471      	add	r1, lr
 8010472:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010476:	b289      	uxth	r1, r1
 8010478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801047c:	f846 1b04 	str.w	r1, [r6], #4
 8010480:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010484:	e7dd      	b.n	8010442 <__mdiff+0xd6>
 8010486:	3f01      	subs	r7, #1
 8010488:	e7e7      	b.n	801045a <__mdiff+0xee>
 801048a:	bf00      	nop
 801048c:	08012b59 	.word	0x08012b59
 8010490:	08012b6a 	.word	0x08012b6a

08010494 <__d2b>:
 8010494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010498:	460f      	mov	r7, r1
 801049a:	2101      	movs	r1, #1
 801049c:	ec59 8b10 	vmov	r8, r9, d0
 80104a0:	4616      	mov	r6, r2
 80104a2:	f7ff fccd 	bl	800fe40 <_Balloc>
 80104a6:	4604      	mov	r4, r0
 80104a8:	b930      	cbnz	r0, 80104b8 <__d2b+0x24>
 80104aa:	4602      	mov	r2, r0
 80104ac:	4b23      	ldr	r3, [pc, #140]	@ (801053c <__d2b+0xa8>)
 80104ae:	4824      	ldr	r0, [pc, #144]	@ (8010540 <__d2b+0xac>)
 80104b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80104b4:	f000 fc4a 	bl	8010d4c <__assert_func>
 80104b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80104bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104c0:	b10d      	cbz	r5, 80104c6 <__d2b+0x32>
 80104c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80104c6:	9301      	str	r3, [sp, #4]
 80104c8:	f1b8 0300 	subs.w	r3, r8, #0
 80104cc:	d023      	beq.n	8010516 <__d2b+0x82>
 80104ce:	4668      	mov	r0, sp
 80104d0:	9300      	str	r3, [sp, #0]
 80104d2:	f7ff fd7c 	bl	800ffce <__lo0bits>
 80104d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80104da:	b1d0      	cbz	r0, 8010512 <__d2b+0x7e>
 80104dc:	f1c0 0320 	rsb	r3, r0, #32
 80104e0:	fa02 f303 	lsl.w	r3, r2, r3
 80104e4:	430b      	orrs	r3, r1
 80104e6:	40c2      	lsrs	r2, r0
 80104e8:	6163      	str	r3, [r4, #20]
 80104ea:	9201      	str	r2, [sp, #4]
 80104ec:	9b01      	ldr	r3, [sp, #4]
 80104ee:	61a3      	str	r3, [r4, #24]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	bf0c      	ite	eq
 80104f4:	2201      	moveq	r2, #1
 80104f6:	2202      	movne	r2, #2
 80104f8:	6122      	str	r2, [r4, #16]
 80104fa:	b1a5      	cbz	r5, 8010526 <__d2b+0x92>
 80104fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010500:	4405      	add	r5, r0
 8010502:	603d      	str	r5, [r7, #0]
 8010504:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010508:	6030      	str	r0, [r6, #0]
 801050a:	4620      	mov	r0, r4
 801050c:	b003      	add	sp, #12
 801050e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010512:	6161      	str	r1, [r4, #20]
 8010514:	e7ea      	b.n	80104ec <__d2b+0x58>
 8010516:	a801      	add	r0, sp, #4
 8010518:	f7ff fd59 	bl	800ffce <__lo0bits>
 801051c:	9b01      	ldr	r3, [sp, #4]
 801051e:	6163      	str	r3, [r4, #20]
 8010520:	3020      	adds	r0, #32
 8010522:	2201      	movs	r2, #1
 8010524:	e7e8      	b.n	80104f8 <__d2b+0x64>
 8010526:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801052a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801052e:	6038      	str	r0, [r7, #0]
 8010530:	6918      	ldr	r0, [r3, #16]
 8010532:	f7ff fd2d 	bl	800ff90 <__hi0bits>
 8010536:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801053a:	e7e5      	b.n	8010508 <__d2b+0x74>
 801053c:	08012b59 	.word	0x08012b59
 8010540:	08012b6a 	.word	0x08012b6a

08010544 <__ssputs_r>:
 8010544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010548:	688e      	ldr	r6, [r1, #8]
 801054a:	461f      	mov	r7, r3
 801054c:	42be      	cmp	r6, r7
 801054e:	680b      	ldr	r3, [r1, #0]
 8010550:	4682      	mov	sl, r0
 8010552:	460c      	mov	r4, r1
 8010554:	4690      	mov	r8, r2
 8010556:	d82d      	bhi.n	80105b4 <__ssputs_r+0x70>
 8010558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801055c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010560:	d026      	beq.n	80105b0 <__ssputs_r+0x6c>
 8010562:	6965      	ldr	r5, [r4, #20]
 8010564:	6909      	ldr	r1, [r1, #16]
 8010566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801056a:	eba3 0901 	sub.w	r9, r3, r1
 801056e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010572:	1c7b      	adds	r3, r7, #1
 8010574:	444b      	add	r3, r9
 8010576:	106d      	asrs	r5, r5, #1
 8010578:	429d      	cmp	r5, r3
 801057a:	bf38      	it	cc
 801057c:	461d      	movcc	r5, r3
 801057e:	0553      	lsls	r3, r2, #21
 8010580:	d527      	bpl.n	80105d2 <__ssputs_r+0x8e>
 8010582:	4629      	mov	r1, r5
 8010584:	f7ff fbd0 	bl	800fd28 <_malloc_r>
 8010588:	4606      	mov	r6, r0
 801058a:	b360      	cbz	r0, 80105e6 <__ssputs_r+0xa2>
 801058c:	6921      	ldr	r1, [r4, #16]
 801058e:	464a      	mov	r2, r9
 8010590:	f7fe fceb 	bl	800ef6a <memcpy>
 8010594:	89a3      	ldrh	r3, [r4, #12]
 8010596:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801059a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801059e:	81a3      	strh	r3, [r4, #12]
 80105a0:	6126      	str	r6, [r4, #16]
 80105a2:	6165      	str	r5, [r4, #20]
 80105a4:	444e      	add	r6, r9
 80105a6:	eba5 0509 	sub.w	r5, r5, r9
 80105aa:	6026      	str	r6, [r4, #0]
 80105ac:	60a5      	str	r5, [r4, #8]
 80105ae:	463e      	mov	r6, r7
 80105b0:	42be      	cmp	r6, r7
 80105b2:	d900      	bls.n	80105b6 <__ssputs_r+0x72>
 80105b4:	463e      	mov	r6, r7
 80105b6:	6820      	ldr	r0, [r4, #0]
 80105b8:	4632      	mov	r2, r6
 80105ba:	4641      	mov	r1, r8
 80105bc:	f000 fb9c 	bl	8010cf8 <memmove>
 80105c0:	68a3      	ldr	r3, [r4, #8]
 80105c2:	1b9b      	subs	r3, r3, r6
 80105c4:	60a3      	str	r3, [r4, #8]
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	4433      	add	r3, r6
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	2000      	movs	r0, #0
 80105ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105d2:	462a      	mov	r2, r5
 80105d4:	f000 fbfe 	bl	8010dd4 <_realloc_r>
 80105d8:	4606      	mov	r6, r0
 80105da:	2800      	cmp	r0, #0
 80105dc:	d1e0      	bne.n	80105a0 <__ssputs_r+0x5c>
 80105de:	6921      	ldr	r1, [r4, #16]
 80105e0:	4650      	mov	r0, sl
 80105e2:	f7ff fb2d 	bl	800fc40 <_free_r>
 80105e6:	230c      	movs	r3, #12
 80105e8:	f8ca 3000 	str.w	r3, [sl]
 80105ec:	89a3      	ldrh	r3, [r4, #12]
 80105ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105f2:	81a3      	strh	r3, [r4, #12]
 80105f4:	f04f 30ff 	mov.w	r0, #4294967295
 80105f8:	e7e9      	b.n	80105ce <__ssputs_r+0x8a>
	...

080105fc <_svfiprintf_r>:
 80105fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010600:	4698      	mov	r8, r3
 8010602:	898b      	ldrh	r3, [r1, #12]
 8010604:	061b      	lsls	r3, r3, #24
 8010606:	b09d      	sub	sp, #116	@ 0x74
 8010608:	4607      	mov	r7, r0
 801060a:	460d      	mov	r5, r1
 801060c:	4614      	mov	r4, r2
 801060e:	d510      	bpl.n	8010632 <_svfiprintf_r+0x36>
 8010610:	690b      	ldr	r3, [r1, #16]
 8010612:	b973      	cbnz	r3, 8010632 <_svfiprintf_r+0x36>
 8010614:	2140      	movs	r1, #64	@ 0x40
 8010616:	f7ff fb87 	bl	800fd28 <_malloc_r>
 801061a:	6028      	str	r0, [r5, #0]
 801061c:	6128      	str	r0, [r5, #16]
 801061e:	b930      	cbnz	r0, 801062e <_svfiprintf_r+0x32>
 8010620:	230c      	movs	r3, #12
 8010622:	603b      	str	r3, [r7, #0]
 8010624:	f04f 30ff 	mov.w	r0, #4294967295
 8010628:	b01d      	add	sp, #116	@ 0x74
 801062a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801062e:	2340      	movs	r3, #64	@ 0x40
 8010630:	616b      	str	r3, [r5, #20]
 8010632:	2300      	movs	r3, #0
 8010634:	9309      	str	r3, [sp, #36]	@ 0x24
 8010636:	2320      	movs	r3, #32
 8010638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801063c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010640:	2330      	movs	r3, #48	@ 0x30
 8010642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80107e0 <_svfiprintf_r+0x1e4>
 8010646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801064a:	f04f 0901 	mov.w	r9, #1
 801064e:	4623      	mov	r3, r4
 8010650:	469a      	mov	sl, r3
 8010652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010656:	b10a      	cbz	r2, 801065c <_svfiprintf_r+0x60>
 8010658:	2a25      	cmp	r2, #37	@ 0x25
 801065a:	d1f9      	bne.n	8010650 <_svfiprintf_r+0x54>
 801065c:	ebba 0b04 	subs.w	fp, sl, r4
 8010660:	d00b      	beq.n	801067a <_svfiprintf_r+0x7e>
 8010662:	465b      	mov	r3, fp
 8010664:	4622      	mov	r2, r4
 8010666:	4629      	mov	r1, r5
 8010668:	4638      	mov	r0, r7
 801066a:	f7ff ff6b 	bl	8010544 <__ssputs_r>
 801066e:	3001      	adds	r0, #1
 8010670:	f000 80a7 	beq.w	80107c2 <_svfiprintf_r+0x1c6>
 8010674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010676:	445a      	add	r2, fp
 8010678:	9209      	str	r2, [sp, #36]	@ 0x24
 801067a:	f89a 3000 	ldrb.w	r3, [sl]
 801067e:	2b00      	cmp	r3, #0
 8010680:	f000 809f 	beq.w	80107c2 <_svfiprintf_r+0x1c6>
 8010684:	2300      	movs	r3, #0
 8010686:	f04f 32ff 	mov.w	r2, #4294967295
 801068a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801068e:	f10a 0a01 	add.w	sl, sl, #1
 8010692:	9304      	str	r3, [sp, #16]
 8010694:	9307      	str	r3, [sp, #28]
 8010696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801069a:	931a      	str	r3, [sp, #104]	@ 0x68
 801069c:	4654      	mov	r4, sl
 801069e:	2205      	movs	r2, #5
 80106a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106a4:	484e      	ldr	r0, [pc, #312]	@ (80107e0 <_svfiprintf_r+0x1e4>)
 80106a6:	f7ef fd93 	bl	80001d0 <memchr>
 80106aa:	9a04      	ldr	r2, [sp, #16]
 80106ac:	b9d8      	cbnz	r0, 80106e6 <_svfiprintf_r+0xea>
 80106ae:	06d0      	lsls	r0, r2, #27
 80106b0:	bf44      	itt	mi
 80106b2:	2320      	movmi	r3, #32
 80106b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106b8:	0711      	lsls	r1, r2, #28
 80106ba:	bf44      	itt	mi
 80106bc:	232b      	movmi	r3, #43	@ 0x2b
 80106be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106c2:	f89a 3000 	ldrb.w	r3, [sl]
 80106c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80106c8:	d015      	beq.n	80106f6 <_svfiprintf_r+0xfa>
 80106ca:	9a07      	ldr	r2, [sp, #28]
 80106cc:	4654      	mov	r4, sl
 80106ce:	2000      	movs	r0, #0
 80106d0:	f04f 0c0a 	mov.w	ip, #10
 80106d4:	4621      	mov	r1, r4
 80106d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106da:	3b30      	subs	r3, #48	@ 0x30
 80106dc:	2b09      	cmp	r3, #9
 80106de:	d94b      	bls.n	8010778 <_svfiprintf_r+0x17c>
 80106e0:	b1b0      	cbz	r0, 8010710 <_svfiprintf_r+0x114>
 80106e2:	9207      	str	r2, [sp, #28]
 80106e4:	e014      	b.n	8010710 <_svfiprintf_r+0x114>
 80106e6:	eba0 0308 	sub.w	r3, r0, r8
 80106ea:	fa09 f303 	lsl.w	r3, r9, r3
 80106ee:	4313      	orrs	r3, r2
 80106f0:	9304      	str	r3, [sp, #16]
 80106f2:	46a2      	mov	sl, r4
 80106f4:	e7d2      	b.n	801069c <_svfiprintf_r+0xa0>
 80106f6:	9b03      	ldr	r3, [sp, #12]
 80106f8:	1d19      	adds	r1, r3, #4
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	9103      	str	r1, [sp, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	bfbb      	ittet	lt
 8010702:	425b      	neglt	r3, r3
 8010704:	f042 0202 	orrlt.w	r2, r2, #2
 8010708:	9307      	strge	r3, [sp, #28]
 801070a:	9307      	strlt	r3, [sp, #28]
 801070c:	bfb8      	it	lt
 801070e:	9204      	strlt	r2, [sp, #16]
 8010710:	7823      	ldrb	r3, [r4, #0]
 8010712:	2b2e      	cmp	r3, #46	@ 0x2e
 8010714:	d10a      	bne.n	801072c <_svfiprintf_r+0x130>
 8010716:	7863      	ldrb	r3, [r4, #1]
 8010718:	2b2a      	cmp	r3, #42	@ 0x2a
 801071a:	d132      	bne.n	8010782 <_svfiprintf_r+0x186>
 801071c:	9b03      	ldr	r3, [sp, #12]
 801071e:	1d1a      	adds	r2, r3, #4
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	9203      	str	r2, [sp, #12]
 8010724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010728:	3402      	adds	r4, #2
 801072a:	9305      	str	r3, [sp, #20]
 801072c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80107f0 <_svfiprintf_r+0x1f4>
 8010730:	7821      	ldrb	r1, [r4, #0]
 8010732:	2203      	movs	r2, #3
 8010734:	4650      	mov	r0, sl
 8010736:	f7ef fd4b 	bl	80001d0 <memchr>
 801073a:	b138      	cbz	r0, 801074c <_svfiprintf_r+0x150>
 801073c:	9b04      	ldr	r3, [sp, #16]
 801073e:	eba0 000a 	sub.w	r0, r0, sl
 8010742:	2240      	movs	r2, #64	@ 0x40
 8010744:	4082      	lsls	r2, r0
 8010746:	4313      	orrs	r3, r2
 8010748:	3401      	adds	r4, #1
 801074a:	9304      	str	r3, [sp, #16]
 801074c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010750:	4824      	ldr	r0, [pc, #144]	@ (80107e4 <_svfiprintf_r+0x1e8>)
 8010752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010756:	2206      	movs	r2, #6
 8010758:	f7ef fd3a 	bl	80001d0 <memchr>
 801075c:	2800      	cmp	r0, #0
 801075e:	d036      	beq.n	80107ce <_svfiprintf_r+0x1d2>
 8010760:	4b21      	ldr	r3, [pc, #132]	@ (80107e8 <_svfiprintf_r+0x1ec>)
 8010762:	bb1b      	cbnz	r3, 80107ac <_svfiprintf_r+0x1b0>
 8010764:	9b03      	ldr	r3, [sp, #12]
 8010766:	3307      	adds	r3, #7
 8010768:	f023 0307 	bic.w	r3, r3, #7
 801076c:	3308      	adds	r3, #8
 801076e:	9303      	str	r3, [sp, #12]
 8010770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010772:	4433      	add	r3, r6
 8010774:	9309      	str	r3, [sp, #36]	@ 0x24
 8010776:	e76a      	b.n	801064e <_svfiprintf_r+0x52>
 8010778:	fb0c 3202 	mla	r2, ip, r2, r3
 801077c:	460c      	mov	r4, r1
 801077e:	2001      	movs	r0, #1
 8010780:	e7a8      	b.n	80106d4 <_svfiprintf_r+0xd8>
 8010782:	2300      	movs	r3, #0
 8010784:	3401      	adds	r4, #1
 8010786:	9305      	str	r3, [sp, #20]
 8010788:	4619      	mov	r1, r3
 801078a:	f04f 0c0a 	mov.w	ip, #10
 801078e:	4620      	mov	r0, r4
 8010790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010794:	3a30      	subs	r2, #48	@ 0x30
 8010796:	2a09      	cmp	r2, #9
 8010798:	d903      	bls.n	80107a2 <_svfiprintf_r+0x1a6>
 801079a:	2b00      	cmp	r3, #0
 801079c:	d0c6      	beq.n	801072c <_svfiprintf_r+0x130>
 801079e:	9105      	str	r1, [sp, #20]
 80107a0:	e7c4      	b.n	801072c <_svfiprintf_r+0x130>
 80107a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80107a6:	4604      	mov	r4, r0
 80107a8:	2301      	movs	r3, #1
 80107aa:	e7f0      	b.n	801078e <_svfiprintf_r+0x192>
 80107ac:	ab03      	add	r3, sp, #12
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	462a      	mov	r2, r5
 80107b2:	4b0e      	ldr	r3, [pc, #56]	@ (80107ec <_svfiprintf_r+0x1f0>)
 80107b4:	a904      	add	r1, sp, #16
 80107b6:	4638      	mov	r0, r7
 80107b8:	f7fd fe68 	bl	800e48c <_printf_float>
 80107bc:	1c42      	adds	r2, r0, #1
 80107be:	4606      	mov	r6, r0
 80107c0:	d1d6      	bne.n	8010770 <_svfiprintf_r+0x174>
 80107c2:	89ab      	ldrh	r3, [r5, #12]
 80107c4:	065b      	lsls	r3, r3, #25
 80107c6:	f53f af2d 	bmi.w	8010624 <_svfiprintf_r+0x28>
 80107ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107cc:	e72c      	b.n	8010628 <_svfiprintf_r+0x2c>
 80107ce:	ab03      	add	r3, sp, #12
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	462a      	mov	r2, r5
 80107d4:	4b05      	ldr	r3, [pc, #20]	@ (80107ec <_svfiprintf_r+0x1f0>)
 80107d6:	a904      	add	r1, sp, #16
 80107d8:	4638      	mov	r0, r7
 80107da:	f7fe f8ef 	bl	800e9bc <_printf_i>
 80107de:	e7ed      	b.n	80107bc <_svfiprintf_r+0x1c0>
 80107e0:	08012cc0 	.word	0x08012cc0
 80107e4:	08012cca 	.word	0x08012cca
 80107e8:	0800e48d 	.word	0x0800e48d
 80107ec:	08010545 	.word	0x08010545
 80107f0:	08012cc6 	.word	0x08012cc6

080107f4 <__sfputc_r>:
 80107f4:	6893      	ldr	r3, [r2, #8]
 80107f6:	3b01      	subs	r3, #1
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	b410      	push	{r4}
 80107fc:	6093      	str	r3, [r2, #8]
 80107fe:	da08      	bge.n	8010812 <__sfputc_r+0x1e>
 8010800:	6994      	ldr	r4, [r2, #24]
 8010802:	42a3      	cmp	r3, r4
 8010804:	db01      	blt.n	801080a <__sfputc_r+0x16>
 8010806:	290a      	cmp	r1, #10
 8010808:	d103      	bne.n	8010812 <__sfputc_r+0x1e>
 801080a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801080e:	f000 b9df 	b.w	8010bd0 <__swbuf_r>
 8010812:	6813      	ldr	r3, [r2, #0]
 8010814:	1c58      	adds	r0, r3, #1
 8010816:	6010      	str	r0, [r2, #0]
 8010818:	7019      	strb	r1, [r3, #0]
 801081a:	4608      	mov	r0, r1
 801081c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010820:	4770      	bx	lr

08010822 <__sfputs_r>:
 8010822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010824:	4606      	mov	r6, r0
 8010826:	460f      	mov	r7, r1
 8010828:	4614      	mov	r4, r2
 801082a:	18d5      	adds	r5, r2, r3
 801082c:	42ac      	cmp	r4, r5
 801082e:	d101      	bne.n	8010834 <__sfputs_r+0x12>
 8010830:	2000      	movs	r0, #0
 8010832:	e007      	b.n	8010844 <__sfputs_r+0x22>
 8010834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010838:	463a      	mov	r2, r7
 801083a:	4630      	mov	r0, r6
 801083c:	f7ff ffda 	bl	80107f4 <__sfputc_r>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	d1f3      	bne.n	801082c <__sfputs_r+0xa>
 8010844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010848 <_vfiprintf_r>:
 8010848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084c:	460d      	mov	r5, r1
 801084e:	b09d      	sub	sp, #116	@ 0x74
 8010850:	4614      	mov	r4, r2
 8010852:	4698      	mov	r8, r3
 8010854:	4606      	mov	r6, r0
 8010856:	b118      	cbz	r0, 8010860 <_vfiprintf_r+0x18>
 8010858:	6a03      	ldr	r3, [r0, #32]
 801085a:	b90b      	cbnz	r3, 8010860 <_vfiprintf_r+0x18>
 801085c:	f7fe fa5a 	bl	800ed14 <__sinit>
 8010860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010862:	07d9      	lsls	r1, r3, #31
 8010864:	d405      	bmi.n	8010872 <_vfiprintf_r+0x2a>
 8010866:	89ab      	ldrh	r3, [r5, #12]
 8010868:	059a      	lsls	r2, r3, #22
 801086a:	d402      	bmi.n	8010872 <_vfiprintf_r+0x2a>
 801086c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801086e:	f7fe fb7a 	bl	800ef66 <__retarget_lock_acquire_recursive>
 8010872:	89ab      	ldrh	r3, [r5, #12]
 8010874:	071b      	lsls	r3, r3, #28
 8010876:	d501      	bpl.n	801087c <_vfiprintf_r+0x34>
 8010878:	692b      	ldr	r3, [r5, #16]
 801087a:	b99b      	cbnz	r3, 80108a4 <_vfiprintf_r+0x5c>
 801087c:	4629      	mov	r1, r5
 801087e:	4630      	mov	r0, r6
 8010880:	f000 f9e4 	bl	8010c4c <__swsetup_r>
 8010884:	b170      	cbz	r0, 80108a4 <_vfiprintf_r+0x5c>
 8010886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010888:	07dc      	lsls	r4, r3, #31
 801088a:	d504      	bpl.n	8010896 <_vfiprintf_r+0x4e>
 801088c:	f04f 30ff 	mov.w	r0, #4294967295
 8010890:	b01d      	add	sp, #116	@ 0x74
 8010892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010896:	89ab      	ldrh	r3, [r5, #12]
 8010898:	0598      	lsls	r0, r3, #22
 801089a:	d4f7      	bmi.n	801088c <_vfiprintf_r+0x44>
 801089c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801089e:	f7fe fb63 	bl	800ef68 <__retarget_lock_release_recursive>
 80108a2:	e7f3      	b.n	801088c <_vfiprintf_r+0x44>
 80108a4:	2300      	movs	r3, #0
 80108a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80108a8:	2320      	movs	r3, #32
 80108aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80108ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80108b2:	2330      	movs	r3, #48	@ 0x30
 80108b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010a64 <_vfiprintf_r+0x21c>
 80108b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80108bc:	f04f 0901 	mov.w	r9, #1
 80108c0:	4623      	mov	r3, r4
 80108c2:	469a      	mov	sl, r3
 80108c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108c8:	b10a      	cbz	r2, 80108ce <_vfiprintf_r+0x86>
 80108ca:	2a25      	cmp	r2, #37	@ 0x25
 80108cc:	d1f9      	bne.n	80108c2 <_vfiprintf_r+0x7a>
 80108ce:	ebba 0b04 	subs.w	fp, sl, r4
 80108d2:	d00b      	beq.n	80108ec <_vfiprintf_r+0xa4>
 80108d4:	465b      	mov	r3, fp
 80108d6:	4622      	mov	r2, r4
 80108d8:	4629      	mov	r1, r5
 80108da:	4630      	mov	r0, r6
 80108dc:	f7ff ffa1 	bl	8010822 <__sfputs_r>
 80108e0:	3001      	adds	r0, #1
 80108e2:	f000 80a7 	beq.w	8010a34 <_vfiprintf_r+0x1ec>
 80108e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108e8:	445a      	add	r2, fp
 80108ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80108ec:	f89a 3000 	ldrb.w	r3, [sl]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f000 809f 	beq.w	8010a34 <_vfiprintf_r+0x1ec>
 80108f6:	2300      	movs	r3, #0
 80108f8:	f04f 32ff 	mov.w	r2, #4294967295
 80108fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010900:	f10a 0a01 	add.w	sl, sl, #1
 8010904:	9304      	str	r3, [sp, #16]
 8010906:	9307      	str	r3, [sp, #28]
 8010908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801090c:	931a      	str	r3, [sp, #104]	@ 0x68
 801090e:	4654      	mov	r4, sl
 8010910:	2205      	movs	r2, #5
 8010912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010916:	4853      	ldr	r0, [pc, #332]	@ (8010a64 <_vfiprintf_r+0x21c>)
 8010918:	f7ef fc5a 	bl	80001d0 <memchr>
 801091c:	9a04      	ldr	r2, [sp, #16]
 801091e:	b9d8      	cbnz	r0, 8010958 <_vfiprintf_r+0x110>
 8010920:	06d1      	lsls	r1, r2, #27
 8010922:	bf44      	itt	mi
 8010924:	2320      	movmi	r3, #32
 8010926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801092a:	0713      	lsls	r3, r2, #28
 801092c:	bf44      	itt	mi
 801092e:	232b      	movmi	r3, #43	@ 0x2b
 8010930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010934:	f89a 3000 	ldrb.w	r3, [sl]
 8010938:	2b2a      	cmp	r3, #42	@ 0x2a
 801093a:	d015      	beq.n	8010968 <_vfiprintf_r+0x120>
 801093c:	9a07      	ldr	r2, [sp, #28]
 801093e:	4654      	mov	r4, sl
 8010940:	2000      	movs	r0, #0
 8010942:	f04f 0c0a 	mov.w	ip, #10
 8010946:	4621      	mov	r1, r4
 8010948:	f811 3b01 	ldrb.w	r3, [r1], #1
 801094c:	3b30      	subs	r3, #48	@ 0x30
 801094e:	2b09      	cmp	r3, #9
 8010950:	d94b      	bls.n	80109ea <_vfiprintf_r+0x1a2>
 8010952:	b1b0      	cbz	r0, 8010982 <_vfiprintf_r+0x13a>
 8010954:	9207      	str	r2, [sp, #28]
 8010956:	e014      	b.n	8010982 <_vfiprintf_r+0x13a>
 8010958:	eba0 0308 	sub.w	r3, r0, r8
 801095c:	fa09 f303 	lsl.w	r3, r9, r3
 8010960:	4313      	orrs	r3, r2
 8010962:	9304      	str	r3, [sp, #16]
 8010964:	46a2      	mov	sl, r4
 8010966:	e7d2      	b.n	801090e <_vfiprintf_r+0xc6>
 8010968:	9b03      	ldr	r3, [sp, #12]
 801096a:	1d19      	adds	r1, r3, #4
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	9103      	str	r1, [sp, #12]
 8010970:	2b00      	cmp	r3, #0
 8010972:	bfbb      	ittet	lt
 8010974:	425b      	neglt	r3, r3
 8010976:	f042 0202 	orrlt.w	r2, r2, #2
 801097a:	9307      	strge	r3, [sp, #28]
 801097c:	9307      	strlt	r3, [sp, #28]
 801097e:	bfb8      	it	lt
 8010980:	9204      	strlt	r2, [sp, #16]
 8010982:	7823      	ldrb	r3, [r4, #0]
 8010984:	2b2e      	cmp	r3, #46	@ 0x2e
 8010986:	d10a      	bne.n	801099e <_vfiprintf_r+0x156>
 8010988:	7863      	ldrb	r3, [r4, #1]
 801098a:	2b2a      	cmp	r3, #42	@ 0x2a
 801098c:	d132      	bne.n	80109f4 <_vfiprintf_r+0x1ac>
 801098e:	9b03      	ldr	r3, [sp, #12]
 8010990:	1d1a      	adds	r2, r3, #4
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	9203      	str	r2, [sp, #12]
 8010996:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801099a:	3402      	adds	r4, #2
 801099c:	9305      	str	r3, [sp, #20]
 801099e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010a74 <_vfiprintf_r+0x22c>
 80109a2:	7821      	ldrb	r1, [r4, #0]
 80109a4:	2203      	movs	r2, #3
 80109a6:	4650      	mov	r0, sl
 80109a8:	f7ef fc12 	bl	80001d0 <memchr>
 80109ac:	b138      	cbz	r0, 80109be <_vfiprintf_r+0x176>
 80109ae:	9b04      	ldr	r3, [sp, #16]
 80109b0:	eba0 000a 	sub.w	r0, r0, sl
 80109b4:	2240      	movs	r2, #64	@ 0x40
 80109b6:	4082      	lsls	r2, r0
 80109b8:	4313      	orrs	r3, r2
 80109ba:	3401      	adds	r4, #1
 80109bc:	9304      	str	r3, [sp, #16]
 80109be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109c2:	4829      	ldr	r0, [pc, #164]	@ (8010a68 <_vfiprintf_r+0x220>)
 80109c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80109c8:	2206      	movs	r2, #6
 80109ca:	f7ef fc01 	bl	80001d0 <memchr>
 80109ce:	2800      	cmp	r0, #0
 80109d0:	d03f      	beq.n	8010a52 <_vfiprintf_r+0x20a>
 80109d2:	4b26      	ldr	r3, [pc, #152]	@ (8010a6c <_vfiprintf_r+0x224>)
 80109d4:	bb1b      	cbnz	r3, 8010a1e <_vfiprintf_r+0x1d6>
 80109d6:	9b03      	ldr	r3, [sp, #12]
 80109d8:	3307      	adds	r3, #7
 80109da:	f023 0307 	bic.w	r3, r3, #7
 80109de:	3308      	adds	r3, #8
 80109e0:	9303      	str	r3, [sp, #12]
 80109e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109e4:	443b      	add	r3, r7
 80109e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80109e8:	e76a      	b.n	80108c0 <_vfiprintf_r+0x78>
 80109ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80109ee:	460c      	mov	r4, r1
 80109f0:	2001      	movs	r0, #1
 80109f2:	e7a8      	b.n	8010946 <_vfiprintf_r+0xfe>
 80109f4:	2300      	movs	r3, #0
 80109f6:	3401      	adds	r4, #1
 80109f8:	9305      	str	r3, [sp, #20]
 80109fa:	4619      	mov	r1, r3
 80109fc:	f04f 0c0a 	mov.w	ip, #10
 8010a00:	4620      	mov	r0, r4
 8010a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a06:	3a30      	subs	r2, #48	@ 0x30
 8010a08:	2a09      	cmp	r2, #9
 8010a0a:	d903      	bls.n	8010a14 <_vfiprintf_r+0x1cc>
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d0c6      	beq.n	801099e <_vfiprintf_r+0x156>
 8010a10:	9105      	str	r1, [sp, #20]
 8010a12:	e7c4      	b.n	801099e <_vfiprintf_r+0x156>
 8010a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a18:	4604      	mov	r4, r0
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e7f0      	b.n	8010a00 <_vfiprintf_r+0x1b8>
 8010a1e:	ab03      	add	r3, sp, #12
 8010a20:	9300      	str	r3, [sp, #0]
 8010a22:	462a      	mov	r2, r5
 8010a24:	4b12      	ldr	r3, [pc, #72]	@ (8010a70 <_vfiprintf_r+0x228>)
 8010a26:	a904      	add	r1, sp, #16
 8010a28:	4630      	mov	r0, r6
 8010a2a:	f7fd fd2f 	bl	800e48c <_printf_float>
 8010a2e:	4607      	mov	r7, r0
 8010a30:	1c78      	adds	r0, r7, #1
 8010a32:	d1d6      	bne.n	80109e2 <_vfiprintf_r+0x19a>
 8010a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a36:	07d9      	lsls	r1, r3, #31
 8010a38:	d405      	bmi.n	8010a46 <_vfiprintf_r+0x1fe>
 8010a3a:	89ab      	ldrh	r3, [r5, #12]
 8010a3c:	059a      	lsls	r2, r3, #22
 8010a3e:	d402      	bmi.n	8010a46 <_vfiprintf_r+0x1fe>
 8010a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a42:	f7fe fa91 	bl	800ef68 <__retarget_lock_release_recursive>
 8010a46:	89ab      	ldrh	r3, [r5, #12]
 8010a48:	065b      	lsls	r3, r3, #25
 8010a4a:	f53f af1f 	bmi.w	801088c <_vfiprintf_r+0x44>
 8010a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a50:	e71e      	b.n	8010890 <_vfiprintf_r+0x48>
 8010a52:	ab03      	add	r3, sp, #12
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	462a      	mov	r2, r5
 8010a58:	4b05      	ldr	r3, [pc, #20]	@ (8010a70 <_vfiprintf_r+0x228>)
 8010a5a:	a904      	add	r1, sp, #16
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	f7fd ffad 	bl	800e9bc <_printf_i>
 8010a62:	e7e4      	b.n	8010a2e <_vfiprintf_r+0x1e6>
 8010a64:	08012cc0 	.word	0x08012cc0
 8010a68:	08012cca 	.word	0x08012cca
 8010a6c:	0800e48d 	.word	0x0800e48d
 8010a70:	08010823 	.word	0x08010823
 8010a74:	08012cc6 	.word	0x08012cc6

08010a78 <__sflush_r>:
 8010a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a80:	0716      	lsls	r6, r2, #28
 8010a82:	4605      	mov	r5, r0
 8010a84:	460c      	mov	r4, r1
 8010a86:	d454      	bmi.n	8010b32 <__sflush_r+0xba>
 8010a88:	684b      	ldr	r3, [r1, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dc02      	bgt.n	8010a94 <__sflush_r+0x1c>
 8010a8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	dd48      	ble.n	8010b26 <__sflush_r+0xae>
 8010a94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a96:	2e00      	cmp	r6, #0
 8010a98:	d045      	beq.n	8010b26 <__sflush_r+0xae>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010aa0:	682f      	ldr	r7, [r5, #0]
 8010aa2:	6a21      	ldr	r1, [r4, #32]
 8010aa4:	602b      	str	r3, [r5, #0]
 8010aa6:	d030      	beq.n	8010b0a <__sflush_r+0x92>
 8010aa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010aaa:	89a3      	ldrh	r3, [r4, #12]
 8010aac:	0759      	lsls	r1, r3, #29
 8010aae:	d505      	bpl.n	8010abc <__sflush_r+0x44>
 8010ab0:	6863      	ldr	r3, [r4, #4]
 8010ab2:	1ad2      	subs	r2, r2, r3
 8010ab4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ab6:	b10b      	cbz	r3, 8010abc <__sflush_r+0x44>
 8010ab8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010aba:	1ad2      	subs	r2, r2, r3
 8010abc:	2300      	movs	r3, #0
 8010abe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ac0:	6a21      	ldr	r1, [r4, #32]
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	47b0      	blx	r6
 8010ac6:	1c43      	adds	r3, r0, #1
 8010ac8:	89a3      	ldrh	r3, [r4, #12]
 8010aca:	d106      	bne.n	8010ada <__sflush_r+0x62>
 8010acc:	6829      	ldr	r1, [r5, #0]
 8010ace:	291d      	cmp	r1, #29
 8010ad0:	d82b      	bhi.n	8010b2a <__sflush_r+0xb2>
 8010ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8010b7c <__sflush_r+0x104>)
 8010ad4:	410a      	asrs	r2, r1
 8010ad6:	07d6      	lsls	r6, r2, #31
 8010ad8:	d427      	bmi.n	8010b2a <__sflush_r+0xb2>
 8010ada:	2200      	movs	r2, #0
 8010adc:	6062      	str	r2, [r4, #4]
 8010ade:	04d9      	lsls	r1, r3, #19
 8010ae0:	6922      	ldr	r2, [r4, #16]
 8010ae2:	6022      	str	r2, [r4, #0]
 8010ae4:	d504      	bpl.n	8010af0 <__sflush_r+0x78>
 8010ae6:	1c42      	adds	r2, r0, #1
 8010ae8:	d101      	bne.n	8010aee <__sflush_r+0x76>
 8010aea:	682b      	ldr	r3, [r5, #0]
 8010aec:	b903      	cbnz	r3, 8010af0 <__sflush_r+0x78>
 8010aee:	6560      	str	r0, [r4, #84]	@ 0x54
 8010af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010af2:	602f      	str	r7, [r5, #0]
 8010af4:	b1b9      	cbz	r1, 8010b26 <__sflush_r+0xae>
 8010af6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010afa:	4299      	cmp	r1, r3
 8010afc:	d002      	beq.n	8010b04 <__sflush_r+0x8c>
 8010afe:	4628      	mov	r0, r5
 8010b00:	f7ff f89e 	bl	800fc40 <_free_r>
 8010b04:	2300      	movs	r3, #0
 8010b06:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b08:	e00d      	b.n	8010b26 <__sflush_r+0xae>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	47b0      	blx	r6
 8010b10:	4602      	mov	r2, r0
 8010b12:	1c50      	adds	r0, r2, #1
 8010b14:	d1c9      	bne.n	8010aaa <__sflush_r+0x32>
 8010b16:	682b      	ldr	r3, [r5, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d0c6      	beq.n	8010aaa <__sflush_r+0x32>
 8010b1c:	2b1d      	cmp	r3, #29
 8010b1e:	d001      	beq.n	8010b24 <__sflush_r+0xac>
 8010b20:	2b16      	cmp	r3, #22
 8010b22:	d11e      	bne.n	8010b62 <__sflush_r+0xea>
 8010b24:	602f      	str	r7, [r5, #0]
 8010b26:	2000      	movs	r0, #0
 8010b28:	e022      	b.n	8010b70 <__sflush_r+0xf8>
 8010b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b2e:	b21b      	sxth	r3, r3
 8010b30:	e01b      	b.n	8010b6a <__sflush_r+0xf2>
 8010b32:	690f      	ldr	r7, [r1, #16]
 8010b34:	2f00      	cmp	r7, #0
 8010b36:	d0f6      	beq.n	8010b26 <__sflush_r+0xae>
 8010b38:	0793      	lsls	r3, r2, #30
 8010b3a:	680e      	ldr	r6, [r1, #0]
 8010b3c:	bf08      	it	eq
 8010b3e:	694b      	ldreq	r3, [r1, #20]
 8010b40:	600f      	str	r7, [r1, #0]
 8010b42:	bf18      	it	ne
 8010b44:	2300      	movne	r3, #0
 8010b46:	eba6 0807 	sub.w	r8, r6, r7
 8010b4a:	608b      	str	r3, [r1, #8]
 8010b4c:	f1b8 0f00 	cmp.w	r8, #0
 8010b50:	dde9      	ble.n	8010b26 <__sflush_r+0xae>
 8010b52:	6a21      	ldr	r1, [r4, #32]
 8010b54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010b56:	4643      	mov	r3, r8
 8010b58:	463a      	mov	r2, r7
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	47b0      	blx	r6
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	dc08      	bgt.n	8010b74 <__sflush_r+0xfc>
 8010b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b6a:	81a3      	strh	r3, [r4, #12]
 8010b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b74:	4407      	add	r7, r0
 8010b76:	eba8 0800 	sub.w	r8, r8, r0
 8010b7a:	e7e7      	b.n	8010b4c <__sflush_r+0xd4>
 8010b7c:	dfbffffe 	.word	0xdfbffffe

08010b80 <_fflush_r>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	690b      	ldr	r3, [r1, #16]
 8010b84:	4605      	mov	r5, r0
 8010b86:	460c      	mov	r4, r1
 8010b88:	b913      	cbnz	r3, 8010b90 <_fflush_r+0x10>
 8010b8a:	2500      	movs	r5, #0
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	bd38      	pop	{r3, r4, r5, pc}
 8010b90:	b118      	cbz	r0, 8010b9a <_fflush_r+0x1a>
 8010b92:	6a03      	ldr	r3, [r0, #32]
 8010b94:	b90b      	cbnz	r3, 8010b9a <_fflush_r+0x1a>
 8010b96:	f7fe f8bd 	bl	800ed14 <__sinit>
 8010b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d0f3      	beq.n	8010b8a <_fflush_r+0xa>
 8010ba2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ba4:	07d0      	lsls	r0, r2, #31
 8010ba6:	d404      	bmi.n	8010bb2 <_fflush_r+0x32>
 8010ba8:	0599      	lsls	r1, r3, #22
 8010baa:	d402      	bmi.n	8010bb2 <_fflush_r+0x32>
 8010bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bae:	f7fe f9da 	bl	800ef66 <__retarget_lock_acquire_recursive>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	f7ff ff5f 	bl	8010a78 <__sflush_r>
 8010bba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010bbc:	07da      	lsls	r2, r3, #31
 8010bbe:	4605      	mov	r5, r0
 8010bc0:	d4e4      	bmi.n	8010b8c <_fflush_r+0xc>
 8010bc2:	89a3      	ldrh	r3, [r4, #12]
 8010bc4:	059b      	lsls	r3, r3, #22
 8010bc6:	d4e1      	bmi.n	8010b8c <_fflush_r+0xc>
 8010bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bca:	f7fe f9cd 	bl	800ef68 <__retarget_lock_release_recursive>
 8010bce:	e7dd      	b.n	8010b8c <_fflush_r+0xc>

08010bd0 <__swbuf_r>:
 8010bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bd2:	460e      	mov	r6, r1
 8010bd4:	4614      	mov	r4, r2
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	b118      	cbz	r0, 8010be2 <__swbuf_r+0x12>
 8010bda:	6a03      	ldr	r3, [r0, #32]
 8010bdc:	b90b      	cbnz	r3, 8010be2 <__swbuf_r+0x12>
 8010bde:	f7fe f899 	bl	800ed14 <__sinit>
 8010be2:	69a3      	ldr	r3, [r4, #24]
 8010be4:	60a3      	str	r3, [r4, #8]
 8010be6:	89a3      	ldrh	r3, [r4, #12]
 8010be8:	071a      	lsls	r2, r3, #28
 8010bea:	d501      	bpl.n	8010bf0 <__swbuf_r+0x20>
 8010bec:	6923      	ldr	r3, [r4, #16]
 8010bee:	b943      	cbnz	r3, 8010c02 <__swbuf_r+0x32>
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f000 f82a 	bl	8010c4c <__swsetup_r>
 8010bf8:	b118      	cbz	r0, 8010c02 <__swbuf_r+0x32>
 8010bfa:	f04f 37ff 	mov.w	r7, #4294967295
 8010bfe:	4638      	mov	r0, r7
 8010c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c02:	6823      	ldr	r3, [r4, #0]
 8010c04:	6922      	ldr	r2, [r4, #16]
 8010c06:	1a98      	subs	r0, r3, r2
 8010c08:	6963      	ldr	r3, [r4, #20]
 8010c0a:	b2f6      	uxtb	r6, r6
 8010c0c:	4283      	cmp	r3, r0
 8010c0e:	4637      	mov	r7, r6
 8010c10:	dc05      	bgt.n	8010c1e <__swbuf_r+0x4e>
 8010c12:	4621      	mov	r1, r4
 8010c14:	4628      	mov	r0, r5
 8010c16:	f7ff ffb3 	bl	8010b80 <_fflush_r>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d1ed      	bne.n	8010bfa <__swbuf_r+0x2a>
 8010c1e:	68a3      	ldr	r3, [r4, #8]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	60a3      	str	r3, [r4, #8]
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	1c5a      	adds	r2, r3, #1
 8010c28:	6022      	str	r2, [r4, #0]
 8010c2a:	701e      	strb	r6, [r3, #0]
 8010c2c:	6962      	ldr	r2, [r4, #20]
 8010c2e:	1c43      	adds	r3, r0, #1
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d004      	beq.n	8010c3e <__swbuf_r+0x6e>
 8010c34:	89a3      	ldrh	r3, [r4, #12]
 8010c36:	07db      	lsls	r3, r3, #31
 8010c38:	d5e1      	bpl.n	8010bfe <__swbuf_r+0x2e>
 8010c3a:	2e0a      	cmp	r6, #10
 8010c3c:	d1df      	bne.n	8010bfe <__swbuf_r+0x2e>
 8010c3e:	4621      	mov	r1, r4
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7ff ff9d 	bl	8010b80 <_fflush_r>
 8010c46:	2800      	cmp	r0, #0
 8010c48:	d0d9      	beq.n	8010bfe <__swbuf_r+0x2e>
 8010c4a:	e7d6      	b.n	8010bfa <__swbuf_r+0x2a>

08010c4c <__swsetup_r>:
 8010c4c:	b538      	push	{r3, r4, r5, lr}
 8010c4e:	4b29      	ldr	r3, [pc, #164]	@ (8010cf4 <__swsetup_r+0xa8>)
 8010c50:	4605      	mov	r5, r0
 8010c52:	6818      	ldr	r0, [r3, #0]
 8010c54:	460c      	mov	r4, r1
 8010c56:	b118      	cbz	r0, 8010c60 <__swsetup_r+0x14>
 8010c58:	6a03      	ldr	r3, [r0, #32]
 8010c5a:	b90b      	cbnz	r3, 8010c60 <__swsetup_r+0x14>
 8010c5c:	f7fe f85a 	bl	800ed14 <__sinit>
 8010c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c64:	0719      	lsls	r1, r3, #28
 8010c66:	d422      	bmi.n	8010cae <__swsetup_r+0x62>
 8010c68:	06da      	lsls	r2, r3, #27
 8010c6a:	d407      	bmi.n	8010c7c <__swsetup_r+0x30>
 8010c6c:	2209      	movs	r2, #9
 8010c6e:	602a      	str	r2, [r5, #0]
 8010c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c74:	81a3      	strh	r3, [r4, #12]
 8010c76:	f04f 30ff 	mov.w	r0, #4294967295
 8010c7a:	e033      	b.n	8010ce4 <__swsetup_r+0x98>
 8010c7c:	0758      	lsls	r0, r3, #29
 8010c7e:	d512      	bpl.n	8010ca6 <__swsetup_r+0x5a>
 8010c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c82:	b141      	cbz	r1, 8010c96 <__swsetup_r+0x4a>
 8010c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c88:	4299      	cmp	r1, r3
 8010c8a:	d002      	beq.n	8010c92 <__swsetup_r+0x46>
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f7fe ffd7 	bl	800fc40 <_free_r>
 8010c92:	2300      	movs	r3, #0
 8010c94:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c96:	89a3      	ldrh	r3, [r4, #12]
 8010c98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c9c:	81a3      	strh	r3, [r4, #12]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	6063      	str	r3, [r4, #4]
 8010ca2:	6923      	ldr	r3, [r4, #16]
 8010ca4:	6023      	str	r3, [r4, #0]
 8010ca6:	89a3      	ldrh	r3, [r4, #12]
 8010ca8:	f043 0308 	orr.w	r3, r3, #8
 8010cac:	81a3      	strh	r3, [r4, #12]
 8010cae:	6923      	ldr	r3, [r4, #16]
 8010cb0:	b94b      	cbnz	r3, 8010cc6 <__swsetup_r+0x7a>
 8010cb2:	89a3      	ldrh	r3, [r4, #12]
 8010cb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010cbc:	d003      	beq.n	8010cc6 <__swsetup_r+0x7a>
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f000 f8fb 	bl	8010ebc <__smakebuf_r>
 8010cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cca:	f013 0201 	ands.w	r2, r3, #1
 8010cce:	d00a      	beq.n	8010ce6 <__swsetup_r+0x9a>
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	60a2      	str	r2, [r4, #8]
 8010cd4:	6962      	ldr	r2, [r4, #20]
 8010cd6:	4252      	negs	r2, r2
 8010cd8:	61a2      	str	r2, [r4, #24]
 8010cda:	6922      	ldr	r2, [r4, #16]
 8010cdc:	b942      	cbnz	r2, 8010cf0 <__swsetup_r+0xa4>
 8010cde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010ce2:	d1c5      	bne.n	8010c70 <__swsetup_r+0x24>
 8010ce4:	bd38      	pop	{r3, r4, r5, pc}
 8010ce6:	0799      	lsls	r1, r3, #30
 8010ce8:	bf58      	it	pl
 8010cea:	6962      	ldrpl	r2, [r4, #20]
 8010cec:	60a2      	str	r2, [r4, #8]
 8010cee:	e7f4      	b.n	8010cda <__swsetup_r+0x8e>
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	e7f7      	b.n	8010ce4 <__swsetup_r+0x98>
 8010cf4:	20000138 	.word	0x20000138

08010cf8 <memmove>:
 8010cf8:	4288      	cmp	r0, r1
 8010cfa:	b510      	push	{r4, lr}
 8010cfc:	eb01 0402 	add.w	r4, r1, r2
 8010d00:	d902      	bls.n	8010d08 <memmove+0x10>
 8010d02:	4284      	cmp	r4, r0
 8010d04:	4623      	mov	r3, r4
 8010d06:	d807      	bhi.n	8010d18 <memmove+0x20>
 8010d08:	1e43      	subs	r3, r0, #1
 8010d0a:	42a1      	cmp	r1, r4
 8010d0c:	d008      	beq.n	8010d20 <memmove+0x28>
 8010d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d16:	e7f8      	b.n	8010d0a <memmove+0x12>
 8010d18:	4402      	add	r2, r0
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	428a      	cmp	r2, r1
 8010d1e:	d100      	bne.n	8010d22 <memmove+0x2a>
 8010d20:	bd10      	pop	{r4, pc}
 8010d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d2a:	e7f7      	b.n	8010d1c <memmove+0x24>

08010d2c <_sbrk_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	4d06      	ldr	r5, [pc, #24]	@ (8010d48 <_sbrk_r+0x1c>)
 8010d30:	2300      	movs	r3, #0
 8010d32:	4604      	mov	r4, r0
 8010d34:	4608      	mov	r0, r1
 8010d36:	602b      	str	r3, [r5, #0]
 8010d38:	f7f3 faba 	bl	80042b0 <_sbrk>
 8010d3c:	1c43      	adds	r3, r0, #1
 8010d3e:	d102      	bne.n	8010d46 <_sbrk_r+0x1a>
 8010d40:	682b      	ldr	r3, [r5, #0]
 8010d42:	b103      	cbz	r3, 8010d46 <_sbrk_r+0x1a>
 8010d44:	6023      	str	r3, [r4, #0]
 8010d46:	bd38      	pop	{r3, r4, r5, pc}
 8010d48:	200027f4 	.word	0x200027f4

08010d4c <__assert_func>:
 8010d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d4e:	4614      	mov	r4, r2
 8010d50:	461a      	mov	r2, r3
 8010d52:	4b09      	ldr	r3, [pc, #36]	@ (8010d78 <__assert_func+0x2c>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	4605      	mov	r5, r0
 8010d58:	68d8      	ldr	r0, [r3, #12]
 8010d5a:	b954      	cbnz	r4, 8010d72 <__assert_func+0x26>
 8010d5c:	4b07      	ldr	r3, [pc, #28]	@ (8010d7c <__assert_func+0x30>)
 8010d5e:	461c      	mov	r4, r3
 8010d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d64:	9100      	str	r1, [sp, #0]
 8010d66:	462b      	mov	r3, r5
 8010d68:	4905      	ldr	r1, [pc, #20]	@ (8010d80 <__assert_func+0x34>)
 8010d6a:	f000 f86f 	bl	8010e4c <fiprintf>
 8010d6e:	f000 f903 	bl	8010f78 <abort>
 8010d72:	4b04      	ldr	r3, [pc, #16]	@ (8010d84 <__assert_func+0x38>)
 8010d74:	e7f4      	b.n	8010d60 <__assert_func+0x14>
 8010d76:	bf00      	nop
 8010d78:	20000138 	.word	0x20000138
 8010d7c:	08012d16 	.word	0x08012d16
 8010d80:	08012ce8 	.word	0x08012ce8
 8010d84:	08012cdb 	.word	0x08012cdb

08010d88 <_calloc_r>:
 8010d88:	b570      	push	{r4, r5, r6, lr}
 8010d8a:	fba1 5402 	umull	r5, r4, r1, r2
 8010d8e:	b93c      	cbnz	r4, 8010da0 <_calloc_r+0x18>
 8010d90:	4629      	mov	r1, r5
 8010d92:	f7fe ffc9 	bl	800fd28 <_malloc_r>
 8010d96:	4606      	mov	r6, r0
 8010d98:	b928      	cbnz	r0, 8010da6 <_calloc_r+0x1e>
 8010d9a:	2600      	movs	r6, #0
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	bd70      	pop	{r4, r5, r6, pc}
 8010da0:	220c      	movs	r2, #12
 8010da2:	6002      	str	r2, [r0, #0]
 8010da4:	e7f9      	b.n	8010d9a <_calloc_r+0x12>
 8010da6:	462a      	mov	r2, r5
 8010da8:	4621      	mov	r1, r4
 8010daa:	f7fe f85e 	bl	800ee6a <memset>
 8010dae:	e7f5      	b.n	8010d9c <_calloc_r+0x14>

08010db0 <__ascii_mbtowc>:
 8010db0:	b082      	sub	sp, #8
 8010db2:	b901      	cbnz	r1, 8010db6 <__ascii_mbtowc+0x6>
 8010db4:	a901      	add	r1, sp, #4
 8010db6:	b142      	cbz	r2, 8010dca <__ascii_mbtowc+0x1a>
 8010db8:	b14b      	cbz	r3, 8010dce <__ascii_mbtowc+0x1e>
 8010dba:	7813      	ldrb	r3, [r2, #0]
 8010dbc:	600b      	str	r3, [r1, #0]
 8010dbe:	7812      	ldrb	r2, [r2, #0]
 8010dc0:	1e10      	subs	r0, r2, #0
 8010dc2:	bf18      	it	ne
 8010dc4:	2001      	movne	r0, #1
 8010dc6:	b002      	add	sp, #8
 8010dc8:	4770      	bx	lr
 8010dca:	4610      	mov	r0, r2
 8010dcc:	e7fb      	b.n	8010dc6 <__ascii_mbtowc+0x16>
 8010dce:	f06f 0001 	mvn.w	r0, #1
 8010dd2:	e7f8      	b.n	8010dc6 <__ascii_mbtowc+0x16>

08010dd4 <_realloc_r>:
 8010dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dd8:	4680      	mov	r8, r0
 8010dda:	4615      	mov	r5, r2
 8010ddc:	460c      	mov	r4, r1
 8010dde:	b921      	cbnz	r1, 8010dea <_realloc_r+0x16>
 8010de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010de4:	4611      	mov	r1, r2
 8010de6:	f7fe bf9f 	b.w	800fd28 <_malloc_r>
 8010dea:	b92a      	cbnz	r2, 8010df8 <_realloc_r+0x24>
 8010dec:	f7fe ff28 	bl	800fc40 <_free_r>
 8010df0:	2400      	movs	r4, #0
 8010df2:	4620      	mov	r0, r4
 8010df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df8:	f000 f8c5 	bl	8010f86 <_malloc_usable_size_r>
 8010dfc:	4285      	cmp	r5, r0
 8010dfe:	4606      	mov	r6, r0
 8010e00:	d802      	bhi.n	8010e08 <_realloc_r+0x34>
 8010e02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010e06:	d8f4      	bhi.n	8010df2 <_realloc_r+0x1e>
 8010e08:	4629      	mov	r1, r5
 8010e0a:	4640      	mov	r0, r8
 8010e0c:	f7fe ff8c 	bl	800fd28 <_malloc_r>
 8010e10:	4607      	mov	r7, r0
 8010e12:	2800      	cmp	r0, #0
 8010e14:	d0ec      	beq.n	8010df0 <_realloc_r+0x1c>
 8010e16:	42b5      	cmp	r5, r6
 8010e18:	462a      	mov	r2, r5
 8010e1a:	4621      	mov	r1, r4
 8010e1c:	bf28      	it	cs
 8010e1e:	4632      	movcs	r2, r6
 8010e20:	f7fe f8a3 	bl	800ef6a <memcpy>
 8010e24:	4621      	mov	r1, r4
 8010e26:	4640      	mov	r0, r8
 8010e28:	f7fe ff0a 	bl	800fc40 <_free_r>
 8010e2c:	463c      	mov	r4, r7
 8010e2e:	e7e0      	b.n	8010df2 <_realloc_r+0x1e>

08010e30 <__ascii_wctomb>:
 8010e30:	4603      	mov	r3, r0
 8010e32:	4608      	mov	r0, r1
 8010e34:	b141      	cbz	r1, 8010e48 <__ascii_wctomb+0x18>
 8010e36:	2aff      	cmp	r2, #255	@ 0xff
 8010e38:	d904      	bls.n	8010e44 <__ascii_wctomb+0x14>
 8010e3a:	228a      	movs	r2, #138	@ 0x8a
 8010e3c:	601a      	str	r2, [r3, #0]
 8010e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e42:	4770      	bx	lr
 8010e44:	700a      	strb	r2, [r1, #0]
 8010e46:	2001      	movs	r0, #1
 8010e48:	4770      	bx	lr
	...

08010e4c <fiprintf>:
 8010e4c:	b40e      	push	{r1, r2, r3}
 8010e4e:	b503      	push	{r0, r1, lr}
 8010e50:	4601      	mov	r1, r0
 8010e52:	ab03      	add	r3, sp, #12
 8010e54:	4805      	ldr	r0, [pc, #20]	@ (8010e6c <fiprintf+0x20>)
 8010e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e5a:	6800      	ldr	r0, [r0, #0]
 8010e5c:	9301      	str	r3, [sp, #4]
 8010e5e:	f7ff fcf3 	bl	8010848 <_vfiprintf_r>
 8010e62:	b002      	add	sp, #8
 8010e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e68:	b003      	add	sp, #12
 8010e6a:	4770      	bx	lr
 8010e6c:	20000138 	.word	0x20000138

08010e70 <__swhatbuf_r>:
 8010e70:	b570      	push	{r4, r5, r6, lr}
 8010e72:	460c      	mov	r4, r1
 8010e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e78:	2900      	cmp	r1, #0
 8010e7a:	b096      	sub	sp, #88	@ 0x58
 8010e7c:	4615      	mov	r5, r2
 8010e7e:	461e      	mov	r6, r3
 8010e80:	da0d      	bge.n	8010e9e <__swhatbuf_r+0x2e>
 8010e82:	89a3      	ldrh	r3, [r4, #12]
 8010e84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e88:	f04f 0100 	mov.w	r1, #0
 8010e8c:	bf14      	ite	ne
 8010e8e:	2340      	movne	r3, #64	@ 0x40
 8010e90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e94:	2000      	movs	r0, #0
 8010e96:	6031      	str	r1, [r6, #0]
 8010e98:	602b      	str	r3, [r5, #0]
 8010e9a:	b016      	add	sp, #88	@ 0x58
 8010e9c:	bd70      	pop	{r4, r5, r6, pc}
 8010e9e:	466a      	mov	r2, sp
 8010ea0:	f000 f848 	bl	8010f34 <_fstat_r>
 8010ea4:	2800      	cmp	r0, #0
 8010ea6:	dbec      	blt.n	8010e82 <__swhatbuf_r+0x12>
 8010ea8:	9901      	ldr	r1, [sp, #4]
 8010eaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010eae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010eb2:	4259      	negs	r1, r3
 8010eb4:	4159      	adcs	r1, r3
 8010eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010eba:	e7eb      	b.n	8010e94 <__swhatbuf_r+0x24>

08010ebc <__smakebuf_r>:
 8010ebc:	898b      	ldrh	r3, [r1, #12]
 8010ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ec0:	079d      	lsls	r5, r3, #30
 8010ec2:	4606      	mov	r6, r0
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	d507      	bpl.n	8010ed8 <__smakebuf_r+0x1c>
 8010ec8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010ecc:	6023      	str	r3, [r4, #0]
 8010ece:	6123      	str	r3, [r4, #16]
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	6163      	str	r3, [r4, #20]
 8010ed4:	b003      	add	sp, #12
 8010ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ed8:	ab01      	add	r3, sp, #4
 8010eda:	466a      	mov	r2, sp
 8010edc:	f7ff ffc8 	bl	8010e70 <__swhatbuf_r>
 8010ee0:	9f00      	ldr	r7, [sp, #0]
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	4639      	mov	r1, r7
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f7fe ff1e 	bl	800fd28 <_malloc_r>
 8010eec:	b948      	cbnz	r0, 8010f02 <__smakebuf_r+0x46>
 8010eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ef2:	059a      	lsls	r2, r3, #22
 8010ef4:	d4ee      	bmi.n	8010ed4 <__smakebuf_r+0x18>
 8010ef6:	f023 0303 	bic.w	r3, r3, #3
 8010efa:	f043 0302 	orr.w	r3, r3, #2
 8010efe:	81a3      	strh	r3, [r4, #12]
 8010f00:	e7e2      	b.n	8010ec8 <__smakebuf_r+0xc>
 8010f02:	89a3      	ldrh	r3, [r4, #12]
 8010f04:	6020      	str	r0, [r4, #0]
 8010f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f0a:	81a3      	strh	r3, [r4, #12]
 8010f0c:	9b01      	ldr	r3, [sp, #4]
 8010f0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010f12:	b15b      	cbz	r3, 8010f2c <__smakebuf_r+0x70>
 8010f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f18:	4630      	mov	r0, r6
 8010f1a:	f000 f81d 	bl	8010f58 <_isatty_r>
 8010f1e:	b128      	cbz	r0, 8010f2c <__smakebuf_r+0x70>
 8010f20:	89a3      	ldrh	r3, [r4, #12]
 8010f22:	f023 0303 	bic.w	r3, r3, #3
 8010f26:	f043 0301 	orr.w	r3, r3, #1
 8010f2a:	81a3      	strh	r3, [r4, #12]
 8010f2c:	89a3      	ldrh	r3, [r4, #12]
 8010f2e:	431d      	orrs	r5, r3
 8010f30:	81a5      	strh	r5, [r4, #12]
 8010f32:	e7cf      	b.n	8010ed4 <__smakebuf_r+0x18>

08010f34 <_fstat_r>:
 8010f34:	b538      	push	{r3, r4, r5, lr}
 8010f36:	4d07      	ldr	r5, [pc, #28]	@ (8010f54 <_fstat_r+0x20>)
 8010f38:	2300      	movs	r3, #0
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	4608      	mov	r0, r1
 8010f3e:	4611      	mov	r1, r2
 8010f40:	602b      	str	r3, [r5, #0]
 8010f42:	f7f3 f98d 	bl	8004260 <_fstat>
 8010f46:	1c43      	adds	r3, r0, #1
 8010f48:	d102      	bne.n	8010f50 <_fstat_r+0x1c>
 8010f4a:	682b      	ldr	r3, [r5, #0]
 8010f4c:	b103      	cbz	r3, 8010f50 <_fstat_r+0x1c>
 8010f4e:	6023      	str	r3, [r4, #0]
 8010f50:	bd38      	pop	{r3, r4, r5, pc}
 8010f52:	bf00      	nop
 8010f54:	200027f4 	.word	0x200027f4

08010f58 <_isatty_r>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	4d06      	ldr	r5, [pc, #24]	@ (8010f74 <_isatty_r+0x1c>)
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	4604      	mov	r4, r0
 8010f60:	4608      	mov	r0, r1
 8010f62:	602b      	str	r3, [r5, #0]
 8010f64:	f7f3 f98c 	bl	8004280 <_isatty>
 8010f68:	1c43      	adds	r3, r0, #1
 8010f6a:	d102      	bne.n	8010f72 <_isatty_r+0x1a>
 8010f6c:	682b      	ldr	r3, [r5, #0]
 8010f6e:	b103      	cbz	r3, 8010f72 <_isatty_r+0x1a>
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	bd38      	pop	{r3, r4, r5, pc}
 8010f74:	200027f4 	.word	0x200027f4

08010f78 <abort>:
 8010f78:	b508      	push	{r3, lr}
 8010f7a:	2006      	movs	r0, #6
 8010f7c:	f000 f834 	bl	8010fe8 <raise>
 8010f80:	2001      	movs	r0, #1
 8010f82:	f7f3 f91d 	bl	80041c0 <_exit>

08010f86 <_malloc_usable_size_r>:
 8010f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f8a:	1f18      	subs	r0, r3, #4
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	bfbc      	itt	lt
 8010f90:	580b      	ldrlt	r3, [r1, r0]
 8010f92:	18c0      	addlt	r0, r0, r3
 8010f94:	4770      	bx	lr

08010f96 <_raise_r>:
 8010f96:	291f      	cmp	r1, #31
 8010f98:	b538      	push	{r3, r4, r5, lr}
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	460c      	mov	r4, r1
 8010f9e:	d904      	bls.n	8010faa <_raise_r+0x14>
 8010fa0:	2316      	movs	r3, #22
 8010fa2:	6003      	str	r3, [r0, #0]
 8010fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa8:	bd38      	pop	{r3, r4, r5, pc}
 8010faa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010fac:	b112      	cbz	r2, 8010fb4 <_raise_r+0x1e>
 8010fae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010fb2:	b94b      	cbnz	r3, 8010fc8 <_raise_r+0x32>
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	f000 f831 	bl	801101c <_getpid_r>
 8010fba:	4622      	mov	r2, r4
 8010fbc:	4601      	mov	r1, r0
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fc4:	f000 b818 	b.w	8010ff8 <_kill_r>
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	d00a      	beq.n	8010fe2 <_raise_r+0x4c>
 8010fcc:	1c59      	adds	r1, r3, #1
 8010fce:	d103      	bne.n	8010fd8 <_raise_r+0x42>
 8010fd0:	2316      	movs	r3, #22
 8010fd2:	6003      	str	r3, [r0, #0]
 8010fd4:	2001      	movs	r0, #1
 8010fd6:	e7e7      	b.n	8010fa8 <_raise_r+0x12>
 8010fd8:	2100      	movs	r1, #0
 8010fda:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010fde:	4620      	mov	r0, r4
 8010fe0:	4798      	blx	r3
 8010fe2:	2000      	movs	r0, #0
 8010fe4:	e7e0      	b.n	8010fa8 <_raise_r+0x12>
	...

08010fe8 <raise>:
 8010fe8:	4b02      	ldr	r3, [pc, #8]	@ (8010ff4 <raise+0xc>)
 8010fea:	4601      	mov	r1, r0
 8010fec:	6818      	ldr	r0, [r3, #0]
 8010fee:	f7ff bfd2 	b.w	8010f96 <_raise_r>
 8010ff2:	bf00      	nop
 8010ff4:	20000138 	.word	0x20000138

08010ff8 <_kill_r>:
 8010ff8:	b538      	push	{r3, r4, r5, lr}
 8010ffa:	4d07      	ldr	r5, [pc, #28]	@ (8011018 <_kill_r+0x20>)
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	4604      	mov	r4, r0
 8011000:	4608      	mov	r0, r1
 8011002:	4611      	mov	r1, r2
 8011004:	602b      	str	r3, [r5, #0]
 8011006:	f7f3 f8cb 	bl	80041a0 <_kill>
 801100a:	1c43      	adds	r3, r0, #1
 801100c:	d102      	bne.n	8011014 <_kill_r+0x1c>
 801100e:	682b      	ldr	r3, [r5, #0]
 8011010:	b103      	cbz	r3, 8011014 <_kill_r+0x1c>
 8011012:	6023      	str	r3, [r4, #0]
 8011014:	bd38      	pop	{r3, r4, r5, pc}
 8011016:	bf00      	nop
 8011018:	200027f4 	.word	0x200027f4

0801101c <_getpid_r>:
 801101c:	f7f3 b8b8 	b.w	8004190 <_getpid>

08011020 <asin>:
 8011020:	b538      	push	{r3, r4, r5, lr}
 8011022:	ed2d 8b02 	vpush	{d8}
 8011026:	ec55 4b10 	vmov	r4, r5, d0
 801102a:	f000 f9ed 	bl	8011408 <__ieee754_asin>
 801102e:	4622      	mov	r2, r4
 8011030:	462b      	mov	r3, r5
 8011032:	4620      	mov	r0, r4
 8011034:	4629      	mov	r1, r5
 8011036:	eeb0 8a40 	vmov.f32	s16, s0
 801103a:	eef0 8a60 	vmov.f32	s17, s1
 801103e:	f7ef fd75 	bl	8000b2c <__aeabi_dcmpun>
 8011042:	b9a8      	cbnz	r0, 8011070 <asin+0x50>
 8011044:	ec45 4b10 	vmov	d0, r4, r5
 8011048:	f000 f820 	bl	801108c <fabs>
 801104c:	4b0c      	ldr	r3, [pc, #48]	@ (8011080 <asin+0x60>)
 801104e:	ec51 0b10 	vmov	r0, r1, d0
 8011052:	2200      	movs	r2, #0
 8011054:	f7ef fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8011058:	b150      	cbz	r0, 8011070 <asin+0x50>
 801105a:	f7fd ff59 	bl	800ef10 <__errno>
 801105e:	ecbd 8b02 	vpop	{d8}
 8011062:	2321      	movs	r3, #33	@ 0x21
 8011064:	6003      	str	r3, [r0, #0]
 8011066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801106a:	4806      	ldr	r0, [pc, #24]	@ (8011084 <asin+0x64>)
 801106c:	f000 b8e0 	b.w	8011230 <nan>
 8011070:	eeb0 0a48 	vmov.f32	s0, s16
 8011074:	eef0 0a68 	vmov.f32	s1, s17
 8011078:	ecbd 8b02 	vpop	{d8}
 801107c:	bd38      	pop	{r3, r4, r5, pc}
 801107e:	bf00      	nop
 8011080:	3ff00000 	.word	0x3ff00000
 8011084:	08012d16 	.word	0x08012d16

08011088 <atan2>:
 8011088:	f000 bbc2 	b.w	8011810 <__ieee754_atan2>

0801108c <fabs>:
 801108c:	ec51 0b10 	vmov	r0, r1, d0
 8011090:	4602      	mov	r2, r0
 8011092:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011096:	ec43 2b10 	vmov	d0, r2, r3
 801109a:	4770      	bx	lr

0801109c <expf>:
 801109c:	b508      	push	{r3, lr}
 801109e:	ed2d 8b02 	vpush	{d8}
 80110a2:	eef0 8a40 	vmov.f32	s17, s0
 80110a6:	f000 feb3 	bl	8011e10 <__ieee754_expf>
 80110aa:	eeb0 8a40 	vmov.f32	s16, s0
 80110ae:	eeb0 0a68 	vmov.f32	s0, s17
 80110b2:	f000 f8c5 	bl	8011240 <finitef>
 80110b6:	b160      	cbz	r0, 80110d2 <expf+0x36>
 80110b8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80110f8 <expf+0x5c>
 80110bc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80110c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c4:	dd0a      	ble.n	80110dc <expf+0x40>
 80110c6:	f7fd ff23 	bl	800ef10 <__errno>
 80110ca:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80110fc <expf+0x60>
 80110ce:	2322      	movs	r3, #34	@ 0x22
 80110d0:	6003      	str	r3, [r0, #0]
 80110d2:	eeb0 0a48 	vmov.f32	s0, s16
 80110d6:	ecbd 8b02 	vpop	{d8}
 80110da:	bd08      	pop	{r3, pc}
 80110dc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011100 <expf+0x64>
 80110e0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80110e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e8:	d5f3      	bpl.n	80110d2 <expf+0x36>
 80110ea:	f7fd ff11 	bl	800ef10 <__errno>
 80110ee:	2322      	movs	r3, #34	@ 0x22
 80110f0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8011104 <expf+0x68>
 80110f4:	6003      	str	r3, [r0, #0]
 80110f6:	e7ec      	b.n	80110d2 <expf+0x36>
 80110f8:	42b17217 	.word	0x42b17217
 80110fc:	7f800000 	.word	0x7f800000
 8011100:	c2cff1b5 	.word	0xc2cff1b5
 8011104:	00000000 	.word	0x00000000

08011108 <cosf>:
 8011108:	ee10 3a10 	vmov	r3, s0
 801110c:	b507      	push	{r0, r1, r2, lr}
 801110e:	4a1e      	ldr	r2, [pc, #120]	@ (8011188 <cosf+0x80>)
 8011110:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011114:	4293      	cmp	r3, r2
 8011116:	d806      	bhi.n	8011126 <cosf+0x1e>
 8011118:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801118c <cosf+0x84>
 801111c:	b003      	add	sp, #12
 801111e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011122:	f000 bdd5 	b.w	8011cd0 <__kernel_cosf>
 8011126:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801112a:	d304      	bcc.n	8011136 <cosf+0x2e>
 801112c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011130:	b003      	add	sp, #12
 8011132:	f85d fb04 	ldr.w	pc, [sp], #4
 8011136:	4668      	mov	r0, sp
 8011138:	f000 ff38 	bl	8011fac <__ieee754_rem_pio2f>
 801113c:	f000 0003 	and.w	r0, r0, #3
 8011140:	2801      	cmp	r0, #1
 8011142:	d009      	beq.n	8011158 <cosf+0x50>
 8011144:	2802      	cmp	r0, #2
 8011146:	d010      	beq.n	801116a <cosf+0x62>
 8011148:	b9b0      	cbnz	r0, 8011178 <cosf+0x70>
 801114a:	eddd 0a01 	vldr	s1, [sp, #4]
 801114e:	ed9d 0a00 	vldr	s0, [sp]
 8011152:	f000 fdbd 	bl	8011cd0 <__kernel_cosf>
 8011156:	e7eb      	b.n	8011130 <cosf+0x28>
 8011158:	eddd 0a01 	vldr	s1, [sp, #4]
 801115c:	ed9d 0a00 	vldr	s0, [sp]
 8011160:	f000 fe0e 	bl	8011d80 <__kernel_sinf>
 8011164:	eeb1 0a40 	vneg.f32	s0, s0
 8011168:	e7e2      	b.n	8011130 <cosf+0x28>
 801116a:	eddd 0a01 	vldr	s1, [sp, #4]
 801116e:	ed9d 0a00 	vldr	s0, [sp]
 8011172:	f000 fdad 	bl	8011cd0 <__kernel_cosf>
 8011176:	e7f5      	b.n	8011164 <cosf+0x5c>
 8011178:	eddd 0a01 	vldr	s1, [sp, #4]
 801117c:	ed9d 0a00 	vldr	s0, [sp]
 8011180:	2001      	movs	r0, #1
 8011182:	f000 fdfd 	bl	8011d80 <__kernel_sinf>
 8011186:	e7d3      	b.n	8011130 <cosf+0x28>
 8011188:	3f490fd8 	.word	0x3f490fd8
 801118c:	00000000 	.word	0x00000000

08011190 <fabsf>:
 8011190:	ee10 3a10 	vmov	r3, s0
 8011194:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011198:	ee00 3a10 	vmov	s0, r3
 801119c:	4770      	bx	lr
	...

080111a0 <sinf>:
 80111a0:	ee10 3a10 	vmov	r3, s0
 80111a4:	b507      	push	{r0, r1, r2, lr}
 80111a6:	4a1f      	ldr	r2, [pc, #124]	@ (8011224 <sinf+0x84>)
 80111a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d807      	bhi.n	80111c0 <sinf+0x20>
 80111b0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8011228 <sinf+0x88>
 80111b4:	2000      	movs	r0, #0
 80111b6:	b003      	add	sp, #12
 80111b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80111bc:	f000 bde0 	b.w	8011d80 <__kernel_sinf>
 80111c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80111c4:	d304      	bcc.n	80111d0 <sinf+0x30>
 80111c6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80111ca:	b003      	add	sp, #12
 80111cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80111d0:	4668      	mov	r0, sp
 80111d2:	f000 feeb 	bl	8011fac <__ieee754_rem_pio2f>
 80111d6:	f000 0003 	and.w	r0, r0, #3
 80111da:	2801      	cmp	r0, #1
 80111dc:	d00a      	beq.n	80111f4 <sinf+0x54>
 80111de:	2802      	cmp	r0, #2
 80111e0:	d00f      	beq.n	8011202 <sinf+0x62>
 80111e2:	b9c0      	cbnz	r0, 8011216 <sinf+0x76>
 80111e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80111e8:	ed9d 0a00 	vldr	s0, [sp]
 80111ec:	2001      	movs	r0, #1
 80111ee:	f000 fdc7 	bl	8011d80 <__kernel_sinf>
 80111f2:	e7ea      	b.n	80111ca <sinf+0x2a>
 80111f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80111f8:	ed9d 0a00 	vldr	s0, [sp]
 80111fc:	f000 fd68 	bl	8011cd0 <__kernel_cosf>
 8011200:	e7e3      	b.n	80111ca <sinf+0x2a>
 8011202:	eddd 0a01 	vldr	s1, [sp, #4]
 8011206:	ed9d 0a00 	vldr	s0, [sp]
 801120a:	2001      	movs	r0, #1
 801120c:	f000 fdb8 	bl	8011d80 <__kernel_sinf>
 8011210:	eeb1 0a40 	vneg.f32	s0, s0
 8011214:	e7d9      	b.n	80111ca <sinf+0x2a>
 8011216:	eddd 0a01 	vldr	s1, [sp, #4]
 801121a:	ed9d 0a00 	vldr	s0, [sp]
 801121e:	f000 fd57 	bl	8011cd0 <__kernel_cosf>
 8011222:	e7f5      	b.n	8011210 <sinf+0x70>
 8011224:	3f490fd8 	.word	0x3f490fd8
	...

08011230 <nan>:
 8011230:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011238 <nan+0x8>
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	00000000 	.word	0x00000000
 801123c:	7ff80000 	.word	0x7ff80000

08011240 <finitef>:
 8011240:	ee10 3a10 	vmov	r3, s0
 8011244:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8011248:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801124c:	bfac      	ite	ge
 801124e:	2000      	movge	r0, #0
 8011250:	2001      	movlt	r0, #1
 8011252:	4770      	bx	lr

08011254 <__ieee754_sqrt>:
 8011254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011258:	4a68      	ldr	r2, [pc, #416]	@ (80113fc <__ieee754_sqrt+0x1a8>)
 801125a:	ec55 4b10 	vmov	r4, r5, d0
 801125e:	43aa      	bics	r2, r5
 8011260:	462b      	mov	r3, r5
 8011262:	4621      	mov	r1, r4
 8011264:	d110      	bne.n	8011288 <__ieee754_sqrt+0x34>
 8011266:	4622      	mov	r2, r4
 8011268:	4620      	mov	r0, r4
 801126a:	4629      	mov	r1, r5
 801126c:	f7ef f9c4 	bl	80005f8 <__aeabi_dmul>
 8011270:	4602      	mov	r2, r0
 8011272:	460b      	mov	r3, r1
 8011274:	4620      	mov	r0, r4
 8011276:	4629      	mov	r1, r5
 8011278:	f7ef f808 	bl	800028c <__adddf3>
 801127c:	4604      	mov	r4, r0
 801127e:	460d      	mov	r5, r1
 8011280:	ec45 4b10 	vmov	d0, r4, r5
 8011284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011288:	2d00      	cmp	r5, #0
 801128a:	dc0e      	bgt.n	80112aa <__ieee754_sqrt+0x56>
 801128c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011290:	4322      	orrs	r2, r4
 8011292:	d0f5      	beq.n	8011280 <__ieee754_sqrt+0x2c>
 8011294:	b19d      	cbz	r5, 80112be <__ieee754_sqrt+0x6a>
 8011296:	4622      	mov	r2, r4
 8011298:	4620      	mov	r0, r4
 801129a:	4629      	mov	r1, r5
 801129c:	f7ee fff4 	bl	8000288 <__aeabi_dsub>
 80112a0:	4602      	mov	r2, r0
 80112a2:	460b      	mov	r3, r1
 80112a4:	f7ef fad2 	bl	800084c <__aeabi_ddiv>
 80112a8:	e7e8      	b.n	801127c <__ieee754_sqrt+0x28>
 80112aa:	152a      	asrs	r2, r5, #20
 80112ac:	d115      	bne.n	80112da <__ieee754_sqrt+0x86>
 80112ae:	2000      	movs	r0, #0
 80112b0:	e009      	b.n	80112c6 <__ieee754_sqrt+0x72>
 80112b2:	0acb      	lsrs	r3, r1, #11
 80112b4:	3a15      	subs	r2, #21
 80112b6:	0549      	lsls	r1, r1, #21
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d0fa      	beq.n	80112b2 <__ieee754_sqrt+0x5e>
 80112bc:	e7f7      	b.n	80112ae <__ieee754_sqrt+0x5a>
 80112be:	462a      	mov	r2, r5
 80112c0:	e7fa      	b.n	80112b8 <__ieee754_sqrt+0x64>
 80112c2:	005b      	lsls	r3, r3, #1
 80112c4:	3001      	adds	r0, #1
 80112c6:	02dc      	lsls	r4, r3, #11
 80112c8:	d5fb      	bpl.n	80112c2 <__ieee754_sqrt+0x6e>
 80112ca:	1e44      	subs	r4, r0, #1
 80112cc:	1b12      	subs	r2, r2, r4
 80112ce:	f1c0 0420 	rsb	r4, r0, #32
 80112d2:	fa21 f404 	lsr.w	r4, r1, r4
 80112d6:	4323      	orrs	r3, r4
 80112d8:	4081      	lsls	r1, r0
 80112da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112de:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80112e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80112e6:	07d2      	lsls	r2, r2, #31
 80112e8:	bf5c      	itt	pl
 80112ea:	005b      	lslpl	r3, r3, #1
 80112ec:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80112f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80112f4:	bf58      	it	pl
 80112f6:	0049      	lslpl	r1, r1, #1
 80112f8:	2600      	movs	r6, #0
 80112fa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80112fe:	106d      	asrs	r5, r5, #1
 8011300:	0049      	lsls	r1, r1, #1
 8011302:	2016      	movs	r0, #22
 8011304:	4632      	mov	r2, r6
 8011306:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801130a:	1917      	adds	r7, r2, r4
 801130c:	429f      	cmp	r7, r3
 801130e:	bfde      	ittt	le
 8011310:	193a      	addle	r2, r7, r4
 8011312:	1bdb      	suble	r3, r3, r7
 8011314:	1936      	addle	r6, r6, r4
 8011316:	0fcf      	lsrs	r7, r1, #31
 8011318:	3801      	subs	r0, #1
 801131a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801131e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011322:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011326:	d1f0      	bne.n	801130a <__ieee754_sqrt+0xb6>
 8011328:	4604      	mov	r4, r0
 801132a:	2720      	movs	r7, #32
 801132c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011330:	429a      	cmp	r2, r3
 8011332:	eb00 0e0c 	add.w	lr, r0, ip
 8011336:	db02      	blt.n	801133e <__ieee754_sqrt+0xea>
 8011338:	d113      	bne.n	8011362 <__ieee754_sqrt+0x10e>
 801133a:	458e      	cmp	lr, r1
 801133c:	d811      	bhi.n	8011362 <__ieee754_sqrt+0x10e>
 801133e:	f1be 0f00 	cmp.w	lr, #0
 8011342:	eb0e 000c 	add.w	r0, lr, ip
 8011346:	da42      	bge.n	80113ce <__ieee754_sqrt+0x17a>
 8011348:	2800      	cmp	r0, #0
 801134a:	db40      	blt.n	80113ce <__ieee754_sqrt+0x17a>
 801134c:	f102 0801 	add.w	r8, r2, #1
 8011350:	1a9b      	subs	r3, r3, r2
 8011352:	458e      	cmp	lr, r1
 8011354:	bf88      	it	hi
 8011356:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801135a:	eba1 010e 	sub.w	r1, r1, lr
 801135e:	4464      	add	r4, ip
 8011360:	4642      	mov	r2, r8
 8011362:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011366:	3f01      	subs	r7, #1
 8011368:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801136c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011370:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011374:	d1dc      	bne.n	8011330 <__ieee754_sqrt+0xdc>
 8011376:	4319      	orrs	r1, r3
 8011378:	d01b      	beq.n	80113b2 <__ieee754_sqrt+0x15e>
 801137a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8011400 <__ieee754_sqrt+0x1ac>
 801137e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011404 <__ieee754_sqrt+0x1b0>
 8011382:	e9da 0100 	ldrd	r0, r1, [sl]
 8011386:	e9db 2300 	ldrd	r2, r3, [fp]
 801138a:	f7ee ff7d 	bl	8000288 <__aeabi_dsub>
 801138e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011392:	4602      	mov	r2, r0
 8011394:	460b      	mov	r3, r1
 8011396:	4640      	mov	r0, r8
 8011398:	4649      	mov	r1, r9
 801139a:	f7ef fba9 	bl	8000af0 <__aeabi_dcmple>
 801139e:	b140      	cbz	r0, 80113b2 <__ieee754_sqrt+0x15e>
 80113a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80113a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80113a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80113ac:	d111      	bne.n	80113d2 <__ieee754_sqrt+0x17e>
 80113ae:	3601      	adds	r6, #1
 80113b0:	463c      	mov	r4, r7
 80113b2:	1072      	asrs	r2, r6, #1
 80113b4:	0863      	lsrs	r3, r4, #1
 80113b6:	07f1      	lsls	r1, r6, #31
 80113b8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80113bc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80113c0:	bf48      	it	mi
 80113c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80113c6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80113ca:	4618      	mov	r0, r3
 80113cc:	e756      	b.n	801127c <__ieee754_sqrt+0x28>
 80113ce:	4690      	mov	r8, r2
 80113d0:	e7be      	b.n	8011350 <__ieee754_sqrt+0xfc>
 80113d2:	f7ee ff5b 	bl	800028c <__adddf3>
 80113d6:	e9da 8900 	ldrd	r8, r9, [sl]
 80113da:	4602      	mov	r2, r0
 80113dc:	460b      	mov	r3, r1
 80113de:	4640      	mov	r0, r8
 80113e0:	4649      	mov	r1, r9
 80113e2:	f7ef fb7b 	bl	8000adc <__aeabi_dcmplt>
 80113e6:	b120      	cbz	r0, 80113f2 <__ieee754_sqrt+0x19e>
 80113e8:	1ca0      	adds	r0, r4, #2
 80113ea:	bf08      	it	eq
 80113ec:	3601      	addeq	r6, #1
 80113ee:	3402      	adds	r4, #2
 80113f0:	e7df      	b.n	80113b2 <__ieee754_sqrt+0x15e>
 80113f2:	1c63      	adds	r3, r4, #1
 80113f4:	f023 0401 	bic.w	r4, r3, #1
 80113f8:	e7db      	b.n	80113b2 <__ieee754_sqrt+0x15e>
 80113fa:	bf00      	nop
 80113fc:	7ff00000 	.word	0x7ff00000
 8011400:	20000300 	.word	0x20000300
 8011404:	200002f8 	.word	0x200002f8

08011408 <__ieee754_asin>:
 8011408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	ec55 4b10 	vmov	r4, r5, d0
 8011410:	4bc7      	ldr	r3, [pc, #796]	@ (8011730 <__ieee754_asin+0x328>)
 8011412:	b087      	sub	sp, #28
 8011414:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011418:	429e      	cmp	r6, r3
 801141a:	9501      	str	r5, [sp, #4]
 801141c:	d92d      	bls.n	801147a <__ieee754_asin+0x72>
 801141e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011422:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011426:	4326      	orrs	r6, r4
 8011428:	d116      	bne.n	8011458 <__ieee754_asin+0x50>
 801142a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80116c8 <__ieee754_asin+0x2c0>)
 801142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011430:	4620      	mov	r0, r4
 8011432:	4629      	mov	r1, r5
 8011434:	f7ef f8e0 	bl	80005f8 <__aeabi_dmul>
 8011438:	a3a5      	add	r3, pc, #660	@ (adr r3, 80116d0 <__ieee754_asin+0x2c8>)
 801143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143e:	4606      	mov	r6, r0
 8011440:	460f      	mov	r7, r1
 8011442:	4620      	mov	r0, r4
 8011444:	4629      	mov	r1, r5
 8011446:	f7ef f8d7 	bl	80005f8 <__aeabi_dmul>
 801144a:	4602      	mov	r2, r0
 801144c:	460b      	mov	r3, r1
 801144e:	4630      	mov	r0, r6
 8011450:	4639      	mov	r1, r7
 8011452:	f7ee ff1b 	bl	800028c <__adddf3>
 8011456:	e009      	b.n	801146c <__ieee754_asin+0x64>
 8011458:	4622      	mov	r2, r4
 801145a:	462b      	mov	r3, r5
 801145c:	4620      	mov	r0, r4
 801145e:	4629      	mov	r1, r5
 8011460:	f7ee ff12 	bl	8000288 <__aeabi_dsub>
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	f7ef f9f0 	bl	800084c <__aeabi_ddiv>
 801146c:	4604      	mov	r4, r0
 801146e:	460d      	mov	r5, r1
 8011470:	ec45 4b10 	vmov	d0, r4, r5
 8011474:	b007      	add	sp, #28
 8011476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147a:	4bae      	ldr	r3, [pc, #696]	@ (8011734 <__ieee754_asin+0x32c>)
 801147c:	429e      	cmp	r6, r3
 801147e:	d810      	bhi.n	80114a2 <__ieee754_asin+0x9a>
 8011480:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8011484:	f080 80ad 	bcs.w	80115e2 <__ieee754_asin+0x1da>
 8011488:	a393      	add	r3, pc, #588	@ (adr r3, 80116d8 <__ieee754_asin+0x2d0>)
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	4620      	mov	r0, r4
 8011490:	4629      	mov	r1, r5
 8011492:	f7ee fefb 	bl	800028c <__adddf3>
 8011496:	4ba8      	ldr	r3, [pc, #672]	@ (8011738 <__ieee754_asin+0x330>)
 8011498:	2200      	movs	r2, #0
 801149a:	f7ef fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 801149e:	2800      	cmp	r0, #0
 80114a0:	d1e6      	bne.n	8011470 <__ieee754_asin+0x68>
 80114a2:	ec45 4b10 	vmov	d0, r4, r5
 80114a6:	f7ff fdf1 	bl	801108c <fabs>
 80114aa:	49a3      	ldr	r1, [pc, #652]	@ (8011738 <__ieee754_asin+0x330>)
 80114ac:	ec53 2b10 	vmov	r2, r3, d0
 80114b0:	2000      	movs	r0, #0
 80114b2:	f7ee fee9 	bl	8000288 <__aeabi_dsub>
 80114b6:	4ba1      	ldr	r3, [pc, #644]	@ (801173c <__ieee754_asin+0x334>)
 80114b8:	2200      	movs	r2, #0
 80114ba:	f7ef f89d 	bl	80005f8 <__aeabi_dmul>
 80114be:	a388      	add	r3, pc, #544	@ (adr r3, 80116e0 <__ieee754_asin+0x2d8>)
 80114c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c4:	4604      	mov	r4, r0
 80114c6:	460d      	mov	r5, r1
 80114c8:	f7ef f896 	bl	80005f8 <__aeabi_dmul>
 80114cc:	a386      	add	r3, pc, #536	@ (adr r3, 80116e8 <__ieee754_asin+0x2e0>)
 80114ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d2:	f7ee fedb 	bl	800028c <__adddf3>
 80114d6:	4622      	mov	r2, r4
 80114d8:	462b      	mov	r3, r5
 80114da:	f7ef f88d 	bl	80005f8 <__aeabi_dmul>
 80114de:	a384      	add	r3, pc, #528	@ (adr r3, 80116f0 <__ieee754_asin+0x2e8>)
 80114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e4:	f7ee fed0 	bl	8000288 <__aeabi_dsub>
 80114e8:	4622      	mov	r2, r4
 80114ea:	462b      	mov	r3, r5
 80114ec:	f7ef f884 	bl	80005f8 <__aeabi_dmul>
 80114f0:	a381      	add	r3, pc, #516	@ (adr r3, 80116f8 <__ieee754_asin+0x2f0>)
 80114f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f6:	f7ee fec9 	bl	800028c <__adddf3>
 80114fa:	4622      	mov	r2, r4
 80114fc:	462b      	mov	r3, r5
 80114fe:	f7ef f87b 	bl	80005f8 <__aeabi_dmul>
 8011502:	a37f      	add	r3, pc, #508	@ (adr r3, 8011700 <__ieee754_asin+0x2f8>)
 8011504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011508:	f7ee febe 	bl	8000288 <__aeabi_dsub>
 801150c:	4622      	mov	r2, r4
 801150e:	462b      	mov	r3, r5
 8011510:	f7ef f872 	bl	80005f8 <__aeabi_dmul>
 8011514:	a37c      	add	r3, pc, #496	@ (adr r3, 8011708 <__ieee754_asin+0x300>)
 8011516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151a:	f7ee feb7 	bl	800028c <__adddf3>
 801151e:	4622      	mov	r2, r4
 8011520:	462b      	mov	r3, r5
 8011522:	f7ef f869 	bl	80005f8 <__aeabi_dmul>
 8011526:	a37a      	add	r3, pc, #488	@ (adr r3, 8011710 <__ieee754_asin+0x308>)
 8011528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801152c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011530:	4620      	mov	r0, r4
 8011532:	4629      	mov	r1, r5
 8011534:	f7ef f860 	bl	80005f8 <__aeabi_dmul>
 8011538:	a377      	add	r3, pc, #476	@ (adr r3, 8011718 <__ieee754_asin+0x310>)
 801153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153e:	f7ee fea3 	bl	8000288 <__aeabi_dsub>
 8011542:	4622      	mov	r2, r4
 8011544:	462b      	mov	r3, r5
 8011546:	f7ef f857 	bl	80005f8 <__aeabi_dmul>
 801154a:	a375      	add	r3, pc, #468	@ (adr r3, 8011720 <__ieee754_asin+0x318>)
 801154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011550:	f7ee fe9c 	bl	800028c <__adddf3>
 8011554:	4622      	mov	r2, r4
 8011556:	462b      	mov	r3, r5
 8011558:	f7ef f84e 	bl	80005f8 <__aeabi_dmul>
 801155c:	a372      	add	r3, pc, #456	@ (adr r3, 8011728 <__ieee754_asin+0x320>)
 801155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011562:	f7ee fe91 	bl	8000288 <__aeabi_dsub>
 8011566:	4622      	mov	r2, r4
 8011568:	462b      	mov	r3, r5
 801156a:	f7ef f845 	bl	80005f8 <__aeabi_dmul>
 801156e:	4b72      	ldr	r3, [pc, #456]	@ (8011738 <__ieee754_asin+0x330>)
 8011570:	2200      	movs	r2, #0
 8011572:	f7ee fe8b 	bl	800028c <__adddf3>
 8011576:	ec45 4b10 	vmov	d0, r4, r5
 801157a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801157e:	f7ff fe69 	bl	8011254 <__ieee754_sqrt>
 8011582:	4b6f      	ldr	r3, [pc, #444]	@ (8011740 <__ieee754_asin+0x338>)
 8011584:	429e      	cmp	r6, r3
 8011586:	ec5b ab10 	vmov	sl, fp, d0
 801158a:	f240 80db 	bls.w	8011744 <__ieee754_asin+0x33c>
 801158e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011596:	f7ef f959 	bl	800084c <__aeabi_ddiv>
 801159a:	4652      	mov	r2, sl
 801159c:	465b      	mov	r3, fp
 801159e:	f7ef f82b 	bl	80005f8 <__aeabi_dmul>
 80115a2:	4652      	mov	r2, sl
 80115a4:	465b      	mov	r3, fp
 80115a6:	f7ee fe71 	bl	800028c <__adddf3>
 80115aa:	4602      	mov	r2, r0
 80115ac:	460b      	mov	r3, r1
 80115ae:	f7ee fe6d 	bl	800028c <__adddf3>
 80115b2:	a347      	add	r3, pc, #284	@ (adr r3, 80116d0 <__ieee754_asin+0x2c8>)
 80115b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b8:	f7ee fe66 	bl	8000288 <__aeabi_dsub>
 80115bc:	4602      	mov	r2, r0
 80115be:	460b      	mov	r3, r1
 80115c0:	a141      	add	r1, pc, #260	@ (adr r1, 80116c8 <__ieee754_asin+0x2c0>)
 80115c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115c6:	f7ee fe5f 	bl	8000288 <__aeabi_dsub>
 80115ca:	9b01      	ldr	r3, [sp, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	bfdc      	itt	le
 80115d0:	4602      	movle	r2, r0
 80115d2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80115d6:	4604      	mov	r4, r0
 80115d8:	460d      	mov	r5, r1
 80115da:	bfdc      	itt	le
 80115dc:	4614      	movle	r4, r2
 80115de:	461d      	movle	r5, r3
 80115e0:	e746      	b.n	8011470 <__ieee754_asin+0x68>
 80115e2:	4622      	mov	r2, r4
 80115e4:	462b      	mov	r3, r5
 80115e6:	4620      	mov	r0, r4
 80115e8:	4629      	mov	r1, r5
 80115ea:	f7ef f805 	bl	80005f8 <__aeabi_dmul>
 80115ee:	a33c      	add	r3, pc, #240	@ (adr r3, 80116e0 <__ieee754_asin+0x2d8>)
 80115f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f4:	4606      	mov	r6, r0
 80115f6:	460f      	mov	r7, r1
 80115f8:	f7ee fffe 	bl	80005f8 <__aeabi_dmul>
 80115fc:	a33a      	add	r3, pc, #232	@ (adr r3, 80116e8 <__ieee754_asin+0x2e0>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	f7ee fe43 	bl	800028c <__adddf3>
 8011606:	4632      	mov	r2, r6
 8011608:	463b      	mov	r3, r7
 801160a:	f7ee fff5 	bl	80005f8 <__aeabi_dmul>
 801160e:	a338      	add	r3, pc, #224	@ (adr r3, 80116f0 <__ieee754_asin+0x2e8>)
 8011610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011614:	f7ee fe38 	bl	8000288 <__aeabi_dsub>
 8011618:	4632      	mov	r2, r6
 801161a:	463b      	mov	r3, r7
 801161c:	f7ee ffec 	bl	80005f8 <__aeabi_dmul>
 8011620:	a335      	add	r3, pc, #212	@ (adr r3, 80116f8 <__ieee754_asin+0x2f0>)
 8011622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011626:	f7ee fe31 	bl	800028c <__adddf3>
 801162a:	4632      	mov	r2, r6
 801162c:	463b      	mov	r3, r7
 801162e:	f7ee ffe3 	bl	80005f8 <__aeabi_dmul>
 8011632:	a333      	add	r3, pc, #204	@ (adr r3, 8011700 <__ieee754_asin+0x2f8>)
 8011634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011638:	f7ee fe26 	bl	8000288 <__aeabi_dsub>
 801163c:	4632      	mov	r2, r6
 801163e:	463b      	mov	r3, r7
 8011640:	f7ee ffda 	bl	80005f8 <__aeabi_dmul>
 8011644:	a330      	add	r3, pc, #192	@ (adr r3, 8011708 <__ieee754_asin+0x300>)
 8011646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164a:	f7ee fe1f 	bl	800028c <__adddf3>
 801164e:	4632      	mov	r2, r6
 8011650:	463b      	mov	r3, r7
 8011652:	f7ee ffd1 	bl	80005f8 <__aeabi_dmul>
 8011656:	a32e      	add	r3, pc, #184	@ (adr r3, 8011710 <__ieee754_asin+0x308>)
 8011658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165c:	4680      	mov	r8, r0
 801165e:	4689      	mov	r9, r1
 8011660:	4630      	mov	r0, r6
 8011662:	4639      	mov	r1, r7
 8011664:	f7ee ffc8 	bl	80005f8 <__aeabi_dmul>
 8011668:	a32b      	add	r3, pc, #172	@ (adr r3, 8011718 <__ieee754_asin+0x310>)
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7ee fe0b 	bl	8000288 <__aeabi_dsub>
 8011672:	4632      	mov	r2, r6
 8011674:	463b      	mov	r3, r7
 8011676:	f7ee ffbf 	bl	80005f8 <__aeabi_dmul>
 801167a:	a329      	add	r3, pc, #164	@ (adr r3, 8011720 <__ieee754_asin+0x318>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	f7ee fe04 	bl	800028c <__adddf3>
 8011684:	4632      	mov	r2, r6
 8011686:	463b      	mov	r3, r7
 8011688:	f7ee ffb6 	bl	80005f8 <__aeabi_dmul>
 801168c:	a326      	add	r3, pc, #152	@ (adr r3, 8011728 <__ieee754_asin+0x320>)
 801168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011692:	f7ee fdf9 	bl	8000288 <__aeabi_dsub>
 8011696:	4632      	mov	r2, r6
 8011698:	463b      	mov	r3, r7
 801169a:	f7ee ffad 	bl	80005f8 <__aeabi_dmul>
 801169e:	4b26      	ldr	r3, [pc, #152]	@ (8011738 <__ieee754_asin+0x330>)
 80116a0:	2200      	movs	r2, #0
 80116a2:	f7ee fdf3 	bl	800028c <__adddf3>
 80116a6:	4602      	mov	r2, r0
 80116a8:	460b      	mov	r3, r1
 80116aa:	4640      	mov	r0, r8
 80116ac:	4649      	mov	r1, r9
 80116ae:	f7ef f8cd 	bl	800084c <__aeabi_ddiv>
 80116b2:	4622      	mov	r2, r4
 80116b4:	462b      	mov	r3, r5
 80116b6:	f7ee ff9f 	bl	80005f8 <__aeabi_dmul>
 80116ba:	4602      	mov	r2, r0
 80116bc:	460b      	mov	r3, r1
 80116be:	4620      	mov	r0, r4
 80116c0:	4629      	mov	r1, r5
 80116c2:	e6c6      	b.n	8011452 <__ieee754_asin+0x4a>
 80116c4:	f3af 8000 	nop.w
 80116c8:	54442d18 	.word	0x54442d18
 80116cc:	3ff921fb 	.word	0x3ff921fb
 80116d0:	33145c07 	.word	0x33145c07
 80116d4:	3c91a626 	.word	0x3c91a626
 80116d8:	8800759c 	.word	0x8800759c
 80116dc:	7e37e43c 	.word	0x7e37e43c
 80116e0:	0dfdf709 	.word	0x0dfdf709
 80116e4:	3f023de1 	.word	0x3f023de1
 80116e8:	7501b288 	.word	0x7501b288
 80116ec:	3f49efe0 	.word	0x3f49efe0
 80116f0:	b5688f3b 	.word	0xb5688f3b
 80116f4:	3fa48228 	.word	0x3fa48228
 80116f8:	0e884455 	.word	0x0e884455
 80116fc:	3fc9c155 	.word	0x3fc9c155
 8011700:	03eb6f7d 	.word	0x03eb6f7d
 8011704:	3fd4d612 	.word	0x3fd4d612
 8011708:	55555555 	.word	0x55555555
 801170c:	3fc55555 	.word	0x3fc55555
 8011710:	b12e9282 	.word	0xb12e9282
 8011714:	3fb3b8c5 	.word	0x3fb3b8c5
 8011718:	1b8d0159 	.word	0x1b8d0159
 801171c:	3fe6066c 	.word	0x3fe6066c
 8011720:	9c598ac8 	.word	0x9c598ac8
 8011724:	40002ae5 	.word	0x40002ae5
 8011728:	1c8a2d4b 	.word	0x1c8a2d4b
 801172c:	40033a27 	.word	0x40033a27
 8011730:	3fefffff 	.word	0x3fefffff
 8011734:	3fdfffff 	.word	0x3fdfffff
 8011738:	3ff00000 	.word	0x3ff00000
 801173c:	3fe00000 	.word	0x3fe00000
 8011740:	3fef3332 	.word	0x3fef3332
 8011744:	4652      	mov	r2, sl
 8011746:	465b      	mov	r3, fp
 8011748:	4650      	mov	r0, sl
 801174a:	4659      	mov	r1, fp
 801174c:	f7ee fd9e 	bl	800028c <__adddf3>
 8011750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011754:	4606      	mov	r6, r0
 8011756:	460f      	mov	r7, r1
 8011758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801175c:	f7ef f876 	bl	800084c <__aeabi_ddiv>
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	4630      	mov	r0, r6
 8011766:	4639      	mov	r1, r7
 8011768:	f7ee ff46 	bl	80005f8 <__aeabi_dmul>
 801176c:	f04f 0800 	mov.w	r8, #0
 8011770:	4606      	mov	r6, r0
 8011772:	460f      	mov	r7, r1
 8011774:	4642      	mov	r2, r8
 8011776:	465b      	mov	r3, fp
 8011778:	4640      	mov	r0, r8
 801177a:	4659      	mov	r1, fp
 801177c:	f7ee ff3c 	bl	80005f8 <__aeabi_dmul>
 8011780:	4602      	mov	r2, r0
 8011782:	460b      	mov	r3, r1
 8011784:	4620      	mov	r0, r4
 8011786:	4629      	mov	r1, r5
 8011788:	f7ee fd7e 	bl	8000288 <__aeabi_dsub>
 801178c:	4642      	mov	r2, r8
 801178e:	4604      	mov	r4, r0
 8011790:	460d      	mov	r5, r1
 8011792:	465b      	mov	r3, fp
 8011794:	4650      	mov	r0, sl
 8011796:	4659      	mov	r1, fp
 8011798:	f7ee fd78 	bl	800028c <__adddf3>
 801179c:	4602      	mov	r2, r0
 801179e:	460b      	mov	r3, r1
 80117a0:	4620      	mov	r0, r4
 80117a2:	4629      	mov	r1, r5
 80117a4:	f7ef f852 	bl	800084c <__aeabi_ddiv>
 80117a8:	4602      	mov	r2, r0
 80117aa:	460b      	mov	r3, r1
 80117ac:	f7ee fd6e 	bl	800028c <__adddf3>
 80117b0:	4602      	mov	r2, r0
 80117b2:	460b      	mov	r3, r1
 80117b4:	a112      	add	r1, pc, #72	@ (adr r1, 8011800 <__ieee754_asin+0x3f8>)
 80117b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117ba:	f7ee fd65 	bl	8000288 <__aeabi_dsub>
 80117be:	4602      	mov	r2, r0
 80117c0:	460b      	mov	r3, r1
 80117c2:	4630      	mov	r0, r6
 80117c4:	4639      	mov	r1, r7
 80117c6:	f7ee fd5f 	bl	8000288 <__aeabi_dsub>
 80117ca:	4642      	mov	r2, r8
 80117cc:	4604      	mov	r4, r0
 80117ce:	460d      	mov	r5, r1
 80117d0:	465b      	mov	r3, fp
 80117d2:	4640      	mov	r0, r8
 80117d4:	4659      	mov	r1, fp
 80117d6:	f7ee fd59 	bl	800028c <__adddf3>
 80117da:	4602      	mov	r2, r0
 80117dc:	460b      	mov	r3, r1
 80117de:	a10a      	add	r1, pc, #40	@ (adr r1, 8011808 <__ieee754_asin+0x400>)
 80117e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117e4:	f7ee fd50 	bl	8000288 <__aeabi_dsub>
 80117e8:	4602      	mov	r2, r0
 80117ea:	460b      	mov	r3, r1
 80117ec:	4620      	mov	r0, r4
 80117ee:	4629      	mov	r1, r5
 80117f0:	f7ee fd4a 	bl	8000288 <__aeabi_dsub>
 80117f4:	4602      	mov	r2, r0
 80117f6:	460b      	mov	r3, r1
 80117f8:	a103      	add	r1, pc, #12	@ (adr r1, 8011808 <__ieee754_asin+0x400>)
 80117fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117fe:	e6e2      	b.n	80115c6 <__ieee754_asin+0x1be>
 8011800:	33145c07 	.word	0x33145c07
 8011804:	3c91a626 	.word	0x3c91a626
 8011808:	54442d18 	.word	0x54442d18
 801180c:	3fe921fb 	.word	0x3fe921fb

08011810 <__ieee754_atan2>:
 8011810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011814:	ec57 6b11 	vmov	r6, r7, d1
 8011818:	4273      	negs	r3, r6
 801181a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8011998 <__ieee754_atan2+0x188>
 801181e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8011822:	4333      	orrs	r3, r6
 8011824:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011828:	4543      	cmp	r3, r8
 801182a:	ec51 0b10 	vmov	r0, r1, d0
 801182e:	4635      	mov	r5, r6
 8011830:	d809      	bhi.n	8011846 <__ieee754_atan2+0x36>
 8011832:	4244      	negs	r4, r0
 8011834:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011838:	4304      	orrs	r4, r0
 801183a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801183e:	4544      	cmp	r4, r8
 8011840:	468e      	mov	lr, r1
 8011842:	4681      	mov	r9, r0
 8011844:	d907      	bls.n	8011856 <__ieee754_atan2+0x46>
 8011846:	4632      	mov	r2, r6
 8011848:	463b      	mov	r3, r7
 801184a:	f7ee fd1f 	bl	800028c <__adddf3>
 801184e:	ec41 0b10 	vmov	d0, r0, r1
 8011852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011856:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801185a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801185e:	4334      	orrs	r4, r6
 8011860:	d103      	bne.n	801186a <__ieee754_atan2+0x5a>
 8011862:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011866:	f000 b89b 	b.w	80119a0 <atan>
 801186a:	17bc      	asrs	r4, r7, #30
 801186c:	f004 0402 	and.w	r4, r4, #2
 8011870:	ea53 0909 	orrs.w	r9, r3, r9
 8011874:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011878:	d107      	bne.n	801188a <__ieee754_atan2+0x7a>
 801187a:	2c02      	cmp	r4, #2
 801187c:	d05f      	beq.n	801193e <__ieee754_atan2+0x12e>
 801187e:	2c03      	cmp	r4, #3
 8011880:	d1e5      	bne.n	801184e <__ieee754_atan2+0x3e>
 8011882:	a141      	add	r1, pc, #260	@ (adr r1, 8011988 <__ieee754_atan2+0x178>)
 8011884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011888:	e7e1      	b.n	801184e <__ieee754_atan2+0x3e>
 801188a:	4315      	orrs	r5, r2
 801188c:	d106      	bne.n	801189c <__ieee754_atan2+0x8c>
 801188e:	f1be 0f00 	cmp.w	lr, #0
 8011892:	da5f      	bge.n	8011954 <__ieee754_atan2+0x144>
 8011894:	a13e      	add	r1, pc, #248	@ (adr r1, 8011990 <__ieee754_atan2+0x180>)
 8011896:	e9d1 0100 	ldrd	r0, r1, [r1]
 801189a:	e7d8      	b.n	801184e <__ieee754_atan2+0x3e>
 801189c:	4542      	cmp	r2, r8
 801189e:	d10f      	bne.n	80118c0 <__ieee754_atan2+0xb0>
 80118a0:	4293      	cmp	r3, r2
 80118a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80118a6:	d107      	bne.n	80118b8 <__ieee754_atan2+0xa8>
 80118a8:	2c02      	cmp	r4, #2
 80118aa:	d84c      	bhi.n	8011946 <__ieee754_atan2+0x136>
 80118ac:	4b34      	ldr	r3, [pc, #208]	@ (8011980 <__ieee754_atan2+0x170>)
 80118ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80118b6:	e7ca      	b.n	801184e <__ieee754_atan2+0x3e>
 80118b8:	2c02      	cmp	r4, #2
 80118ba:	d848      	bhi.n	801194e <__ieee754_atan2+0x13e>
 80118bc:	4b31      	ldr	r3, [pc, #196]	@ (8011984 <__ieee754_atan2+0x174>)
 80118be:	e7f6      	b.n	80118ae <__ieee754_atan2+0x9e>
 80118c0:	4543      	cmp	r3, r8
 80118c2:	d0e4      	beq.n	801188e <__ieee754_atan2+0x7e>
 80118c4:	1a9b      	subs	r3, r3, r2
 80118c6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80118ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80118ce:	da1e      	bge.n	801190e <__ieee754_atan2+0xfe>
 80118d0:	2f00      	cmp	r7, #0
 80118d2:	da01      	bge.n	80118d8 <__ieee754_atan2+0xc8>
 80118d4:	323c      	adds	r2, #60	@ 0x3c
 80118d6:	db1e      	blt.n	8011916 <__ieee754_atan2+0x106>
 80118d8:	4632      	mov	r2, r6
 80118da:	463b      	mov	r3, r7
 80118dc:	f7ee ffb6 	bl	800084c <__aeabi_ddiv>
 80118e0:	ec41 0b10 	vmov	d0, r0, r1
 80118e4:	f7ff fbd2 	bl	801108c <fabs>
 80118e8:	f000 f85a 	bl	80119a0 <atan>
 80118ec:	ec51 0b10 	vmov	r0, r1, d0
 80118f0:	2c01      	cmp	r4, #1
 80118f2:	d013      	beq.n	801191c <__ieee754_atan2+0x10c>
 80118f4:	2c02      	cmp	r4, #2
 80118f6:	d015      	beq.n	8011924 <__ieee754_atan2+0x114>
 80118f8:	2c00      	cmp	r4, #0
 80118fa:	d0a8      	beq.n	801184e <__ieee754_atan2+0x3e>
 80118fc:	a318      	add	r3, pc, #96	@ (adr r3, 8011960 <__ieee754_atan2+0x150>)
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	f7ee fcc1 	bl	8000288 <__aeabi_dsub>
 8011906:	a318      	add	r3, pc, #96	@ (adr r3, 8011968 <__ieee754_atan2+0x158>)
 8011908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190c:	e014      	b.n	8011938 <__ieee754_atan2+0x128>
 801190e:	a118      	add	r1, pc, #96	@ (adr r1, 8011970 <__ieee754_atan2+0x160>)
 8011910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011914:	e7ec      	b.n	80118f0 <__ieee754_atan2+0xe0>
 8011916:	2000      	movs	r0, #0
 8011918:	2100      	movs	r1, #0
 801191a:	e7e9      	b.n	80118f0 <__ieee754_atan2+0xe0>
 801191c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011920:	4619      	mov	r1, r3
 8011922:	e794      	b.n	801184e <__ieee754_atan2+0x3e>
 8011924:	a30e      	add	r3, pc, #56	@ (adr r3, 8011960 <__ieee754_atan2+0x150>)
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	f7ee fcad 	bl	8000288 <__aeabi_dsub>
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	a10d      	add	r1, pc, #52	@ (adr r1, 8011968 <__ieee754_atan2+0x158>)
 8011934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011938:	f7ee fca6 	bl	8000288 <__aeabi_dsub>
 801193c:	e787      	b.n	801184e <__ieee754_atan2+0x3e>
 801193e:	a10a      	add	r1, pc, #40	@ (adr r1, 8011968 <__ieee754_atan2+0x158>)
 8011940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011944:	e783      	b.n	801184e <__ieee754_atan2+0x3e>
 8011946:	a10c      	add	r1, pc, #48	@ (adr r1, 8011978 <__ieee754_atan2+0x168>)
 8011948:	e9d1 0100 	ldrd	r0, r1, [r1]
 801194c:	e77f      	b.n	801184e <__ieee754_atan2+0x3e>
 801194e:	2000      	movs	r0, #0
 8011950:	2100      	movs	r1, #0
 8011952:	e77c      	b.n	801184e <__ieee754_atan2+0x3e>
 8011954:	a106      	add	r1, pc, #24	@ (adr r1, 8011970 <__ieee754_atan2+0x160>)
 8011956:	e9d1 0100 	ldrd	r0, r1, [r1]
 801195a:	e778      	b.n	801184e <__ieee754_atan2+0x3e>
 801195c:	f3af 8000 	nop.w
 8011960:	33145c07 	.word	0x33145c07
 8011964:	3ca1a626 	.word	0x3ca1a626
 8011968:	54442d18 	.word	0x54442d18
 801196c:	400921fb 	.word	0x400921fb
 8011970:	54442d18 	.word	0x54442d18
 8011974:	3ff921fb 	.word	0x3ff921fb
 8011978:	54442d18 	.word	0x54442d18
 801197c:	3fe921fb 	.word	0x3fe921fb
 8011980:	08012d30 	.word	0x08012d30
 8011984:	08012d18 	.word	0x08012d18
 8011988:	54442d18 	.word	0x54442d18
 801198c:	c00921fb 	.word	0xc00921fb
 8011990:	54442d18 	.word	0x54442d18
 8011994:	bff921fb 	.word	0xbff921fb
 8011998:	7ff00000 	.word	0x7ff00000
 801199c:	00000000 	.word	0x00000000

080119a0 <atan>:
 80119a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a4:	ec55 4b10 	vmov	r4, r5, d0
 80119a8:	4bbf      	ldr	r3, [pc, #764]	@ (8011ca8 <atan+0x308>)
 80119aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80119ae:	429e      	cmp	r6, r3
 80119b0:	46ab      	mov	fp, r5
 80119b2:	d918      	bls.n	80119e6 <atan+0x46>
 80119b4:	4bbd      	ldr	r3, [pc, #756]	@ (8011cac <atan+0x30c>)
 80119b6:	429e      	cmp	r6, r3
 80119b8:	d801      	bhi.n	80119be <atan+0x1e>
 80119ba:	d109      	bne.n	80119d0 <atan+0x30>
 80119bc:	b144      	cbz	r4, 80119d0 <atan+0x30>
 80119be:	4622      	mov	r2, r4
 80119c0:	462b      	mov	r3, r5
 80119c2:	4620      	mov	r0, r4
 80119c4:	4629      	mov	r1, r5
 80119c6:	f7ee fc61 	bl	800028c <__adddf3>
 80119ca:	4604      	mov	r4, r0
 80119cc:	460d      	mov	r5, r1
 80119ce:	e006      	b.n	80119de <atan+0x3e>
 80119d0:	f1bb 0f00 	cmp.w	fp, #0
 80119d4:	f340 812b 	ble.w	8011c2e <atan+0x28e>
 80119d8:	a597      	add	r5, pc, #604	@ (adr r5, 8011c38 <atan+0x298>)
 80119da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80119de:	ec45 4b10 	vmov	d0, r4, r5
 80119e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e6:	4bb2      	ldr	r3, [pc, #712]	@ (8011cb0 <atan+0x310>)
 80119e8:	429e      	cmp	r6, r3
 80119ea:	d813      	bhi.n	8011a14 <atan+0x74>
 80119ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80119f0:	429e      	cmp	r6, r3
 80119f2:	d80c      	bhi.n	8011a0e <atan+0x6e>
 80119f4:	a392      	add	r3, pc, #584	@ (adr r3, 8011c40 <atan+0x2a0>)
 80119f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fa:	4620      	mov	r0, r4
 80119fc:	4629      	mov	r1, r5
 80119fe:	f7ee fc45 	bl	800028c <__adddf3>
 8011a02:	4bac      	ldr	r3, [pc, #688]	@ (8011cb4 <atan+0x314>)
 8011a04:	2200      	movs	r2, #0
 8011a06:	f7ef f887 	bl	8000b18 <__aeabi_dcmpgt>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	d1e7      	bne.n	80119de <atan+0x3e>
 8011a0e:	f04f 3aff 	mov.w	sl, #4294967295
 8011a12:	e029      	b.n	8011a68 <atan+0xc8>
 8011a14:	f7ff fb3a 	bl	801108c <fabs>
 8011a18:	4ba7      	ldr	r3, [pc, #668]	@ (8011cb8 <atan+0x318>)
 8011a1a:	429e      	cmp	r6, r3
 8011a1c:	ec55 4b10 	vmov	r4, r5, d0
 8011a20:	f200 80bc 	bhi.w	8011b9c <atan+0x1fc>
 8011a24:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8011a28:	429e      	cmp	r6, r3
 8011a2a:	f200 809e 	bhi.w	8011b6a <atan+0x1ca>
 8011a2e:	4622      	mov	r2, r4
 8011a30:	462b      	mov	r3, r5
 8011a32:	4620      	mov	r0, r4
 8011a34:	4629      	mov	r1, r5
 8011a36:	f7ee fc29 	bl	800028c <__adddf3>
 8011a3a:	4b9e      	ldr	r3, [pc, #632]	@ (8011cb4 <atan+0x314>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f7ee fc23 	bl	8000288 <__aeabi_dsub>
 8011a42:	2200      	movs	r2, #0
 8011a44:	4606      	mov	r6, r0
 8011a46:	460f      	mov	r7, r1
 8011a48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	4629      	mov	r1, r5
 8011a50:	f7ee fc1c 	bl	800028c <__adddf3>
 8011a54:	4602      	mov	r2, r0
 8011a56:	460b      	mov	r3, r1
 8011a58:	4630      	mov	r0, r6
 8011a5a:	4639      	mov	r1, r7
 8011a5c:	f7ee fef6 	bl	800084c <__aeabi_ddiv>
 8011a60:	f04f 0a00 	mov.w	sl, #0
 8011a64:	4604      	mov	r4, r0
 8011a66:	460d      	mov	r5, r1
 8011a68:	4622      	mov	r2, r4
 8011a6a:	462b      	mov	r3, r5
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	4629      	mov	r1, r5
 8011a70:	f7ee fdc2 	bl	80005f8 <__aeabi_dmul>
 8011a74:	4602      	mov	r2, r0
 8011a76:	460b      	mov	r3, r1
 8011a78:	4680      	mov	r8, r0
 8011a7a:	4689      	mov	r9, r1
 8011a7c:	f7ee fdbc 	bl	80005f8 <__aeabi_dmul>
 8011a80:	a371      	add	r3, pc, #452	@ (adr r3, 8011c48 <atan+0x2a8>)
 8011a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a86:	4606      	mov	r6, r0
 8011a88:	460f      	mov	r7, r1
 8011a8a:	f7ee fdb5 	bl	80005f8 <__aeabi_dmul>
 8011a8e:	a370      	add	r3, pc, #448	@ (adr r3, 8011c50 <atan+0x2b0>)
 8011a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a94:	f7ee fbfa 	bl	800028c <__adddf3>
 8011a98:	4632      	mov	r2, r6
 8011a9a:	463b      	mov	r3, r7
 8011a9c:	f7ee fdac 	bl	80005f8 <__aeabi_dmul>
 8011aa0:	a36d      	add	r3, pc, #436	@ (adr r3, 8011c58 <atan+0x2b8>)
 8011aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa6:	f7ee fbf1 	bl	800028c <__adddf3>
 8011aaa:	4632      	mov	r2, r6
 8011aac:	463b      	mov	r3, r7
 8011aae:	f7ee fda3 	bl	80005f8 <__aeabi_dmul>
 8011ab2:	a36b      	add	r3, pc, #428	@ (adr r3, 8011c60 <atan+0x2c0>)
 8011ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab8:	f7ee fbe8 	bl	800028c <__adddf3>
 8011abc:	4632      	mov	r2, r6
 8011abe:	463b      	mov	r3, r7
 8011ac0:	f7ee fd9a 	bl	80005f8 <__aeabi_dmul>
 8011ac4:	a368      	add	r3, pc, #416	@ (adr r3, 8011c68 <atan+0x2c8>)
 8011ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aca:	f7ee fbdf 	bl	800028c <__adddf3>
 8011ace:	4632      	mov	r2, r6
 8011ad0:	463b      	mov	r3, r7
 8011ad2:	f7ee fd91 	bl	80005f8 <__aeabi_dmul>
 8011ad6:	a366      	add	r3, pc, #408	@ (adr r3, 8011c70 <atan+0x2d0>)
 8011ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011adc:	f7ee fbd6 	bl	800028c <__adddf3>
 8011ae0:	4642      	mov	r2, r8
 8011ae2:	464b      	mov	r3, r9
 8011ae4:	f7ee fd88 	bl	80005f8 <__aeabi_dmul>
 8011ae8:	a363      	add	r3, pc, #396	@ (adr r3, 8011c78 <atan+0x2d8>)
 8011aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aee:	4680      	mov	r8, r0
 8011af0:	4689      	mov	r9, r1
 8011af2:	4630      	mov	r0, r6
 8011af4:	4639      	mov	r1, r7
 8011af6:	f7ee fd7f 	bl	80005f8 <__aeabi_dmul>
 8011afa:	a361      	add	r3, pc, #388	@ (adr r3, 8011c80 <atan+0x2e0>)
 8011afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b00:	f7ee fbc2 	bl	8000288 <__aeabi_dsub>
 8011b04:	4632      	mov	r2, r6
 8011b06:	463b      	mov	r3, r7
 8011b08:	f7ee fd76 	bl	80005f8 <__aeabi_dmul>
 8011b0c:	a35e      	add	r3, pc, #376	@ (adr r3, 8011c88 <atan+0x2e8>)
 8011b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b12:	f7ee fbb9 	bl	8000288 <__aeabi_dsub>
 8011b16:	4632      	mov	r2, r6
 8011b18:	463b      	mov	r3, r7
 8011b1a:	f7ee fd6d 	bl	80005f8 <__aeabi_dmul>
 8011b1e:	a35c      	add	r3, pc, #368	@ (adr r3, 8011c90 <atan+0x2f0>)
 8011b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b24:	f7ee fbb0 	bl	8000288 <__aeabi_dsub>
 8011b28:	4632      	mov	r2, r6
 8011b2a:	463b      	mov	r3, r7
 8011b2c:	f7ee fd64 	bl	80005f8 <__aeabi_dmul>
 8011b30:	a359      	add	r3, pc, #356	@ (adr r3, 8011c98 <atan+0x2f8>)
 8011b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b36:	f7ee fba7 	bl	8000288 <__aeabi_dsub>
 8011b3a:	4632      	mov	r2, r6
 8011b3c:	463b      	mov	r3, r7
 8011b3e:	f7ee fd5b 	bl	80005f8 <__aeabi_dmul>
 8011b42:	4602      	mov	r2, r0
 8011b44:	460b      	mov	r3, r1
 8011b46:	4640      	mov	r0, r8
 8011b48:	4649      	mov	r1, r9
 8011b4a:	f7ee fb9f 	bl	800028c <__adddf3>
 8011b4e:	4622      	mov	r2, r4
 8011b50:	462b      	mov	r3, r5
 8011b52:	f7ee fd51 	bl	80005f8 <__aeabi_dmul>
 8011b56:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	d148      	bne.n	8011bf2 <atan+0x252>
 8011b60:	4620      	mov	r0, r4
 8011b62:	4629      	mov	r1, r5
 8011b64:	f7ee fb90 	bl	8000288 <__aeabi_dsub>
 8011b68:	e72f      	b.n	80119ca <atan+0x2a>
 8011b6a:	4b52      	ldr	r3, [pc, #328]	@ (8011cb4 <atan+0x314>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	4620      	mov	r0, r4
 8011b70:	4629      	mov	r1, r5
 8011b72:	f7ee fb89 	bl	8000288 <__aeabi_dsub>
 8011b76:	4b4f      	ldr	r3, [pc, #316]	@ (8011cb4 <atan+0x314>)
 8011b78:	4606      	mov	r6, r0
 8011b7a:	460f      	mov	r7, r1
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	4620      	mov	r0, r4
 8011b80:	4629      	mov	r1, r5
 8011b82:	f7ee fb83 	bl	800028c <__adddf3>
 8011b86:	4602      	mov	r2, r0
 8011b88:	460b      	mov	r3, r1
 8011b8a:	4630      	mov	r0, r6
 8011b8c:	4639      	mov	r1, r7
 8011b8e:	f7ee fe5d 	bl	800084c <__aeabi_ddiv>
 8011b92:	f04f 0a01 	mov.w	sl, #1
 8011b96:	4604      	mov	r4, r0
 8011b98:	460d      	mov	r5, r1
 8011b9a:	e765      	b.n	8011a68 <atan+0xc8>
 8011b9c:	4b47      	ldr	r3, [pc, #284]	@ (8011cbc <atan+0x31c>)
 8011b9e:	429e      	cmp	r6, r3
 8011ba0:	d21c      	bcs.n	8011bdc <atan+0x23c>
 8011ba2:	4b47      	ldr	r3, [pc, #284]	@ (8011cc0 <atan+0x320>)
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	4629      	mov	r1, r5
 8011baa:	f7ee fb6d 	bl	8000288 <__aeabi_dsub>
 8011bae:	4b44      	ldr	r3, [pc, #272]	@ (8011cc0 <atan+0x320>)
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	460f      	mov	r7, r1
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	4629      	mov	r1, r5
 8011bba:	f7ee fd1d 	bl	80005f8 <__aeabi_dmul>
 8011bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8011cb4 <atan+0x314>)
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	f7ee fb63 	bl	800028c <__adddf3>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	460b      	mov	r3, r1
 8011bca:	4630      	mov	r0, r6
 8011bcc:	4639      	mov	r1, r7
 8011bce:	f7ee fe3d 	bl	800084c <__aeabi_ddiv>
 8011bd2:	f04f 0a02 	mov.w	sl, #2
 8011bd6:	4604      	mov	r4, r0
 8011bd8:	460d      	mov	r5, r1
 8011bda:	e745      	b.n	8011a68 <atan+0xc8>
 8011bdc:	4622      	mov	r2, r4
 8011bde:	462b      	mov	r3, r5
 8011be0:	4938      	ldr	r1, [pc, #224]	@ (8011cc4 <atan+0x324>)
 8011be2:	2000      	movs	r0, #0
 8011be4:	f7ee fe32 	bl	800084c <__aeabi_ddiv>
 8011be8:	f04f 0a03 	mov.w	sl, #3
 8011bec:	4604      	mov	r4, r0
 8011bee:	460d      	mov	r5, r1
 8011bf0:	e73a      	b.n	8011a68 <atan+0xc8>
 8011bf2:	4b35      	ldr	r3, [pc, #212]	@ (8011cc8 <atan+0x328>)
 8011bf4:	4e35      	ldr	r6, [pc, #212]	@ (8011ccc <atan+0x32c>)
 8011bf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfe:	f7ee fb43 	bl	8000288 <__aeabi_dsub>
 8011c02:	4622      	mov	r2, r4
 8011c04:	462b      	mov	r3, r5
 8011c06:	f7ee fb3f 	bl	8000288 <__aeabi_dsub>
 8011c0a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011c0e:	4602      	mov	r2, r0
 8011c10:	460b      	mov	r3, r1
 8011c12:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011c16:	f7ee fb37 	bl	8000288 <__aeabi_dsub>
 8011c1a:	f1bb 0f00 	cmp.w	fp, #0
 8011c1e:	4604      	mov	r4, r0
 8011c20:	460d      	mov	r5, r1
 8011c22:	f6bf aedc 	bge.w	80119de <atan+0x3e>
 8011c26:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011c2a:	461d      	mov	r5, r3
 8011c2c:	e6d7      	b.n	80119de <atan+0x3e>
 8011c2e:	a51c      	add	r5, pc, #112	@ (adr r5, 8011ca0 <atan+0x300>)
 8011c30:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011c34:	e6d3      	b.n	80119de <atan+0x3e>
 8011c36:	bf00      	nop
 8011c38:	54442d18 	.word	0x54442d18
 8011c3c:	3ff921fb 	.word	0x3ff921fb
 8011c40:	8800759c 	.word	0x8800759c
 8011c44:	7e37e43c 	.word	0x7e37e43c
 8011c48:	e322da11 	.word	0xe322da11
 8011c4c:	3f90ad3a 	.word	0x3f90ad3a
 8011c50:	24760deb 	.word	0x24760deb
 8011c54:	3fa97b4b 	.word	0x3fa97b4b
 8011c58:	a0d03d51 	.word	0xa0d03d51
 8011c5c:	3fb10d66 	.word	0x3fb10d66
 8011c60:	c54c206e 	.word	0xc54c206e
 8011c64:	3fb745cd 	.word	0x3fb745cd
 8011c68:	920083ff 	.word	0x920083ff
 8011c6c:	3fc24924 	.word	0x3fc24924
 8011c70:	5555550d 	.word	0x5555550d
 8011c74:	3fd55555 	.word	0x3fd55555
 8011c78:	2c6a6c2f 	.word	0x2c6a6c2f
 8011c7c:	bfa2b444 	.word	0xbfa2b444
 8011c80:	52defd9a 	.word	0x52defd9a
 8011c84:	3fadde2d 	.word	0x3fadde2d
 8011c88:	af749a6d 	.word	0xaf749a6d
 8011c8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011c90:	fe231671 	.word	0xfe231671
 8011c94:	3fbc71c6 	.word	0x3fbc71c6
 8011c98:	9998ebc4 	.word	0x9998ebc4
 8011c9c:	3fc99999 	.word	0x3fc99999
 8011ca0:	54442d18 	.word	0x54442d18
 8011ca4:	bff921fb 	.word	0xbff921fb
 8011ca8:	440fffff 	.word	0x440fffff
 8011cac:	7ff00000 	.word	0x7ff00000
 8011cb0:	3fdbffff 	.word	0x3fdbffff
 8011cb4:	3ff00000 	.word	0x3ff00000
 8011cb8:	3ff2ffff 	.word	0x3ff2ffff
 8011cbc:	40038000 	.word	0x40038000
 8011cc0:	3ff80000 	.word	0x3ff80000
 8011cc4:	bff00000 	.word	0xbff00000
 8011cc8:	08012d48 	.word	0x08012d48
 8011ccc:	08012d68 	.word	0x08012d68

08011cd0 <__kernel_cosf>:
 8011cd0:	ee10 3a10 	vmov	r3, s0
 8011cd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011cd8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011cdc:	eef0 6a40 	vmov.f32	s13, s0
 8011ce0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011ce4:	d204      	bcs.n	8011cf0 <__kernel_cosf+0x20>
 8011ce6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8011cea:	ee17 2a90 	vmov	r2, s15
 8011cee:	b342      	cbz	r2, 8011d42 <__kernel_cosf+0x72>
 8011cf0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011cf4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011d60 <__kernel_cosf+0x90>
 8011cf8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011d64 <__kernel_cosf+0x94>
 8011cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8011d68 <__kernel_cosf+0x98>)
 8011cfe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011d02:	4293      	cmp	r3, r2
 8011d04:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011d6c <__kernel_cosf+0x9c>
 8011d08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011d0c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011d70 <__kernel_cosf+0xa0>
 8011d10:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011d14:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011d74 <__kernel_cosf+0xa4>
 8011d18:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011d1c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011d78 <__kernel_cosf+0xa8>
 8011d20:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011d24:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8011d28:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011d2c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011d30:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d38:	d804      	bhi.n	8011d44 <__kernel_cosf+0x74>
 8011d3a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011d3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d42:	4770      	bx	lr
 8011d44:	4a0d      	ldr	r2, [pc, #52]	@ (8011d7c <__kernel_cosf+0xac>)
 8011d46:	4293      	cmp	r3, r2
 8011d48:	bf9a      	itte	ls
 8011d4a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8011d4e:	ee07 3a10 	vmovls	s14, r3
 8011d52:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011d56:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011d5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d5e:	e7ec      	b.n	8011d3a <__kernel_cosf+0x6a>
 8011d60:	ad47d74e 	.word	0xad47d74e
 8011d64:	310f74f6 	.word	0x310f74f6
 8011d68:	3e999999 	.word	0x3e999999
 8011d6c:	b493f27c 	.word	0xb493f27c
 8011d70:	37d00d01 	.word	0x37d00d01
 8011d74:	bab60b61 	.word	0xbab60b61
 8011d78:	3d2aaaab 	.word	0x3d2aaaab
 8011d7c:	3f480000 	.word	0x3f480000

08011d80 <__kernel_sinf>:
 8011d80:	ee10 3a10 	vmov	r3, s0
 8011d84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011d88:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011d8c:	d204      	bcs.n	8011d98 <__kernel_sinf+0x18>
 8011d8e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011d92:	ee17 3a90 	vmov	r3, s15
 8011d96:	b35b      	cbz	r3, 8011df0 <__kernel_sinf+0x70>
 8011d98:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011d9c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011df4 <__kernel_sinf+0x74>
 8011da0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011df8 <__kernel_sinf+0x78>
 8011da4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011da8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8011dfc <__kernel_sinf+0x7c>
 8011dac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011db0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011e00 <__kernel_sinf+0x80>
 8011db4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011db8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011e04 <__kernel_sinf+0x84>
 8011dbc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011dc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011dc4:	b930      	cbnz	r0, 8011dd4 <__kernel_sinf+0x54>
 8011dc6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011e08 <__kernel_sinf+0x88>
 8011dca:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011dce:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011dd2:	4770      	bx	lr
 8011dd4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011dd8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011ddc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011de0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011de4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8011e0c <__kernel_sinf+0x8c>
 8011de8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011dec:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011df0:	4770      	bx	lr
 8011df2:	bf00      	nop
 8011df4:	2f2ec9d3 	.word	0x2f2ec9d3
 8011df8:	b2d72f34 	.word	0xb2d72f34
 8011dfc:	3638ef1b 	.word	0x3638ef1b
 8011e00:	b9500d01 	.word	0xb9500d01
 8011e04:	3c088889 	.word	0x3c088889
 8011e08:	be2aaaab 	.word	0xbe2aaaab
 8011e0c:	3e2aaaab 	.word	0x3e2aaaab

08011e10 <__ieee754_expf>:
 8011e10:	ee10 2a10 	vmov	r2, s0
 8011e14:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8011e18:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011e1c:	d902      	bls.n	8011e24 <__ieee754_expf+0x14>
 8011e1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011e22:	4770      	bx	lr
 8011e24:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8011e28:	d106      	bne.n	8011e38 <__ieee754_expf+0x28>
 8011e2a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8011f64 <__ieee754_expf+0x154>
 8011e2e:	2900      	cmp	r1, #0
 8011e30:	bf18      	it	ne
 8011e32:	eeb0 0a67 	vmovne.f32	s0, s15
 8011e36:	4770      	bx	lr
 8011e38:	484b      	ldr	r0, [pc, #300]	@ (8011f68 <__ieee754_expf+0x158>)
 8011e3a:	4282      	cmp	r2, r0
 8011e3c:	dd02      	ble.n	8011e44 <__ieee754_expf+0x34>
 8011e3e:	2000      	movs	r0, #0
 8011e40:	f000 ba6a 	b.w	8012318 <__math_oflowf>
 8011e44:	2a00      	cmp	r2, #0
 8011e46:	da05      	bge.n	8011e54 <__ieee754_expf+0x44>
 8011e48:	4a48      	ldr	r2, [pc, #288]	@ (8011f6c <__ieee754_expf+0x15c>)
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	d902      	bls.n	8011e54 <__ieee754_expf+0x44>
 8011e4e:	2000      	movs	r0, #0
 8011e50:	f000 ba5c 	b.w	801230c <__math_uflowf>
 8011e54:	4a46      	ldr	r2, [pc, #280]	@ (8011f70 <__ieee754_expf+0x160>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8011e5c:	d952      	bls.n	8011f04 <__ieee754_expf+0xf4>
 8011e5e:	4a45      	ldr	r2, [pc, #276]	@ (8011f74 <__ieee754_expf+0x164>)
 8011e60:	4293      	cmp	r3, r2
 8011e62:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8011e66:	d834      	bhi.n	8011ed2 <__ieee754_expf+0xc2>
 8011e68:	4b43      	ldr	r3, [pc, #268]	@ (8011f78 <__ieee754_expf+0x168>)
 8011e6a:	4413      	add	r3, r2
 8011e6c:	ed93 7a00 	vldr	s14, [r3]
 8011e70:	4b42      	ldr	r3, [pc, #264]	@ (8011f7c <__ieee754_expf+0x16c>)
 8011e72:	4413      	add	r3, r2
 8011e74:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011e78:	f1c1 0201 	rsb	r2, r1, #1
 8011e7c:	edd3 7a00 	vldr	s15, [r3]
 8011e80:	1a52      	subs	r2, r2, r1
 8011e82:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011e86:	ee20 6a00 	vmul.f32	s12, s0, s0
 8011e8a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8011f80 <__ieee754_expf+0x170>
 8011e8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011f84 <__ieee754_expf+0x174>
 8011e92:	eee6 6a05 	vfma.f32	s13, s12, s10
 8011e96:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8011f88 <__ieee754_expf+0x178>
 8011e9a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011e9e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011f8c <__ieee754_expf+0x17c>
 8011ea2:	eee5 6a06 	vfma.f32	s13, s10, s12
 8011ea6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8011f90 <__ieee754_expf+0x180>
 8011eaa:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011eae:	eef0 6a40 	vmov.f32	s13, s0
 8011eb2:	eee5 6a46 	vfms.f32	s13, s10, s12
 8011eb6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011eba:	ee20 5a26 	vmul.f32	s10, s0, s13
 8011ebe:	bb92      	cbnz	r2, 8011f26 <__ieee754_expf+0x116>
 8011ec0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011ec4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011ec8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011ecc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8011ed0:	4770      	bx	lr
 8011ed2:	4b30      	ldr	r3, [pc, #192]	@ (8011f94 <__ieee754_expf+0x184>)
 8011ed4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011f98 <__ieee754_expf+0x188>
 8011ed8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8011f9c <__ieee754_expf+0x18c>
 8011edc:	4413      	add	r3, r2
 8011ede:	edd3 7a00 	vldr	s15, [r3]
 8011ee2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011ee6:	eeb0 7a40 	vmov.f32	s14, s0
 8011eea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011eee:	ee17 2a90 	vmov	r2, s15
 8011ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ef6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011efa:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011fa0 <__ieee754_expf+0x190>
 8011efe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011f02:	e7be      	b.n	8011e82 <__ieee754_expf+0x72>
 8011f04:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8011f08:	d20b      	bcs.n	8011f22 <__ieee754_expf+0x112>
 8011f0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011fa4 <__ieee754_expf+0x194>
 8011f0e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011f12:	eef4 6ae5 	vcmpe.f32	s13, s11
 8011f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1a:	dd02      	ble.n	8011f22 <__ieee754_expf+0x112>
 8011f1c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8011f20:	4770      	bx	lr
 8011f22:	2200      	movs	r2, #0
 8011f24:	e7af      	b.n	8011e86 <__ieee754_expf+0x76>
 8011f26:	ee36 6a66 	vsub.f32	s12, s12, s13
 8011f2a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8011f2e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8011f32:	bfb8      	it	lt
 8011f34:	3264      	addlt	r2, #100	@ 0x64
 8011f36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011f3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f3e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011f42:	ee17 3a90 	vmov	r3, s15
 8011f46:	bfab      	itete	ge
 8011f48:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011f4c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011f50:	ee00 3a10 	vmovge	s0, r3
 8011f54:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8011fa8 <__ieee754_expf+0x198>
 8011f58:	bfbc      	itt	lt
 8011f5a:	ee00 3a10 	vmovlt	s0, r3
 8011f5e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011f62:	4770      	bx	lr
 8011f64:	00000000 	.word	0x00000000
 8011f68:	42b17217 	.word	0x42b17217
 8011f6c:	42cff1b5 	.word	0x42cff1b5
 8011f70:	3eb17218 	.word	0x3eb17218
 8011f74:	3f851591 	.word	0x3f851591
 8011f78:	08012d90 	.word	0x08012d90
 8011f7c:	08012d88 	.word	0x08012d88
 8011f80:	3331bb4c 	.word	0x3331bb4c
 8011f84:	b5ddea0e 	.word	0xb5ddea0e
 8011f88:	388ab355 	.word	0x388ab355
 8011f8c:	bb360b61 	.word	0xbb360b61
 8011f90:	3e2aaaab 	.word	0x3e2aaaab
 8011f94:	08012d98 	.word	0x08012d98
 8011f98:	3fb8aa3b 	.word	0x3fb8aa3b
 8011f9c:	3f317180 	.word	0x3f317180
 8011fa0:	3717f7d1 	.word	0x3717f7d1
 8011fa4:	7149f2ca 	.word	0x7149f2ca
 8011fa8:	0d800000 	.word	0x0d800000

08011fac <__ieee754_rem_pio2f>:
 8011fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fae:	ee10 6a10 	vmov	r6, s0
 8011fb2:	4b88      	ldr	r3, [pc, #544]	@ (80121d4 <__ieee754_rem_pio2f+0x228>)
 8011fb4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011fb8:	429d      	cmp	r5, r3
 8011fba:	b087      	sub	sp, #28
 8011fbc:	4604      	mov	r4, r0
 8011fbe:	d805      	bhi.n	8011fcc <__ieee754_rem_pio2f+0x20>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	ed80 0a00 	vstr	s0, [r0]
 8011fc6:	6043      	str	r3, [r0, #4]
 8011fc8:	2000      	movs	r0, #0
 8011fca:	e022      	b.n	8012012 <__ieee754_rem_pio2f+0x66>
 8011fcc:	4b82      	ldr	r3, [pc, #520]	@ (80121d8 <__ieee754_rem_pio2f+0x22c>)
 8011fce:	429d      	cmp	r5, r3
 8011fd0:	d83a      	bhi.n	8012048 <__ieee754_rem_pio2f+0x9c>
 8011fd2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011fd6:	2e00      	cmp	r6, #0
 8011fd8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80121dc <__ieee754_rem_pio2f+0x230>
 8011fdc:	4a80      	ldr	r2, [pc, #512]	@ (80121e0 <__ieee754_rem_pio2f+0x234>)
 8011fde:	f023 030f 	bic.w	r3, r3, #15
 8011fe2:	dd18      	ble.n	8012016 <__ieee754_rem_pio2f+0x6a>
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011fea:	bf09      	itett	eq
 8011fec:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80121e4 <__ieee754_rem_pio2f+0x238>
 8011ff0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80121e8 <__ieee754_rem_pio2f+0x23c>
 8011ff4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80121ec <__ieee754_rem_pio2f+0x240>
 8011ff8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011ffc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8012000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012004:	ed80 7a00 	vstr	s14, [r0]
 8012008:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801200c:	edc0 7a01 	vstr	s15, [r0, #4]
 8012010:	2001      	movs	r0, #1
 8012012:	b007      	add	sp, #28
 8012014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012016:	4293      	cmp	r3, r2
 8012018:	ee70 7a07 	vadd.f32	s15, s0, s14
 801201c:	bf09      	itett	eq
 801201e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80121e4 <__ieee754_rem_pio2f+0x238>
 8012022:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80121e8 <__ieee754_rem_pio2f+0x23c>
 8012026:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80121ec <__ieee754_rem_pio2f+0x240>
 801202a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801202e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012032:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012036:	ed80 7a00 	vstr	s14, [r0]
 801203a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801203e:	edc0 7a01 	vstr	s15, [r0, #4]
 8012042:	f04f 30ff 	mov.w	r0, #4294967295
 8012046:	e7e4      	b.n	8012012 <__ieee754_rem_pio2f+0x66>
 8012048:	4b69      	ldr	r3, [pc, #420]	@ (80121f0 <__ieee754_rem_pio2f+0x244>)
 801204a:	429d      	cmp	r5, r3
 801204c:	d873      	bhi.n	8012136 <__ieee754_rem_pio2f+0x18a>
 801204e:	f7ff f89f 	bl	8011190 <fabsf>
 8012052:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80121f4 <__ieee754_rem_pio2f+0x248>
 8012056:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801205a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801205e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012066:	ee17 0a90 	vmov	r0, s15
 801206a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80121dc <__ieee754_rem_pio2f+0x230>
 801206e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012072:	281f      	cmp	r0, #31
 8012074:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80121e8 <__ieee754_rem_pio2f+0x23c>
 8012078:	ee67 7a27 	vmul.f32	s15, s14, s15
 801207c:	eeb1 6a47 	vneg.f32	s12, s14
 8012080:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012084:	ee16 1a90 	vmov	r1, s13
 8012088:	dc09      	bgt.n	801209e <__ieee754_rem_pio2f+0xf2>
 801208a:	4a5b      	ldr	r2, [pc, #364]	@ (80121f8 <__ieee754_rem_pio2f+0x24c>)
 801208c:	1e47      	subs	r7, r0, #1
 801208e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012092:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012096:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801209a:	4293      	cmp	r3, r2
 801209c:	d107      	bne.n	80120ae <__ieee754_rem_pio2f+0x102>
 801209e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80120a2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80120a6:	2a08      	cmp	r2, #8
 80120a8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80120ac:	dc14      	bgt.n	80120d8 <__ieee754_rem_pio2f+0x12c>
 80120ae:	6021      	str	r1, [r4, #0]
 80120b0:	ed94 7a00 	vldr	s14, [r4]
 80120b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80120b8:	2e00      	cmp	r6, #0
 80120ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80120be:	ed84 0a01 	vstr	s0, [r4, #4]
 80120c2:	daa6      	bge.n	8012012 <__ieee754_rem_pio2f+0x66>
 80120c4:	eeb1 7a47 	vneg.f32	s14, s14
 80120c8:	eeb1 0a40 	vneg.f32	s0, s0
 80120cc:	ed84 7a00 	vstr	s14, [r4]
 80120d0:	ed84 0a01 	vstr	s0, [r4, #4]
 80120d4:	4240      	negs	r0, r0
 80120d6:	e79c      	b.n	8012012 <__ieee754_rem_pio2f+0x66>
 80120d8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80121e4 <__ieee754_rem_pio2f+0x238>
 80120dc:	eef0 6a40 	vmov.f32	s13, s0
 80120e0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80120e4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80120e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80120ec:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80121ec <__ieee754_rem_pio2f+0x240>
 80120f0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80120f4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80120f8:	ee15 2a90 	vmov	r2, s11
 80120fc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012100:	1a5b      	subs	r3, r3, r1
 8012102:	2b19      	cmp	r3, #25
 8012104:	dc04      	bgt.n	8012110 <__ieee754_rem_pio2f+0x164>
 8012106:	edc4 5a00 	vstr	s11, [r4]
 801210a:	eeb0 0a66 	vmov.f32	s0, s13
 801210e:	e7cf      	b.n	80120b0 <__ieee754_rem_pio2f+0x104>
 8012110:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80121fc <__ieee754_rem_pio2f+0x250>
 8012114:	eeb0 0a66 	vmov.f32	s0, s13
 8012118:	eea6 0a25 	vfma.f32	s0, s12, s11
 801211c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012120:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012200 <__ieee754_rem_pio2f+0x254>
 8012124:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012128:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801212c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012130:	ed84 7a00 	vstr	s14, [r4]
 8012134:	e7bc      	b.n	80120b0 <__ieee754_rem_pio2f+0x104>
 8012136:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801213a:	d306      	bcc.n	801214a <__ieee754_rem_pio2f+0x19e>
 801213c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012140:	edc0 7a01 	vstr	s15, [r0, #4]
 8012144:	edc0 7a00 	vstr	s15, [r0]
 8012148:	e73e      	b.n	8011fc8 <__ieee754_rem_pio2f+0x1c>
 801214a:	15ea      	asrs	r2, r5, #23
 801214c:	3a86      	subs	r2, #134	@ 0x86
 801214e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012152:	ee07 3a90 	vmov	s15, r3
 8012156:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801215a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012204 <__ieee754_rem_pio2f+0x258>
 801215e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012166:	ed8d 7a03 	vstr	s14, [sp, #12]
 801216a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801216e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012172:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801217a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801217e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012182:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218a:	edcd 7a05 	vstr	s15, [sp, #20]
 801218e:	d11e      	bne.n	80121ce <__ieee754_rem_pio2f+0x222>
 8012190:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	bf0c      	ite	eq
 801219a:	2301      	moveq	r3, #1
 801219c:	2302      	movne	r3, #2
 801219e:	491a      	ldr	r1, [pc, #104]	@ (8012208 <__ieee754_rem_pio2f+0x25c>)
 80121a0:	9101      	str	r1, [sp, #4]
 80121a2:	2102      	movs	r1, #2
 80121a4:	9100      	str	r1, [sp, #0]
 80121a6:	a803      	add	r0, sp, #12
 80121a8:	4621      	mov	r1, r4
 80121aa:	f000 f8bb 	bl	8012324 <__kernel_rem_pio2f>
 80121ae:	2e00      	cmp	r6, #0
 80121b0:	f6bf af2f 	bge.w	8012012 <__ieee754_rem_pio2f+0x66>
 80121b4:	edd4 7a00 	vldr	s15, [r4]
 80121b8:	eef1 7a67 	vneg.f32	s15, s15
 80121bc:	edc4 7a00 	vstr	s15, [r4]
 80121c0:	edd4 7a01 	vldr	s15, [r4, #4]
 80121c4:	eef1 7a67 	vneg.f32	s15, s15
 80121c8:	edc4 7a01 	vstr	s15, [r4, #4]
 80121cc:	e782      	b.n	80120d4 <__ieee754_rem_pio2f+0x128>
 80121ce:	2303      	movs	r3, #3
 80121d0:	e7e5      	b.n	801219e <__ieee754_rem_pio2f+0x1f2>
 80121d2:	bf00      	nop
 80121d4:	3f490fd8 	.word	0x3f490fd8
 80121d8:	4016cbe3 	.word	0x4016cbe3
 80121dc:	3fc90f80 	.word	0x3fc90f80
 80121e0:	3fc90fd0 	.word	0x3fc90fd0
 80121e4:	37354400 	.word	0x37354400
 80121e8:	37354443 	.word	0x37354443
 80121ec:	2e85a308 	.word	0x2e85a308
 80121f0:	43490f80 	.word	0x43490f80
 80121f4:	3f22f984 	.word	0x3f22f984
 80121f8:	08012da0 	.word	0x08012da0
 80121fc:	2e85a300 	.word	0x2e85a300
 8012200:	248d3132 	.word	0x248d3132
 8012204:	43800000 	.word	0x43800000
 8012208:	08012e20 	.word	0x08012e20

0801220c <scalbnf>:
 801220c:	ee10 3a10 	vmov	r3, s0
 8012210:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012214:	d02b      	beq.n	801226e <scalbnf+0x62>
 8012216:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801221a:	d302      	bcc.n	8012222 <scalbnf+0x16>
 801221c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012220:	4770      	bx	lr
 8012222:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012226:	d123      	bne.n	8012270 <scalbnf+0x64>
 8012228:	4b24      	ldr	r3, [pc, #144]	@ (80122bc <scalbnf+0xb0>)
 801222a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80122c0 <scalbnf+0xb4>
 801222e:	4298      	cmp	r0, r3
 8012230:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012234:	db17      	blt.n	8012266 <scalbnf+0x5a>
 8012236:	ee10 3a10 	vmov	r3, s0
 801223a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801223e:	3a19      	subs	r2, #25
 8012240:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012244:	4288      	cmp	r0, r1
 8012246:	dd15      	ble.n	8012274 <scalbnf+0x68>
 8012248:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80122c4 <scalbnf+0xb8>
 801224c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80122c8 <scalbnf+0xbc>
 8012250:	ee10 3a10 	vmov	r3, s0
 8012254:	eeb0 7a67 	vmov.f32	s14, s15
 8012258:	2b00      	cmp	r3, #0
 801225a:	bfb8      	it	lt
 801225c:	eef0 7a66 	vmovlt.f32	s15, s13
 8012260:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012264:	4770      	bx	lr
 8012266:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80122cc <scalbnf+0xc0>
 801226a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801226e:	4770      	bx	lr
 8012270:	0dd2      	lsrs	r2, r2, #23
 8012272:	e7e5      	b.n	8012240 <scalbnf+0x34>
 8012274:	4410      	add	r0, r2
 8012276:	28fe      	cmp	r0, #254	@ 0xfe
 8012278:	dce6      	bgt.n	8012248 <scalbnf+0x3c>
 801227a:	2800      	cmp	r0, #0
 801227c:	dd06      	ble.n	801228c <scalbnf+0x80>
 801227e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012282:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012286:	ee00 3a10 	vmov	s0, r3
 801228a:	4770      	bx	lr
 801228c:	f110 0f16 	cmn.w	r0, #22
 8012290:	da09      	bge.n	80122a6 <scalbnf+0x9a>
 8012292:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80122cc <scalbnf+0xc0>
 8012296:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80122d0 <scalbnf+0xc4>
 801229a:	ee10 3a10 	vmov	r3, s0
 801229e:	eeb0 7a67 	vmov.f32	s14, s15
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	e7d9      	b.n	801225a <scalbnf+0x4e>
 80122a6:	3019      	adds	r0, #25
 80122a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80122ac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80122b0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80122d4 <scalbnf+0xc8>
 80122b4:	ee07 3a90 	vmov	s15, r3
 80122b8:	e7d7      	b.n	801226a <scalbnf+0x5e>
 80122ba:	bf00      	nop
 80122bc:	ffff3cb0 	.word	0xffff3cb0
 80122c0:	4c000000 	.word	0x4c000000
 80122c4:	7149f2ca 	.word	0x7149f2ca
 80122c8:	f149f2ca 	.word	0xf149f2ca
 80122cc:	0da24260 	.word	0x0da24260
 80122d0:	8da24260 	.word	0x8da24260
 80122d4:	33000000 	.word	0x33000000

080122d8 <with_errnof>:
 80122d8:	b510      	push	{r4, lr}
 80122da:	ed2d 8b02 	vpush	{d8}
 80122de:	eeb0 8a40 	vmov.f32	s16, s0
 80122e2:	4604      	mov	r4, r0
 80122e4:	f7fc fe14 	bl	800ef10 <__errno>
 80122e8:	eeb0 0a48 	vmov.f32	s0, s16
 80122ec:	ecbd 8b02 	vpop	{d8}
 80122f0:	6004      	str	r4, [r0, #0]
 80122f2:	bd10      	pop	{r4, pc}

080122f4 <xflowf>:
 80122f4:	b130      	cbz	r0, 8012304 <xflowf+0x10>
 80122f6:	eef1 7a40 	vneg.f32	s15, s0
 80122fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80122fe:	2022      	movs	r0, #34	@ 0x22
 8012300:	f7ff bfea 	b.w	80122d8 <with_errnof>
 8012304:	eef0 7a40 	vmov.f32	s15, s0
 8012308:	e7f7      	b.n	80122fa <xflowf+0x6>
	...

0801230c <__math_uflowf>:
 801230c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012314 <__math_uflowf+0x8>
 8012310:	f7ff bff0 	b.w	80122f4 <xflowf>
 8012314:	10000000 	.word	0x10000000

08012318 <__math_oflowf>:
 8012318:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012320 <__math_oflowf+0x8>
 801231c:	f7ff bfea 	b.w	80122f4 <xflowf>
 8012320:	70000000 	.word	0x70000000

08012324 <__kernel_rem_pio2f>:
 8012324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	ed2d 8b04 	vpush	{d8-d9}
 801232c:	b0d9      	sub	sp, #356	@ 0x164
 801232e:	4690      	mov	r8, r2
 8012330:	9001      	str	r0, [sp, #4]
 8012332:	4ab9      	ldr	r2, [pc, #740]	@ (8012618 <__kernel_rem_pio2f+0x2f4>)
 8012334:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8012336:	f118 0f04 	cmn.w	r8, #4
 801233a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801233e:	460f      	mov	r7, r1
 8012340:	f103 3bff 	add.w	fp, r3, #4294967295
 8012344:	db27      	blt.n	8012396 <__kernel_rem_pio2f+0x72>
 8012346:	f1b8 0203 	subs.w	r2, r8, #3
 801234a:	bf48      	it	mi
 801234c:	f108 0204 	addmi.w	r2, r8, #4
 8012350:	10d2      	asrs	r2, r2, #3
 8012352:	1c55      	adds	r5, r2, #1
 8012354:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012356:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8012628 <__kernel_rem_pio2f+0x304>
 801235a:	00e8      	lsls	r0, r5, #3
 801235c:	eba2 060b 	sub.w	r6, r2, fp
 8012360:	9002      	str	r0, [sp, #8]
 8012362:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8012366:	eb0a 0c0b 	add.w	ip, sl, fp
 801236a:	ac1c      	add	r4, sp, #112	@ 0x70
 801236c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8012370:	2000      	movs	r0, #0
 8012372:	4560      	cmp	r0, ip
 8012374:	dd11      	ble.n	801239a <__kernel_rem_pio2f+0x76>
 8012376:	a91c      	add	r1, sp, #112	@ 0x70
 8012378:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801237c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8012380:	f04f 0c00 	mov.w	ip, #0
 8012384:	45d4      	cmp	ip, sl
 8012386:	dc27      	bgt.n	80123d8 <__kernel_rem_pio2f+0xb4>
 8012388:	f8dd e004 	ldr.w	lr, [sp, #4]
 801238c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8012628 <__kernel_rem_pio2f+0x304>
 8012390:	4606      	mov	r6, r0
 8012392:	2400      	movs	r4, #0
 8012394:	e016      	b.n	80123c4 <__kernel_rem_pio2f+0xa0>
 8012396:	2200      	movs	r2, #0
 8012398:	e7db      	b.n	8012352 <__kernel_rem_pio2f+0x2e>
 801239a:	42c6      	cmn	r6, r0
 801239c:	bf5d      	ittte	pl
 801239e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80123a2:	ee07 1a90 	vmovpl	s15, r1
 80123a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80123aa:	eef0 7a47 	vmovmi.f32	s15, s14
 80123ae:	ece4 7a01 	vstmia	r4!, {s15}
 80123b2:	3001      	adds	r0, #1
 80123b4:	e7dd      	b.n	8012372 <__kernel_rem_pio2f+0x4e>
 80123b6:	ecfe 6a01 	vldmia	lr!, {s13}
 80123ba:	ed96 7a00 	vldr	s14, [r6]
 80123be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80123c2:	3401      	adds	r4, #1
 80123c4:	455c      	cmp	r4, fp
 80123c6:	f1a6 0604 	sub.w	r6, r6, #4
 80123ca:	ddf4      	ble.n	80123b6 <__kernel_rem_pio2f+0x92>
 80123cc:	ece9 7a01 	vstmia	r9!, {s15}
 80123d0:	f10c 0c01 	add.w	ip, ip, #1
 80123d4:	3004      	adds	r0, #4
 80123d6:	e7d5      	b.n	8012384 <__kernel_rem_pio2f+0x60>
 80123d8:	a908      	add	r1, sp, #32
 80123da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123de:	9104      	str	r1, [sp, #16]
 80123e0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80123e2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8012624 <__kernel_rem_pio2f+0x300>
 80123e6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8012620 <__kernel_rem_pio2f+0x2fc>
 80123ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80123ee:	9203      	str	r2, [sp, #12]
 80123f0:	4654      	mov	r4, sl
 80123f2:	00a2      	lsls	r2, r4, #2
 80123f4:	9205      	str	r2, [sp, #20]
 80123f6:	aa58      	add	r2, sp, #352	@ 0x160
 80123f8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80123fc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8012400:	a944      	add	r1, sp, #272	@ 0x110
 8012402:	aa08      	add	r2, sp, #32
 8012404:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8012408:	4694      	mov	ip, r2
 801240a:	4626      	mov	r6, r4
 801240c:	2e00      	cmp	r6, #0
 801240e:	f1a0 0004 	sub.w	r0, r0, #4
 8012412:	dc4c      	bgt.n	80124ae <__kernel_rem_pio2f+0x18a>
 8012414:	4628      	mov	r0, r5
 8012416:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801241a:	f7ff fef7 	bl	801220c <scalbnf>
 801241e:	eeb0 8a40 	vmov.f32	s16, s0
 8012422:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8012426:	ee28 0a00 	vmul.f32	s0, s16, s0
 801242a:	f000 f9ed 	bl	8012808 <floorf>
 801242e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8012432:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012436:	2d00      	cmp	r5, #0
 8012438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801243c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012440:	ee17 9a90 	vmov	r9, s15
 8012444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012448:	ee38 8a67 	vsub.f32	s16, s16, s15
 801244c:	dd41      	ble.n	80124d2 <__kernel_rem_pio2f+0x1ae>
 801244e:	f104 3cff 	add.w	ip, r4, #4294967295
 8012452:	a908      	add	r1, sp, #32
 8012454:	f1c5 0e08 	rsb	lr, r5, #8
 8012458:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801245c:	fa46 f00e 	asr.w	r0, r6, lr
 8012460:	4481      	add	r9, r0
 8012462:	fa00 f00e 	lsl.w	r0, r0, lr
 8012466:	1a36      	subs	r6, r6, r0
 8012468:	f1c5 0007 	rsb	r0, r5, #7
 801246c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012470:	4106      	asrs	r6, r0
 8012472:	2e00      	cmp	r6, #0
 8012474:	dd3c      	ble.n	80124f0 <__kernel_rem_pio2f+0x1cc>
 8012476:	f04f 0e00 	mov.w	lr, #0
 801247a:	f109 0901 	add.w	r9, r9, #1
 801247e:	4670      	mov	r0, lr
 8012480:	4574      	cmp	r4, lr
 8012482:	dc68      	bgt.n	8012556 <__kernel_rem_pio2f+0x232>
 8012484:	2d00      	cmp	r5, #0
 8012486:	dd03      	ble.n	8012490 <__kernel_rem_pio2f+0x16c>
 8012488:	2d01      	cmp	r5, #1
 801248a:	d074      	beq.n	8012576 <__kernel_rem_pio2f+0x252>
 801248c:	2d02      	cmp	r5, #2
 801248e:	d07d      	beq.n	801258c <__kernel_rem_pio2f+0x268>
 8012490:	2e02      	cmp	r6, #2
 8012492:	d12d      	bne.n	80124f0 <__kernel_rem_pio2f+0x1cc>
 8012494:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012498:	ee30 8a48 	vsub.f32	s16, s0, s16
 801249c:	b340      	cbz	r0, 80124f0 <__kernel_rem_pio2f+0x1cc>
 801249e:	4628      	mov	r0, r5
 80124a0:	9306      	str	r3, [sp, #24]
 80124a2:	f7ff feb3 	bl	801220c <scalbnf>
 80124a6:	9b06      	ldr	r3, [sp, #24]
 80124a8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80124ac:	e020      	b.n	80124f0 <__kernel_rem_pio2f+0x1cc>
 80124ae:	ee60 7a28 	vmul.f32	s15, s0, s17
 80124b2:	3e01      	subs	r6, #1
 80124b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124bc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80124c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80124c4:	ecac 0a01 	vstmia	ip!, {s0}
 80124c8:	ed90 0a00 	vldr	s0, [r0]
 80124cc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80124d0:	e79c      	b.n	801240c <__kernel_rem_pio2f+0xe8>
 80124d2:	d105      	bne.n	80124e0 <__kernel_rem_pio2f+0x1bc>
 80124d4:	1e60      	subs	r0, r4, #1
 80124d6:	a908      	add	r1, sp, #32
 80124d8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80124dc:	11f6      	asrs	r6, r6, #7
 80124de:	e7c8      	b.n	8012472 <__kernel_rem_pio2f+0x14e>
 80124e0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80124e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80124e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ec:	da31      	bge.n	8012552 <__kernel_rem_pio2f+0x22e>
 80124ee:	2600      	movs	r6, #0
 80124f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80124f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f8:	f040 8098 	bne.w	801262c <__kernel_rem_pio2f+0x308>
 80124fc:	1e60      	subs	r0, r4, #1
 80124fe:	2200      	movs	r2, #0
 8012500:	4550      	cmp	r0, sl
 8012502:	da4b      	bge.n	801259c <__kernel_rem_pio2f+0x278>
 8012504:	2a00      	cmp	r2, #0
 8012506:	d065      	beq.n	80125d4 <__kernel_rem_pio2f+0x2b0>
 8012508:	3c01      	subs	r4, #1
 801250a:	ab08      	add	r3, sp, #32
 801250c:	3d08      	subs	r5, #8
 801250e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d0f8      	beq.n	8012508 <__kernel_rem_pio2f+0x1e4>
 8012516:	4628      	mov	r0, r5
 8012518:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801251c:	f7ff fe76 	bl	801220c <scalbnf>
 8012520:	1c63      	adds	r3, r4, #1
 8012522:	aa44      	add	r2, sp, #272	@ 0x110
 8012524:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8012624 <__kernel_rem_pio2f+0x300>
 8012528:	0099      	lsls	r1, r3, #2
 801252a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801252e:	4623      	mov	r3, r4
 8012530:	2b00      	cmp	r3, #0
 8012532:	f280 80a9 	bge.w	8012688 <__kernel_rem_pio2f+0x364>
 8012536:	4623      	mov	r3, r4
 8012538:	2b00      	cmp	r3, #0
 801253a:	f2c0 80c7 	blt.w	80126cc <__kernel_rem_pio2f+0x3a8>
 801253e:	aa44      	add	r2, sp, #272	@ 0x110
 8012540:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012544:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801261c <__kernel_rem_pio2f+0x2f8>
 8012548:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8012628 <__kernel_rem_pio2f+0x304>
 801254c:	2000      	movs	r0, #0
 801254e:	1ae2      	subs	r2, r4, r3
 8012550:	e0b1      	b.n	80126b6 <__kernel_rem_pio2f+0x392>
 8012552:	2602      	movs	r6, #2
 8012554:	e78f      	b.n	8012476 <__kernel_rem_pio2f+0x152>
 8012556:	f852 1b04 	ldr.w	r1, [r2], #4
 801255a:	b948      	cbnz	r0, 8012570 <__kernel_rem_pio2f+0x24c>
 801255c:	b121      	cbz	r1, 8012568 <__kernel_rem_pio2f+0x244>
 801255e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8012562:	f842 1c04 	str.w	r1, [r2, #-4]
 8012566:	2101      	movs	r1, #1
 8012568:	f10e 0e01 	add.w	lr, lr, #1
 801256c:	4608      	mov	r0, r1
 801256e:	e787      	b.n	8012480 <__kernel_rem_pio2f+0x15c>
 8012570:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8012574:	e7f5      	b.n	8012562 <__kernel_rem_pio2f+0x23e>
 8012576:	f104 3cff 	add.w	ip, r4, #4294967295
 801257a:	aa08      	add	r2, sp, #32
 801257c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012580:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012584:	a908      	add	r1, sp, #32
 8012586:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801258a:	e781      	b.n	8012490 <__kernel_rem_pio2f+0x16c>
 801258c:	f104 3cff 	add.w	ip, r4, #4294967295
 8012590:	aa08      	add	r2, sp, #32
 8012592:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012596:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801259a:	e7f3      	b.n	8012584 <__kernel_rem_pio2f+0x260>
 801259c:	a908      	add	r1, sp, #32
 801259e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80125a2:	3801      	subs	r0, #1
 80125a4:	430a      	orrs	r2, r1
 80125a6:	e7ab      	b.n	8012500 <__kernel_rem_pio2f+0x1dc>
 80125a8:	3201      	adds	r2, #1
 80125aa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80125ae:	2e00      	cmp	r6, #0
 80125b0:	d0fa      	beq.n	80125a8 <__kernel_rem_pio2f+0x284>
 80125b2:	9905      	ldr	r1, [sp, #20]
 80125b4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80125b8:	eb0d 0001 	add.w	r0, sp, r1
 80125bc:	18e6      	adds	r6, r4, r3
 80125be:	a91c      	add	r1, sp, #112	@ 0x70
 80125c0:	f104 0c01 	add.w	ip, r4, #1
 80125c4:	384c      	subs	r0, #76	@ 0x4c
 80125c6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80125ca:	4422      	add	r2, r4
 80125cc:	4562      	cmp	r2, ip
 80125ce:	da04      	bge.n	80125da <__kernel_rem_pio2f+0x2b6>
 80125d0:	4614      	mov	r4, r2
 80125d2:	e70e      	b.n	80123f2 <__kernel_rem_pio2f+0xce>
 80125d4:	9804      	ldr	r0, [sp, #16]
 80125d6:	2201      	movs	r2, #1
 80125d8:	e7e7      	b.n	80125aa <__kernel_rem_pio2f+0x286>
 80125da:	9903      	ldr	r1, [sp, #12]
 80125dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80125e0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80125e4:	9105      	str	r1, [sp, #20]
 80125e6:	ee07 1a90 	vmov	s15, r1
 80125ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125ee:	2400      	movs	r4, #0
 80125f0:	ece6 7a01 	vstmia	r6!, {s15}
 80125f4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8012628 <__kernel_rem_pio2f+0x304>
 80125f8:	46b1      	mov	r9, r6
 80125fa:	455c      	cmp	r4, fp
 80125fc:	dd04      	ble.n	8012608 <__kernel_rem_pio2f+0x2e4>
 80125fe:	ece0 7a01 	vstmia	r0!, {s15}
 8012602:	f10c 0c01 	add.w	ip, ip, #1
 8012606:	e7e1      	b.n	80125cc <__kernel_rem_pio2f+0x2a8>
 8012608:	ecfe 6a01 	vldmia	lr!, {s13}
 801260c:	ed39 7a01 	vldmdb	r9!, {s14}
 8012610:	3401      	adds	r4, #1
 8012612:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012616:	e7f0      	b.n	80125fa <__kernel_rem_pio2f+0x2d6>
 8012618:	08013164 	.word	0x08013164
 801261c:	08013138 	.word	0x08013138
 8012620:	43800000 	.word	0x43800000
 8012624:	3b800000 	.word	0x3b800000
 8012628:	00000000 	.word	0x00000000
 801262c:	9b02      	ldr	r3, [sp, #8]
 801262e:	eeb0 0a48 	vmov.f32	s0, s16
 8012632:	eba3 0008 	sub.w	r0, r3, r8
 8012636:	f7ff fde9 	bl	801220c <scalbnf>
 801263a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8012620 <__kernel_rem_pio2f+0x2fc>
 801263e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012646:	db19      	blt.n	801267c <__kernel_rem_pio2f+0x358>
 8012648:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8012624 <__kernel_rem_pio2f+0x300>
 801264c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012650:	aa08      	add	r2, sp, #32
 8012652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012656:	3508      	adds	r5, #8
 8012658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801265c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012664:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012668:	ee10 3a10 	vmov	r3, s0
 801266c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012670:	ee17 3a90 	vmov	r3, s15
 8012674:	3401      	adds	r4, #1
 8012676:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801267a:	e74c      	b.n	8012516 <__kernel_rem_pio2f+0x1f2>
 801267c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012680:	aa08      	add	r2, sp, #32
 8012682:	ee10 3a10 	vmov	r3, s0
 8012686:	e7f6      	b.n	8012676 <__kernel_rem_pio2f+0x352>
 8012688:	a808      	add	r0, sp, #32
 801268a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801268e:	9001      	str	r0, [sp, #4]
 8012690:	ee07 0a90 	vmov	s15, r0
 8012694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012698:	3b01      	subs	r3, #1
 801269a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801269e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80126a2:	ed62 7a01 	vstmdb	r2!, {s15}
 80126a6:	e743      	b.n	8012530 <__kernel_rem_pio2f+0x20c>
 80126a8:	ecfc 6a01 	vldmia	ip!, {s13}
 80126ac:	ecb5 7a01 	vldmia	r5!, {s14}
 80126b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80126b4:	3001      	adds	r0, #1
 80126b6:	4550      	cmp	r0, sl
 80126b8:	dc01      	bgt.n	80126be <__kernel_rem_pio2f+0x39a>
 80126ba:	4282      	cmp	r2, r0
 80126bc:	daf4      	bge.n	80126a8 <__kernel_rem_pio2f+0x384>
 80126be:	a858      	add	r0, sp, #352	@ 0x160
 80126c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80126c4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80126c8:	3b01      	subs	r3, #1
 80126ca:	e735      	b.n	8012538 <__kernel_rem_pio2f+0x214>
 80126cc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80126ce:	2b02      	cmp	r3, #2
 80126d0:	dc09      	bgt.n	80126e6 <__kernel_rem_pio2f+0x3c2>
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dc2b      	bgt.n	801272e <__kernel_rem_pio2f+0x40a>
 80126d6:	d044      	beq.n	8012762 <__kernel_rem_pio2f+0x43e>
 80126d8:	f009 0007 	and.w	r0, r9, #7
 80126dc:	b059      	add	sp, #356	@ 0x164
 80126de:	ecbd 8b04 	vpop	{d8-d9}
 80126e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80126e8:	2b03      	cmp	r3, #3
 80126ea:	d1f5      	bne.n	80126d8 <__kernel_rem_pio2f+0x3b4>
 80126ec:	aa30      	add	r2, sp, #192	@ 0xc0
 80126ee:	1f0b      	subs	r3, r1, #4
 80126f0:	4413      	add	r3, r2
 80126f2:	461a      	mov	r2, r3
 80126f4:	4620      	mov	r0, r4
 80126f6:	2800      	cmp	r0, #0
 80126f8:	f1a2 0204 	sub.w	r2, r2, #4
 80126fc:	dc52      	bgt.n	80127a4 <__kernel_rem_pio2f+0x480>
 80126fe:	4622      	mov	r2, r4
 8012700:	2a01      	cmp	r2, #1
 8012702:	f1a3 0304 	sub.w	r3, r3, #4
 8012706:	dc5d      	bgt.n	80127c4 <__kernel_rem_pio2f+0x4a0>
 8012708:	ab30      	add	r3, sp, #192	@ 0xc0
 801270a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8012628 <__kernel_rem_pio2f+0x304>
 801270e:	440b      	add	r3, r1
 8012710:	2c01      	cmp	r4, #1
 8012712:	dc67      	bgt.n	80127e4 <__kernel_rem_pio2f+0x4c0>
 8012714:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012718:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801271c:	2e00      	cmp	r6, #0
 801271e:	d167      	bne.n	80127f0 <__kernel_rem_pio2f+0x4cc>
 8012720:	edc7 6a00 	vstr	s13, [r7]
 8012724:	ed87 7a01 	vstr	s14, [r7, #4]
 8012728:	edc7 7a02 	vstr	s15, [r7, #8]
 801272c:	e7d4      	b.n	80126d8 <__kernel_rem_pio2f+0x3b4>
 801272e:	ab30      	add	r3, sp, #192	@ 0xc0
 8012730:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8012628 <__kernel_rem_pio2f+0x304>
 8012734:	440b      	add	r3, r1
 8012736:	4622      	mov	r2, r4
 8012738:	2a00      	cmp	r2, #0
 801273a:	da24      	bge.n	8012786 <__kernel_rem_pio2f+0x462>
 801273c:	b34e      	cbz	r6, 8012792 <__kernel_rem_pio2f+0x46e>
 801273e:	eef1 7a47 	vneg.f32	s15, s14
 8012742:	edc7 7a00 	vstr	s15, [r7]
 8012746:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801274a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801274e:	aa31      	add	r2, sp, #196	@ 0xc4
 8012750:	2301      	movs	r3, #1
 8012752:	429c      	cmp	r4, r3
 8012754:	da20      	bge.n	8012798 <__kernel_rem_pio2f+0x474>
 8012756:	b10e      	cbz	r6, 801275c <__kernel_rem_pio2f+0x438>
 8012758:	eef1 7a67 	vneg.f32	s15, s15
 801275c:	edc7 7a01 	vstr	s15, [r7, #4]
 8012760:	e7ba      	b.n	80126d8 <__kernel_rem_pio2f+0x3b4>
 8012762:	ab30      	add	r3, sp, #192	@ 0xc0
 8012764:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8012628 <__kernel_rem_pio2f+0x304>
 8012768:	440b      	add	r3, r1
 801276a:	2c00      	cmp	r4, #0
 801276c:	da05      	bge.n	801277a <__kernel_rem_pio2f+0x456>
 801276e:	b10e      	cbz	r6, 8012774 <__kernel_rem_pio2f+0x450>
 8012770:	eef1 7a67 	vneg.f32	s15, s15
 8012774:	edc7 7a00 	vstr	s15, [r7]
 8012778:	e7ae      	b.n	80126d8 <__kernel_rem_pio2f+0x3b4>
 801277a:	ed33 7a01 	vldmdb	r3!, {s14}
 801277e:	3c01      	subs	r4, #1
 8012780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012784:	e7f1      	b.n	801276a <__kernel_rem_pio2f+0x446>
 8012786:	ed73 7a01 	vldmdb	r3!, {s15}
 801278a:	3a01      	subs	r2, #1
 801278c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012790:	e7d2      	b.n	8012738 <__kernel_rem_pio2f+0x414>
 8012792:	eef0 7a47 	vmov.f32	s15, s14
 8012796:	e7d4      	b.n	8012742 <__kernel_rem_pio2f+0x41e>
 8012798:	ecb2 7a01 	vldmia	r2!, {s14}
 801279c:	3301      	adds	r3, #1
 801279e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127a2:	e7d6      	b.n	8012752 <__kernel_rem_pio2f+0x42e>
 80127a4:	edd2 7a00 	vldr	s15, [r2]
 80127a8:	edd2 6a01 	vldr	s13, [r2, #4]
 80127ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80127b0:	3801      	subs	r0, #1
 80127b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127b6:	ed82 7a00 	vstr	s14, [r2]
 80127ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127be:	edc2 7a01 	vstr	s15, [r2, #4]
 80127c2:	e798      	b.n	80126f6 <__kernel_rem_pio2f+0x3d2>
 80127c4:	edd3 7a00 	vldr	s15, [r3]
 80127c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80127cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80127d0:	3a01      	subs	r2, #1
 80127d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127d6:	ed83 7a00 	vstr	s14, [r3]
 80127da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127de:	edc3 7a01 	vstr	s15, [r3, #4]
 80127e2:	e78d      	b.n	8012700 <__kernel_rem_pio2f+0x3dc>
 80127e4:	ed33 7a01 	vldmdb	r3!, {s14}
 80127e8:	3c01      	subs	r4, #1
 80127ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127ee:	e78f      	b.n	8012710 <__kernel_rem_pio2f+0x3ec>
 80127f0:	eef1 6a66 	vneg.f32	s13, s13
 80127f4:	eeb1 7a47 	vneg.f32	s14, s14
 80127f8:	edc7 6a00 	vstr	s13, [r7]
 80127fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8012800:	eef1 7a67 	vneg.f32	s15, s15
 8012804:	e790      	b.n	8012728 <__kernel_rem_pio2f+0x404>
 8012806:	bf00      	nop

08012808 <floorf>:
 8012808:	ee10 3a10 	vmov	r3, s0
 801280c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012810:	3a7f      	subs	r2, #127	@ 0x7f
 8012812:	2a16      	cmp	r2, #22
 8012814:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012818:	dc2b      	bgt.n	8012872 <floorf+0x6a>
 801281a:	2a00      	cmp	r2, #0
 801281c:	da12      	bge.n	8012844 <floorf+0x3c>
 801281e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012884 <floorf+0x7c>
 8012822:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012826:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282e:	dd06      	ble.n	801283e <floorf+0x36>
 8012830:	2b00      	cmp	r3, #0
 8012832:	da24      	bge.n	801287e <floorf+0x76>
 8012834:	2900      	cmp	r1, #0
 8012836:	4b14      	ldr	r3, [pc, #80]	@ (8012888 <floorf+0x80>)
 8012838:	bf08      	it	eq
 801283a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801283e:	ee00 3a10 	vmov	s0, r3
 8012842:	4770      	bx	lr
 8012844:	4911      	ldr	r1, [pc, #68]	@ (801288c <floorf+0x84>)
 8012846:	4111      	asrs	r1, r2
 8012848:	420b      	tst	r3, r1
 801284a:	d0fa      	beq.n	8012842 <floorf+0x3a>
 801284c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012884 <floorf+0x7c>
 8012850:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012854:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285c:	ddef      	ble.n	801283e <floorf+0x36>
 801285e:	2b00      	cmp	r3, #0
 8012860:	bfbe      	ittt	lt
 8012862:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8012866:	fa40 f202 	asrlt.w	r2, r0, r2
 801286a:	189b      	addlt	r3, r3, r2
 801286c:	ea23 0301 	bic.w	r3, r3, r1
 8012870:	e7e5      	b.n	801283e <floorf+0x36>
 8012872:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012876:	d3e4      	bcc.n	8012842 <floorf+0x3a>
 8012878:	ee30 0a00 	vadd.f32	s0, s0, s0
 801287c:	4770      	bx	lr
 801287e:	2300      	movs	r3, #0
 8012880:	e7dd      	b.n	801283e <floorf+0x36>
 8012882:	bf00      	nop
 8012884:	7149f2ca 	.word	0x7149f2ca
 8012888:	bf800000 	.word	0xbf800000
 801288c:	007fffff 	.word	0x007fffff

08012890 <_init>:
 8012890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012892:	bf00      	nop
 8012894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012896:	bc08      	pop	{r3}
 8012898:	469e      	mov	lr, r3
 801289a:	4770      	bx	lr

0801289c <_fini>:
 801289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801289e:	bf00      	nop
 80128a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128a2:	bc08      	pop	{r3}
 80128a4:	469e      	mov	lr, r3
 80128a6:	4770      	bx	lr
