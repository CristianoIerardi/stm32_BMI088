
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  08012458  08012458  00013458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d18  08012d18  00014300  2**0
                  CONTENTS
  4 .ARM          00000008  08012d18  08012d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d20  08012d20  00014300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d20  08012d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012d24  08012d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  20000000  08012d28  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014300  2**0
                  CONTENTS
 10 .bss          00002390  20000300  20000300  00014300  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002690  20002690  00014300  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014300  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd29  00000000  00000000  00014330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000429b  00000000  00000000  00030059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001280  00000000  00000000  00035b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005e2f  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f076  00000000  00000000  0003cbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c940d  00000000  00000000  0005bc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125032  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d04  00000000  00000000  00125078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0012cd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000300 	.word	0x20000300
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801243c 	.word	0x0801243c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000304 	.word	0x20000304
 80001cc:	0801243c 	.word	0x0801243c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a3a      	ldr	r2, [r7, #32]
 8000f5c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f62:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6858      	ldr	r0, [r3, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	899b      	ldrh	r3, [r3, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f003 fd22 	bl	80049c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f002 fe4b 	bl	8003c20 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6858      	ldr	r0, [r3, #4]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	899b      	ldrh	r3, [r3, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4619      	mov	r1, r3
 8000f96:	f003 fd17 	bl	80049c8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f9a:	2032      	movs	r0, #50	@ 0x32
 8000f9c:	f002 fe40 	bl	8003c20 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000fa0:	22b6      	movs	r2, #182	@ 0xb6
 8000fa2:	217e      	movs	r1, #126	@ 0x7e
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f9e6 	bl	8001376 <BMI088_WriteAccRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000fb4:	2032      	movs	r0, #50	@ 0x32
 8000fb6:	f002 fe33 	bl	8003c20 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000fba:	f107 0316 	add.w	r3, r7, #22
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f95d 	bl	8001282 <BMI088_ReadAccRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	4413      	add	r3, r2
 8000fd0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f002 fe24 	bl	8003c20 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0x09); /* (no oversampling, ODR = 200 Hz, BW = ?? Hz /////////////////////////BW = 40 Hz) */
 8000fd8:	2209      	movs	r2, #9
 8000fda:	2140      	movs	r1, #64	@ 0x40
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f9ca 	bl	8001376 <BMI088_WriteAccRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	4413      	add	r3, r2
 8000fea:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f002 fe17 	bl	8003c20 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x01); /* +- 6g range */
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2141      	movs	r1, #65	@ 0x41
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f9bd 	bl	8001376 <BMI088_WriteAccRegister>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	4413      	add	r3, r2
 8001004:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f002 fe0a 	bl	8003c20 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 800100c:	220a      	movs	r2, #10
 800100e:	2153      	movs	r1, #83	@ 0x53
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 f9b0 	bl	8001376 <BMI088_WriteAccRegister>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	4413      	add	r3, r2
 800101e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f002 fdfd 	bl	8003c20 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8001026:	2204      	movs	r2, #4
 8001028:	2158      	movs	r1, #88	@ 0x58
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f9a3 	bl	8001376 <BMI088_WriteAccRegister>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	4413      	add	r3, r2
 8001038:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f002 fdf0 	bl	8003c20 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8001040:	2200      	movs	r2, #0
 8001042:	217c      	movs	r1, #124	@ 0x7c
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f996 	bl	8001376 <BMI088_WriteAccRegister>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4413      	add	r3, r2
 8001052:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f002 fde3 	bl	8003c20 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800105a:	2204      	movs	r2, #4
 800105c:	217d      	movs	r1, #125	@ 0x7d
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f989 	bl	8001376 <BMI088_WriteAccRegister>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	4413      	add	r3, r2
 800106c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f002 fdd6 	bl	8003c20 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4a3a      	ldr	r2, [pc, #232]	@ (8001160 <BMI088_Init+0x228>)
 8001078:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2292      	movs	r2, #146	@ 0x92
 800107e:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	89db      	ldrh	r3, [r3, #14]
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	f003 fc9c 	bl	80049c8 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001090:	22b6      	movs	r2, #182	@ 0xb6
 8001092:	2114      	movs	r1, #20
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f9a8 	bl	80013ea <BMI088_WriteGyrRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4413      	add	r3, r2
 80010a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80010a4:	20fa      	movs	r0, #250	@ 0xfa
 80010a6:	f002 fdbb 	bl	8003c20 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80010aa:	f107 0316 	add.w	r3, r7, #22
 80010ae:	461a      	mov	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f923 	bl	80012fe <BMI088_ReadGyrRegister>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	4413      	add	r3, r2
 80010c0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f002 fdac 	bl	8003c20 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80010c8:	2201      	movs	r2, #1
 80010ca:	210f      	movs	r1, #15
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f98c 	bl	80013ea <BMI088_WriteGyrRegister>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	4413      	add	r3, r2
 80010da:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f002 fd9f 	bl	8003c20 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* ODR = 200 Hz, Filter bandwidth = 64 Hz */
 80010e2:	2206      	movs	r2, #6
 80010e4:	2110      	movs	r1, #16
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 f97f 	bl	80013ea <BMI088_WriteGyrRegister>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	4413      	add	r3, r2
 80010f4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f002 fd92 	bl	8003c20 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	2115      	movs	r1, #21
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f972 	bl	80013ea <BMI088_WriteGyrRegister>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	4413      	add	r3, r2
 800110e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f002 fd85 	bl	8003c20 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001116:	2201      	movs	r2, #1
 8001118:	2116      	movs	r1, #22
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f965 	bl	80013ea <BMI088_WriteGyrRegister>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	4413      	add	r3, r2
 8001128:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800112a:	200a      	movs	r0, #10
 800112c:	f002 fd78 	bl	8003c20 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001130:	2201      	movs	r2, #1
 8001132:	2118      	movs	r1, #24
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f958 	bl	80013ea <BMI088_WriteGyrRegister>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	4413      	add	r3, r2
 8001142:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f002 fd6b 	bl	8003c20 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <BMI088_Init+0x22c>)
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2282      	movs	r2, #130	@ 0x82
 8001154:	769a      	strb	r2, [r3, #26]

	return status;
 8001156:	7dfb      	ldrb	r3, [r7, #23]

}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	3a6b70a4 	.word	0x3a6b70a4
 8001164:	3a0ba058 	.word	0x3a0ba058

08001168 <Init_BMI088_Bias>:


void Init_BMI088_Bias(BMI088* imu, int cycles)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < cycles; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e044      	b.n	8001202 <Init_BMI088_Bias+0x9a>
    {
        imu->gyr_bias[0] += imu->gyr_rps[0];
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        imu->gyr_bias[1] += imu->gyr_rps[1];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800119a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        imu->gyr_bias[2] += imu->gyr_rps[2];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        imu->acc_bias[0] += imu->acc_mps2[0];
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80011c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
        imu->acc_bias[1] += imu->acc_mps2[1];
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80011dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        imu->acc_bias[2] += imu->acc_mps2[2];
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    for (int i = 0; i < cycles; i++)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbb6      	blt.n	8001178 <Init_BMI088_Bias+0x10>
    }
    for (int i = 0; i < 3; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	e02e      	b.n	800126e <Init_BMI088_Bias+0x106>
    {
    	imu->gyr_bias[i] = imu->gyr_bias[i] / cycles;
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3316      	adds	r3, #22
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	edd3 6a00 	vldr	s13, [r3]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3316      	adds	r3, #22
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3304      	adds	r3, #4
 800123a:	edc3 7a00 	vstr	s15, [r3]
    	imu->acc_bias[i] = imu->acc_bias[i] / cycles;
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3314      	adds	r3, #20
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	edd3 6a00 	vldr	s13, [r3]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3314      	adds	r3, #20
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3301      	adds	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b02      	cmp	r3, #2
 8001272:	ddcd      	ble.n	8001210 <Init_BMI088_Bias+0xa8>
    }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b088      	sub	sp, #32
 8001286:	af02      	add	r7, sp, #8
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	460b      	mov	r3, r1
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	753b      	strb	r3, [r7, #20]
 800129a:	2300      	movs	r3, #0
 800129c:	757b      	strb	r3, [r7, #21]
 800129e:	2300      	movs	r3, #0
 80012a0:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f003 fb8b 	bl	80049c8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	f107 0210 	add.w	r2, r7, #16
 80012ba:	f107 0114 	add.w	r1, r7, #20
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2303      	movs	r3, #3
 80012c6:	f005 fc80 	bl	8006bca <HAL_SPI_TransmitReceive>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6858      	ldr	r0, [r3, #4]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	899b      	ldrh	r3, [r3, #12]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	f003 fb70 	bl	80049c8 <HAL_GPIO_WritePin>

	if (status == 1) {
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80012ee:	7cba      	ldrb	r2, [r7, #18]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80012f4:	7dfb      	ldrb	r3, [r7, #23]

}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b088      	sub	sp, #32
 8001302:	af02      	add	r7, sp, #8
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	460b      	mov	r3, r1
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001312:	b2db      	uxtb	r3, r3
 8001314:	753b      	strb	r3, [r7, #20]
 8001316:	2300      	movs	r3, #0
 8001318:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6898      	ldr	r0, [r3, #8]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	89db      	ldrh	r3, [r3, #14]
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	f003 fb4f 	bl	80049c8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f107 0210 	add.w	r2, r7, #16
 8001332:	f107 0114 	add.w	r1, r7, #20
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2302      	movs	r3, #2
 800133e:	f005 fc44 	bl	8006bca <HAL_SPI_TransmitReceive>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6898      	ldr	r0, [r3, #8]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	89db      	ldrh	r3, [r3, #14]
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	f003 fb34 	bl	80049c8 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8001366:	7c7a      	ldrb	r2, [r7, #17]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800136c:	7dfb      	ldrb	r3, [r7, #23]

}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
 8001382:	4613      	mov	r3, r2
 8001384:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	733b      	strb	r3, [r7, #12]
 800138a:	78bb      	ldrb	r3, [r7, #2]
 800138c:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6858      	ldr	r0, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	899b      	ldrh	r3, [r3, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	f003 fb15 	bl	80049c8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	2202      	movs	r2, #2
 80013ac:	f005 fac9 	bl	8006942 <HAL_SPI_Transmit>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf0c      	ite	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	2300      	movne	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80013be:	bf00      	nop
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 ffc1 	bl	800734c <HAL_SPI_GetState>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d1f7      	bne.n	80013c0 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6858      	ldr	r0, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	899b      	ldrh	r3, [r3, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	f003 faf4 	bl	80049c8 <HAL_GPIO_WritePin>

	return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]

}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
 80013f6:	4613      	mov	r3, r2
 80013f8:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	733b      	strb	r3, [r7, #12]
 80013fe:	78bb      	ldrb	r3, [r7, #2]
 8001400:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6898      	ldr	r0, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	89db      	ldrh	r3, [r3, #14]
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	f003 fadb 	bl	80049c8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f107 010c 	add.w	r1, r7, #12
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	2202      	movs	r2, #2
 8001420:	f005 fa8f 	bl	8006942 <HAL_SPI_Transmit>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001432:	bf00      	nop
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f005 ff87 	bl	800734c <HAL_SPI_GetState>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d1f7      	bne.n	8001434 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6898      	ldr	r0, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	89db      	ldrh	r3, [r3, #14]
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	f003 faba 	bl	80049c8 <HAL_GPIO_WritePin>

	return status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]

}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]

	if (imu->readingAcc)  // To not have double calls
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7c1b      	ldrb	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <BMI088_ReadAccelerometerDMA+0x14>
		return 0;
 800146e:	2300      	movs	r3, #0
 8001470:	e023      	b.n	80014ba <BMI088_ReadAccelerometerDMA+0x5c>

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6858      	ldr	r0, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	899b      	ldrh	r3, [r3, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	f003 faa3 	bl	80049c8 <HAL_GPIO_WritePin>

	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f103 0112 	add.w	r1, r3, #18
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001492:	2308      	movs	r3, #8
 8001494:	f005 fd42 	bl	8006f1c <HAL_SPI_TransmitReceive_DMA>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d104      	bne.n	80014a8 <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	741a      	strb	r2, [r3, #16]
		return 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e008      	b.n	80014ba <BMI088_ReadAccelerometerDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6858      	ldr	r0, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	899b      	ldrh	r3, [r3, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4619      	mov	r1, r3
 80014b4:	f003 fa88 	bl	80049c8 <HAL_GPIO_WritePin>
		return 0;
 80014b8:	2300      	movs	r3, #0

	}

}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6858      	ldr	r0, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	899b      	ldrh	r3, [r3, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f003 fa77 	bl	80049c8 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001500:	b2db      	uxtb	r3, r3
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800151a:	b2db      	uxtb	r3, r3
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001526:	b2db      	uxtb	r3, r3
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX * 2;		// *2 was added by Cristiano.
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY * 2;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001554:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ * 2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001574:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]

	if (imu->readingGyr)  // To not have double calls
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7c5b      	ldrb	r3, [r3, #17]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <BMI088_ReadGyroscopeDMA+0x14>
		return 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e023      	b.n	80015f2 <BMI088_ReadGyroscopeDMA+0x5c>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6898      	ldr	r0, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	89db      	ldrh	r3, [r3, #14]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	f003 fa07 	bl	80049c8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f103 011a 	add.w	r1, r3, #26
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80015ca:	2307      	movs	r3, #7
 80015cc:	f005 fca6 	bl	8006f1c <HAL_SPI_TransmitReceive_DMA>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <BMI088_ReadGyroscopeDMA+0x4a>

		imu->readingGyr = 1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	745a      	strb	r2, [r3, #17]
		return 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	e008      	b.n	80015f2 <BMI088_ReadGyroscopeDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6898      	ldr	r0, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	89db      	ldrh	r3, [r3, #14]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4619      	mov	r1, r3
 80015ec:	f003 f9ec 	bl	80049c8 <HAL_GPIO_WritePin>
		return 0;
 80015f0:	2300      	movs	r3, #0

	}

}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6898      	ldr	r0, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	89db      	ldrh	r3, [r3, #14]
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	f003 f9db 	bl	80049c8 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800161e:	b2db      	uxtb	r3, r3
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800162a:	b2db      	uxtb	r3, r3
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001638:	b2db      	uxtb	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001644:	b2db      	uxtb	r3, r3
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001652:	b2db      	uxtb	r3, r3
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800165e:	b2db      	uxtb	r3, r3
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800166c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001688:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80016a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	0000      	movs	r0, r0
 80016c4:	0000      	movs	r0, r0
	...

080016c8 <QuaternionToEuler>:
    NormalizeQuaternion(q_out);
}


// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	eeb0 6a40 	vmov.f32	s12, s0
 80016d2:	eef0 6a60 	vmov.f32	s13, s1
 80016d6:	eeb0 7a41 	vmov.f32	s14, s2
 80016da:	eef0 7a61 	vmov.f32	s15, s3
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	ed87 6a02 	vstr	s12, [r7, #8]
 80016e4:	edc7 6a03 	vstr	s13, [r7, #12]
 80016e8:	ed87 7a04 	vstr	s14, [r7, #16]
 80016ec:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 80016f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80016f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001700:	edd7 7a05 	vldr	s15, [r7, #20]
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001710:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 8001714:	ed97 7a03 	vldr	s14, [r7, #12]
 8001718:	edd7 7a03 	vldr	s15, [r7, #12]
 800171c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001720:	edd7 6a04 	vldr	s13, [r7, #16]
 8001724:	edd7 7a04 	vldr	s15, [r7, #16]
 8001728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001730:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 8001740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001742:	f7fe ff01 	bl	8000548 <__aeabi_f2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	ec43 2b11 	vmov	d1, r2, r3
 8001758:	ec45 4b10 	vmov	d0, r4, r5
 800175c:	f00e fbc2 	bl	800fee4 <atan2>
 8001760:	ec51 0b10 	vmov	r0, r1, d0
 8001764:	a356      	add	r3, pc, #344	@ (adr r3, 80018c0 <QuaternionToEuler+0x1f8>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ff45 	bl	80005f8 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa17 	bl	8000ba8 <__aeabi_d2f>
 800177a:	4602      	mov	r2, r0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 8001780:	ed97 7a02 	vldr	s14, [r7, #8]
 8001784:	edd7 7a04 	vldr	s15, [r7, #16]
 8001788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800178c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001790:	edd7 7a03 	vldr	s15, [r7, #12]
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 80017a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017a8:	eef0 7ae7 	vabs.f32	s15, s15
 80017ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	db13      	blt.n	80017e2 <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 80017ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017bc:	f7fe fec4 	bl	8000548 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	ec43 2b11 	vmov	d1, r2, r3
 80017c8:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 80018b8 <QuaternionToEuler+0x1f0>
 80017cc:	f00c fb09 	bl	800dde2 <copysign>
 80017d0:	ec51 0b10 	vmov	r0, r1, d0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1d1c      	adds	r4, r3, #4
 80017d8:	f7ff f9e6 	bl	8000ba8 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	6023      	str	r3, [r4, #0]
 80017e0:	e019      	b.n	8001816 <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 80017e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017e4:	f7fe feb0 	bl	8000548 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	ec43 2b10 	vmov	d0, r2, r3
 80017f0:	f00e fb44 	bl	800fe7c <asin>
 80017f4:	ec51 0b10 	vmov	r0, r1, d0
 80017f8:	a331      	add	r3, pc, #196	@ (adr r3, 80018c0 <QuaternionToEuler+0x1f8>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fefb 	bl	80005f8 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	1d1c      	adds	r4, r3, #4
 800180e:	f7ff f9cb 	bl	8000ba8 <__aeabi_d2f>
 8001812:	4603      	mov	r3, r0
 8001814:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 8001816:	ed97 7a02 	vldr	s14, [r7, #8]
 800181a:	edd7 7a05 	vldr	s15, [r7, #20]
 800181e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001822:	edd7 6a03 	vldr	s13, [r7, #12]
 8001826:	edd7 7a04 	vldr	s15, [r7, #16]
 800182a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001832:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001836:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 800183a:	ed97 7a04 	vldr	s14, [r7, #16]
 800183e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001846:	edd7 6a05 	vldr	s13, [r7, #20]
 800184a:	edd7 7a05 	vldr	s15, [r7, #20]
 800184e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001856:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800185a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800185e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001862:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 8001866:	6a38      	ldr	r0, [r7, #32]
 8001868:	f7fe fe6e 	bl	8000548 <__aeabi_f2d>
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
 8001870:	69f8      	ldr	r0, [r7, #28]
 8001872:	f7fe fe69 	bl	8000548 <__aeabi_f2d>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	ec43 2b11 	vmov	d1, r2, r3
 800187e:	ec45 4b10 	vmov	d0, r4, r5
 8001882:	f00e fb2f 	bl	800fee4 <atan2>
 8001886:	ec51 0b10 	vmov	r0, r1, d0
 800188a:	a30d      	add	r3, pc, #52	@ (adr r3, 80018c0 <QuaternionToEuler+0x1f8>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe feb2 	bl	80005f8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 0408 	add.w	r4, r3, #8
 80018a2:	f7ff f981 	bl	8000ba8 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 80018aa:	bf00      	nop
 80018ac:	3730      	adds	r7, #48	@ 0x30
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40568000 	.word	0x40568000
 80018c0:	20000000 	.word	0x20000000
 80018c4:	404ca5dc 	.word	0x404ca5dc

080018c8 <SetQuaternionFromEuler>:


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80018d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80018d8:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 80018dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001a6c <SetQuaternionFromEuler+0x1a4>
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 80018ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001a6c <SetQuaternionFromEuler+0x1a4>
 80018f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f8:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001a6c <SetQuaternionFromEuler+0x1a4>
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 800190c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001910:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001918:	eeb0 0a67 	vmov.f32	s0, s15
 800191c:	f00e fbbe 	bl	801009c <cosf>
 8001920:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 8001924:	edd7 7a02 	vldr	s15, [r7, #8]
 8001928:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800192c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001930:	eeb0 0a67 	vmov.f32	s0, s15
 8001934:	f00e fbfe 	bl	8010134 <sinf>
 8001938:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 800193c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001940:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001948:	eeb0 0a67 	vmov.f32	s0, s15
 800194c:	f00e fba6 	bl	801009c <cosf>
 8001950:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 8001954:	edd7 7a01 	vldr	s15, [r7, #4]
 8001958:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800195c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	f00e fbe6 	bl	8010134 <sinf>
 8001968:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 800196c:	edd7 7a00 	vldr	s15, [r7]
 8001970:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	f00e fb8e 	bl	801009c <cosf>
 8001980:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 8001984:	edd7 7a00 	vldr	s15, [r7]
 8001988:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800198c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001990:	eeb0 0a67 	vmov.f32	s0, s15
 8001994:	f00e fbce 	bl	8010134 <sinf>
 8001998:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 800199c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80019a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b0:	edd7 6a08 	vldr	s13, [r7, #32]
 80019b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 80019ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80019d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019da:	edd7 7a05 	vldr	s15, [r7, #20]
 80019de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80019e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 8001a00:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a14:	edd7 6a08 	vldr	s13, [r7, #32]
 8001a18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 8001a32:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a36:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a46:	edd7 6a08 	vldr	s13, [r7, #32]
 8001a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	@ 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	3c8efa39 	.word	0x3c8efa39

08001a70 <Filter_Init>:
/// ######################################################################################################
/// ##### FILTER SECTION #################################################################################
/// ######################################################################################################

void Filter_Init(LPF_FILTER *filt, float f_LP_gyr, float f_LP_acc, float f_HP_gyr, float f_HP_acc, float f_LP_angles, float dt)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	61f8      	str	r0, [r7, #28]
 8001a78:	ed87 0a06 	vstr	s0, [r7, #24]
 8001a7c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001a80:	ed87 1a04 	vstr	s2, [r7, #16]
 8001a84:	edc7 1a03 	vstr	s3, [r7, #12]
 8001a88:	ed87 2a02 	vstr	s4, [r7, #8]
 8001a8c:	edc7 2a01 	vstr	s5, [r7, #4]
	LPF_Init(filt, f_LP_gyr, f_LP_acc, f_LP_angles, dt);
 8001a90:	edd7 1a01 	vldr	s3, [r7, #4]
 8001a94:	ed97 1a02 	vldr	s2, [r7, #8]
 8001a98:	edd7 0a05 	vldr	s1, [r7, #20]
 8001a9c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001aa0:	69f8      	ldr	r0, [r7, #28]
 8001aa2:	f000 f968 	bl	8001d76 <LPF_Init>
	HPF_Init(filt, f_HP_gyr, f_HP_acc, dt);
 8001aa6:	ed97 1a01 	vldr	s2, [r7, #4]
 8001aaa:	edd7 0a03 	vldr	s1, [r7, #12]
 8001aae:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ab2:	69f8      	ldr	r0, [r7, #28]
 8001ab4:	f000 fa65 	bl	8001f82 <HPF_Init>

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001abc:	e038      	b.n	8001b30 <Filter_Init+0xc0>
	{
		filt->filt_gyr_x[i] = 0.0f;					// filt_gyr_x[0] -> past filtered sample   //	filt_gyr_x[1] -> curr filtered sample
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_y[i] = 0.0f;					// filt_gyr_x[0] ==> y(n)
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	3306      	adds	r3, #6
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3304      	adds	r3, #4
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_z[i] = 0.0f;					// filt_gyr_x[1] ==> y(n-1)
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	3304      	adds	r3, #4
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
		filt->filt_acc_x[i] = 0.0f;
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	330a      	adds	r3, #10
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
		filt->filt_acc_y[i] = 0.0f;
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0a:	330c      	adds	r3, #12
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3304      	adds	r3, #4
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
		filt->filt_acc_z[i] = 0.0f;
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1c:	330e      	adds	r3, #14
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	ddc3      	ble.n	8001abe <Filter_Init+0x4e>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b3a:	e038      	b.n	8001bae <Filter_Init+0x13e>
	{
		filt->not_filt_gyr_x[i] = 0.0f;					// not_filt_gyr_x[0] -> past not filtered sample   //	not_filt_gyr_x[1] -> curr not filtered sample
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b40:	3310      	adds	r3, #16
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_y[i] = 0.0f;					// not_filt_gyr_x[0] ==> x(n)
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	3312      	adds	r3, #18
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3304      	adds	r3, #4
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_z[i] = 0.0f;					// not_filt_gyr_x[1] ==> x(n-1)
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b64:	3314      	adds	r3, #20
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_x[i] = 0.0f;
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b76:	3316      	adds	r3, #22
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_y[i] = 0.0f;
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b88:	3318      	adds	r3, #24
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_z[i] = 0.0f;
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9a:	331a      	adds	r3, #26
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001baa:	3301      	adds	r3, #1
 8001bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	ddc3      	ble.n	8001b3c <Filter_Init+0xcc>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb8:	e01d      	b.n	8001bf6 <Filter_Init+0x186>
	{
		filt->filt_ang_x[i] = 0.0f;
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	331c      	adds	r3, #28
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
		filt->filt_ang_y[i] = 0.0f;
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	331e      	adds	r3, #30
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
		filt->filt_ang_z[i] = 0.0f;
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	3320      	adds	r3, #32
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	ddde      	ble.n	8001bba <Filter_Init+0x14a>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3730      	adds	r7, #48	@ 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <LPF_CalculateAlpha>:
/// ##### LOW PASS FILTER for GYRO&ACC SECTION ###########################################################
/// ######################################################################################################

/// Alpha calculation for LPF filter in general --> (GYR&ACC and ANGLES)
float LPF_CalculateAlpha(float f_cut, float dt)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c12:	edc7 0a00 	vstr	s1, [r7]
	float tau = 1.0f / (2.0f * M_PI * f_cut);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fc96 	bl	8000548 <__aeabi_f2d>
 8001c1c:	a313      	add	r3, pc, #76	@ (adr r3, 8001c6c <LPF_CalculateAlpha+0x64>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fce9 	bl	80005f8 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	490e      	ldr	r1, [pc, #56]	@ (8001c68 <LPF_CalculateAlpha+0x60>)
 8001c30:	f7fe fe0c 	bl	800084c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ffb4 	bl	8000ba8 <__aeabi_d2f>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
	return dt / (tau + dt);
 8001c44:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c48:	edd7 7a00 	vldr	s15, [r7]
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	ed97 7a00 	vldr	s14, [r7]
 8001c54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c58:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	3ff00000 	.word	0x3ff00000
 8001c6c:	54442d18 	.word	0x54442d18
 8001c70:	401921fb 	.word	0x401921fb

08001c74 <LPF_Update_Single>:

/// ------ LOW PF ILTER, 1° ORDER ------------------------------------------------------------------------------------
float LPF_Update_Single(LPF_FILTER *filt, float old_data, float data, float alpha)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c80:	edc7 0a01 	vstr	s1, [r7, #4]
 8001c84:	ed87 1a00 	vstr	s2, [r7]
	 return ( (alpha * data) + ((1-alpha) * old_data) );
 8001c88:	ed97 7a00 	vldr	s14, [r7]
 8001c8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c98:	edd7 7a00 	vldr	s15, [r7]
 8001c9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001cac:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LPF_SetAlpha>:

/// ------ LPF set over boundaries coefficients ----------------------------------------------------------------------
void LPF_SetAlpha(LPF_FILTER *filt, float alpha_gyr, float alpha_acc, float coeff_filt_angl)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cc6:	edc7 0a01 	vstr	s1, [r7, #4]
 8001cca:	ed87 1a00 	vstr	s2, [r7]
	// Alpha gyr COEFF
	if(alpha_gyr > 1.0f)
 8001cce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd03      	ble.n	8001ce8 <LPF_SetAlpha+0x2e>
		alpha_gyr = 1.0f;
 8001ce0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	e009      	b.n	8001cfc <LPF_SetAlpha+0x42>
	else if(alpha_gyr < 0.0f)
 8001ce8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d502      	bpl.n	8001cfc <LPF_SetAlpha+0x42>
		alpha_gyr = 0.0f;
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
	// Alpha_acc COEFF
	if(alpha_acc > 1.0f)
 8001cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	dd03      	ble.n	8001d16 <LPF_SetAlpha+0x5c>
		alpha_acc = 1.0f;
 8001d0e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	e009      	b.n	8001d2a <LPF_SetAlpha+0x70>
	else if(alpha_acc < 0.0f)
 8001d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	d502      	bpl.n	8001d2a <LPF_SetAlpha+0x70>
		alpha_acc = 0.0f;
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
	// coeff_filt_angl COEFF
	if(coeff_filt_angl > 1.0f)
 8001d2a:	edd7 7a00 	vldr	s15, [r7]
 8001d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	dd03      	ble.n	8001d44 <LPF_SetAlpha+0x8a>
		coeff_filt_angl = 1.0f;
 8001d3c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	e009      	b.n	8001d58 <LPF_SetAlpha+0x9e>
	else if(coeff_filt_angl < 0)
 8001d44:	edd7 7a00 	vldr	s15, [r7]
 8001d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d502      	bpl.n	8001d58 <LPF_SetAlpha+0x9e>
		coeff_filt_angl = 0.0f;
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	603b      	str	r3, [r7, #0]

	filt->alpha_gyr = alpha_gyr;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	601a      	str	r2, [r3, #0]
	filt->alpha_acc = alpha_acc;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]
	filt->coeff_filt_ang = coeff_filt_angl;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	611a      	str	r2, [r3, #16]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LPF_Init>:

void LPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float f_cut_angles, float dt)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b08a      	sub	sp, #40	@ 0x28
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6178      	str	r0, [r7, #20]
 8001d7e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d82:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d86:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d8a:	edc7 1a01 	vstr	s3, [r7, #4]
	// aplha for LPF settings
	float alpha_gyr = LPF_CalculateAlpha(f_cut_gyr, dt);
 8001d8e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001d92:	ed97 0a04 	vldr	s0, [r7, #16]
 8001d96:	f7ff ff37 	bl	8001c08 <LPF_CalculateAlpha>
 8001d9a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float alpha_acc = LPF_CalculateAlpha(f_cut_acc, dt);
 8001d9e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001da2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001da6:	f7ff ff2f 	bl	8001c08 <LPF_CalculateAlpha>
 8001daa:	ed87 0a08 	vstr	s0, [r7, #32]
	float coeff_filt_angl = LPF_CalculateAlpha(f_cut_angles, dt);
 8001dae:	edd7 0a01 	vldr	s1, [r7, #4]
 8001db2:	ed97 0a02 	vldr	s0, [r7, #8]
 8001db6:	f7ff ff27 	bl	8001c08 <LPF_CalculateAlpha>
 8001dba:	ed87 0a07 	vstr	s0, [r7, #28]
	LPF_SetAlpha(filt, alpha_gyr, alpha_acc, f_cut_angles);
 8001dbe:	ed97 1a02 	vldr	s2, [r7, #8]
 8001dc2:	edd7 0a08 	vldr	s1, [r7, #32]
 8001dc6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff75 	bl	8001cba <LPF_SetAlpha>

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <LPF_GyrAcc_Update_All>:


LPF_FILTER LPF_GyrAcc_Update_All(LPF_FILTER *filt, float *gyr, float *acc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
	/* I compute the LPF filter */
	filt->filt_gyr_x[0] = LPF_Update_Single(filt, filt->filt_gyr_x[1], gyr[0], filt->alpha_gyr);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	edd3 6a00 	vldr	s13, [r3]
 8001df8:	eeb0 1a66 	vmov.f32	s2, s13
 8001dfc:	eef0 0a47 	vmov.f32	s1, s14
 8001e00:	eeb0 0a67 	vmov.f32	s0, s15
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f7ff ff35 	bl	8001c74 <LPF_Update_Single>
 8001e0a:	eef0 7a40 	vmov.f32	s15, s0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	edc3 7a05 	vstr	s15, [r3, #20]
	filt->filt_gyr_y[0] = LPF_Update_Single(filt, filt->filt_gyr_y[1], gyr[1], filt->alpha_gyr);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	edd3 6a00 	vldr	s13, [r3]
 8001e28:	eeb0 1a66 	vmov.f32	s2, s13
 8001e2c:	eef0 0a47 	vmov.f32	s1, s14
 8001e30:	eeb0 0a67 	vmov.f32	s0, s15
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f7ff ff1d 	bl	8001c74 <LPF_Update_Single>
 8001e3a:	eef0 7a40 	vmov.f32	s15, s0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->filt_gyr_z[0] = LPF_Update_Single(filt, filt->filt_gyr_z[1], gyr[2], filt->alpha_gyr);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	edd3 6a00 	vldr	s13, [r3]
 8001e58:	eeb0 1a66 	vmov.f32	s2, s13
 8001e5c:	eef0 0a47 	vmov.f32	s1, s14
 8001e60:	eeb0 0a67 	vmov.f32	s0, s15
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	f7ff ff05 	bl	8001c74 <LPF_Update_Single>
 8001e6a:	eef0 7a40 	vmov.f32	s15, s0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	filt->filt_acc_x[0] = LPF_Update_Single(filt, filt->filt_acc_x[1], acc[0], filt->alpha_acc);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	ed93 7a00 	vldr	s14, [r3]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e86:	eeb0 1a66 	vmov.f32	s2, s13
 8001e8a:	eef0 0a47 	vmov.f32	s1, s14
 8001e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e92:	68b8      	ldr	r0, [r7, #8]
 8001e94:	f7ff feee 	bl	8001c74 <LPF_Update_Single>
 8001e98:	eef0 7a40 	vmov.f32	s15, s0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	filt->filt_acc_y[0] = LPF_Update_Single(filt, filt->filt_acc_y[1], acc[1], filt->alpha_acc);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	ed93 7a00 	vldr	s14, [r3]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001eb6:	eeb0 1a66 	vmov.f32	s2, s13
 8001eba:	eef0 0a47 	vmov.f32	s1, s14
 8001ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec2:	68b8      	ldr	r0, [r7, #8]
 8001ec4:	f7ff fed6 	bl	8001c74 <LPF_Update_Single>
 8001ec8:	eef0 7a40 	vmov.f32	s15, s0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	filt->filt_acc_z[0] = LPF_Update_Single(filt, filt->filt_acc_z[1], acc[2], filt->alpha_acc);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3308      	adds	r3, #8
 8001edc:	ed93 7a00 	vldr	s14, [r3]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ee6:	eeb0 1a66 	vmov.f32	s2, s13
 8001eea:	eef0 0a47 	vmov.f32	s1, s14
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f7ff febe 	bl	8001c74 <LPF_Update_Single>
 8001ef8:	eef0 7a40 	vmov.f32	s15, s0
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	/* the current sample will become the next old one */
	filt->filt_gyr_x[1] = filt->filt_gyr_x[0];
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	619a      	str	r2, [r3, #24]
	filt->filt_gyr_y[1] = filt->filt_gyr_y[0];
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	621a      	str	r2, [r3, #32]
	filt->filt_gyr_z[1] = filt->filt_gyr_z[0];
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28
	filt->filt_acc_x[1] = filt->filt_acc_x[0];
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	631a      	str	r2, [r3, #48]	@ 0x30
	filt->filt_acc_y[1] = filt->filt_acc_y[0];
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	639a      	str	r2, [r3, #56]	@ 0x38
	filt->filt_acc_z[1] = filt->filt_acc_z[0];
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	641a      	str	r2, [r3, #64]	@ 0x40

	/* I update gyro and acc global variables */
	gyr[0] = filt->filt_gyr_x[0];
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
	gyr[1] = filt->filt_gyr_y[0];
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	69d2      	ldr	r2, [r2, #28]
 8001f42:	601a      	str	r2, [r3, #0]
	gyr[2] = filt->filt_gyr_z[0];
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3308      	adds	r3, #8
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f4c:	601a      	str	r2, [r3, #0]
	acc[0] = filt->filt_acc_x[0];
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	601a      	str	r2, [r3, #0]
	acc[1] = filt->filt_acc_y[0];
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f5e:	601a      	str	r2, [r3, #0]
	acc[2] = filt->filt_acc_z[0];
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	3308      	adds	r3, #8
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f68:	601a      	str	r2, [r3, #0]

	return *filt;
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	238c      	movs	r3, #140	@ 0x8c
 8001f74:	461a      	mov	r2, r3
 8001f76:	f00b ff26 	bl	800ddc6 <memcpy>
}
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HPF_Init>:
/// ##### HIGH PASS FILTER SECTION #######################################################################
/// ######################################################################################################


void HPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float dt)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f8e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f92:	ed87 1a00 	vstr	s2, [r7]
	// beta for HPF settings
	float beta_gyr = HPF_CalculateBeta(f_cut_gyr, dt);
 8001f96:	edd7 0a00 	vldr	s1, [r7]
 8001f9a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f9e:	f000 f815 	bl	8001fcc <HPF_CalculateBeta>
 8001fa2:	ed87 0a05 	vstr	s0, [r7, #20]
	float beta_acc = HPF_CalculateBeta(f_cut_acc, dt);
 8001fa6:	edd7 0a00 	vldr	s1, [r7]
 8001faa:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fae:	f000 f80d 	bl	8001fcc <HPF_CalculateBeta>
 8001fb2:	ed87 0a04 	vstr	s0, [r7, #16]
	HPF_SetBeta(filt, beta_gyr, beta_acc);
 8001fb6:	edd7 0a04 	vldr	s1, [r7, #16]
 8001fba:	ed97 0a05 	vldr	s0, [r7, #20]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f826 	bl	8002010 <HPF_SetBeta>

}
 8001fc4:	bf00      	nop
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HPF_CalculateBeta>:


float HPF_CalculateBeta(float f_cut, float dt)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fd6:	edc7 0a00 	vstr	s1, [r7]
	return 1.0f - expf(-2.0f * (float)M_PI * f_cut * dt);
 8001fda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fde:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800200c <HPF_CalculateBeta+0x40>
 8001fe2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fe6:	edd7 7a00 	vldr	s15, [r7]
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	f00e f81d 	bl	8010030 <expf>
 8001ff6:	eef0 7a40 	vmov.f32	s15, s0
 8001ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	c0c90fdb 	.word	0xc0c90fdb

08002010 <HPF_SetBeta>:


void HPF_SetBeta(LPF_FILTER *filt, float beta_gyr, float beta_acc)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	ed87 0a02 	vstr	s0, [r7, #8]
 800201c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(beta_gyr > 1.0f)
 8002020:	edd7 7a02 	vldr	s15, [r7, #8]
 8002024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	dd03      	ble.n	800203a <HPF_SetBeta+0x2a>
	{
		beta_gyr = 1.0f;
 8002032:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	e009      	b.n	800204e <HPF_SetBeta+0x3e>
	}
	else if(beta_gyr < 0.0f)
 800203a:	edd7 7a02 	vldr	s15, [r7, #8]
 800203e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	d502      	bpl.n	800204e <HPF_SetBeta+0x3e>
	{
		beta_gyr = 0.0f;
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
	}

	if(beta_acc > 1.0f)
 800204e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	dd03      	ble.n	8002068 <HPF_SetBeta+0x58>
	{
		beta_acc = 1.0f;
 8002060:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	e009      	b.n	800207c <HPF_SetBeta+0x6c>
	}
	else if(beta_acc < 0.0f)
 8002068:	edd7 7a01 	vldr	s15, [r7, #4]
 800206c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d502      	bpl.n	800207c <HPF_SetBeta+0x6c>
	{
		beta_acc = 0.0f;
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
	}

	filt->beta_gyr = beta_gyr;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	609a      	str	r2, [r3, #8]
	filt->beta_acc = beta_acc;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sampleFreq) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b09e      	sub	sp, #120	@ 0x78
 8002098:	af00      	add	r7, sp, #0
 800209a:	ed87 0a07 	vstr	s0, [r7, #28]
 800209e:	edc7 0a06 	vstr	s1, [r7, #24]
 80020a2:	ed87 1a05 	vstr	s2, [r7, #20]
 80020a6:	edc7 1a04 	vstr	s3, [r7, #16]
 80020aa:	ed87 2a03 	vstr	s4, [r7, #12]
 80020ae:	edc7 2a02 	vstr	s5, [r7, #8]
 80020b2:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80020b6:	4bec      	ldr	r3, [pc, #944]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb1 7a67 	vneg.f32	s14, s15
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	4be8      	ldr	r3, [pc, #928]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80020ca:	edd3 6a00 	vldr	s13, [r3]
 80020ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020da:	4be5      	ldr	r3, [pc, #916]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80020f8:	4bde      	ldr	r3, [pc, #888]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80020fa:	ed93 7a00 	vldr	s14, [r3]
 80020fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002106:	4bd9      	ldr	r3, [pc, #868]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002108:	edd3 6a00 	vldr	s13, [r3]
 800210c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002118:	4bd5      	ldr	r3, [pc, #852]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800212e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002132:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002136:	4bcf      	ldr	r3, [pc, #828]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002144:	4bc8      	ldr	r3, [pc, #800]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	edd7 7a05 	vldr	s15, [r7, #20]
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002156:	4bc6      	ldr	r3, [pc, #792]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002158:	edd3 6a00 	vldr	s13, [r3]
 800215c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800216c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002170:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002174:	4bbf      	ldr	r3, [pc, #764]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	edd7 7a05 	vldr	s15, [r7, #20]
 800217e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002182:	4bb9      	ldr	r3, [pc, #740]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	edd7 7a06 	vldr	s15, [r7, #24]
 800218c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002194:	4bb5      	ldr	r3, [pc, #724]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002196:	edd3 6a00 	vldr	s13, [r3]
 800219a:	edd7 7a07 	vldr	s15, [r7, #28]
 800219e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80021aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ae:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80021b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d10e      	bne.n	80021de <MadgwickAHRSupdateIMU+0x14a>
 80021c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	d107      	bne.n	80021de <MadgwickAHRSupdateIMU+0x14a>
 80021ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	f000 81e5 	beq.w	80025a8 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80021de:	edd7 7a04 	vldr	s15, [r7, #16]
 80021e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	f000 fa7b 	bl	80026fc <invSqrt>
 8002206:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 800220a:	ed97 7a04 	vldr	s14, [r7, #16]
 800220e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 800221a:	ed97 7a03 	vldr	s14, [r7, #12]
 800221e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002226:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;
 800222a:	ed97 7a02 	vldr	s14, [r7, #8]
 800222e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800223a:	4b8e      	ldr	r3, [pc, #568]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002244:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 8002248:	4b87      	ldr	r3, [pc, #540]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002252:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 8002256:	4b85      	ldr	r3, [pc, #532]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002260:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 8002264:	4b82      	ldr	r3, [pc, #520]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800226e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 8002272:	4b80      	ldr	r3, [pc, #512]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800227c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002280:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 8002284:	4b78      	ldr	r3, [pc, #480]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 8002296:	4b75      	ldr	r3, [pc, #468]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 80022a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80022b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 80022ba:	4b6c      	ldr	r3, [pc, #432]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80022c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 80022cc:	4b69      	ldr	r3, [pc, #420]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022dc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 80022e0:	4b61      	ldr	r3, [pc, #388]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	4b60      	ldr	r3, [pc, #384]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 80022f4:	4b5d      	ldr	r3, [pc, #372]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022f6:	ed93 7a00 	vldr	s14, [r3]
 80022fa:	4b5c      	ldr	r3, [pc, #368]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002304:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 8002308:	4b59      	ldr	r3, [pc, #356]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	4b58      	ldr	r3, [pc, #352]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800231c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002320:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002328:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800232c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002338:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800233c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002348:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800235c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002360:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002368:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800236c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002378:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800237c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002380:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002392:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8002396:	edd7 7a03 	vldr	s15, [r7, #12]
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80023a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023aa:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80023ae:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ba:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80023be:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80023c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80023ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80023de:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80023e2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ea:	4b20      	ldr	r3, [pc, #128]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80023f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002408:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002414:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002418:	edd7 7a03 	vldr	s15, [r7, #12]
 800241c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002424:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002430:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002440:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002450:	edd7 7a02 	vldr	s15, [r7, #8]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002460:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002464:	e008      	b.n	8002478 <MadgwickAHRSupdateIMU+0x3e4>
 8002466:	bf00      	nop
 8002468:	2000031c 	.word	0x2000031c
 800246c:	20000320 	.word	0x20000320
 8002470:	20000324 	.word	0x20000324
 8002474:	20000004 	.word	0x20000004
 8002478:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800247c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002480:	4b99      	ldr	r3, [pc, #612]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248a:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800248e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002496:	ee37 7a67 	vsub.f32	s14, s14, s15
 800249a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800249e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80024a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024a6:	4b90      	ldr	r3, [pc, #576]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b4:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80024b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80024c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80024cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80024d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f000 f900 	bl	80026fc <invSqrt>
 80024fc:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 8002500:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002504:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 8002510:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002514:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 8002520:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002524:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 8002530:	ed97 7a08 	vldr	s14, [r7, #32]
 8002534:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002540:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800254a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002556:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 800255a:	4b64      	ldr	r3, [pc, #400]	@ (80026ec <MadgwickAHRSupdateIMU+0x658>)
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002570:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 8002574:	4b5d      	ldr	r3, [pc, #372]	@ (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 800258e:	4b57      	ldr	r3, [pc, #348]	@ (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002590:	ed93 7a00 	vldr	s14, [r3]
 8002594:	edd7 7a08 	vldr	s15, [r7, #32]
 8002598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80025a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a4:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80025a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80025b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025bc:	4b4c      	ldr	r3, [pc, #304]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	4b4a      	ldr	r3, [pc, #296]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80025c8:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80025cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	4b44      	ldr	r3, [pc, #272]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	4b42      	ldr	r3, [pc, #264]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80025ec:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80025f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002604:	4b3c      	ldr	r3, [pc, #240]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260e:	4b3a      	ldr	r3, [pc, #232]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002610:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002618:	edd7 7a01 	vldr	s15, [r7, #4]
 800261c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002620:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002628:	4b2f      	ldr	r3, [pc, #188]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	4b2d      	ldr	r3, [pc, #180]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002634:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002638:	4b2d      	ldr	r3, [pc, #180]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	4b2c      	ldr	r3, [pc, #176]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 800264a:	edd3 6a00 	vldr	s13, [r3]
 800264e:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265c:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 800265e:	edd3 6a00 	vldr	s13, [r3]
 8002662:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002672:	edd3 6a00 	vldr	s13, [r3]
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	eeb0 0a67 	vmov.f32	s0, s15
 8002688:	f000 f838 	bl	80026fc <invSqrt>
 800268c:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 8002690:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80026ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 80026ba:	ed93 7a00 	vldr	s14, [r3]
 80026be:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 80026c8:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80026ce:	ed93 7a00 	vldr	s14, [r3]
 80026d2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80026d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026da:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80026dc:	edc3 7a00 	vstr	s15, [r3]
}
 80026e0:	bf00      	nop
 80026e2:	3778      	adds	r7, #120	@ 0x78
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000324 	.word	0x20000324
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004
 80026f4:	2000031c 	.word	0x2000031c
 80026f8:	20000320 	.word	0x20000320

080026fc <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002706:	edd7 7a01 	vldr	s15, [r7, #4]
 800270a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800270e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002712:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	105a      	asrs	r2, r3, #1
 8002726:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <invSqrt+0x74>)
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002734:	ed97 7a04 	vldr	s14, [r7, #16]
 8002738:	edd7 7a05 	vldr	s15, [r7, #20]
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	edd7 7a04 	vldr	s15, [r7, #16]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800274c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002750:	edd7 7a04 	vldr	s15, [r7, #16]
 8002754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002758:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	ee07 3a90 	vmov	s15, r3
}
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	5f3759df 	.word	0x5f3759df

08002774 <Toggle>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////// FUNCTIONS //////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Function that toggles the led of the board to show if the device is working
void Toggle(uint32_t waitingTime)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= waitingTime)
 800277c:	f001 fa44 	bl	8003c08 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <Toggle+0x40>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d808      	bhi.n	80027a0 <Toggle+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800278e:	2110      	movs	r1, #16
 8002790:	4809      	ldr	r0, [pc, #36]	@ (80027b8 <Toggle+0x44>)
 8002792:	f002 f932 	bl	80049fa <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 8002796:	f001 fa37 	bl	8003c08 <HAL_GetTick>
 800279a:	4603      	mov	r3, r0
 800279c:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <Toggle+0x40>)
 800279e:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 80027a0:	f001 fa32 	bl	8003c08 <HAL_GetTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <Toggle+0x48>)
 80027a8:	6013      	str	r3, [r2, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000754 	.word	0x20000754
 80027b8:	40020400 	.word	0x40020400
 80027bc:	20000750 	.word	0x20000750

080027c0 <Take_IMU_Measurements>:
  	}
}

/// Function to insert IMU measurements from memory to memory (data is adjusted)
void Take_IMU_Measurements(BMI088 *imu)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	measureTick = HAL_GetTick();		// Timestamp when data is taken from memory to memory (not from BMI088 to memory!)
 80027c8:	f001 fa1e 	bl	8003c08 <HAL_GetTick>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <Take_IMU_Measurements+0x7c>)
 80027d0:	6013      	str	r3, [r2, #0]
	/* Here a sign and axis correction is applied.
	 * In the rest of the code I will use gyr and acc that are the shared variables
	 * elaborated by the algorithms while instead, in imu->___[__] there are pure values
	 * taken from the memory of the sensor BMI088
	 */
	gyr[0] = -imu->gyr_rps[1] + imu->gyr_bias[1];			// + 0.0051;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80027de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e2:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <Take_IMU_Measurements+0x80>)
 80027e4:	edc3 7a00 	vstr	s15, [r3]
	gyr[1] = imu->gyr_rps[0] - imu->gyr_bias[0];			// + 0.0025;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80027f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <Take_IMU_Measurements+0x80>)
 80027fa:	edc3 7a01 	vstr	s15, [r3, #4]
	gyr[2] = imu->gyr_rps[2] - imu->gyr_bias[2];			// + 0.0047;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800280a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280e:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <Take_IMU_Measurements+0x80>)
 8002810:	edc3 7a02 	vstr	s15, [r3, #8]
	acc[0] = -imu->acc_mps2[1];
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800281a:	eef1 7a67 	vneg.f32	s15, s15
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <Take_IMU_Measurements+0x84>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
	acc[1] = imu->acc_mps2[0];
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002828:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <Take_IMU_Measurements+0x84>)
 800282a:	6053      	str	r3, [r2, #4]
	acc[2] = imu->acc_mps2[2];
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <Take_IMU_Measurements+0x84>)
 8002832:	6093      	str	r3, [r2, #8]
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000724 	.word	0x20000724
 8002840:	20000728 	.word	0x20000728
 8002844:	20000734 	.word	0x20000734

08002848 <HAL_GPIO_EXTI_Callback>:

/// DMA Reading
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d107      	bne.n	8002868 <HAL_GPIO_EXTI_Callback+0x20>
	{
		// we check if the interrupt pin is the accelerometer one
		if (!imu.readingAcc)
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 800285a:	7c1b      	ldrb	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
			BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8002860:	4808      	ldr	r0, [pc, #32]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002862:	f7fe fdfc 	bl	800145e <BMI088_ReadAccelerometerDMA>
		// we check if the interrupt pin is the gyroscope one
		if (!imu.readingGyr)
			BMI088_ReadGyroscopeDMA(&imu);
	}

}
 8002866:	e009      	b.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
	else if(GPIO_Pin == INT_GYR_Pin)
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d106      	bne.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
		if (!imu.readingGyr)
 800286e:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002870:	7c5b      	ldrb	r3, [r3, #17]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
			BMI088_ReadGyroscopeDMA(&imu);
 8002876:	4803      	ldr	r0, [pc, #12]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002878:	f7fe fe8d 	bl	8001596 <BMI088_ReadGyroscopeDMA>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000620 	.word	0x20000620

08002888 <HAL_SPI_TxRxCpltCallback>:

/// DMA CALLBACK
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10d      	bne.n	80028b6 <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800289c:	7c1b      	ldrb	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 80028a2:	4808      	ldr	r0, [pc, #32]	@ (80028c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80028a4:	f7fe fe0d 	bl	80014c2 <BMI088_ReadAccelerometerDMA_Complete>

		}

		if (imu.readingGyr)
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80028aa:	7c5b      	ldrb	r3, [r3, #17]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 80028b0:	4804      	ldr	r0, [pc, #16]	@ (80028c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80028b2:	f7fe fea2 	bl	80015fa <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40013000 	.word	0x40013000
 80028c4:	20000620 	.word	0x20000620

080028c8 <HAL_TIM_PeriodElapsedCallback>:



/// Callback of the timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	b0cd      	sub	sp, #308	@ 0x134
 80028ce:	af18      	add	r7, sp, #96	@ 0x60
 80028d0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	// Calculate angles with quaternions
    if(htim->Instance == TIM2)
 80028d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028de:	f040 80ac 	bne.w	8002a3a <HAL_TIM_PeriodElapsedCallback+0x172>
    {
    	timestamp_TIM2++;	// how many times TIM2 is called (not used yet)
 80028e2:	4bb5      	ldr	r3, [pc, #724]	@ (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	4ab3      	ldr	r2, [pc, #716]	@ (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80028ea:	6013      	str	r3, [r2, #0]
        // Code to execute at constant sample rate
        Take_IMU_Measurements(&imu);
 80028ec:	48b3      	ldr	r0, [pc, #716]	@ (8002bbc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80028ee:	f7ff ff67 	bl	80027c0 <Take_IMU_Measurements>

        /// Filtering Gyro and Acc measurements
        filt = LPF_GyrAcc_Update_All(&filt, gyr, acc);
 80028f2:	4cb3      	ldr	r4, [pc, #716]	@ (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80028f4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80028f8:	4bb2      	ldr	r3, [pc, #712]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80028fa:	4ab3      	ldr	r2, [pc, #716]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80028fc:	49b0      	ldr	r1, [pc, #704]	@ (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80028fe:	f7ff fa6b 	bl	8001dd8 <LPF_GyrAcc_Update_All>
 8002902:	4620      	mov	r0, r4
 8002904:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002908:	228c      	movs	r2, #140	@ 0x8c
 800290a:	4619      	mov	r1, r3
 800290c:	f00b fa5b 	bl	800ddc6 <memcpy>

		/// Algorithm application to find angles
        MadgwickAHRSupdateIMU(gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], F_TIM2);
 8002910:	4bad      	ldr	r3, [pc, #692]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	4bac      	ldr	r3, [pc, #688]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002918:	ed93 7a01 	vldr	s14, [r3, #4]
 800291c:	4baa      	ldr	r3, [pc, #680]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800291e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002922:	4ba8      	ldr	r3, [pc, #672]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002924:	ed93 6a00 	vldr	s12, [r3]
 8002928:	4ba6      	ldr	r3, [pc, #664]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800292a:	edd3 5a01 	vldr	s11, [r3, #4]
 800292e:	4ba5      	ldr	r3, [pc, #660]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002930:	ed93 5a02 	vldr	s10, [r3, #8]
 8002934:	4ba5      	ldr	r3, [pc, #660]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002936:	edd3 4a00 	vldr	s9, [r3]
 800293a:	eeb0 3a64 	vmov.f32	s6, s9
 800293e:	eef0 2a45 	vmov.f32	s5, s10
 8002942:	eeb0 2a65 	vmov.f32	s4, s11
 8002946:	eef0 1a46 	vmov.f32	s3, s12
 800294a:	eeb0 1a66 	vmov.f32	s2, s13
 800294e:	eef0 0a47 	vmov.f32	s1, s14
 8002952:	eeb0 0a67 	vmov.f32	s0, s15
 8002956:	f7ff fb9d 	bl	8002094 <MadgwickAHRSupdateIMU>
        q.w = q0; q.x = q1; q.y = q2; q.z = q3;
 800295a:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a9d      	ldr	r2, [pc, #628]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a9b      	ldr	r2, [pc, #620]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002968:	6053      	str	r3, [r2, #4]
 800296a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a99      	ldr	r2, [pc, #612]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002970:	6093      	str	r3, [r2, #8]
 8002972:	4b9b      	ldr	r3, [pc, #620]	@ (8002be0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a97      	ldr	r2, [pc, #604]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002978:	60d3      	str	r3, [r2, #12]
        QuaternionToEuler(q, angles);
 800297a:	4b96      	ldr	r3, [pc, #600]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800297c:	ed93 6a00 	vldr	s12, [r3]
 8002980:	edd3 6a01 	vldr	s13, [r3, #4]
 8002984:	ed93 7a02 	vldr	s14, [r3, #8]
 8002988:	edd3 7a03 	vldr	s15, [r3, #12]
 800298c:	4895      	ldr	r0, [pc, #596]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800298e:	eeb0 0a46 	vmov.f32	s0, s12
 8002992:	eef0 0a66 	vmov.f32	s1, s13
 8002996:	eeb0 1a47 	vmov.f32	s2, s14
 800299a:	eef0 1a67 	vmov.f32	s3, s15
 800299e:	f7fe fe93 	bl	80016c8 <QuaternionToEuler>

        /* LPF Filtering angles */
        //filt = LPF_Angles_Update_All(&filt, angles);

        /* module of the acceleration vector (not used right now) */
        abs_acc = sqrt(pow(acc[0],2)+pow(acc[1],2) + pow(acc[2],2));
 80029a2:	4b88      	ldr	r3, [pc, #544]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fdce 	bl	8000548 <__aeabi_f2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	ed9f 1b7f 	vldr	d1, [pc, #508]	@ 8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80029b4:	ec43 2b10 	vmov	d0, r2, r3
 80029b8:	f00d fa96 	bl	800fee8 <pow>
 80029bc:	ec55 4b10 	vmov	r4, r5, d0
 80029c0:	4b80      	ldr	r3, [pc, #512]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fdbf 	bl	8000548 <__aeabi_f2d>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	ed9f 1b78 	vldr	d1, [pc, #480]	@ 8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80029d2:	ec43 2b10 	vmov	d0, r2, r3
 80029d6:	f00d fa87 	bl	800fee8 <pow>
 80029da:	ec53 2b10 	vmov	r2, r3, d0
 80029de:	4620      	mov	r0, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	f7fd fc53 	bl	800028c <__adddf3>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4614      	mov	r4, r2
 80029ec:	461d      	mov	r5, r3
 80029ee:	4b75      	ldr	r3, [pc, #468]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fda8 	bl	8000548 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	ed9f 1b6c 	vldr	d1, [pc, #432]	@ 8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8002a00:	ec43 2b10 	vmov	d0, r2, r3
 8002a04:	f00d fa70 	bl	800fee8 <pow>
 8002a08:	ec53 2b10 	vmov	r2, r3, d0
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	4629      	mov	r1, r5
 8002a10:	f7fd fc3c 	bl	800028c <__adddf3>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	ec43 2b17 	vmov	d7, r2, r3
 8002a1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a20:	eef0 0a67 	vmov.f32	s1, s15
 8002a24:	f00d fad0 	bl	800ffc8 <sqrt>
 8002a28:	ec53 2b10 	vmov	r2, r3, d0
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f7fe f8ba 	bl	8000ba8 <__aeabi_d2f>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4a6c      	ldr	r2, [pc, #432]	@ (8002be8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002a38:	6013      	str	r3, [r2, #0]

    }

    // Send data with CDC_Transfer_FS
    if(htim->Instance == TIM3)
 8002a3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a6a      	ldr	r2, [pc, #424]	@ (8002bec <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	f040 8090 	bne.w	8002b68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
	{
    	timestamp_TIM3++;	// how many times TIM3 is called (not used yet)
 8002a48:	4b69      	ldr	r3, [pc, #420]	@ (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	4a68      	ldr	r2, [pc, #416]	@ (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002a50:	6013      	str	r3, [r2, #0]

    	// Send every data using just one string and one TX
		static char txBuff[256];
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a52:	4b68      	ldr	r3, [pc, #416]	@ (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002a60:	4b60      	ldr	r3, [pc, #384]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd6f 	bl	8000548 <__aeabi_f2d>
 8002a6a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fd68 	bl	8000548 <__aeabi_f2d>
 8002a78:	e9c7 0108 	strd	r0, r1, [r7, #32]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002a7c:	4b59      	ldr	r3, [pc, #356]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd61 	bl	8000548 <__aeabi_f2d>
 8002a86:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a92:	fb02 f103 	mul.w	r1, r2, r3
 8002a96:	6339      	str	r1, [r7, #48]	@ 0x30
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002a98:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd53 	bl	8000548 <__aeabi_f2d>
 8002aa2:	e9c7 0104 	strd	r0, r1, [r7, #16]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002aa6:	4b48      	ldr	r3, [pc, #288]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd4c 	bl	8000548 <__aeabi_f2d>
 8002ab0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002ab4:	4b44      	ldr	r3, [pc, #272]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd fd45 	bl	8000548 <__aeabi_f2d>
 8002abe:	e9c7 0100 	strd	r0, r1, [r7]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002ac2:	4b40      	ldr	r3, [pc, #256]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fd3e 	bl	8000548 <__aeabi_f2d>
 8002acc:	4682      	mov	sl, r0
 8002ace:	468b      	mov	fp, r1
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd37 	bl	8000548 <__aeabi_f2d>
 8002ada:	4680      	mov	r8, r0
 8002adc:	4689      	mov	r9, r1
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002ade:	4b39      	ldr	r3, [pc, #228]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fd30 	bl	8000548 <__aeabi_f2d>
 8002ae8:	4604      	mov	r4, r0
 8002aea:	460d      	mov	r5, r1
 8002aec:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002af4:	fb03 f602 	mul.w	r6, r3, r2
 8002af8:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd23 	bl	8000548 <__aeabi_f2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8002b0a:	9614      	str	r6, [sp, #80]	@ 0x50
 8002b0c:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8002b10:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8002b14:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 8002b18:	ed97 7b00 	vldr	d7, [r7]
 8002b1c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002b20:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b24:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002b28:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b2c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002b30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b32:	9106      	str	r1, [sp, #24]
 8002b34:	ed97 7b06 	vldr	d7, [r7, #24]
 8002b38:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002b3c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002b44:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002b48:	ed8d 7b00 	vstr	d7, [sp]
 8002b4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b4e:	492a      	ldr	r1, [pc, #168]	@ (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002b50:	482a      	ldr	r0, [pc, #168]	@ (8002bfc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002b52:	f00b f855 	bl	800dc00 <siprintf>
		CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff));
 8002b56:	4829      	ldr	r0, [pc, #164]	@ (8002bfc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002b58:	f7fd fb8a 	bl	8000270 <strlen>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4619      	mov	r1, r3
 8002b62:	4826      	ldr	r0, [pc, #152]	@ (8002bfc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002b64:	f009 fed6 	bl	800c914 <CDC_Transmit_FS>
	}

    if (htim->Instance == TIM4)
 8002b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	@ (8002c00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	f040 80b7 	bne.w	8002ce4 <HAL_TIM_PeriodElapsedCallback+0x41c>
	{
		static char uartBuff[256];
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002b76:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	637b      	str	r3, [r7, #52]	@ 0x34
					measureTick*1000, angles[0], angles[1], angles[2],
 8002b84:	4b17      	ldr	r3, [pc, #92]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fcdd 	bl	8000548 <__aeabi_f2d>
 8002b8e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
					measureTick*1000, angles[0], angles[1], angles[2],
 8002b92:	4b14      	ldr	r3, [pc, #80]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002b94:	685b      	ldr	r3, [r3, #4]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fcd6 	bl	8000548 <__aeabi_f2d>
 8002b9c:	e9c7 0108 	strd	r0, r1, [r7, #32]
					measureTick*1000, angles[0], angles[1], angles[2],
 8002ba0:	4b10      	ldr	r3, [pc, #64]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fccf 	bl	8000548 <__aeabi_f2d>
 8002baa:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002bae:	e029      	b.n	8002c04 <HAL_TIM_PeriodElapsedCallback+0x33c>
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	40000000 	.word	0x40000000
 8002bb8:	20000720 	.word	0x20000720
 8002bbc:	20000620 	.word	0x20000620
 8002bc0:	20000688 	.word	0x20000688
 8002bc4:	20000734 	.word	0x20000734
 8002bc8:	20000728 	.word	0x20000728
 8002bcc:	20000718 	.word	0x20000718
 8002bd0:	20000004 	.word	0x20000004
 8002bd4:	20000008 	.word	0x20000008
 8002bd8:	2000031c 	.word	0x2000031c
 8002bdc:	20000320 	.word	0x20000320
 8002be0:	20000324 	.word	0x20000324
 8002be4:	20000740 	.word	0x20000740
 8002be8:	2000074c 	.word	0x2000074c
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	2000071c 	.word	0x2000071c
 8002bf4:	20000724 	.word	0x20000724
 8002bf8:	08012464 	.word	0x08012464
 8002bfc:	20000758 	.word	0x20000758
 8002c00:	40000800 	.word	0x40000800
 8002c04:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c0c:	fb02 f103 	mul.w	r1, r2, r3
 8002c10:	6339      	str	r1, [r7, #48]	@ 0x30
					measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2],
 8002c12:	4b38      	ldr	r3, [pc, #224]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc96 	bl	8000548 <__aeabi_f2d>
 8002c1c:	e9c7 0104 	strd	r0, r1, [r7, #16]
					measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2],
 8002c20:	4b34      	ldr	r3, [pc, #208]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fc8f 	bl	8000548 <__aeabi_f2d>
 8002c2a:	e9c7 0102 	strd	r0, r1, [r7, #8]
					measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2],
 8002c2e:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002c30:	689b      	ldr	r3, [r3, #8]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fc88 	bl	8000548 <__aeabi_f2d>
 8002c38:	e9c7 0100 	strd	r0, r1, [r7]
					measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2],
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fc81 	bl	8000548 <__aeabi_f2d>
 8002c46:	4682      	mov	sl, r0
 8002c48:	468b      	mov	fp, r1
					measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2],
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc7a 	bl	8000548 <__aeabi_f2d>
 8002c54:	4680      	mov	r8, r0
 8002c56:	4689      	mov	r9, r1
					measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2],
 8002c58:	4b27      	ldr	r3, [pc, #156]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
		sprintf(uartBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc73 	bl	8000548 <__aeabi_f2d>
 8002c62:	4604      	mov	r4, r0
 8002c64:	460d      	mov	r5, r1
 8002c66:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c6e:	fb03 f602 	mul.w	r6, r3, r2
 8002c72:	4b22      	ldr	r3, [pc, #136]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc66 	bl	8000548 <__aeabi_f2d>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8002c84:	9614      	str	r6, [sp, #80]	@ 0x50
 8002c86:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8002c8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8002c8e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 8002c92:	ed97 7b00 	vldr	d7, [r7]
 8002c96:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002c9a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c9e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002ca2:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ca6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cac:	9106      	str	r1, [sp, #24]
 8002cae:	ed97 7b06 	vldr	d7, [r7, #24]
 8002cb2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002cb6:	ed97 7b08 	vldr	d7, [r7, #32]
 8002cba:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002cbe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002cc2:	ed8d 7b00 	vstr	d7, [sp]
 8002cc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cc8:	490d      	ldr	r1, [pc, #52]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002cca:	480e      	ldr	r0, [pc, #56]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8002ccc:	f00a ff98 	bl	800dc00 <siprintf>
					measureTick*1000, abs_acc);
		//HAL_UART_Transmit(&huart1, (uint8_t*)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uartBuff, strlen(uartBuff));
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8002cd2:	f7fd facd 	bl	8000270 <strlen>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4909      	ldr	r1, [pc, #36]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8002cde:	480a      	ldr	r0, [pc, #40]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8002ce0:	f005 fa36 	bl	8008150 <HAL_UART_Transmit_DMA>
	}
}
 8002ce4:	bf00      	nop
 8002ce6:	37d4      	adds	r7, #212	@ 0xd4
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000724 	.word	0x20000724
 8002cf4:	20000728 	.word	0x20000728
 8002cf8:	20000734 	.word	0x20000734
 8002cfc:	2000074c 	.word	0x2000074c
 8002d00:	08012464 	.word	0x08012464
 8002d04:	20000858 	.word	0x20000858
 8002d08:	20000518 	.word	0x20000518

08002d0c <HAL_UART_TxCpltCallback>:


/// Executed when the transmission ends
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {

    }
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d26:	f000 ff09 	bl	8003b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d2a:	f000 f897 	bl	8002e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d2e:	f000 faa7 	bl	8003280 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d32:	f000 fa6d 	bl	8003210 <MX_DMA_Init>
  MX_SPI1_Init();
 8002d36:	f000 f8fb 	bl	8002f30 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002d3a:	f000 f92f 	bl	8002f9c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002d3e:	f009 fd2b 	bl	800c798 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002d42:	f000 f99f 	bl	8003084 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002d46:	f000 fa39 	bl	80031bc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002d4a:	f000 f9e9 	bl	8003120 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /*.... Priorities management .................................*/
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002d4e:	2005      	movs	r0, #5
 8002d50:	f001 f85a 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	2038      	movs	r0, #56	@ 0x38
 8002d5a:	f001 f860 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 1);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2100      	movs	r1, #0
 8002d62:	203b      	movs	r0, #59	@ 0x3b
 8002d64:	f001 f85b 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2008      	movs	r0, #8
 8002d6e:	f001 f856 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 8002d72:	2201      	movs	r2, #1
 8002d74:	2101      	movs	r1, #1
 8002d76:	2009      	movs	r0, #9
 8002d78:	f001 f851 	bl	8003e1e <HAL_NVIC_SetPriority>
  /*............................................................*/

  HAL_Delay(1000);
 8002d7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d80:	f000 ff4e 	bl	8003c20 <HAL_Delay>

  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8002d84:	2310      	movs	r3, #16
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	4b23      	ldr	r3, [pc, #140]	@ (8002e18 <main+0xf8>)
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	4a23      	ldr	r2, [pc, #140]	@ (8002e1c <main+0xfc>)
 8002d90:	4923      	ldr	r1, [pc, #140]	@ (8002e20 <main+0x100>)
 8002d92:	4824      	ldr	r0, [pc, #144]	@ (8002e24 <main+0x104>)
 8002d94:	f7fe f8d0 	bl	8000f38 <BMI088_Init>
  SetQuaternionFromEuler(&q, 0, 0, 0);				// Angles on the starting position: roll=0, pitch=0, yaw=0
 8002d98:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8002e28 <main+0x108>
 8002d9c:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8002e28 <main+0x108>
 8002da0:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8002e28 <main+0x108>
 8002da4:	4821      	ldr	r0, [pc, #132]	@ (8002e2c <main+0x10c>)
 8002da6:	f7fe fd8f 	bl	80018c8 <SetQuaternionFromEuler>
  Filter_Init(&filt, f_LP_gyr, f_LP_acc, f_HP_gyr, f_HP_acc, f_LP_angles, T_TIM2);
 8002daa:	4b21      	ldr	r3, [pc, #132]	@ (8002e30 <main+0x110>)
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <main+0x114>)
 8002db2:	ed93 7a00 	vldr	s14, [r3]
 8002db6:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <main+0x118>)
 8002db8:	edd3 6a00 	vldr	s13, [r3]
 8002dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e3c <main+0x11c>)
 8002dbe:	ed93 6a00 	vldr	s12, [r3]
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <main+0x120>)
 8002dc4:	edd3 5a00 	vldr	s11, [r3]
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <main+0x124>)
 8002dca:	ed93 5a00 	vldr	s10, [r3]
 8002dce:	eef0 2a45 	vmov.f32	s5, s10
 8002dd2:	eeb0 2a65 	vmov.f32	s4, s11
 8002dd6:	eef0 1a46 	vmov.f32	s3, s12
 8002dda:	eeb0 1a66 	vmov.f32	s2, s13
 8002dde:	eef0 0a47 	vmov.f32	s1, s14
 8002de2:	eeb0 0a67 	vmov.f32	s0, s15
 8002de6:	4818      	ldr	r0, [pc, #96]	@ (8002e48 <main+0x128>)
 8002de8:	f7fe fe42 	bl	8001a70 <Filter_Init>

  HAL_Delay(1000);
 8002dec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002df0:	f000 ff16 	bl	8003c20 <HAL_Delay>

  /* ----- START TIMERS ------------------------------------------------------- */
  HAL_TIM_Base_Start_IT(&htim2);   // Start timer: calculation of the algorithm
 8002df4:	4815      	ldr	r0, [pc, #84]	@ (8002e4c <main+0x12c>)
 8002df6:	f004 fd35 	bl	8007864 <HAL_TIM_Base_Start_IT>
  Init_BMI088_Bias(&imu, 1000000);
 8002dfa:	4915      	ldr	r1, [pc, #84]	@ (8002e50 <main+0x130>)
 8002dfc:	4809      	ldr	r0, [pc, #36]	@ (8002e24 <main+0x104>)
 8002dfe:	f7fe f9b3 	bl	8001168 <Init_BMI088_Bias>
  HAL_TIM_Base_Start_IT(&htim3);   // Start timer: send data with CDC_Transmit_FS serial interface
 8002e02:	4814      	ldr	r0, [pc, #80]	@ (8002e54 <main+0x134>)
 8002e04:	f004 fd2e 	bl	8007864 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);   // Start the UART transmission
 8002e08:	4813      	ldr	r0, [pc, #76]	@ (8002e58 <main+0x138>)
 8002e0a:	f004 fd2b 	bl	8007864 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	  //Debug_SPI_DMA();
	  Toggle(SAMPLE_TIME_MS_TOGGLE);
 8002e0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e12:	f7ff fcaf 	bl	8002774 <Toggle>
 8002e16:	e7fa      	b.n	8002e0e <main+0xee>
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	20000328 	.word	0x20000328
 8002e24:	20000620 	.word	0x20000620
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	20000008 	.word	0x20000008
 8002e30:	20000018 	.word	0x20000018
 8002e34:	2000001c 	.word	0x2000001c
 8002e38:	20000024 	.word	0x20000024
 8002e3c:	20000028 	.word	0x20000028
 8002e40:	20000020 	.word	0x20000020
 8002e44:	20000714 	.word	0x20000714
 8002e48:	20000688 	.word	0x20000688
 8002e4c:	20000440 	.word	0x20000440
 8002e50:	000f4240 	.word	0x000f4240
 8002e54:	20000488 	.word	0x20000488
 8002e58:	200004d0 	.word	0x200004d0

08002e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b094      	sub	sp, #80	@ 0x50
 8002e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	2230      	movs	r2, #48	@ 0x30
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f00a ff2b 	bl	800dcc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <SystemClock_Config+0xcc>)
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	4a27      	ldr	r2, [pc, #156]	@ (8002f28 <SystemClock_Config+0xcc>)
 8002e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <SystemClock_Config+0xcc>)
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <SystemClock_Config+0xd0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a21      	ldr	r2, [pc, #132]	@ (8002f2c <SystemClock_Config+0xd0>)
 8002ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b1f      	ldr	r3, [pc, #124]	@ (8002f2c <SystemClock_Config+0xd0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ebc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ec6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ecc:	2308      	movs	r3, #8
 8002ece:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ed0:	23a8      	movs	r3, #168	@ 0xa8
 8002ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ed8:	2307      	movs	r3, #7
 8002eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002edc:	f107 0320 	add.w	r3, r7, #32
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 f80f 	bl	8005f04 <HAL_RCC_OscConfig>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002eec:	f000 fa6e 	bl	80033cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef0:	230f      	movs	r3, #15
 8002ef2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002efc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	2105      	movs	r1, #5
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 fa70 	bl	80063f4 <HAL_RCC_ClockConfig>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f1a:	f000 fa57 	bl	80033cc <Error_Handler>
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3750      	adds	r7, #80	@ 0x50
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40007000 	.word	0x40007000

08002f30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f34:	4b17      	ldr	r3, [pc, #92]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f36:	4a18      	ldr	r2, [pc, #96]	@ (8002f98 <MX_SPI1_Init+0x68>)
 8002f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f3a:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f42:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f48:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f4e:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f62:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f64:	2210      	movs	r2, #16
 8002f66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f74:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f7c:	220a      	movs	r2, #10
 8002f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f80:	4804      	ldr	r0, [pc, #16]	@ (8002f94 <MX_SPI1_Init+0x64>)
 8002f82:	f003 fc55 	bl	8006830 <HAL_SPI_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f8c:	f000 fa1e 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000328 	.word	0x20000328
 8002f98:	40013000 	.word	0x40013000

08002f9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8002fba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8002fc2:	2229      	movs	r2, #41	@ 0x29
 8002fc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002fcc:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8002fce:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002fd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd4:	4b27      	ldr	r3, [pc, #156]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fda:	4b26      	ldr	r3, [pc, #152]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fe0:	4824      	ldr	r0, [pc, #144]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8002fe2:	f004 fbef 	bl	80077c4 <HAL_TIM_Base_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fec:	f000 f9ee 	bl	80033cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ff6:	f107 0308 	add.w	r3, r7, #8
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	481d      	ldr	r0, [pc, #116]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8002ffe:	f004 fd91 	bl	8007b24 <HAL_TIM_ConfigClockSource>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003008:	f000 f9e0 	bl	80033cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800300c:	2300      	movs	r3, #0
 800300e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003014:	463b      	mov	r3, r7
 8003016:	4619      	mov	r1, r3
 8003018:	4816      	ldr	r0, [pc, #88]	@ (8003074 <MX_TIM2_Init+0xd8>)
 800301a:	f004 ffb9 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003024:	f000 f9d2 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* These following 2 lines calculate the Frequency and the Period of the Timer TIM2*/
	T_TIM2 = 1.0f / (f_CK / (float)((htim2.Init.Period +1 ) * htim2.Init.Prescaler + 1));
 8003028:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003078 <MX_TIM2_Init+0xdc>
 800302c:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <MX_TIM2_Init+0xd8>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	4a10      	ldr	r2, [pc, #64]	@ (8003074 <MX_TIM2_Init+0xd8>)
 8003034:	6852      	ldr	r2, [r2, #4]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	3301      	adds	r3, #1
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800304c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003050:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <MX_TIM2_Init+0xe0>)
 8003052:	edc3 7a00 	vstr	s15, [r3]
	F_TIM2 = 1 / T_TIM2;
 8003056:	4b09      	ldr	r3, [pc, #36]	@ (800307c <MX_TIM2_Init+0xe0>)
 8003058:	ed93 7a00 	vldr	s14, [r3]
 800305c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <MX_TIM2_Init+0xe4>)
 8003066:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM2_Init 2 */

}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000440 	.word	0x20000440
 8003078:	4ca037a0 	.word	0x4ca037a0
 800307c:	20000714 	.word	0x20000714
 8003080:	20000718 	.word	0x20000718

08003084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308a:	f107 0308 	add.w	r3, r7, #8
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003098:	463b      	mov	r3, r7
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <MX_TIM3_Init+0x94>)
 80030a2:	4a1e      	ldr	r2, [pc, #120]	@ (800311c <MX_TIM3_Init+0x98>)
 80030a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80030a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <MX_TIM3_Init+0x94>)
 80030a8:	2229      	movs	r2, #41	@ 0x29
 80030aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <MX_TIM3_Init+0x94>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80030b2:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <MX_TIM3_Init+0x94>)
 80030b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80030b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ba:	4b17      	ldr	r3, [pc, #92]	@ (8003118 <MX_TIM3_Init+0x94>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c0:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <MX_TIM3_Init+0x94>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030c6:	4814      	ldr	r0, [pc, #80]	@ (8003118 <MX_TIM3_Init+0x94>)
 80030c8:	f004 fb7c 	bl	80077c4 <HAL_TIM_Base_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80030d2:	f000 f97b 	bl	80033cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	4619      	mov	r1, r3
 80030e2:	480d      	ldr	r0, [pc, #52]	@ (8003118 <MX_TIM3_Init+0x94>)
 80030e4:	f004 fd1e 	bl	8007b24 <HAL_TIM_ConfigClockSource>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80030ee:	f000 f96d 	bl	80033cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030fa:	463b      	mov	r3, r7
 80030fc:	4619      	mov	r1, r3
 80030fe:	4806      	ldr	r0, [pc, #24]	@ (8003118 <MX_TIM3_Init+0x94>)
 8003100:	f004 ff46 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800310a:	f000 f95f 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000488 	.word	0x20000488
 800311c:	40000400 	.word	0x40000400

08003120 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003126:	f107 0308 	add.w	r3, r7, #8
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003134:	463b      	mov	r3, r7
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800313c:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <MX_TIM4_Init+0x94>)
 800313e:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <MX_TIM4_Init+0x98>)
 8003140:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8003142:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <MX_TIM4_Init+0x94>)
 8003144:	2229      	movs	r2, #41	@ 0x29
 8003146:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003148:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <MX_TIM4_Init+0x94>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800314e:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <MX_TIM4_Init+0x94>)
 8003150:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003154:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003156:	4b17      	ldr	r3, [pc, #92]	@ (80031b4 <MX_TIM4_Init+0x94>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800315c:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <MX_TIM4_Init+0x94>)
 800315e:	2200      	movs	r2, #0
 8003160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003162:	4814      	ldr	r0, [pc, #80]	@ (80031b4 <MX_TIM4_Init+0x94>)
 8003164:	f004 fb2e 	bl	80077c4 <HAL_TIM_Base_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800316e:	f000 f92d 	bl	80033cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003176:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003178:	f107 0308 	add.w	r3, r7, #8
 800317c:	4619      	mov	r1, r3
 800317e:	480d      	ldr	r0, [pc, #52]	@ (80031b4 <MX_TIM4_Init+0x94>)
 8003180:	f004 fcd0 	bl	8007b24 <HAL_TIM_ConfigClockSource>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800318a:	f000 f91f 	bl	80033cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003196:	463b      	mov	r3, r7
 8003198:	4619      	mov	r1, r3
 800319a:	4806      	ldr	r0, [pc, #24]	@ (80031b4 <MX_TIM4_Init+0x94>)
 800319c:	f004 fef8 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80031a6:	f000 f911 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200004d0 	.word	0x200004d0
 80031b8:	40000800 	.word	0x40000800

080031bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031c2:	4a12      	ldr	r2, [pc, #72]	@ (800320c <MX_USART1_UART_Init+0x50>)
 80031c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031da:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031e0:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031e2:	220c      	movs	r2, #12
 80031e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e6:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031f2:	4805      	ldr	r0, [pc, #20]	@ (8003208 <MX_USART1_UART_Init+0x4c>)
 80031f4:	f004 ff5c 	bl	80080b0 <HAL_UART_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031fe:	f000 f8e5 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000518 	.word	0x20000518
 800320c:	40011000 	.word	0x40011000

08003210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	4b18      	ldr	r3, [pc, #96]	@ (800327c <MX_DMA_Init+0x6c>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	4a17      	ldr	r2, [pc, #92]	@ (800327c <MX_DMA_Init+0x6c>)
 8003220:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003224:	6313      	str	r3, [r2, #48]	@ 0x30
 8003226:	4b15      	ldr	r3, [pc, #84]	@ (800327c <MX_DMA_Init+0x6c>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	2038      	movs	r0, #56	@ 0x38
 8003238:	f000 fdf1 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800323c:	2038      	movs	r0, #56	@ 0x38
 800323e:	f000 fe0a 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	203a      	movs	r0, #58	@ 0x3a
 8003248:	f000 fde9 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800324c:	203a      	movs	r0, #58	@ 0x3a
 800324e:	f000 fe02 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	203b      	movs	r0, #59	@ 0x3b
 8003258:	f000 fde1 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800325c:	203b      	movs	r0, #59	@ 0x3b
 800325e:	f000 fdfa 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	2046      	movs	r0, #70	@ 0x46
 8003268:	f000 fdd9 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800326c:	2046      	movs	r0, #70	@ 0x46
 800326e:	f000 fdf2 	bl	8003e56 <HAL_NVIC_EnableIRQ>

}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800

08003280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	@ 0x28
 8003284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	4b48      	ldr	r3, [pc, #288]	@ (80033bc <MX_GPIO_Init+0x13c>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a47      	ldr	r2, [pc, #284]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b45      	ldr	r3, [pc, #276]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b41      	ldr	r3, [pc, #260]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a40      	ldr	r2, [pc, #256]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032bc:	f043 0304 	orr.w	r3, r3, #4
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b3e      	ldr	r3, [pc, #248]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	4b3a      	ldr	r3, [pc, #232]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4a39      	ldr	r2, [pc, #228]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032de:	4b37      	ldr	r3, [pc, #220]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	4b33      	ldr	r3, [pc, #204]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	4a32      	ldr	r2, [pc, #200]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fa:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <MX_GPIO_Init+0x13c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 8003306:	2200      	movs	r2, #0
 8003308:	2110      	movs	r1, #16
 800330a:	482d      	ldr	r0, [pc, #180]	@ (80033c0 <MX_GPIO_Init+0x140>)
 800330c:	f001 fb5c 	bl	80049c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8003310:	2200      	movs	r2, #0
 8003312:	2110      	movs	r1, #16
 8003314:	482b      	ldr	r0, [pc, #172]	@ (80033c4 <MX_GPIO_Init+0x144>)
 8003316:	f001 fb57 	bl	80049c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800331a:	2200      	movs	r2, #0
 800331c:	2110      	movs	r1, #16
 800331e:	482a      	ldr	r0, [pc, #168]	@ (80033c8 <MX_GPIO_Init+0x148>)
 8003320:	f001 fb52 	bl	80049c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8003324:	230c      	movs	r3, #12
 8003326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003328:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800332c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	4619      	mov	r1, r3
 8003338:	4822      	ldr	r0, [pc, #136]	@ (80033c4 <MX_GPIO_Init+0x144>)
 800333a:	f001 f9a9 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 800333e:	2310      	movs	r3, #16
 8003340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003342:	2301      	movs	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4619      	mov	r1, r3
 8003354:	481a      	ldr	r0, [pc, #104]	@ (80033c0 <MX_GPIO_Init+0x140>)
 8003356:	f001 f99b 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 800335a:	2310      	movs	r3, #16
 800335c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335e:	2301      	movs	r3, #1
 8003360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	4619      	mov	r1, r3
 8003370:	4814      	ldr	r0, [pc, #80]	@ (80033c4 <MX_GPIO_Init+0x144>)
 8003372:	f001 f98d 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003376:	2310      	movs	r3, #16
 8003378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337a:	2301      	movs	r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	480e      	ldr	r0, [pc, #56]	@ (80033c8 <MX_GPIO_Init+0x148>)
 800338e:	f001 f97f 	bl	8004690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003392:	2200      	movs	r2, #0
 8003394:	2100      	movs	r1, #0
 8003396:	2008      	movs	r0, #8
 8003398:	f000 fd41 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800339c:	2008      	movs	r0, #8
 800339e:	f000 fd5a 	bl	8003e56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	2009      	movs	r0, #9
 80033a8:	f000 fd39 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80033ac:	2009      	movs	r0, #9
 80033ae:	f000 fd52 	bl	8003e56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033b2:	bf00      	nop
 80033b4:	3728      	adds	r7, #40	@ 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020800 	.word	0x40020800
 80033c8:	40020400 	.word	0x40020400

080033cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b0a0      	sub	sp, #128	@ 0x80
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	char txBuff[128];
	sprintf(txBuff, "SPI Error!");
 80033d2:	463b      	mov	r3, r7
 80033d4:	490b      	ldr	r1, [pc, #44]	@ (8003404 <Error_Handler+0x38>)
 80033d6:	4618      	mov	r0, r3
 80033d8:	f00a fc12 	bl	800dc00 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 80033dc:	bf00      	nop
 80033de:	463b      	mov	r3, r7
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fc ff45 	bl	8000270 <strlen>
 80033e6:	4603      	mov	r3, r0
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	463b      	mov	r3, r7
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f009 fa90 	bl	800c914 <CDC_Transmit_FS>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d0f1      	beq.n	80033de <Error_Handler+0x12>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033fa:	b672      	cpsid	i
}
 80033fc:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033fe:	bf00      	nop
 8003400:	e7fd      	b.n	80033fe <Error_Handler+0x32>
 8003402:	bf00      	nop
 8003404:	080124ac 	.word	0x080124ac

08003408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	4b10      	ldr	r3, [pc, #64]	@ (8003454 <HAL_MspInit+0x4c>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	4a0f      	ldr	r2, [pc, #60]	@ (8003454 <HAL_MspInit+0x4c>)
 8003418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800341c:	6453      	str	r3, [r2, #68]	@ 0x44
 800341e:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <HAL_MspInit+0x4c>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <HAL_MspInit+0x4c>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	4a08      	ldr	r2, [pc, #32]	@ (8003454 <HAL_MspInit+0x4c>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	@ 0x40
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_MspInit+0x4c>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	@ 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a4c      	ldr	r2, [pc, #304]	@ (80035a8 <HAL_SPI_MspInit+0x150>)
 8003476:	4293      	cmp	r3, r2
 8003478:	f040 8092 	bne.w	80035a0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	4b4a      	ldr	r3, [pc, #296]	@ (80035ac <HAL_SPI_MspInit+0x154>)
 8003482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003484:	4a49      	ldr	r2, [pc, #292]	@ (80035ac <HAL_SPI_MspInit+0x154>)
 8003486:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800348a:	6453      	str	r3, [r2, #68]	@ 0x44
 800348c:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <HAL_SPI_MspInit+0x154>)
 800348e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	4b43      	ldr	r3, [pc, #268]	@ (80035ac <HAL_SPI_MspInit+0x154>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a0:	4a42      	ldr	r2, [pc, #264]	@ (80035ac <HAL_SPI_MspInit+0x154>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a8:	4b40      	ldr	r3, [pc, #256]	@ (80035ac <HAL_SPI_MspInit+0x154>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034b4:	23e0      	movs	r3, #224	@ 0xe0
 80034b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034c4:	2305      	movs	r3, #5
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	4838      	ldr	r0, [pc, #224]	@ (80035b0 <HAL_SPI_MspInit+0x158>)
 80034d0:	f001 f8de 	bl	8004690 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80034d4:	4b37      	ldr	r3, [pc, #220]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 80034d6:	4a38      	ldr	r2, [pc, #224]	@ (80035b8 <HAL_SPI_MspInit+0x160>)
 80034d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80034da:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 80034dc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80034e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034e2:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e8:	4b32      	ldr	r3, [pc, #200]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ee:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 80034f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f6:	4b2f      	ldr	r3, [pc, #188]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034fc:	4b2d      	ldr	r3, [pc, #180]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003502:	4b2c      	ldr	r3, [pc, #176]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 8003504:	2200      	movs	r2, #0
 8003506:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003508:	4b2a      	ldr	r3, [pc, #168]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 800350a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800350e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003510:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 8003512:	2200      	movs	r2, #0
 8003514:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003516:	4827      	ldr	r0, [pc, #156]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 8003518:	f000 fcb8 	bl	8003e8c <HAL_DMA_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8003522:	f7ff ff53 	bl	80033cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a22      	ldr	r2, [pc, #136]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 800352a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800352c:	4a21      	ldr	r2, [pc, #132]	@ (80035b4 <HAL_SPI_MspInit+0x15c>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003532:	4b22      	ldr	r3, [pc, #136]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003534:	4a22      	ldr	r2, [pc, #136]	@ (80035c0 <HAL_SPI_MspInit+0x168>)
 8003536:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003538:	4b20      	ldr	r3, [pc, #128]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 800353a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800353e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003540:	4b1e      	ldr	r3, [pc, #120]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003542:	2240      	movs	r2, #64	@ 0x40
 8003544:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003546:	4b1d      	ldr	r3, [pc, #116]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003548:	2200      	movs	r2, #0
 800354a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800354c:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 800354e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003552:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003554:	4b19      	ldr	r3, [pc, #100]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003556:	2200      	movs	r2, #0
 8003558:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800355a:	4b18      	ldr	r3, [pc, #96]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003560:	4b16      	ldr	r3, [pc, #88]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003566:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003568:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800356c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800356e:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003570:	2200      	movs	r2, #0
 8003572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003574:	4811      	ldr	r0, [pc, #68]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003576:	f000 fc89 	bl	8003e8c <HAL_DMA_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003580:	f7ff ff24 	bl	80033cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0d      	ldr	r2, [pc, #52]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 8003588:	649a      	str	r2, [r3, #72]	@ 0x48
 800358a:	4a0c      	ldr	r2, [pc, #48]	@ (80035bc <HAL_SPI_MspInit+0x164>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2100      	movs	r1, #0
 8003594:	2023      	movs	r0, #35	@ 0x23
 8003596:	f000 fc42 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800359a:	2023      	movs	r0, #35	@ 0x23
 800359c:	f000 fc5b 	bl	8003e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80035a0:	bf00      	nop
 80035a2:	3728      	adds	r7, #40	@ 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40013000 	.word	0x40013000
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40020000 	.word	0x40020000
 80035b4:	20000380 	.word	0x20000380
 80035b8:	40026410 	.word	0x40026410
 80035bc:	200003e0 	.word	0x200003e0
 80035c0:	40026458 	.word	0x40026458

080035c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d116      	bne.n	8003604 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	4b28      	ldr	r3, [pc, #160]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	4a27      	ldr	r2, [pc, #156]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e6:	4b25      	ldr	r3, [pc, #148]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	201c      	movs	r0, #28
 80035f8:	f000 fc11 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035fc:	201c      	movs	r0, #28
 80035fe:	f000 fc2a 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003602:	e036      	b.n	8003672 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1d      	ldr	r2, [pc, #116]	@ (8003680 <HAL_TIM_Base_MspInit+0xbc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d116      	bne.n	800363c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	4b1a      	ldr	r3, [pc, #104]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	4a19      	ldr	r2, [pc, #100]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	6413      	str	r3, [r2, #64]	@ 0x40
 800361e:	4b17      	ldr	r3, [pc, #92]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	201d      	movs	r0, #29
 8003630:	f000 fbf5 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003634:	201d      	movs	r0, #29
 8003636:	f000 fc0e 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 800363a:	e01a      	b.n	8003672 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a10      	ldr	r2, [pc, #64]	@ (8003684 <HAL_TIM_Base_MspInit+0xc0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d115      	bne.n	8003672 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	4a0b      	ldr	r2, [pc, #44]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	6413      	str	r3, [r2, #64]	@ 0x40
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HAL_TIM_Base_MspInit+0xb8>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2100      	movs	r1, #0
 8003666:	201e      	movs	r0, #30
 8003668:	f000 fbd9 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800366c:	201e      	movs	r0, #30
 800366e:	f000 fbf2 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800

08003688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	@ 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a4c      	ldr	r2, [pc, #304]	@ (80037d8 <HAL_UART_MspInit+0x150>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f040 8091 	bne.w	80037ce <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	4b4a      	ldr	r3, [pc, #296]	@ (80037dc <HAL_UART_MspInit+0x154>)
 80036b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b4:	4a49      	ldr	r2, [pc, #292]	@ (80037dc <HAL_UART_MspInit+0x154>)
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80036bc:	4b47      	ldr	r3, [pc, #284]	@ (80037dc <HAL_UART_MspInit+0x154>)
 80036be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	4b43      	ldr	r3, [pc, #268]	@ (80037dc <HAL_UART_MspInit+0x154>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d0:	4a42      	ldr	r2, [pc, #264]	@ (80037dc <HAL_UART_MspInit+0x154>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80036d8:	4b40      	ldr	r3, [pc, #256]	@ (80037dc <HAL_UART_MspInit+0x154>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	2302      	movs	r3, #2
 80036ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f2:	2303      	movs	r3, #3
 80036f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036f6:	2307      	movs	r3, #7
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	4619      	mov	r1, r3
 8003700:	4837      	ldr	r0, [pc, #220]	@ (80037e0 <HAL_UART_MspInit+0x158>)
 8003702:	f000 ffc5 	bl	8004690 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003706:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 8003708:	4a37      	ldr	r2, [pc, #220]	@ (80037e8 <HAL_UART_MspInit+0x160>)
 800370a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800370c:	4b35      	ldr	r3, [pc, #212]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 800370e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003712:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003714:	4b33      	ldr	r3, [pc, #204]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 8003716:	2240      	movs	r2, #64	@ 0x40
 8003718:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800371a:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003720:	4b30      	ldr	r3, [pc, #192]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 8003722:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003726:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003728:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 800372a:	2200      	movs	r2, #0
 800372c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800372e:	4b2d      	ldr	r3, [pc, #180]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 8003730:	2200      	movs	r2, #0
 8003732:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003734:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 8003736:	2200      	movs	r2, #0
 8003738:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800373a:	4b2a      	ldr	r3, [pc, #168]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 800373c:	2200      	movs	r2, #0
 800373e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003740:	4b28      	ldr	r3, [pc, #160]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 8003742:	2200      	movs	r2, #0
 8003744:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003746:	4827      	ldr	r0, [pc, #156]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 8003748:	f000 fba0 	bl	8003e8c <HAL_DMA_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003752:	f7ff fe3b 	bl	80033cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a22      	ldr	r2, [pc, #136]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38
 800375c:	4a21      	ldr	r2, [pc, #132]	@ (80037e4 <HAL_UART_MspInit+0x15c>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003762:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <HAL_UART_MspInit+0x164>)
 8003764:	4a22      	ldr	r2, [pc, #136]	@ (80037f0 <HAL_UART_MspInit+0x168>)
 8003766:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003768:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <HAL_UART_MspInit+0x164>)
 800376a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800376e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003770:	4b1e      	ldr	r3, [pc, #120]	@ (80037ec <HAL_UART_MspInit+0x164>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003776:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_UART_MspInit+0x164>)
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800377c:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <HAL_UART_MspInit+0x164>)
 800377e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003782:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_UART_MspInit+0x164>)
 8003786:	2200      	movs	r2, #0
 8003788:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800378a:	4b18      	ldr	r3, [pc, #96]	@ (80037ec <HAL_UART_MspInit+0x164>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003790:	4b16      	ldr	r3, [pc, #88]	@ (80037ec <HAL_UART_MspInit+0x164>)
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003796:	4b15      	ldr	r3, [pc, #84]	@ (80037ec <HAL_UART_MspInit+0x164>)
 8003798:	2200      	movs	r2, #0
 800379a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800379c:	4b13      	ldr	r3, [pc, #76]	@ (80037ec <HAL_UART_MspInit+0x164>)
 800379e:	2200      	movs	r2, #0
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80037a2:	4812      	ldr	r0, [pc, #72]	@ (80037ec <HAL_UART_MspInit+0x164>)
 80037a4:	f000 fb72 	bl	8003e8c <HAL_DMA_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80037ae:	f7ff fe0d 	bl	80033cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a0d      	ldr	r2, [pc, #52]	@ (80037ec <HAL_UART_MspInit+0x164>)
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037b8:	4a0c      	ldr	r2, [pc, #48]	@ (80037ec <HAL_UART_MspInit+0x164>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	2025      	movs	r0, #37	@ 0x25
 80037c4:	f000 fb2b 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037c8:	2025      	movs	r0, #37	@ 0x25
 80037ca:	f000 fb44 	bl	8003e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80037ce:	bf00      	nop
 80037d0:	3728      	adds	r7, #40	@ 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40011000 	.word	0x40011000
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020000 	.word	0x40020000
 80037e4:	20000560 	.word	0x20000560
 80037e8:	400264b8 	.word	0x400264b8
 80037ec:	200005c0 	.word	0x200005c0
 80037f0:	40026440 	.word	0x40026440

080037f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <NMI_Handler+0x4>

080037fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <HardFault_Handler+0x4>

08003804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <MemManage_Handler+0x4>

0800380c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <BusFault_Handler+0x4>

08003814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <UsageFault_Handler+0x4>

0800381c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800384a:	f000 f9c9 	bl	8003be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}

08003852 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8003856:	2004      	movs	r0, #4
 8003858:	f001 f8ea 	bl	8004a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}

08003860 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8003864:	2008      	movs	r0, #8
 8003866:	f001 f8e3 	bl	8004a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003874:	4802      	ldr	r0, [pc, #8]	@ (8003880 <TIM2_IRQHandler+0x10>)
 8003876:	f004 f865 	bl	8007944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000440 	.word	0x20000440

08003884 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003888:	4802      	ldr	r0, [pc, #8]	@ (8003894 <TIM3_IRQHandler+0x10>)
 800388a:	f004 f85b 	bl	8007944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000488 	.word	0x20000488

08003898 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800389c:	4802      	ldr	r0, [pc, #8]	@ (80038a8 <TIM4_IRQHandler+0x10>)
 800389e:	f004 f851 	bl	8007944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200004d0 	.word	0x200004d0

080038ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80038b0:	4802      	ldr	r0, [pc, #8]	@ (80038bc <SPI1_IRQHandler+0x10>)
 80038b2:	f003 fc2f 	bl	8007114 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000328 	.word	0x20000328

080038c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038c4:	4802      	ldr	r0, [pc, #8]	@ (80038d0 <USART1_IRQHandler+0x10>)
 80038c6:	f004 fcb3 	bl	8008230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000518 	.word	0x20000518

080038d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80038d8:	4802      	ldr	r0, [pc, #8]	@ (80038e4 <DMA2_Stream0_IRQHandler+0x10>)
 80038da:	f000 fc6f 	bl	80041bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000380 	.word	0x20000380

080038e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038ec:	4802      	ldr	r0, [pc, #8]	@ (80038f8 <DMA2_Stream2_IRQHandler+0x10>)
 80038ee:	f000 fc65 	bl	80041bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200005c0 	.word	0x200005c0

080038fc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003900:	4802      	ldr	r0, [pc, #8]	@ (800390c <DMA2_Stream3_IRQHandler+0x10>)
 8003902:	f000 fc5b 	bl	80041bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200003e0 	.word	0x200003e0

08003910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003914:	4802      	ldr	r0, [pc, #8]	@ (8003920 <OTG_FS_IRQHandler+0x10>)
 8003916:	f001 f9e7 	bl	8004ce8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20001e40 	.word	0x20001e40

08003924 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003928:	4802      	ldr	r0, [pc, #8]	@ (8003934 <DMA2_Stream7_IRQHandler+0x10>)
 800392a:	f000 fc47 	bl	80041bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000560 	.word	0x20000560

08003938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return 1;
 800393c:	2301      	movs	r3, #1
}
 800393e:	4618      	mov	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_kill>:

int _kill(int pid, int sig)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003952:	f00a fa0b 	bl	800dd6c <__errno>
 8003956:	4603      	mov	r3, r0
 8003958:	2216      	movs	r2, #22
 800395a:	601a      	str	r2, [r3, #0]
  return -1;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_exit>:

void _exit (int status)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffe7 	bl	8003948 <_kill>
  while (1) {}    /* Make sure we hang here */
 800397a:	bf00      	nop
 800397c:	e7fd      	b.n	800397a <_exit+0x12>

0800397e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e00a      	b.n	80039a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003990:	f3af 8000 	nop.w
 8003994:	4601      	mov	r1, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	60ba      	str	r2, [r7, #8]
 800399c:	b2ca      	uxtb	r2, r1
 800399e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3301      	adds	r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	dbf0      	blt.n	8003990 <_read+0x12>
  }

  return len;
 80039ae:	687b      	ldr	r3, [r7, #4]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e009      	b.n	80039de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	60ba      	str	r2, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	dbf1      	blt.n	80039ca <_write+0x12>
  }
  return len;
 80039e6:	687b      	ldr	r3, [r7, #4]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_close>:

int _close(int file)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a18:	605a      	str	r2, [r3, #4]
  return 0;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <_isatty>:

int _isatty(int file)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a60:	4a14      	ldr	r2, [pc, #80]	@ (8003ab4 <_sbrk+0x5c>)
 8003a62:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <_sbrk+0x60>)
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a6c:	4b13      	ldr	r3, [pc, #76]	@ (8003abc <_sbrk+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a74:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <_sbrk+0x64>)
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <_sbrk+0x68>)
 8003a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d207      	bcs.n	8003a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a88:	f00a f970 	bl	800dd6c <__errno>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	220c      	movs	r2, #12
 8003a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	e009      	b.n	8003aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a98:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a9e:	4b07      	ldr	r3, [pc, #28]	@ (8003abc <_sbrk+0x64>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4a05      	ldr	r2, [pc, #20]	@ (8003abc <_sbrk+0x64>)
 8003aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20020000 	.word	0x20020000
 8003ab8:	00000400 	.word	0x00000400
 8003abc:	20000958 	.word	0x20000958
 8003ac0:	20002690 	.word	0x20002690

08003ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ac8:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <SystemInit+0x20>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	4a05      	ldr	r2, [pc, #20]	@ (8003ae4 <SystemInit+0x20>)
 8003ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003aec:	f7ff ffea 	bl	8003ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003af0:	480c      	ldr	r0, [pc, #48]	@ (8003b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003af2:	490d      	ldr	r1, [pc, #52]	@ (8003b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003af4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af8:	e002      	b.n	8003b00 <LoopCopyDataInit>

08003afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003afe:	3304      	adds	r3, #4

08003b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b04:	d3f9      	bcc.n	8003afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b06:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b08:	4c0a      	ldr	r4, [pc, #40]	@ (8003b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b0c:	e001      	b.n	8003b12 <LoopFillZerobss>

08003b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b10:	3204      	adds	r2, #4

08003b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b14:	d3fb      	bcc.n	8003b0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003b16:	f00a f92f 	bl	800dd78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b1a:	f7ff f901 	bl	8002d20 <main>
  bx  lr    
 8003b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b28:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8003b2c:	08012d28 	.word	0x08012d28
  ldr r2, =_sbss
 8003b30:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8003b34:	20002690 	.word	0x20002690

08003b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b38:	e7fe      	b.n	8003b38 <ADC_IRQHandler>
	...

08003b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	@ (8003b7c <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	@ (8003b7c <HAL_Init+0x40>)
 8003b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <HAL_Init+0x40>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b58:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a07      	ldr	r2, [pc, #28]	@ (8003b7c <HAL_Init+0x40>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 f94f 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6a:	200f      	movs	r0, #15
 8003b6c:	f000 f808 	bl	8003b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b70:	f7ff fc4a 	bl	8003408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b88:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <HAL_InitTick+0x54>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <HAL_InitTick+0x58>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	4619      	mov	r1, r3
 8003b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f967 	bl	8003e72 <HAL_SYSTICK_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00e      	b.n	8003bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0f      	cmp	r3, #15
 8003bb2:	d80a      	bhi.n	8003bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f000 f92f 	bl	8003e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc0:	4a06      	ldr	r2, [pc, #24]	@ (8003bdc <HAL_InitTick+0x5c>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	2000002c 	.word	0x2000002c
 8003bd8:	20000034 	.word	0x20000034
 8003bdc:	20000030 	.word	0x20000030

08003be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be4:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_IncTick+0x20>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_IncTick+0x24>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a04      	ldr	r2, [pc, #16]	@ (8003c04 <HAL_IncTick+0x24>)
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000034 	.word	0x20000034
 8003c04:	2000095c 	.word	0x2000095c

08003c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	@ (8003c1c <HAL_GetTick+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	2000095c 	.word	0x2000095c

08003c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c28:	f7ff ffee 	bl	8003c08 <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d005      	beq.n	8003c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <HAL_Delay+0x44>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c46:	bf00      	nop
 8003c48:	f7ff ffde 	bl	8003c08 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d8f7      	bhi.n	8003c48 <HAL_Delay+0x28>
  {
  }
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000034 	.word	0x20000034

08003c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9a:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60d3      	str	r3, [r2, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0307 	and.w	r3, r3, #7
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db0b      	blt.n	8003cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	4907      	ldr	r1, [pc, #28]	@ (8003d04 <__NVIC_EnableIRQ+0x38>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000e100 	.word	0xe000e100

08003d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	db0a      	blt.n	8003d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	490c      	ldr	r1, [pc, #48]	@ (8003d54 <__NVIC_SetPriority+0x4c>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d30:	e00a      	b.n	8003d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4908      	ldr	r1, [pc, #32]	@ (8003d58 <__NVIC_SetPriority+0x50>)
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3b04      	subs	r3, #4
 8003d40:	0112      	lsls	r2, r2, #4
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	440b      	add	r3, r1
 8003d46:	761a      	strb	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000e100 	.word	0xe000e100
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	@ 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f1c3 0307 	rsb	r3, r3, #7
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	bf28      	it	cs
 8003d7a:	2304      	movcs	r3, #4
 8003d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d902      	bls.n	8003d8c <NVIC_EncodePriority+0x30>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3b03      	subs	r3, #3
 8003d8a:	e000      	b.n	8003d8e <NVIC_EncodePriority+0x32>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	401a      	ands	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da4:	f04f 31ff 	mov.w	r1, #4294967295
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	43d9      	mvns	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	4313      	orrs	r3, r2
         );
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	@ 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd4:	d301      	bcc.n	8003dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00f      	b.n	8003dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <SysTick_Config+0x40>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003de2:	210f      	movs	r1, #15
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f7ff ff8e 	bl	8003d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dec:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <SysTick_Config+0x40>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003df2:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <SysTick_Config+0x40>)
 8003df4:	2207      	movs	r2, #7
 8003df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000e010 	.word	0xe000e010

08003e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff29 	bl	8003c68 <__NVIC_SetPriorityGrouping>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e30:	f7ff ff3e 	bl	8003cb0 <__NVIC_GetPriorityGrouping>
 8003e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f7ff ff8e 	bl	8003d5c <NVIC_EncodePriority>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff5d 	bl	8003d08 <__NVIC_SetPriority>
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff31 	bl	8003ccc <__NVIC_EnableIRQ>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffa2 	bl	8003dc4 <SysTick_Config>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e98:	f7ff feb6 	bl	8003c08 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e099      	b.n	8003fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec8:	e00f      	b.n	8003eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eca:	f7ff fe9d 	bl	8003c08 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d908      	bls.n	8003eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e078      	b.n	8003fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e8      	bne.n	8003eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4b38      	ldr	r3, [pc, #224]	@ (8003fe4 <HAL_DMA_Init+0x158>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d107      	bne.n	8003f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0307 	bic.w	r3, r3, #7
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d117      	bne.n	8003fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00e      	beq.n	8003fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fb01 	bl	8004598 <DMA_CheckFifoParam>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2240      	movs	r2, #64	@ 0x40
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003faa:	2301      	movs	r3, #1
 8003fac:	e016      	b.n	8003fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fab8 	bl	800452c <DMA_CalcBaseAndBitshift>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc4:	223f      	movs	r2, #63	@ 0x3f
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	f010803f 	.word	0xf010803f

08003fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_DMA_Start_IT+0x26>
 800400a:	2302      	movs	r3, #2
 800400c:	e040      	b.n	8004090 <HAL_DMA_Start_IT+0xa8>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	d12f      	bne.n	8004082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fa4a 	bl	80044d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	223f      	movs	r2, #63	@ 0x3f
 8004042:	409a      	lsls	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0216 	orr.w	r2, r2, #22
 8004056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e005      	b.n	800408e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040a6:	f7ff fdaf 	bl	8003c08 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d008      	beq.n	80040ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	@ 0x80
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e052      	b.n	8004170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0216 	bic.w	r2, r2, #22
 80040d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_DMA_Abort+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411a:	e013      	b.n	8004144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800411c:	f7ff fd74 	bl	8003c08 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b05      	cmp	r3, #5
 8004128:	d90c      	bls.n	8004144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2203      	movs	r2, #3
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e015      	b.n	8004170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e4      	bne.n	800411c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	223f      	movs	r2, #63	@ 0x3f
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2280      	movs	r2, #128	@ 0x80
 8004190:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e00c      	b.n	80041b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041c8:	4b8e      	ldr	r3, [pc, #568]	@ (8004404 <HAL_DMA_IRQHandler+0x248>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a8e      	ldr	r2, [pc, #568]	@ (8004408 <HAL_DMA_IRQHandler+0x24c>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0a9b      	lsrs	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e6:	2208      	movs	r2, #8
 80041e8:	409a      	lsls	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01a      	beq.n	8004228 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004214:	2208      	movs	r2, #8
 8004216:	409a      	lsls	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422c:	2201      	movs	r2, #1
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424a:	2201      	movs	r2, #1
 800424c:	409a      	lsls	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004262:	2204      	movs	r2, #4
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	2204      	movs	r2, #4
 8004282:	409a      	lsls	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004298:	2210      	movs	r2, #16
 800429a:	409a      	lsls	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d043      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03c      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	2210      	movs	r2, #16
 80042b8:	409a      	lsls	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d018      	beq.n	80042fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d108      	bne.n	80042ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d024      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
 80042ea:	e01f      	b.n	800432c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
 80042fc:	e016      	b.n	800432c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0208 	bic.w	r2, r2, #8
 800431a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004330:	2220      	movs	r2, #32
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 808f 	beq.w	800445c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8087 	beq.w	800445c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	2220      	movs	r2, #32
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b05      	cmp	r3, #5
 8004364:	d136      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0216 	bic.w	r2, r2, #22
 8004374:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004384:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <HAL_DMA_IRQHandler+0x1da>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043aa:	223f      	movs	r2, #63	@ 0x3f
 80043ac:	409a      	lsls	r2, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d07e      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
        }
        return;
 80043d2:	e079      	b.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01d      	beq.n	800441e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d031      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e02c      	b.n	800445c <HAL_DMA_IRQHandler+0x2a0>
 8004402:	bf00      	nop
 8004404:	2000002c 	.word	0x2000002c
 8004408:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d023      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e01e      	b.n	800445c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0210 	bic.w	r2, r2, #16
 800443a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	2b00      	cmp	r3, #0
 8004462:	d032      	beq.n	80044ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d022      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2205      	movs	r2, #5
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3301      	adds	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	429a      	cmp	r2, r3
 8004492:	d307      	bcc.n	80044a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f2      	bne.n	8004488 <HAL_DMA_IRQHandler+0x2cc>
 80044a2:	e000      	b.n	80044a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
 80044c6:	e000      	b.n	80044ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80044c8:	bf00      	nop
    }
  }
}
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b40      	cmp	r3, #64	@ 0x40
 80044fc:	d108      	bne.n	8004510 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800450e:	e007      	b.n	8004520 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	3b10      	subs	r3, #16
 800453c:	4a14      	ldr	r2, [pc, #80]	@ (8004590 <DMA_CalcBaseAndBitshift+0x64>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004546:	4a13      	ldr	r2, [pc, #76]	@ (8004594 <DMA_CalcBaseAndBitshift+0x68>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d909      	bls.n	800456e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	659a      	str	r2, [r3, #88]	@ 0x58
 800456c:	e007      	b.n	800457e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	aaaaaaab 	.word	0xaaaaaaab
 8004594:	08012518 	.word	0x08012518

08004598 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11f      	bne.n	80045f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d856      	bhi.n	8004666 <DMA_CheckFifoParam+0xce>
 80045b8:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <DMA_CheckFifoParam+0x28>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e3 	.word	0x080045e3
 80045c8:	080045d1 	.word	0x080045d1
 80045cc:	08004667 	.word	0x08004667
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d046      	beq.n	800466a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e0:	e043      	b.n	800466a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045ea:	d140      	bne.n	800466e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f0:	e03d      	b.n	800466e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fa:	d121      	bne.n	8004640 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d837      	bhi.n	8004672 <DMA_CheckFifoParam+0xda>
 8004602:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <DMA_CheckFifoParam+0x70>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004619 	.word	0x08004619
 800460c:	0800461f 	.word	0x0800461f
 8004610:	08004619 	.word	0x08004619
 8004614:	08004631 	.word	0x08004631
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e030      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d025      	beq.n	8004676 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462e:	e022      	b.n	8004676 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004638:	d11f      	bne.n	800467a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800463e:	e01c      	b.n	800467a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d903      	bls.n	800464e <DMA_CheckFifoParam+0xb6>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d003      	beq.n	8004654 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800464c:	e018      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      break;
 8004652:	e015      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      break;
 8004664:	e00b      	b.n	800467e <DMA_CheckFifoParam+0xe6>
      break;
 8004666:	bf00      	nop
 8004668:	e00a      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800466a:	bf00      	nop
 800466c:	e008      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800466e:	bf00      	nop
 8004670:	e006      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 8004672:	bf00      	nop
 8004674:	e004      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;   
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800467e:	bf00      	nop
    }
  } 
  
  return status; 
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	@ 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	e16b      	b.n	8004984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046ac:	2201      	movs	r2, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	f040 815a 	bne.w	800497e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d005      	beq.n	80046e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d130      	bne.n	8004744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004718:	2201      	movs	r2, #1
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 0201 	and.w	r2, r3, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d017      	beq.n	8004780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d123      	bne.n	80047d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	08da      	lsrs	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3208      	adds	r2, #8
 8004794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	220f      	movs	r2, #15
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	69b9      	ldr	r1, [r7, #24]
 80047d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2203      	movs	r2, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80b4 	beq.w	800497e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	4b60      	ldr	r3, [pc, #384]	@ (800499c <HAL_GPIO_Init+0x30c>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	4a5f      	ldr	r2, [pc, #380]	@ (800499c <HAL_GPIO_Init+0x30c>)
 8004820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004824:	6453      	str	r3, [r2, #68]	@ 0x44
 8004826:	4b5d      	ldr	r3, [pc, #372]	@ (800499c <HAL_GPIO_Init+0x30c>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004832:	4a5b      	ldr	r2, [pc, #364]	@ (80049a0 <HAL_GPIO_Init+0x310>)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	3302      	adds	r3, #2
 800483a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	220f      	movs	r2, #15
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a52      	ldr	r2, [pc, #328]	@ (80049a4 <HAL_GPIO_Init+0x314>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02b      	beq.n	80048b6 <HAL_GPIO_Init+0x226>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a51      	ldr	r2, [pc, #324]	@ (80049a8 <HAL_GPIO_Init+0x318>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d025      	beq.n	80048b2 <HAL_GPIO_Init+0x222>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a50      	ldr	r2, [pc, #320]	@ (80049ac <HAL_GPIO_Init+0x31c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01f      	beq.n	80048ae <HAL_GPIO_Init+0x21e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a4f      	ldr	r2, [pc, #316]	@ (80049b0 <HAL_GPIO_Init+0x320>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d019      	beq.n	80048aa <HAL_GPIO_Init+0x21a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a4e      	ldr	r2, [pc, #312]	@ (80049b4 <HAL_GPIO_Init+0x324>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x216>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a4d      	ldr	r2, [pc, #308]	@ (80049b8 <HAL_GPIO_Init+0x328>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00d      	beq.n	80048a2 <HAL_GPIO_Init+0x212>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a4c      	ldr	r2, [pc, #304]	@ (80049bc <HAL_GPIO_Init+0x32c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <HAL_GPIO_Init+0x20e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a4b      	ldr	r2, [pc, #300]	@ (80049c0 <HAL_GPIO_Init+0x330>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_GPIO_Init+0x20a>
 8004896:	2307      	movs	r3, #7
 8004898:	e00e      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 800489a:	2308      	movs	r3, #8
 800489c:	e00c      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 800489e:	2306      	movs	r3, #6
 80048a0:	e00a      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048a2:	2305      	movs	r3, #5
 80048a4:	e008      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048a6:	2304      	movs	r3, #4
 80048a8:	e006      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048aa:	2303      	movs	r3, #3
 80048ac:	e004      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e002      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048b6:	2300      	movs	r3, #0
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	f002 0203 	and.w	r2, r2, #3
 80048be:	0092      	lsls	r2, r2, #2
 80048c0:	4093      	lsls	r3, r2
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c8:	4935      	ldr	r1, [pc, #212]	@ (80049a0 <HAL_GPIO_Init+0x310>)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	089b      	lsrs	r3, r3, #2
 80048ce:	3302      	adds	r3, #2
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048d6:	4b3b      	ldr	r3, [pc, #236]	@ (80049c4 <HAL_GPIO_Init+0x334>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048fa:	4a32      	ldr	r2, [pc, #200]	@ (80049c4 <HAL_GPIO_Init+0x334>)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004900:	4b30      	ldr	r3, [pc, #192]	@ (80049c4 <HAL_GPIO_Init+0x334>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004924:	4a27      	ldr	r2, [pc, #156]	@ (80049c4 <HAL_GPIO_Init+0x334>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800492a:	4b26      	ldr	r3, [pc, #152]	@ (80049c4 <HAL_GPIO_Init+0x334>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800494e:	4a1d      	ldr	r2, [pc, #116]	@ (80049c4 <HAL_GPIO_Init+0x334>)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004954:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <HAL_GPIO_Init+0x334>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004978:	4a12      	ldr	r2, [pc, #72]	@ (80049c4 <HAL_GPIO_Init+0x334>)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b0f      	cmp	r3, #15
 8004988:	f67f ae90 	bls.w	80046ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3724      	adds	r7, #36	@ 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800
 80049a0:	40013800 	.word	0x40013800
 80049a4:	40020000 	.word	0x40020000
 80049a8:	40020400 	.word	0x40020400
 80049ac:	40020800 	.word	0x40020800
 80049b0:	40020c00 	.word	0x40020c00
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40021400 	.word	0x40021400
 80049bc:	40021800 	.word	0x40021800
 80049c0:	40021c00 	.word	0x40021c00
 80049c4:	40013c00 	.word	0x40013c00

080049c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
 80049d4:	4613      	mov	r3, r2
 80049d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d8:	787b      	ldrb	r3, [r7, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049e4:	e003      	b.n	80049ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	041a      	lsls	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	619a      	str	r2, [r3, #24]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a0c:	887a      	ldrh	r2, [r7, #2]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4013      	ands	r3, r2
 8004a12:	041a      	lsls	r2, r3, #16
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	43d9      	mvns	r1, r3
 8004a18:	887b      	ldrh	r3, [r7, #2]
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	619a      	str	r2, [r3, #24]
}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a3a:	4b08      	ldr	r3, [pc, #32]	@ (8004a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a46:	4a05      	ldr	r2, [pc, #20]	@ (8004a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fd fefa 	bl	8002848 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40013c00 	.word	0x40013c00

08004a60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e101      	b.n	8004c76 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f008 f889 	bl	800cba4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2203      	movs	r2, #3
 8004a96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aa0:	d102      	bne.n	8004aa8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f004 fc70 	bl	8009392 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	7c1a      	ldrb	r2, [r3, #16]
 8004aba:	f88d 2000 	strb.w	r2, [sp]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac2:	f004 fb4f 	bl	8009164 <USB_CoreInit>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0ce      	b.n	8004c76 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f004 fc68 	bl	80093b4 <USB_SetCurrentMode>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0bf      	b.n	8004c76 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	e04a      	b.n	8004b92 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004afc:	7bfa      	ldrb	r2, [r7, #15]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	3315      	adds	r3, #21
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b10:	7bfa      	ldrb	r2, [r7, #15]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	3314      	adds	r3, #20
 8004b20:	7bfa      	ldrb	r2, [r7, #15]
 8004b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b24:	7bfa      	ldrb	r2, [r7, #15]
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	b298      	uxth	r0, r3
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	332e      	adds	r3, #46	@ 0x2e
 8004b38:	4602      	mov	r2, r0
 8004b3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b3c:	7bfa      	ldrb	r2, [r7, #15]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b50:	7bfa      	ldrb	r2, [r7, #15]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	331c      	adds	r3, #28
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b64:	7bfa      	ldrb	r2, [r7, #15]
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	3320      	adds	r3, #32
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b78:	7bfa      	ldrb	r2, [r7, #15]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	3324      	adds	r3, #36	@ 0x24
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	791b      	ldrb	r3, [r3, #4]
 8004b96:	7bfa      	ldrb	r2, [r7, #15]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d3af      	bcc.n	8004afc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	e044      	b.n	8004c2c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bb8:	7bfa      	ldrb	r2, [r7, #15]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004bca:	7bfa      	ldrb	r2, [r7, #15]
 8004bcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	791b      	ldrb	r3, [r3, #4]
 8004c30:	7bfa      	ldrb	r2, [r7, #15]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d3b5      	bcc.n	8004ba2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	7c1a      	ldrb	r2, [r3, #16]
 8004c3e:	f88d 2000 	strb.w	r2, [sp]
 8004c42:	3304      	adds	r3, #4
 8004c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c46:	f004 fc01 	bl	800944c <USB_DevInit>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e00c      	b.n	8004c76 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f005 fc4b 	bl	800a50a <USB_DevDisconnect>

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_PCD_Start+0x1c>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e022      	b.n	8004ce0 <HAL_PCD_Start+0x62>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 fb52 	bl	8009370 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f005 fbf9 	bl	800a4c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b08d      	sub	sp, #52	@ 0x34
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f005 fcb7 	bl	800a672 <USB_GetMode>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 848c 	bne.w	8005624 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f005 fc1b 	bl	800a54c <USB_ReadInterrupts>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8482 	beq.w	8005622 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f005 fc08 	bl	800a54c <USB_ReadInterrupts>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d107      	bne.n	8004d56 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f002 0202 	and.w	r2, r2, #2
 8004d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f005 fbf6 	bl	800a54c <USB_ReadInterrupts>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d161      	bne.n	8004e2e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699a      	ldr	r2, [r3, #24]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0210 	bic.w	r2, r2, #16
 8004d78:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	3304      	adds	r3, #4
 8004d98:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	0c5b      	lsrs	r3, r3, #17
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d124      	bne.n	8004df0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d035      	beq.n	8004e1e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6a38      	ldr	r0, [r7, #32]
 8004dc6:	f005 fa2d 	bl	800a224 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dd6:	441a      	add	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	091b      	lsrs	r3, r3, #4
 8004de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004de8:	441a      	add	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	615a      	str	r2, [r3, #20]
 8004dee:	e016      	b.n	8004e1e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	0c5b      	lsrs	r3, r3, #17
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2b06      	cmp	r3, #6
 8004dfa:	d110      	bne.n	8004e1e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e02:	2208      	movs	r2, #8
 8004e04:	4619      	mov	r1, r3
 8004e06:	6a38      	ldr	r0, [r7, #32]
 8004e08:	f005 fa0c 	bl	800a224 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e18:	441a      	add	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0210 	orr.w	r2, r2, #16
 8004e2c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f005 fb8a 	bl	800a54c <USB_ReadInterrupts>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e3e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e42:	f040 80a7 	bne.w	8004f94 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f005 fb8f 	bl	800a572 <USB_ReadDevAllOutEpInterrupt>
 8004e54:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e56:	e099      	b.n	8004f8c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 808e 	beq.w	8004f80 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f005 fbb3 	bl	800a5da <USB_ReadDevOutEPInterrupt>
 8004e74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00c      	beq.n	8004e9a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	2301      	movs	r3, #1
 8004e90:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fea3 	bl	8005be0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004eb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 ff79 	bl	8005db0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d030      	beq.n	8004f46 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eec:	2b80      	cmp	r3, #128	@ 0x80
 8004eee:	d109      	bne.n	8004f04 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f02:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	3304      	adds	r3, #4
 8004f18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	78db      	ldrb	r3, [r3, #3]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d108      	bne.n	8004f34 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f007 ff3e 	bl	800cdb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f40:	461a      	mov	r2, r3
 8004f42:	2302      	movs	r3, #2
 8004f44:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2320      	movs	r3, #32
 8004f60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f7e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	3301      	adds	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f47f af62 	bne.w	8004e58 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f005 fad7 	bl	800a54c <USB_ReadInterrupts>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fa4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fa8:	f040 80db 	bne.w	8005162 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f005 faf8 	bl	800a5a6 <USB_ReadDevAllInEpInterrupt>
 8004fb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004fbc:	e0cd      	b.n	800515a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80c2 	beq.w	800514e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f005 fb1e 	bl	800a616 <USB_ReadDevInEPInterrupt>
 8004fda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d057      	beq.n	8005096 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	2201      	movs	r2, #1
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005006:	4013      	ands	r3, r2
 8005008:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005016:	461a      	mov	r2, r3
 8005018:	2301      	movs	r3, #1
 800501a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	799b      	ldrb	r3, [r3, #6]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d132      	bne.n	800508a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	3320      	adds	r3, #32
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4403      	add	r3, r0
 8005044:	331c      	adds	r3, #28
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4419      	add	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504e:	4613      	mov	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4403      	add	r3, r0
 8005058:	3320      	adds	r3, #32
 800505a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d113      	bne.n	800508a <HAL_PCD_IRQHandler+0x3a2>
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	3324      	adds	r3, #36	@ 0x24
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d108      	bne.n	800508a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005082:	461a      	mov	r2, r3
 8005084:	2101      	movs	r1, #1
 8005086:	f005 fb25 	bl	800a6d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	b2db      	uxtb	r3, r3
 800508e:	4619      	mov	r1, r3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f007 fe08 	bl	800cca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ac:	461a      	mov	r2, r3
 80050ae:	2308      	movs	r3, #8
 80050b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c8:	461a      	mov	r2, r3
 80050ca:	2310      	movs	r3, #16
 80050cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e4:	461a      	mov	r2, r3
 80050e6:	2340      	movs	r3, #64	@ 0x40
 80050e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d023      	beq.n	800513c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80050f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050f6:	6a38      	ldr	r0, [r7, #32]
 80050f8:	f004 fb0c 	bl	8009714 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80050fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fe:	4613      	mov	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	3310      	adds	r3, #16
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	3304      	adds	r3, #4
 800510e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	78db      	ldrb	r3, [r3, #3]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d108      	bne.n	800512a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2200      	movs	r2, #0
 800511c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	b2db      	uxtb	r3, r3
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f007 fe55 	bl	800cdd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005136:	461a      	mov	r2, r3
 8005138:	2302      	movs	r3, #2
 800513a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005146:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fcbd 	bl	8005ac8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	3301      	adds	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f af2e 	bne.w	8004fbe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f005 f9f0 	bl	800a54c <USB_ReadInterrupts>
 800516c:	4603      	mov	r3, r0
 800516e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005172:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005176:	d122      	bne.n	80051be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005186:	f023 0301 	bic.w	r3, r3, #1
 800518a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005192:	2b01      	cmp	r3, #1
 8005194:	d108      	bne.n	80051a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800519e:	2100      	movs	r1, #0
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fea3 	bl	8005eec <HAL_PCDEx_LPM_Callback>
 80051a6:	e002      	b.n	80051ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f007 fdf3 	bl	800cd94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695a      	ldr	r2, [r3, #20]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80051bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f005 f9c2 	bl	800a54c <USB_ReadInterrupts>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d2:	d112      	bne.n	80051fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d102      	bne.n	80051ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f007 fdaf 	bl	800cd48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80051f8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f005 f9a4 	bl	800a54c <USB_ReadInterrupts>
 8005204:	4603      	mov	r3, r0
 8005206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520e:	f040 80b7 	bne.w	8005380 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2110      	movs	r1, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f004 fa71 	bl	8009714 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005232:	2300      	movs	r3, #0
 8005234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005236:	e046      	b.n	80052c6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005244:	461a      	mov	r2, r3
 8005246:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800524a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005266:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800526a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005278:	461a      	mov	r2, r3
 800527a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800527e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800529a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800529e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c2:	3301      	adds	r3, #1
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	791b      	ldrb	r3, [r3, #4]
 80052ca:	461a      	mov	r2, r3
 80052cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d3b2      	bcc.n	8005238 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80052e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7bdb      	ldrb	r3, [r3, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052fe:	f043 030b 	orr.w	r3, r3, #11
 8005302:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005314:	f043 030b 	orr.w	r3, r3, #11
 8005318:	6453      	str	r3, [r2, #68]	@ 0x44
 800531a:	e015      	b.n	8005348 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800532a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800532e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005332:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005342:	f043 030b 	orr.w	r3, r3, #11
 8005346:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005356:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800535a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800536a:	461a      	mov	r2, r3
 800536c:	f005 f9b2 	bl	800a6d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800537e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f005 f8e1 	bl	800a54c <USB_ReadInterrupts>
 800538a:	4603      	mov	r3, r0
 800538c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005394:	d123      	bne.n	80053de <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f005 f977 	bl	800a68e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f004 fa2e 	bl	8009806 <USB_GetDevSpeed>
 80053aa:	4603      	mov	r3, r0
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681c      	ldr	r4, [r3, #0]
 80053b6:	f001 fa07 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 80053ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053c0:	461a      	mov	r2, r3
 80053c2:	4620      	mov	r0, r4
 80053c4:	f003 ff32 	bl	800922c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f007 fc94 	bl	800ccf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80053dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f005 f8b2 	bl	800a54c <USB_ReadInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d10a      	bne.n	8005408 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f007 fc71 	bl	800ccda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f002 0208 	and.w	r2, r2, #8
 8005406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f005 f89d 	bl	800a54c <USB_ReadInterrupts>
 8005412:	4603      	mov	r3, r0
 8005414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005418:	2b80      	cmp	r3, #128	@ 0x80
 800541a:	d123      	bne.n	8005464 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005428:	2301      	movs	r3, #1
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
 800542c:	e014      	b.n	8005458 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d105      	bne.n	8005452 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	b2db      	uxtb	r3, r3
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fb0a 	bl	8005a66 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	3301      	adds	r3, #1
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	791b      	ldrb	r3, [r3, #4]
 800545c:	461a      	mov	r2, r3
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	4293      	cmp	r3, r2
 8005462:	d3e4      	bcc.n	800542e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f005 f86f 	bl	800a54c <USB_ReadInterrupts>
 800546e:	4603      	mov	r3, r0
 8005470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005478:	d13c      	bne.n	80054f4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800547a:	2301      	movs	r3, #1
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
 800547e:	e02b      	b.n	80054d8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	3318      	adds	r3, #24
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d115      	bne.n	80054d2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80054a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	da12      	bge.n	80054d2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	3317      	adds	r3, #23
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 faca 	bl	8005a66 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	3301      	adds	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	791b      	ldrb	r3, [r3, #4]
 80054dc:	461a      	mov	r2, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d3cd      	bcc.n	8005480 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80054f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f005 f827 	bl	800a54c <USB_ReadInterrupts>
 80054fe:	4603      	mov	r3, r0
 8005500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005504:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005508:	d156      	bne.n	80055b8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800550a:	2301      	movs	r3, #1
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
 800550e:	e045      	b.n	800559c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d12e      	bne.n	8005596 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005538:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800553a:	2b00      	cmp	r3, #0
 800553c:	da2b      	bge.n	8005596 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800554a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800554e:	429a      	cmp	r2, r3
 8005550:	d121      	bne.n	8005596 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005564:	2201      	movs	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800558e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005592:	6053      	str	r3, [r2, #4]
            break;
 8005594:	e008      	b.n	80055a8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	3301      	adds	r3, #1
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	791b      	ldrb	r3, [r3, #4]
 80055a0:	461a      	mov	r2, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d3b3      	bcc.n	8005510 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80055b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f004 ffc5 	bl	800a54c <USB_ReadInterrupts>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055cc:	d10a      	bne.n	80055e4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f007 fc12 	bl	800cdf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80055e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f004 ffaf 	bl	800a54c <USB_ReadInterrupts>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d115      	bne.n	8005624 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f007 fc02 	bl	800ce14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6859      	ldr	r1, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	e000      	b.n	8005624 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005622:	bf00      	nop
    }
  }
}
 8005624:	3734      	adds	r7, #52	@ 0x34
 8005626:	46bd      	mov	sp, r7
 8005628:	bd90      	pop	{r4, r7, pc}

0800562a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_PCD_SetAddress+0x1a>
 8005640:	2302      	movs	r3, #2
 8005642:	e012      	b.n	800566a <HAL_PCD_SetAddress+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	78fa      	ldrb	r2, [r7, #3]
 8005658:	4611      	mov	r1, r2
 800565a:	4618      	mov	r0, r3
 800565c:	f004 ff0e 	bl	800a47c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	4608      	mov	r0, r1
 800567c:	4611      	mov	r1, r2
 800567e:	461a      	mov	r2, r3
 8005680:	4603      	mov	r3, r0
 8005682:	70fb      	strb	r3, [r7, #3]
 8005684:	460b      	mov	r3, r1
 8005686:	803b      	strh	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005694:	2b00      	cmp	r3, #0
 8005696:	da0f      	bge.n	80056b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 020f 	and.w	r2, r3, #15
 800569e:	4613      	mov	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	3310      	adds	r3, #16
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4413      	add	r3, r2
 80056ac:	3304      	adds	r3, #4
 80056ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	705a      	strb	r2, [r3, #1]
 80056b6:	e00f      	b.n	80056d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 020f 	and.w	r2, r3, #15
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	3304      	adds	r3, #4
 80056d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80056e4:	883b      	ldrh	r3, [r7, #0]
 80056e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	78ba      	ldrb	r2, [r7, #2]
 80056f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005706:	78bb      	ldrb	r3, [r7, #2]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d102      	bne.n	8005712 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_PCD_EP_Open+0xae>
 800571c:	2302      	movs	r3, #2
 800571e:	e00e      	b.n	800573e <HAL_PCD_EP_Open+0xcc>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68f9      	ldr	r1, [r7, #12]
 800572e:	4618      	mov	r0, r3
 8005730:	f004 f88e 	bl	8009850 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800573c:	7afb      	ldrb	r3, [r7, #11]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005756:	2b00      	cmp	r3, #0
 8005758:	da0f      	bge.n	800577a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	3310      	adds	r3, #16
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	3304      	adds	r3, #4
 8005770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	705a      	strb	r2, [r3, #1]
 8005778:	e00f      	b.n	800579a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 020f 	and.w	r2, r3, #15
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4413      	add	r3, r2
 8005790:	3304      	adds	r3, #4
 8005792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_PCD_EP_Close+0x6e>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e00e      	b.n	80057d2 <HAL_PCD_EP_Close+0x8c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68f9      	ldr	r1, [r7, #12]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f004 f8cc 	bl	8009960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	460b      	mov	r3, r1
 80057e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	3304      	adds	r3, #4
 8005802:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2200      	movs	r2, #0
 8005814:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800581c:	7afb      	ldrb	r3, [r7, #11]
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	b2da      	uxtb	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	799b      	ldrb	r3, [r3, #6]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d102      	bne.n	8005836 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	799b      	ldrb	r3, [r3, #6]
 800583e:	461a      	mov	r2, r3
 8005840:	6979      	ldr	r1, [r7, #20]
 8005842:	f004 f969 	bl	8009b18 <USB_EPStartXfer>

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f003 020f 	and.w	r2, r3, #15
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005872:	681b      	ldr	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	460b      	mov	r3, r1
 800588e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	f003 020f 	and.w	r2, r3, #15
 8005896:	4613      	mov	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	3310      	adds	r3, #16
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	3304      	adds	r3, #4
 80058a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2200      	movs	r2, #0
 80058b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2201      	movs	r2, #1
 80058be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058c0:	7afb      	ldrb	r3, [r7, #11]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	799b      	ldrb	r3, [r3, #6]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	799b      	ldrb	r3, [r3, #6]
 80058e2:	461a      	mov	r2, r3
 80058e4:	6979      	ldr	r1, [r7, #20]
 80058e6:	f004 f917 	bl	8009b18 <USB_EPStartXfer>

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	7912      	ldrb	r2, [r2, #4]
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e04f      	b.n	80059b2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005916:	2b00      	cmp	r3, #0
 8005918:	da0f      	bge.n	800593a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	3310      	adds	r3, #16
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	705a      	strb	r2, [r3, #1]
 8005938:	e00d      	b.n	8005956 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	4613      	mov	r3, r2
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4413      	add	r3, r2
 800594c:	3304      	adds	r3, #4
 800594e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_PCD_EP_SetStall+0x82>
 8005972:	2302      	movs	r3, #2
 8005974:	e01d      	b.n	80059b2 <HAL_PCD_EP_SetStall+0xbe>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	4618      	mov	r0, r3
 8005986:	f004 fca5 	bl	800a2d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7999      	ldrb	r1, [r3, #6]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059a2:	461a      	mov	r2, r3
 80059a4:	f004 fe96 	bl	800a6d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	7912      	ldrb	r2, [r2, #4]
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e042      	b.n	8005a5e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	da0f      	bge.n	8005a00 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	f003 020f 	and.w	r2, r3, #15
 80059e6:	4613      	mov	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	3310      	adds	r3, #16
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	3304      	adds	r3, #4
 80059f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	705a      	strb	r2, [r3, #1]
 80059fe:	e00f      	b.n	8005a20 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	f003 020f 	and.w	r2, r3, #15
 8005a06:	4613      	mov	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4413      	add	r3, r2
 8005a16:	3304      	adds	r3, #4
 8005a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_PCD_EP_ClrStall+0x86>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e00e      	b.n	8005a5e <HAL_PCD_EP_ClrStall+0xa4>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f004 fcae 	bl	800a3b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da0c      	bge.n	8005a94 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	4613      	mov	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	3310      	adds	r3, #16
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3304      	adds	r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	e00c      	b.n	8005aae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	f003 020f 	and.w	r2, r3, #15
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3304      	adds	r3, #4
 8005aac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f004 facd 	bl	800a054 <USB_EPStopXfer>
 8005aba:	4603      	mov	r3, r0
 8005abc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005abe:	7afb      	ldrb	r3, [r7, #11]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	@ 0x28
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	3310      	adds	r3, #16
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	3304      	adds	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d901      	bls.n	8005b00 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e06b      	b.n	8005bd8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d902      	bls.n	8005b1c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3303      	adds	r3, #3
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b24:	e02a      	b.n	8005b7c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d902      	bls.n	8005b42 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	3303      	adds	r3, #3
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68d9      	ldr	r1, [r3, #12]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f004 fb22 	bl	800a1a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	441a      	add	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	695a      	ldr	r2, [r3, #20]
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	441a      	add	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d809      	bhi.n	8005ba6 <PCD_WriteEmptyTxFifo+0xde>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d203      	bcs.n	8005ba6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1bf      	bne.n	8005b26 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d811      	bhi.n	8005bd6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2201      	movs	r2, #1
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	6939      	ldr	r1, [r7, #16]
 8005bce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	333c      	adds	r3, #60	@ 0x3c
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	799b      	ldrb	r3, [r3, #6]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d17b      	bne.n	8005d0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d015      	beq.n	8005c4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4a61      	ldr	r2, [pc, #388]	@ (8005da8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	f240 80b9 	bls.w	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80b3 	beq.w	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c42:	461a      	mov	r2, r3
 8005c44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c48:	6093      	str	r3, [r2, #8]
 8005c4a:	e0a7      	b.n	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	2320      	movs	r3, #32
 8005c66:	6093      	str	r3, [r2, #8]
 8005c68:	e098      	b.n	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8093 	bne.w	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4a4b      	ldr	r2, [pc, #300]	@ (8005da8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d90f      	bls.n	8005c9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c94:	461a      	mov	r2, r3
 8005c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c9a:	6093      	str	r3, [r2, #8]
 8005c9c:	e07e      	b.n	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1a      	ldr	r2, [r3, #32]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	0159      	lsls	r1, r3, #5
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	440b      	add	r3, r1
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d114      	bne.n	8005d00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2101      	movs	r1, #1
 8005cec:	f004 fcf2 	bl	800a6d4 <USB_EP0_OutStart>
 8005cf0:	e006      	b.n	8005d00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	441a      	add	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f006 ffb2 	bl	800cc70 <HAL_PCD_DataOutStageCallback>
 8005d0c:	e046      	b.n	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4a26      	ldr	r2, [pc, #152]	@ (8005dac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d124      	bne.n	8005d60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d32:	6093      	str	r3, [r2, #8]
 8005d34:	e032      	b.n	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2320      	movs	r3, #32
 8005d50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f006 ff89 	bl	800cc70 <HAL_PCD_DataOutStageCallback>
 8005d5e:	e01d      	b.n	8005d9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d114      	bne.n	8005d90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d108      	bne.n	8005d90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f004 fca2 	bl	800a6d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f006 ff6a 	bl	800cc70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	4f54300a 	.word	0x4f54300a
 8005dac:	4f54310a 	.word	0x4f54310a

08005db0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	333c      	adds	r3, #60	@ 0x3c
 8005dc8:	3304      	adds	r3, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a15      	ldr	r2, [pc, #84]	@ (8005e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d90e      	bls.n	8005e04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d009      	beq.n	8005e04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f006 ff21 	bl	800cc4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d90c      	bls.n	8005e2c <PCD_EP_OutSetupPacket_int+0x7c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	799b      	ldrb	r3, [r3, #6]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d108      	bne.n	8005e2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e24:	461a      	mov	r2, r3
 8005e26:	2101      	movs	r1, #1
 8005e28:	f004 fc54 	bl	800a6d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	4f54300a 	.word	0x4f54300a

08005e3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e5a:	883b      	ldrh	r3, [r7, #0]
 8005e5c:	0419      	lsls	r1, r3, #16
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e68:	e028      	b.n	8005ebc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	4413      	add	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	73fb      	strb	r3, [r7, #15]
 8005e7c:	e00d      	b.n	8005e9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	3340      	adds	r3, #64	@ 0x40
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4413      	add	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	3301      	adds	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	7bfa      	ldrb	r2, [r7, #15]
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d3ec      	bcc.n	8005e7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ea4:	883b      	ldrh	r3, [r7, #0]
 8005ea6:	0418      	lsls	r0, r3, #16
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6819      	ldr	r1, [r3, #0]
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	4302      	orrs	r2, r0
 8005eb4:	3340      	adds	r3, #64	@ 0x40
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	887a      	ldrh	r2, [r7, #2]
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e267      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d075      	beq.n	800600e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f22:	4b88      	ldr	r3, [pc, #544]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d00c      	beq.n	8005f48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2e:	4b85      	ldr	r3, [pc, #532]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d112      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f3a:	4b82      	ldr	r3, [pc, #520]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f48:	4b7e      	ldr	r3, [pc, #504]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05b      	beq.n	800600c <HAL_RCC_OscConfig+0x108>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d157      	bne.n	800600c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e242      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f68:	d106      	bne.n	8005f78 <HAL_RCC_OscConfig+0x74>
 8005f6a:	4b76      	ldr	r3, [pc, #472]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a75      	ldr	r2, [pc, #468]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e01d      	b.n	8005fb4 <HAL_RCC_OscConfig+0xb0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x98>
 8005f82:	4b70      	ldr	r3, [pc, #448]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a6f      	ldr	r2, [pc, #444]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a6c      	ldr	r2, [pc, #432]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0xb0>
 8005f9c:	4b69      	ldr	r3, [pc, #420]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a68      	ldr	r2, [pc, #416]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4b66      	ldr	r3, [pc, #408]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a65      	ldr	r2, [pc, #404]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fd fe24 	bl	8003c08 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc4:	f7fd fe20 	bl	8003c08 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b64      	cmp	r3, #100	@ 0x64
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e207      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0xc0>
 8005fe2:	e014      	b.n	800600e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe4:	f7fd fe10 	bl	8003c08 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fec:	f7fd fe0c 	bl	8003c08 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b64      	cmp	r3, #100	@ 0x64
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e1f3      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffe:	4b51      	ldr	r3, [pc, #324]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0xe8>
 800600a:	e000      	b.n	800600e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d063      	beq.n	80060e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800601a:	4b4a      	ldr	r3, [pc, #296]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006026:	4b47      	ldr	r3, [pc, #284]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800602e:	2b08      	cmp	r3, #8
 8006030:	d11c      	bne.n	800606c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006032:	4b44      	ldr	r3, [pc, #272]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603e:	4b41      	ldr	r3, [pc, #260]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_RCC_OscConfig+0x152>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d001      	beq.n	8006056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e1c7      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006056:	4b3b      	ldr	r3, [pc, #236]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4937      	ldr	r1, [pc, #220]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606a:	e03a      	b.n	80060e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006074:	4b34      	ldr	r3, [pc, #208]	@ (8006148 <HAL_RCC_OscConfig+0x244>)
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fd fdc5 	bl	8003c08 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006082:	f7fd fdc1 	bl	8003c08 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e1a8      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006094:	4b2b      	ldr	r3, [pc, #172]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a0:	4b28      	ldr	r3, [pc, #160]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4925      	ldr	r1, [pc, #148]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	600b      	str	r3, [r1, #0]
 80060b4:	e015      	b.n	80060e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b6:	4b24      	ldr	r3, [pc, #144]	@ (8006148 <HAL_RCC_OscConfig+0x244>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fd fda4 	bl	8003c08 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c4:	f7fd fda0 	bl	8003c08 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e187      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d036      	beq.n	800615c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f6:	4b15      	ldr	r3, [pc, #84]	@ (800614c <HAL_RCC_OscConfig+0x248>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fd fd84 	bl	8003c08 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006104:	f7fd fd80 	bl	8003c08 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e167      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006116:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <HAL_RCC_OscConfig+0x240>)
 8006118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x200>
 8006122:	e01b      	b.n	800615c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006124:	4b09      	ldr	r3, [pc, #36]	@ (800614c <HAL_RCC_OscConfig+0x248>)
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612a:	f7fd fd6d 	bl	8003c08 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	e00e      	b.n	8006150 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006132:	f7fd fd69 	bl	8003c08 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d907      	bls.n	8006150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e150      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
 8006144:	40023800 	.word	0x40023800
 8006148:	42470000 	.word	0x42470000
 800614c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006150:	4b88      	ldr	r3, [pc, #544]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ea      	bne.n	8006132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8097 	beq.w	8006298 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800616a:	2300      	movs	r3, #0
 800616c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800616e:	4b81      	ldr	r3, [pc, #516]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10f      	bne.n	800619a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	4b7d      	ldr	r3, [pc, #500]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006182:	4a7c      	ldr	r2, [pc, #496]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006188:	6413      	str	r3, [r2, #64]	@ 0x40
 800618a:	4b7a      	ldr	r3, [pc, #488]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619a:	4b77      	ldr	r3, [pc, #476]	@ (8006378 <HAL_RCC_OscConfig+0x474>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d118      	bne.n	80061d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a6:	4b74      	ldr	r3, [pc, #464]	@ (8006378 <HAL_RCC_OscConfig+0x474>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a73      	ldr	r2, [pc, #460]	@ (8006378 <HAL_RCC_OscConfig+0x474>)
 80061ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061b2:	f7fd fd29 	bl	8003c08 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ba:	f7fd fd25 	bl	8003c08 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e10c      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061cc:	4b6a      	ldr	r3, [pc, #424]	@ (8006378 <HAL_RCC_OscConfig+0x474>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d106      	bne.n	80061ee <HAL_RCC_OscConfig+0x2ea>
 80061e0:	4b64      	ldr	r3, [pc, #400]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e4:	4a63      	ldr	r2, [pc, #396]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ec:	e01c      	b.n	8006228 <HAL_RCC_OscConfig+0x324>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d10c      	bne.n	8006210 <HAL_RCC_OscConfig+0x30c>
 80061f6:	4b5f      	ldr	r3, [pc, #380]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fa:	4a5e      	ldr	r2, [pc, #376]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	6713      	str	r3, [r2, #112]	@ 0x70
 8006202:	4b5c      	ldr	r3, [pc, #368]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006206:	4a5b      	ldr	r2, [pc, #364]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	6713      	str	r3, [r2, #112]	@ 0x70
 800620e:	e00b      	b.n	8006228 <HAL_RCC_OscConfig+0x324>
 8006210:	4b58      	ldr	r3, [pc, #352]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006214:	4a57      	ldr	r2, [pc, #348]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	6713      	str	r3, [r2, #112]	@ 0x70
 800621c:	4b55      	ldr	r3, [pc, #340]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006220:	4a54      	ldr	r2, [pc, #336]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006222:	f023 0304 	bic.w	r3, r3, #4
 8006226:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006230:	f7fd fcea 	bl	8003c08 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006236:	e00a      	b.n	800624e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006238:	f7fd fce6 	bl	8003c08 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e0cb      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624e:	4b49      	ldr	r3, [pc, #292]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ee      	beq.n	8006238 <HAL_RCC_OscConfig+0x334>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800625c:	f7fd fcd4 	bl	8003c08 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006262:	e00a      	b.n	800627a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006264:	f7fd fcd0 	bl	8003c08 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e0b5      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800627a:	4b3e      	ldr	r3, [pc, #248]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ee      	bne.n	8006264 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d105      	bne.n	8006298 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628c:	4b39      	ldr	r3, [pc, #228]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	4a38      	ldr	r2, [pc, #224]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006296:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80a1 	beq.w	80063e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a2:	4b34      	ldr	r3, [pc, #208]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d05c      	beq.n	8006368 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d141      	bne.n	800633a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b6:	4b31      	ldr	r3, [pc, #196]	@ (800637c <HAL_RCC_OscConfig+0x478>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fd fca4 	bl	8003c08 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c4:	f7fd fca0 	bl	8003c08 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e087      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d6:	4b27      	ldr	r3, [pc, #156]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	019b      	lsls	r3, r3, #6
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	3b01      	subs	r3, #1
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	061b      	lsls	r3, r3, #24
 8006306:	491b      	ldr	r1, [pc, #108]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 8006308:	4313      	orrs	r3, r2
 800630a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800630c:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <HAL_RCC_OscConfig+0x478>)
 800630e:	2201      	movs	r2, #1
 8006310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006312:	f7fd fc79 	bl	8003c08 <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800631a:	f7fd fc75 	bl	8003c08 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e05c      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800632c:	4b11      	ldr	r3, [pc, #68]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <HAL_RCC_OscConfig+0x416>
 8006338:	e054      	b.n	80063e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633a:	4b10      	ldr	r3, [pc, #64]	@ (800637c <HAL_RCC_OscConfig+0x478>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006340:	f7fd fc62 	bl	8003c08 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006348:	f7fd fc5e 	bl	8003c08 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e045      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635a:	4b06      	ldr	r3, [pc, #24]	@ (8006374 <HAL_RCC_OscConfig+0x470>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f0      	bne.n	8006348 <HAL_RCC_OscConfig+0x444>
 8006366:	e03d      	b.n	80063e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d107      	bne.n	8006380 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e038      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
 8006374:	40023800 	.word	0x40023800
 8006378:	40007000 	.word	0x40007000
 800637c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006380:	4b1b      	ldr	r3, [pc, #108]	@ (80063f0 <HAL_RCC_OscConfig+0x4ec>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d028      	beq.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006398:	429a      	cmp	r2, r3
 800639a:	d121      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d11a      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d111      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c6:	085b      	lsrs	r3, r3, #1
 80063c8:	3b01      	subs	r3, #1
 80063ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d107      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063dc:	429a      	cmp	r2, r3
 80063de:	d001      	beq.n	80063e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40023800 	.word	0x40023800

080063f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0cc      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006408:	4b68      	ldr	r3, [pc, #416]	@ (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d90c      	bls.n	8006430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006416:	4b65      	ldr	r3, [pc, #404]	@ (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641e:	4b63      	ldr	r3, [pc, #396]	@ (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d001      	beq.n	8006430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0b8      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d020      	beq.n	800647e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006448:	4b59      	ldr	r3, [pc, #356]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4a58      	ldr	r2, [pc, #352]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006452:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006460:	4b53      	ldr	r3, [pc, #332]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	4a52      	ldr	r2, [pc, #328]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800646a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800646c:	4b50      	ldr	r3, [pc, #320]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	494d      	ldr	r1, [pc, #308]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d044      	beq.n	8006514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d107      	bne.n	80064a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006492:	4b47      	ldr	r3, [pc, #284]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d119      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e07f      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d003      	beq.n	80064b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d107      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b2:	4b3f      	ldr	r3, [pc, #252]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e06f      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c2:	4b3b      	ldr	r3, [pc, #236]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e067      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064d2:	4b37      	ldr	r3, [pc, #220]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f023 0203 	bic.w	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4934      	ldr	r1, [pc, #208]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e4:	f7fd fb90 	bl	8003c08 <HAL_GetTick>
 80064e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ea:	e00a      	b.n	8006502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ec:	f7fd fb8c 	bl	8003c08 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e04f      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006502:	4b2b      	ldr	r3, [pc, #172]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 020c 	and.w	r2, r3, #12
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	429a      	cmp	r2, r3
 8006512:	d1eb      	bne.n	80064ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006514:	4b25      	ldr	r3, [pc, #148]	@ (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d20c      	bcs.n	800653c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b22      	ldr	r3, [pc, #136]	@ (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b20      	ldr	r3, [pc, #128]	@ (80065ac <HAL_RCC_ClockConfig+0x1b8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d001      	beq.n	800653c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e032      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006548:	4b19      	ldr	r3, [pc, #100]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4916      	ldr	r1, [pc, #88]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	4313      	orrs	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006566:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	490e      	ldr	r1, [pc, #56]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	4313      	orrs	r3, r2
 8006578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800657a:	f000 f821 	bl	80065c0 <HAL_RCC_GetSysClockFreq>
 800657e:	4602      	mov	r2, r0
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	490a      	ldr	r1, [pc, #40]	@ (80065b4 <HAL_RCC_ClockConfig+0x1c0>)
 800658c:	5ccb      	ldrb	r3, [r1, r3]
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	4a09      	ldr	r2, [pc, #36]	@ (80065b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006596:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <HAL_RCC_ClockConfig+0x1c8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fd faf0 	bl	8003b80 <HAL_InitTick>

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40023c00 	.word	0x40023c00
 80065b0:	40023800 	.word	0x40023800
 80065b4:	08012500 	.word	0x08012500
 80065b8:	2000002c 	.word	0x2000002c
 80065bc:	20000030 	.word	0x20000030

080065c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c4:	b094      	sub	sp, #80	@ 0x50
 80065c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065d8:	4b79      	ldr	r3, [pc, #484]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 030c 	and.w	r3, r3, #12
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d00d      	beq.n	8006600 <HAL_RCC_GetSysClockFreq+0x40>
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	f200 80e1 	bhi.w	80067ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_RCC_GetSysClockFreq+0x34>
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d003      	beq.n	80065fa <HAL_RCC_GetSysClockFreq+0x3a>
 80065f2:	e0db      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065f4:	4b73      	ldr	r3, [pc, #460]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80065f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065f8:	e0db      	b.n	80067b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065fa:	4b72      	ldr	r3, [pc, #456]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80065fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065fe:	e0d8      	b.n	80067b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006600:	4b6f      	ldr	r3, [pc, #444]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006608:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800660a:	4b6d      	ldr	r3, [pc, #436]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d063      	beq.n	80066de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006616:	4b6a      	ldr	r3, [pc, #424]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	099b      	lsrs	r3, r3, #6
 800661c:	2200      	movs	r2, #0
 800661e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006620:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006628:	633b      	str	r3, [r7, #48]	@ 0x30
 800662a:	2300      	movs	r3, #0
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
 800662e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006632:	4622      	mov	r2, r4
 8006634:	462b      	mov	r3, r5
 8006636:	f04f 0000 	mov.w	r0, #0
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	0159      	lsls	r1, r3, #5
 8006640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006644:	0150      	lsls	r0, r2, #5
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4621      	mov	r1, r4
 800664c:	1a51      	subs	r1, r2, r1
 800664e:	6139      	str	r1, [r7, #16]
 8006650:	4629      	mov	r1, r5
 8006652:	eb63 0301 	sbc.w	r3, r3, r1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006664:	4659      	mov	r1, fp
 8006666:	018b      	lsls	r3, r1, #6
 8006668:	4651      	mov	r1, sl
 800666a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800666e:	4651      	mov	r1, sl
 8006670:	018a      	lsls	r2, r1, #6
 8006672:	4651      	mov	r1, sl
 8006674:	ebb2 0801 	subs.w	r8, r2, r1
 8006678:	4659      	mov	r1, fp
 800667a:	eb63 0901 	sbc.w	r9, r3, r1
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800668a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800668e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006692:	4690      	mov	r8, r2
 8006694:	4699      	mov	r9, r3
 8006696:	4623      	mov	r3, r4
 8006698:	eb18 0303 	adds.w	r3, r8, r3
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	462b      	mov	r3, r5
 80066a0:	eb49 0303 	adc.w	r3, r9, r3
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	f04f 0200 	mov.w	r2, #0
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066b2:	4629      	mov	r1, r5
 80066b4:	028b      	lsls	r3, r1, #10
 80066b6:	4621      	mov	r1, r4
 80066b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066bc:	4621      	mov	r1, r4
 80066be:	028a      	lsls	r2, r1, #10
 80066c0:	4610      	mov	r0, r2
 80066c2:	4619      	mov	r1, r3
 80066c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c6:	2200      	movs	r2, #0
 80066c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066d0:	f7fa faba 	bl	8000c48 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4613      	mov	r3, r2
 80066da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066dc:	e058      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066de:	4b38      	ldr	r3, [pc, #224]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	099b      	lsrs	r3, r3, #6
 80066e4:	2200      	movs	r2, #0
 80066e6:	4618      	mov	r0, r3
 80066e8:	4611      	mov	r1, r2
 80066ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066ee:	623b      	str	r3, [r7, #32]
 80066f0:	2300      	movs	r3, #0
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	f04f 0000 	mov.w	r0, #0
 8006700:	f04f 0100 	mov.w	r1, #0
 8006704:	0159      	lsls	r1, r3, #5
 8006706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800670a:	0150      	lsls	r0, r2, #5
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4641      	mov	r1, r8
 8006712:	ebb2 0a01 	subs.w	sl, r2, r1
 8006716:	4649      	mov	r1, r9
 8006718:	eb63 0b01 	sbc.w	fp, r3, r1
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006728:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800672c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006730:	ebb2 040a 	subs.w	r4, r2, sl
 8006734:	eb63 050b 	sbc.w	r5, r3, fp
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	00eb      	lsls	r3, r5, #3
 8006742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006746:	00e2      	lsls	r2, r4, #3
 8006748:	4614      	mov	r4, r2
 800674a:	461d      	mov	r5, r3
 800674c:	4643      	mov	r3, r8
 800674e:	18e3      	adds	r3, r4, r3
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	464b      	mov	r3, r9
 8006754:	eb45 0303 	adc.w	r3, r5, r3
 8006758:	607b      	str	r3, [r7, #4]
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006766:	4629      	mov	r1, r5
 8006768:	028b      	lsls	r3, r1, #10
 800676a:	4621      	mov	r1, r4
 800676c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006770:	4621      	mov	r1, r4
 8006772:	028a      	lsls	r2, r1, #10
 8006774:	4610      	mov	r0, r2
 8006776:	4619      	mov	r1, r3
 8006778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800677a:	2200      	movs	r2, #0
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	61fa      	str	r2, [r7, #28]
 8006780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006784:	f7fa fa60 	bl	8000c48 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4613      	mov	r3, r2
 800678e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006790:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	3301      	adds	r3, #1
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80067a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067aa:	e002      	b.n	80067b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067ac:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3750      	adds	r7, #80	@ 0x50
 80067b8:	46bd      	mov	sp, r7
 80067ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067be:	bf00      	nop
 80067c0:	40023800 	.word	0x40023800
 80067c4:	00f42400 	.word	0x00f42400

080067c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067cc:	4b03      	ldr	r3, [pc, #12]	@ (80067dc <HAL_RCC_GetHCLKFreq+0x14>)
 80067ce:	681b      	ldr	r3, [r3, #0]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	2000002c 	.word	0x2000002c

080067e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067e4:	f7ff fff0 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	4903      	ldr	r1, [pc, #12]	@ (8006804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067f6:	5ccb      	ldrb	r3, [r1, r3]
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40023800 	.word	0x40023800
 8006804:	08012510 	.word	0x08012510

08006808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800680c:	f7ff ffdc 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0b5b      	lsrs	r3, r3, #13
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4903      	ldr	r1, [pc, #12]	@ (800682c <HAL_RCC_GetPCLK2Freq+0x24>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006824:	4618      	mov	r0, r3
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40023800 	.word	0x40023800
 800682c:	08012510 	.word	0x08012510

08006830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e07b      	b.n	800693a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	2b00      	cmp	r3, #0
 8006848:	d108      	bne.n	800685c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006852:	d009      	beq.n	8006868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	61da      	str	r2, [r3, #28]
 800685a:	e005      	b.n	8006868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fc fde8 	bl	8003458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800689e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ec:	ea42 0103 	orr.w	r1, r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	0c1b      	lsrs	r3, r3, #16
 8006906:	f003 0104 	and.w	r1, r3, #4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690e:	f003 0210 	and.w	r2, r3, #16
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b088      	sub	sp, #32
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	603b      	str	r3, [r7, #0]
 800694e:	4613      	mov	r3, r2
 8006950:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006952:	f7fd f959 	bl	8003c08 <HAL_GetTick>
 8006956:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b01      	cmp	r3, #1
 8006966:	d001      	beq.n	800696c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006968:	2302      	movs	r3, #2
 800696a:	e12a      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_SPI_Transmit+0x36>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e122      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_SPI_Transmit+0x48>
 8006986:	2302      	movs	r3, #2
 8006988:	e11b      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	88fa      	ldrh	r2, [r7, #6]
 80069aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d8:	d10f      	bne.n	80069fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a04:	2b40      	cmp	r3, #64	@ 0x40
 8006a06:	d007      	beq.n	8006a18 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a20:	d152      	bne.n	8006ac8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_SPI_Transmit+0xee>
 8006a2a:	8b7b      	ldrh	r3, [r7, #26]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d145      	bne.n	8006abc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a34:	881a      	ldrh	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a40:	1c9a      	adds	r2, r3, #2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a54:	e032      	b.n	8006abc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d112      	bne.n	8006a8a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a68:	881a      	ldrh	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	1c9a      	adds	r2, r3, #2
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a88:	e018      	b.n	8006abc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a8a:	f7fd f8bd 	bl	8003c08 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d803      	bhi.n	8006aa2 <HAL_SPI_Transmit+0x160>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d102      	bne.n	8006aa8 <HAL_SPI_Transmit+0x166>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d109      	bne.n	8006abc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e082      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1c7      	bne.n	8006a56 <HAL_SPI_Transmit+0x114>
 8006ac6:	e053      	b.n	8006b70 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_SPI_Transmit+0x194>
 8006ad0:	8b7b      	ldrh	r3, [r7, #26]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d147      	bne.n	8006b66 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006afc:	e033      	b.n	8006b66 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d113      	bne.n	8006b34 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	7812      	ldrb	r2, [r2, #0]
 8006b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b32:	e018      	b.n	8006b66 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b34:	f7fd f868 	bl	8003c08 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d803      	bhi.n	8006b4c <HAL_SPI_Transmit+0x20a>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d102      	bne.n	8006b52 <HAL_SPI_Transmit+0x210>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e02d      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1c6      	bne.n	8006afe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fdd1 	bl	800771c <SPI_EndRxTxTransaction>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2220      	movs	r2, #32
 8006b84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b08a      	sub	sp, #40	@ 0x28
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
 8006bd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bdc:	f7fd f814 	bl	8003c08 <HAL_GetTick>
 8006be0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006be8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bf4:	7ffb      	ldrb	r3, [r7, #31]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d00c      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x4a>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c00:	d106      	bne.n	8006c10 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <HAL_SPI_TransmitReceive+0x46>
 8006c0a:	7ffb      	ldrb	r3, [r7, #31]
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d001      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
 8006c12:	e17f      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x5c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x5c>
 8006c20:	887b      	ldrh	r3, [r7, #2]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e174      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_SPI_TransmitReceive+0x6e>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e16d      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d003      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2205      	movs	r2, #5
 8006c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	887a      	ldrh	r2, [r7, #2]
 8006c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	887a      	ldrh	r2, [r7, #2]
 8006c6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	887a      	ldrh	r2, [r7, #2]
 8006c76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	887a      	ldrh	r2, [r7, #2]
 8006c7c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c94:	2b40      	cmp	r3, #64	@ 0x40
 8006c96:	d007      	beq.n	8006ca8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ca6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb0:	d17e      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_SPI_TransmitReceive+0xf6>
 8006cba:	8afb      	ldrh	r3, [r7, #22]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d16c      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc4:	881a      	ldrh	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd0:	1c9a      	adds	r2, r3, #2
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce4:	e059      	b.n	8006d9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d11b      	bne.n	8006d2c <HAL_SPI_TransmitReceive+0x162>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d016      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x162>
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d113      	bne.n	8006d2c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	1c9a      	adds	r2, r3, #2
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d119      	bne.n	8006d6e <HAL_SPI_TransmitReceive+0x1a4>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d014      	beq.n	8006d6e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d56:	1c9a      	adds	r2, r3, #2
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d6e:	f7fc ff4b 	bl	8003c08 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d80d      	bhi.n	8006d9a <HAL_SPI_TransmitReceive+0x1d0>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d009      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e0bc      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1a0      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x11c>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d19b      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x11c>
 8006dae:	e082      	b.n	8006eb6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x1f4>
 8006db8:	8afb      	ldrh	r3, [r7, #22]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d171      	bne.n	8006ea2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006de4:	e05d      	b.n	8006ea2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d11c      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x264>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d017      	beq.n	8006e2e <HAL_SPI_TransmitReceive+0x264>
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d114      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d119      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x2a6>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d014      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e70:	f7fc feca 	bl	8003c08 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d803      	bhi.n	8006e88 <HAL_SPI_TransmitReceive+0x2be>
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d102      	bne.n	8006e8e <HAL_SPI_TransmitReceive+0x2c4>
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e038      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d19c      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x21c>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d197      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eb6:	6a3a      	ldr	r2, [r7, #32]
 8006eb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fc2e 	bl	800771c <SPI_EndRxTxTransaction>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d008      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e01d      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006f12:	2300      	movs	r3, #0
  }
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3728      	adds	r7, #40	@ 0x28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f30:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d00c      	beq.n	8006f58 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f44:	d106      	bne.n	8006f54 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <HAL_SPI_TransmitReceive_DMA+0x38>
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d001      	beq.n	8006f58 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e0cf      	b.n	80070f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006f64:	887b      	ldrh	r3, [r7, #2]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e0c4      	b.n	80070f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_SPI_TransmitReceive_DMA+0x60>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e0bd      	b.n	80070f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d003      	beq.n	8006f98 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2205      	movs	r2, #5
 8006f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	887a      	ldrh	r2, [r7, #2]
 8006fa8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	887a      	ldrh	r2, [r7, #2]
 8006fae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	887a      	ldrh	r2, [r7, #2]
 8006fba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	887a      	ldrh	r2, [r7, #2]
 8006fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d108      	bne.n	8006fec <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fde:	4a48      	ldr	r2, [pc, #288]	@ (8007100 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fe6:	4a47      	ldr	r2, [pc, #284]	@ (8007104 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006fea:	e007      	b.n	8006ffc <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff0:	4a45      	ldr	r2, [pc, #276]	@ (8007108 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff8:	4a44      	ldr	r2, [pc, #272]	@ (800710c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007000:	4a43      	ldr	r2, [pc, #268]	@ (8007110 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007002:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007008:	2200      	movs	r2, #0
 800700a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	4619      	mov	r1, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007022:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007024:	f7fc ffe0 	bl	8003fe8 <HAL_DMA_Start_IT>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00b      	beq.n	8007046 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007032:	f043 0210 	orr.w	r2, r3, #16
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e058      	b.n	80070f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0201 	orr.w	r2, r2, #1
 8007054:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800705a:	2200      	movs	r2, #0
 800705c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007062:	2200      	movs	r2, #0
 8007064:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800706a:	2200      	movs	r2, #0
 800706c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007072:	2200      	movs	r2, #0
 8007074:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707e:	4619      	mov	r1, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	330c      	adds	r3, #12
 8007086:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800708c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800708e:	f7fc ffab 	bl	8003fe8 <HAL_DMA_Start_IT>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800709c:	f043 0210 	orr.w	r2, r3, #16
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e023      	b.n	80070f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ba:	2b40      	cmp	r3, #64	@ 0x40
 80070bc:	d007      	beq.n	80070ce <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070cc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0220 	orr.w	r2, r2, #32
 80070e4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0202 	orr.w	r2, r2, #2
 80070f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	080074a1 	.word	0x080074a1
 8007104:	08007369 	.word	0x08007369
 8007108:	080074bd 	.word	0x080074bd
 800710c:	08007411 	.word	0x08007411
 8007110:	080074d9 	.word	0x080074d9

08007114 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10e      	bne.n	8007154 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
    return;
 8007152:	e0ce      	b.n	80072f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <HAL_SPI_IRQHandler+0x5e>
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	d004      	beq.n	8007172 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
    return;
 8007170:	e0bf      	b.n	80072f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <HAL_SPI_IRQHandler+0x7e>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 80b0 	beq.w	80072f2 <HAL_SPI_IRQHandler+0x1de>
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80aa 	beq.w	80072f2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d023      	beq.n	80071f0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d011      	beq.n	80071d8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b8:	f043 0204 	orr.w	r2, r3, #4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	e00b      	b.n	80071f0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071d8:	2300      	movs	r3, #0
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	693b      	ldr	r3, [r7, #16]
        return;
 80071ee:	e080      	b.n	80072f2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d014      	beq.n	8007224 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fe:	f043 0201 	orr.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00c      	beq.n	8007248 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007232:	f043 0208 	orr.w	r2, r3, #8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800723a:	2300      	movs	r3, #0
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724c:	2b00      	cmp	r3, #0
 800724e:	d04f      	beq.n	80072f0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800725e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d104      	bne.n	800727c <HAL_SPI_IRQHandler+0x168>
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d034      	beq.n	80072e6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0203 	bic.w	r2, r2, #3
 800728a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d011      	beq.n	80072b8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007298:	4a17      	ldr	r2, [pc, #92]	@ (80072f8 <HAL_SPI_IRQHandler+0x1e4>)
 800729a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fc ff69 	bl	8004178 <HAL_DMA_Abort_IT>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d016      	beq.n	80072ee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c4:	4a0c      	ldr	r2, [pc, #48]	@ (80072f8 <HAL_SPI_IRQHandler+0x1e4>)
 80072c6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fc ff53 	bl	8004178 <HAL_DMA_Abort_IT>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80072e4:	e003      	b.n	80072ee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f826 	bl	8007338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80072ec:	e000      	b.n	80072f0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80072ee:	bf00      	nop
    return;
 80072f0:	bf00      	nop
  }
}
 80072f2:	3720      	adds	r7, #32
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	08007519 	.word	0x08007519

080072fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800735a:	b2db      	uxtb	r3, r3
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007376:	f7fc fc47 	bl	8003c08 <HAL_GetTick>
 800737a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800738a:	d03b      	beq.n	8007404 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0220 	bic.w	r2, r2, #32
 800739a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <SPI_DMAReceiveCplt+0x58>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073ac:	d108      	bne.n	80073c0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0203 	bic.w	r2, r2, #3
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	e007      	b.n	80073d0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0201 	bic.w	r2, r2, #1
 80073ce:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	2164      	movs	r1, #100	@ 0x64
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 f93b 	bl	8007650 <SPI_EndRxTransaction>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f7ff ff9b 	bl	8007338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007402:	e002      	b.n	800740a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff ff79 	bl	80072fc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800741e:	f7fc fbf3 	bl	8003c08 <HAL_GetTick>
 8007422:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800742e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007432:	d02f      	beq.n	8007494 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0220 	bic.w	r2, r2, #32
 8007442:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	2164      	movs	r1, #100	@ 0x64
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f967 	bl	800771c <SPI_EndRxTxTransaction>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007458:	f043 0220 	orr.w	r2, r3, #32
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0203 	bic.w	r2, r2, #3
 800746e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff ff53 	bl	8007338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007492:	e002      	b.n	800749a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f7fb f9f7 	bl	8002888 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ac:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff ff2e 	bl	8007310 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff ff2a 	bl	8007324 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0203 	bic.w	r2, r2, #3
 80074f4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fa:	f043 0210 	orr.w	r2, r3, #16
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff ff14 	bl	8007338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff ff00 	bl	8007338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007538:	bf00      	nop
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	4613      	mov	r3, r2
 800754e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007550:	f7fc fb5a 	bl	8003c08 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	4413      	add	r3, r2
 800755e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007560:	f7fc fb52 	bl	8003c08 <HAL_GetTick>
 8007564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007566:	4b39      	ldr	r3, [pc, #228]	@ (800764c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	015b      	lsls	r3, r3, #5
 800756c:	0d1b      	lsrs	r3, r3, #20
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007576:	e054      	b.n	8007622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d050      	beq.n	8007622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007580:	f7fc fb42 	bl	8003c08 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	429a      	cmp	r2, r3
 800758e:	d902      	bls.n	8007596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d13d      	bne.n	8007612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ae:	d111      	bne.n	80075d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075b8:	d004      	beq.n	80075c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c2:	d107      	bne.n	80075d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075dc:	d10f      	bne.n	80075fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e017      	b.n	8007642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	3b01      	subs	r3, #1
 8007620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4013      	ands	r3, r2
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	429a      	cmp	r2, r3
 8007630:	bf0c      	ite	eq
 8007632:	2301      	moveq	r3, #1
 8007634:	2300      	movne	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	429a      	cmp	r2, r3
 800763e:	d19b      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3720      	adds	r7, #32
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	2000002c 	.word	0x2000002c

08007650 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007664:	d111      	bne.n	800768a <SPI_EndRxTransaction+0x3a>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800766e:	d004      	beq.n	800767a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007678:	d107      	bne.n	800768a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007688:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007692:	d12a      	bne.n	80076ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800769c:	d012      	beq.n	80076c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2200      	movs	r2, #0
 80076a6:	2180      	movs	r1, #128	@ 0x80
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff ff49 	bl	8007540 <SPI_WaitFlagStateUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d02d      	beq.n	8007710 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b8:	f043 0220 	orr.w	r2, r3, #32
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e026      	b.n	8007712 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2200      	movs	r2, #0
 80076cc:	2101      	movs	r1, #1
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff ff36 	bl	8007540 <SPI_WaitFlagStateUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01a      	beq.n	8007710 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076de:	f043 0220 	orr.w	r2, r3, #32
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e013      	b.n	8007712 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2200      	movs	r2, #0
 80076f2:	2101      	movs	r1, #1
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f7ff ff23 	bl	8007540 <SPI_WaitFlagStateUntilTimeout>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007704:	f043 0220 	orr.w	r2, r3, #32
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e000      	b.n	8007712 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af02      	add	r7, sp, #8
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2201      	movs	r2, #1
 8007730:	2102      	movs	r1, #2
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff ff04 	bl	8007540 <SPI_WaitFlagStateUntilTimeout>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007742:	f043 0220 	orr.w	r2, r3, #32
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e032      	b.n	80077b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800774e:	4b1b      	ldr	r3, [pc, #108]	@ (80077bc <SPI_EndRxTxTransaction+0xa0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1b      	ldr	r2, [pc, #108]	@ (80077c0 <SPI_EndRxTxTransaction+0xa4>)
 8007754:	fba2 2303 	umull	r2, r3, r2, r3
 8007758:	0d5b      	lsrs	r3, r3, #21
 800775a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800776c:	d112      	bne.n	8007794 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2200      	movs	r2, #0
 8007776:	2180      	movs	r1, #128	@ 0x80
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7ff fee1 	bl	8007540 <SPI_WaitFlagStateUntilTimeout>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d016      	beq.n	80077b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007788:	f043 0220 	orr.w	r2, r3, #32
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e00f      	b.n	80077b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	3b01      	subs	r3, #1
 800779e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077aa:	2b80      	cmp	r3, #128	@ 0x80
 80077ac:	d0f2      	beq.n	8007794 <SPI_EndRxTxTransaction+0x78>
 80077ae:	e000      	b.n	80077b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80077b0:	bf00      	nop
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	2000002c 	.word	0x2000002c
 80077c0:	165e9f81 	.word	0x165e9f81

080077c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e041      	b.n	800785a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fb feea 	bl	80035c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f000 fa7e 	bl	8007d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	d001      	beq.n	800787c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e04e      	b.n	800791a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a23      	ldr	r2, [pc, #140]	@ (8007928 <HAL_TIM_Base_Start_IT+0xc4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d022      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x80>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a6:	d01d      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x80>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a1f      	ldr	r2, [pc, #124]	@ (800792c <HAL_TIM_Base_Start_IT+0xc8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d018      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x80>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007930 <HAL_TIM_Base_Start_IT+0xcc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d013      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x80>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007934 <HAL_TIM_Base_Start_IT+0xd0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00e      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x80>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007938 <HAL_TIM_Base_Start_IT+0xd4>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d009      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x80>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a19      	ldr	r2, [pc, #100]	@ (800793c <HAL_TIM_Base_Start_IT+0xd8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x80>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a18      	ldr	r2, [pc, #96]	@ (8007940 <HAL_TIM_Base_Start_IT+0xdc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d111      	bne.n	8007908 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b06      	cmp	r3, #6
 80078f4:	d010      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007906:	e007      	b.n	8007918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40010000 	.word	0x40010000
 800792c:	40000400 	.word	0x40000400
 8007930:	40000800 	.word	0x40000800
 8007934:	40000c00 	.word	0x40000c00
 8007938:	40010400 	.word	0x40010400
 800793c:	40014000 	.word	0x40014000
 8007940:	40001800 	.word	0x40001800

08007944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d020      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01b      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f06f 0202 	mvn.w	r2, #2
 8007978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f999 	bl	8007cc6 <HAL_TIM_IC_CaptureCallback>
 8007994:	e005      	b.n	80079a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f98b 	bl	8007cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f99c 	bl	8007cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d020      	beq.n	80079f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01b      	beq.n	80079f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0204 	mvn.w	r2, #4
 80079c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f973 	bl	8007cc6 <HAL_TIM_IC_CaptureCallback>
 80079e0:	e005      	b.n	80079ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f965 	bl	8007cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f976 	bl	8007cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d020      	beq.n	8007a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01b      	beq.n	8007a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0208 	mvn.w	r2, #8
 8007a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f94d 	bl	8007cc6 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f93f 	bl	8007cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f950 	bl	8007cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d020      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01b      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0210 	mvn.w	r2, #16
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2208      	movs	r2, #8
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f927 	bl	8007cc6 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f919 	bl	8007cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f92a 	bl	8007cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00c      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0201 	mvn.w	r2, #1
 8007aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fa ff0c 	bl	80028c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00c      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fae4 	bl	800809c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d007      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8fb 	bl	8007cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00c      	beq.n	8007b1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0220 	mvn.w	r2, #32
 8007b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fab6 	bl	8008088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIM_ConfigClockSource+0x1c>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e0b4      	b.n	8007caa <HAL_TIM_ConfigClockSource+0x186>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b78:	d03e      	beq.n	8007bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8007b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b7e:	f200 8087 	bhi.w	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b86:	f000 8086 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x172>
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b8e:	d87f      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007b90:	2b70      	cmp	r3, #112	@ 0x70
 8007b92:	d01a      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0xa6>
 8007b94:	2b70      	cmp	r3, #112	@ 0x70
 8007b96:	d87b      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007b98:	2b60      	cmp	r3, #96	@ 0x60
 8007b9a:	d050      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0x11a>
 8007b9c:	2b60      	cmp	r3, #96	@ 0x60
 8007b9e:	d877      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba0:	2b50      	cmp	r3, #80	@ 0x50
 8007ba2:	d03c      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0xfa>
 8007ba4:	2b50      	cmp	r3, #80	@ 0x50
 8007ba6:	d873      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba8:	2b40      	cmp	r3, #64	@ 0x40
 8007baa:	d058      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x13a>
 8007bac:	2b40      	cmp	r3, #64	@ 0x40
 8007bae:	d86f      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb0:	2b30      	cmp	r3, #48	@ 0x30
 8007bb2:	d064      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x15a>
 8007bb4:	2b30      	cmp	r3, #48	@ 0x30
 8007bb6:	d86b      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d060      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x15a>
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d867      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d05c      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x15a>
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d05a      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x15a>
 8007bc8:	e062      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bda:	f000 f9b9 	bl	8007f50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	609a      	str	r2, [r3, #8]
      break;
 8007bf6:	e04f      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c08:	f000 f9a2 	bl	8007f50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c1a:	609a      	str	r2, [r3, #8]
      break;
 8007c1c:	e03c      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f000 f916 	bl	8007e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2150      	movs	r1, #80	@ 0x50
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f96f 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007c3c:	e02c      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f000 f935 	bl	8007eba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2160      	movs	r1, #96	@ 0x60
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f95f 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007c5c:	e01c      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f000 f8f6 	bl	8007e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2140      	movs	r1, #64	@ 0x40
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f94f 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007c7c:	e00c      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f000 f946 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007c8e:	e003      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	73fb      	strb	r3, [r7, #15]
      break;
 8007c94:	e000      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a46      	ldr	r2, [pc, #280]	@ (8007e30 <TIM_Base_SetConfig+0x12c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d013      	beq.n	8007d44 <TIM_Base_SetConfig+0x40>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d22:	d00f      	beq.n	8007d44 <TIM_Base_SetConfig+0x40>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a43      	ldr	r2, [pc, #268]	@ (8007e34 <TIM_Base_SetConfig+0x130>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00b      	beq.n	8007d44 <TIM_Base_SetConfig+0x40>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a42      	ldr	r2, [pc, #264]	@ (8007e38 <TIM_Base_SetConfig+0x134>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d007      	beq.n	8007d44 <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a41      	ldr	r2, [pc, #260]	@ (8007e3c <TIM_Base_SetConfig+0x138>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d003      	beq.n	8007d44 <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a40      	ldr	r2, [pc, #256]	@ (8007e40 <TIM_Base_SetConfig+0x13c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d108      	bne.n	8007d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a35      	ldr	r2, [pc, #212]	@ (8007e30 <TIM_Base_SetConfig+0x12c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d02b      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d64:	d027      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a32      	ldr	r2, [pc, #200]	@ (8007e34 <TIM_Base_SetConfig+0x130>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d023      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a31      	ldr	r2, [pc, #196]	@ (8007e38 <TIM_Base_SetConfig+0x134>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01f      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a30      	ldr	r2, [pc, #192]	@ (8007e3c <TIM_Base_SetConfig+0x138>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d01b      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2f      	ldr	r2, [pc, #188]	@ (8007e40 <TIM_Base_SetConfig+0x13c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d017      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a2e      	ldr	r2, [pc, #184]	@ (8007e44 <TIM_Base_SetConfig+0x140>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2d      	ldr	r2, [pc, #180]	@ (8007e48 <TIM_Base_SetConfig+0x144>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00f      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2c      	ldr	r2, [pc, #176]	@ (8007e4c <TIM_Base_SetConfig+0x148>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00b      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a2b      	ldr	r2, [pc, #172]	@ (8007e50 <TIM_Base_SetConfig+0x14c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2a      	ldr	r2, [pc, #168]	@ (8007e54 <TIM_Base_SetConfig+0x150>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d003      	beq.n	8007db6 <TIM_Base_SetConfig+0xb2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a29      	ldr	r2, [pc, #164]	@ (8007e58 <TIM_Base_SetConfig+0x154>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d108      	bne.n	8007dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a10      	ldr	r2, [pc, #64]	@ (8007e30 <TIM_Base_SetConfig+0x12c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d003      	beq.n	8007dfc <TIM_Base_SetConfig+0xf8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a12      	ldr	r2, [pc, #72]	@ (8007e40 <TIM_Base_SetConfig+0x13c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d103      	bne.n	8007e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d105      	bne.n	8007e22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f023 0201 	bic.w	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	611a      	str	r2, [r3, #16]
  }
}
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40000400 	.word	0x40000400
 8007e38:	40000800 	.word	0x40000800
 8007e3c:	40000c00 	.word	0x40000c00
 8007e40:	40010400 	.word	0x40010400
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40014400 	.word	0x40014400
 8007e4c:	40014800 	.word	0x40014800
 8007e50:	40001800 	.word	0x40001800
 8007e54:	40001c00 	.word	0x40001c00
 8007e58:	40002000 	.word	0x40002000

08007e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f023 0201 	bic.w	r2, r3, #1
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f023 030a 	bic.w	r3, r3, #10
 8007e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	621a      	str	r2, [r3, #32]
}
 8007eae:	bf00      	nop
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b087      	sub	sp, #28
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f023 0210 	bic.w	r2, r3, #16
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	031b      	lsls	r3, r3, #12
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ef6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	621a      	str	r2, [r3, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f043 0307 	orr.w	r3, r3, #7
 8007f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	609a      	str	r2, [r3, #8]
}
 8007f44:	bf00      	nop
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	021a      	lsls	r2, r3, #8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e05a      	b.n	800805e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a21      	ldr	r2, [pc, #132]	@ (800806c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d022      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff4:	d01d      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d018      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a1b      	ldr	r2, [pc, #108]	@ (8008074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d013      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1a      	ldr	r2, [pc, #104]	@ (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00e      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a18      	ldr	r2, [pc, #96]	@ (800807c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d009      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a17      	ldr	r2, [pc, #92]	@ (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d004      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a15      	ldr	r2, [pc, #84]	@ (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d10c      	bne.n	800804c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4313      	orrs	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40010400 	.word	0x40010400
 8008080:	40014000 	.word	0x40014000
 8008084:	40001800 	.word	0x40001800

08008088 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e042      	b.n	8008148 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fb fad6 	bl	8003688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2224      	movs	r2, #36	@ 0x24
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fdc1 	bl	8008c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695a      	ldr	r2, [r3, #20]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08c      	sub	sp, #48	@ 0x30
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b20      	cmp	r3, #32
 8008168:	d156      	bne.n	8008218 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <HAL_UART_Transmit_DMA+0x26>
 8008170:	88fb      	ldrh	r3, [r7, #6]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e04f      	b.n	800821a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	88fa      	ldrh	r2, [r7, #6]
 8008184:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	88fa      	ldrh	r2, [r7, #6]
 800818a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2221      	movs	r2, #33	@ 0x21
 8008196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819e:	4a21      	ldr	r2, [pc, #132]	@ (8008224 <HAL_UART_Transmit_DMA+0xd4>)
 80081a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a6:	4a20      	ldr	r2, [pc, #128]	@ (8008228 <HAL_UART_Transmit_DMA+0xd8>)
 80081a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ae:	4a1f      	ldr	r2, [pc, #124]	@ (800822c <HAL_UART_Transmit_DMA+0xdc>)
 80081b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b6:	2200      	movs	r2, #0
 80081b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80081ba:	f107 0308 	add.w	r3, r7, #8
 80081be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80081c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c6:	6819      	ldr	r1, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3304      	adds	r3, #4
 80081ce:	461a      	mov	r2, r3
 80081d0:	88fb      	ldrh	r3, [r7, #6]
 80081d2:	f7fb ff09 	bl	8003fe8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3314      	adds	r3, #20
 80081e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	617b      	str	r3, [r7, #20]
   return(result);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3314      	adds	r3, #20
 80081fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008200:	627a      	str	r2, [r7, #36]	@ 0x24
 8008202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6a39      	ldr	r1, [r7, #32]
 8008206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	61fb      	str	r3, [r7, #28]
   return(result);
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e5      	bne.n	80081e0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	e000      	b.n	800821a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008218:	2302      	movs	r3, #2
  }
}
 800821a:	4618      	mov	r0, r3
 800821c:	3730      	adds	r7, #48	@ 0x30
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	080087a9 	.word	0x080087a9
 8008228:	08008843 	.word	0x08008843
 800822c:	0800885f 	.word	0x0800885f

08008230 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b0ba      	sub	sp, #232	@ 0xe8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008256:	2300      	movs	r3, #0
 8008258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800825c:	2300      	movs	r3, #0
 800825e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800826e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10f      	bne.n	8008296 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <HAL_UART_IRQHandler+0x66>
 8008282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc36 	bl	8008b00 <UART_Receive_IT>
      return;
 8008294:	e25b      	b.n	800874e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80de 	beq.w	800845c <HAL_UART_IRQHandler+0x22c>
 80082a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d106      	bne.n	80082ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 80d1 	beq.w	800845c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00b      	beq.n	80082de <HAL_UART_IRQHandler+0xae>
 80082c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d005      	beq.n	80082de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d6:	f043 0201 	orr.w	r2, r3, #1
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00b      	beq.n	8008302 <HAL_UART_IRQHandler+0xd2>
 80082ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082fa:	f043 0202 	orr.w	r2, r3, #2
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <HAL_UART_IRQHandler+0xf6>
 800830e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831e:	f043 0204 	orr.w	r2, r3, #4
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d011      	beq.n	8008356 <HAL_UART_IRQHandler+0x126>
 8008332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d105      	bne.n	800834a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800833e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800834e:	f043 0208 	orr.w	r2, r3, #8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 81f2 	beq.w	8008744 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b00      	cmp	r3, #0
 800836a:	d008      	beq.n	800837e <HAL_UART_IRQHandler+0x14e>
 800836c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fbc1 	bl	8008b00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008388:	2b40      	cmp	r3, #64	@ 0x40
 800838a:	bf0c      	ite	eq
 800838c:	2301      	moveq	r3, #1
 800838e:	2300      	movne	r3, #0
 8008390:	b2db      	uxtb	r3, r3
 8008392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <HAL_UART_IRQHandler+0x17a>
 80083a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d04f      	beq.n	800844a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fac9 	bl	8008942 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ba:	2b40      	cmp	r3, #64	@ 0x40
 80083bc:	d141      	bne.n	8008442 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3314      	adds	r3, #20
 80083c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3314      	adds	r3, #20
 80083e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1d9      	bne.n	80083be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d013      	beq.n	800843a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008416:	4a7e      	ldr	r2, [pc, #504]	@ (8008610 <HAL_UART_IRQHandler+0x3e0>)
 8008418:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841e:	4618      	mov	r0, r3
 8008420:	f7fb feaa 	bl	8004178 <HAL_DMA_Abort_IT>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d016      	beq.n	8008458 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800842e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	e00e      	b.n	8008458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f99e 	bl	800877c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008440:	e00a      	b.n	8008458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f99a 	bl	800877c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008448:	e006      	b.n	8008458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f996 	bl	800877c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008456:	e175      	b.n	8008744 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008458:	bf00      	nop
    return;
 800845a:	e173      	b.n	8008744 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008460:	2b01      	cmp	r3, #1
 8008462:	f040 814f 	bne.w	8008704 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800846a:	f003 0310 	and.w	r3, r3, #16
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 8148 	beq.w	8008704 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 8141 	beq.w	8008704 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60bb      	str	r3, [r7, #8]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	60bb      	str	r3, [r7, #8]
 8008496:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a2:	2b40      	cmp	r3, #64	@ 0x40
 80084a4:	f040 80b6 	bne.w	8008614 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 8145 	beq.w	8008748 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084c6:	429a      	cmp	r2, r3
 80084c8:	f080 813e 	bcs.w	8008748 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084de:	f000 8088 	beq.w	80085f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	330c      	adds	r3, #12
 80084e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	330c      	adds	r3, #12
 800850a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800850e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800851a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1d9      	bne.n	80084e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3314      	adds	r3, #20
 8008534:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800853e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3314      	adds	r3, #20
 800854e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008552:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008556:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800855a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e1      	bne.n	800852e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3314      	adds	r3, #20
 8008570:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800857a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800857c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3314      	adds	r3, #20
 800858a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800858e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008590:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008594:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800859c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e3      	bne.n	800856a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	330c      	adds	r3, #12
 80085b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085c2:	f023 0310 	bic.w	r3, r3, #16
 80085c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	330c      	adds	r3, #12
 80085d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80085d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80085d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e3      	bne.n	80085b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fb fd53 	bl	8004098 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2202      	movs	r2, #2
 80085f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008600:	b29b      	uxth	r3, r3
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	b29b      	uxth	r3, r3
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f8c1 	bl	8008790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800860e:	e09b      	b.n	8008748 <HAL_UART_IRQHandler+0x518>
 8008610:	08008a09 	.word	0x08008a09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800861c:	b29b      	uxth	r3, r3
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 808e 	beq.w	800874c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8089 	beq.w	800874c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	330c      	adds	r3, #12
 8008640:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800864a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008650:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	330c      	adds	r3, #12
 800865a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800865e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008660:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800866c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e3      	bne.n	800863a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3314      	adds	r3, #20
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	623b      	str	r3, [r7, #32]
   return(result);
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	f023 0301 	bic.w	r3, r3, #1
 8008688:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3314      	adds	r3, #20
 8008692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008696:	633a      	str	r2, [r7, #48]	@ 0x30
 8008698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800869c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e3      	bne.n	8008672 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2220      	movs	r2, #32
 80086ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	330c      	adds	r3, #12
 80086be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0310 	bic.w	r3, r3, #16
 80086ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	330c      	adds	r3, #12
 80086d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80086dc:	61fa      	str	r2, [r7, #28]
 80086de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	69b9      	ldr	r1, [r7, #24]
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	617b      	str	r3, [r7, #20]
   return(result);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e3      	bne.n	80086b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f847 	bl	8008790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008702:	e023      	b.n	800874c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <HAL_UART_IRQHandler+0x4f4>
 8008710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f987 	bl	8008a30 <UART_Transmit_IT>
    return;
 8008722:	e014      	b.n	800874e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00e      	beq.n	800874e <HAL_UART_IRQHandler+0x51e>
 8008730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f9c7 	bl	8008ad0 <UART_EndTransmit_IT>
    return;
 8008742:	e004      	b.n	800874e <HAL_UART_IRQHandler+0x51e>
    return;
 8008744:	bf00      	nop
 8008746:	e002      	b.n	800874e <HAL_UART_IRQHandler+0x51e>
      return;
 8008748:	bf00      	nop
 800874a:	e000      	b.n	800874e <HAL_UART_IRQHandler+0x51e>
      return;
 800874c:	bf00      	nop
  }
}
 800874e:	37e8      	adds	r7, #232	@ 0xe8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b090      	sub	sp, #64	@ 0x40
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d137      	bne.n	8008834 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80087c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c6:	2200      	movs	r2, #0
 80087c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3314      	adds	r3, #20
 80087d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	623b      	str	r3, [r7, #32]
   return(result);
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3314      	adds	r3, #20
 80087e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80087ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	330c      	adds	r3, #12
 8008804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	60fb      	str	r3, [r7, #12]
   return(result);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
 8008816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	330c      	adds	r3, #12
 800881c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800881e:	61fa      	str	r2, [r7, #28]
 8008820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	69b9      	ldr	r1, [r7, #24]
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	617b      	str	r3, [r7, #20]
   return(result);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e5      	bne.n	80087fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008832:	e002      	b.n	800883a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008834:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008836:	f7fa fa69 	bl	8002d0c <HAL_UART_TxCpltCallback>
}
 800883a:	bf00      	nop
 800883c:	3740      	adds	r7, #64	@ 0x40
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff ff7f 	bl	8008754 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800887a:	2b80      	cmp	r3, #128	@ 0x80
 800887c:	bf0c      	ite	eq
 800887e:	2301      	moveq	r3, #1
 8008880:	2300      	movne	r3, #0
 8008882:	b2db      	uxtb	r3, r3
 8008884:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b21      	cmp	r3, #33	@ 0x21
 8008890:	d108      	bne.n	80088a4 <UART_DMAError+0x46>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800889e:	68b8      	ldr	r0, [r7, #8]
 80088a0:	f000 f827 	bl	80088f2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ae:	2b40      	cmp	r3, #64	@ 0x40
 80088b0:	bf0c      	ite	eq
 80088b2:	2301      	moveq	r3, #1
 80088b4:	2300      	movne	r3, #0
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b22      	cmp	r3, #34	@ 0x22
 80088c4:	d108      	bne.n	80088d8 <UART_DMAError+0x7a>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80088d2:	68b8      	ldr	r0, [r7, #8]
 80088d4:	f000 f835 	bl	8008942 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088dc:	f043 0210 	orr.w	r2, r3, #16
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088e4:	68b8      	ldr	r0, [r7, #8]
 80088e6:	f7ff ff49 	bl	800877c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b089      	sub	sp, #36	@ 0x24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	330c      	adds	r3, #12
 8008900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	60bb      	str	r3, [r7, #8]
   return(result);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008910:	61fb      	str	r3, [r7, #28]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	330c      	adds	r3, #12
 8008918:	69fa      	ldr	r2, [r7, #28]
 800891a:	61ba      	str	r2, [r7, #24]
 800891c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6979      	ldr	r1, [r7, #20]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	613b      	str	r3, [r7, #16]
   return(result);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e5      	bne.n	80088fa <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008936:	bf00      	nop
 8008938:	3724      	adds	r7, #36	@ 0x24
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008942:	b480      	push	{r7}
 8008944:	b095      	sub	sp, #84	@ 0x54
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	330c      	adds	r3, #12
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	330c      	adds	r3, #12
 8008968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800896a:	643a      	str	r2, [r7, #64]	@ 0x40
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008970:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e5      	bne.n	800894a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3314      	adds	r3, #20
 8008984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	61fb      	str	r3, [r7, #28]
   return(result);
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3314      	adds	r3, #20
 800899c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800899e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e5      	bne.n	800897e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d119      	bne.n	80089ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330c      	adds	r3, #12
 80089c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f023 0310 	bic.w	r3, r3, #16
 80089d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089da:	61ba      	str	r2, [r7, #24]
 80089dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6979      	ldr	r1, [r7, #20]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	613b      	str	r3, [r7, #16]
   return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80089fc:	bf00      	nop
 80089fe:	3754      	adds	r7, #84	@ 0x54
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f7ff feaa 	bl	800877c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a28:	bf00      	nop
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b21      	cmp	r3, #33	@ 0x21
 8008a42:	d13e      	bne.n	8008ac2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a4c:	d114      	bne.n	8008a78 <UART_Transmit_IT+0x48>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d110      	bne.n	8008a78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	1c9a      	adds	r2, r3, #2
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	621a      	str	r2, [r3, #32]
 8008a76:	e008      	b.n	8008a8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	1c59      	adds	r1, r3, #1
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6211      	str	r1, [r2, #32]
 8008a82:	781a      	ldrb	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	4619      	mov	r1, r3
 8008a98:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10f      	bne.n	8008abe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008aac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008abc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e000      	b.n	8008ac4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ac2:	2302      	movs	r3, #2
  }
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ae6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7fa f90b 	bl	8002d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08c      	sub	sp, #48	@ 0x30
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b22      	cmp	r3, #34	@ 0x22
 8008b12:	f040 80ae 	bne.w	8008c72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	d117      	bne.n	8008b50 <UART_Receive_IT+0x50>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d113      	bne.n	8008b50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b48:	1c9a      	adds	r2, r3, #2
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b4e:	e026      	b.n	8008b9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b62:	d007      	beq.n	8008b74 <UART_Receive_IT+0x74>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <UART_Receive_IT+0x82>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d106      	bne.n	8008b82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7e:	701a      	strb	r2, [r3, #0]
 8008b80:	e008      	b.n	8008b94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	4619      	mov	r1, r3
 8008bac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d15d      	bne.n	8008c6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 0220 	bic.w	r2, r2, #32
 8008bc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008bd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	695a      	ldr	r2, [r3, #20]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0201 	bic.w	r2, r2, #1
 8008be0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d135      	bne.n	8008c64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	330c      	adds	r3, #12
 8008c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f023 0310 	bic.w	r3, r3, #16
 8008c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c1e:	623a      	str	r2, [r7, #32]
 8008c20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	69f9      	ldr	r1, [r7, #28]
 8008c24:	6a3a      	ldr	r2, [r7, #32]
 8008c26:	e841 2300 	strex	r3, r2, [r1]
 8008c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e5      	bne.n	8008bfe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	d10a      	bne.n	8008c56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fd97 	bl	8008790 <HAL_UARTEx_RxEventCallback>
 8008c62:	e002      	b.n	8008c6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff fd7f 	bl	8008768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e002      	b.n	8008c74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e000      	b.n	8008c74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008c72:	2302      	movs	r3, #2
  }
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3730      	adds	r7, #48	@ 0x30
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c80:	b0c0      	sub	sp, #256	@ 0x100
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c98:	68d9      	ldr	r1, [r3, #12]
 8008c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	ea40 0301 	orr.w	r3, r0, r1
 8008ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008cd4:	f021 010c 	bic.w	r1, r1, #12
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ce2:	430b      	orrs	r3, r1
 8008ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cf6:	6999      	ldr	r1, [r3, #24]
 8008cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	ea40 0301 	orr.w	r3, r0, r1
 8008d02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8008f48 <UART_SetConfig+0x2cc>)
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d005      	beq.n	8008d1c <UART_SetConfig+0xa0>
 8008d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	4b8d      	ldr	r3, [pc, #564]	@ (8008f4c <UART_SetConfig+0x2d0>)
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d104      	bne.n	8008d26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d1c:	f7fd fd74 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8008d20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008d24:	e003      	b.n	8008d2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d26:	f7fd fd5b 	bl	80067e0 <HAL_RCC_GetPCLK1Freq>
 8008d2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d38:	f040 810c 	bne.w	8008f54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008d4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008d4e:	4622      	mov	r2, r4
 8008d50:	462b      	mov	r3, r5
 8008d52:	1891      	adds	r1, r2, r2
 8008d54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d56:	415b      	adcs	r3, r3
 8008d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008d5e:	4621      	mov	r1, r4
 8008d60:	eb12 0801 	adds.w	r8, r2, r1
 8008d64:	4629      	mov	r1, r5
 8008d66:	eb43 0901 	adc.w	r9, r3, r1
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d7e:	4690      	mov	r8, r2
 8008d80:	4699      	mov	r9, r3
 8008d82:	4623      	mov	r3, r4
 8008d84:	eb18 0303 	adds.w	r3, r8, r3
 8008d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	eb49 0303 	adc.w	r3, r9, r3
 8008d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008da2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008daa:	460b      	mov	r3, r1
 8008dac:	18db      	adds	r3, r3, r3
 8008dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8008db0:	4613      	mov	r3, r2
 8008db2:	eb42 0303 	adc.w	r3, r2, r3
 8008db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008dc0:	f7f7 ff42 	bl	8000c48 <__aeabi_uldivmod>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4b61      	ldr	r3, [pc, #388]	@ (8008f50 <UART_SetConfig+0x2d4>)
 8008dca:	fba3 2302 	umull	r2, r3, r3, r2
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	011c      	lsls	r4, r3, #4
 8008dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ddc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008de0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008de4:	4642      	mov	r2, r8
 8008de6:	464b      	mov	r3, r9
 8008de8:	1891      	adds	r1, r2, r2
 8008dea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008dec:	415b      	adcs	r3, r3
 8008dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008df4:	4641      	mov	r1, r8
 8008df6:	eb12 0a01 	adds.w	sl, r2, r1
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	eb43 0b01 	adc.w	fp, r3, r1
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e14:	4692      	mov	sl, r2
 8008e16:	469b      	mov	fp, r3
 8008e18:	4643      	mov	r3, r8
 8008e1a:	eb1a 0303 	adds.w	r3, sl, r3
 8008e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e22:	464b      	mov	r3, r9
 8008e24:	eb4b 0303 	adc.w	r3, fp, r3
 8008e28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008e3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e40:	460b      	mov	r3, r1
 8008e42:	18db      	adds	r3, r3, r3
 8008e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e46:	4613      	mov	r3, r2
 8008e48:	eb42 0303 	adc.w	r3, r2, r3
 8008e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008e56:	f7f7 fef7 	bl	8000c48 <__aeabi_uldivmod>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4b3b      	ldr	r3, [pc, #236]	@ (8008f50 <UART_SetConfig+0x2d4>)
 8008e62:	fba3 2301 	umull	r2, r3, r3, r1
 8008e66:	095b      	lsrs	r3, r3, #5
 8008e68:	2264      	movs	r2, #100	@ 0x64
 8008e6a:	fb02 f303 	mul.w	r3, r2, r3
 8008e6e:	1acb      	subs	r3, r1, r3
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008e76:	4b36      	ldr	r3, [pc, #216]	@ (8008f50 <UART_SetConfig+0x2d4>)
 8008e78:	fba3 2302 	umull	r2, r3, r3, r2
 8008e7c:	095b      	lsrs	r3, r3, #5
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e84:	441c      	add	r4, r3
 8008e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	1891      	adds	r1, r2, r2
 8008e9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ea0:	415b      	adcs	r3, r3
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	1851      	adds	r1, r2, r1
 8008eac:	6339      	str	r1, [r7, #48]	@ 0x30
 8008eae:	4649      	mov	r1, r9
 8008eb0:	414b      	adcs	r3, r1
 8008eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	00cb      	lsls	r3, r1, #3
 8008ec4:	4651      	mov	r1, sl
 8008ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eca:	4651      	mov	r1, sl
 8008ecc:	00ca      	lsls	r2, r1, #3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	189b      	adds	r3, r3, r2
 8008ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008edc:	464b      	mov	r3, r9
 8008ede:	460a      	mov	r2, r1
 8008ee0:	eb42 0303 	adc.w	r3, r2, r3
 8008ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008efc:	460b      	mov	r3, r1
 8008efe:	18db      	adds	r3, r3, r3
 8008f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f02:	4613      	mov	r3, r2
 8008f04:	eb42 0303 	adc.w	r3, r2, r3
 8008f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008f12:	f7f7 fe99 	bl	8000c48 <__aeabi_uldivmod>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f50 <UART_SetConfig+0x2d4>)
 8008f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f20:	095b      	lsrs	r3, r3, #5
 8008f22:	2164      	movs	r1, #100	@ 0x64
 8008f24:	fb01 f303 	mul.w	r3, r1, r3
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	3332      	adds	r3, #50	@ 0x32
 8008f2e:	4a08      	ldr	r2, [pc, #32]	@ (8008f50 <UART_SetConfig+0x2d4>)
 8008f30:	fba2 2303 	umull	r2, r3, r2, r3
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	f003 0207 	and.w	r2, r3, #7
 8008f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4422      	add	r2, r4
 8008f42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f44:	e106      	b.n	8009154 <UART_SetConfig+0x4d8>
 8008f46:	bf00      	nop
 8008f48:	40011000 	.word	0x40011000
 8008f4c:	40011400 	.word	0x40011400
 8008f50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008f62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008f66:	4642      	mov	r2, r8
 8008f68:	464b      	mov	r3, r9
 8008f6a:	1891      	adds	r1, r2, r2
 8008f6c:	6239      	str	r1, [r7, #32]
 8008f6e:	415b      	adcs	r3, r3
 8008f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f76:	4641      	mov	r1, r8
 8008f78:	1854      	adds	r4, r2, r1
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	eb43 0501 	adc.w	r5, r3, r1
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	00eb      	lsls	r3, r5, #3
 8008f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f8e:	00e2      	lsls	r2, r4, #3
 8008f90:	4614      	mov	r4, r2
 8008f92:	461d      	mov	r5, r3
 8008f94:	4643      	mov	r3, r8
 8008f96:	18e3      	adds	r3, r4, r3
 8008f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	eb45 0303 	adc.w	r3, r5, r3
 8008fa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	008b      	lsls	r3, r1, #2
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fcc:	4621      	mov	r1, r4
 8008fce:	008a      	lsls	r2, r1, #2
 8008fd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008fd4:	f7f7 fe38 	bl	8000c48 <__aeabi_uldivmod>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4b60      	ldr	r3, [pc, #384]	@ (8009160 <UART_SetConfig+0x4e4>)
 8008fde:	fba3 2302 	umull	r2, r3, r3, r2
 8008fe2:	095b      	lsrs	r3, r3, #5
 8008fe4:	011c      	lsls	r4, r3, #4
 8008fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ff0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	1891      	adds	r1, r2, r2
 8008ffe:	61b9      	str	r1, [r7, #24]
 8009000:	415b      	adcs	r3, r3
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009008:	4641      	mov	r1, r8
 800900a:	1851      	adds	r1, r2, r1
 800900c:	6139      	str	r1, [r7, #16]
 800900e:	4649      	mov	r1, r9
 8009010:	414b      	adcs	r3, r1
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	f04f 0300 	mov.w	r3, #0
 800901c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009020:	4659      	mov	r1, fp
 8009022:	00cb      	lsls	r3, r1, #3
 8009024:	4651      	mov	r1, sl
 8009026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800902a:	4651      	mov	r1, sl
 800902c:	00ca      	lsls	r2, r1, #3
 800902e:	4610      	mov	r0, r2
 8009030:	4619      	mov	r1, r3
 8009032:	4603      	mov	r3, r0
 8009034:	4642      	mov	r2, r8
 8009036:	189b      	adds	r3, r3, r2
 8009038:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800903c:	464b      	mov	r3, r9
 800903e:	460a      	mov	r2, r1
 8009040:	eb42 0303 	adc.w	r3, r2, r3
 8009044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009052:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009060:	4649      	mov	r1, r9
 8009062:	008b      	lsls	r3, r1, #2
 8009064:	4641      	mov	r1, r8
 8009066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800906a:	4641      	mov	r1, r8
 800906c:	008a      	lsls	r2, r1, #2
 800906e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009072:	f7f7 fde9 	bl	8000c48 <__aeabi_uldivmod>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4611      	mov	r1, r2
 800907c:	4b38      	ldr	r3, [pc, #224]	@ (8009160 <UART_SetConfig+0x4e4>)
 800907e:	fba3 2301 	umull	r2, r3, r3, r1
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	2264      	movs	r2, #100	@ 0x64
 8009086:	fb02 f303 	mul.w	r3, r2, r3
 800908a:	1acb      	subs	r3, r1, r3
 800908c:	011b      	lsls	r3, r3, #4
 800908e:	3332      	adds	r3, #50	@ 0x32
 8009090:	4a33      	ldr	r2, [pc, #204]	@ (8009160 <UART_SetConfig+0x4e4>)
 8009092:	fba2 2303 	umull	r2, r3, r2, r3
 8009096:	095b      	lsrs	r3, r3, #5
 8009098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800909c:	441c      	add	r4, r3
 800909e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090a2:	2200      	movs	r2, #0
 80090a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80090a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80090a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80090ac:	4642      	mov	r2, r8
 80090ae:	464b      	mov	r3, r9
 80090b0:	1891      	adds	r1, r2, r2
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	415b      	adcs	r3, r3
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090bc:	4641      	mov	r1, r8
 80090be:	1851      	adds	r1, r2, r1
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	4649      	mov	r1, r9
 80090c4:	414b      	adcs	r3, r1
 80090c6:	607b      	str	r3, [r7, #4]
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	f04f 0300 	mov.w	r3, #0
 80090d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090d4:	4659      	mov	r1, fp
 80090d6:	00cb      	lsls	r3, r1, #3
 80090d8:	4651      	mov	r1, sl
 80090da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090de:	4651      	mov	r1, sl
 80090e0:	00ca      	lsls	r2, r1, #3
 80090e2:	4610      	mov	r0, r2
 80090e4:	4619      	mov	r1, r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	4642      	mov	r2, r8
 80090ea:	189b      	adds	r3, r3, r2
 80090ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090ee:	464b      	mov	r3, r9
 80090f0:	460a      	mov	r2, r1
 80090f2:	eb42 0303 	adc.w	r3, r2, r3
 80090f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	663b      	str	r3, [r7, #96]	@ 0x60
 8009102:	667a      	str	r2, [r7, #100]	@ 0x64
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009110:	4649      	mov	r1, r9
 8009112:	008b      	lsls	r3, r1, #2
 8009114:	4641      	mov	r1, r8
 8009116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800911a:	4641      	mov	r1, r8
 800911c:	008a      	lsls	r2, r1, #2
 800911e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009122:	f7f7 fd91 	bl	8000c48 <__aeabi_uldivmod>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <UART_SetConfig+0x4e4>)
 800912c:	fba3 1302 	umull	r1, r3, r3, r2
 8009130:	095b      	lsrs	r3, r3, #5
 8009132:	2164      	movs	r1, #100	@ 0x64
 8009134:	fb01 f303 	mul.w	r3, r1, r3
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	3332      	adds	r3, #50	@ 0x32
 800913e:	4a08      	ldr	r2, [pc, #32]	@ (8009160 <UART_SetConfig+0x4e4>)
 8009140:	fba2 2303 	umull	r2, r3, r2, r3
 8009144:	095b      	lsrs	r3, r3, #5
 8009146:	f003 020f 	and.w	r2, r3, #15
 800914a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4422      	add	r2, r4
 8009152:	609a      	str	r2, [r3, #8]
}
 8009154:	bf00      	nop
 8009156:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800915a:	46bd      	mov	sp, r7
 800915c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009160:	51eb851f 	.word	0x51eb851f

08009164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009164:	b084      	sub	sp, #16
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	f107 001c 	add.w	r0, r7, #28
 8009172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009176:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800917a:	2b01      	cmp	r3, #1
 800917c:	d123      	bne.n	80091c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009182:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d105      	bne.n	80091ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 fae8 	bl	800a790 <USB_CoreReset>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	e01b      	b.n	80091fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 fadc 	bl	800a790 <USB_CoreReset>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d106      	bne.n	80091f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80091f0:	e005      	b.n	80091fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091fe:	7fbb      	ldrb	r3, [r7, #30]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d10b      	bne.n	800921c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f043 0206 	orr.w	r2, r3, #6
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f043 0220 	orr.w	r2, r3, #32
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009228:	b004      	add	sp, #16
 800922a:	4770      	bx	lr

0800922c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d165      	bne.n	800930c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4a41      	ldr	r2, [pc, #260]	@ (8009348 <USB_SetTurnaroundTime+0x11c>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d906      	bls.n	8009256 <USB_SetTurnaroundTime+0x2a>
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4a40      	ldr	r2, [pc, #256]	@ (800934c <USB_SetTurnaroundTime+0x120>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d202      	bcs.n	8009256 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009250:	230f      	movs	r3, #15
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e062      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4a3c      	ldr	r2, [pc, #240]	@ (800934c <USB_SetTurnaroundTime+0x120>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d306      	bcc.n	800926c <USB_SetTurnaroundTime+0x40>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	4a3b      	ldr	r2, [pc, #236]	@ (8009350 <USB_SetTurnaroundTime+0x124>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d202      	bcs.n	800926c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009266:	230e      	movs	r3, #14
 8009268:	617b      	str	r3, [r7, #20]
 800926a:	e057      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4a38      	ldr	r2, [pc, #224]	@ (8009350 <USB_SetTurnaroundTime+0x124>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d306      	bcc.n	8009282 <USB_SetTurnaroundTime+0x56>
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	4a37      	ldr	r2, [pc, #220]	@ (8009354 <USB_SetTurnaroundTime+0x128>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d202      	bcs.n	8009282 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800927c:	230d      	movs	r3, #13
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e04c      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	4a33      	ldr	r2, [pc, #204]	@ (8009354 <USB_SetTurnaroundTime+0x128>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d306      	bcc.n	8009298 <USB_SetTurnaroundTime+0x6c>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	4a32      	ldr	r2, [pc, #200]	@ (8009358 <USB_SetTurnaroundTime+0x12c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d802      	bhi.n	8009298 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009292:	230c      	movs	r3, #12
 8009294:	617b      	str	r3, [r7, #20]
 8009296:	e041      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	4a2f      	ldr	r2, [pc, #188]	@ (8009358 <USB_SetTurnaroundTime+0x12c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d906      	bls.n	80092ae <USB_SetTurnaroundTime+0x82>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4a2e      	ldr	r2, [pc, #184]	@ (800935c <USB_SetTurnaroundTime+0x130>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d802      	bhi.n	80092ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80092a8:	230b      	movs	r3, #11
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	e036      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4a2a      	ldr	r2, [pc, #168]	@ (800935c <USB_SetTurnaroundTime+0x130>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d906      	bls.n	80092c4 <USB_SetTurnaroundTime+0x98>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	4a29      	ldr	r2, [pc, #164]	@ (8009360 <USB_SetTurnaroundTime+0x134>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d802      	bhi.n	80092c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80092be:	230a      	movs	r3, #10
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	e02b      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4a26      	ldr	r2, [pc, #152]	@ (8009360 <USB_SetTurnaroundTime+0x134>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d906      	bls.n	80092da <USB_SetTurnaroundTime+0xae>
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	4a25      	ldr	r2, [pc, #148]	@ (8009364 <USB_SetTurnaroundTime+0x138>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d202      	bcs.n	80092da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80092d4:	2309      	movs	r3, #9
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	e020      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	4a21      	ldr	r2, [pc, #132]	@ (8009364 <USB_SetTurnaroundTime+0x138>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d306      	bcc.n	80092f0 <USB_SetTurnaroundTime+0xc4>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	4a20      	ldr	r2, [pc, #128]	@ (8009368 <USB_SetTurnaroundTime+0x13c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d802      	bhi.n	80092f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80092ea:	2308      	movs	r3, #8
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	e015      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	4a1d      	ldr	r2, [pc, #116]	@ (8009368 <USB_SetTurnaroundTime+0x13c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d906      	bls.n	8009306 <USB_SetTurnaroundTime+0xda>
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	4a1c      	ldr	r2, [pc, #112]	@ (800936c <USB_SetTurnaroundTime+0x140>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d202      	bcs.n	8009306 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009300:	2307      	movs	r3, #7
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e00a      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009306:	2306      	movs	r3, #6
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	e007      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009312:	2309      	movs	r3, #9
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	e001      	b.n	800931c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009318:	2309      	movs	r3, #9
 800931a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68da      	ldr	r2, [r3, #12]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	029b      	lsls	r3, r3, #10
 8009330:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009334:	431a      	orrs	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	371c      	adds	r7, #28
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	00d8acbf 	.word	0x00d8acbf
 800934c:	00e4e1c0 	.word	0x00e4e1c0
 8009350:	00f42400 	.word	0x00f42400
 8009354:	01067380 	.word	0x01067380
 8009358:	011a499f 	.word	0x011a499f
 800935c:	01312cff 	.word	0x01312cff
 8009360:	014ca43f 	.word	0x014ca43f
 8009364:	016e3600 	.word	0x016e3600
 8009368:	01a6ab1f 	.word	0x01a6ab1f
 800936c:	01e84800 	.word	0x01e84800

08009370 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f043 0201 	orr.w	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f023 0201 	bic.w	r2, r3, #1
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d115      	bne.n	8009402 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093e2:	200a      	movs	r0, #10
 80093e4:	f7fa fc1c 	bl	8003c20 <HAL_Delay>
      ms += 10U;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	330a      	adds	r3, #10
 80093ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 f93f 	bl	800a672 <USB_GetMode>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d01e      	beq.n	8009438 <USB_SetCurrentMode+0x84>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80093fe:	d9f0      	bls.n	80093e2 <USB_SetCurrentMode+0x2e>
 8009400:	e01a      	b.n	8009438 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d115      	bne.n	8009434 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009414:	200a      	movs	r0, #10
 8009416:	f7fa fc03 	bl	8003c20 <HAL_Delay>
      ms += 10U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	330a      	adds	r3, #10
 800941e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 f926 	bl	800a672 <USB_GetMode>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <USB_SetCurrentMode+0x84>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009430:	d9f0      	bls.n	8009414 <USB_SetCurrentMode+0x60>
 8009432:	e001      	b.n	8009438 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e005      	b.n	8009444 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2bc8      	cmp	r3, #200	@ 0xc8
 800943c:	d101      	bne.n	8009442 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e000      	b.n	8009444 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800944c:	b084      	sub	sp, #16
 800944e:	b580      	push	{r7, lr}
 8009450:	b086      	sub	sp, #24
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800945a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009466:	2300      	movs	r3, #0
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	e009      	b.n	8009480 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	3340      	adds	r3, #64	@ 0x40
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	2200      	movs	r2, #0
 8009478:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	3301      	adds	r3, #1
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b0e      	cmp	r3, #14
 8009484:	d9f2      	bls.n	800946c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009486:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800948a:	2b00      	cmp	r3, #0
 800948c:	d11c      	bne.n	80094c8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800949c:	f043 0302 	orr.w	r3, r3, #2
 80094a0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80094c6:	e00b      	b.n	80094e0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094cc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094e6:	461a      	mov	r2, r3
 80094e8:	2300      	movs	r3, #0
 80094ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d10d      	bne.n	8009510 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d104      	bne.n	8009506 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094fc:	2100      	movs	r1, #0
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f968 	bl	80097d4 <USB_SetDevSpeed>
 8009504:	e008      	b.n	8009518 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009506:	2101      	movs	r1, #1
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f963 	bl	80097d4 <USB_SetDevSpeed>
 800950e:	e003      	b.n	8009518 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009510:	2103      	movs	r1, #3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f95e 	bl	80097d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009518:	2110      	movs	r1, #16
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f8fa 	bl	8009714 <USB_FlushTxFifo>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f924 	bl	8009778 <USB_FlushRxFifo>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009540:	461a      	mov	r2, r3
 8009542:	2300      	movs	r3, #0
 8009544:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954c:	461a      	mov	r2, r3
 800954e:	2300      	movs	r3, #0
 8009550:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009558:	461a      	mov	r2, r3
 800955a:	2300      	movs	r3, #0
 800955c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800955e:	2300      	movs	r3, #0
 8009560:	613b      	str	r3, [r7, #16]
 8009562:	e043      	b.n	80095ec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800957a:	d118      	bne.n	80095ae <USB_DevInit+0x162>
    {
      if (i == 0U)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4413      	add	r3, r2
 800958a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800958e:	461a      	mov	r2, r3
 8009590:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	e013      	b.n	80095c0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a4:	461a      	mov	r2, r3
 80095a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	e008      	b.n	80095c0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ba:	461a      	mov	r2, r3
 80095bc:	2300      	movs	r3, #0
 80095be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095cc:	461a      	mov	r2, r3
 80095ce:	2300      	movs	r3, #0
 80095d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095de:	461a      	mov	r2, r3
 80095e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	3301      	adds	r3, #1
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80095f0:	461a      	mov	r2, r3
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d3b5      	bcc.n	8009564 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095f8:	2300      	movs	r3, #0
 80095fa:	613b      	str	r3, [r7, #16]
 80095fc:	e043      	b.n	8009686 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009614:	d118      	bne.n	8009648 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009628:	461a      	mov	r2, r3
 800962a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	e013      	b.n	800965a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963e:	461a      	mov	r2, r3
 8009640:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	e008      	b.n	800965a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009654:	461a      	mov	r2, r3
 8009656:	2300      	movs	r3, #0
 8009658:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009666:	461a      	mov	r2, r3
 8009668:	2300      	movs	r3, #0
 800966a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009678:	461a      	mov	r2, r3
 800967a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800967e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	3301      	adds	r3, #1
 8009684:	613b      	str	r3, [r7, #16]
 8009686:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800968a:	461a      	mov	r2, r3
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	4293      	cmp	r3, r2
 8009690:	d3b5      	bcc.n	80095fe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80096b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d105      	bne.n	80096c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	f043 0210 	orr.w	r2, r3, #16
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699a      	ldr	r2, [r3, #24]
 80096cc:	4b10      	ldr	r3, [pc, #64]	@ (8009710 <USB_DevInit+0x2c4>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	f043 0208 	orr.w	r2, r3, #8
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d107      	bne.n	8009700 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096f8:	f043 0304 	orr.w	r3, r3, #4
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009700:	7dfb      	ldrb	r3, [r7, #23]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800970c:	b004      	add	sp, #16
 800970e:	4770      	bx	lr
 8009710:	803c3800 	.word	0x803c3800

08009714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3301      	adds	r3, #1
 8009726:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800972e:	d901      	bls.n	8009734 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e01b      	b.n	800976c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	daf2      	bge.n	8009722 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800973c:	2300      	movs	r3, #0
 800973e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	019b      	lsls	r3, r3, #6
 8009744:	f043 0220 	orr.w	r2, r3, #32
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3301      	adds	r3, #1
 8009750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009758:	d901      	bls.n	800975e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	e006      	b.n	800976c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b20      	cmp	r3, #32
 8009768:	d0f0      	beq.n	800974c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009780:	2300      	movs	r3, #0
 8009782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3301      	adds	r3, #1
 8009788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009790:	d901      	bls.n	8009796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e018      	b.n	80097c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	daf2      	bge.n	8009784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2210      	movs	r2, #16
 80097a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3301      	adds	r3, #1
 80097ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097b4:	d901      	bls.n	80097ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e006      	b.n	80097c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	f003 0310 	and.w	r3, r3, #16
 80097c2:	2b10      	cmp	r3, #16
 80097c4:	d0f0      	beq.n	80097a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	460b      	mov	r3, r1
 80097de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097f4:	4313      	orrs	r3, r2
 80097f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009806:	b480      	push	{r7}
 8009808:	b087      	sub	sp, #28
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f003 0306 	and.w	r3, r3, #6
 800981e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009826:	2300      	movs	r3, #0
 8009828:	75fb      	strb	r3, [r7, #23]
 800982a:	e00a      	b.n	8009842 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b02      	cmp	r3, #2
 8009830:	d002      	beq.n	8009838 <USB_GetDevSpeed+0x32>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b06      	cmp	r3, #6
 8009836:	d102      	bne.n	800983e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009838:	2302      	movs	r3, #2
 800983a:	75fb      	strb	r3, [r7, #23]
 800983c:	e001      	b.n	8009842 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800983e:	230f      	movs	r3, #15
 8009840:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
}
 8009844:	4618      	mov	r0, r3
 8009846:	371c      	adds	r7, #28
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d13a      	bne.n	80098e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009872:	69da      	ldr	r2, [r3, #28]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	2101      	movs	r1, #1
 800987e:	fa01 f303 	lsl.w	r3, r1, r3
 8009882:	b29b      	uxth	r3, r3
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800988a:	4313      	orrs	r3, r2
 800988c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d155      	bne.n	8009950 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	791b      	ldrb	r3, [r3, #4]
 80098be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	059b      	lsls	r3, r3, #22
 80098c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098c8:	4313      	orrs	r3, r2
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	0151      	lsls	r1, r2, #5
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	440a      	add	r2, r1
 80098d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	e036      	b.n	8009950 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e8:	69da      	ldr	r2, [r3, #28]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f003 030f 	and.w	r3, r3, #15
 80098f2:	2101      	movs	r1, #1
 80098f4:	fa01 f303 	lsl.w	r3, r1, r3
 80098f8:	041b      	lsls	r3, r3, #16
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009900:	4313      	orrs	r3, r2
 8009902:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d11a      	bne.n	8009950 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4413      	add	r3, r2
 8009922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	791b      	ldrb	r3, [r3, #4]
 8009934:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009936:	430b      	orrs	r3, r1
 8009938:	4313      	orrs	r3, r2
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	0151      	lsls	r1, r2, #5
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	440a      	add	r2, r1
 8009942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800994a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800994e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
	...

08009960 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d161      	bne.n	8009a40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800998e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009992:	d11f      	bne.n	80099d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	f003 030f 	and.w	r3, r3, #15
 80099e4:	2101      	movs	r1, #1
 80099e6:	fa01 f303 	lsl.w	r3, r1, r3
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	43db      	mvns	r3, r3
 80099ee:	68f9      	ldr	r1, [r7, #12]
 80099f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099f4:	4013      	ands	r3, r2
 80099f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099fe:	69da      	ldr	r2, [r3, #28]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	f003 030f 	and.w	r3, r3, #15
 8009a08:	2101      	movs	r1, #1
 8009a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	43db      	mvns	r3, r3
 8009a12:	68f9      	ldr	r1, [r7, #12]
 8009a14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a18:	4013      	ands	r3, r2
 8009a1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	0159      	lsls	r1, r3, #5
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	440b      	add	r3, r1
 8009a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a36:	4619      	mov	r1, r3
 8009a38:	4b35      	ldr	r3, [pc, #212]	@ (8009b10 <USB_DeactivateEndpoint+0x1b0>)
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	600b      	str	r3, [r1, #0]
 8009a3e:	e060      	b.n	8009b02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a56:	d11f      	bne.n	8009a98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	0151      	lsls	r1, r2, #5
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	440a      	add	r2, r1
 8009a6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	0151      	lsls	r1, r2, #5
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	440a      	add	r2, r1
 8009a8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8009aae:	041b      	lsls	r3, r3, #16
 8009ab0:	43db      	mvns	r3, r3
 8009ab2:	68f9      	ldr	r1, [r7, #12]
 8009ab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ab8:	4013      	ands	r3, r2
 8009aba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ac2:	69da      	ldr	r2, [r3, #28]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	f003 030f 	and.w	r3, r3, #15
 8009acc:	2101      	movs	r1, #1
 8009ace:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad2:	041b      	lsls	r3, r3, #16
 8009ad4:	43db      	mvns	r3, r3
 8009ad6:	68f9      	ldr	r1, [r7, #12]
 8009ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009adc:	4013      	ands	r3, r2
 8009ade:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	0159      	lsls	r1, r3, #5
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	440b      	add	r3, r1
 8009af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009afa:	4619      	mov	r1, r3
 8009afc:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <USB_DeactivateEndpoint+0x1b4>)
 8009afe:	4013      	ands	r3, r2
 8009b00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	ec337800 	.word	0xec337800
 8009b14:	eff37800 	.word	0xeff37800

08009b18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08a      	sub	sp, #40	@ 0x28
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	4613      	mov	r3, r2
 8009b24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	f040 817f 	bne.w	8009e38 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d132      	bne.n	8009ba8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	015a      	lsls	r2, r3, #5
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	0151      	lsls	r1, r2, #5
 8009b54:	69fa      	ldr	r2, [r7, #28]
 8009b56:	440a      	add	r2, r1
 8009b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b5c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b60:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	0151      	lsls	r1, r2, #5
 8009b78:	69fa      	ldr	r2, [r7, #28]
 8009b7a:	440a      	add	r2, r1
 8009b7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	0151      	lsls	r1, r2, #5
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ba0:	0cdb      	lsrs	r3, r3, #19
 8009ba2:	04db      	lsls	r3, r3, #19
 8009ba4:	6113      	str	r3, [r2, #16]
 8009ba6:	e097      	b.n	8009cd8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	0151      	lsls	r1, r2, #5
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	440a      	add	r2, r1
 8009bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bc2:	0cdb      	lsrs	r3, r3, #19
 8009bc4:	04db      	lsls	r3, r3, #19
 8009bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	0151      	lsls	r1, r2, #5
 8009bda:	69fa      	ldr	r2, [r7, #28]
 8009bdc:	440a      	add	r2, r1
 8009bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009be2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009be6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009bea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d11a      	bne.n	8009c28 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	691a      	ldr	r2, [r3, #16]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d903      	bls.n	8009c06 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	689a      	ldr	r2, [r3, #8]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c24:	6113      	str	r3, [r2, #16]
 8009c26:	e044      	b.n	8009cb2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	691a      	ldr	r2, [r3, #16]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	4413      	add	r3, r2
 8009c32:	1e5a      	subs	r2, r3, #1
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	8afb      	ldrh	r3, [r7, #22]
 8009c4e:	04d9      	lsls	r1, r3, #19
 8009c50:	4ba4      	ldr	r3, [pc, #656]	@ (8009ee4 <USB_EPStartXfer+0x3cc>)
 8009c52:	400b      	ands	r3, r1
 8009c54:	69b9      	ldr	r1, [r7, #24]
 8009c56:	0148      	lsls	r0, r1, #5
 8009c58:	69f9      	ldr	r1, [r7, #28]
 8009c5a:	4401      	add	r1, r0
 8009c5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c60:	4313      	orrs	r3, r2
 8009c62:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	791b      	ldrb	r3, [r3, #4]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d122      	bne.n	8009cb2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c86:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009c8a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c98:	691a      	ldr	r2, [r3, #16]
 8009c9a:	8afb      	ldrh	r3, [r7, #22]
 8009c9c:	075b      	lsls	r3, r3, #29
 8009c9e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009ca2:	69b9      	ldr	r1, [r7, #24]
 8009ca4:	0148      	lsls	r0, r1, #5
 8009ca6:	69f9      	ldr	r1, [r7, #28]
 8009ca8:	4401      	add	r1, r0
 8009caa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cc8:	69b9      	ldr	r1, [r7, #24]
 8009cca:	0148      	lsls	r0, r1, #5
 8009ccc:	69f9      	ldr	r1, [r7, #28]
 8009cce:	4401      	add	r1, r0
 8009cd0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d14b      	bne.n	8009d76 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d009      	beq.n	8009cfa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	69db      	ldr	r3, [r3, #28]
 8009cf8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	791b      	ldrb	r3, [r3, #4]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d128      	bne.n	8009d54 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d110      	bne.n	8009d34 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	0151      	lsls	r1, r2, #5
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	440a      	add	r2, r1
 8009d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e00f      	b.n	8009d54 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	0151      	lsls	r1, r2, #5
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	440a      	add	r2, r1
 8009d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d52:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	0151      	lsls	r1, r2, #5
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	440a      	add	r2, r1
 8009d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	e166      	b.n	800a044 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	0151      	lsls	r1, r2, #5
 8009d88:	69fa      	ldr	r2, [r7, #28]
 8009d8a:	440a      	add	r2, r1
 8009d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d90:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d94:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	791b      	ldrb	r3, [r3, #4]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d015      	beq.n	8009dca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 814e 	beq.w	800a044 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	2101      	movs	r1, #1
 8009dba:	fa01 f303 	lsl.w	r3, r1, r3
 8009dbe:	69f9      	ldr	r1, [r7, #28]
 8009dc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	634b      	str	r3, [r1, #52]	@ 0x34
 8009dc8:	e13c      	b.n	800a044 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d110      	bne.n	8009dfc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	69ba      	ldr	r2, [r7, #24]
 8009dea:	0151      	lsls	r1, r2, #5
 8009dec:	69fa      	ldr	r2, [r7, #28]
 8009dee:	440a      	add	r2, r1
 8009df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009df4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	e00f      	b.n	8009e1c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	0151      	lsls	r1, r2, #5
 8009e0e:	69fa      	ldr	r2, [r7, #28]
 8009e10:	440a      	add	r2, r1
 8009e12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e1a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	68d9      	ldr	r1, [r3, #12]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	781a      	ldrb	r2, [r3, #0]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	b298      	uxth	r0, r3
 8009e2a:	79fb      	ldrb	r3, [r7, #7]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	4603      	mov	r3, r0
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f9b9 	bl	800a1a8 <USB_WritePacket>
 8009e36:	e105      	b.n	800a044 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	0151      	lsls	r1, r2, #5
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e52:	0cdb      	lsrs	r3, r3, #19
 8009e54:	04db      	lsls	r3, r3, #19
 8009e56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	0151      	lsls	r1, r2, #5
 8009e6a:	69fa      	ldr	r2, [r7, #28]
 8009e6c:	440a      	add	r2, r1
 8009e6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e72:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e76:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e7a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d132      	bne.n	8009ee8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	689a      	ldr	r2, [r3, #8]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea6:	691a      	ldr	r2, [r3, #16]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eb0:	69b9      	ldr	r1, [r7, #24]
 8009eb2:	0148      	lsls	r0, r1, #5
 8009eb4:	69f9      	ldr	r1, [r7, #28]
 8009eb6:	4401      	add	r1, r0
 8009eb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	0151      	lsls	r1, r2, #5
 8009ed2:	69fa      	ldr	r2, [r7, #28]
 8009ed4:	440a      	add	r2, r1
 8009ed6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ede:	6113      	str	r3, [r2, #16]
 8009ee0:	e062      	b.n	8009fa8 <USB_EPStartXfer+0x490>
 8009ee2:	bf00      	nop
 8009ee4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d123      	bne.n	8009f38 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009efc:	691a      	ldr	r2, [r3, #16]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f06:	69b9      	ldr	r1, [r7, #24]
 8009f08:	0148      	lsls	r0, r1, #5
 8009f0a:	69f9      	ldr	r1, [r7, #28]
 8009f0c:	4401      	add	r1, r0
 8009f0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f12:	4313      	orrs	r3, r2
 8009f14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	69fa      	ldr	r2, [r7, #28]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f34:	6113      	str	r3, [r2, #16]
 8009f36:	e037      	b.n	8009fa8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	4413      	add	r3, r2
 8009f42:	1e5a      	subs	r2, r3, #1
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f4c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	8afa      	ldrh	r2, [r7, #22]
 8009f54:	fb03 f202 	mul.w	r2, r3, r2
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f68:	691a      	ldr	r2, [r3, #16]
 8009f6a:	8afb      	ldrh	r3, [r7, #22]
 8009f6c:	04d9      	lsls	r1, r3, #19
 8009f6e:	4b38      	ldr	r3, [pc, #224]	@ (800a050 <USB_EPStartXfer+0x538>)
 8009f70:	400b      	ands	r3, r1
 8009f72:	69b9      	ldr	r1, [r7, #24]
 8009f74:	0148      	lsls	r0, r1, #5
 8009f76:	69f9      	ldr	r1, [r7, #28]
 8009f78:	4401      	add	r1, r0
 8009f7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8e:	691a      	ldr	r2, [r3, #16]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f98:	69b9      	ldr	r1, [r7, #24]
 8009f9a:	0148      	lsls	r0, r1, #5
 8009f9c:	69f9      	ldr	r1, [r7, #28]
 8009f9e:	4401      	add	r1, r0
 8009fa0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d10d      	bne.n	8009fca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d009      	beq.n	8009fca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	68d9      	ldr	r1, [r3, #12]
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc6:	460a      	mov	r2, r1
 8009fc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d128      	bne.n	800a024 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d110      	bne.n	800a004 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	69fa      	ldr	r2, [r7, #28]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ffc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	e00f      	b.n	800a024 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69ba      	ldr	r2, [r7, #24]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a01e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a022:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	0151      	lsls	r1, r2, #5
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	440a      	add	r2, r1
 800a03a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a03e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3720      	adds	r7, #32
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	1ff80000 	.word	0x1ff80000

0800a054 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a05e:	2300      	movs	r3, #0
 800a060:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	785b      	ldrb	r3, [r3, #1]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d14a      	bne.n	800a108 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a086:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a08a:	f040 8086 	bne.w	800a19a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	7812      	ldrb	r2, [r2, #0]
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	7812      	ldrb	r2, [r2, #0]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d902      	bls.n	800a0ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ea:	e056      	b.n	800a19a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	015a      	lsls	r2, r3, #5
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a104:	d0e7      	beq.n	800a0d6 <USB_EPStopXfer+0x82>
 800a106:	e048      	b.n	800a19a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	015a      	lsls	r2, r3, #5
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	4413      	add	r3, r2
 800a112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a11c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a120:	d13b      	bne.n	800a19a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	7812      	ldrb	r2, [r2, #0]
 800a136:	0151      	lsls	r1, r2, #5
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	440a      	add	r2, r1
 800a13c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a140:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a144:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	7812      	ldrb	r2, [r2, #0]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a164:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a168:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a176:	4293      	cmp	r3, r2
 800a178:	d902      	bls.n	800a180 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	75fb      	strb	r3, [r7, #23]
          break;
 800a17e:	e00c      	b.n	800a19a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a198:	d0e7      	beq.n	800a16a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	371c      	adds	r7, #28
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b089      	sub	sp, #36	@ 0x24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	71fb      	strb	r3, [r7, #7]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d123      	bne.n	800a216 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1ce:	88bb      	ldrh	r3, [r7, #4]
 800a1d0:	3303      	adds	r3, #3
 800a1d2:	089b      	lsrs	r3, r3, #2
 800a1d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	61bb      	str	r3, [r7, #24]
 800a1da:	e018      	b.n	800a20e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1dc:	79fb      	ldrb	r3, [r7, #7]
 800a1de:	031a      	lsls	r2, r3, #12
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	3301      	adds	r3, #1
 800a200:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	3301      	adds	r3, #1
 800a206:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	3301      	adds	r3, #1
 800a20c:	61bb      	str	r3, [r7, #24]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	429a      	cmp	r2, r3
 800a214:	d3e2      	bcc.n	800a1dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3724      	adds	r7, #36	@ 0x24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a224:	b480      	push	{r7}
 800a226:	b08b      	sub	sp, #44	@ 0x2c
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	089b      	lsrs	r3, r3, #2
 800a23e:	b29b      	uxth	r3, r3
 800a240:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a242:	88fb      	ldrh	r3, [r7, #6]
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a24a:	2300      	movs	r3, #0
 800a24c:	623b      	str	r3, [r7, #32]
 800a24e:	e014      	b.n	800a27a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25e:	3301      	adds	r3, #1
 800a260:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	3301      	adds	r3, #1
 800a266:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	3301      	adds	r3, #1
 800a26c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	3301      	adds	r3, #1
 800a272:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	3301      	adds	r3, #1
 800a278:	623b      	str	r3, [r7, #32]
 800a27a:	6a3a      	ldr	r2, [r7, #32]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d3e6      	bcc.n	800a250 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a282:	8bfb      	ldrh	r3, [r7, #30]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01e      	beq.n	800a2c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a292:	461a      	mov	r2, r3
 800a294:	f107 0310 	add.w	r3, r7, #16
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	701a      	strb	r2, [r3, #0]
      i++;
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a2ba:	8bfb      	ldrh	r3, [r7, #30]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2c0:	8bfb      	ldrh	r3, [r7, #30]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1ea      	bne.n	800a29c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	372c      	adds	r7, #44	@ 0x2c
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	785b      	ldrb	r3, [r3, #1]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d12c      	bne.n	800a34a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	db12      	blt.n	800a328 <USB_EPSetStall+0x54>
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00f      	beq.n	800a328 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a322:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a326:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a342:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	e02b      	b.n	800a3a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	db12      	blt.n	800a382 <USB_EPSetStall+0xae>
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00f      	beq.n	800a382 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a37c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a380:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	440a      	add	r2, r1
 800a398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a39c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a3a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	785b      	ldrb	r3, [r3, #1]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d128      	bne.n	800a41e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	0151      	lsls	r1, r2, #5
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	440a      	add	r2, r1
 800a3e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a3ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	791b      	ldrb	r3, [r3, #4]
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d003      	beq.n	800a3fc <USB_EPClearStall+0x4c>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	791b      	ldrb	r3, [r3, #4]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d138      	bne.n	800a46e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	0151      	lsls	r1, r2, #5
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	440a      	add	r2, r1
 800a412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	e027      	b.n	800a46e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	4413      	add	r3, r2
 800a426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	0151      	lsls	r1, r2, #5
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	440a      	add	r2, r1
 800a434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a438:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a43c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	791b      	ldrb	r3, [r3, #4]
 800a442:	2b03      	cmp	r3, #3
 800a444:	d003      	beq.n	800a44e <USB_EPClearStall+0x9e>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	791b      	ldrb	r3, [r3, #4]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d10f      	bne.n	800a46e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	015a      	lsls	r2, r3, #5
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4413      	add	r3, r2
 800a456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	0151      	lsls	r1, r2, #5
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	440a      	add	r2, r1
 800a464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a46c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a49a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a49e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	011b      	lsls	r3, r3, #4
 800a4ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a4b0:	68f9      	ldr	r1, [r7, #12]
 800a4b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4f6:	f023 0302 	bic.w	r3, r3, #2
 800a4fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b085      	sub	sp, #20
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a524:	f023 0303 	bic.w	r3, r3, #3
 800a528:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a538:	f043 0302 	orr.w	r3, r3, #2
 800a53c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	695b      	ldr	r3, [r3, #20]
 800a558:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4013      	ands	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a564:	68fb      	ldr	r3, [r7, #12]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a572:	b480      	push	{r7}
 800a574:	b085      	sub	sp, #20
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a58e:	69db      	ldr	r3, [r3, #28]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	4013      	ands	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	0c1b      	lsrs	r3, r3, #16
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	b29b      	uxth	r3, r3
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b085      	sub	sp, #20
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	015a      	lsls	r2, r3, #5
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	4013      	ands	r3, r2
 800a606:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a608:	68bb      	ldr	r3, [r7, #8]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a616:	b480      	push	{r7}
 800a618:	b087      	sub	sp, #28
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	460b      	mov	r3, r1
 800a620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a638:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a63a:	78fb      	ldrb	r3, [r7, #3]
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	fa22 f303 	lsr.w	r3, r2, r3
 800a646:	01db      	lsls	r3, r3, #7
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4013      	ands	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a664:	68bb      	ldr	r3, [r7, #8]
}
 800a666:	4618      	mov	r0, r3
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	f003 0301 	and.w	r3, r3, #1
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a68e:	b480      	push	{r7}
 800a690:	b085      	sub	sp, #20
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a6ac:	f023 0307 	bic.w	r3, r3, #7
 800a6b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	333c      	adds	r3, #60	@ 0x3c
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	4a26      	ldr	r2, [pc, #152]	@ (800a78c <USB_EP0_OutStart+0xb8>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d90a      	bls.n	800a70e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a708:	d101      	bne.n	800a70e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e037      	b.n	800a77e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a714:	461a      	mov	r2, r3
 800a716:	2300      	movs	r3, #0
 800a718:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a728:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a72c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a73c:	f043 0318 	orr.w	r3, r3, #24
 800a740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a750:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a754:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a756:	7afb      	ldrb	r3, [r7, #11]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d10f      	bne.n	800a77c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a762:	461a      	mov	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	697a      	ldr	r2, [r7, #20]
 800a772:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a776:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a77a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	4f54300a 	.word	0x4f54300a

0800a790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7a8:	d901      	bls.n	800a7ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e01b      	b.n	800a7e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	daf2      	bge.n	800a79c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	f043 0201 	orr.w	r2, r3, #1
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7d2:	d901      	bls.n	800a7d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e006      	b.n	800a7e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d0f0      	beq.n	800a7c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a800:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a804:	f002 fc9e 	bl	800d144 <USBD_static_malloc>
 800a808:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d109      	bne.n	800a824 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	32b0      	adds	r2, #176	@ 0xb0
 800a81a:	2100      	movs	r1, #0
 800a81c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a820:	2302      	movs	r3, #2
 800a822:	e0d4      	b.n	800a9ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a824:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a828:	2100      	movs	r1, #0
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f003 fa4b 	bl	800dcc6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	32b0      	adds	r2, #176	@ 0xb0
 800a83a:	68f9      	ldr	r1, [r7, #12]
 800a83c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	32b0      	adds	r2, #176	@ 0xb0
 800a84a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	7c1b      	ldrb	r3, [r3, #16]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d138      	bne.n	800a8ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a85c:	4b5e      	ldr	r3, [pc, #376]	@ (800a9d8 <USBD_CDC_Init+0x1e4>)
 800a85e:	7819      	ldrb	r1, [r3, #0]
 800a860:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a864:	2202      	movs	r2, #2
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f002 fb49 	bl	800cefe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a86c:	4b5a      	ldr	r3, [pc, #360]	@ (800a9d8 <USBD_CDC_Init+0x1e4>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	f003 020f 	and.w	r2, r3, #15
 800a874:	6879      	ldr	r1, [r7, #4]
 800a876:	4613      	mov	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	440b      	add	r3, r1
 800a880:	3324      	adds	r3, #36	@ 0x24
 800a882:	2201      	movs	r2, #1
 800a884:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a886:	4b55      	ldr	r3, [pc, #340]	@ (800a9dc <USBD_CDC_Init+0x1e8>)
 800a888:	7819      	ldrb	r1, [r3, #0]
 800a88a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a88e:	2202      	movs	r2, #2
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f002 fb34 	bl	800cefe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a896:	4b51      	ldr	r3, [pc, #324]	@ (800a9dc <USBD_CDC_Init+0x1e8>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	f003 020f 	and.w	r2, r3, #15
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	440b      	add	r3, r1
 800a8aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a8b2:	4b4b      	ldr	r3, [pc, #300]	@ (800a9e0 <USBD_CDC_Init+0x1ec>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f003 020f 	and.w	r2, r3, #15
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	3326      	adds	r3, #38	@ 0x26
 800a8c8:	2210      	movs	r2, #16
 800a8ca:	801a      	strh	r2, [r3, #0]
 800a8cc:	e035      	b.n	800a93a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8ce:	4b42      	ldr	r3, [pc, #264]	@ (800a9d8 <USBD_CDC_Init+0x1e4>)
 800a8d0:	7819      	ldrb	r1, [r3, #0]
 800a8d2:	2340      	movs	r3, #64	@ 0x40
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f002 fb11 	bl	800cefe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a8dc:	4b3e      	ldr	r3, [pc, #248]	@ (800a9d8 <USBD_CDC_Init+0x1e4>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f003 020f 	and.w	r2, r3, #15
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3324      	adds	r3, #36	@ 0x24
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8f6:	4b39      	ldr	r3, [pc, #228]	@ (800a9dc <USBD_CDC_Init+0x1e8>)
 800a8f8:	7819      	ldrb	r1, [r3, #0]
 800a8fa:	2340      	movs	r3, #64	@ 0x40
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f002 fafd 	bl	800cefe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a904:	4b35      	ldr	r3, [pc, #212]	@ (800a9dc <USBD_CDC_Init+0x1e8>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	f003 020f 	and.w	r2, r3, #15
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	440b      	add	r3, r1
 800a918:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a91c:	2201      	movs	r2, #1
 800a91e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a920:	4b2f      	ldr	r3, [pc, #188]	@ (800a9e0 <USBD_CDC_Init+0x1ec>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	f003 020f 	and.w	r2, r3, #15
 800a928:	6879      	ldr	r1, [r7, #4]
 800a92a:	4613      	mov	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	440b      	add	r3, r1
 800a934:	3326      	adds	r3, #38	@ 0x26
 800a936:	2210      	movs	r2, #16
 800a938:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a93a:	4b29      	ldr	r3, [pc, #164]	@ (800a9e0 <USBD_CDC_Init+0x1ec>)
 800a93c:	7819      	ldrb	r1, [r3, #0]
 800a93e:	2308      	movs	r3, #8
 800a940:	2203      	movs	r2, #3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f002 fadb 	bl	800cefe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a948:	4b25      	ldr	r3, [pc, #148]	@ (800a9e0 <USBD_CDC_Init+0x1ec>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	f003 020f 	and.w	r2, r3, #15
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	4613      	mov	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	440b      	add	r3, r1
 800a95c:	3324      	adds	r3, #36	@ 0x24
 800a95e:	2201      	movs	r2, #1
 800a960:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	33b0      	adds	r3, #176	@ 0xb0
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a998:	2302      	movs	r3, #2
 800a99a:	e018      	b.n	800a9ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	7c1b      	ldrb	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10a      	bne.n	800a9ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a9dc <USBD_CDC_Init+0x1e8>)
 800a9a6:	7819      	ldrb	r1, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f002 fb92 	bl	800d0dc <USBD_LL_PrepareReceive>
 800a9b8:	e008      	b.n	800a9cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9ba:	4b08      	ldr	r3, [pc, #32]	@ (800a9dc <USBD_CDC_Init+0x1e8>)
 800a9bc:	7819      	ldrb	r1, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9c4:	2340      	movs	r3, #64	@ 0x40
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f002 fb88 	bl	800d0dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	200000bf 	.word	0x200000bf
 800a9dc:	200000c0 	.word	0x200000c0
 800a9e0:	200000c1 	.word	0x200000c1

0800a9e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a9f0:	4b3a      	ldr	r3, [pc, #232]	@ (800aadc <USBD_CDC_DeInit+0xf8>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f002 faa7 	bl	800cf4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a9fc:	4b37      	ldr	r3, [pc, #220]	@ (800aadc <USBD_CDC_DeInit+0xf8>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	f003 020f 	and.w	r2, r3, #15
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	4613      	mov	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	440b      	add	r3, r1
 800aa10:	3324      	adds	r3, #36	@ 0x24
 800aa12:	2200      	movs	r2, #0
 800aa14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aa16:	4b32      	ldr	r3, [pc, #200]	@ (800aae0 <USBD_CDC_DeInit+0xfc>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f002 fa94 	bl	800cf4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa22:	4b2f      	ldr	r3, [pc, #188]	@ (800aae0 <USBD_CDC_DeInit+0xfc>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	f003 020f 	and.w	r2, r3, #15
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa3e:	4b29      	ldr	r3, [pc, #164]	@ (800aae4 <USBD_CDC_DeInit+0x100>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f002 fa80 	bl	800cf4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aa4a:	4b26      	ldr	r3, [pc, #152]	@ (800aae4 <USBD_CDC_DeInit+0x100>)
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f003 020f 	and.w	r2, r3, #15
 800aa52:	6879      	ldr	r1, [r7, #4]
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	440b      	add	r3, r1
 800aa5e:	3324      	adds	r3, #36	@ 0x24
 800aa60:	2200      	movs	r2, #0
 800aa62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aa64:	4b1f      	ldr	r3, [pc, #124]	@ (800aae4 <USBD_CDC_DeInit+0x100>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	3326      	adds	r3, #38	@ 0x26
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	32b0      	adds	r2, #176	@ 0xb0
 800aa88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01f      	beq.n	800aad0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	33b0      	adds	r3, #176	@ 0xb0
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	32b0      	adds	r2, #176	@ 0xb0
 800aaae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f002 fb54 	bl	800d160 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32b0      	adds	r2, #176	@ 0xb0
 800aac2:	2100      	movs	r1, #0
 800aac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	200000bf 	.word	0x200000bf
 800aae0:	200000c0 	.word	0x200000c0
 800aae4:	200000c1 	.word	0x200000c1

0800aae8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	32b0      	adds	r2, #176	@ 0xb0
 800aafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e0bf      	b.n	800ac98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d050      	beq.n	800abc6 <USBD_CDC_Setup+0xde>
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	f040 80af 	bne.w	800ac88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	88db      	ldrh	r3, [r3, #6]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d03a      	beq.n	800aba8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	b25b      	sxtb	r3, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	da1b      	bge.n	800ab74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	33b0      	adds	r3, #176	@ 0xb0
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ab52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	88d2      	ldrh	r2, [r2, #6]
 800ab58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	88db      	ldrh	r3, [r3, #6]
 800ab5e:	2b07      	cmp	r3, #7
 800ab60:	bf28      	it	cs
 800ab62:	2307      	movcs	r3, #7
 800ab64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	89fa      	ldrh	r2, [r7, #14]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f001 fd93 	bl	800c698 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ab72:	e090      	b.n	800ac96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	785a      	ldrb	r2, [r3, #1]
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	88db      	ldrh	r3, [r3, #6]
 800ab82:	2b3f      	cmp	r3, #63	@ 0x3f
 800ab84:	d803      	bhi.n	800ab8e <USBD_CDC_Setup+0xa6>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	88db      	ldrh	r3, [r3, #6]
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	e000      	b.n	800ab90 <USBD_CDC_Setup+0xa8>
 800ab8e:	2240      	movs	r2, #64	@ 0x40
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ab96:	6939      	ldr	r1, [r7, #16]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ab9e:	461a      	mov	r2, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 fda5 	bl	800c6f0 <USBD_CtlPrepareRx>
      break;
 800aba6:	e076      	b.n	800ac96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	33b0      	adds	r3, #176	@ 0xb0
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	7850      	ldrb	r0, [r2, #1]
 800abbe:	2200      	movs	r2, #0
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	4798      	blx	r3
      break;
 800abc4:	e067      	b.n	800ac96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	785b      	ldrb	r3, [r3, #1]
 800abca:	2b0b      	cmp	r3, #11
 800abcc:	d851      	bhi.n	800ac72 <USBD_CDC_Setup+0x18a>
 800abce:	a201      	add	r2, pc, #4	@ (adr r2, 800abd4 <USBD_CDC_Setup+0xec>)
 800abd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd4:	0800ac05 	.word	0x0800ac05
 800abd8:	0800ac81 	.word	0x0800ac81
 800abdc:	0800ac73 	.word	0x0800ac73
 800abe0:	0800ac73 	.word	0x0800ac73
 800abe4:	0800ac73 	.word	0x0800ac73
 800abe8:	0800ac73 	.word	0x0800ac73
 800abec:	0800ac73 	.word	0x0800ac73
 800abf0:	0800ac73 	.word	0x0800ac73
 800abf4:	0800ac73 	.word	0x0800ac73
 800abf8:	0800ac73 	.word	0x0800ac73
 800abfc:	0800ac2f 	.word	0x0800ac2f
 800ac00:	0800ac59 	.word	0x0800ac59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d107      	bne.n	800ac20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac10:	f107 030a 	add.w	r3, r7, #10
 800ac14:	2202      	movs	r2, #2
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 fd3d 	bl	800c698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac1e:	e032      	b.n	800ac86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f001 fcbb 	bl	800c59e <USBD_CtlError>
            ret = USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	75fb      	strb	r3, [r7, #23]
          break;
 800ac2c:	e02b      	b.n	800ac86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d107      	bne.n	800ac4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac3a:	f107 030d 	add.w	r3, r7, #13
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f001 fd28 	bl	800c698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac48:	e01d      	b.n	800ac86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f001 fca6 	bl	800c59e <USBD_CtlError>
            ret = USBD_FAIL;
 800ac52:	2303      	movs	r3, #3
 800ac54:	75fb      	strb	r3, [r7, #23]
          break;
 800ac56:	e016      	b.n	800ac86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	d00f      	beq.n	800ac84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f001 fc99 	bl	800c59e <USBD_CtlError>
            ret = USBD_FAIL;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ac70:	e008      	b.n	800ac84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 fc92 	bl	800c59e <USBD_CtlError>
          ret = USBD_FAIL;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	75fb      	strb	r3, [r7, #23]
          break;
 800ac7e:	e002      	b.n	800ac86 <USBD_CDC_Setup+0x19e>
          break;
 800ac80:	bf00      	nop
 800ac82:	e008      	b.n	800ac96 <USBD_CDC_Setup+0x1ae>
          break;
 800ac84:	bf00      	nop
      }
      break;
 800ac86:	e006      	b.n	800ac96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f001 fc87 	bl	800c59e <USBD_CtlError>
      ret = USBD_FAIL;
 800ac90:	2303      	movs	r3, #3
 800ac92:	75fb      	strb	r3, [r7, #23]
      break;
 800ac94:	bf00      	nop
  }

  return (uint8_t)ret;
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	32b0      	adds	r2, #176	@ 0xb0
 800acbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e065      	b.n	800ad96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	32b0      	adds	r2, #176	@ 0xb0
 800acd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800acda:	78fb      	ldrb	r3, [r7, #3]
 800acdc:	f003 020f 	and.w	r2, r3, #15
 800ace0:	6879      	ldr	r1, [r7, #4]
 800ace2:	4613      	mov	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	440b      	add	r3, r1
 800acec:	3318      	adds	r3, #24
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d02f      	beq.n	800ad54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	f003 020f 	and.w	r2, r3, #15
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	4613      	mov	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	440b      	add	r3, r1
 800ad06:	3318      	adds	r3, #24
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	f003 010f 	and.w	r1, r3, #15
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	460b      	mov	r3, r1
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	440b      	add	r3, r1
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4403      	add	r3, r0
 800ad1c:	331c      	adds	r3, #28
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad24:	fb01 f303 	mul.w	r3, r1, r3
 800ad28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d112      	bne.n	800ad54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	f003 020f 	and.w	r2, r3, #15
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	4613      	mov	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	440b      	add	r3, r1
 800ad40:	3318      	adds	r3, #24
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad46:	78f9      	ldrb	r1, [r7, #3]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f002 f9a4 	bl	800d09a <USBD_LL_Transmit>
 800ad52:	e01f      	b.n	800ad94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	33b0      	adds	r3, #176	@ 0xb0
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d010      	beq.n	800ad94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	33b0      	adds	r3, #176	@ 0xb0
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ad90:	78fa      	ldrb	r2, [r7, #3]
 800ad92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	460b      	mov	r3, r1
 800ada8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	32b0      	adds	r2, #176	@ 0xb0
 800adb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	32b0      	adds	r2, #176	@ 0xb0
 800adc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d101      	bne.n	800add0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800adcc:	2303      	movs	r3, #3
 800adce:	e01a      	b.n	800ae06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f002 f9a2 	bl	800d11e <USBD_LL_GetRxDataSize>
 800adda:	4602      	mov	r2, r0
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	33b0      	adds	r3, #176	@ 0xb0
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ae00:	4611      	mov	r1, r2
 800ae02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	32b0      	adds	r2, #176	@ 0xb0
 800ae20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e024      	b.n	800ae7a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	33b0      	adds	r3, #176	@ 0xb0
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	4413      	add	r3, r2
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d019      	beq.n	800ae78 <USBD_CDC_EP0_RxReady+0x6a>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ae4a:	2bff      	cmp	r3, #255	@ 0xff
 800ae4c:	d014      	beq.n	800ae78 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	33b0      	adds	r3, #176	@ 0xb0
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ae66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	22ff      	movs	r2, #255	@ 0xff
 800ae74:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
	...

0800ae84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae8c:	2182      	movs	r1, #130	@ 0x82
 800ae8e:	4818      	ldr	r0, [pc, #96]	@ (800aef0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae90:	f000 fd4f 	bl	800b932 <USBD_GetEpDesc>
 800ae94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae96:	2101      	movs	r1, #1
 800ae98:	4815      	ldr	r0, [pc, #84]	@ (800aef0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae9a:	f000 fd4a 	bl	800b932 <USBD_GetEpDesc>
 800ae9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aea0:	2181      	movs	r1, #129	@ 0x81
 800aea2:	4813      	ldr	r0, [pc, #76]	@ (800aef0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aea4:	f000 fd45 	bl	800b932 <USBD_GetEpDesc>
 800aea8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	2210      	movs	r2, #16
 800aeb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aec4:	711a      	strb	r2, [r3, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aed8:	711a      	strb	r2, [r3, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2243      	movs	r2, #67	@ 0x43
 800aee2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aee4:	4b02      	ldr	r3, [pc, #8]	@ (800aef0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	2000007c 	.word	0x2000007c

0800aef4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aefc:	2182      	movs	r1, #130	@ 0x82
 800aefe:	4818      	ldr	r0, [pc, #96]	@ (800af60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af00:	f000 fd17 	bl	800b932 <USBD_GetEpDesc>
 800af04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af06:	2101      	movs	r1, #1
 800af08:	4815      	ldr	r0, [pc, #84]	@ (800af60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af0a:	f000 fd12 	bl	800b932 <USBD_GetEpDesc>
 800af0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af10:	2181      	movs	r1, #129	@ 0x81
 800af12:	4813      	ldr	r0, [pc, #76]	@ (800af60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af14:	f000 fd0d 	bl	800b932 <USBD_GetEpDesc>
 800af18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2210      	movs	r2, #16
 800af24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d006      	beq.n	800af3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2200      	movs	r2, #0
 800af30:	711a      	strb	r2, [r3, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f042 0202 	orr.w	r2, r2, #2
 800af38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d006      	beq.n	800af4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	711a      	strb	r2, [r3, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f042 0202 	orr.w	r2, r2, #2
 800af4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2243      	movs	r2, #67	@ 0x43
 800af52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af54:	4b02      	ldr	r3, [pc, #8]	@ (800af60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800af56:	4618      	mov	r0, r3
 800af58:	3718      	adds	r7, #24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	2000007c 	.word	0x2000007c

0800af64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af6c:	2182      	movs	r1, #130	@ 0x82
 800af6e:	4818      	ldr	r0, [pc, #96]	@ (800afd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af70:	f000 fcdf 	bl	800b932 <USBD_GetEpDesc>
 800af74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af76:	2101      	movs	r1, #1
 800af78:	4815      	ldr	r0, [pc, #84]	@ (800afd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af7a:	f000 fcda 	bl	800b932 <USBD_GetEpDesc>
 800af7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af80:	2181      	movs	r1, #129	@ 0x81
 800af82:	4813      	ldr	r0, [pc, #76]	@ (800afd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af84:	f000 fcd5 	bl	800b932 <USBD_GetEpDesc>
 800af88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2210      	movs	r2, #16
 800af94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d006      	beq.n	800afaa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afa4:	711a      	strb	r2, [r3, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d006      	beq.n	800afbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afb8:	711a      	strb	r2, [r3, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2243      	movs	r2, #67	@ 0x43
 800afc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afc4:	4b02      	ldr	r3, [pc, #8]	@ (800afd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	2000007c 	.word	0x2000007c

0800afd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	220a      	movs	r2, #10
 800afe0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800afe2:	4b03      	ldr	r3, [pc, #12]	@ (800aff0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr
 800aff0:	20000038 	.word	0x20000038

0800aff4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	e009      	b.n	800b01c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	33b0      	adds	r3, #176	@ 0xb0
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	32b0      	adds	r2, #176	@ 0xb0
 800b03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b042:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e008      	b.n	800b060 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	371c      	adds	r7, #28
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	32b0      	adds	r2, #176	@ 0xb0
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e004      	b.n	800b09a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
	...

0800b0a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	32b0      	adds	r2, #176	@ 0xb0
 800b0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d101      	bne.n	800b0ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e025      	b.n	800b11a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d11f      	bne.n	800b118 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b0e0:	4b10      	ldr	r3, [pc, #64]	@ (800b124 <USBD_CDC_TransmitPacket+0x7c>)
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	f003 020f 	and.w	r2, r3, #15
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4403      	add	r3, r0
 800b0fa:	3318      	adds	r3, #24
 800b0fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b0fe:	4b09      	ldr	r3, [pc, #36]	@ (800b124 <USBD_CDC_TransmitPacket+0x7c>)
 800b100:	7819      	ldrb	r1, [r3, #0]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f001 ffc3 	bl	800d09a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b118:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	200000bf 	.word	0x200000bf

0800b128 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	32b0      	adds	r2, #176	@ 0xb0
 800b13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	32b0      	adds	r2, #176	@ 0xb0
 800b14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d101      	bne.n	800b156 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b152:	2303      	movs	r3, #3
 800b154:	e018      	b.n	800b188 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	7c1b      	ldrb	r3, [r3, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10a      	bne.n	800b174 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b15e:	4b0c      	ldr	r3, [pc, #48]	@ (800b190 <USBD_CDC_ReceivePacket+0x68>)
 800b160:	7819      	ldrb	r1, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b168:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f001 ffb5 	bl	800d0dc <USBD_LL_PrepareReceive>
 800b172:	e008      	b.n	800b186 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b174:	4b06      	ldr	r3, [pc, #24]	@ (800b190 <USBD_CDC_ReceivePacket+0x68>)
 800b176:	7819      	ldrb	r1, [r3, #0]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b17e:	2340      	movs	r3, #64	@ 0x40
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f001 ffab 	bl	800d0dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	200000c0 	.word	0x200000c0

0800b194 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e01f      	b.n	800b1ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	79fa      	ldrb	r2, [r7, #7]
 800b1de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f001 fe25 	bl	800ce30 <USBD_LL_Init>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d101      	bne.n	800b20c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b208:	2303      	movs	r3, #3
 800b20a:	e025      	b.n	800b258 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	32ae      	adds	r2, #174	@ 0xae
 800b21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00f      	beq.n	800b248 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	32ae      	adds	r2, #174	@ 0xae
 800b232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b238:	f107 020e 	add.w	r2, r7, #14
 800b23c:	4610      	mov	r0, r2
 800b23e:	4798      	blx	r3
 800b240:	4602      	mov	r2, r0
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f001 fe2d 	bl	800cec8 <USBD_LL_Start>
 800b26e:	4603      	mov	r3, r0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b280:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b084      	sub	sp, #16
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	460b      	mov	r3, r1
 800b298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d009      	beq.n	800b2bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	78fa      	ldrb	r2, [r7, #3]
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	4798      	blx	r3
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	78fa      	ldrb	r2, [r7, #3]
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f001 f90c 	bl	800c52a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b320:	461a      	mov	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b32e:	f003 031f 	and.w	r3, r3, #31
 800b332:	2b02      	cmp	r3, #2
 800b334:	d01a      	beq.n	800b36c <USBD_LL_SetupStage+0x72>
 800b336:	2b02      	cmp	r3, #2
 800b338:	d822      	bhi.n	800b380 <USBD_LL_SetupStage+0x86>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d002      	beq.n	800b344 <USBD_LL_SetupStage+0x4a>
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d00a      	beq.n	800b358 <USBD_LL_SetupStage+0x5e>
 800b342:	e01d      	b.n	800b380 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b34a:	4619      	mov	r1, r3
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fb63 	bl	800ba18 <USBD_StdDevReq>
 800b352:	4603      	mov	r3, r0
 800b354:	73fb      	strb	r3, [r7, #15]
      break;
 800b356:	e020      	b.n	800b39a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fbcb 	bl	800bafc <USBD_StdItfReq>
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
      break;
 800b36a:	e016      	b.n	800b39a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fc2d 	bl	800bbd4 <USBD_StdEPReq>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73fb      	strb	r3, [r7, #15]
      break;
 800b37e:	e00c      	b.n	800b39a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b386:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f001 fdfa 	bl	800cf88 <USBD_LL_StallEP>
 800b394:	4603      	mov	r3, r0
 800b396:	73fb      	strb	r3, [r7, #15]
      break;
 800b398:	bf00      	nop
  }

  return ret;
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b3b6:	7afb      	ldrb	r3, [r7, #11]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d16e      	bne.n	800b49a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b3c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	f040 8098 	bne.w	800b500 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	689a      	ldr	r2, [r3, #8]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d913      	bls.n	800b404 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	1ad2      	subs	r2, r2, r3
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	68da      	ldr	r2, [r3, #12]
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	bf28      	it	cs
 800b3f6:	4613      	movcs	r3, r2
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	6879      	ldr	r1, [r7, #4]
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f001 f994 	bl	800c72a <USBD_CtlContinueRx>
 800b402:	e07d      	b.n	800b500 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b40a:	f003 031f 	and.w	r3, r3, #31
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d014      	beq.n	800b43c <USBD_LL_DataOutStage+0x98>
 800b412:	2b02      	cmp	r3, #2
 800b414:	d81d      	bhi.n	800b452 <USBD_LL_DataOutStage+0xae>
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <USBD_LL_DataOutStage+0x7c>
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d003      	beq.n	800b426 <USBD_LL_DataOutStage+0x82>
 800b41e:	e018      	b.n	800b452 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b420:	2300      	movs	r3, #0
 800b422:	75bb      	strb	r3, [r7, #22]
            break;
 800b424:	e018      	b.n	800b458 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	4619      	mov	r1, r3
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f000 fa64 	bl	800b8fe <USBD_CoreFindIF>
 800b436:	4603      	mov	r3, r0
 800b438:	75bb      	strb	r3, [r7, #22]
            break;
 800b43a:	e00d      	b.n	800b458 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b442:	b2db      	uxtb	r3, r3
 800b444:	4619      	mov	r1, r3
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 fa66 	bl	800b918 <USBD_CoreFindEP>
 800b44c:	4603      	mov	r3, r0
 800b44e:	75bb      	strb	r3, [r7, #22]
            break;
 800b450:	e002      	b.n	800b458 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	75bb      	strb	r3, [r7, #22]
            break;
 800b456:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b458:	7dbb      	ldrb	r3, [r7, #22]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d119      	bne.n	800b492 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b03      	cmp	r3, #3
 800b468:	d113      	bne.n	800b492 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b46a:	7dba      	ldrb	r2, [r7, #22]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	32ae      	adds	r2, #174	@ 0xae
 800b470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00b      	beq.n	800b492 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b47a:	7dba      	ldrb	r2, [r7, #22]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b482:	7dba      	ldrb	r2, [r7, #22]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	32ae      	adds	r2, #174	@ 0xae
 800b488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f001 f95a 	bl	800c74c <USBD_CtlSendStatus>
 800b498:	e032      	b.n	800b500 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b49a:	7afb      	ldrb	r3, [r7, #11]
 800b49c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 fa37 	bl	800b918 <USBD_CoreFindEP>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4ae:	7dbb      	ldrb	r3, [r7, #22]
 800b4b0:	2bff      	cmp	r3, #255	@ 0xff
 800b4b2:	d025      	beq.n	800b500 <USBD_LL_DataOutStage+0x15c>
 800b4b4:	7dbb      	ldrb	r3, [r7, #22]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d122      	bne.n	800b500 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d117      	bne.n	800b4f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b4c6:	7dba      	ldrb	r2, [r7, #22]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	32ae      	adds	r2, #174	@ 0xae
 800b4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00f      	beq.n	800b4f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b4d6:	7dba      	ldrb	r2, [r7, #22]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b4de:	7dba      	ldrb	r2, [r7, #22]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	32ae      	adds	r2, #174	@ 0xae
 800b4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	7afa      	ldrb	r2, [r7, #11]
 800b4ec:	4611      	mov	r1, r2
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	4798      	blx	r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
 800b4fe:	e000      	b.n	800b502 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3718      	adds	r7, #24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b086      	sub	sp, #24
 800b50e:	af00      	add	r7, sp, #0
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	460b      	mov	r3, r1
 800b514:	607a      	str	r2, [r7, #4]
 800b516:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d16f      	bne.n	800b5fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3314      	adds	r3, #20
 800b522:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d15a      	bne.n	800b5e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	689a      	ldr	r2, [r3, #8]
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	429a      	cmp	r2, r3
 800b538:	d914      	bls.n	800b564 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	689a      	ldr	r2, [r3, #8]
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	1ad2      	subs	r2, r2, r3
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	461a      	mov	r2, r3
 800b54e:	6879      	ldr	r1, [r7, #4]
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f001 f8bc 	bl	800c6ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b556:	2300      	movs	r3, #0
 800b558:	2200      	movs	r2, #0
 800b55a:	2100      	movs	r1, #0
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f001 fdbd 	bl	800d0dc <USBD_LL_PrepareReceive>
 800b562:	e03f      	b.n	800b5e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	68da      	ldr	r2, [r3, #12]
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d11c      	bne.n	800b5aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b578:	429a      	cmp	r2, r3
 800b57a:	d316      	bcc.n	800b5aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b586:	429a      	cmp	r2, r3
 800b588:	d20f      	bcs.n	800b5aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b58a:	2200      	movs	r2, #0
 800b58c:	2100      	movs	r1, #0
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f001 f89d 	bl	800c6ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b59c:	2300      	movs	r3, #0
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f001 fd9a 	bl	800d0dc <USBD_LL_PrepareReceive>
 800b5a8:	e01c      	b.n	800b5e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d10f      	bne.n	800b5d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5d6:	2180      	movs	r1, #128	@ 0x80
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f001 fcd5 	bl	800cf88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f001 f8c7 	bl	800c772 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d03a      	beq.n	800b664 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7ff fe42 	bl	800b278 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b5fc:	e032      	b.n	800b664 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b5fe:	7afb      	ldrb	r3, [r7, #11]
 800b600:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b604:	b2db      	uxtb	r3, r3
 800b606:	4619      	mov	r1, r3
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f000 f985 	bl	800b918 <USBD_CoreFindEP>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b612:	7dfb      	ldrb	r3, [r7, #23]
 800b614:	2bff      	cmp	r3, #255	@ 0xff
 800b616:	d025      	beq.n	800b664 <USBD_LL_DataInStage+0x15a>
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d122      	bne.n	800b664 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b03      	cmp	r3, #3
 800b628:	d11c      	bne.n	800b664 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b62a:	7dfa      	ldrb	r2, [r7, #23]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	32ae      	adds	r2, #174	@ 0xae
 800b630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b634:	695b      	ldr	r3, [r3, #20]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d014      	beq.n	800b664 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b63a:	7dfa      	ldrb	r2, [r7, #23]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b642:	7dfa      	ldrb	r2, [r7, #23]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	32ae      	adds	r2, #174	@ 0xae
 800b648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	7afa      	ldrb	r2, [r7, #11]
 800b650:	4611      	mov	r1, r2
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	4798      	blx	r3
 800b656:	4603      	mov	r3, r0
 800b658:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b65a:	7dbb      	ldrb	r3, [r7, #22]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b660:	7dbb      	ldrb	r3, [r7, #22]
 800b662:	e000      	b.n	800b666 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d014      	beq.n	800b6d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00e      	beq.n	800b6d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	6852      	ldr	r2, [r2, #4]
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	4798      	blx	r3
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6d4:	2340      	movs	r3, #64	@ 0x40
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2100      	movs	r1, #0
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f001 fc0f 	bl	800cefe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2240      	movs	r2, #64	@ 0x40
 800b6ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6f0:	2340      	movs	r3, #64	@ 0x40
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2180      	movs	r1, #128	@ 0x80
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f001 fc01 	bl	800cefe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2240      	movs	r2, #64	@ 0x40
 800b706:	621a      	str	r2, [r3, #32]

  return ret;
 800b708:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	460b      	mov	r3, r1
 800b71c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	78fa      	ldrb	r2, [r7, #3]
 800b722:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b740:	b2db      	uxtb	r3, r3
 800b742:	2b04      	cmp	r3, #4
 800b744:	d006      	beq.n	800b754 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2204      	movs	r2, #4
 800b758:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	d106      	bne.n	800b78c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b784:	b2da      	uxtb	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d110      	bne.n	800b7d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00b      	beq.n	800b7d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7be:	69db      	ldr	r3, [r3, #28]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d005      	beq.n	800b7d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7ca:	69db      	ldr	r3, [r3, #28]
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b082      	sub	sp, #8
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	32ae      	adds	r2, #174	@ 0xae
 800b7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	e01c      	b.n	800b836 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b03      	cmp	r3, #3
 800b806:	d115      	bne.n	800b834 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	32ae      	adds	r2, #174	@ 0xae
 800b812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b816:	6a1b      	ldr	r3, [r3, #32]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00b      	beq.n	800b834 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32ae      	adds	r2, #174	@ 0xae
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	6a1b      	ldr	r3, [r3, #32]
 800b82c:	78fa      	ldrb	r2, [r7, #3]
 800b82e:	4611      	mov	r1, r2
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b082      	sub	sp, #8
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	460b      	mov	r3, r1
 800b848:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	32ae      	adds	r2, #174	@ 0xae
 800b854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d101      	bne.n	800b860 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b85c:	2303      	movs	r3, #3
 800b85e:	e01c      	b.n	800b89a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d115      	bne.n	800b898 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	32ae      	adds	r2, #174	@ 0xae
 800b876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	32ae      	adds	r2, #174	@ 0xae
 800b88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b890:	78fa      	ldrb	r2, [r7, #3]
 800b892:	4611      	mov	r1, r2
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00e      	beq.n	800b8f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	6852      	ldr	r2, [r2, #4]
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	4798      	blx	r3
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b90a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b924:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b926:	4618      	mov	r0, r3
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b086      	sub	sp, #24
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	460b      	mov	r3, r1
 800b93c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b946:	2300      	movs	r3, #0
 800b948:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	885b      	ldrh	r3, [r3, #2]
 800b94e:	b29b      	uxth	r3, r3
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	7812      	ldrb	r2, [r2, #0]
 800b954:	4293      	cmp	r3, r2
 800b956:	d91f      	bls.n	800b998 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b95e:	e013      	b.n	800b988 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b960:	f107 030a 	add.w	r3, r7, #10
 800b964:	4619      	mov	r1, r3
 800b966:	6978      	ldr	r0, [r7, #20]
 800b968:	f000 f81b 	bl	800b9a2 <USBD_GetNextDesc>
 800b96c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	785b      	ldrb	r3, [r3, #1]
 800b972:	2b05      	cmp	r3, #5
 800b974:	d108      	bne.n	800b988 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	789b      	ldrb	r3, [r3, #2]
 800b97e:	78fa      	ldrb	r2, [r7, #3]
 800b980:	429a      	cmp	r2, r3
 800b982:	d008      	beq.n	800b996 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b984:	2300      	movs	r3, #0
 800b986:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	885b      	ldrh	r3, [r3, #2]
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	897b      	ldrh	r3, [r7, #10]
 800b990:	429a      	cmp	r2, r3
 800b992:	d8e5      	bhi.n	800b960 <USBD_GetEpDesc+0x2e>
 800b994:	e000      	b.n	800b998 <USBD_GetEpDesc+0x66>
          break;
 800b996:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b998:	693b      	ldr	r3, [r7, #16]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b085      	sub	sp, #20
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	7812      	ldrb	r2, [r2, #0]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b087      	sub	sp, #28
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b9f8:	8a3b      	ldrh	r3, [r7, #16]
 800b9fa:	021b      	lsls	r3, r3, #8
 800b9fc:	b21a      	sxth	r2, r3
 800b9fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	b21b      	sxth	r3, r3
 800ba06:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba08:	89fb      	ldrh	r3, [r7, #14]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
	...

0800ba18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba2e:	2b40      	cmp	r3, #64	@ 0x40
 800ba30:	d005      	beq.n	800ba3e <USBD_StdDevReq+0x26>
 800ba32:	2b40      	cmp	r3, #64	@ 0x40
 800ba34:	d857      	bhi.n	800bae6 <USBD_StdDevReq+0xce>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00f      	beq.n	800ba5a <USBD_StdDevReq+0x42>
 800ba3a:	2b20      	cmp	r3, #32
 800ba3c:	d153      	bne.n	800bae6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	32ae      	adds	r2, #174	@ 0xae
 800ba48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	4798      	blx	r3
 800ba54:	4603      	mov	r3, r0
 800ba56:	73fb      	strb	r3, [r7, #15]
      break;
 800ba58:	e04a      	b.n	800baf0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	785b      	ldrb	r3, [r3, #1]
 800ba5e:	2b09      	cmp	r3, #9
 800ba60:	d83b      	bhi.n	800bada <USBD_StdDevReq+0xc2>
 800ba62:	a201      	add	r2, pc, #4	@ (adr r2, 800ba68 <USBD_StdDevReq+0x50>)
 800ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba68:	0800babd 	.word	0x0800babd
 800ba6c:	0800bad1 	.word	0x0800bad1
 800ba70:	0800badb 	.word	0x0800badb
 800ba74:	0800bac7 	.word	0x0800bac7
 800ba78:	0800badb 	.word	0x0800badb
 800ba7c:	0800ba9b 	.word	0x0800ba9b
 800ba80:	0800ba91 	.word	0x0800ba91
 800ba84:	0800badb 	.word	0x0800badb
 800ba88:	0800bab3 	.word	0x0800bab3
 800ba8c:	0800baa5 	.word	0x0800baa5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba90:	6839      	ldr	r1, [r7, #0]
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fa3c 	bl	800bf10 <USBD_GetDescriptor>
          break;
 800ba98:	e024      	b.n	800bae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fba1 	bl	800c1e4 <USBD_SetAddress>
          break;
 800baa2:	e01f      	b.n	800bae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fbe0 	bl	800c26c <USBD_SetConfig>
 800baac:	4603      	mov	r3, r0
 800baae:	73fb      	strb	r3, [r7, #15]
          break;
 800bab0:	e018      	b.n	800bae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fc83 	bl	800c3c0 <USBD_GetConfig>
          break;
 800baba:	e013      	b.n	800bae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fcb4 	bl	800c42c <USBD_GetStatus>
          break;
 800bac4:	e00e      	b.n	800bae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bac6:	6839      	ldr	r1, [r7, #0]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fce3 	bl	800c494 <USBD_SetFeature>
          break;
 800bace:	e009      	b.n	800bae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fd07 	bl	800c4e6 <USBD_ClrFeature>
          break;
 800bad8:	e004      	b.n	800bae4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fd5e 	bl	800c59e <USBD_CtlError>
          break;
 800bae2:	bf00      	nop
      }
      break;
 800bae4:	e004      	b.n	800baf0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fd58 	bl	800c59e <USBD_CtlError>
      break;
 800baee:	bf00      	nop
  }

  return ret;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop

0800bafc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb12:	2b40      	cmp	r3, #64	@ 0x40
 800bb14:	d005      	beq.n	800bb22 <USBD_StdItfReq+0x26>
 800bb16:	2b40      	cmp	r3, #64	@ 0x40
 800bb18:	d852      	bhi.n	800bbc0 <USBD_StdItfReq+0xc4>
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <USBD_StdItfReq+0x26>
 800bb1e:	2b20      	cmp	r3, #32
 800bb20:	d14e      	bne.n	800bbc0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d840      	bhi.n	800bbb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	889b      	ldrh	r3, [r3, #4]
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d836      	bhi.n	800bba8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	889b      	ldrh	r3, [r3, #4]
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff fedb 	bl	800b8fe <USBD_CoreFindIF>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	2bff      	cmp	r3, #255	@ 0xff
 800bb50:	d01d      	beq.n	800bb8e <USBD_StdItfReq+0x92>
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d11a      	bne.n	800bb8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bb58:	7bba      	ldrb	r2, [r7, #14]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	32ae      	adds	r2, #174	@ 0xae
 800bb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00f      	beq.n	800bb88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bb68:	7bba      	ldrb	r2, [r7, #14]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb70:	7bba      	ldrb	r2, [r7, #14]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	32ae      	adds	r2, #174	@ 0xae
 800bb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	6839      	ldr	r1, [r7, #0]
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	4798      	blx	r3
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bb86:	e004      	b.n	800bb92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bb8c:	e001      	b.n	800bb92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	88db      	ldrh	r3, [r3, #6]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d110      	bne.n	800bbbc <USBD_StdItfReq+0xc0>
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10d      	bne.n	800bbbc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fdd3 	bl	800c74c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bba6:	e009      	b.n	800bbbc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fcf7 	bl	800c59e <USBD_CtlError>
          break;
 800bbb0:	e004      	b.n	800bbbc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fcf2 	bl	800c59e <USBD_CtlError>
          break;
 800bbba:	e000      	b.n	800bbbe <USBD_StdItfReq+0xc2>
          break;
 800bbbc:	bf00      	nop
      }
      break;
 800bbbe:	e004      	b.n	800bbca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fceb 	bl	800c59e <USBD_CtlError>
      break;
 800bbc8:	bf00      	nop
  }

  return ret;
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	889b      	ldrh	r3, [r3, #4]
 800bbe6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbf0:	2b40      	cmp	r3, #64	@ 0x40
 800bbf2:	d007      	beq.n	800bc04 <USBD_StdEPReq+0x30>
 800bbf4:	2b40      	cmp	r3, #64	@ 0x40
 800bbf6:	f200 817f 	bhi.w	800bef8 <USBD_StdEPReq+0x324>
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d02a      	beq.n	800bc54 <USBD_StdEPReq+0x80>
 800bbfe:	2b20      	cmp	r3, #32
 800bc00:	f040 817a 	bne.w	800bef8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff fe85 	bl	800b918 <USBD_CoreFindEP>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc12:	7b7b      	ldrb	r3, [r7, #13]
 800bc14:	2bff      	cmp	r3, #255	@ 0xff
 800bc16:	f000 8174 	beq.w	800bf02 <USBD_StdEPReq+0x32e>
 800bc1a:	7b7b      	ldrb	r3, [r7, #13]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f040 8170 	bne.w	800bf02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bc22:	7b7a      	ldrb	r2, [r7, #13]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bc2a:	7b7a      	ldrb	r2, [r7, #13]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	32ae      	adds	r2, #174	@ 0xae
 800bc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 8163 	beq.w	800bf02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bc3c:	7b7a      	ldrb	r2, [r7, #13]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	32ae      	adds	r2, #174	@ 0xae
 800bc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	4798      	blx	r3
 800bc4e:	4603      	mov	r3, r0
 800bc50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc52:	e156      	b.n	800bf02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	785b      	ldrb	r3, [r3, #1]
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d008      	beq.n	800bc6e <USBD_StdEPReq+0x9a>
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	f300 8145 	bgt.w	800beec <USBD_StdEPReq+0x318>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 809b 	beq.w	800bd9e <USBD_StdEPReq+0x1ca>
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d03c      	beq.n	800bce6 <USBD_StdEPReq+0x112>
 800bc6c:	e13e      	b.n	800beec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d002      	beq.n	800bc80 <USBD_StdEPReq+0xac>
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d016      	beq.n	800bcac <USBD_StdEPReq+0xd8>
 800bc7e:	e02c      	b.n	800bcda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00d      	beq.n	800bca2 <USBD_StdEPReq+0xce>
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
 800bc88:	2b80      	cmp	r3, #128	@ 0x80
 800bc8a:	d00a      	beq.n	800bca2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f979 	bl	800cf88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc96:	2180      	movs	r1, #128	@ 0x80
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f001 f975 	bl	800cf88 <USBD_LL_StallEP>
 800bc9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bca0:	e020      	b.n	800bce4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fc7a 	bl	800c59e <USBD_CtlError>
              break;
 800bcaa:	e01b      	b.n	800bce4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	885b      	ldrh	r3, [r3, #2]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10e      	bne.n	800bcd2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bcb4:	7bbb      	ldrb	r3, [r7, #14]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00b      	beq.n	800bcd2 <USBD_StdEPReq+0xfe>
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	2b80      	cmp	r3, #128	@ 0x80
 800bcbe:	d008      	beq.n	800bcd2 <USBD_StdEPReq+0xfe>
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	88db      	ldrh	r3, [r3, #6]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d104      	bne.n	800bcd2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f001 f95b 	bl	800cf88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fd3a 	bl	800c74c <USBD_CtlSendStatus>

              break;
 800bcd8:	e004      	b.n	800bce4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fc5e 	bl	800c59e <USBD_CtlError>
              break;
 800bce2:	bf00      	nop
          }
          break;
 800bce4:	e107      	b.n	800bef6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d002      	beq.n	800bcf8 <USBD_StdEPReq+0x124>
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	d016      	beq.n	800bd24 <USBD_StdEPReq+0x150>
 800bcf6:	e04b      	b.n	800bd90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00d      	beq.n	800bd1a <USBD_StdEPReq+0x146>
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	2b80      	cmp	r3, #128	@ 0x80
 800bd02:	d00a      	beq.n	800bd1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	4619      	mov	r1, r3
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f001 f93d 	bl	800cf88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd0e:	2180      	movs	r1, #128	@ 0x80
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f001 f939 	bl	800cf88 <USBD_LL_StallEP>
 800bd16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd18:	e040      	b.n	800bd9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fc3e 	bl	800c59e <USBD_CtlError>
              break;
 800bd22:	e03b      	b.n	800bd9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	885b      	ldrh	r3, [r3, #2]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d136      	bne.n	800bd9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
 800bd2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f001 f943 	bl	800cfc6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fd03 	bl	800c74c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd46:	7bbb      	ldrb	r3, [r7, #14]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff fde4 	bl	800b918 <USBD_CoreFindEP>
 800bd50:	4603      	mov	r3, r0
 800bd52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd54:	7b7b      	ldrb	r3, [r7, #13]
 800bd56:	2bff      	cmp	r3, #255	@ 0xff
 800bd58:	d01f      	beq.n	800bd9a <USBD_StdEPReq+0x1c6>
 800bd5a:	7b7b      	ldrb	r3, [r7, #13]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d11c      	bne.n	800bd9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bd60:	7b7a      	ldrb	r2, [r7, #13]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bd68:	7b7a      	ldrb	r2, [r7, #13]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	32ae      	adds	r2, #174	@ 0xae
 800bd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d010      	beq.n	800bd9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd78:	7b7a      	ldrb	r2, [r7, #13]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	32ae      	adds	r2, #174	@ 0xae
 800bd7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	4798      	blx	r3
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bd8e:	e004      	b.n	800bd9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fc03 	bl	800c59e <USBD_CtlError>
              break;
 800bd98:	e000      	b.n	800bd9c <USBD_StdEPReq+0x1c8>
              break;
 800bd9a:	bf00      	nop
          }
          break;
 800bd9c:	e0ab      	b.n	800bef6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d002      	beq.n	800bdb0 <USBD_StdEPReq+0x1dc>
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	d032      	beq.n	800be14 <USBD_StdEPReq+0x240>
 800bdae:	e097      	b.n	800bee0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdb0:	7bbb      	ldrb	r3, [r7, #14]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d007      	beq.n	800bdc6 <USBD_StdEPReq+0x1f2>
 800bdb6:	7bbb      	ldrb	r3, [r7, #14]
 800bdb8:	2b80      	cmp	r3, #128	@ 0x80
 800bdba:	d004      	beq.n	800bdc6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fbed 	bl	800c59e <USBD_CtlError>
                break;
 800bdc4:	e091      	b.n	800beea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	da0b      	bge.n	800bde6 <USBD_StdEPReq+0x212>
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	3310      	adds	r3, #16
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	4413      	add	r3, r2
 800bde2:	3304      	adds	r3, #4
 800bde4:	e00b      	b.n	800bdfe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
 800bde8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdec:	4613      	mov	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2200      	movs	r2, #0
 800be04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	2202      	movs	r2, #2
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 fc43 	bl	800c698 <USBD_CtlSendData>
              break;
 800be12:	e06a      	b.n	800beea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	da11      	bge.n	800be40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be1c:	7bbb      	ldrb	r3, [r7, #14]
 800be1e:	f003 020f 	and.w	r2, r3, #15
 800be22:	6879      	ldr	r1, [r7, #4]
 800be24:	4613      	mov	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	440b      	add	r3, r1
 800be2e:	3324      	adds	r3, #36	@ 0x24
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d117      	bne.n	800be66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fbb0 	bl	800c59e <USBD_CtlError>
                  break;
 800be3e:	e054      	b.n	800beea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be40:	7bbb      	ldrb	r3, [r7, #14]
 800be42:	f003 020f 	and.w	r2, r3, #15
 800be46:	6879      	ldr	r1, [r7, #4]
 800be48:	4613      	mov	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	440b      	add	r3, r1
 800be52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be56:	881b      	ldrh	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d104      	bne.n	800be66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 fb9d 	bl	800c59e <USBD_CtlError>
                  break;
 800be64:	e041      	b.n	800beea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	da0b      	bge.n	800be86 <USBD_StdEPReq+0x2b2>
 800be6e:	7bbb      	ldrb	r3, [r7, #14]
 800be70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be74:	4613      	mov	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	3310      	adds	r3, #16
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	4413      	add	r3, r2
 800be82:	3304      	adds	r3, #4
 800be84:	e00b      	b.n	800be9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be86:	7bbb      	ldrb	r3, [r7, #14]
 800be88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	4413      	add	r3, r2
 800be9c:	3304      	adds	r3, #4
 800be9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d002      	beq.n	800beac <USBD_StdEPReq+0x2d8>
 800bea6:	7bbb      	ldrb	r3, [r7, #14]
 800bea8:	2b80      	cmp	r3, #128	@ 0x80
 800beaa:	d103      	bne.n	800beb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
 800beb2:	e00e      	b.n	800bed2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 f8a3 	bl	800d004 <USBD_LL_IsStallEP>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2201      	movs	r2, #1
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	e002      	b.n	800bed2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2200      	movs	r2, #0
 800bed0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2202      	movs	r2, #2
 800bed6:	4619      	mov	r1, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fbdd 	bl	800c698 <USBD_CtlSendData>
              break;
 800bede:	e004      	b.n	800beea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fb5b 	bl	800c59e <USBD_CtlError>
              break;
 800bee8:	bf00      	nop
          }
          break;
 800beea:	e004      	b.n	800bef6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fb55 	bl	800c59e <USBD_CtlError>
          break;
 800bef4:	bf00      	nop
      }
      break;
 800bef6:	e005      	b.n	800bf04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fb4f 	bl	800c59e <USBD_CtlError>
      break;
 800bf00:	e000      	b.n	800bf04 <USBD_StdEPReq+0x330>
      break;
 800bf02:	bf00      	nop
  }

  return ret;
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
	...

0800bf10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	885b      	ldrh	r3, [r3, #2]
 800bf2a:	0a1b      	lsrs	r3, r3, #8
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	2b06      	cmp	r3, #6
 800bf32:	f200 8128 	bhi.w	800c186 <USBD_GetDescriptor+0x276>
 800bf36:	a201      	add	r2, pc, #4	@ (adr r2, 800bf3c <USBD_GetDescriptor+0x2c>)
 800bf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3c:	0800bf59 	.word	0x0800bf59
 800bf40:	0800bf71 	.word	0x0800bf71
 800bf44:	0800bfb1 	.word	0x0800bfb1
 800bf48:	0800c187 	.word	0x0800c187
 800bf4c:	0800c187 	.word	0x0800c187
 800bf50:	0800c127 	.word	0x0800c127
 800bf54:	0800c153 	.word	0x0800c153
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	7c12      	ldrb	r2, [r2, #16]
 800bf64:	f107 0108 	add.w	r1, r7, #8
 800bf68:	4610      	mov	r0, r2
 800bf6a:	4798      	blx	r3
 800bf6c:	60f8      	str	r0, [r7, #12]
      break;
 800bf6e:	e112      	b.n	800c196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	7c1b      	ldrb	r3, [r3, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10d      	bne.n	800bf94 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf80:	f107 0208 	add.w	r2, r7, #8
 800bf84:	4610      	mov	r0, r2
 800bf86:	4798      	blx	r3
 800bf88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	2202      	movs	r2, #2
 800bf90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf92:	e100      	b.n	800c196 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf9c:	f107 0208 	add.w	r2, r7, #8
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4798      	blx	r3
 800bfa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	2202      	movs	r2, #2
 800bfac:	701a      	strb	r2, [r3, #0]
      break;
 800bfae:	e0f2      	b.n	800c196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	885b      	ldrh	r3, [r3, #2]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b05      	cmp	r3, #5
 800bfb8:	f200 80ac 	bhi.w	800c114 <USBD_GetDescriptor+0x204>
 800bfbc:	a201      	add	r2, pc, #4	@ (adr r2, 800bfc4 <USBD_GetDescriptor+0xb4>)
 800bfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc2:	bf00      	nop
 800bfc4:	0800bfdd 	.word	0x0800bfdd
 800bfc8:	0800c011 	.word	0x0800c011
 800bfcc:	0800c045 	.word	0x0800c045
 800bfd0:	0800c079 	.word	0x0800c079
 800bfd4:	0800c0ad 	.word	0x0800c0ad
 800bfd8:	0800c0e1 	.word	0x0800c0e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	7c12      	ldrb	r2, [r2, #16]
 800bff4:	f107 0108 	add.w	r1, r7, #8
 800bff8:	4610      	mov	r0, r2
 800bffa:	4798      	blx	r3
 800bffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bffe:	e091      	b.n	800c124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 facb 	bl	800c59e <USBD_CtlError>
            err++;
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	3301      	adds	r3, #1
 800c00c:	72fb      	strb	r3, [r7, #11]
          break;
 800c00e:	e089      	b.n	800c124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	7c12      	ldrb	r2, [r2, #16]
 800c028:	f107 0108 	add.w	r1, r7, #8
 800c02c:	4610      	mov	r0, r2
 800c02e:	4798      	blx	r3
 800c030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c032:	e077      	b.n	800c124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fab1 	bl	800c59e <USBD_CtlError>
            err++;
 800c03c:	7afb      	ldrb	r3, [r7, #11]
 800c03e:	3301      	adds	r3, #1
 800c040:	72fb      	strb	r3, [r7, #11]
          break;
 800c042:	e06f      	b.n	800c124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00b      	beq.n	800c068 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	7c12      	ldrb	r2, [r2, #16]
 800c05c:	f107 0108 	add.w	r1, r7, #8
 800c060:	4610      	mov	r0, r2
 800c062:	4798      	blx	r3
 800c064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c066:	e05d      	b.n	800c124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fa97 	bl	800c59e <USBD_CtlError>
            err++;
 800c070:	7afb      	ldrb	r3, [r7, #11]
 800c072:	3301      	adds	r3, #1
 800c074:	72fb      	strb	r3, [r7, #11]
          break;
 800c076:	e055      	b.n	800c124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00b      	beq.n	800c09c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	7c12      	ldrb	r2, [r2, #16]
 800c090:	f107 0108 	add.w	r1, r7, #8
 800c094:	4610      	mov	r0, r2
 800c096:	4798      	blx	r3
 800c098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c09a:	e043      	b.n	800c124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fa7d 	bl	800c59e <USBD_CtlError>
            err++;
 800c0a4:	7afb      	ldrb	r3, [r7, #11]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0aa:	e03b      	b.n	800c124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0b2:	695b      	ldr	r3, [r3, #20]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00b      	beq.n	800c0d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0be:	695b      	ldr	r3, [r3, #20]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	7c12      	ldrb	r2, [r2, #16]
 800c0c4:	f107 0108 	add.w	r1, r7, #8
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	4798      	blx	r3
 800c0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ce:	e029      	b.n	800c124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fa63 	bl	800c59e <USBD_CtlError>
            err++;
 800c0d8:	7afb      	ldrb	r3, [r7, #11]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0de:	e021      	b.n	800c124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	7c12      	ldrb	r2, [r2, #16]
 800c0f8:	f107 0108 	add.w	r1, r7, #8
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	4798      	blx	r3
 800c100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c102:	e00f      	b.n	800c124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fa49 	bl	800c59e <USBD_CtlError>
            err++;
 800c10c:	7afb      	ldrb	r3, [r7, #11]
 800c10e:	3301      	adds	r3, #1
 800c110:	72fb      	strb	r3, [r7, #11]
          break;
 800c112:	e007      	b.n	800c124 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fa41 	bl	800c59e <USBD_CtlError>
          err++;
 800c11c:	7afb      	ldrb	r3, [r7, #11]
 800c11e:	3301      	adds	r3, #1
 800c120:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c122:	bf00      	nop
      }
      break;
 800c124:	e037      	b.n	800c196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	7c1b      	ldrb	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d109      	bne.n	800c142 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c136:	f107 0208 	add.w	r2, r7, #8
 800c13a:	4610      	mov	r0, r2
 800c13c:	4798      	blx	r3
 800c13e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c140:	e029      	b.n	800c196 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fa2a 	bl	800c59e <USBD_CtlError>
        err++;
 800c14a:	7afb      	ldrb	r3, [r7, #11]
 800c14c:	3301      	adds	r3, #1
 800c14e:	72fb      	strb	r3, [r7, #11]
      break;
 800c150:	e021      	b.n	800c196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	7c1b      	ldrb	r3, [r3, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10d      	bne.n	800c176 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c162:	f107 0208 	add.w	r2, r7, #8
 800c166:	4610      	mov	r0, r2
 800c168:	4798      	blx	r3
 800c16a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	3301      	adds	r3, #1
 800c170:	2207      	movs	r2, #7
 800c172:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c174:	e00f      	b.n	800c196 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c176:	6839      	ldr	r1, [r7, #0]
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa10 	bl	800c59e <USBD_CtlError>
        err++;
 800c17e:	7afb      	ldrb	r3, [r7, #11]
 800c180:	3301      	adds	r3, #1
 800c182:	72fb      	strb	r3, [r7, #11]
      break;
 800c184:	e007      	b.n	800c196 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fa08 	bl	800c59e <USBD_CtlError>
      err++;
 800c18e:	7afb      	ldrb	r3, [r7, #11]
 800c190:	3301      	adds	r3, #1
 800c192:	72fb      	strb	r3, [r7, #11]
      break;
 800c194:	bf00      	nop
  }

  if (err != 0U)
 800c196:	7afb      	ldrb	r3, [r7, #11]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d11e      	bne.n	800c1da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	88db      	ldrh	r3, [r3, #6]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d016      	beq.n	800c1d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c1a4:	893b      	ldrh	r3, [r7, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00e      	beq.n	800c1c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	88da      	ldrh	r2, [r3, #6]
 800c1ae:	893b      	ldrh	r3, [r7, #8]
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	bf28      	it	cs
 800c1b4:	4613      	movcs	r3, r2
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1ba:	893b      	ldrh	r3, [r7, #8]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	68f9      	ldr	r1, [r7, #12]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fa69 	bl	800c698 <USBD_CtlSendData>
 800c1c6:	e009      	b.n	800c1dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f9e7 	bl	800c59e <USBD_CtlError>
 800c1d0:	e004      	b.n	800c1dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 faba 	bl	800c74c <USBD_CtlSendStatus>
 800c1d8:	e000      	b.n	800c1dc <USBD_GetDescriptor+0x2cc>
    return;
 800c1da:	bf00      	nop
  }
}
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop

0800c1e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	889b      	ldrh	r3, [r3, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d131      	bne.n	800c25a <USBD_SetAddress+0x76>
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	88db      	ldrh	r3, [r3, #6]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d12d      	bne.n	800c25a <USBD_SetAddress+0x76>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	885b      	ldrh	r3, [r3, #2]
 800c202:	2b7f      	cmp	r3, #127	@ 0x7f
 800c204:	d829      	bhi.n	800c25a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	885b      	ldrh	r3, [r3, #2]
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c210:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d104      	bne.n	800c228 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f9bc 	bl	800c59e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c226:	e01d      	b.n	800c264 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	7bfa      	ldrb	r2, [r7, #15]
 800c22c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 ff11 	bl	800d05c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fa86 	bl	800c74c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c240:	7bfb      	ldrb	r3, [r7, #15]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d004      	beq.n	800c250 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2202      	movs	r2, #2
 800c24a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c24e:	e009      	b.n	800c264 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c258:	e004      	b.n	800c264 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f99e 	bl	800c59e <USBD_CtlError>
  }
}
 800c262:	bf00      	nop
 800c264:	bf00      	nop
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c276:	2300      	movs	r3, #0
 800c278:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	885b      	ldrh	r3, [r3, #2]
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	4b4e      	ldr	r3, [pc, #312]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c282:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c284:	4b4d      	ldr	r3, [pc, #308]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d905      	bls.n	800c298 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f985 	bl	800c59e <USBD_CtlError>
    return USBD_FAIL;
 800c294:	2303      	movs	r3, #3
 800c296:	e08c      	b.n	800c3b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d002      	beq.n	800c2aa <USBD_SetConfig+0x3e>
 800c2a4:	2b03      	cmp	r3, #3
 800c2a6:	d029      	beq.n	800c2fc <USBD_SetConfig+0x90>
 800c2a8:	e075      	b.n	800c396 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c2aa:	4b44      	ldr	r3, [pc, #272]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d020      	beq.n	800c2f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c2b2:	4b42      	ldr	r3, [pc, #264]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2bc:	4b3f      	ldr	r3, [pc, #252]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7fe ffe3 	bl	800b28e <USBD_SetClassConfig>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d008      	beq.n	800c2e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f962 	bl	800c59e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2202      	movs	r2, #2
 800c2de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2e2:	e065      	b.n	800c3b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fa31 	bl	800c74c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2203      	movs	r2, #3
 800c2ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c2f2:	e05d      	b.n	800c3b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fa29 	bl	800c74c <USBD_CtlSendStatus>
      break;
 800c2fa:	e059      	b.n	800c3b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c2fc:	4b2f      	ldr	r3, [pc, #188]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d112      	bne.n	800c32a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2202      	movs	r2, #2
 800c308:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c30c:	4b2b      	ldr	r3, [pc, #172]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	461a      	mov	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c316:	4b29      	ldr	r3, [pc, #164]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7fe ffd2 	bl	800b2c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa12 	bl	800c74c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c328:	e042      	b.n	800c3b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c32a:	4b24      	ldr	r3, [pc, #144]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	429a      	cmp	r2, r3
 800c336:	d02a      	beq.n	800c38e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7fe ffc0 	bl	800b2c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c346:	4b1d      	ldr	r3, [pc, #116]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	461a      	mov	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c350:	4b1a      	ldr	r3, [pc, #104]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7fe ff99 	bl	800b28e <USBD_SetClassConfig>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00f      	beq.n	800c386 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f918 	bl	800c59e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7fe ffa5 	bl	800b2c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2202      	movs	r2, #2
 800c380:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c384:	e014      	b.n	800c3b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f9e0 	bl	800c74c <USBD_CtlSendStatus>
      break;
 800c38c:	e010      	b.n	800c3b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 f9dc 	bl	800c74c <USBD_CtlSendStatus>
      break;
 800c394:	e00c      	b.n	800c3b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f900 	bl	800c59e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c39e:	4b07      	ldr	r3, [pc, #28]	@ (800c3bc <USBD_SetConfig+0x150>)
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7fe ff8e 	bl	800b2c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ae:	bf00      	nop
  }

  return ret;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20000960 	.word	0x20000960

0800c3c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	88db      	ldrh	r3, [r3, #6]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d004      	beq.n	800c3dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 f8e2 	bl	800c59e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c3da:	e023      	b.n	800c424 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	dc02      	bgt.n	800c3ee <USBD_GetConfig+0x2e>
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	dc03      	bgt.n	800c3f4 <USBD_GetConfig+0x34>
 800c3ec:	e015      	b.n	800c41a <USBD_GetConfig+0x5a>
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d00b      	beq.n	800c40a <USBD_GetConfig+0x4a>
 800c3f2:	e012      	b.n	800c41a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	2201      	movs	r2, #1
 800c400:	4619      	mov	r1, r3
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f948 	bl	800c698 <USBD_CtlSendData>
        break;
 800c408:	e00c      	b.n	800c424 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3304      	adds	r3, #4
 800c40e:	2201      	movs	r2, #1
 800c410:	4619      	mov	r1, r3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f940 	bl	800c698 <USBD_CtlSendData>
        break;
 800c418:	e004      	b.n	800c424 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f8be 	bl	800c59e <USBD_CtlError>
        break;
 800c422:	bf00      	nop
}
 800c424:	bf00      	nop
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	3b01      	subs	r3, #1
 800c440:	2b02      	cmp	r3, #2
 800c442:	d81e      	bhi.n	800c482 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	88db      	ldrh	r3, [r3, #6]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d004      	beq.n	800c456 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f8a5 	bl	800c59e <USBD_CtlError>
        break;
 800c454:	e01a      	b.n	800c48c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	f043 0202 	orr.w	r2, r3, #2
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	330c      	adds	r3, #12
 800c476:	2202      	movs	r2, #2
 800c478:	4619      	mov	r1, r3
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f90c 	bl	800c698 <USBD_CtlSendData>
      break;
 800c480:	e004      	b.n	800c48c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f88a 	bl	800c59e <USBD_CtlError>
      break;
 800c48a:	bf00      	nop
  }
}
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	885b      	ldrh	r3, [r3, #2]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d107      	bne.n	800c4b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f94c 	bl	800c74c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c4b4:	e013      	b.n	800c4de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	885b      	ldrh	r3, [r3, #2]
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d10b      	bne.n	800c4d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	889b      	ldrh	r3, [r3, #4]
 800c4c2:	0a1b      	lsrs	r3, r3, #8
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f93c 	bl	800c74c <USBD_CtlSendStatus>
}
 800c4d4:	e003      	b.n	800c4de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 f860 	bl	800c59e <USBD_CtlError>
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d80b      	bhi.n	800c516 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	885b      	ldrh	r3, [r3, #2]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d10c      	bne.n	800c520 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f91c 	bl	800c74c <USBD_CtlSendStatus>
      }
      break;
 800c514:	e004      	b.n	800c520 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f840 	bl	800c59e <USBD_CtlError>
      break;
 800c51e:	e000      	b.n	800c522 <USBD_ClrFeature+0x3c>
      break;
 800c520:	bf00      	nop
  }
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	781a      	ldrb	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	3301      	adds	r3, #1
 800c544:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	781a      	ldrb	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	3301      	adds	r3, #1
 800c552:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f7ff fa40 	bl	800b9da <SWAPBYTE>
 800c55a:	4603      	mov	r3, r0
 800c55c:	461a      	mov	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	3301      	adds	r3, #1
 800c566:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	3301      	adds	r3, #1
 800c56c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f7ff fa33 	bl	800b9da <SWAPBYTE>
 800c574:	4603      	mov	r3, r0
 800c576:	461a      	mov	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3301      	adds	r3, #1
 800c580:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	3301      	adds	r3, #1
 800c586:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7ff fa26 	bl	800b9da <SWAPBYTE>
 800c58e:	4603      	mov	r3, r0
 800c590:	461a      	mov	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	80da      	strh	r2, [r3, #6]
}
 800c596:	bf00      	nop
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5a8:	2180      	movs	r1, #128	@ 0x80
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fcec 	bl	800cf88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 fce8 	bl	800cf88 <USBD_LL_StallEP>
}
 800c5b8:	bf00      	nop
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d042      	beq.n	800c65c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c5da:	6938      	ldr	r0, [r7, #16]
 800c5dc:	f000 f842 	bl	800c664 <USBD_GetLen>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5ea:	d808      	bhi.n	800c5fe <USBD_GetString+0x3e>
 800c5ec:	6938      	ldr	r0, [r7, #16]
 800c5ee:	f000 f839 	bl	800c664 <USBD_GetLen>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	e001      	b.n	800c602 <USBD_GetString+0x42>
 800c5fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c606:	7dfb      	ldrb	r3, [r7, #23]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	4413      	add	r3, r2
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	7812      	ldrb	r2, [r2, #0]
 800c610:	701a      	strb	r2, [r3, #0]
  idx++;
 800c612:	7dfb      	ldrb	r3, [r7, #23]
 800c614:	3301      	adds	r3, #1
 800c616:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c618:	7dfb      	ldrb	r3, [r7, #23]
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	4413      	add	r3, r2
 800c61e:	2203      	movs	r2, #3
 800c620:	701a      	strb	r2, [r3, #0]
  idx++;
 800c622:	7dfb      	ldrb	r3, [r7, #23]
 800c624:	3301      	adds	r3, #1
 800c626:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c628:	e013      	b.n	800c652 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	4413      	add	r3, r2
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	7812      	ldrb	r2, [r2, #0]
 800c634:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	3301      	adds	r3, #1
 800c63a:	613b      	str	r3, [r7, #16]
    idx++;
 800c63c:	7dfb      	ldrb	r3, [r7, #23]
 800c63e:	3301      	adds	r3, #1
 800c640:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	4413      	add	r3, r2
 800c648:	2200      	movs	r2, #0
 800c64a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c64c:	7dfb      	ldrb	r3, [r7, #23]
 800c64e:	3301      	adds	r3, #1
 800c650:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e7      	bne.n	800c62a <USBD_GetString+0x6a>
 800c65a:	e000      	b.n	800c65e <USBD_GetString+0x9e>
    return;
 800c65c:	bf00      	nop
  }
}
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c66c:	2300      	movs	r3, #0
 800c66e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c674:	e005      	b.n	800c682 <USBD_GetLen+0x1e>
  {
    len++;
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	3301      	adds	r3, #1
 800c67a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	3301      	adds	r3, #1
 800c680:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1f5      	bne.n	800c676 <USBD_GetLen+0x12>
  }

  return len;
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	2100      	movs	r1, #0
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f000 fceb 	bl	800d09a <USBD_LL_Transmit>

  return USBD_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	2100      	movs	r1, #0
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 fcda 	bl	800d09a <USBD_LL_Transmit>

  return USBD_OK;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3710      	adds	r7, #16
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2203      	movs	r2, #3
 800c700:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68ba      	ldr	r2, [r7, #8]
 800c718:	2100      	movs	r1, #0
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f000 fcde 	bl	800d0dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b084      	sub	sp, #16
 800c72e:	af00      	add	r7, sp, #0
 800c730:	60f8      	str	r0, [r7, #12]
 800c732:	60b9      	str	r1, [r7, #8]
 800c734:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	2100      	movs	r1, #0
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f000 fccd 	bl	800d0dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2204      	movs	r2, #4
 800c758:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c75c:	2300      	movs	r3, #0
 800c75e:	2200      	movs	r2, #0
 800c760:	2100      	movs	r1, #0
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fc99 	bl	800d09a <USBD_LL_Transmit>

  return USBD_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b082      	sub	sp, #8
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2205      	movs	r2, #5
 800c77e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c782:	2300      	movs	r3, #0
 800c784:	2200      	movs	r2, #0
 800c786:	2100      	movs	r1, #0
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fca7 	bl	800d0dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c79c:	2200      	movs	r2, #0
 800c79e:	4912      	ldr	r1, [pc, #72]	@ (800c7e8 <MX_USB_DEVICE_Init+0x50>)
 800c7a0:	4812      	ldr	r0, [pc, #72]	@ (800c7ec <MX_USB_DEVICE_Init+0x54>)
 800c7a2:	f7fe fcf7 	bl	800b194 <USBD_Init>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d001      	beq.n	800c7b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c7ac:	f7f6 fe0e 	bl	80033cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c7b0:	490f      	ldr	r1, [pc, #60]	@ (800c7f0 <MX_USB_DEVICE_Init+0x58>)
 800c7b2:	480e      	ldr	r0, [pc, #56]	@ (800c7ec <MX_USB_DEVICE_Init+0x54>)
 800c7b4:	f7fe fd1e 	bl	800b1f4 <USBD_RegisterClass>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c7be:	f7f6 fe05 	bl	80033cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c7c2:	490c      	ldr	r1, [pc, #48]	@ (800c7f4 <MX_USB_DEVICE_Init+0x5c>)
 800c7c4:	4809      	ldr	r0, [pc, #36]	@ (800c7ec <MX_USB_DEVICE_Init+0x54>)
 800c7c6:	f7fe fc15 	bl	800aff4 <USBD_CDC_RegisterInterface>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d001      	beq.n	800c7d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c7d0:	f7f6 fdfc 	bl	80033cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c7d4:	4805      	ldr	r0, [pc, #20]	@ (800c7ec <MX_USB_DEVICE_Init+0x54>)
 800c7d6:	f7fe fd43 	bl	800b260 <USBD_Start>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c7e0:	f7f6 fdf4 	bl	80033cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c7e4:	bf00      	nop
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	200000d8 	.word	0x200000d8
 800c7ec:	20000964 	.word	0x20000964
 800c7f0:	20000044 	.word	0x20000044
 800c7f4:	200000c4 	.word	0x200000c4

0800c7f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	4905      	ldr	r1, [pc, #20]	@ (800c814 <CDC_Init_FS+0x1c>)
 800c800:	4805      	ldr	r0, [pc, #20]	@ (800c818 <CDC_Init_FS+0x20>)
 800c802:	f7fe fc11 	bl	800b028 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c806:	4905      	ldr	r1, [pc, #20]	@ (800c81c <CDC_Init_FS+0x24>)
 800c808:	4803      	ldr	r0, [pc, #12]	@ (800c818 <CDC_Init_FS+0x20>)
 800c80a:	f7fe fc2f 	bl	800b06c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c80e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c810:	4618      	mov	r0, r3
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20001440 	.word	0x20001440
 800c818:	20000964 	.word	0x20000964
 800c81c:	20000c40 	.word	0x20000c40

0800c820 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c820:	b480      	push	{r7}
 800c822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c824:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c826:	4618      	mov	r0, r3
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	6039      	str	r1, [r7, #0]
 800c83a:	71fb      	strb	r3, [r7, #7]
 800c83c:	4613      	mov	r3, r2
 800c83e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	2b23      	cmp	r3, #35	@ 0x23
 800c844:	d84a      	bhi.n	800c8dc <CDC_Control_FS+0xac>
 800c846:	a201      	add	r2, pc, #4	@ (adr r2, 800c84c <CDC_Control_FS+0x1c>)
 800c848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84c:	0800c8dd 	.word	0x0800c8dd
 800c850:	0800c8dd 	.word	0x0800c8dd
 800c854:	0800c8dd 	.word	0x0800c8dd
 800c858:	0800c8dd 	.word	0x0800c8dd
 800c85c:	0800c8dd 	.word	0x0800c8dd
 800c860:	0800c8dd 	.word	0x0800c8dd
 800c864:	0800c8dd 	.word	0x0800c8dd
 800c868:	0800c8dd 	.word	0x0800c8dd
 800c86c:	0800c8dd 	.word	0x0800c8dd
 800c870:	0800c8dd 	.word	0x0800c8dd
 800c874:	0800c8dd 	.word	0x0800c8dd
 800c878:	0800c8dd 	.word	0x0800c8dd
 800c87c:	0800c8dd 	.word	0x0800c8dd
 800c880:	0800c8dd 	.word	0x0800c8dd
 800c884:	0800c8dd 	.word	0x0800c8dd
 800c888:	0800c8dd 	.word	0x0800c8dd
 800c88c:	0800c8dd 	.word	0x0800c8dd
 800c890:	0800c8dd 	.word	0x0800c8dd
 800c894:	0800c8dd 	.word	0x0800c8dd
 800c898:	0800c8dd 	.word	0x0800c8dd
 800c89c:	0800c8dd 	.word	0x0800c8dd
 800c8a0:	0800c8dd 	.word	0x0800c8dd
 800c8a4:	0800c8dd 	.word	0x0800c8dd
 800c8a8:	0800c8dd 	.word	0x0800c8dd
 800c8ac:	0800c8dd 	.word	0x0800c8dd
 800c8b0:	0800c8dd 	.word	0x0800c8dd
 800c8b4:	0800c8dd 	.word	0x0800c8dd
 800c8b8:	0800c8dd 	.word	0x0800c8dd
 800c8bc:	0800c8dd 	.word	0x0800c8dd
 800c8c0:	0800c8dd 	.word	0x0800c8dd
 800c8c4:	0800c8dd 	.word	0x0800c8dd
 800c8c8:	0800c8dd 	.word	0x0800c8dd
 800c8cc:	0800c8dd 	.word	0x0800c8dd
 800c8d0:	0800c8dd 	.word	0x0800c8dd
 800c8d4:	0800c8dd 	.word	0x0800c8dd
 800c8d8:	0800c8dd 	.word	0x0800c8dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c8dc:	bf00      	nop
  }

  return (USBD_OK);
 800c8de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c8f6:	6879      	ldr	r1, [r7, #4]
 800c8f8:	4805      	ldr	r0, [pc, #20]	@ (800c910 <CDC_Receive_FS+0x24>)
 800c8fa:	f7fe fbb7 	bl	800b06c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c8fe:	4804      	ldr	r0, [pc, #16]	@ (800c910 <CDC_Receive_FS+0x24>)
 800c900:	f7fe fc12 	bl	800b128 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c904:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20000964 	.word	0x20000964

0800c914 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	460b      	mov	r3, r1
 800c91e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c924:	4b0d      	ldr	r3, [pc, #52]	@ (800c95c <CDC_Transmit_FS+0x48>)
 800c926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c92a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c936:	2301      	movs	r3, #1
 800c938:	e00b      	b.n	800c952 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c93a:	887b      	ldrh	r3, [r7, #2]
 800c93c:	461a      	mov	r2, r3
 800c93e:	6879      	ldr	r1, [r7, #4]
 800c940:	4806      	ldr	r0, [pc, #24]	@ (800c95c <CDC_Transmit_FS+0x48>)
 800c942:	f7fe fb71 	bl	800b028 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c946:	4805      	ldr	r0, [pc, #20]	@ (800c95c <CDC_Transmit_FS+0x48>)
 800c948:	f7fe fbae 	bl	800b0a8 <USBD_CDC_TransmitPacket>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c950:	7bfb      	ldrb	r3, [r7, #15]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	20000964 	.word	0x20000964

0800c960 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c960:	b480      	push	{r7}
 800c962:	b087      	sub	sp, #28
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	4613      	mov	r3, r2
 800c96c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c976:	4618      	mov	r0, r3
 800c978:	371c      	adds	r7, #28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
	...

0800c984 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4603      	mov	r3, r0
 800c98c:	6039      	str	r1, [r7, #0]
 800c98e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	2212      	movs	r2, #18
 800c994:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c996:	4b03      	ldr	r3, [pc, #12]	@ (800c9a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	200000f4 	.word	0x200000f4

0800c9a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	6039      	str	r1, [r7, #0]
 800c9b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	2204      	movs	r2, #4
 800c9b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9ba:	4b03      	ldr	r3, [pc, #12]	@ (800c9c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	20000108 	.word	0x20000108

0800c9cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	6039      	str	r1, [r7, #0]
 800c9d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d105      	bne.n	800c9ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	4907      	ldr	r1, [pc, #28]	@ (800ca00 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9e2:	4808      	ldr	r0, [pc, #32]	@ (800ca04 <USBD_FS_ProductStrDescriptor+0x38>)
 800c9e4:	f7ff fdec 	bl	800c5c0 <USBD_GetString>
 800c9e8:	e004      	b.n	800c9f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	4904      	ldr	r1, [pc, #16]	@ (800ca00 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9ee:	4805      	ldr	r0, [pc, #20]	@ (800ca04 <USBD_FS_ProductStrDescriptor+0x38>)
 800c9f0:	f7ff fde6 	bl	800c5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9f4:	4b02      	ldr	r3, [pc, #8]	@ (800ca00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20001c40 	.word	0x20001c40
 800ca04:	080124b8 	.word	0x080124b8

0800ca08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	6039      	str	r1, [r7, #0]
 800ca12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	4904      	ldr	r1, [pc, #16]	@ (800ca28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca18:	4804      	ldr	r0, [pc, #16]	@ (800ca2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca1a:	f7ff fdd1 	bl	800c5c0 <USBD_GetString>
  return USBD_StrDesc;
 800ca1e:	4b02      	ldr	r3, [pc, #8]	@ (800ca28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	20001c40 	.word	0x20001c40
 800ca2c:	080124d0 	.word	0x080124d0

0800ca30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	6039      	str	r1, [r7, #0]
 800ca3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	221a      	movs	r2, #26
 800ca40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca42:	f000 f843 	bl	800cacc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca46:	4b02      	ldr	r3, [pc, #8]	@ (800ca50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	2000010c 	.word	0x2000010c

0800ca54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca60:	79fb      	ldrb	r3, [r7, #7]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d105      	bne.n	800ca72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	4907      	ldr	r1, [pc, #28]	@ (800ca88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca6a:	4808      	ldr	r0, [pc, #32]	@ (800ca8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca6c:	f7ff fda8 	bl	800c5c0 <USBD_GetString>
 800ca70:	e004      	b.n	800ca7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	4904      	ldr	r1, [pc, #16]	@ (800ca88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca76:	4805      	ldr	r0, [pc, #20]	@ (800ca8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca78:	f7ff fda2 	bl	800c5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca7c:	4b02      	ldr	r3, [pc, #8]	@ (800ca88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	20001c40 	.word	0x20001c40
 800ca8c:	080124e4 	.word	0x080124e4

0800ca90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca9c:	79fb      	ldrb	r3, [r7, #7]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d105      	bne.n	800caae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	4907      	ldr	r1, [pc, #28]	@ (800cac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800caa6:	4808      	ldr	r0, [pc, #32]	@ (800cac8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800caa8:	f7ff fd8a 	bl	800c5c0 <USBD_GetString>
 800caac:	e004      	b.n	800cab8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	4904      	ldr	r1, [pc, #16]	@ (800cac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cab2:	4805      	ldr	r0, [pc, #20]	@ (800cac8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cab4:	f7ff fd84 	bl	800c5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cab8:	4b02      	ldr	r3, [pc, #8]	@ (800cac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	20001c40 	.word	0x20001c40
 800cac8:	080124f0 	.word	0x080124f0

0800cacc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cad2:	4b0f      	ldr	r3, [pc, #60]	@ (800cb10 <Get_SerialNum+0x44>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cad8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb14 <Get_SerialNum+0x48>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cade:	4b0e      	ldr	r3, [pc, #56]	@ (800cb18 <Get_SerialNum+0x4c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4413      	add	r3, r2
 800caea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d009      	beq.n	800cb06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800caf2:	2208      	movs	r2, #8
 800caf4:	4909      	ldr	r1, [pc, #36]	@ (800cb1c <Get_SerialNum+0x50>)
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f000 f814 	bl	800cb24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cafc:	2204      	movs	r2, #4
 800cafe:	4908      	ldr	r1, [pc, #32]	@ (800cb20 <Get_SerialNum+0x54>)
 800cb00:	68b8      	ldr	r0, [r7, #8]
 800cb02:	f000 f80f 	bl	800cb24 <IntToUnicode>
  }
}
 800cb06:	bf00      	nop
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	1fff7a10 	.word	0x1fff7a10
 800cb14:	1fff7a14 	.word	0x1fff7a14
 800cb18:	1fff7a18 	.word	0x1fff7a18
 800cb1c:	2000010e 	.word	0x2000010e
 800cb20:	2000011e 	.word	0x2000011e

0800cb24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb36:	2300      	movs	r3, #0
 800cb38:	75fb      	strb	r3, [r7, #23]
 800cb3a:	e027      	b.n	800cb8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	0f1b      	lsrs	r3, r3, #28
 800cb40:	2b09      	cmp	r3, #9
 800cb42:	d80b      	bhi.n	800cb5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	0f1b      	lsrs	r3, r3, #28
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4619      	mov	r1, r3
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	440b      	add	r3, r1
 800cb54:	3230      	adds	r2, #48	@ 0x30
 800cb56:	b2d2      	uxtb	r2, r2
 800cb58:	701a      	strb	r2, [r3, #0]
 800cb5a:	e00a      	b.n	800cb72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	0f1b      	lsrs	r3, r3, #28
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4619      	mov	r1, r3
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	440b      	add	r3, r1
 800cb6c:	3237      	adds	r2, #55	@ 0x37
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	011b      	lsls	r3, r3, #4
 800cb76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	4413      	add	r3, r2
 800cb82:	2200      	movs	r2, #0
 800cb84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cb86:	7dfb      	ldrb	r3, [r7, #23]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	75fb      	strb	r3, [r7, #23]
 800cb8c:	7dfa      	ldrb	r2, [r7, #23]
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d3d3      	bcc.n	800cb3c <IntToUnicode+0x18>
  }
}
 800cb94:	bf00      	nop
 800cb96:	bf00      	nop
 800cb98:	371c      	adds	r7, #28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
	...

0800cba4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b08a      	sub	sp, #40	@ 0x28
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbac:	f107 0314 	add.w	r3, r7, #20
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]
 800cbb4:	605a      	str	r2, [r3, #4]
 800cbb6:	609a      	str	r2, [r3, #8]
 800cbb8:	60da      	str	r2, [r3, #12]
 800cbba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cbc4:	d13a      	bne.n	800cc3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	613b      	str	r3, [r7, #16]
 800cbca:	4b1e      	ldr	r3, [pc, #120]	@ (800cc44 <HAL_PCD_MspInit+0xa0>)
 800cbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbce:	4a1d      	ldr	r2, [pc, #116]	@ (800cc44 <HAL_PCD_MspInit+0xa0>)
 800cbd0:	f043 0301 	orr.w	r3, r3, #1
 800cbd4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbd6:	4b1b      	ldr	r3, [pc, #108]	@ (800cc44 <HAL_PCD_MspInit+0xa0>)
 800cbd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	613b      	str	r3, [r7, #16]
 800cbe0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cbe2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cbe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbe8:	2302      	movs	r3, #2
 800cbea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbec:	2300      	movs	r3, #0
 800cbee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cbf4:	230a      	movs	r3, #10
 800cbf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbf8:	f107 0314 	add.w	r3, r7, #20
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4812      	ldr	r0, [pc, #72]	@ (800cc48 <HAL_PCD_MspInit+0xa4>)
 800cc00:	f7f7 fd46 	bl	8004690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc04:	4b0f      	ldr	r3, [pc, #60]	@ (800cc44 <HAL_PCD_MspInit+0xa0>)
 800cc06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc08:	4a0e      	ldr	r2, [pc, #56]	@ (800cc44 <HAL_PCD_MspInit+0xa0>)
 800cc0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc0e:	6353      	str	r3, [r2, #52]	@ 0x34
 800cc10:	2300      	movs	r3, #0
 800cc12:	60fb      	str	r3, [r7, #12]
 800cc14:	4b0b      	ldr	r3, [pc, #44]	@ (800cc44 <HAL_PCD_MspInit+0xa0>)
 800cc16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc18:	4a0a      	ldr	r2, [pc, #40]	@ (800cc44 <HAL_PCD_MspInit+0xa0>)
 800cc1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cc1e:	6453      	str	r3, [r2, #68]	@ 0x44
 800cc20:	4b08      	ldr	r3, [pc, #32]	@ (800cc44 <HAL_PCD_MspInit+0xa0>)
 800cc22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	2100      	movs	r1, #0
 800cc30:	2043      	movs	r0, #67	@ 0x43
 800cc32:	f7f7 f8f4 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cc36:	2043      	movs	r0, #67	@ 0x43
 800cc38:	f7f7 f90d 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cc3c:	bf00      	nop
 800cc3e:	3728      	adds	r7, #40	@ 0x28
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	40023800 	.word	0x40023800
 800cc48:	40020000 	.word	0x40020000

0800cc4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cc60:	4619      	mov	r1, r3
 800cc62:	4610      	mov	r0, r2
 800cc64:	f7fe fb49 	bl	800b2fa <USBD_LL_SetupStage>
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	6879      	ldr	r1, [r7, #4]
 800cc86:	4613      	mov	r3, r2
 800cc88:	00db      	lsls	r3, r3, #3
 800cc8a:	4413      	add	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	440b      	add	r3, r1
 800cc90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	78fb      	ldrb	r3, [r7, #3]
 800cc98:	4619      	mov	r1, r3
 800cc9a:	f7fe fb83 	bl	800b3a4 <USBD_LL_DataOutStage>
}
 800cc9e:	bf00      	nop
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	460b      	mov	r3, r1
 800ccb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ccb8:	78fa      	ldrb	r2, [r7, #3]
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	440b      	add	r3, r1
 800ccc6:	3320      	adds	r3, #32
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	78fb      	ldrb	r3, [r7, #3]
 800cccc:	4619      	mov	r1, r3
 800ccce:	f7fe fc1c 	bl	800b50a <USBD_LL_DataInStage>
}
 800ccd2:	bf00      	nop
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b082      	sub	sp, #8
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fe fd56 	bl	800b79a <USBD_LL_SOF>
}
 800ccee:	bf00      	nop
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	79db      	ldrb	r3, [r3, #7]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d102      	bne.n	800cd10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	73fb      	strb	r3, [r7, #15]
 800cd0e:	e008      	b.n	800cd22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	79db      	ldrb	r3, [r3, #7]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d102      	bne.n	800cd1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	73fb      	strb	r3, [r7, #15]
 800cd1c:	e001      	b.n	800cd22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cd1e:	f7f6 fb55 	bl	80033cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd28:	7bfa      	ldrb	r2, [r7, #15]
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe fcf0 	bl	800b712 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fe fc98 	bl	800b66e <USBD_LL_Reset>
}
 800cd3e:	bf00      	nop
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
	...

0800cd48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe fceb 	bl	800b732 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6812      	ldr	r2, [r2, #0]
 800cd6a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cd6e:	f043 0301 	orr.w	r3, r3, #1
 800cd72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7adb      	ldrb	r3, [r3, #11]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d005      	beq.n	800cd88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd7c:	4b04      	ldr	r3, [pc, #16]	@ (800cd90 <HAL_PCD_SuspendCallback+0x48>)
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	4a03      	ldr	r2, [pc, #12]	@ (800cd90 <HAL_PCD_SuspendCallback+0x48>)
 800cd82:	f043 0306 	orr.w	r3, r3, #6
 800cd86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	e000ed00 	.word	0xe000ed00

0800cd94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fe fce1 	bl	800b76a <USBD_LL_Resume>
}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdc2:	78fa      	ldrb	r2, [r7, #3]
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fe fd39 	bl	800b83e <USBD_LL_IsoOUTIncomplete>
}
 800cdcc:	bf00      	nop
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cde6:	78fa      	ldrb	r2, [r7, #3]
 800cde8:	4611      	mov	r1, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe fcf5 	bl	800b7da <USBD_LL_IsoINIncomplete>
}
 800cdf0:	bf00      	nop
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fe fd4b 	bl	800b8a2 <USBD_LL_DevConnected>
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe fd48 	bl	800b8b8 <USBD_LL_DevDisconnected>
}
 800ce28:	bf00      	nop
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d13c      	bne.n	800ceba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ce40:	4a20      	ldr	r2, [pc, #128]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a1e      	ldr	r2, [pc, #120]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce4c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ce50:	4b1c      	ldr	r3, [pc, #112]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ce56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ce58:	4b1a      	ldr	r3, [pc, #104]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce5a:	2204      	movs	r2, #4
 800ce5c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ce5e:	4b19      	ldr	r3, [pc, #100]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce60:	2202      	movs	r2, #2
 800ce62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ce64:	4b17      	ldr	r3, [pc, #92]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce66:	2200      	movs	r2, #0
 800ce68:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ce6a:	4b16      	ldr	r3, [pc, #88]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ce70:	4b14      	ldr	r3, [pc, #80]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce72:	2200      	movs	r2, #0
 800ce74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ce76:	4b13      	ldr	r3, [pc, #76]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ce7c:	4b11      	ldr	r3, [pc, #68]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ce82:	4b10      	ldr	r3, [pc, #64]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ce88:	4b0e      	ldr	r3, [pc, #56]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ce8e:	480d      	ldr	r0, [pc, #52]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ce90:	f7f7 fde6 	bl	8004a60 <HAL_PCD_Init>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ce9a:	f7f6 fa97 	bl	80033cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ce9e:	2180      	movs	r1, #128	@ 0x80
 800cea0:	4808      	ldr	r0, [pc, #32]	@ (800cec4 <USBD_LL_Init+0x94>)
 800cea2:	f7f9 f812 	bl	8005eca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cea6:	2240      	movs	r2, #64	@ 0x40
 800cea8:	2100      	movs	r1, #0
 800ceaa:	4806      	ldr	r0, [pc, #24]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ceac:	f7f8 ffc6 	bl	8005e3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ceb0:	2280      	movs	r2, #128	@ 0x80
 800ceb2:	2101      	movs	r1, #1
 800ceb4:	4803      	ldr	r0, [pc, #12]	@ (800cec4 <USBD_LL_Init+0x94>)
 800ceb6:	f7f8 ffc1 	bl	8005e3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	20001e40 	.word	0x20001e40

0800cec8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ced4:	2300      	movs	r3, #0
 800ced6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f7 fecd 	bl	8004c7e <HAL_PCD_Start>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 f942 	bl	800d174 <USBD_Get_USB_Status>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	4608      	mov	r0, r1
 800cf08:	4611      	mov	r1, r2
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	70fb      	strb	r3, [r7, #3]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70bb      	strb	r3, [r7, #2]
 800cf14:	4613      	mov	r3, r2
 800cf16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cf26:	78bb      	ldrb	r3, [r7, #2]
 800cf28:	883a      	ldrh	r2, [r7, #0]
 800cf2a:	78f9      	ldrb	r1, [r7, #3]
 800cf2c:	f7f8 fba1 	bl	8005672 <HAL_PCD_EP_Open>
 800cf30:	4603      	mov	r3, r0
 800cf32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 f91c 	bl	800d174 <USBD_Get_USB_Status>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf40:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	460b      	mov	r3, r1
 800cf54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf64:	78fa      	ldrb	r2, [r7, #3]
 800cf66:	4611      	mov	r1, r2
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7f8 fbec 	bl	8005746 <HAL_PCD_EP_Close>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f000 f8fd 	bl	800d174 <USBD_Get_USB_Status>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	460b      	mov	r3, r1
 800cf92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfa2:	78fa      	ldrb	r2, [r7, #3]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7f8 fca4 	bl	80058f4 <HAL_PCD_EP_SetStall>
 800cfac:	4603      	mov	r3, r0
 800cfae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f000 f8de 	bl	800d174 <USBD_Get_USB_Status>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfe0:	78fa      	ldrb	r2, [r7, #3]
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7f8 fce8 	bl	80059ba <HAL_PCD_EP_ClrStall>
 800cfea:	4603      	mov	r3, r0
 800cfec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfee:	7bfb      	ldrb	r3, [r7, #15]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 f8bf 	bl	800d174 <USBD_Get_USB_Status>
 800cff6:	4603      	mov	r3, r0
 800cff8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cffa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3710      	adds	r7, #16
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	460b      	mov	r3, r1
 800d00e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d016:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	da0b      	bge.n	800d038 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d020:	78fb      	ldrb	r3, [r7, #3]
 800d022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d026:	68f9      	ldr	r1, [r7, #12]
 800d028:	4613      	mov	r3, r2
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	4413      	add	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	440b      	add	r3, r1
 800d032:	3316      	adds	r3, #22
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	e00b      	b.n	800d050 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d038:	78fb      	ldrb	r3, [r7, #3]
 800d03a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d03e:	68f9      	ldr	r1, [r7, #12]
 800d040:	4613      	mov	r3, r2
 800d042:	00db      	lsls	r3, r3, #3
 800d044:	4413      	add	r3, r2
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	440b      	add	r3, r1
 800d04a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d04e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d050:	4618      	mov	r0, r3
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	460b      	mov	r3, r1
 800d066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d068:	2300      	movs	r3, #0
 800d06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d076:	78fa      	ldrb	r2, [r7, #3]
 800d078:	4611      	mov	r1, r2
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7f8 fad5 	bl	800562a <HAL_PCD_SetAddress>
 800d080:	4603      	mov	r3, r0
 800d082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d084:	7bfb      	ldrb	r3, [r7, #15]
 800d086:	4618      	mov	r0, r3
 800d088:	f000 f874 	bl	800d174 <USBD_Get_USB_Status>
 800d08c:	4603      	mov	r3, r0
 800d08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d090:	7bbb      	ldrb	r3, [r7, #14]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b086      	sub	sp, #24
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	60f8      	str	r0, [r7, #12]
 800d0a2:	607a      	str	r2, [r7, #4]
 800d0a4:	603b      	str	r3, [r7, #0]
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d0b8:	7af9      	ldrb	r1, [r7, #11]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	f7f8 fbdf 	bl	8005880 <HAL_PCD_EP_Transmit>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f000 f853 	bl	800d174 <USBD_Get_USB_Status>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b086      	sub	sp, #24
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	607a      	str	r2, [r7, #4]
 800d0e6:	603b      	str	r3, [r7, #0]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d0fa:	7af9      	ldrb	r1, [r7, #11]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	f7f8 fb6b 	bl	80057da <HAL_PCD_EP_Receive>
 800d104:	4603      	mov	r3, r0
 800d106:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d108:	7dfb      	ldrb	r3, [r7, #23]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 f832 	bl	800d174 <USBD_Get_USB_Status>
 800d110:	4603      	mov	r3, r0
 800d112:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d114:	7dbb      	ldrb	r3, [r7, #22]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b082      	sub	sp, #8
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d130:	78fa      	ldrb	r2, [r7, #3]
 800d132:	4611      	mov	r1, r2
 800d134:	4618      	mov	r0, r3
 800d136:	f7f8 fb8b 	bl	8005850 <HAL_PCD_EP_GetRxCount>
 800d13a:	4603      	mov	r3, r0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d14c:	4b03      	ldr	r3, [pc, #12]	@ (800d15c <USBD_static_malloc+0x18>)
}
 800d14e:	4618      	mov	r0, r3
 800d150:	370c      	adds	r7, #12
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	20002324 	.word	0x20002324

0800d160 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]

}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	4603      	mov	r3, r0
 800d17c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d182:	79fb      	ldrb	r3, [r7, #7]
 800d184:	2b03      	cmp	r3, #3
 800d186:	d817      	bhi.n	800d1b8 <USBD_Get_USB_Status+0x44>
 800d188:	a201      	add	r2, pc, #4	@ (adr r2, 800d190 <USBD_Get_USB_Status+0x1c>)
 800d18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18e:	bf00      	nop
 800d190:	0800d1a1 	.word	0x0800d1a1
 800d194:	0800d1a7 	.word	0x0800d1a7
 800d198:	0800d1ad 	.word	0x0800d1ad
 800d19c:	0800d1b3 	.word	0x0800d1b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a4:	e00b      	b.n	800d1be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1aa:	e008      	b.n	800d1be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b0:	e005      	b.n	800d1be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b6:	e002      	b.n	800d1be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d1bc:	bf00      	nop
  }
  return usb_status;
 800d1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3714      	adds	r7, #20
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <__cvt>:
 800d1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d0:	ec57 6b10 	vmov	r6, r7, d0
 800d1d4:	2f00      	cmp	r7, #0
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	4619      	mov	r1, r3
 800d1da:	463b      	mov	r3, r7
 800d1dc:	bfbb      	ittet	lt
 800d1de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d1e2:	461f      	movlt	r7, r3
 800d1e4:	2300      	movge	r3, #0
 800d1e6:	232d      	movlt	r3, #45	@ 0x2d
 800d1e8:	700b      	strb	r3, [r1, #0]
 800d1ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d1f0:	4691      	mov	r9, r2
 800d1f2:	f023 0820 	bic.w	r8, r3, #32
 800d1f6:	bfbc      	itt	lt
 800d1f8:	4632      	movlt	r2, r6
 800d1fa:	4616      	movlt	r6, r2
 800d1fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d200:	d005      	beq.n	800d20e <__cvt+0x42>
 800d202:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d206:	d100      	bne.n	800d20a <__cvt+0x3e>
 800d208:	3401      	adds	r4, #1
 800d20a:	2102      	movs	r1, #2
 800d20c:	e000      	b.n	800d210 <__cvt+0x44>
 800d20e:	2103      	movs	r1, #3
 800d210:	ab03      	add	r3, sp, #12
 800d212:	9301      	str	r3, [sp, #4]
 800d214:	ab02      	add	r3, sp, #8
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	ec47 6b10 	vmov	d0, r6, r7
 800d21c:	4653      	mov	r3, sl
 800d21e:	4622      	mov	r2, r4
 800d220:	f000 fe7a 	bl	800df18 <_dtoa_r>
 800d224:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d228:	4605      	mov	r5, r0
 800d22a:	d119      	bne.n	800d260 <__cvt+0x94>
 800d22c:	f019 0f01 	tst.w	r9, #1
 800d230:	d00e      	beq.n	800d250 <__cvt+0x84>
 800d232:	eb00 0904 	add.w	r9, r0, r4
 800d236:	2200      	movs	r2, #0
 800d238:	2300      	movs	r3, #0
 800d23a:	4630      	mov	r0, r6
 800d23c:	4639      	mov	r1, r7
 800d23e:	f7f3 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 800d242:	b108      	cbz	r0, 800d248 <__cvt+0x7c>
 800d244:	f8cd 900c 	str.w	r9, [sp, #12]
 800d248:	2230      	movs	r2, #48	@ 0x30
 800d24a:	9b03      	ldr	r3, [sp, #12]
 800d24c:	454b      	cmp	r3, r9
 800d24e:	d31e      	bcc.n	800d28e <__cvt+0xc2>
 800d250:	9b03      	ldr	r3, [sp, #12]
 800d252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d254:	1b5b      	subs	r3, r3, r5
 800d256:	4628      	mov	r0, r5
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	b004      	add	sp, #16
 800d25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d260:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d264:	eb00 0904 	add.w	r9, r0, r4
 800d268:	d1e5      	bne.n	800d236 <__cvt+0x6a>
 800d26a:	7803      	ldrb	r3, [r0, #0]
 800d26c:	2b30      	cmp	r3, #48	@ 0x30
 800d26e:	d10a      	bne.n	800d286 <__cvt+0xba>
 800d270:	2200      	movs	r2, #0
 800d272:	2300      	movs	r3, #0
 800d274:	4630      	mov	r0, r6
 800d276:	4639      	mov	r1, r7
 800d278:	f7f3 fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800d27c:	b918      	cbnz	r0, 800d286 <__cvt+0xba>
 800d27e:	f1c4 0401 	rsb	r4, r4, #1
 800d282:	f8ca 4000 	str.w	r4, [sl]
 800d286:	f8da 3000 	ldr.w	r3, [sl]
 800d28a:	4499      	add	r9, r3
 800d28c:	e7d3      	b.n	800d236 <__cvt+0x6a>
 800d28e:	1c59      	adds	r1, r3, #1
 800d290:	9103      	str	r1, [sp, #12]
 800d292:	701a      	strb	r2, [r3, #0]
 800d294:	e7d9      	b.n	800d24a <__cvt+0x7e>

0800d296 <__exponent>:
 800d296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d298:	2900      	cmp	r1, #0
 800d29a:	bfba      	itte	lt
 800d29c:	4249      	neglt	r1, r1
 800d29e:	232d      	movlt	r3, #45	@ 0x2d
 800d2a0:	232b      	movge	r3, #43	@ 0x2b
 800d2a2:	2909      	cmp	r1, #9
 800d2a4:	7002      	strb	r2, [r0, #0]
 800d2a6:	7043      	strb	r3, [r0, #1]
 800d2a8:	dd29      	ble.n	800d2fe <__exponent+0x68>
 800d2aa:	f10d 0307 	add.w	r3, sp, #7
 800d2ae:	461d      	mov	r5, r3
 800d2b0:	270a      	movs	r7, #10
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d2b8:	fb07 1416 	mls	r4, r7, r6, r1
 800d2bc:	3430      	adds	r4, #48	@ 0x30
 800d2be:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	2c63      	cmp	r4, #99	@ 0x63
 800d2c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	dcf1      	bgt.n	800d2b2 <__exponent+0x1c>
 800d2ce:	3130      	adds	r1, #48	@ 0x30
 800d2d0:	1e94      	subs	r4, r2, #2
 800d2d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d2d6:	1c41      	adds	r1, r0, #1
 800d2d8:	4623      	mov	r3, r4
 800d2da:	42ab      	cmp	r3, r5
 800d2dc:	d30a      	bcc.n	800d2f4 <__exponent+0x5e>
 800d2de:	f10d 0309 	add.w	r3, sp, #9
 800d2e2:	1a9b      	subs	r3, r3, r2
 800d2e4:	42ac      	cmp	r4, r5
 800d2e6:	bf88      	it	hi
 800d2e8:	2300      	movhi	r3, #0
 800d2ea:	3302      	adds	r3, #2
 800d2ec:	4403      	add	r3, r0
 800d2ee:	1a18      	subs	r0, r3, r0
 800d2f0:	b003      	add	sp, #12
 800d2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d2f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d2fc:	e7ed      	b.n	800d2da <__exponent+0x44>
 800d2fe:	2330      	movs	r3, #48	@ 0x30
 800d300:	3130      	adds	r1, #48	@ 0x30
 800d302:	7083      	strb	r3, [r0, #2]
 800d304:	70c1      	strb	r1, [r0, #3]
 800d306:	1d03      	adds	r3, r0, #4
 800d308:	e7f1      	b.n	800d2ee <__exponent+0x58>
	...

0800d30c <_printf_float>:
 800d30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d310:	b08d      	sub	sp, #52	@ 0x34
 800d312:	460c      	mov	r4, r1
 800d314:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d318:	4616      	mov	r6, r2
 800d31a:	461f      	mov	r7, r3
 800d31c:	4605      	mov	r5, r0
 800d31e:	f000 fcdb 	bl	800dcd8 <_localeconv_r>
 800d322:	6803      	ldr	r3, [r0, #0]
 800d324:	9304      	str	r3, [sp, #16]
 800d326:	4618      	mov	r0, r3
 800d328:	f7f2 ffa2 	bl	8000270 <strlen>
 800d32c:	2300      	movs	r3, #0
 800d32e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d330:	f8d8 3000 	ldr.w	r3, [r8]
 800d334:	9005      	str	r0, [sp, #20]
 800d336:	3307      	adds	r3, #7
 800d338:	f023 0307 	bic.w	r3, r3, #7
 800d33c:	f103 0208 	add.w	r2, r3, #8
 800d340:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d344:	f8d4 b000 	ldr.w	fp, [r4]
 800d348:	f8c8 2000 	str.w	r2, [r8]
 800d34c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d350:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d354:	9307      	str	r3, [sp, #28]
 800d356:	f8cd 8018 	str.w	r8, [sp, #24]
 800d35a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d35e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d362:	4b9c      	ldr	r3, [pc, #624]	@ (800d5d4 <_printf_float+0x2c8>)
 800d364:	f04f 32ff 	mov.w	r2, #4294967295
 800d368:	f7f3 fbe0 	bl	8000b2c <__aeabi_dcmpun>
 800d36c:	bb70      	cbnz	r0, 800d3cc <_printf_float+0xc0>
 800d36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d372:	4b98      	ldr	r3, [pc, #608]	@ (800d5d4 <_printf_float+0x2c8>)
 800d374:	f04f 32ff 	mov.w	r2, #4294967295
 800d378:	f7f3 fbba 	bl	8000af0 <__aeabi_dcmple>
 800d37c:	bb30      	cbnz	r0, 800d3cc <_printf_float+0xc0>
 800d37e:	2200      	movs	r2, #0
 800d380:	2300      	movs	r3, #0
 800d382:	4640      	mov	r0, r8
 800d384:	4649      	mov	r1, r9
 800d386:	f7f3 fba9 	bl	8000adc <__aeabi_dcmplt>
 800d38a:	b110      	cbz	r0, 800d392 <_printf_float+0x86>
 800d38c:	232d      	movs	r3, #45	@ 0x2d
 800d38e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d392:	4a91      	ldr	r2, [pc, #580]	@ (800d5d8 <_printf_float+0x2cc>)
 800d394:	4b91      	ldr	r3, [pc, #580]	@ (800d5dc <_printf_float+0x2d0>)
 800d396:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d39a:	bf94      	ite	ls
 800d39c:	4690      	movls	r8, r2
 800d39e:	4698      	movhi	r8, r3
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	6123      	str	r3, [r4, #16]
 800d3a4:	f02b 0304 	bic.w	r3, fp, #4
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	f04f 0900 	mov.w	r9, #0
 800d3ae:	9700      	str	r7, [sp, #0]
 800d3b0:	4633      	mov	r3, r6
 800d3b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	f000 f9d2 	bl	800d760 <_printf_common>
 800d3bc:	3001      	adds	r0, #1
 800d3be:	f040 808d 	bne.w	800d4dc <_printf_float+0x1d0>
 800d3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c6:	b00d      	add	sp, #52	@ 0x34
 800d3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3cc:	4642      	mov	r2, r8
 800d3ce:	464b      	mov	r3, r9
 800d3d0:	4640      	mov	r0, r8
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	f7f3 fbaa 	bl	8000b2c <__aeabi_dcmpun>
 800d3d8:	b140      	cbz	r0, 800d3ec <_printf_float+0xe0>
 800d3da:	464b      	mov	r3, r9
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	bfbc      	itt	lt
 800d3e0:	232d      	movlt	r3, #45	@ 0x2d
 800d3e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d3e6:	4a7e      	ldr	r2, [pc, #504]	@ (800d5e0 <_printf_float+0x2d4>)
 800d3e8:	4b7e      	ldr	r3, [pc, #504]	@ (800d5e4 <_printf_float+0x2d8>)
 800d3ea:	e7d4      	b.n	800d396 <_printf_float+0x8a>
 800d3ec:	6863      	ldr	r3, [r4, #4]
 800d3ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d3f2:	9206      	str	r2, [sp, #24]
 800d3f4:	1c5a      	adds	r2, r3, #1
 800d3f6:	d13b      	bne.n	800d470 <_printf_float+0x164>
 800d3f8:	2306      	movs	r3, #6
 800d3fa:	6063      	str	r3, [r4, #4]
 800d3fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d400:	2300      	movs	r3, #0
 800d402:	6022      	str	r2, [r4, #0]
 800d404:	9303      	str	r3, [sp, #12]
 800d406:	ab0a      	add	r3, sp, #40	@ 0x28
 800d408:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d40c:	ab09      	add	r3, sp, #36	@ 0x24
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	6861      	ldr	r1, [r4, #4]
 800d412:	ec49 8b10 	vmov	d0, r8, r9
 800d416:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d41a:	4628      	mov	r0, r5
 800d41c:	f7ff fed6 	bl	800d1cc <__cvt>
 800d420:	9b06      	ldr	r3, [sp, #24]
 800d422:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d424:	2b47      	cmp	r3, #71	@ 0x47
 800d426:	4680      	mov	r8, r0
 800d428:	d129      	bne.n	800d47e <_printf_float+0x172>
 800d42a:	1cc8      	adds	r0, r1, #3
 800d42c:	db02      	blt.n	800d434 <_printf_float+0x128>
 800d42e:	6863      	ldr	r3, [r4, #4]
 800d430:	4299      	cmp	r1, r3
 800d432:	dd41      	ble.n	800d4b8 <_printf_float+0x1ac>
 800d434:	f1aa 0a02 	sub.w	sl, sl, #2
 800d438:	fa5f fa8a 	uxtb.w	sl, sl
 800d43c:	3901      	subs	r1, #1
 800d43e:	4652      	mov	r2, sl
 800d440:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d444:	9109      	str	r1, [sp, #36]	@ 0x24
 800d446:	f7ff ff26 	bl	800d296 <__exponent>
 800d44a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d44c:	1813      	adds	r3, r2, r0
 800d44e:	2a01      	cmp	r2, #1
 800d450:	4681      	mov	r9, r0
 800d452:	6123      	str	r3, [r4, #16]
 800d454:	dc02      	bgt.n	800d45c <_printf_float+0x150>
 800d456:	6822      	ldr	r2, [r4, #0]
 800d458:	07d2      	lsls	r2, r2, #31
 800d45a:	d501      	bpl.n	800d460 <_printf_float+0x154>
 800d45c:	3301      	adds	r3, #1
 800d45e:	6123      	str	r3, [r4, #16]
 800d460:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d464:	2b00      	cmp	r3, #0
 800d466:	d0a2      	beq.n	800d3ae <_printf_float+0xa2>
 800d468:	232d      	movs	r3, #45	@ 0x2d
 800d46a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d46e:	e79e      	b.n	800d3ae <_printf_float+0xa2>
 800d470:	9a06      	ldr	r2, [sp, #24]
 800d472:	2a47      	cmp	r2, #71	@ 0x47
 800d474:	d1c2      	bne.n	800d3fc <_printf_float+0xf0>
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1c0      	bne.n	800d3fc <_printf_float+0xf0>
 800d47a:	2301      	movs	r3, #1
 800d47c:	e7bd      	b.n	800d3fa <_printf_float+0xee>
 800d47e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d482:	d9db      	bls.n	800d43c <_printf_float+0x130>
 800d484:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d488:	d118      	bne.n	800d4bc <_printf_float+0x1b0>
 800d48a:	2900      	cmp	r1, #0
 800d48c:	6863      	ldr	r3, [r4, #4]
 800d48e:	dd0b      	ble.n	800d4a8 <_printf_float+0x19c>
 800d490:	6121      	str	r1, [r4, #16]
 800d492:	b913      	cbnz	r3, 800d49a <_printf_float+0x18e>
 800d494:	6822      	ldr	r2, [r4, #0]
 800d496:	07d0      	lsls	r0, r2, #31
 800d498:	d502      	bpl.n	800d4a0 <_printf_float+0x194>
 800d49a:	3301      	adds	r3, #1
 800d49c:	440b      	add	r3, r1
 800d49e:	6123      	str	r3, [r4, #16]
 800d4a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d4a2:	f04f 0900 	mov.w	r9, #0
 800d4a6:	e7db      	b.n	800d460 <_printf_float+0x154>
 800d4a8:	b913      	cbnz	r3, 800d4b0 <_printf_float+0x1a4>
 800d4aa:	6822      	ldr	r2, [r4, #0]
 800d4ac:	07d2      	lsls	r2, r2, #31
 800d4ae:	d501      	bpl.n	800d4b4 <_printf_float+0x1a8>
 800d4b0:	3302      	adds	r3, #2
 800d4b2:	e7f4      	b.n	800d49e <_printf_float+0x192>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e7f2      	b.n	800d49e <_printf_float+0x192>
 800d4b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d4bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4be:	4299      	cmp	r1, r3
 800d4c0:	db05      	blt.n	800d4ce <_printf_float+0x1c2>
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	6121      	str	r1, [r4, #16]
 800d4c6:	07d8      	lsls	r0, r3, #31
 800d4c8:	d5ea      	bpl.n	800d4a0 <_printf_float+0x194>
 800d4ca:	1c4b      	adds	r3, r1, #1
 800d4cc:	e7e7      	b.n	800d49e <_printf_float+0x192>
 800d4ce:	2900      	cmp	r1, #0
 800d4d0:	bfd4      	ite	le
 800d4d2:	f1c1 0202 	rsble	r2, r1, #2
 800d4d6:	2201      	movgt	r2, #1
 800d4d8:	4413      	add	r3, r2
 800d4da:	e7e0      	b.n	800d49e <_printf_float+0x192>
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	055a      	lsls	r2, r3, #21
 800d4e0:	d407      	bmi.n	800d4f2 <_printf_float+0x1e6>
 800d4e2:	6923      	ldr	r3, [r4, #16]
 800d4e4:	4642      	mov	r2, r8
 800d4e6:	4631      	mov	r1, r6
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	47b8      	blx	r7
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d12b      	bne.n	800d548 <_printf_float+0x23c>
 800d4f0:	e767      	b.n	800d3c2 <_printf_float+0xb6>
 800d4f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d4f6:	f240 80dd 	bls.w	800d6b4 <_printf_float+0x3a8>
 800d4fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d4fe:	2200      	movs	r2, #0
 800d500:	2300      	movs	r3, #0
 800d502:	f7f3 fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d506:	2800      	cmp	r0, #0
 800d508:	d033      	beq.n	800d572 <_printf_float+0x266>
 800d50a:	4a37      	ldr	r2, [pc, #220]	@ (800d5e8 <_printf_float+0x2dc>)
 800d50c:	2301      	movs	r3, #1
 800d50e:	4631      	mov	r1, r6
 800d510:	4628      	mov	r0, r5
 800d512:	47b8      	blx	r7
 800d514:	3001      	adds	r0, #1
 800d516:	f43f af54 	beq.w	800d3c2 <_printf_float+0xb6>
 800d51a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d51e:	4543      	cmp	r3, r8
 800d520:	db02      	blt.n	800d528 <_printf_float+0x21c>
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	07d8      	lsls	r0, r3, #31
 800d526:	d50f      	bpl.n	800d548 <_printf_float+0x23c>
 800d528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d52c:	4631      	mov	r1, r6
 800d52e:	4628      	mov	r0, r5
 800d530:	47b8      	blx	r7
 800d532:	3001      	adds	r0, #1
 800d534:	f43f af45 	beq.w	800d3c2 <_printf_float+0xb6>
 800d538:	f04f 0900 	mov.w	r9, #0
 800d53c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d540:	f104 0a1a 	add.w	sl, r4, #26
 800d544:	45c8      	cmp	r8, r9
 800d546:	dc09      	bgt.n	800d55c <_printf_float+0x250>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	079b      	lsls	r3, r3, #30
 800d54c:	f100 8103 	bmi.w	800d756 <_printf_float+0x44a>
 800d550:	68e0      	ldr	r0, [r4, #12]
 800d552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d554:	4298      	cmp	r0, r3
 800d556:	bfb8      	it	lt
 800d558:	4618      	movlt	r0, r3
 800d55a:	e734      	b.n	800d3c6 <_printf_float+0xba>
 800d55c:	2301      	movs	r3, #1
 800d55e:	4652      	mov	r2, sl
 800d560:	4631      	mov	r1, r6
 800d562:	4628      	mov	r0, r5
 800d564:	47b8      	blx	r7
 800d566:	3001      	adds	r0, #1
 800d568:	f43f af2b 	beq.w	800d3c2 <_printf_float+0xb6>
 800d56c:	f109 0901 	add.w	r9, r9, #1
 800d570:	e7e8      	b.n	800d544 <_printf_float+0x238>
 800d572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d574:	2b00      	cmp	r3, #0
 800d576:	dc39      	bgt.n	800d5ec <_printf_float+0x2e0>
 800d578:	4a1b      	ldr	r2, [pc, #108]	@ (800d5e8 <_printf_float+0x2dc>)
 800d57a:	2301      	movs	r3, #1
 800d57c:	4631      	mov	r1, r6
 800d57e:	4628      	mov	r0, r5
 800d580:	47b8      	blx	r7
 800d582:	3001      	adds	r0, #1
 800d584:	f43f af1d 	beq.w	800d3c2 <_printf_float+0xb6>
 800d588:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d58c:	ea59 0303 	orrs.w	r3, r9, r3
 800d590:	d102      	bne.n	800d598 <_printf_float+0x28c>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	07d9      	lsls	r1, r3, #31
 800d596:	d5d7      	bpl.n	800d548 <_printf_float+0x23c>
 800d598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d59c:	4631      	mov	r1, r6
 800d59e:	4628      	mov	r0, r5
 800d5a0:	47b8      	blx	r7
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	f43f af0d 	beq.w	800d3c2 <_printf_float+0xb6>
 800d5a8:	f04f 0a00 	mov.w	sl, #0
 800d5ac:	f104 0b1a 	add.w	fp, r4, #26
 800d5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5b2:	425b      	negs	r3, r3
 800d5b4:	4553      	cmp	r3, sl
 800d5b6:	dc01      	bgt.n	800d5bc <_printf_float+0x2b0>
 800d5b8:	464b      	mov	r3, r9
 800d5ba:	e793      	b.n	800d4e4 <_printf_float+0x1d8>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	465a      	mov	r2, fp
 800d5c0:	4631      	mov	r1, r6
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	47b8      	blx	r7
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	f43f aefb 	beq.w	800d3c2 <_printf_float+0xb6>
 800d5cc:	f10a 0a01 	add.w	sl, sl, #1
 800d5d0:	e7ee      	b.n	800d5b0 <_printf_float+0x2a4>
 800d5d2:	bf00      	nop
 800d5d4:	7fefffff 	.word	0x7fefffff
 800d5d8:	08012520 	.word	0x08012520
 800d5dc:	08012524 	.word	0x08012524
 800d5e0:	08012528 	.word	0x08012528
 800d5e4:	0801252c 	.word	0x0801252c
 800d5e8:	08012530 	.word	0x08012530
 800d5ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5f2:	4553      	cmp	r3, sl
 800d5f4:	bfa8      	it	ge
 800d5f6:	4653      	movge	r3, sl
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	4699      	mov	r9, r3
 800d5fc:	dc36      	bgt.n	800d66c <_printf_float+0x360>
 800d5fe:	f04f 0b00 	mov.w	fp, #0
 800d602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d606:	f104 021a 	add.w	r2, r4, #26
 800d60a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d60c:	9306      	str	r3, [sp, #24]
 800d60e:	eba3 0309 	sub.w	r3, r3, r9
 800d612:	455b      	cmp	r3, fp
 800d614:	dc31      	bgt.n	800d67a <_printf_float+0x36e>
 800d616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d618:	459a      	cmp	sl, r3
 800d61a:	dc3a      	bgt.n	800d692 <_printf_float+0x386>
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	07da      	lsls	r2, r3, #31
 800d620:	d437      	bmi.n	800d692 <_printf_float+0x386>
 800d622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d624:	ebaa 0903 	sub.w	r9, sl, r3
 800d628:	9b06      	ldr	r3, [sp, #24]
 800d62a:	ebaa 0303 	sub.w	r3, sl, r3
 800d62e:	4599      	cmp	r9, r3
 800d630:	bfa8      	it	ge
 800d632:	4699      	movge	r9, r3
 800d634:	f1b9 0f00 	cmp.w	r9, #0
 800d638:	dc33      	bgt.n	800d6a2 <_printf_float+0x396>
 800d63a:	f04f 0800 	mov.w	r8, #0
 800d63e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d642:	f104 0b1a 	add.w	fp, r4, #26
 800d646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d648:	ebaa 0303 	sub.w	r3, sl, r3
 800d64c:	eba3 0309 	sub.w	r3, r3, r9
 800d650:	4543      	cmp	r3, r8
 800d652:	f77f af79 	ble.w	800d548 <_printf_float+0x23c>
 800d656:	2301      	movs	r3, #1
 800d658:	465a      	mov	r2, fp
 800d65a:	4631      	mov	r1, r6
 800d65c:	4628      	mov	r0, r5
 800d65e:	47b8      	blx	r7
 800d660:	3001      	adds	r0, #1
 800d662:	f43f aeae 	beq.w	800d3c2 <_printf_float+0xb6>
 800d666:	f108 0801 	add.w	r8, r8, #1
 800d66a:	e7ec      	b.n	800d646 <_printf_float+0x33a>
 800d66c:	4642      	mov	r2, r8
 800d66e:	4631      	mov	r1, r6
 800d670:	4628      	mov	r0, r5
 800d672:	47b8      	blx	r7
 800d674:	3001      	adds	r0, #1
 800d676:	d1c2      	bne.n	800d5fe <_printf_float+0x2f2>
 800d678:	e6a3      	b.n	800d3c2 <_printf_float+0xb6>
 800d67a:	2301      	movs	r3, #1
 800d67c:	4631      	mov	r1, r6
 800d67e:	4628      	mov	r0, r5
 800d680:	9206      	str	r2, [sp, #24]
 800d682:	47b8      	blx	r7
 800d684:	3001      	adds	r0, #1
 800d686:	f43f ae9c 	beq.w	800d3c2 <_printf_float+0xb6>
 800d68a:	9a06      	ldr	r2, [sp, #24]
 800d68c:	f10b 0b01 	add.w	fp, fp, #1
 800d690:	e7bb      	b.n	800d60a <_printf_float+0x2fe>
 800d692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d696:	4631      	mov	r1, r6
 800d698:	4628      	mov	r0, r5
 800d69a:	47b8      	blx	r7
 800d69c:	3001      	adds	r0, #1
 800d69e:	d1c0      	bne.n	800d622 <_printf_float+0x316>
 800d6a0:	e68f      	b.n	800d3c2 <_printf_float+0xb6>
 800d6a2:	9a06      	ldr	r2, [sp, #24]
 800d6a4:	464b      	mov	r3, r9
 800d6a6:	4442      	add	r2, r8
 800d6a8:	4631      	mov	r1, r6
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	47b8      	blx	r7
 800d6ae:	3001      	adds	r0, #1
 800d6b0:	d1c3      	bne.n	800d63a <_printf_float+0x32e>
 800d6b2:	e686      	b.n	800d3c2 <_printf_float+0xb6>
 800d6b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d6b8:	f1ba 0f01 	cmp.w	sl, #1
 800d6bc:	dc01      	bgt.n	800d6c2 <_printf_float+0x3b6>
 800d6be:	07db      	lsls	r3, r3, #31
 800d6c0:	d536      	bpl.n	800d730 <_printf_float+0x424>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4642      	mov	r2, r8
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b8      	blx	r7
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	f43f ae78 	beq.w	800d3c2 <_printf_float+0xb6>
 800d6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4628      	mov	r0, r5
 800d6da:	47b8      	blx	r7
 800d6dc:	3001      	adds	r0, #1
 800d6de:	f43f ae70 	beq.w	800d3c2 <_printf_float+0xb6>
 800d6e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6ee:	f7f3 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6f2:	b9c0      	cbnz	r0, 800d726 <_printf_float+0x41a>
 800d6f4:	4653      	mov	r3, sl
 800d6f6:	f108 0201 	add.w	r2, r8, #1
 800d6fa:	4631      	mov	r1, r6
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	47b8      	blx	r7
 800d700:	3001      	adds	r0, #1
 800d702:	d10c      	bne.n	800d71e <_printf_float+0x412>
 800d704:	e65d      	b.n	800d3c2 <_printf_float+0xb6>
 800d706:	2301      	movs	r3, #1
 800d708:	465a      	mov	r2, fp
 800d70a:	4631      	mov	r1, r6
 800d70c:	4628      	mov	r0, r5
 800d70e:	47b8      	blx	r7
 800d710:	3001      	adds	r0, #1
 800d712:	f43f ae56 	beq.w	800d3c2 <_printf_float+0xb6>
 800d716:	f108 0801 	add.w	r8, r8, #1
 800d71a:	45d0      	cmp	r8, sl
 800d71c:	dbf3      	blt.n	800d706 <_printf_float+0x3fa>
 800d71e:	464b      	mov	r3, r9
 800d720:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d724:	e6df      	b.n	800d4e6 <_printf_float+0x1da>
 800d726:	f04f 0800 	mov.w	r8, #0
 800d72a:	f104 0b1a 	add.w	fp, r4, #26
 800d72e:	e7f4      	b.n	800d71a <_printf_float+0x40e>
 800d730:	2301      	movs	r3, #1
 800d732:	4642      	mov	r2, r8
 800d734:	e7e1      	b.n	800d6fa <_printf_float+0x3ee>
 800d736:	2301      	movs	r3, #1
 800d738:	464a      	mov	r2, r9
 800d73a:	4631      	mov	r1, r6
 800d73c:	4628      	mov	r0, r5
 800d73e:	47b8      	blx	r7
 800d740:	3001      	adds	r0, #1
 800d742:	f43f ae3e 	beq.w	800d3c2 <_printf_float+0xb6>
 800d746:	f108 0801 	add.w	r8, r8, #1
 800d74a:	68e3      	ldr	r3, [r4, #12]
 800d74c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d74e:	1a5b      	subs	r3, r3, r1
 800d750:	4543      	cmp	r3, r8
 800d752:	dcf0      	bgt.n	800d736 <_printf_float+0x42a>
 800d754:	e6fc      	b.n	800d550 <_printf_float+0x244>
 800d756:	f04f 0800 	mov.w	r8, #0
 800d75a:	f104 0919 	add.w	r9, r4, #25
 800d75e:	e7f4      	b.n	800d74a <_printf_float+0x43e>

0800d760 <_printf_common>:
 800d760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d764:	4616      	mov	r6, r2
 800d766:	4698      	mov	r8, r3
 800d768:	688a      	ldr	r2, [r1, #8]
 800d76a:	690b      	ldr	r3, [r1, #16]
 800d76c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d770:	4293      	cmp	r3, r2
 800d772:	bfb8      	it	lt
 800d774:	4613      	movlt	r3, r2
 800d776:	6033      	str	r3, [r6, #0]
 800d778:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d77c:	4607      	mov	r7, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	b10a      	cbz	r2, 800d786 <_printf_common+0x26>
 800d782:	3301      	adds	r3, #1
 800d784:	6033      	str	r3, [r6, #0]
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	0699      	lsls	r1, r3, #26
 800d78a:	bf42      	ittt	mi
 800d78c:	6833      	ldrmi	r3, [r6, #0]
 800d78e:	3302      	addmi	r3, #2
 800d790:	6033      	strmi	r3, [r6, #0]
 800d792:	6825      	ldr	r5, [r4, #0]
 800d794:	f015 0506 	ands.w	r5, r5, #6
 800d798:	d106      	bne.n	800d7a8 <_printf_common+0x48>
 800d79a:	f104 0a19 	add.w	sl, r4, #25
 800d79e:	68e3      	ldr	r3, [r4, #12]
 800d7a0:	6832      	ldr	r2, [r6, #0]
 800d7a2:	1a9b      	subs	r3, r3, r2
 800d7a4:	42ab      	cmp	r3, r5
 800d7a6:	dc26      	bgt.n	800d7f6 <_printf_common+0x96>
 800d7a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d7ac:	6822      	ldr	r2, [r4, #0]
 800d7ae:	3b00      	subs	r3, #0
 800d7b0:	bf18      	it	ne
 800d7b2:	2301      	movne	r3, #1
 800d7b4:	0692      	lsls	r2, r2, #26
 800d7b6:	d42b      	bmi.n	800d810 <_printf_common+0xb0>
 800d7b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d7bc:	4641      	mov	r1, r8
 800d7be:	4638      	mov	r0, r7
 800d7c0:	47c8      	blx	r9
 800d7c2:	3001      	adds	r0, #1
 800d7c4:	d01e      	beq.n	800d804 <_printf_common+0xa4>
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	6922      	ldr	r2, [r4, #16]
 800d7ca:	f003 0306 	and.w	r3, r3, #6
 800d7ce:	2b04      	cmp	r3, #4
 800d7d0:	bf02      	ittt	eq
 800d7d2:	68e5      	ldreq	r5, [r4, #12]
 800d7d4:	6833      	ldreq	r3, [r6, #0]
 800d7d6:	1aed      	subeq	r5, r5, r3
 800d7d8:	68a3      	ldr	r3, [r4, #8]
 800d7da:	bf0c      	ite	eq
 800d7dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7e0:	2500      	movne	r5, #0
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	bfc4      	itt	gt
 800d7e6:	1a9b      	subgt	r3, r3, r2
 800d7e8:	18ed      	addgt	r5, r5, r3
 800d7ea:	2600      	movs	r6, #0
 800d7ec:	341a      	adds	r4, #26
 800d7ee:	42b5      	cmp	r5, r6
 800d7f0:	d11a      	bne.n	800d828 <_printf_common+0xc8>
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	e008      	b.n	800d808 <_printf_common+0xa8>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4652      	mov	r2, sl
 800d7fa:	4641      	mov	r1, r8
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	47c8      	blx	r9
 800d800:	3001      	adds	r0, #1
 800d802:	d103      	bne.n	800d80c <_printf_common+0xac>
 800d804:	f04f 30ff 	mov.w	r0, #4294967295
 800d808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80c:	3501      	adds	r5, #1
 800d80e:	e7c6      	b.n	800d79e <_printf_common+0x3e>
 800d810:	18e1      	adds	r1, r4, r3
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	2030      	movs	r0, #48	@ 0x30
 800d816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d81a:	4422      	add	r2, r4
 800d81c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d824:	3302      	adds	r3, #2
 800d826:	e7c7      	b.n	800d7b8 <_printf_common+0x58>
 800d828:	2301      	movs	r3, #1
 800d82a:	4622      	mov	r2, r4
 800d82c:	4641      	mov	r1, r8
 800d82e:	4638      	mov	r0, r7
 800d830:	47c8      	blx	r9
 800d832:	3001      	adds	r0, #1
 800d834:	d0e6      	beq.n	800d804 <_printf_common+0xa4>
 800d836:	3601      	adds	r6, #1
 800d838:	e7d9      	b.n	800d7ee <_printf_common+0x8e>
	...

0800d83c <_printf_i>:
 800d83c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d840:	7e0f      	ldrb	r7, [r1, #24]
 800d842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d844:	2f78      	cmp	r7, #120	@ 0x78
 800d846:	4691      	mov	r9, r2
 800d848:	4680      	mov	r8, r0
 800d84a:	460c      	mov	r4, r1
 800d84c:	469a      	mov	sl, r3
 800d84e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d852:	d807      	bhi.n	800d864 <_printf_i+0x28>
 800d854:	2f62      	cmp	r7, #98	@ 0x62
 800d856:	d80a      	bhi.n	800d86e <_printf_i+0x32>
 800d858:	2f00      	cmp	r7, #0
 800d85a:	f000 80d2 	beq.w	800da02 <_printf_i+0x1c6>
 800d85e:	2f58      	cmp	r7, #88	@ 0x58
 800d860:	f000 80b9 	beq.w	800d9d6 <_printf_i+0x19a>
 800d864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d86c:	e03a      	b.n	800d8e4 <_printf_i+0xa8>
 800d86e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d872:	2b15      	cmp	r3, #21
 800d874:	d8f6      	bhi.n	800d864 <_printf_i+0x28>
 800d876:	a101      	add	r1, pc, #4	@ (adr r1, 800d87c <_printf_i+0x40>)
 800d878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d87c:	0800d8d5 	.word	0x0800d8d5
 800d880:	0800d8e9 	.word	0x0800d8e9
 800d884:	0800d865 	.word	0x0800d865
 800d888:	0800d865 	.word	0x0800d865
 800d88c:	0800d865 	.word	0x0800d865
 800d890:	0800d865 	.word	0x0800d865
 800d894:	0800d8e9 	.word	0x0800d8e9
 800d898:	0800d865 	.word	0x0800d865
 800d89c:	0800d865 	.word	0x0800d865
 800d8a0:	0800d865 	.word	0x0800d865
 800d8a4:	0800d865 	.word	0x0800d865
 800d8a8:	0800d9e9 	.word	0x0800d9e9
 800d8ac:	0800d913 	.word	0x0800d913
 800d8b0:	0800d9a3 	.word	0x0800d9a3
 800d8b4:	0800d865 	.word	0x0800d865
 800d8b8:	0800d865 	.word	0x0800d865
 800d8bc:	0800da0b 	.word	0x0800da0b
 800d8c0:	0800d865 	.word	0x0800d865
 800d8c4:	0800d913 	.word	0x0800d913
 800d8c8:	0800d865 	.word	0x0800d865
 800d8cc:	0800d865 	.word	0x0800d865
 800d8d0:	0800d9ab 	.word	0x0800d9ab
 800d8d4:	6833      	ldr	r3, [r6, #0]
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6032      	str	r2, [r6, #0]
 800d8dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e09d      	b.n	800da24 <_printf_i+0x1e8>
 800d8e8:	6833      	ldr	r3, [r6, #0]
 800d8ea:	6820      	ldr	r0, [r4, #0]
 800d8ec:	1d19      	adds	r1, r3, #4
 800d8ee:	6031      	str	r1, [r6, #0]
 800d8f0:	0606      	lsls	r6, r0, #24
 800d8f2:	d501      	bpl.n	800d8f8 <_printf_i+0xbc>
 800d8f4:	681d      	ldr	r5, [r3, #0]
 800d8f6:	e003      	b.n	800d900 <_printf_i+0xc4>
 800d8f8:	0645      	lsls	r5, r0, #25
 800d8fa:	d5fb      	bpl.n	800d8f4 <_printf_i+0xb8>
 800d8fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d900:	2d00      	cmp	r5, #0
 800d902:	da03      	bge.n	800d90c <_printf_i+0xd0>
 800d904:	232d      	movs	r3, #45	@ 0x2d
 800d906:	426d      	negs	r5, r5
 800d908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d90c:	4859      	ldr	r0, [pc, #356]	@ (800da74 <_printf_i+0x238>)
 800d90e:	230a      	movs	r3, #10
 800d910:	e011      	b.n	800d936 <_printf_i+0xfa>
 800d912:	6821      	ldr	r1, [r4, #0]
 800d914:	6833      	ldr	r3, [r6, #0]
 800d916:	0608      	lsls	r0, r1, #24
 800d918:	f853 5b04 	ldr.w	r5, [r3], #4
 800d91c:	d402      	bmi.n	800d924 <_printf_i+0xe8>
 800d91e:	0649      	lsls	r1, r1, #25
 800d920:	bf48      	it	mi
 800d922:	b2ad      	uxthmi	r5, r5
 800d924:	2f6f      	cmp	r7, #111	@ 0x6f
 800d926:	4853      	ldr	r0, [pc, #332]	@ (800da74 <_printf_i+0x238>)
 800d928:	6033      	str	r3, [r6, #0]
 800d92a:	bf14      	ite	ne
 800d92c:	230a      	movne	r3, #10
 800d92e:	2308      	moveq	r3, #8
 800d930:	2100      	movs	r1, #0
 800d932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d936:	6866      	ldr	r6, [r4, #4]
 800d938:	60a6      	str	r6, [r4, #8]
 800d93a:	2e00      	cmp	r6, #0
 800d93c:	bfa2      	ittt	ge
 800d93e:	6821      	ldrge	r1, [r4, #0]
 800d940:	f021 0104 	bicge.w	r1, r1, #4
 800d944:	6021      	strge	r1, [r4, #0]
 800d946:	b90d      	cbnz	r5, 800d94c <_printf_i+0x110>
 800d948:	2e00      	cmp	r6, #0
 800d94a:	d04b      	beq.n	800d9e4 <_printf_i+0x1a8>
 800d94c:	4616      	mov	r6, r2
 800d94e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d952:	fb03 5711 	mls	r7, r3, r1, r5
 800d956:	5dc7      	ldrb	r7, [r0, r7]
 800d958:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d95c:	462f      	mov	r7, r5
 800d95e:	42bb      	cmp	r3, r7
 800d960:	460d      	mov	r5, r1
 800d962:	d9f4      	bls.n	800d94e <_printf_i+0x112>
 800d964:	2b08      	cmp	r3, #8
 800d966:	d10b      	bne.n	800d980 <_printf_i+0x144>
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	07df      	lsls	r7, r3, #31
 800d96c:	d508      	bpl.n	800d980 <_printf_i+0x144>
 800d96e:	6923      	ldr	r3, [r4, #16]
 800d970:	6861      	ldr	r1, [r4, #4]
 800d972:	4299      	cmp	r1, r3
 800d974:	bfde      	ittt	le
 800d976:	2330      	movle	r3, #48	@ 0x30
 800d978:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d97c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d980:	1b92      	subs	r2, r2, r6
 800d982:	6122      	str	r2, [r4, #16]
 800d984:	f8cd a000 	str.w	sl, [sp]
 800d988:	464b      	mov	r3, r9
 800d98a:	aa03      	add	r2, sp, #12
 800d98c:	4621      	mov	r1, r4
 800d98e:	4640      	mov	r0, r8
 800d990:	f7ff fee6 	bl	800d760 <_printf_common>
 800d994:	3001      	adds	r0, #1
 800d996:	d14a      	bne.n	800da2e <_printf_i+0x1f2>
 800d998:	f04f 30ff 	mov.w	r0, #4294967295
 800d99c:	b004      	add	sp, #16
 800d99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	f043 0320 	orr.w	r3, r3, #32
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	4833      	ldr	r0, [pc, #204]	@ (800da78 <_printf_i+0x23c>)
 800d9ac:	2778      	movs	r7, #120	@ 0x78
 800d9ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	6831      	ldr	r1, [r6, #0]
 800d9b6:	061f      	lsls	r7, r3, #24
 800d9b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d9bc:	d402      	bmi.n	800d9c4 <_printf_i+0x188>
 800d9be:	065f      	lsls	r7, r3, #25
 800d9c0:	bf48      	it	mi
 800d9c2:	b2ad      	uxthmi	r5, r5
 800d9c4:	6031      	str	r1, [r6, #0]
 800d9c6:	07d9      	lsls	r1, r3, #31
 800d9c8:	bf44      	itt	mi
 800d9ca:	f043 0320 	orrmi.w	r3, r3, #32
 800d9ce:	6023      	strmi	r3, [r4, #0]
 800d9d0:	b11d      	cbz	r5, 800d9da <_printf_i+0x19e>
 800d9d2:	2310      	movs	r3, #16
 800d9d4:	e7ac      	b.n	800d930 <_printf_i+0xf4>
 800d9d6:	4827      	ldr	r0, [pc, #156]	@ (800da74 <_printf_i+0x238>)
 800d9d8:	e7e9      	b.n	800d9ae <_printf_i+0x172>
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	f023 0320 	bic.w	r3, r3, #32
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	e7f6      	b.n	800d9d2 <_printf_i+0x196>
 800d9e4:	4616      	mov	r6, r2
 800d9e6:	e7bd      	b.n	800d964 <_printf_i+0x128>
 800d9e8:	6833      	ldr	r3, [r6, #0]
 800d9ea:	6825      	ldr	r5, [r4, #0]
 800d9ec:	6961      	ldr	r1, [r4, #20]
 800d9ee:	1d18      	adds	r0, r3, #4
 800d9f0:	6030      	str	r0, [r6, #0]
 800d9f2:	062e      	lsls	r6, r5, #24
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	d501      	bpl.n	800d9fc <_printf_i+0x1c0>
 800d9f8:	6019      	str	r1, [r3, #0]
 800d9fa:	e002      	b.n	800da02 <_printf_i+0x1c6>
 800d9fc:	0668      	lsls	r0, r5, #25
 800d9fe:	d5fb      	bpl.n	800d9f8 <_printf_i+0x1bc>
 800da00:	8019      	strh	r1, [r3, #0]
 800da02:	2300      	movs	r3, #0
 800da04:	6123      	str	r3, [r4, #16]
 800da06:	4616      	mov	r6, r2
 800da08:	e7bc      	b.n	800d984 <_printf_i+0x148>
 800da0a:	6833      	ldr	r3, [r6, #0]
 800da0c:	1d1a      	adds	r2, r3, #4
 800da0e:	6032      	str	r2, [r6, #0]
 800da10:	681e      	ldr	r6, [r3, #0]
 800da12:	6862      	ldr	r2, [r4, #4]
 800da14:	2100      	movs	r1, #0
 800da16:	4630      	mov	r0, r6
 800da18:	f7f2 fbda 	bl	80001d0 <memchr>
 800da1c:	b108      	cbz	r0, 800da22 <_printf_i+0x1e6>
 800da1e:	1b80      	subs	r0, r0, r6
 800da20:	6060      	str	r0, [r4, #4]
 800da22:	6863      	ldr	r3, [r4, #4]
 800da24:	6123      	str	r3, [r4, #16]
 800da26:	2300      	movs	r3, #0
 800da28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da2c:	e7aa      	b.n	800d984 <_printf_i+0x148>
 800da2e:	6923      	ldr	r3, [r4, #16]
 800da30:	4632      	mov	r2, r6
 800da32:	4649      	mov	r1, r9
 800da34:	4640      	mov	r0, r8
 800da36:	47d0      	blx	sl
 800da38:	3001      	adds	r0, #1
 800da3a:	d0ad      	beq.n	800d998 <_printf_i+0x15c>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	079b      	lsls	r3, r3, #30
 800da40:	d413      	bmi.n	800da6a <_printf_i+0x22e>
 800da42:	68e0      	ldr	r0, [r4, #12]
 800da44:	9b03      	ldr	r3, [sp, #12]
 800da46:	4298      	cmp	r0, r3
 800da48:	bfb8      	it	lt
 800da4a:	4618      	movlt	r0, r3
 800da4c:	e7a6      	b.n	800d99c <_printf_i+0x160>
 800da4e:	2301      	movs	r3, #1
 800da50:	4632      	mov	r2, r6
 800da52:	4649      	mov	r1, r9
 800da54:	4640      	mov	r0, r8
 800da56:	47d0      	blx	sl
 800da58:	3001      	adds	r0, #1
 800da5a:	d09d      	beq.n	800d998 <_printf_i+0x15c>
 800da5c:	3501      	adds	r5, #1
 800da5e:	68e3      	ldr	r3, [r4, #12]
 800da60:	9903      	ldr	r1, [sp, #12]
 800da62:	1a5b      	subs	r3, r3, r1
 800da64:	42ab      	cmp	r3, r5
 800da66:	dcf2      	bgt.n	800da4e <_printf_i+0x212>
 800da68:	e7eb      	b.n	800da42 <_printf_i+0x206>
 800da6a:	2500      	movs	r5, #0
 800da6c:	f104 0619 	add.w	r6, r4, #25
 800da70:	e7f5      	b.n	800da5e <_printf_i+0x222>
 800da72:	bf00      	nop
 800da74:	08012532 	.word	0x08012532
 800da78:	08012543 	.word	0x08012543

0800da7c <std>:
 800da7c:	2300      	movs	r3, #0
 800da7e:	b510      	push	{r4, lr}
 800da80:	4604      	mov	r4, r0
 800da82:	e9c0 3300 	strd	r3, r3, [r0]
 800da86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da8a:	6083      	str	r3, [r0, #8]
 800da8c:	8181      	strh	r1, [r0, #12]
 800da8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800da90:	81c2      	strh	r2, [r0, #14]
 800da92:	6183      	str	r3, [r0, #24]
 800da94:	4619      	mov	r1, r3
 800da96:	2208      	movs	r2, #8
 800da98:	305c      	adds	r0, #92	@ 0x5c
 800da9a:	f000 f914 	bl	800dcc6 <memset>
 800da9e:	4b0d      	ldr	r3, [pc, #52]	@ (800dad4 <std+0x58>)
 800daa0:	6263      	str	r3, [r4, #36]	@ 0x24
 800daa2:	4b0d      	ldr	r3, [pc, #52]	@ (800dad8 <std+0x5c>)
 800daa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800daa6:	4b0d      	ldr	r3, [pc, #52]	@ (800dadc <std+0x60>)
 800daa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800daaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dae0 <std+0x64>)
 800daac:	6323      	str	r3, [r4, #48]	@ 0x30
 800daae:	4b0d      	ldr	r3, [pc, #52]	@ (800dae4 <std+0x68>)
 800dab0:	6224      	str	r4, [r4, #32]
 800dab2:	429c      	cmp	r4, r3
 800dab4:	d006      	beq.n	800dac4 <std+0x48>
 800dab6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800daba:	4294      	cmp	r4, r2
 800dabc:	d002      	beq.n	800dac4 <std+0x48>
 800dabe:	33d0      	adds	r3, #208	@ 0xd0
 800dac0:	429c      	cmp	r4, r3
 800dac2:	d105      	bne.n	800dad0 <std+0x54>
 800dac4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dacc:	f000 b978 	b.w	800ddc0 <__retarget_lock_init_recursive>
 800dad0:	bd10      	pop	{r4, pc}
 800dad2:	bf00      	nop
 800dad4:	0800dc41 	.word	0x0800dc41
 800dad8:	0800dc63 	.word	0x0800dc63
 800dadc:	0800dc9b 	.word	0x0800dc9b
 800dae0:	0800dcbf 	.word	0x0800dcbf
 800dae4:	20002544 	.word	0x20002544

0800dae8 <stdio_exit_handler>:
 800dae8:	4a02      	ldr	r2, [pc, #8]	@ (800daf4 <stdio_exit_handler+0xc>)
 800daea:	4903      	ldr	r1, [pc, #12]	@ (800daf8 <stdio_exit_handler+0x10>)
 800daec:	4803      	ldr	r0, [pc, #12]	@ (800dafc <stdio_exit_handler+0x14>)
 800daee:	f000 b869 	b.w	800dbc4 <_fwalk_sglue>
 800daf2:	bf00      	nop
 800daf4:	20000128 	.word	0x20000128
 800daf8:	0800f75d 	.word	0x0800f75d
 800dafc:	20000138 	.word	0x20000138

0800db00 <cleanup_stdio>:
 800db00:	6841      	ldr	r1, [r0, #4]
 800db02:	4b0c      	ldr	r3, [pc, #48]	@ (800db34 <cleanup_stdio+0x34>)
 800db04:	4299      	cmp	r1, r3
 800db06:	b510      	push	{r4, lr}
 800db08:	4604      	mov	r4, r0
 800db0a:	d001      	beq.n	800db10 <cleanup_stdio+0x10>
 800db0c:	f001 fe26 	bl	800f75c <_fflush_r>
 800db10:	68a1      	ldr	r1, [r4, #8]
 800db12:	4b09      	ldr	r3, [pc, #36]	@ (800db38 <cleanup_stdio+0x38>)
 800db14:	4299      	cmp	r1, r3
 800db16:	d002      	beq.n	800db1e <cleanup_stdio+0x1e>
 800db18:	4620      	mov	r0, r4
 800db1a:	f001 fe1f 	bl	800f75c <_fflush_r>
 800db1e:	68e1      	ldr	r1, [r4, #12]
 800db20:	4b06      	ldr	r3, [pc, #24]	@ (800db3c <cleanup_stdio+0x3c>)
 800db22:	4299      	cmp	r1, r3
 800db24:	d004      	beq.n	800db30 <cleanup_stdio+0x30>
 800db26:	4620      	mov	r0, r4
 800db28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db2c:	f001 be16 	b.w	800f75c <_fflush_r>
 800db30:	bd10      	pop	{r4, pc}
 800db32:	bf00      	nop
 800db34:	20002544 	.word	0x20002544
 800db38:	200025ac 	.word	0x200025ac
 800db3c:	20002614 	.word	0x20002614

0800db40 <global_stdio_init.part.0>:
 800db40:	b510      	push	{r4, lr}
 800db42:	4b0b      	ldr	r3, [pc, #44]	@ (800db70 <global_stdio_init.part.0+0x30>)
 800db44:	4c0b      	ldr	r4, [pc, #44]	@ (800db74 <global_stdio_init.part.0+0x34>)
 800db46:	4a0c      	ldr	r2, [pc, #48]	@ (800db78 <global_stdio_init.part.0+0x38>)
 800db48:	601a      	str	r2, [r3, #0]
 800db4a:	4620      	mov	r0, r4
 800db4c:	2200      	movs	r2, #0
 800db4e:	2104      	movs	r1, #4
 800db50:	f7ff ff94 	bl	800da7c <std>
 800db54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800db58:	2201      	movs	r2, #1
 800db5a:	2109      	movs	r1, #9
 800db5c:	f7ff ff8e 	bl	800da7c <std>
 800db60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800db64:	2202      	movs	r2, #2
 800db66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db6a:	2112      	movs	r1, #18
 800db6c:	f7ff bf86 	b.w	800da7c <std>
 800db70:	2000267c 	.word	0x2000267c
 800db74:	20002544 	.word	0x20002544
 800db78:	0800dae9 	.word	0x0800dae9

0800db7c <__sfp_lock_acquire>:
 800db7c:	4801      	ldr	r0, [pc, #4]	@ (800db84 <__sfp_lock_acquire+0x8>)
 800db7e:	f000 b920 	b.w	800ddc2 <__retarget_lock_acquire_recursive>
 800db82:	bf00      	nop
 800db84:	20002685 	.word	0x20002685

0800db88 <__sfp_lock_release>:
 800db88:	4801      	ldr	r0, [pc, #4]	@ (800db90 <__sfp_lock_release+0x8>)
 800db8a:	f000 b91b 	b.w	800ddc4 <__retarget_lock_release_recursive>
 800db8e:	bf00      	nop
 800db90:	20002685 	.word	0x20002685

0800db94 <__sinit>:
 800db94:	b510      	push	{r4, lr}
 800db96:	4604      	mov	r4, r0
 800db98:	f7ff fff0 	bl	800db7c <__sfp_lock_acquire>
 800db9c:	6a23      	ldr	r3, [r4, #32]
 800db9e:	b11b      	cbz	r3, 800dba8 <__sinit+0x14>
 800dba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dba4:	f7ff bff0 	b.w	800db88 <__sfp_lock_release>
 800dba8:	4b04      	ldr	r3, [pc, #16]	@ (800dbbc <__sinit+0x28>)
 800dbaa:	6223      	str	r3, [r4, #32]
 800dbac:	4b04      	ldr	r3, [pc, #16]	@ (800dbc0 <__sinit+0x2c>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1f5      	bne.n	800dba0 <__sinit+0xc>
 800dbb4:	f7ff ffc4 	bl	800db40 <global_stdio_init.part.0>
 800dbb8:	e7f2      	b.n	800dba0 <__sinit+0xc>
 800dbba:	bf00      	nop
 800dbbc:	0800db01 	.word	0x0800db01
 800dbc0:	2000267c 	.word	0x2000267c

0800dbc4 <_fwalk_sglue>:
 800dbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbc8:	4607      	mov	r7, r0
 800dbca:	4688      	mov	r8, r1
 800dbcc:	4614      	mov	r4, r2
 800dbce:	2600      	movs	r6, #0
 800dbd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dbd4:	f1b9 0901 	subs.w	r9, r9, #1
 800dbd8:	d505      	bpl.n	800dbe6 <_fwalk_sglue+0x22>
 800dbda:	6824      	ldr	r4, [r4, #0]
 800dbdc:	2c00      	cmp	r4, #0
 800dbde:	d1f7      	bne.n	800dbd0 <_fwalk_sglue+0xc>
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d907      	bls.n	800dbfc <_fwalk_sglue+0x38>
 800dbec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	d003      	beq.n	800dbfc <_fwalk_sglue+0x38>
 800dbf4:	4629      	mov	r1, r5
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	47c0      	blx	r8
 800dbfa:	4306      	orrs	r6, r0
 800dbfc:	3568      	adds	r5, #104	@ 0x68
 800dbfe:	e7e9      	b.n	800dbd4 <_fwalk_sglue+0x10>

0800dc00 <siprintf>:
 800dc00:	b40e      	push	{r1, r2, r3}
 800dc02:	b500      	push	{lr}
 800dc04:	b09c      	sub	sp, #112	@ 0x70
 800dc06:	ab1d      	add	r3, sp, #116	@ 0x74
 800dc08:	9002      	str	r0, [sp, #8]
 800dc0a:	9006      	str	r0, [sp, #24]
 800dc0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dc10:	4809      	ldr	r0, [pc, #36]	@ (800dc38 <siprintf+0x38>)
 800dc12:	9107      	str	r1, [sp, #28]
 800dc14:	9104      	str	r1, [sp, #16]
 800dc16:	4909      	ldr	r1, [pc, #36]	@ (800dc3c <siprintf+0x3c>)
 800dc18:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc1c:	9105      	str	r1, [sp, #20]
 800dc1e:	6800      	ldr	r0, [r0, #0]
 800dc20:	9301      	str	r3, [sp, #4]
 800dc22:	a902      	add	r1, sp, #8
 800dc24:	f001 fc1a 	bl	800f45c <_svfiprintf_r>
 800dc28:	9b02      	ldr	r3, [sp, #8]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	701a      	strb	r2, [r3, #0]
 800dc2e:	b01c      	add	sp, #112	@ 0x70
 800dc30:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc34:	b003      	add	sp, #12
 800dc36:	4770      	bx	lr
 800dc38:	20000134 	.word	0x20000134
 800dc3c:	ffff0208 	.word	0xffff0208

0800dc40 <__sread>:
 800dc40:	b510      	push	{r4, lr}
 800dc42:	460c      	mov	r4, r1
 800dc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc48:	f000 f86c 	bl	800dd24 <_read_r>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	bfab      	itete	ge
 800dc50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dc52:	89a3      	ldrhlt	r3, [r4, #12]
 800dc54:	181b      	addge	r3, r3, r0
 800dc56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc5a:	bfac      	ite	ge
 800dc5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc5e:	81a3      	strhlt	r3, [r4, #12]
 800dc60:	bd10      	pop	{r4, pc}

0800dc62 <__swrite>:
 800dc62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc66:	461f      	mov	r7, r3
 800dc68:	898b      	ldrh	r3, [r1, #12]
 800dc6a:	05db      	lsls	r3, r3, #23
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	4616      	mov	r6, r2
 800dc72:	d505      	bpl.n	800dc80 <__swrite+0x1e>
 800dc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc78:	2302      	movs	r3, #2
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f000 f840 	bl	800dd00 <_lseek_r>
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc8a:	81a3      	strh	r3, [r4, #12]
 800dc8c:	4632      	mov	r2, r6
 800dc8e:	463b      	mov	r3, r7
 800dc90:	4628      	mov	r0, r5
 800dc92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc96:	f000 b857 	b.w	800dd48 <_write_r>

0800dc9a <__sseek>:
 800dc9a:	b510      	push	{r4, lr}
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dca2:	f000 f82d 	bl	800dd00 <_lseek_r>
 800dca6:	1c43      	adds	r3, r0, #1
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	bf15      	itete	ne
 800dcac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dcae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dcb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dcb6:	81a3      	strheq	r3, [r4, #12]
 800dcb8:	bf18      	it	ne
 800dcba:	81a3      	strhne	r3, [r4, #12]
 800dcbc:	bd10      	pop	{r4, pc}

0800dcbe <__sclose>:
 800dcbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc2:	f000 b80d 	b.w	800dce0 <_close_r>

0800dcc6 <memset>:
 800dcc6:	4402      	add	r2, r0
 800dcc8:	4603      	mov	r3, r0
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d100      	bne.n	800dcd0 <memset+0xa>
 800dcce:	4770      	bx	lr
 800dcd0:	f803 1b01 	strb.w	r1, [r3], #1
 800dcd4:	e7f9      	b.n	800dcca <memset+0x4>
	...

0800dcd8 <_localeconv_r>:
 800dcd8:	4800      	ldr	r0, [pc, #0]	@ (800dcdc <_localeconv_r+0x4>)
 800dcda:	4770      	bx	lr
 800dcdc:	20000274 	.word	0x20000274

0800dce0 <_close_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	4d06      	ldr	r5, [pc, #24]	@ (800dcfc <_close_r+0x1c>)
 800dce4:	2300      	movs	r3, #0
 800dce6:	4604      	mov	r4, r0
 800dce8:	4608      	mov	r0, r1
 800dcea:	602b      	str	r3, [r5, #0]
 800dcec:	f7f5 fe80 	bl	80039f0 <_close>
 800dcf0:	1c43      	adds	r3, r0, #1
 800dcf2:	d102      	bne.n	800dcfa <_close_r+0x1a>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	b103      	cbz	r3, 800dcfa <_close_r+0x1a>
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	bd38      	pop	{r3, r4, r5, pc}
 800dcfc:	20002680 	.word	0x20002680

0800dd00 <_lseek_r>:
 800dd00:	b538      	push	{r3, r4, r5, lr}
 800dd02:	4d07      	ldr	r5, [pc, #28]	@ (800dd20 <_lseek_r+0x20>)
 800dd04:	4604      	mov	r4, r0
 800dd06:	4608      	mov	r0, r1
 800dd08:	4611      	mov	r1, r2
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	602a      	str	r2, [r5, #0]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	f7f5 fe95 	bl	8003a3e <_lseek>
 800dd14:	1c43      	adds	r3, r0, #1
 800dd16:	d102      	bne.n	800dd1e <_lseek_r+0x1e>
 800dd18:	682b      	ldr	r3, [r5, #0]
 800dd1a:	b103      	cbz	r3, 800dd1e <_lseek_r+0x1e>
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	bd38      	pop	{r3, r4, r5, pc}
 800dd20:	20002680 	.word	0x20002680

0800dd24 <_read_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	@ (800dd44 <_read_r+0x20>)
 800dd28:	4604      	mov	r4, r0
 800dd2a:	4608      	mov	r0, r1
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	2200      	movs	r2, #0
 800dd30:	602a      	str	r2, [r5, #0]
 800dd32:	461a      	mov	r2, r3
 800dd34:	f7f5 fe23 	bl	800397e <_read>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d102      	bne.n	800dd42 <_read_r+0x1e>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	b103      	cbz	r3, 800dd42 <_read_r+0x1e>
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	bd38      	pop	{r3, r4, r5, pc}
 800dd44:	20002680 	.word	0x20002680

0800dd48 <_write_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d07      	ldr	r5, [pc, #28]	@ (800dd68 <_write_r+0x20>)
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	4608      	mov	r0, r1
 800dd50:	4611      	mov	r1, r2
 800dd52:	2200      	movs	r2, #0
 800dd54:	602a      	str	r2, [r5, #0]
 800dd56:	461a      	mov	r2, r3
 800dd58:	f7f5 fe2e 	bl	80039b8 <_write>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d102      	bne.n	800dd66 <_write_r+0x1e>
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	b103      	cbz	r3, 800dd66 <_write_r+0x1e>
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	20002680 	.word	0x20002680

0800dd6c <__errno>:
 800dd6c:	4b01      	ldr	r3, [pc, #4]	@ (800dd74 <__errno+0x8>)
 800dd6e:	6818      	ldr	r0, [r3, #0]
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20000134 	.word	0x20000134

0800dd78 <__libc_init_array>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	4d0d      	ldr	r5, [pc, #52]	@ (800ddb0 <__libc_init_array+0x38>)
 800dd7c:	4c0d      	ldr	r4, [pc, #52]	@ (800ddb4 <__libc_init_array+0x3c>)
 800dd7e:	1b64      	subs	r4, r4, r5
 800dd80:	10a4      	asrs	r4, r4, #2
 800dd82:	2600      	movs	r6, #0
 800dd84:	42a6      	cmp	r6, r4
 800dd86:	d109      	bne.n	800dd9c <__libc_init_array+0x24>
 800dd88:	4d0b      	ldr	r5, [pc, #44]	@ (800ddb8 <__libc_init_array+0x40>)
 800dd8a:	4c0c      	ldr	r4, [pc, #48]	@ (800ddbc <__libc_init_array+0x44>)
 800dd8c:	f004 fb56 	bl	801243c <_init>
 800dd90:	1b64      	subs	r4, r4, r5
 800dd92:	10a4      	asrs	r4, r4, #2
 800dd94:	2600      	movs	r6, #0
 800dd96:	42a6      	cmp	r6, r4
 800dd98:	d105      	bne.n	800dda6 <__libc_init_array+0x2e>
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda0:	4798      	blx	r3
 800dda2:	3601      	adds	r6, #1
 800dda4:	e7ee      	b.n	800dd84 <__libc_init_array+0xc>
 800dda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddaa:	4798      	blx	r3
 800ddac:	3601      	adds	r6, #1
 800ddae:	e7f2      	b.n	800dd96 <__libc_init_array+0x1e>
 800ddb0:	08012d20 	.word	0x08012d20
 800ddb4:	08012d20 	.word	0x08012d20
 800ddb8:	08012d20 	.word	0x08012d20
 800ddbc:	08012d24 	.word	0x08012d24

0800ddc0 <__retarget_lock_init_recursive>:
 800ddc0:	4770      	bx	lr

0800ddc2 <__retarget_lock_acquire_recursive>:
 800ddc2:	4770      	bx	lr

0800ddc4 <__retarget_lock_release_recursive>:
 800ddc4:	4770      	bx	lr

0800ddc6 <memcpy>:
 800ddc6:	440a      	add	r2, r1
 800ddc8:	4291      	cmp	r1, r2
 800ddca:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddce:	d100      	bne.n	800ddd2 <memcpy+0xc>
 800ddd0:	4770      	bx	lr
 800ddd2:	b510      	push	{r4, lr}
 800ddd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dddc:	4291      	cmp	r1, r2
 800ddde:	d1f9      	bne.n	800ddd4 <memcpy+0xe>
 800dde0:	bd10      	pop	{r4, pc}

0800dde2 <copysign>:
 800dde2:	b082      	sub	sp, #8
 800dde4:	ec51 0b10 	vmov	r0, r1, d0
 800dde8:	ed8d 1b00 	vstr	d1, [sp]
 800ddec:	4602      	mov	r2, r0
 800ddee:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800ddf2:	9901      	ldr	r1, [sp, #4]
 800ddf4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800ddf8:	ea40 0301 	orr.w	r3, r0, r1
 800ddfc:	ec43 2b10 	vmov	d0, r2, r3
 800de00:	b002      	add	sp, #8
 800de02:	4770      	bx	lr

0800de04 <quorem>:
 800de04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	6903      	ldr	r3, [r0, #16]
 800de0a:	690c      	ldr	r4, [r1, #16]
 800de0c:	42a3      	cmp	r3, r4
 800de0e:	4607      	mov	r7, r0
 800de10:	db7e      	blt.n	800df10 <quorem+0x10c>
 800de12:	3c01      	subs	r4, #1
 800de14:	f101 0814 	add.w	r8, r1, #20
 800de18:	00a3      	lsls	r3, r4, #2
 800de1a:	f100 0514 	add.w	r5, r0, #20
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de24:	9301      	str	r3, [sp, #4]
 800de26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de2e:	3301      	adds	r3, #1
 800de30:	429a      	cmp	r2, r3
 800de32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de36:	fbb2 f6f3 	udiv	r6, r2, r3
 800de3a:	d32e      	bcc.n	800de9a <quorem+0x96>
 800de3c:	f04f 0a00 	mov.w	sl, #0
 800de40:	46c4      	mov	ip, r8
 800de42:	46ae      	mov	lr, r5
 800de44:	46d3      	mov	fp, sl
 800de46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de4a:	b298      	uxth	r0, r3
 800de4c:	fb06 a000 	mla	r0, r6, r0, sl
 800de50:	0c02      	lsrs	r2, r0, #16
 800de52:	0c1b      	lsrs	r3, r3, #16
 800de54:	fb06 2303 	mla	r3, r6, r3, r2
 800de58:	f8de 2000 	ldr.w	r2, [lr]
 800de5c:	b280      	uxth	r0, r0
 800de5e:	b292      	uxth	r2, r2
 800de60:	1a12      	subs	r2, r2, r0
 800de62:	445a      	add	r2, fp
 800de64:	f8de 0000 	ldr.w	r0, [lr]
 800de68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de76:	b292      	uxth	r2, r2
 800de78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de7c:	45e1      	cmp	r9, ip
 800de7e:	f84e 2b04 	str.w	r2, [lr], #4
 800de82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de86:	d2de      	bcs.n	800de46 <quorem+0x42>
 800de88:	9b00      	ldr	r3, [sp, #0]
 800de8a:	58eb      	ldr	r3, [r5, r3]
 800de8c:	b92b      	cbnz	r3, 800de9a <quorem+0x96>
 800de8e:	9b01      	ldr	r3, [sp, #4]
 800de90:	3b04      	subs	r3, #4
 800de92:	429d      	cmp	r5, r3
 800de94:	461a      	mov	r2, r3
 800de96:	d32f      	bcc.n	800def8 <quorem+0xf4>
 800de98:	613c      	str	r4, [r7, #16]
 800de9a:	4638      	mov	r0, r7
 800de9c:	f001 f97a 	bl	800f194 <__mcmp>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	db25      	blt.n	800def0 <quorem+0xec>
 800dea4:	4629      	mov	r1, r5
 800dea6:	2000      	movs	r0, #0
 800dea8:	f858 2b04 	ldr.w	r2, [r8], #4
 800deac:	f8d1 c000 	ldr.w	ip, [r1]
 800deb0:	fa1f fe82 	uxth.w	lr, r2
 800deb4:	fa1f f38c 	uxth.w	r3, ip
 800deb8:	eba3 030e 	sub.w	r3, r3, lr
 800debc:	4403      	add	r3, r0
 800debe:	0c12      	lsrs	r2, r2, #16
 800dec0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dec4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dec8:	b29b      	uxth	r3, r3
 800deca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dece:	45c1      	cmp	r9, r8
 800ded0:	f841 3b04 	str.w	r3, [r1], #4
 800ded4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ded8:	d2e6      	bcs.n	800dea8 <quorem+0xa4>
 800deda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dee2:	b922      	cbnz	r2, 800deee <quorem+0xea>
 800dee4:	3b04      	subs	r3, #4
 800dee6:	429d      	cmp	r5, r3
 800dee8:	461a      	mov	r2, r3
 800deea:	d30b      	bcc.n	800df04 <quorem+0x100>
 800deec:	613c      	str	r4, [r7, #16]
 800deee:	3601      	adds	r6, #1
 800def0:	4630      	mov	r0, r6
 800def2:	b003      	add	sp, #12
 800def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def8:	6812      	ldr	r2, [r2, #0]
 800defa:	3b04      	subs	r3, #4
 800defc:	2a00      	cmp	r2, #0
 800defe:	d1cb      	bne.n	800de98 <quorem+0x94>
 800df00:	3c01      	subs	r4, #1
 800df02:	e7c6      	b.n	800de92 <quorem+0x8e>
 800df04:	6812      	ldr	r2, [r2, #0]
 800df06:	3b04      	subs	r3, #4
 800df08:	2a00      	cmp	r2, #0
 800df0a:	d1ef      	bne.n	800deec <quorem+0xe8>
 800df0c:	3c01      	subs	r4, #1
 800df0e:	e7ea      	b.n	800dee6 <quorem+0xe2>
 800df10:	2000      	movs	r0, #0
 800df12:	e7ee      	b.n	800def2 <quorem+0xee>
 800df14:	0000      	movs	r0, r0
	...

0800df18 <_dtoa_r>:
 800df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	69c7      	ldr	r7, [r0, #28]
 800df1e:	b099      	sub	sp, #100	@ 0x64
 800df20:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df24:	ec55 4b10 	vmov	r4, r5, d0
 800df28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800df2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800df2c:	4683      	mov	fp, r0
 800df2e:	920e      	str	r2, [sp, #56]	@ 0x38
 800df30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df32:	b97f      	cbnz	r7, 800df54 <_dtoa_r+0x3c>
 800df34:	2010      	movs	r0, #16
 800df36:	f000 fdfd 	bl	800eb34 <malloc>
 800df3a:	4602      	mov	r2, r0
 800df3c:	f8cb 001c 	str.w	r0, [fp, #28]
 800df40:	b920      	cbnz	r0, 800df4c <_dtoa_r+0x34>
 800df42:	4ba7      	ldr	r3, [pc, #668]	@ (800e1e0 <_dtoa_r+0x2c8>)
 800df44:	21ef      	movs	r1, #239	@ 0xef
 800df46:	48a7      	ldr	r0, [pc, #668]	@ (800e1e4 <_dtoa_r+0x2cc>)
 800df48:	f001 fc5a 	bl	800f800 <__assert_func>
 800df4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df50:	6007      	str	r7, [r0, #0]
 800df52:	60c7      	str	r7, [r0, #12]
 800df54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df58:	6819      	ldr	r1, [r3, #0]
 800df5a:	b159      	cbz	r1, 800df74 <_dtoa_r+0x5c>
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	604a      	str	r2, [r1, #4]
 800df60:	2301      	movs	r3, #1
 800df62:	4093      	lsls	r3, r2
 800df64:	608b      	str	r3, [r1, #8]
 800df66:	4658      	mov	r0, fp
 800df68:	f000 feda 	bl	800ed20 <_Bfree>
 800df6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df70:	2200      	movs	r2, #0
 800df72:	601a      	str	r2, [r3, #0]
 800df74:	1e2b      	subs	r3, r5, #0
 800df76:	bfb9      	ittee	lt
 800df78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df7c:	9303      	strlt	r3, [sp, #12]
 800df7e:	2300      	movge	r3, #0
 800df80:	6033      	strge	r3, [r6, #0]
 800df82:	9f03      	ldr	r7, [sp, #12]
 800df84:	4b98      	ldr	r3, [pc, #608]	@ (800e1e8 <_dtoa_r+0x2d0>)
 800df86:	bfbc      	itt	lt
 800df88:	2201      	movlt	r2, #1
 800df8a:	6032      	strlt	r2, [r6, #0]
 800df8c:	43bb      	bics	r3, r7
 800df8e:	d112      	bne.n	800dfb6 <_dtoa_r+0x9e>
 800df90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df96:	6013      	str	r3, [r2, #0]
 800df98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df9c:	4323      	orrs	r3, r4
 800df9e:	f000 854d 	beq.w	800ea3c <_dtoa_r+0xb24>
 800dfa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfa4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e1fc <_dtoa_r+0x2e4>
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 854f 	beq.w	800ea4c <_dtoa_r+0xb34>
 800dfae:	f10a 0303 	add.w	r3, sl, #3
 800dfb2:	f000 bd49 	b.w	800ea48 <_dtoa_r+0xb30>
 800dfb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	ec51 0b17 	vmov	r0, r1, d7
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dfc6:	f7f2 fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfca:	4680      	mov	r8, r0
 800dfcc:	b158      	cbz	r0, 800dfe6 <_dtoa_r+0xce>
 800dfce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	6013      	str	r3, [r2, #0]
 800dfd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfd6:	b113      	cbz	r3, 800dfde <_dtoa_r+0xc6>
 800dfd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfda:	4b84      	ldr	r3, [pc, #528]	@ (800e1ec <_dtoa_r+0x2d4>)
 800dfdc:	6013      	str	r3, [r2, #0]
 800dfde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e200 <_dtoa_r+0x2e8>
 800dfe2:	f000 bd33 	b.w	800ea4c <_dtoa_r+0xb34>
 800dfe6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dfea:	aa16      	add	r2, sp, #88	@ 0x58
 800dfec:	a917      	add	r1, sp, #92	@ 0x5c
 800dfee:	4658      	mov	r0, fp
 800dff0:	f001 f980 	bl	800f2f4 <__d2b>
 800dff4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dff8:	4681      	mov	r9, r0
 800dffa:	2e00      	cmp	r6, #0
 800dffc:	d077      	beq.n	800e0ee <_dtoa_r+0x1d6>
 800dffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e000:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e00c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e010:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e014:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e018:	4619      	mov	r1, r3
 800e01a:	2200      	movs	r2, #0
 800e01c:	4b74      	ldr	r3, [pc, #464]	@ (800e1f0 <_dtoa_r+0x2d8>)
 800e01e:	f7f2 f933 	bl	8000288 <__aeabi_dsub>
 800e022:	a369      	add	r3, pc, #420	@ (adr r3, 800e1c8 <_dtoa_r+0x2b0>)
 800e024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e028:	f7f2 fae6 	bl	80005f8 <__aeabi_dmul>
 800e02c:	a368      	add	r3, pc, #416	@ (adr r3, 800e1d0 <_dtoa_r+0x2b8>)
 800e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e032:	f7f2 f92b 	bl	800028c <__adddf3>
 800e036:	4604      	mov	r4, r0
 800e038:	4630      	mov	r0, r6
 800e03a:	460d      	mov	r5, r1
 800e03c:	f7f2 fa72 	bl	8000524 <__aeabi_i2d>
 800e040:	a365      	add	r3, pc, #404	@ (adr r3, 800e1d8 <_dtoa_r+0x2c0>)
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	f7f2 fad7 	bl	80005f8 <__aeabi_dmul>
 800e04a:	4602      	mov	r2, r0
 800e04c:	460b      	mov	r3, r1
 800e04e:	4620      	mov	r0, r4
 800e050:	4629      	mov	r1, r5
 800e052:	f7f2 f91b 	bl	800028c <__adddf3>
 800e056:	4604      	mov	r4, r0
 800e058:	460d      	mov	r5, r1
 800e05a:	f7f2 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800e05e:	2200      	movs	r2, #0
 800e060:	4607      	mov	r7, r0
 800e062:	2300      	movs	r3, #0
 800e064:	4620      	mov	r0, r4
 800e066:	4629      	mov	r1, r5
 800e068:	f7f2 fd38 	bl	8000adc <__aeabi_dcmplt>
 800e06c:	b140      	cbz	r0, 800e080 <_dtoa_r+0x168>
 800e06e:	4638      	mov	r0, r7
 800e070:	f7f2 fa58 	bl	8000524 <__aeabi_i2d>
 800e074:	4622      	mov	r2, r4
 800e076:	462b      	mov	r3, r5
 800e078:	f7f2 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800e07c:	b900      	cbnz	r0, 800e080 <_dtoa_r+0x168>
 800e07e:	3f01      	subs	r7, #1
 800e080:	2f16      	cmp	r7, #22
 800e082:	d851      	bhi.n	800e128 <_dtoa_r+0x210>
 800e084:	4b5b      	ldr	r3, [pc, #364]	@ (800e1f4 <_dtoa_r+0x2dc>)
 800e086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e092:	f7f2 fd23 	bl	8000adc <__aeabi_dcmplt>
 800e096:	2800      	cmp	r0, #0
 800e098:	d048      	beq.n	800e12c <_dtoa_r+0x214>
 800e09a:	3f01      	subs	r7, #1
 800e09c:	2300      	movs	r3, #0
 800e09e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e0a2:	1b9b      	subs	r3, r3, r6
 800e0a4:	1e5a      	subs	r2, r3, #1
 800e0a6:	bf44      	itt	mi
 800e0a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800e0ac:	2300      	movmi	r3, #0
 800e0ae:	9208      	str	r2, [sp, #32]
 800e0b0:	bf54      	ite	pl
 800e0b2:	f04f 0800 	movpl.w	r8, #0
 800e0b6:	9308      	strmi	r3, [sp, #32]
 800e0b8:	2f00      	cmp	r7, #0
 800e0ba:	db39      	blt.n	800e130 <_dtoa_r+0x218>
 800e0bc:	9b08      	ldr	r3, [sp, #32]
 800e0be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e0c0:	443b      	add	r3, r7
 800e0c2:	9308      	str	r3, [sp, #32]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ca:	2b09      	cmp	r3, #9
 800e0cc:	d864      	bhi.n	800e198 <_dtoa_r+0x280>
 800e0ce:	2b05      	cmp	r3, #5
 800e0d0:	bfc4      	itt	gt
 800e0d2:	3b04      	subgt	r3, #4
 800e0d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0d8:	f1a3 0302 	sub.w	r3, r3, #2
 800e0dc:	bfcc      	ite	gt
 800e0de:	2400      	movgt	r4, #0
 800e0e0:	2401      	movle	r4, #1
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d863      	bhi.n	800e1ae <_dtoa_r+0x296>
 800e0e6:	e8df f003 	tbb	[pc, r3]
 800e0ea:	372a      	.short	0x372a
 800e0ec:	5535      	.short	0x5535
 800e0ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e0f2:	441e      	add	r6, r3
 800e0f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e0f8:	2b20      	cmp	r3, #32
 800e0fa:	bfc1      	itttt	gt
 800e0fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e100:	409f      	lslgt	r7, r3
 800e102:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e106:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e10a:	bfd6      	itet	le
 800e10c:	f1c3 0320 	rsble	r3, r3, #32
 800e110:	ea47 0003 	orrgt.w	r0, r7, r3
 800e114:	fa04 f003 	lslle.w	r0, r4, r3
 800e118:	f7f2 f9f4 	bl	8000504 <__aeabi_ui2d>
 800e11c:	2201      	movs	r2, #1
 800e11e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e122:	3e01      	subs	r6, #1
 800e124:	9214      	str	r2, [sp, #80]	@ 0x50
 800e126:	e777      	b.n	800e018 <_dtoa_r+0x100>
 800e128:	2301      	movs	r3, #1
 800e12a:	e7b8      	b.n	800e09e <_dtoa_r+0x186>
 800e12c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e12e:	e7b7      	b.n	800e0a0 <_dtoa_r+0x188>
 800e130:	427b      	negs	r3, r7
 800e132:	930a      	str	r3, [sp, #40]	@ 0x28
 800e134:	2300      	movs	r3, #0
 800e136:	eba8 0807 	sub.w	r8, r8, r7
 800e13a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e13c:	e7c4      	b.n	800e0c8 <_dtoa_r+0x1b0>
 800e13e:	2300      	movs	r3, #0
 800e140:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e144:	2b00      	cmp	r3, #0
 800e146:	dc35      	bgt.n	800e1b4 <_dtoa_r+0x29c>
 800e148:	2301      	movs	r3, #1
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	9307      	str	r3, [sp, #28]
 800e14e:	461a      	mov	r2, r3
 800e150:	920e      	str	r2, [sp, #56]	@ 0x38
 800e152:	e00b      	b.n	800e16c <_dtoa_r+0x254>
 800e154:	2301      	movs	r3, #1
 800e156:	e7f3      	b.n	800e140 <_dtoa_r+0x228>
 800e158:	2300      	movs	r3, #0
 800e15a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e15c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e15e:	18fb      	adds	r3, r7, r3
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	3301      	adds	r3, #1
 800e164:	2b01      	cmp	r3, #1
 800e166:	9307      	str	r3, [sp, #28]
 800e168:	bfb8      	it	lt
 800e16a:	2301      	movlt	r3, #1
 800e16c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e170:	2100      	movs	r1, #0
 800e172:	2204      	movs	r2, #4
 800e174:	f102 0514 	add.w	r5, r2, #20
 800e178:	429d      	cmp	r5, r3
 800e17a:	d91f      	bls.n	800e1bc <_dtoa_r+0x2a4>
 800e17c:	6041      	str	r1, [r0, #4]
 800e17e:	4658      	mov	r0, fp
 800e180:	f000 fd8e 	bl	800eca0 <_Balloc>
 800e184:	4682      	mov	sl, r0
 800e186:	2800      	cmp	r0, #0
 800e188:	d13c      	bne.n	800e204 <_dtoa_r+0x2ec>
 800e18a:	4b1b      	ldr	r3, [pc, #108]	@ (800e1f8 <_dtoa_r+0x2e0>)
 800e18c:	4602      	mov	r2, r0
 800e18e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e192:	e6d8      	b.n	800df46 <_dtoa_r+0x2e>
 800e194:	2301      	movs	r3, #1
 800e196:	e7e0      	b.n	800e15a <_dtoa_r+0x242>
 800e198:	2401      	movs	r4, #1
 800e19a:	2300      	movs	r3, #0
 800e19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e19e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	9307      	str	r3, [sp, #28]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	2312      	movs	r3, #18
 800e1ac:	e7d0      	b.n	800e150 <_dtoa_r+0x238>
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1b2:	e7f5      	b.n	800e1a0 <_dtoa_r+0x288>
 800e1b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1b6:	9300      	str	r3, [sp, #0]
 800e1b8:	9307      	str	r3, [sp, #28]
 800e1ba:	e7d7      	b.n	800e16c <_dtoa_r+0x254>
 800e1bc:	3101      	adds	r1, #1
 800e1be:	0052      	lsls	r2, r2, #1
 800e1c0:	e7d8      	b.n	800e174 <_dtoa_r+0x25c>
 800e1c2:	bf00      	nop
 800e1c4:	f3af 8000 	nop.w
 800e1c8:	636f4361 	.word	0x636f4361
 800e1cc:	3fd287a7 	.word	0x3fd287a7
 800e1d0:	8b60c8b3 	.word	0x8b60c8b3
 800e1d4:	3fc68a28 	.word	0x3fc68a28
 800e1d8:	509f79fb 	.word	0x509f79fb
 800e1dc:	3fd34413 	.word	0x3fd34413
 800e1e0:	08012561 	.word	0x08012561
 800e1e4:	08012578 	.word	0x08012578
 800e1e8:	7ff00000 	.word	0x7ff00000
 800e1ec:	08012531 	.word	0x08012531
 800e1f0:	3ff80000 	.word	0x3ff80000
 800e1f4:	08012670 	.word	0x08012670
 800e1f8:	080125d0 	.word	0x080125d0
 800e1fc:	0801255d 	.word	0x0801255d
 800e200:	08012530 	.word	0x08012530
 800e204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e208:	6018      	str	r0, [r3, #0]
 800e20a:	9b07      	ldr	r3, [sp, #28]
 800e20c:	2b0e      	cmp	r3, #14
 800e20e:	f200 80a4 	bhi.w	800e35a <_dtoa_r+0x442>
 800e212:	2c00      	cmp	r4, #0
 800e214:	f000 80a1 	beq.w	800e35a <_dtoa_r+0x442>
 800e218:	2f00      	cmp	r7, #0
 800e21a:	dd33      	ble.n	800e284 <_dtoa_r+0x36c>
 800e21c:	4bad      	ldr	r3, [pc, #692]	@ (800e4d4 <_dtoa_r+0x5bc>)
 800e21e:	f007 020f 	and.w	r2, r7, #15
 800e222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e226:	ed93 7b00 	vldr	d7, [r3]
 800e22a:	05f8      	lsls	r0, r7, #23
 800e22c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e230:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e234:	d516      	bpl.n	800e264 <_dtoa_r+0x34c>
 800e236:	4ba8      	ldr	r3, [pc, #672]	@ (800e4d8 <_dtoa_r+0x5c0>)
 800e238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e23c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e240:	f7f2 fb04 	bl	800084c <__aeabi_ddiv>
 800e244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e248:	f004 040f 	and.w	r4, r4, #15
 800e24c:	2603      	movs	r6, #3
 800e24e:	4da2      	ldr	r5, [pc, #648]	@ (800e4d8 <_dtoa_r+0x5c0>)
 800e250:	b954      	cbnz	r4, 800e268 <_dtoa_r+0x350>
 800e252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e25a:	f7f2 faf7 	bl	800084c <__aeabi_ddiv>
 800e25e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e262:	e028      	b.n	800e2b6 <_dtoa_r+0x39e>
 800e264:	2602      	movs	r6, #2
 800e266:	e7f2      	b.n	800e24e <_dtoa_r+0x336>
 800e268:	07e1      	lsls	r1, r4, #31
 800e26a:	d508      	bpl.n	800e27e <_dtoa_r+0x366>
 800e26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e270:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e274:	f7f2 f9c0 	bl	80005f8 <__aeabi_dmul>
 800e278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e27c:	3601      	adds	r6, #1
 800e27e:	1064      	asrs	r4, r4, #1
 800e280:	3508      	adds	r5, #8
 800e282:	e7e5      	b.n	800e250 <_dtoa_r+0x338>
 800e284:	f000 80d2 	beq.w	800e42c <_dtoa_r+0x514>
 800e288:	427c      	negs	r4, r7
 800e28a:	4b92      	ldr	r3, [pc, #584]	@ (800e4d4 <_dtoa_r+0x5bc>)
 800e28c:	4d92      	ldr	r5, [pc, #584]	@ (800e4d8 <_dtoa_r+0x5c0>)
 800e28e:	f004 020f 	and.w	r2, r4, #15
 800e292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e29e:	f7f2 f9ab 	bl	80005f8 <__aeabi_dmul>
 800e2a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2a6:	1124      	asrs	r4, r4, #4
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	2602      	movs	r6, #2
 800e2ac:	2c00      	cmp	r4, #0
 800e2ae:	f040 80b2 	bne.w	800e416 <_dtoa_r+0x4fe>
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1d3      	bne.n	800e25e <_dtoa_r+0x346>
 800e2b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 80b7 	beq.w	800e430 <_dtoa_r+0x518>
 800e2c2:	4b86      	ldr	r3, [pc, #536]	@ (800e4dc <_dtoa_r+0x5c4>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7f2 fc07 	bl	8000adc <__aeabi_dcmplt>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f000 80ae 	beq.w	800e430 <_dtoa_r+0x518>
 800e2d4:	9b07      	ldr	r3, [sp, #28]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f000 80aa 	beq.w	800e430 <_dtoa_r+0x518>
 800e2dc:	9b00      	ldr	r3, [sp, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dd37      	ble.n	800e352 <_dtoa_r+0x43a>
 800e2e2:	1e7b      	subs	r3, r7, #1
 800e2e4:	9304      	str	r3, [sp, #16]
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4b7d      	ldr	r3, [pc, #500]	@ (800e4e0 <_dtoa_r+0x5c8>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	f7f2 f983 	bl	80005f8 <__aeabi_dmul>
 800e2f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2f6:	9c00      	ldr	r4, [sp, #0]
 800e2f8:	3601      	adds	r6, #1
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	f7f2 f912 	bl	8000524 <__aeabi_i2d>
 800e300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e304:	f7f2 f978 	bl	80005f8 <__aeabi_dmul>
 800e308:	4b76      	ldr	r3, [pc, #472]	@ (800e4e4 <_dtoa_r+0x5cc>)
 800e30a:	2200      	movs	r2, #0
 800e30c:	f7f1 ffbe 	bl	800028c <__adddf3>
 800e310:	4605      	mov	r5, r0
 800e312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e316:	2c00      	cmp	r4, #0
 800e318:	f040 808d 	bne.w	800e436 <_dtoa_r+0x51e>
 800e31c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e320:	4b71      	ldr	r3, [pc, #452]	@ (800e4e8 <_dtoa_r+0x5d0>)
 800e322:	2200      	movs	r2, #0
 800e324:	f7f1 ffb0 	bl	8000288 <__aeabi_dsub>
 800e328:	4602      	mov	r2, r0
 800e32a:	460b      	mov	r3, r1
 800e32c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e330:	462a      	mov	r2, r5
 800e332:	4633      	mov	r3, r6
 800e334:	f7f2 fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 800e338:	2800      	cmp	r0, #0
 800e33a:	f040 828b 	bne.w	800e854 <_dtoa_r+0x93c>
 800e33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e342:	462a      	mov	r2, r5
 800e344:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e348:	f7f2 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	f040 8128 	bne.w	800e5a2 <_dtoa_r+0x68a>
 800e352:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e356:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e35a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f2c0 815a 	blt.w	800e616 <_dtoa_r+0x6fe>
 800e362:	2f0e      	cmp	r7, #14
 800e364:	f300 8157 	bgt.w	800e616 <_dtoa_r+0x6fe>
 800e368:	4b5a      	ldr	r3, [pc, #360]	@ (800e4d4 <_dtoa_r+0x5bc>)
 800e36a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e36e:	ed93 7b00 	vldr	d7, [r3]
 800e372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e374:	2b00      	cmp	r3, #0
 800e376:	ed8d 7b00 	vstr	d7, [sp]
 800e37a:	da03      	bge.n	800e384 <_dtoa_r+0x46c>
 800e37c:	9b07      	ldr	r3, [sp, #28]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f340 8101 	ble.w	800e586 <_dtoa_r+0x66e>
 800e384:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e388:	4656      	mov	r6, sl
 800e38a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e38e:	4620      	mov	r0, r4
 800e390:	4629      	mov	r1, r5
 800e392:	f7f2 fa5b 	bl	800084c <__aeabi_ddiv>
 800e396:	f7f2 fbdf 	bl	8000b58 <__aeabi_d2iz>
 800e39a:	4680      	mov	r8, r0
 800e39c:	f7f2 f8c2 	bl	8000524 <__aeabi_i2d>
 800e3a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3a4:	f7f2 f928 	bl	80005f8 <__aeabi_dmul>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e3b4:	f7f1 ff68 	bl	8000288 <__aeabi_dsub>
 800e3b8:	f806 4b01 	strb.w	r4, [r6], #1
 800e3bc:	9d07      	ldr	r5, [sp, #28]
 800e3be:	eba6 040a 	sub.w	r4, r6, sl
 800e3c2:	42a5      	cmp	r5, r4
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	f040 8117 	bne.w	800e5fa <_dtoa_r+0x6e2>
 800e3cc:	f7f1 ff5e 	bl	800028c <__adddf3>
 800e3d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	460d      	mov	r5, r1
 800e3d8:	f7f2 fb9e 	bl	8000b18 <__aeabi_dcmpgt>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	f040 80f9 	bne.w	800e5d4 <_dtoa_r+0x6bc>
 800e3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	f7f2 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3ee:	b118      	cbz	r0, 800e3f8 <_dtoa_r+0x4e0>
 800e3f0:	f018 0f01 	tst.w	r8, #1
 800e3f4:	f040 80ee 	bne.w	800e5d4 <_dtoa_r+0x6bc>
 800e3f8:	4649      	mov	r1, r9
 800e3fa:	4658      	mov	r0, fp
 800e3fc:	f000 fc90 	bl	800ed20 <_Bfree>
 800e400:	2300      	movs	r3, #0
 800e402:	7033      	strb	r3, [r6, #0]
 800e404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e406:	3701      	adds	r7, #1
 800e408:	601f      	str	r7, [r3, #0]
 800e40a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f000 831d 	beq.w	800ea4c <_dtoa_r+0xb34>
 800e412:	601e      	str	r6, [r3, #0]
 800e414:	e31a      	b.n	800ea4c <_dtoa_r+0xb34>
 800e416:	07e2      	lsls	r2, r4, #31
 800e418:	d505      	bpl.n	800e426 <_dtoa_r+0x50e>
 800e41a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e41e:	f7f2 f8eb 	bl	80005f8 <__aeabi_dmul>
 800e422:	3601      	adds	r6, #1
 800e424:	2301      	movs	r3, #1
 800e426:	1064      	asrs	r4, r4, #1
 800e428:	3508      	adds	r5, #8
 800e42a:	e73f      	b.n	800e2ac <_dtoa_r+0x394>
 800e42c:	2602      	movs	r6, #2
 800e42e:	e742      	b.n	800e2b6 <_dtoa_r+0x39e>
 800e430:	9c07      	ldr	r4, [sp, #28]
 800e432:	9704      	str	r7, [sp, #16]
 800e434:	e761      	b.n	800e2fa <_dtoa_r+0x3e2>
 800e436:	4b27      	ldr	r3, [pc, #156]	@ (800e4d4 <_dtoa_r+0x5bc>)
 800e438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e43a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e43e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e442:	4454      	add	r4, sl
 800e444:	2900      	cmp	r1, #0
 800e446:	d053      	beq.n	800e4f0 <_dtoa_r+0x5d8>
 800e448:	4928      	ldr	r1, [pc, #160]	@ (800e4ec <_dtoa_r+0x5d4>)
 800e44a:	2000      	movs	r0, #0
 800e44c:	f7f2 f9fe 	bl	800084c <__aeabi_ddiv>
 800e450:	4633      	mov	r3, r6
 800e452:	462a      	mov	r2, r5
 800e454:	f7f1 ff18 	bl	8000288 <__aeabi_dsub>
 800e458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e45c:	4656      	mov	r6, sl
 800e45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e462:	f7f2 fb79 	bl	8000b58 <__aeabi_d2iz>
 800e466:	4605      	mov	r5, r0
 800e468:	f7f2 f85c 	bl	8000524 <__aeabi_i2d>
 800e46c:	4602      	mov	r2, r0
 800e46e:	460b      	mov	r3, r1
 800e470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e474:	f7f1 ff08 	bl	8000288 <__aeabi_dsub>
 800e478:	3530      	adds	r5, #48	@ 0x30
 800e47a:	4602      	mov	r2, r0
 800e47c:	460b      	mov	r3, r1
 800e47e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e482:	f806 5b01 	strb.w	r5, [r6], #1
 800e486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e48a:	f7f2 fb27 	bl	8000adc <__aeabi_dcmplt>
 800e48e:	2800      	cmp	r0, #0
 800e490:	d171      	bne.n	800e576 <_dtoa_r+0x65e>
 800e492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e496:	4911      	ldr	r1, [pc, #68]	@ (800e4dc <_dtoa_r+0x5c4>)
 800e498:	2000      	movs	r0, #0
 800e49a:	f7f1 fef5 	bl	8000288 <__aeabi_dsub>
 800e49e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4a2:	f7f2 fb1b 	bl	8000adc <__aeabi_dcmplt>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f040 8095 	bne.w	800e5d6 <_dtoa_r+0x6be>
 800e4ac:	42a6      	cmp	r6, r4
 800e4ae:	f43f af50 	beq.w	800e352 <_dtoa_r+0x43a>
 800e4b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e0 <_dtoa_r+0x5c8>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f7f2 f89d 	bl	80005f8 <__aeabi_dmul>
 800e4be:	4b08      	ldr	r3, [pc, #32]	@ (800e4e0 <_dtoa_r+0x5c8>)
 800e4c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4ca:	f7f2 f895 	bl	80005f8 <__aeabi_dmul>
 800e4ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4d2:	e7c4      	b.n	800e45e <_dtoa_r+0x546>
 800e4d4:	08012670 	.word	0x08012670
 800e4d8:	08012648 	.word	0x08012648
 800e4dc:	3ff00000 	.word	0x3ff00000
 800e4e0:	40240000 	.word	0x40240000
 800e4e4:	401c0000 	.word	0x401c0000
 800e4e8:	40140000 	.word	0x40140000
 800e4ec:	3fe00000 	.word	0x3fe00000
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f7f2 f880 	bl	80005f8 <__aeabi_dmul>
 800e4f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800e4fe:	4656      	mov	r6, sl
 800e500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e504:	f7f2 fb28 	bl	8000b58 <__aeabi_d2iz>
 800e508:	4605      	mov	r5, r0
 800e50a:	f7f2 f80b 	bl	8000524 <__aeabi_i2d>
 800e50e:	4602      	mov	r2, r0
 800e510:	460b      	mov	r3, r1
 800e512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e516:	f7f1 feb7 	bl	8000288 <__aeabi_dsub>
 800e51a:	3530      	adds	r5, #48	@ 0x30
 800e51c:	f806 5b01 	strb.w	r5, [r6], #1
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	42a6      	cmp	r6, r4
 800e526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e52a:	f04f 0200 	mov.w	r2, #0
 800e52e:	d124      	bne.n	800e57a <_dtoa_r+0x662>
 800e530:	4bac      	ldr	r3, [pc, #688]	@ (800e7e4 <_dtoa_r+0x8cc>)
 800e532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e536:	f7f1 fea9 	bl	800028c <__adddf3>
 800e53a:	4602      	mov	r2, r0
 800e53c:	460b      	mov	r3, r1
 800e53e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e542:	f7f2 fae9 	bl	8000b18 <__aeabi_dcmpgt>
 800e546:	2800      	cmp	r0, #0
 800e548:	d145      	bne.n	800e5d6 <_dtoa_r+0x6be>
 800e54a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e54e:	49a5      	ldr	r1, [pc, #660]	@ (800e7e4 <_dtoa_r+0x8cc>)
 800e550:	2000      	movs	r0, #0
 800e552:	f7f1 fe99 	bl	8000288 <__aeabi_dsub>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e55e:	f7f2 fabd 	bl	8000adc <__aeabi_dcmplt>
 800e562:	2800      	cmp	r0, #0
 800e564:	f43f aef5 	beq.w	800e352 <_dtoa_r+0x43a>
 800e568:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e56a:	1e73      	subs	r3, r6, #1
 800e56c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e56e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e572:	2b30      	cmp	r3, #48	@ 0x30
 800e574:	d0f8      	beq.n	800e568 <_dtoa_r+0x650>
 800e576:	9f04      	ldr	r7, [sp, #16]
 800e578:	e73e      	b.n	800e3f8 <_dtoa_r+0x4e0>
 800e57a:	4b9b      	ldr	r3, [pc, #620]	@ (800e7e8 <_dtoa_r+0x8d0>)
 800e57c:	f7f2 f83c 	bl	80005f8 <__aeabi_dmul>
 800e580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e584:	e7bc      	b.n	800e500 <_dtoa_r+0x5e8>
 800e586:	d10c      	bne.n	800e5a2 <_dtoa_r+0x68a>
 800e588:	4b98      	ldr	r3, [pc, #608]	@ (800e7ec <_dtoa_r+0x8d4>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e590:	f7f2 f832 	bl	80005f8 <__aeabi_dmul>
 800e594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e598:	f7f2 fab4 	bl	8000b04 <__aeabi_dcmpge>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	f000 8157 	beq.w	800e850 <_dtoa_r+0x938>
 800e5a2:	2400      	movs	r4, #0
 800e5a4:	4625      	mov	r5, r4
 800e5a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5a8:	43db      	mvns	r3, r3
 800e5aa:	9304      	str	r3, [sp, #16]
 800e5ac:	4656      	mov	r6, sl
 800e5ae:	2700      	movs	r7, #0
 800e5b0:	4621      	mov	r1, r4
 800e5b2:	4658      	mov	r0, fp
 800e5b4:	f000 fbb4 	bl	800ed20 <_Bfree>
 800e5b8:	2d00      	cmp	r5, #0
 800e5ba:	d0dc      	beq.n	800e576 <_dtoa_r+0x65e>
 800e5bc:	b12f      	cbz	r7, 800e5ca <_dtoa_r+0x6b2>
 800e5be:	42af      	cmp	r7, r5
 800e5c0:	d003      	beq.n	800e5ca <_dtoa_r+0x6b2>
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	4658      	mov	r0, fp
 800e5c6:	f000 fbab 	bl	800ed20 <_Bfree>
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	4658      	mov	r0, fp
 800e5ce:	f000 fba7 	bl	800ed20 <_Bfree>
 800e5d2:	e7d0      	b.n	800e576 <_dtoa_r+0x65e>
 800e5d4:	9704      	str	r7, [sp, #16]
 800e5d6:	4633      	mov	r3, r6
 800e5d8:	461e      	mov	r6, r3
 800e5da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5de:	2a39      	cmp	r2, #57	@ 0x39
 800e5e0:	d107      	bne.n	800e5f2 <_dtoa_r+0x6da>
 800e5e2:	459a      	cmp	sl, r3
 800e5e4:	d1f8      	bne.n	800e5d8 <_dtoa_r+0x6c0>
 800e5e6:	9a04      	ldr	r2, [sp, #16]
 800e5e8:	3201      	adds	r2, #1
 800e5ea:	9204      	str	r2, [sp, #16]
 800e5ec:	2230      	movs	r2, #48	@ 0x30
 800e5ee:	f88a 2000 	strb.w	r2, [sl]
 800e5f2:	781a      	ldrb	r2, [r3, #0]
 800e5f4:	3201      	adds	r2, #1
 800e5f6:	701a      	strb	r2, [r3, #0]
 800e5f8:	e7bd      	b.n	800e576 <_dtoa_r+0x65e>
 800e5fa:	4b7b      	ldr	r3, [pc, #492]	@ (800e7e8 <_dtoa_r+0x8d0>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f7f1 fffb 	bl	80005f8 <__aeabi_dmul>
 800e602:	2200      	movs	r2, #0
 800e604:	2300      	movs	r3, #0
 800e606:	4604      	mov	r4, r0
 800e608:	460d      	mov	r5, r1
 800e60a:	f7f2 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e60e:	2800      	cmp	r0, #0
 800e610:	f43f aebb 	beq.w	800e38a <_dtoa_r+0x472>
 800e614:	e6f0      	b.n	800e3f8 <_dtoa_r+0x4e0>
 800e616:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e618:	2a00      	cmp	r2, #0
 800e61a:	f000 80db 	beq.w	800e7d4 <_dtoa_r+0x8bc>
 800e61e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e620:	2a01      	cmp	r2, #1
 800e622:	f300 80bf 	bgt.w	800e7a4 <_dtoa_r+0x88c>
 800e626:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e628:	2a00      	cmp	r2, #0
 800e62a:	f000 80b7 	beq.w	800e79c <_dtoa_r+0x884>
 800e62e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e632:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e634:	4646      	mov	r6, r8
 800e636:	9a08      	ldr	r2, [sp, #32]
 800e638:	2101      	movs	r1, #1
 800e63a:	441a      	add	r2, r3
 800e63c:	4658      	mov	r0, fp
 800e63e:	4498      	add	r8, r3
 800e640:	9208      	str	r2, [sp, #32]
 800e642:	f000 fc21 	bl	800ee88 <__i2b>
 800e646:	4605      	mov	r5, r0
 800e648:	b15e      	cbz	r6, 800e662 <_dtoa_r+0x74a>
 800e64a:	9b08      	ldr	r3, [sp, #32]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	dd08      	ble.n	800e662 <_dtoa_r+0x74a>
 800e650:	42b3      	cmp	r3, r6
 800e652:	9a08      	ldr	r2, [sp, #32]
 800e654:	bfa8      	it	ge
 800e656:	4633      	movge	r3, r6
 800e658:	eba8 0803 	sub.w	r8, r8, r3
 800e65c:	1af6      	subs	r6, r6, r3
 800e65e:	1ad3      	subs	r3, r2, r3
 800e660:	9308      	str	r3, [sp, #32]
 800e662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e664:	b1f3      	cbz	r3, 800e6a4 <_dtoa_r+0x78c>
 800e666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f000 80b7 	beq.w	800e7dc <_dtoa_r+0x8c4>
 800e66e:	b18c      	cbz	r4, 800e694 <_dtoa_r+0x77c>
 800e670:	4629      	mov	r1, r5
 800e672:	4622      	mov	r2, r4
 800e674:	4658      	mov	r0, fp
 800e676:	f000 fcc7 	bl	800f008 <__pow5mult>
 800e67a:	464a      	mov	r2, r9
 800e67c:	4601      	mov	r1, r0
 800e67e:	4605      	mov	r5, r0
 800e680:	4658      	mov	r0, fp
 800e682:	f000 fc17 	bl	800eeb4 <__multiply>
 800e686:	4649      	mov	r1, r9
 800e688:	9004      	str	r0, [sp, #16]
 800e68a:	4658      	mov	r0, fp
 800e68c:	f000 fb48 	bl	800ed20 <_Bfree>
 800e690:	9b04      	ldr	r3, [sp, #16]
 800e692:	4699      	mov	r9, r3
 800e694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e696:	1b1a      	subs	r2, r3, r4
 800e698:	d004      	beq.n	800e6a4 <_dtoa_r+0x78c>
 800e69a:	4649      	mov	r1, r9
 800e69c:	4658      	mov	r0, fp
 800e69e:	f000 fcb3 	bl	800f008 <__pow5mult>
 800e6a2:	4681      	mov	r9, r0
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	4658      	mov	r0, fp
 800e6a8:	f000 fbee 	bl	800ee88 <__i2b>
 800e6ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 81cf 	beq.w	800ea54 <_dtoa_r+0xb3c>
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	4601      	mov	r1, r0
 800e6ba:	4658      	mov	r0, fp
 800e6bc:	f000 fca4 	bl	800f008 <__pow5mult>
 800e6c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	f300 8095 	bgt.w	800e7f4 <_dtoa_r+0x8dc>
 800e6ca:	9b02      	ldr	r3, [sp, #8]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f040 8087 	bne.w	800e7e0 <_dtoa_r+0x8c8>
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f040 8089 	bne.w	800e7f0 <_dtoa_r+0x8d8>
 800e6de:	9b03      	ldr	r3, [sp, #12]
 800e6e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6e4:	0d1b      	lsrs	r3, r3, #20
 800e6e6:	051b      	lsls	r3, r3, #20
 800e6e8:	b12b      	cbz	r3, 800e6f6 <_dtoa_r+0x7de>
 800e6ea:	9b08      	ldr	r3, [sp, #32]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	9308      	str	r3, [sp, #32]
 800e6f0:	f108 0801 	add.w	r8, r8, #1
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f000 81b0 	beq.w	800ea60 <_dtoa_r+0xb48>
 800e700:	6923      	ldr	r3, [r4, #16]
 800e702:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e706:	6918      	ldr	r0, [r3, #16]
 800e708:	f000 fb72 	bl	800edf0 <__hi0bits>
 800e70c:	f1c0 0020 	rsb	r0, r0, #32
 800e710:	9b08      	ldr	r3, [sp, #32]
 800e712:	4418      	add	r0, r3
 800e714:	f010 001f 	ands.w	r0, r0, #31
 800e718:	d077      	beq.n	800e80a <_dtoa_r+0x8f2>
 800e71a:	f1c0 0320 	rsb	r3, r0, #32
 800e71e:	2b04      	cmp	r3, #4
 800e720:	dd6b      	ble.n	800e7fa <_dtoa_r+0x8e2>
 800e722:	9b08      	ldr	r3, [sp, #32]
 800e724:	f1c0 001c 	rsb	r0, r0, #28
 800e728:	4403      	add	r3, r0
 800e72a:	4480      	add	r8, r0
 800e72c:	4406      	add	r6, r0
 800e72e:	9308      	str	r3, [sp, #32]
 800e730:	f1b8 0f00 	cmp.w	r8, #0
 800e734:	dd05      	ble.n	800e742 <_dtoa_r+0x82a>
 800e736:	4649      	mov	r1, r9
 800e738:	4642      	mov	r2, r8
 800e73a:	4658      	mov	r0, fp
 800e73c:	f000 fcbe 	bl	800f0bc <__lshift>
 800e740:	4681      	mov	r9, r0
 800e742:	9b08      	ldr	r3, [sp, #32]
 800e744:	2b00      	cmp	r3, #0
 800e746:	dd05      	ble.n	800e754 <_dtoa_r+0x83c>
 800e748:	4621      	mov	r1, r4
 800e74a:	461a      	mov	r2, r3
 800e74c:	4658      	mov	r0, fp
 800e74e:	f000 fcb5 	bl	800f0bc <__lshift>
 800e752:	4604      	mov	r4, r0
 800e754:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e756:	2b00      	cmp	r3, #0
 800e758:	d059      	beq.n	800e80e <_dtoa_r+0x8f6>
 800e75a:	4621      	mov	r1, r4
 800e75c:	4648      	mov	r0, r9
 800e75e:	f000 fd19 	bl	800f194 <__mcmp>
 800e762:	2800      	cmp	r0, #0
 800e764:	da53      	bge.n	800e80e <_dtoa_r+0x8f6>
 800e766:	1e7b      	subs	r3, r7, #1
 800e768:	9304      	str	r3, [sp, #16]
 800e76a:	4649      	mov	r1, r9
 800e76c:	2300      	movs	r3, #0
 800e76e:	220a      	movs	r2, #10
 800e770:	4658      	mov	r0, fp
 800e772:	f000 faf7 	bl	800ed64 <__multadd>
 800e776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e778:	4681      	mov	r9, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f000 8172 	beq.w	800ea64 <_dtoa_r+0xb4c>
 800e780:	2300      	movs	r3, #0
 800e782:	4629      	mov	r1, r5
 800e784:	220a      	movs	r2, #10
 800e786:	4658      	mov	r0, fp
 800e788:	f000 faec 	bl	800ed64 <__multadd>
 800e78c:	9b00      	ldr	r3, [sp, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	4605      	mov	r5, r0
 800e792:	dc67      	bgt.n	800e864 <_dtoa_r+0x94c>
 800e794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e796:	2b02      	cmp	r3, #2
 800e798:	dc41      	bgt.n	800e81e <_dtoa_r+0x906>
 800e79a:	e063      	b.n	800e864 <_dtoa_r+0x94c>
 800e79c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e79e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e7a2:	e746      	b.n	800e632 <_dtoa_r+0x71a>
 800e7a4:	9b07      	ldr	r3, [sp, #28]
 800e7a6:	1e5c      	subs	r4, r3, #1
 800e7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7aa:	42a3      	cmp	r3, r4
 800e7ac:	bfbf      	itttt	lt
 800e7ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e7b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e7b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e7b4:	1ae3      	sublt	r3, r4, r3
 800e7b6:	bfb4      	ite	lt
 800e7b8:	18d2      	addlt	r2, r2, r3
 800e7ba:	1b1c      	subge	r4, r3, r4
 800e7bc:	9b07      	ldr	r3, [sp, #28]
 800e7be:	bfbc      	itt	lt
 800e7c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e7c2:	2400      	movlt	r4, #0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	bfb5      	itete	lt
 800e7c8:	eba8 0603 	sublt.w	r6, r8, r3
 800e7cc:	9b07      	ldrge	r3, [sp, #28]
 800e7ce:	2300      	movlt	r3, #0
 800e7d0:	4646      	movge	r6, r8
 800e7d2:	e730      	b.n	800e636 <_dtoa_r+0x71e>
 800e7d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e7d8:	4646      	mov	r6, r8
 800e7da:	e735      	b.n	800e648 <_dtoa_r+0x730>
 800e7dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7de:	e75c      	b.n	800e69a <_dtoa_r+0x782>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	e788      	b.n	800e6f6 <_dtoa_r+0x7de>
 800e7e4:	3fe00000 	.word	0x3fe00000
 800e7e8:	40240000 	.word	0x40240000
 800e7ec:	40140000 	.word	0x40140000
 800e7f0:	9b02      	ldr	r3, [sp, #8]
 800e7f2:	e780      	b.n	800e6f6 <_dtoa_r+0x7de>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7f8:	e782      	b.n	800e700 <_dtoa_r+0x7e8>
 800e7fa:	d099      	beq.n	800e730 <_dtoa_r+0x818>
 800e7fc:	9a08      	ldr	r2, [sp, #32]
 800e7fe:	331c      	adds	r3, #28
 800e800:	441a      	add	r2, r3
 800e802:	4498      	add	r8, r3
 800e804:	441e      	add	r6, r3
 800e806:	9208      	str	r2, [sp, #32]
 800e808:	e792      	b.n	800e730 <_dtoa_r+0x818>
 800e80a:	4603      	mov	r3, r0
 800e80c:	e7f6      	b.n	800e7fc <_dtoa_r+0x8e4>
 800e80e:	9b07      	ldr	r3, [sp, #28]
 800e810:	9704      	str	r7, [sp, #16]
 800e812:	2b00      	cmp	r3, #0
 800e814:	dc20      	bgt.n	800e858 <_dtoa_r+0x940>
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e81a:	2b02      	cmp	r3, #2
 800e81c:	dd1e      	ble.n	800e85c <_dtoa_r+0x944>
 800e81e:	9b00      	ldr	r3, [sp, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	f47f aec0 	bne.w	800e5a6 <_dtoa_r+0x68e>
 800e826:	4621      	mov	r1, r4
 800e828:	2205      	movs	r2, #5
 800e82a:	4658      	mov	r0, fp
 800e82c:	f000 fa9a 	bl	800ed64 <__multadd>
 800e830:	4601      	mov	r1, r0
 800e832:	4604      	mov	r4, r0
 800e834:	4648      	mov	r0, r9
 800e836:	f000 fcad 	bl	800f194 <__mcmp>
 800e83a:	2800      	cmp	r0, #0
 800e83c:	f77f aeb3 	ble.w	800e5a6 <_dtoa_r+0x68e>
 800e840:	4656      	mov	r6, sl
 800e842:	2331      	movs	r3, #49	@ 0x31
 800e844:	f806 3b01 	strb.w	r3, [r6], #1
 800e848:	9b04      	ldr	r3, [sp, #16]
 800e84a:	3301      	adds	r3, #1
 800e84c:	9304      	str	r3, [sp, #16]
 800e84e:	e6ae      	b.n	800e5ae <_dtoa_r+0x696>
 800e850:	9c07      	ldr	r4, [sp, #28]
 800e852:	9704      	str	r7, [sp, #16]
 800e854:	4625      	mov	r5, r4
 800e856:	e7f3      	b.n	800e840 <_dtoa_r+0x928>
 800e858:	9b07      	ldr	r3, [sp, #28]
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f000 8104 	beq.w	800ea6c <_dtoa_r+0xb54>
 800e864:	2e00      	cmp	r6, #0
 800e866:	dd05      	ble.n	800e874 <_dtoa_r+0x95c>
 800e868:	4629      	mov	r1, r5
 800e86a:	4632      	mov	r2, r6
 800e86c:	4658      	mov	r0, fp
 800e86e:	f000 fc25 	bl	800f0bc <__lshift>
 800e872:	4605      	mov	r5, r0
 800e874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e876:	2b00      	cmp	r3, #0
 800e878:	d05a      	beq.n	800e930 <_dtoa_r+0xa18>
 800e87a:	6869      	ldr	r1, [r5, #4]
 800e87c:	4658      	mov	r0, fp
 800e87e:	f000 fa0f 	bl	800eca0 <_Balloc>
 800e882:	4606      	mov	r6, r0
 800e884:	b928      	cbnz	r0, 800e892 <_dtoa_r+0x97a>
 800e886:	4b84      	ldr	r3, [pc, #528]	@ (800ea98 <_dtoa_r+0xb80>)
 800e888:	4602      	mov	r2, r0
 800e88a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e88e:	f7ff bb5a 	b.w	800df46 <_dtoa_r+0x2e>
 800e892:	692a      	ldr	r2, [r5, #16]
 800e894:	3202      	adds	r2, #2
 800e896:	0092      	lsls	r2, r2, #2
 800e898:	f105 010c 	add.w	r1, r5, #12
 800e89c:	300c      	adds	r0, #12
 800e89e:	f7ff fa92 	bl	800ddc6 <memcpy>
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	4631      	mov	r1, r6
 800e8a6:	4658      	mov	r0, fp
 800e8a8:	f000 fc08 	bl	800f0bc <__lshift>
 800e8ac:	f10a 0301 	add.w	r3, sl, #1
 800e8b0:	9307      	str	r3, [sp, #28]
 800e8b2:	9b00      	ldr	r3, [sp, #0]
 800e8b4:	4453      	add	r3, sl
 800e8b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8b8:	9b02      	ldr	r3, [sp, #8]
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	462f      	mov	r7, r5
 800e8c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8c2:	4605      	mov	r5, r0
 800e8c4:	9b07      	ldr	r3, [sp, #28]
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	4648      	mov	r0, r9
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	f7ff fa99 	bl	800de04 <quorem>
 800e8d2:	4639      	mov	r1, r7
 800e8d4:	9002      	str	r0, [sp, #8]
 800e8d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8da:	4648      	mov	r0, r9
 800e8dc:	f000 fc5a 	bl	800f194 <__mcmp>
 800e8e0:	462a      	mov	r2, r5
 800e8e2:	9008      	str	r0, [sp, #32]
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	4658      	mov	r0, fp
 800e8e8:	f000 fc70 	bl	800f1cc <__mdiff>
 800e8ec:	68c2      	ldr	r2, [r0, #12]
 800e8ee:	4606      	mov	r6, r0
 800e8f0:	bb02      	cbnz	r2, 800e934 <_dtoa_r+0xa1c>
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	4648      	mov	r0, r9
 800e8f6:	f000 fc4d 	bl	800f194 <__mcmp>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4658      	mov	r0, fp
 800e900:	920e      	str	r2, [sp, #56]	@ 0x38
 800e902:	f000 fa0d 	bl	800ed20 <_Bfree>
 800e906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e908:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e90a:	9e07      	ldr	r6, [sp, #28]
 800e90c:	ea43 0102 	orr.w	r1, r3, r2
 800e910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e912:	4319      	orrs	r1, r3
 800e914:	d110      	bne.n	800e938 <_dtoa_r+0xa20>
 800e916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e91a:	d029      	beq.n	800e970 <_dtoa_r+0xa58>
 800e91c:	9b08      	ldr	r3, [sp, #32]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	dd02      	ble.n	800e928 <_dtoa_r+0xa10>
 800e922:	9b02      	ldr	r3, [sp, #8]
 800e924:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e928:	9b00      	ldr	r3, [sp, #0]
 800e92a:	f883 8000 	strb.w	r8, [r3]
 800e92e:	e63f      	b.n	800e5b0 <_dtoa_r+0x698>
 800e930:	4628      	mov	r0, r5
 800e932:	e7bb      	b.n	800e8ac <_dtoa_r+0x994>
 800e934:	2201      	movs	r2, #1
 800e936:	e7e1      	b.n	800e8fc <_dtoa_r+0x9e4>
 800e938:	9b08      	ldr	r3, [sp, #32]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	db04      	blt.n	800e948 <_dtoa_r+0xa30>
 800e93e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e940:	430b      	orrs	r3, r1
 800e942:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e944:	430b      	orrs	r3, r1
 800e946:	d120      	bne.n	800e98a <_dtoa_r+0xa72>
 800e948:	2a00      	cmp	r2, #0
 800e94a:	dded      	ble.n	800e928 <_dtoa_r+0xa10>
 800e94c:	4649      	mov	r1, r9
 800e94e:	2201      	movs	r2, #1
 800e950:	4658      	mov	r0, fp
 800e952:	f000 fbb3 	bl	800f0bc <__lshift>
 800e956:	4621      	mov	r1, r4
 800e958:	4681      	mov	r9, r0
 800e95a:	f000 fc1b 	bl	800f194 <__mcmp>
 800e95e:	2800      	cmp	r0, #0
 800e960:	dc03      	bgt.n	800e96a <_dtoa_r+0xa52>
 800e962:	d1e1      	bne.n	800e928 <_dtoa_r+0xa10>
 800e964:	f018 0f01 	tst.w	r8, #1
 800e968:	d0de      	beq.n	800e928 <_dtoa_r+0xa10>
 800e96a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e96e:	d1d8      	bne.n	800e922 <_dtoa_r+0xa0a>
 800e970:	9a00      	ldr	r2, [sp, #0]
 800e972:	2339      	movs	r3, #57	@ 0x39
 800e974:	7013      	strb	r3, [r2, #0]
 800e976:	4633      	mov	r3, r6
 800e978:	461e      	mov	r6, r3
 800e97a:	3b01      	subs	r3, #1
 800e97c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e980:	2a39      	cmp	r2, #57	@ 0x39
 800e982:	d052      	beq.n	800ea2a <_dtoa_r+0xb12>
 800e984:	3201      	adds	r2, #1
 800e986:	701a      	strb	r2, [r3, #0]
 800e988:	e612      	b.n	800e5b0 <_dtoa_r+0x698>
 800e98a:	2a00      	cmp	r2, #0
 800e98c:	dd07      	ble.n	800e99e <_dtoa_r+0xa86>
 800e98e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e992:	d0ed      	beq.n	800e970 <_dtoa_r+0xa58>
 800e994:	9a00      	ldr	r2, [sp, #0]
 800e996:	f108 0301 	add.w	r3, r8, #1
 800e99a:	7013      	strb	r3, [r2, #0]
 800e99c:	e608      	b.n	800e5b0 <_dtoa_r+0x698>
 800e99e:	9b07      	ldr	r3, [sp, #28]
 800e9a0:	9a07      	ldr	r2, [sp, #28]
 800e9a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e9a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d028      	beq.n	800e9fe <_dtoa_r+0xae6>
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	220a      	movs	r2, #10
 800e9b2:	4658      	mov	r0, fp
 800e9b4:	f000 f9d6 	bl	800ed64 <__multadd>
 800e9b8:	42af      	cmp	r7, r5
 800e9ba:	4681      	mov	r9, r0
 800e9bc:	f04f 0300 	mov.w	r3, #0
 800e9c0:	f04f 020a 	mov.w	r2, #10
 800e9c4:	4639      	mov	r1, r7
 800e9c6:	4658      	mov	r0, fp
 800e9c8:	d107      	bne.n	800e9da <_dtoa_r+0xac2>
 800e9ca:	f000 f9cb 	bl	800ed64 <__multadd>
 800e9ce:	4607      	mov	r7, r0
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	9b07      	ldr	r3, [sp, #28]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	9307      	str	r3, [sp, #28]
 800e9d8:	e774      	b.n	800e8c4 <_dtoa_r+0x9ac>
 800e9da:	f000 f9c3 	bl	800ed64 <__multadd>
 800e9de:	4629      	mov	r1, r5
 800e9e0:	4607      	mov	r7, r0
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	220a      	movs	r2, #10
 800e9e6:	4658      	mov	r0, fp
 800e9e8:	f000 f9bc 	bl	800ed64 <__multadd>
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	e7f0      	b.n	800e9d2 <_dtoa_r+0xaba>
 800e9f0:	9b00      	ldr	r3, [sp, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	bfcc      	ite	gt
 800e9f6:	461e      	movgt	r6, r3
 800e9f8:	2601      	movle	r6, #1
 800e9fa:	4456      	add	r6, sl
 800e9fc:	2700      	movs	r7, #0
 800e9fe:	4649      	mov	r1, r9
 800ea00:	2201      	movs	r2, #1
 800ea02:	4658      	mov	r0, fp
 800ea04:	f000 fb5a 	bl	800f0bc <__lshift>
 800ea08:	4621      	mov	r1, r4
 800ea0a:	4681      	mov	r9, r0
 800ea0c:	f000 fbc2 	bl	800f194 <__mcmp>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	dcb0      	bgt.n	800e976 <_dtoa_r+0xa5e>
 800ea14:	d102      	bne.n	800ea1c <_dtoa_r+0xb04>
 800ea16:	f018 0f01 	tst.w	r8, #1
 800ea1a:	d1ac      	bne.n	800e976 <_dtoa_r+0xa5e>
 800ea1c:	4633      	mov	r3, r6
 800ea1e:	461e      	mov	r6, r3
 800ea20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea24:	2a30      	cmp	r2, #48	@ 0x30
 800ea26:	d0fa      	beq.n	800ea1e <_dtoa_r+0xb06>
 800ea28:	e5c2      	b.n	800e5b0 <_dtoa_r+0x698>
 800ea2a:	459a      	cmp	sl, r3
 800ea2c:	d1a4      	bne.n	800e978 <_dtoa_r+0xa60>
 800ea2e:	9b04      	ldr	r3, [sp, #16]
 800ea30:	3301      	adds	r3, #1
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	2331      	movs	r3, #49	@ 0x31
 800ea36:	f88a 3000 	strb.w	r3, [sl]
 800ea3a:	e5b9      	b.n	800e5b0 <_dtoa_r+0x698>
 800ea3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ea9c <_dtoa_r+0xb84>
 800ea42:	b11b      	cbz	r3, 800ea4c <_dtoa_r+0xb34>
 800ea44:	f10a 0308 	add.w	r3, sl, #8
 800ea48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea4a:	6013      	str	r3, [r2, #0]
 800ea4c:	4650      	mov	r0, sl
 800ea4e:	b019      	add	sp, #100	@ 0x64
 800ea50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	f77f ae37 	ble.w	800e6ca <_dtoa_r+0x7b2>
 800ea5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea60:	2001      	movs	r0, #1
 800ea62:	e655      	b.n	800e710 <_dtoa_r+0x7f8>
 800ea64:	9b00      	ldr	r3, [sp, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f77f aed6 	ble.w	800e818 <_dtoa_r+0x900>
 800ea6c:	4656      	mov	r6, sl
 800ea6e:	4621      	mov	r1, r4
 800ea70:	4648      	mov	r0, r9
 800ea72:	f7ff f9c7 	bl	800de04 <quorem>
 800ea76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea7a:	f806 8b01 	strb.w	r8, [r6], #1
 800ea7e:	9b00      	ldr	r3, [sp, #0]
 800ea80:	eba6 020a 	sub.w	r2, r6, sl
 800ea84:	4293      	cmp	r3, r2
 800ea86:	ddb3      	ble.n	800e9f0 <_dtoa_r+0xad8>
 800ea88:	4649      	mov	r1, r9
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	220a      	movs	r2, #10
 800ea8e:	4658      	mov	r0, fp
 800ea90:	f000 f968 	bl	800ed64 <__multadd>
 800ea94:	4681      	mov	r9, r0
 800ea96:	e7ea      	b.n	800ea6e <_dtoa_r+0xb56>
 800ea98:	080125d0 	.word	0x080125d0
 800ea9c:	08012554 	.word	0x08012554

0800eaa0 <_free_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4605      	mov	r5, r0
 800eaa4:	2900      	cmp	r1, #0
 800eaa6:	d041      	beq.n	800eb2c <_free_r+0x8c>
 800eaa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaac:	1f0c      	subs	r4, r1, #4
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	bfb8      	it	lt
 800eab2:	18e4      	addlt	r4, r4, r3
 800eab4:	f000 f8e8 	bl	800ec88 <__malloc_lock>
 800eab8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb30 <_free_r+0x90>)
 800eaba:	6813      	ldr	r3, [r2, #0]
 800eabc:	b933      	cbnz	r3, 800eacc <_free_r+0x2c>
 800eabe:	6063      	str	r3, [r4, #4]
 800eac0:	6014      	str	r4, [r2, #0]
 800eac2:	4628      	mov	r0, r5
 800eac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eac8:	f000 b8e4 	b.w	800ec94 <__malloc_unlock>
 800eacc:	42a3      	cmp	r3, r4
 800eace:	d908      	bls.n	800eae2 <_free_r+0x42>
 800ead0:	6820      	ldr	r0, [r4, #0]
 800ead2:	1821      	adds	r1, r4, r0
 800ead4:	428b      	cmp	r3, r1
 800ead6:	bf01      	itttt	eq
 800ead8:	6819      	ldreq	r1, [r3, #0]
 800eada:	685b      	ldreq	r3, [r3, #4]
 800eadc:	1809      	addeq	r1, r1, r0
 800eade:	6021      	streq	r1, [r4, #0]
 800eae0:	e7ed      	b.n	800eabe <_free_r+0x1e>
 800eae2:	461a      	mov	r2, r3
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	b10b      	cbz	r3, 800eaec <_free_r+0x4c>
 800eae8:	42a3      	cmp	r3, r4
 800eaea:	d9fa      	bls.n	800eae2 <_free_r+0x42>
 800eaec:	6811      	ldr	r1, [r2, #0]
 800eaee:	1850      	adds	r0, r2, r1
 800eaf0:	42a0      	cmp	r0, r4
 800eaf2:	d10b      	bne.n	800eb0c <_free_r+0x6c>
 800eaf4:	6820      	ldr	r0, [r4, #0]
 800eaf6:	4401      	add	r1, r0
 800eaf8:	1850      	adds	r0, r2, r1
 800eafa:	4283      	cmp	r3, r0
 800eafc:	6011      	str	r1, [r2, #0]
 800eafe:	d1e0      	bne.n	800eac2 <_free_r+0x22>
 800eb00:	6818      	ldr	r0, [r3, #0]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	6053      	str	r3, [r2, #4]
 800eb06:	4408      	add	r0, r1
 800eb08:	6010      	str	r0, [r2, #0]
 800eb0a:	e7da      	b.n	800eac2 <_free_r+0x22>
 800eb0c:	d902      	bls.n	800eb14 <_free_r+0x74>
 800eb0e:	230c      	movs	r3, #12
 800eb10:	602b      	str	r3, [r5, #0]
 800eb12:	e7d6      	b.n	800eac2 <_free_r+0x22>
 800eb14:	6820      	ldr	r0, [r4, #0]
 800eb16:	1821      	adds	r1, r4, r0
 800eb18:	428b      	cmp	r3, r1
 800eb1a:	bf04      	itt	eq
 800eb1c:	6819      	ldreq	r1, [r3, #0]
 800eb1e:	685b      	ldreq	r3, [r3, #4]
 800eb20:	6063      	str	r3, [r4, #4]
 800eb22:	bf04      	itt	eq
 800eb24:	1809      	addeq	r1, r1, r0
 800eb26:	6021      	streq	r1, [r4, #0]
 800eb28:	6054      	str	r4, [r2, #4]
 800eb2a:	e7ca      	b.n	800eac2 <_free_r+0x22>
 800eb2c:	bd38      	pop	{r3, r4, r5, pc}
 800eb2e:	bf00      	nop
 800eb30:	2000268c 	.word	0x2000268c

0800eb34 <malloc>:
 800eb34:	4b02      	ldr	r3, [pc, #8]	@ (800eb40 <malloc+0xc>)
 800eb36:	4601      	mov	r1, r0
 800eb38:	6818      	ldr	r0, [r3, #0]
 800eb3a:	f000 b825 	b.w	800eb88 <_malloc_r>
 800eb3e:	bf00      	nop
 800eb40:	20000134 	.word	0x20000134

0800eb44 <sbrk_aligned>:
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	4e0f      	ldr	r6, [pc, #60]	@ (800eb84 <sbrk_aligned+0x40>)
 800eb48:	460c      	mov	r4, r1
 800eb4a:	6831      	ldr	r1, [r6, #0]
 800eb4c:	4605      	mov	r5, r0
 800eb4e:	b911      	cbnz	r1, 800eb56 <sbrk_aligned+0x12>
 800eb50:	f000 fe46 	bl	800f7e0 <_sbrk_r>
 800eb54:	6030      	str	r0, [r6, #0]
 800eb56:	4621      	mov	r1, r4
 800eb58:	4628      	mov	r0, r5
 800eb5a:	f000 fe41 	bl	800f7e0 <_sbrk_r>
 800eb5e:	1c43      	adds	r3, r0, #1
 800eb60:	d103      	bne.n	800eb6a <sbrk_aligned+0x26>
 800eb62:	f04f 34ff 	mov.w	r4, #4294967295
 800eb66:	4620      	mov	r0, r4
 800eb68:	bd70      	pop	{r4, r5, r6, pc}
 800eb6a:	1cc4      	adds	r4, r0, #3
 800eb6c:	f024 0403 	bic.w	r4, r4, #3
 800eb70:	42a0      	cmp	r0, r4
 800eb72:	d0f8      	beq.n	800eb66 <sbrk_aligned+0x22>
 800eb74:	1a21      	subs	r1, r4, r0
 800eb76:	4628      	mov	r0, r5
 800eb78:	f000 fe32 	bl	800f7e0 <_sbrk_r>
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	d1f2      	bne.n	800eb66 <sbrk_aligned+0x22>
 800eb80:	e7ef      	b.n	800eb62 <sbrk_aligned+0x1e>
 800eb82:	bf00      	nop
 800eb84:	20002688 	.word	0x20002688

0800eb88 <_malloc_r>:
 800eb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb8c:	1ccd      	adds	r5, r1, #3
 800eb8e:	f025 0503 	bic.w	r5, r5, #3
 800eb92:	3508      	adds	r5, #8
 800eb94:	2d0c      	cmp	r5, #12
 800eb96:	bf38      	it	cc
 800eb98:	250c      	movcc	r5, #12
 800eb9a:	2d00      	cmp	r5, #0
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	db01      	blt.n	800eba4 <_malloc_r+0x1c>
 800eba0:	42a9      	cmp	r1, r5
 800eba2:	d904      	bls.n	800ebae <_malloc_r+0x26>
 800eba4:	230c      	movs	r3, #12
 800eba6:	6033      	str	r3, [r6, #0]
 800eba8:	2000      	movs	r0, #0
 800ebaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec84 <_malloc_r+0xfc>
 800ebb2:	f000 f869 	bl	800ec88 <__malloc_lock>
 800ebb6:	f8d8 3000 	ldr.w	r3, [r8]
 800ebba:	461c      	mov	r4, r3
 800ebbc:	bb44      	cbnz	r4, 800ec10 <_malloc_r+0x88>
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f7ff ffbf 	bl	800eb44 <sbrk_aligned>
 800ebc6:	1c43      	adds	r3, r0, #1
 800ebc8:	4604      	mov	r4, r0
 800ebca:	d158      	bne.n	800ec7e <_malloc_r+0xf6>
 800ebcc:	f8d8 4000 	ldr.w	r4, [r8]
 800ebd0:	4627      	mov	r7, r4
 800ebd2:	2f00      	cmp	r7, #0
 800ebd4:	d143      	bne.n	800ec5e <_malloc_r+0xd6>
 800ebd6:	2c00      	cmp	r4, #0
 800ebd8:	d04b      	beq.n	800ec72 <_malloc_r+0xea>
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	4639      	mov	r1, r7
 800ebde:	4630      	mov	r0, r6
 800ebe0:	eb04 0903 	add.w	r9, r4, r3
 800ebe4:	f000 fdfc 	bl	800f7e0 <_sbrk_r>
 800ebe8:	4581      	cmp	r9, r0
 800ebea:	d142      	bne.n	800ec72 <_malloc_r+0xea>
 800ebec:	6821      	ldr	r1, [r4, #0]
 800ebee:	1a6d      	subs	r5, r5, r1
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7ff ffa6 	bl	800eb44 <sbrk_aligned>
 800ebf8:	3001      	adds	r0, #1
 800ebfa:	d03a      	beq.n	800ec72 <_malloc_r+0xea>
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	442b      	add	r3, r5
 800ec00:	6023      	str	r3, [r4, #0]
 800ec02:	f8d8 3000 	ldr.w	r3, [r8]
 800ec06:	685a      	ldr	r2, [r3, #4]
 800ec08:	bb62      	cbnz	r2, 800ec64 <_malloc_r+0xdc>
 800ec0a:	f8c8 7000 	str.w	r7, [r8]
 800ec0e:	e00f      	b.n	800ec30 <_malloc_r+0xa8>
 800ec10:	6822      	ldr	r2, [r4, #0]
 800ec12:	1b52      	subs	r2, r2, r5
 800ec14:	d420      	bmi.n	800ec58 <_malloc_r+0xd0>
 800ec16:	2a0b      	cmp	r2, #11
 800ec18:	d917      	bls.n	800ec4a <_malloc_r+0xc2>
 800ec1a:	1961      	adds	r1, r4, r5
 800ec1c:	42a3      	cmp	r3, r4
 800ec1e:	6025      	str	r5, [r4, #0]
 800ec20:	bf18      	it	ne
 800ec22:	6059      	strne	r1, [r3, #4]
 800ec24:	6863      	ldr	r3, [r4, #4]
 800ec26:	bf08      	it	eq
 800ec28:	f8c8 1000 	streq.w	r1, [r8]
 800ec2c:	5162      	str	r2, [r4, r5]
 800ec2e:	604b      	str	r3, [r1, #4]
 800ec30:	4630      	mov	r0, r6
 800ec32:	f000 f82f 	bl	800ec94 <__malloc_unlock>
 800ec36:	f104 000b 	add.w	r0, r4, #11
 800ec3a:	1d23      	adds	r3, r4, #4
 800ec3c:	f020 0007 	bic.w	r0, r0, #7
 800ec40:	1ac2      	subs	r2, r0, r3
 800ec42:	bf1c      	itt	ne
 800ec44:	1a1b      	subne	r3, r3, r0
 800ec46:	50a3      	strne	r3, [r4, r2]
 800ec48:	e7af      	b.n	800ebaa <_malloc_r+0x22>
 800ec4a:	6862      	ldr	r2, [r4, #4]
 800ec4c:	42a3      	cmp	r3, r4
 800ec4e:	bf0c      	ite	eq
 800ec50:	f8c8 2000 	streq.w	r2, [r8]
 800ec54:	605a      	strne	r2, [r3, #4]
 800ec56:	e7eb      	b.n	800ec30 <_malloc_r+0xa8>
 800ec58:	4623      	mov	r3, r4
 800ec5a:	6864      	ldr	r4, [r4, #4]
 800ec5c:	e7ae      	b.n	800ebbc <_malloc_r+0x34>
 800ec5e:	463c      	mov	r4, r7
 800ec60:	687f      	ldr	r7, [r7, #4]
 800ec62:	e7b6      	b.n	800ebd2 <_malloc_r+0x4a>
 800ec64:	461a      	mov	r2, r3
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	42a3      	cmp	r3, r4
 800ec6a:	d1fb      	bne.n	800ec64 <_malloc_r+0xdc>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	6053      	str	r3, [r2, #4]
 800ec70:	e7de      	b.n	800ec30 <_malloc_r+0xa8>
 800ec72:	230c      	movs	r3, #12
 800ec74:	6033      	str	r3, [r6, #0]
 800ec76:	4630      	mov	r0, r6
 800ec78:	f000 f80c 	bl	800ec94 <__malloc_unlock>
 800ec7c:	e794      	b.n	800eba8 <_malloc_r+0x20>
 800ec7e:	6005      	str	r5, [r0, #0]
 800ec80:	e7d6      	b.n	800ec30 <_malloc_r+0xa8>
 800ec82:	bf00      	nop
 800ec84:	2000268c 	.word	0x2000268c

0800ec88 <__malloc_lock>:
 800ec88:	4801      	ldr	r0, [pc, #4]	@ (800ec90 <__malloc_lock+0x8>)
 800ec8a:	f7ff b89a 	b.w	800ddc2 <__retarget_lock_acquire_recursive>
 800ec8e:	bf00      	nop
 800ec90:	20002684 	.word	0x20002684

0800ec94 <__malloc_unlock>:
 800ec94:	4801      	ldr	r0, [pc, #4]	@ (800ec9c <__malloc_unlock+0x8>)
 800ec96:	f7ff b895 	b.w	800ddc4 <__retarget_lock_release_recursive>
 800ec9a:	bf00      	nop
 800ec9c:	20002684 	.word	0x20002684

0800eca0 <_Balloc>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	69c6      	ldr	r6, [r0, #28]
 800eca4:	4604      	mov	r4, r0
 800eca6:	460d      	mov	r5, r1
 800eca8:	b976      	cbnz	r6, 800ecc8 <_Balloc+0x28>
 800ecaa:	2010      	movs	r0, #16
 800ecac:	f7ff ff42 	bl	800eb34 <malloc>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	61e0      	str	r0, [r4, #28]
 800ecb4:	b920      	cbnz	r0, 800ecc0 <_Balloc+0x20>
 800ecb6:	4b18      	ldr	r3, [pc, #96]	@ (800ed18 <_Balloc+0x78>)
 800ecb8:	4818      	ldr	r0, [pc, #96]	@ (800ed1c <_Balloc+0x7c>)
 800ecba:	216b      	movs	r1, #107	@ 0x6b
 800ecbc:	f000 fda0 	bl	800f800 <__assert_func>
 800ecc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecc4:	6006      	str	r6, [r0, #0]
 800ecc6:	60c6      	str	r6, [r0, #12]
 800ecc8:	69e6      	ldr	r6, [r4, #28]
 800ecca:	68f3      	ldr	r3, [r6, #12]
 800eccc:	b183      	cbz	r3, 800ecf0 <_Balloc+0x50>
 800ecce:	69e3      	ldr	r3, [r4, #28]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecd6:	b9b8      	cbnz	r0, 800ed08 <_Balloc+0x68>
 800ecd8:	2101      	movs	r1, #1
 800ecda:	fa01 f605 	lsl.w	r6, r1, r5
 800ecde:	1d72      	adds	r2, r6, #5
 800ece0:	0092      	lsls	r2, r2, #2
 800ece2:	4620      	mov	r0, r4
 800ece4:	f000 fdaa 	bl	800f83c <_calloc_r>
 800ece8:	b160      	cbz	r0, 800ed04 <_Balloc+0x64>
 800ecea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ecee:	e00e      	b.n	800ed0e <_Balloc+0x6e>
 800ecf0:	2221      	movs	r2, #33	@ 0x21
 800ecf2:	2104      	movs	r1, #4
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f000 fda1 	bl	800f83c <_calloc_r>
 800ecfa:	69e3      	ldr	r3, [r4, #28]
 800ecfc:	60f0      	str	r0, [r6, #12]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d1e4      	bne.n	800ecce <_Balloc+0x2e>
 800ed04:	2000      	movs	r0, #0
 800ed06:	bd70      	pop	{r4, r5, r6, pc}
 800ed08:	6802      	ldr	r2, [r0, #0]
 800ed0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed0e:	2300      	movs	r3, #0
 800ed10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed14:	e7f7      	b.n	800ed06 <_Balloc+0x66>
 800ed16:	bf00      	nop
 800ed18:	08012561 	.word	0x08012561
 800ed1c:	080125e1 	.word	0x080125e1

0800ed20 <_Bfree>:
 800ed20:	b570      	push	{r4, r5, r6, lr}
 800ed22:	69c6      	ldr	r6, [r0, #28]
 800ed24:	4605      	mov	r5, r0
 800ed26:	460c      	mov	r4, r1
 800ed28:	b976      	cbnz	r6, 800ed48 <_Bfree+0x28>
 800ed2a:	2010      	movs	r0, #16
 800ed2c:	f7ff ff02 	bl	800eb34 <malloc>
 800ed30:	4602      	mov	r2, r0
 800ed32:	61e8      	str	r0, [r5, #28]
 800ed34:	b920      	cbnz	r0, 800ed40 <_Bfree+0x20>
 800ed36:	4b09      	ldr	r3, [pc, #36]	@ (800ed5c <_Bfree+0x3c>)
 800ed38:	4809      	ldr	r0, [pc, #36]	@ (800ed60 <_Bfree+0x40>)
 800ed3a:	218f      	movs	r1, #143	@ 0x8f
 800ed3c:	f000 fd60 	bl	800f800 <__assert_func>
 800ed40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed44:	6006      	str	r6, [r0, #0]
 800ed46:	60c6      	str	r6, [r0, #12]
 800ed48:	b13c      	cbz	r4, 800ed5a <_Bfree+0x3a>
 800ed4a:	69eb      	ldr	r3, [r5, #28]
 800ed4c:	6862      	ldr	r2, [r4, #4]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed54:	6021      	str	r1, [r4, #0]
 800ed56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
 800ed5c:	08012561 	.word	0x08012561
 800ed60:	080125e1 	.word	0x080125e1

0800ed64 <__multadd>:
 800ed64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed68:	690d      	ldr	r5, [r1, #16]
 800ed6a:	4607      	mov	r7, r0
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	461e      	mov	r6, r3
 800ed70:	f101 0c14 	add.w	ip, r1, #20
 800ed74:	2000      	movs	r0, #0
 800ed76:	f8dc 3000 	ldr.w	r3, [ip]
 800ed7a:	b299      	uxth	r1, r3
 800ed7c:	fb02 6101 	mla	r1, r2, r1, r6
 800ed80:	0c1e      	lsrs	r6, r3, #16
 800ed82:	0c0b      	lsrs	r3, r1, #16
 800ed84:	fb02 3306 	mla	r3, r2, r6, r3
 800ed88:	b289      	uxth	r1, r1
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed90:	4285      	cmp	r5, r0
 800ed92:	f84c 1b04 	str.w	r1, [ip], #4
 800ed96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed9a:	dcec      	bgt.n	800ed76 <__multadd+0x12>
 800ed9c:	b30e      	cbz	r6, 800ede2 <__multadd+0x7e>
 800ed9e:	68a3      	ldr	r3, [r4, #8]
 800eda0:	42ab      	cmp	r3, r5
 800eda2:	dc19      	bgt.n	800edd8 <__multadd+0x74>
 800eda4:	6861      	ldr	r1, [r4, #4]
 800eda6:	4638      	mov	r0, r7
 800eda8:	3101      	adds	r1, #1
 800edaa:	f7ff ff79 	bl	800eca0 <_Balloc>
 800edae:	4680      	mov	r8, r0
 800edb0:	b928      	cbnz	r0, 800edbe <__multadd+0x5a>
 800edb2:	4602      	mov	r2, r0
 800edb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ede8 <__multadd+0x84>)
 800edb6:	480d      	ldr	r0, [pc, #52]	@ (800edec <__multadd+0x88>)
 800edb8:	21ba      	movs	r1, #186	@ 0xba
 800edba:	f000 fd21 	bl	800f800 <__assert_func>
 800edbe:	6922      	ldr	r2, [r4, #16]
 800edc0:	3202      	adds	r2, #2
 800edc2:	f104 010c 	add.w	r1, r4, #12
 800edc6:	0092      	lsls	r2, r2, #2
 800edc8:	300c      	adds	r0, #12
 800edca:	f7fe fffc 	bl	800ddc6 <memcpy>
 800edce:	4621      	mov	r1, r4
 800edd0:	4638      	mov	r0, r7
 800edd2:	f7ff ffa5 	bl	800ed20 <_Bfree>
 800edd6:	4644      	mov	r4, r8
 800edd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eddc:	3501      	adds	r5, #1
 800edde:	615e      	str	r6, [r3, #20]
 800ede0:	6125      	str	r5, [r4, #16]
 800ede2:	4620      	mov	r0, r4
 800ede4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede8:	080125d0 	.word	0x080125d0
 800edec:	080125e1 	.word	0x080125e1

0800edf0 <__hi0bits>:
 800edf0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800edf4:	4603      	mov	r3, r0
 800edf6:	bf36      	itet	cc
 800edf8:	0403      	lslcc	r3, r0, #16
 800edfa:	2000      	movcs	r0, #0
 800edfc:	2010      	movcc	r0, #16
 800edfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ee02:	bf3c      	itt	cc
 800ee04:	021b      	lslcc	r3, r3, #8
 800ee06:	3008      	addcc	r0, #8
 800ee08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee0c:	bf3c      	itt	cc
 800ee0e:	011b      	lslcc	r3, r3, #4
 800ee10:	3004      	addcc	r0, #4
 800ee12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee16:	bf3c      	itt	cc
 800ee18:	009b      	lslcc	r3, r3, #2
 800ee1a:	3002      	addcc	r0, #2
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	db05      	blt.n	800ee2c <__hi0bits+0x3c>
 800ee20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ee24:	f100 0001 	add.w	r0, r0, #1
 800ee28:	bf08      	it	eq
 800ee2a:	2020      	moveq	r0, #32
 800ee2c:	4770      	bx	lr

0800ee2e <__lo0bits>:
 800ee2e:	6803      	ldr	r3, [r0, #0]
 800ee30:	4602      	mov	r2, r0
 800ee32:	f013 0007 	ands.w	r0, r3, #7
 800ee36:	d00b      	beq.n	800ee50 <__lo0bits+0x22>
 800ee38:	07d9      	lsls	r1, r3, #31
 800ee3a:	d421      	bmi.n	800ee80 <__lo0bits+0x52>
 800ee3c:	0798      	lsls	r0, r3, #30
 800ee3e:	bf49      	itett	mi
 800ee40:	085b      	lsrmi	r3, r3, #1
 800ee42:	089b      	lsrpl	r3, r3, #2
 800ee44:	2001      	movmi	r0, #1
 800ee46:	6013      	strmi	r3, [r2, #0]
 800ee48:	bf5c      	itt	pl
 800ee4a:	6013      	strpl	r3, [r2, #0]
 800ee4c:	2002      	movpl	r0, #2
 800ee4e:	4770      	bx	lr
 800ee50:	b299      	uxth	r1, r3
 800ee52:	b909      	cbnz	r1, 800ee58 <__lo0bits+0x2a>
 800ee54:	0c1b      	lsrs	r3, r3, #16
 800ee56:	2010      	movs	r0, #16
 800ee58:	b2d9      	uxtb	r1, r3
 800ee5a:	b909      	cbnz	r1, 800ee60 <__lo0bits+0x32>
 800ee5c:	3008      	adds	r0, #8
 800ee5e:	0a1b      	lsrs	r3, r3, #8
 800ee60:	0719      	lsls	r1, r3, #28
 800ee62:	bf04      	itt	eq
 800ee64:	091b      	lsreq	r3, r3, #4
 800ee66:	3004      	addeq	r0, #4
 800ee68:	0799      	lsls	r1, r3, #30
 800ee6a:	bf04      	itt	eq
 800ee6c:	089b      	lsreq	r3, r3, #2
 800ee6e:	3002      	addeq	r0, #2
 800ee70:	07d9      	lsls	r1, r3, #31
 800ee72:	d403      	bmi.n	800ee7c <__lo0bits+0x4e>
 800ee74:	085b      	lsrs	r3, r3, #1
 800ee76:	f100 0001 	add.w	r0, r0, #1
 800ee7a:	d003      	beq.n	800ee84 <__lo0bits+0x56>
 800ee7c:	6013      	str	r3, [r2, #0]
 800ee7e:	4770      	bx	lr
 800ee80:	2000      	movs	r0, #0
 800ee82:	4770      	bx	lr
 800ee84:	2020      	movs	r0, #32
 800ee86:	4770      	bx	lr

0800ee88 <__i2b>:
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	f7ff ff07 	bl	800eca0 <_Balloc>
 800ee92:	4602      	mov	r2, r0
 800ee94:	b928      	cbnz	r0, 800eea2 <__i2b+0x1a>
 800ee96:	4b05      	ldr	r3, [pc, #20]	@ (800eeac <__i2b+0x24>)
 800ee98:	4805      	ldr	r0, [pc, #20]	@ (800eeb0 <__i2b+0x28>)
 800ee9a:	f240 1145 	movw	r1, #325	@ 0x145
 800ee9e:	f000 fcaf 	bl	800f800 <__assert_func>
 800eea2:	2301      	movs	r3, #1
 800eea4:	6144      	str	r4, [r0, #20]
 800eea6:	6103      	str	r3, [r0, #16]
 800eea8:	bd10      	pop	{r4, pc}
 800eeaa:	bf00      	nop
 800eeac:	080125d0 	.word	0x080125d0
 800eeb0:	080125e1 	.word	0x080125e1

0800eeb4 <__multiply>:
 800eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb8:	4614      	mov	r4, r2
 800eeba:	690a      	ldr	r2, [r1, #16]
 800eebc:	6923      	ldr	r3, [r4, #16]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	bfa8      	it	ge
 800eec2:	4623      	movge	r3, r4
 800eec4:	460f      	mov	r7, r1
 800eec6:	bfa4      	itt	ge
 800eec8:	460c      	movge	r4, r1
 800eeca:	461f      	movge	r7, r3
 800eecc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eed0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eed4:	68a3      	ldr	r3, [r4, #8]
 800eed6:	6861      	ldr	r1, [r4, #4]
 800eed8:	eb0a 0609 	add.w	r6, sl, r9
 800eedc:	42b3      	cmp	r3, r6
 800eede:	b085      	sub	sp, #20
 800eee0:	bfb8      	it	lt
 800eee2:	3101      	addlt	r1, #1
 800eee4:	f7ff fedc 	bl	800eca0 <_Balloc>
 800eee8:	b930      	cbnz	r0, 800eef8 <__multiply+0x44>
 800eeea:	4602      	mov	r2, r0
 800eeec:	4b44      	ldr	r3, [pc, #272]	@ (800f000 <__multiply+0x14c>)
 800eeee:	4845      	ldr	r0, [pc, #276]	@ (800f004 <__multiply+0x150>)
 800eef0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eef4:	f000 fc84 	bl	800f800 <__assert_func>
 800eef8:	f100 0514 	add.w	r5, r0, #20
 800eefc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef00:	462b      	mov	r3, r5
 800ef02:	2200      	movs	r2, #0
 800ef04:	4543      	cmp	r3, r8
 800ef06:	d321      	bcc.n	800ef4c <__multiply+0x98>
 800ef08:	f107 0114 	add.w	r1, r7, #20
 800ef0c:	f104 0214 	add.w	r2, r4, #20
 800ef10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ef14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ef18:	9302      	str	r3, [sp, #8]
 800ef1a:	1b13      	subs	r3, r2, r4
 800ef1c:	3b15      	subs	r3, #21
 800ef1e:	f023 0303 	bic.w	r3, r3, #3
 800ef22:	3304      	adds	r3, #4
 800ef24:	f104 0715 	add.w	r7, r4, #21
 800ef28:	42ba      	cmp	r2, r7
 800ef2a:	bf38      	it	cc
 800ef2c:	2304      	movcc	r3, #4
 800ef2e:	9301      	str	r3, [sp, #4]
 800ef30:	9b02      	ldr	r3, [sp, #8]
 800ef32:	9103      	str	r1, [sp, #12]
 800ef34:	428b      	cmp	r3, r1
 800ef36:	d80c      	bhi.n	800ef52 <__multiply+0x9e>
 800ef38:	2e00      	cmp	r6, #0
 800ef3a:	dd03      	ble.n	800ef44 <__multiply+0x90>
 800ef3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d05b      	beq.n	800effc <__multiply+0x148>
 800ef44:	6106      	str	r6, [r0, #16]
 800ef46:	b005      	add	sp, #20
 800ef48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4c:	f843 2b04 	str.w	r2, [r3], #4
 800ef50:	e7d8      	b.n	800ef04 <__multiply+0x50>
 800ef52:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef56:	f1ba 0f00 	cmp.w	sl, #0
 800ef5a:	d024      	beq.n	800efa6 <__multiply+0xf2>
 800ef5c:	f104 0e14 	add.w	lr, r4, #20
 800ef60:	46a9      	mov	r9, r5
 800ef62:	f04f 0c00 	mov.w	ip, #0
 800ef66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef6a:	f8d9 3000 	ldr.w	r3, [r9]
 800ef6e:	fa1f fb87 	uxth.w	fp, r7
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	fb0a 330b 	mla	r3, sl, fp, r3
 800ef78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ef7c:	f8d9 7000 	ldr.w	r7, [r9]
 800ef80:	4463      	add	r3, ip
 800ef82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef86:	fb0a c70b 	mla	r7, sl, fp, ip
 800ef8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ef94:	4572      	cmp	r2, lr
 800ef96:	f849 3b04 	str.w	r3, [r9], #4
 800ef9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef9e:	d8e2      	bhi.n	800ef66 <__multiply+0xb2>
 800efa0:	9b01      	ldr	r3, [sp, #4]
 800efa2:	f845 c003 	str.w	ip, [r5, r3]
 800efa6:	9b03      	ldr	r3, [sp, #12]
 800efa8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800efac:	3104      	adds	r1, #4
 800efae:	f1b9 0f00 	cmp.w	r9, #0
 800efb2:	d021      	beq.n	800eff8 <__multiply+0x144>
 800efb4:	682b      	ldr	r3, [r5, #0]
 800efb6:	f104 0c14 	add.w	ip, r4, #20
 800efba:	46ae      	mov	lr, r5
 800efbc:	f04f 0a00 	mov.w	sl, #0
 800efc0:	f8bc b000 	ldrh.w	fp, [ip]
 800efc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800efc8:	fb09 770b 	mla	r7, r9, fp, r7
 800efcc:	4457      	add	r7, sl
 800efce:	b29b      	uxth	r3, r3
 800efd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800efd4:	f84e 3b04 	str.w	r3, [lr], #4
 800efd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800efdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efe0:	f8be 3000 	ldrh.w	r3, [lr]
 800efe4:	fb09 330a 	mla	r3, r9, sl, r3
 800efe8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800efec:	4562      	cmp	r2, ip
 800efee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eff2:	d8e5      	bhi.n	800efc0 <__multiply+0x10c>
 800eff4:	9f01      	ldr	r7, [sp, #4]
 800eff6:	51eb      	str	r3, [r5, r7]
 800eff8:	3504      	adds	r5, #4
 800effa:	e799      	b.n	800ef30 <__multiply+0x7c>
 800effc:	3e01      	subs	r6, #1
 800effe:	e79b      	b.n	800ef38 <__multiply+0x84>
 800f000:	080125d0 	.word	0x080125d0
 800f004:	080125e1 	.word	0x080125e1

0800f008 <__pow5mult>:
 800f008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f00c:	4615      	mov	r5, r2
 800f00e:	f012 0203 	ands.w	r2, r2, #3
 800f012:	4607      	mov	r7, r0
 800f014:	460e      	mov	r6, r1
 800f016:	d007      	beq.n	800f028 <__pow5mult+0x20>
 800f018:	4c25      	ldr	r4, [pc, #148]	@ (800f0b0 <__pow5mult+0xa8>)
 800f01a:	3a01      	subs	r2, #1
 800f01c:	2300      	movs	r3, #0
 800f01e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f022:	f7ff fe9f 	bl	800ed64 <__multadd>
 800f026:	4606      	mov	r6, r0
 800f028:	10ad      	asrs	r5, r5, #2
 800f02a:	d03d      	beq.n	800f0a8 <__pow5mult+0xa0>
 800f02c:	69fc      	ldr	r4, [r7, #28]
 800f02e:	b97c      	cbnz	r4, 800f050 <__pow5mult+0x48>
 800f030:	2010      	movs	r0, #16
 800f032:	f7ff fd7f 	bl	800eb34 <malloc>
 800f036:	4602      	mov	r2, r0
 800f038:	61f8      	str	r0, [r7, #28]
 800f03a:	b928      	cbnz	r0, 800f048 <__pow5mult+0x40>
 800f03c:	4b1d      	ldr	r3, [pc, #116]	@ (800f0b4 <__pow5mult+0xac>)
 800f03e:	481e      	ldr	r0, [pc, #120]	@ (800f0b8 <__pow5mult+0xb0>)
 800f040:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f044:	f000 fbdc 	bl	800f800 <__assert_func>
 800f048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f04c:	6004      	str	r4, [r0, #0]
 800f04e:	60c4      	str	r4, [r0, #12]
 800f050:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f058:	b94c      	cbnz	r4, 800f06e <__pow5mult+0x66>
 800f05a:	f240 2171 	movw	r1, #625	@ 0x271
 800f05e:	4638      	mov	r0, r7
 800f060:	f7ff ff12 	bl	800ee88 <__i2b>
 800f064:	2300      	movs	r3, #0
 800f066:	f8c8 0008 	str.w	r0, [r8, #8]
 800f06a:	4604      	mov	r4, r0
 800f06c:	6003      	str	r3, [r0, #0]
 800f06e:	f04f 0900 	mov.w	r9, #0
 800f072:	07eb      	lsls	r3, r5, #31
 800f074:	d50a      	bpl.n	800f08c <__pow5mult+0x84>
 800f076:	4631      	mov	r1, r6
 800f078:	4622      	mov	r2, r4
 800f07a:	4638      	mov	r0, r7
 800f07c:	f7ff ff1a 	bl	800eeb4 <__multiply>
 800f080:	4631      	mov	r1, r6
 800f082:	4680      	mov	r8, r0
 800f084:	4638      	mov	r0, r7
 800f086:	f7ff fe4b 	bl	800ed20 <_Bfree>
 800f08a:	4646      	mov	r6, r8
 800f08c:	106d      	asrs	r5, r5, #1
 800f08e:	d00b      	beq.n	800f0a8 <__pow5mult+0xa0>
 800f090:	6820      	ldr	r0, [r4, #0]
 800f092:	b938      	cbnz	r0, 800f0a4 <__pow5mult+0x9c>
 800f094:	4622      	mov	r2, r4
 800f096:	4621      	mov	r1, r4
 800f098:	4638      	mov	r0, r7
 800f09a:	f7ff ff0b 	bl	800eeb4 <__multiply>
 800f09e:	6020      	str	r0, [r4, #0]
 800f0a0:	f8c0 9000 	str.w	r9, [r0]
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	e7e4      	b.n	800f072 <__pow5mult+0x6a>
 800f0a8:	4630      	mov	r0, r6
 800f0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0801263c 	.word	0x0801263c
 800f0b4:	08012561 	.word	0x08012561
 800f0b8:	080125e1 	.word	0x080125e1

0800f0bc <__lshift>:
 800f0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c0:	460c      	mov	r4, r1
 800f0c2:	6849      	ldr	r1, [r1, #4]
 800f0c4:	6923      	ldr	r3, [r4, #16]
 800f0c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0ca:	68a3      	ldr	r3, [r4, #8]
 800f0cc:	4607      	mov	r7, r0
 800f0ce:	4691      	mov	r9, r2
 800f0d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0d4:	f108 0601 	add.w	r6, r8, #1
 800f0d8:	42b3      	cmp	r3, r6
 800f0da:	db0b      	blt.n	800f0f4 <__lshift+0x38>
 800f0dc:	4638      	mov	r0, r7
 800f0de:	f7ff fddf 	bl	800eca0 <_Balloc>
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	b948      	cbnz	r0, 800f0fa <__lshift+0x3e>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	4b28      	ldr	r3, [pc, #160]	@ (800f18c <__lshift+0xd0>)
 800f0ea:	4829      	ldr	r0, [pc, #164]	@ (800f190 <__lshift+0xd4>)
 800f0ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f0f0:	f000 fb86 	bl	800f800 <__assert_func>
 800f0f4:	3101      	adds	r1, #1
 800f0f6:	005b      	lsls	r3, r3, #1
 800f0f8:	e7ee      	b.n	800f0d8 <__lshift+0x1c>
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	f100 0114 	add.w	r1, r0, #20
 800f100:	f100 0210 	add.w	r2, r0, #16
 800f104:	4618      	mov	r0, r3
 800f106:	4553      	cmp	r3, sl
 800f108:	db33      	blt.n	800f172 <__lshift+0xb6>
 800f10a:	6920      	ldr	r0, [r4, #16]
 800f10c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f110:	f104 0314 	add.w	r3, r4, #20
 800f114:	f019 091f 	ands.w	r9, r9, #31
 800f118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f11c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f120:	d02b      	beq.n	800f17a <__lshift+0xbe>
 800f122:	f1c9 0e20 	rsb	lr, r9, #32
 800f126:	468a      	mov	sl, r1
 800f128:	2200      	movs	r2, #0
 800f12a:	6818      	ldr	r0, [r3, #0]
 800f12c:	fa00 f009 	lsl.w	r0, r0, r9
 800f130:	4310      	orrs	r0, r2
 800f132:	f84a 0b04 	str.w	r0, [sl], #4
 800f136:	f853 2b04 	ldr.w	r2, [r3], #4
 800f13a:	459c      	cmp	ip, r3
 800f13c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f140:	d8f3      	bhi.n	800f12a <__lshift+0x6e>
 800f142:	ebac 0304 	sub.w	r3, ip, r4
 800f146:	3b15      	subs	r3, #21
 800f148:	f023 0303 	bic.w	r3, r3, #3
 800f14c:	3304      	adds	r3, #4
 800f14e:	f104 0015 	add.w	r0, r4, #21
 800f152:	4584      	cmp	ip, r0
 800f154:	bf38      	it	cc
 800f156:	2304      	movcc	r3, #4
 800f158:	50ca      	str	r2, [r1, r3]
 800f15a:	b10a      	cbz	r2, 800f160 <__lshift+0xa4>
 800f15c:	f108 0602 	add.w	r6, r8, #2
 800f160:	3e01      	subs	r6, #1
 800f162:	4638      	mov	r0, r7
 800f164:	612e      	str	r6, [r5, #16]
 800f166:	4621      	mov	r1, r4
 800f168:	f7ff fdda 	bl	800ed20 <_Bfree>
 800f16c:	4628      	mov	r0, r5
 800f16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f172:	f842 0f04 	str.w	r0, [r2, #4]!
 800f176:	3301      	adds	r3, #1
 800f178:	e7c5      	b.n	800f106 <__lshift+0x4a>
 800f17a:	3904      	subs	r1, #4
 800f17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f180:	f841 2f04 	str.w	r2, [r1, #4]!
 800f184:	459c      	cmp	ip, r3
 800f186:	d8f9      	bhi.n	800f17c <__lshift+0xc0>
 800f188:	e7ea      	b.n	800f160 <__lshift+0xa4>
 800f18a:	bf00      	nop
 800f18c:	080125d0 	.word	0x080125d0
 800f190:	080125e1 	.word	0x080125e1

0800f194 <__mcmp>:
 800f194:	690a      	ldr	r2, [r1, #16]
 800f196:	4603      	mov	r3, r0
 800f198:	6900      	ldr	r0, [r0, #16]
 800f19a:	1a80      	subs	r0, r0, r2
 800f19c:	b530      	push	{r4, r5, lr}
 800f19e:	d10e      	bne.n	800f1be <__mcmp+0x2a>
 800f1a0:	3314      	adds	r3, #20
 800f1a2:	3114      	adds	r1, #20
 800f1a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f1a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f1ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f1b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f1b4:	4295      	cmp	r5, r2
 800f1b6:	d003      	beq.n	800f1c0 <__mcmp+0x2c>
 800f1b8:	d205      	bcs.n	800f1c6 <__mcmp+0x32>
 800f1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f1be:	bd30      	pop	{r4, r5, pc}
 800f1c0:	42a3      	cmp	r3, r4
 800f1c2:	d3f3      	bcc.n	800f1ac <__mcmp+0x18>
 800f1c4:	e7fb      	b.n	800f1be <__mcmp+0x2a>
 800f1c6:	2001      	movs	r0, #1
 800f1c8:	e7f9      	b.n	800f1be <__mcmp+0x2a>
	...

0800f1cc <__mdiff>:
 800f1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d0:	4689      	mov	r9, r1
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	4611      	mov	r1, r2
 800f1d6:	4648      	mov	r0, r9
 800f1d8:	4614      	mov	r4, r2
 800f1da:	f7ff ffdb 	bl	800f194 <__mcmp>
 800f1de:	1e05      	subs	r5, r0, #0
 800f1e0:	d112      	bne.n	800f208 <__mdiff+0x3c>
 800f1e2:	4629      	mov	r1, r5
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f7ff fd5b 	bl	800eca0 <_Balloc>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	b928      	cbnz	r0, 800f1fa <__mdiff+0x2e>
 800f1ee:	4b3f      	ldr	r3, [pc, #252]	@ (800f2ec <__mdiff+0x120>)
 800f1f0:	f240 2137 	movw	r1, #567	@ 0x237
 800f1f4:	483e      	ldr	r0, [pc, #248]	@ (800f2f0 <__mdiff+0x124>)
 800f1f6:	f000 fb03 	bl	800f800 <__assert_func>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f200:	4610      	mov	r0, r2
 800f202:	b003      	add	sp, #12
 800f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f208:	bfbc      	itt	lt
 800f20a:	464b      	movlt	r3, r9
 800f20c:	46a1      	movlt	r9, r4
 800f20e:	4630      	mov	r0, r6
 800f210:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f214:	bfba      	itte	lt
 800f216:	461c      	movlt	r4, r3
 800f218:	2501      	movlt	r5, #1
 800f21a:	2500      	movge	r5, #0
 800f21c:	f7ff fd40 	bl	800eca0 <_Balloc>
 800f220:	4602      	mov	r2, r0
 800f222:	b918      	cbnz	r0, 800f22c <__mdiff+0x60>
 800f224:	4b31      	ldr	r3, [pc, #196]	@ (800f2ec <__mdiff+0x120>)
 800f226:	f240 2145 	movw	r1, #581	@ 0x245
 800f22a:	e7e3      	b.n	800f1f4 <__mdiff+0x28>
 800f22c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f230:	6926      	ldr	r6, [r4, #16]
 800f232:	60c5      	str	r5, [r0, #12]
 800f234:	f109 0310 	add.w	r3, r9, #16
 800f238:	f109 0514 	add.w	r5, r9, #20
 800f23c:	f104 0e14 	add.w	lr, r4, #20
 800f240:	f100 0b14 	add.w	fp, r0, #20
 800f244:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f248:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f24c:	9301      	str	r3, [sp, #4]
 800f24e:	46d9      	mov	r9, fp
 800f250:	f04f 0c00 	mov.w	ip, #0
 800f254:	9b01      	ldr	r3, [sp, #4]
 800f256:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f25a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f25e:	9301      	str	r3, [sp, #4]
 800f260:	fa1f f38a 	uxth.w	r3, sl
 800f264:	4619      	mov	r1, r3
 800f266:	b283      	uxth	r3, r0
 800f268:	1acb      	subs	r3, r1, r3
 800f26a:	0c00      	lsrs	r0, r0, #16
 800f26c:	4463      	add	r3, ip
 800f26e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f272:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f276:	b29b      	uxth	r3, r3
 800f278:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f27c:	4576      	cmp	r6, lr
 800f27e:	f849 3b04 	str.w	r3, [r9], #4
 800f282:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f286:	d8e5      	bhi.n	800f254 <__mdiff+0x88>
 800f288:	1b33      	subs	r3, r6, r4
 800f28a:	3b15      	subs	r3, #21
 800f28c:	f023 0303 	bic.w	r3, r3, #3
 800f290:	3415      	adds	r4, #21
 800f292:	3304      	adds	r3, #4
 800f294:	42a6      	cmp	r6, r4
 800f296:	bf38      	it	cc
 800f298:	2304      	movcc	r3, #4
 800f29a:	441d      	add	r5, r3
 800f29c:	445b      	add	r3, fp
 800f29e:	461e      	mov	r6, r3
 800f2a0:	462c      	mov	r4, r5
 800f2a2:	4544      	cmp	r4, r8
 800f2a4:	d30e      	bcc.n	800f2c4 <__mdiff+0xf8>
 800f2a6:	f108 0103 	add.w	r1, r8, #3
 800f2aa:	1b49      	subs	r1, r1, r5
 800f2ac:	f021 0103 	bic.w	r1, r1, #3
 800f2b0:	3d03      	subs	r5, #3
 800f2b2:	45a8      	cmp	r8, r5
 800f2b4:	bf38      	it	cc
 800f2b6:	2100      	movcc	r1, #0
 800f2b8:	440b      	add	r3, r1
 800f2ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2be:	b191      	cbz	r1, 800f2e6 <__mdiff+0x11a>
 800f2c0:	6117      	str	r7, [r2, #16]
 800f2c2:	e79d      	b.n	800f200 <__mdiff+0x34>
 800f2c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800f2c8:	46e6      	mov	lr, ip
 800f2ca:	0c08      	lsrs	r0, r1, #16
 800f2cc:	fa1c fc81 	uxtah	ip, ip, r1
 800f2d0:	4471      	add	r1, lr
 800f2d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f2d6:	b289      	uxth	r1, r1
 800f2d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f2dc:	f846 1b04 	str.w	r1, [r6], #4
 800f2e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2e4:	e7dd      	b.n	800f2a2 <__mdiff+0xd6>
 800f2e6:	3f01      	subs	r7, #1
 800f2e8:	e7e7      	b.n	800f2ba <__mdiff+0xee>
 800f2ea:	bf00      	nop
 800f2ec:	080125d0 	.word	0x080125d0
 800f2f0:	080125e1 	.word	0x080125e1

0800f2f4 <__d2b>:
 800f2f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2f8:	460f      	mov	r7, r1
 800f2fa:	2101      	movs	r1, #1
 800f2fc:	ec59 8b10 	vmov	r8, r9, d0
 800f300:	4616      	mov	r6, r2
 800f302:	f7ff fccd 	bl	800eca0 <_Balloc>
 800f306:	4604      	mov	r4, r0
 800f308:	b930      	cbnz	r0, 800f318 <__d2b+0x24>
 800f30a:	4602      	mov	r2, r0
 800f30c:	4b23      	ldr	r3, [pc, #140]	@ (800f39c <__d2b+0xa8>)
 800f30e:	4824      	ldr	r0, [pc, #144]	@ (800f3a0 <__d2b+0xac>)
 800f310:	f240 310f 	movw	r1, #783	@ 0x30f
 800f314:	f000 fa74 	bl	800f800 <__assert_func>
 800f318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f31c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f320:	b10d      	cbz	r5, 800f326 <__d2b+0x32>
 800f322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	f1b8 0300 	subs.w	r3, r8, #0
 800f32c:	d023      	beq.n	800f376 <__d2b+0x82>
 800f32e:	4668      	mov	r0, sp
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	f7ff fd7c 	bl	800ee2e <__lo0bits>
 800f336:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f33a:	b1d0      	cbz	r0, 800f372 <__d2b+0x7e>
 800f33c:	f1c0 0320 	rsb	r3, r0, #32
 800f340:	fa02 f303 	lsl.w	r3, r2, r3
 800f344:	430b      	orrs	r3, r1
 800f346:	40c2      	lsrs	r2, r0
 800f348:	6163      	str	r3, [r4, #20]
 800f34a:	9201      	str	r2, [sp, #4]
 800f34c:	9b01      	ldr	r3, [sp, #4]
 800f34e:	61a3      	str	r3, [r4, #24]
 800f350:	2b00      	cmp	r3, #0
 800f352:	bf0c      	ite	eq
 800f354:	2201      	moveq	r2, #1
 800f356:	2202      	movne	r2, #2
 800f358:	6122      	str	r2, [r4, #16]
 800f35a:	b1a5      	cbz	r5, 800f386 <__d2b+0x92>
 800f35c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f360:	4405      	add	r5, r0
 800f362:	603d      	str	r5, [r7, #0]
 800f364:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f368:	6030      	str	r0, [r6, #0]
 800f36a:	4620      	mov	r0, r4
 800f36c:	b003      	add	sp, #12
 800f36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f372:	6161      	str	r1, [r4, #20]
 800f374:	e7ea      	b.n	800f34c <__d2b+0x58>
 800f376:	a801      	add	r0, sp, #4
 800f378:	f7ff fd59 	bl	800ee2e <__lo0bits>
 800f37c:	9b01      	ldr	r3, [sp, #4]
 800f37e:	6163      	str	r3, [r4, #20]
 800f380:	3020      	adds	r0, #32
 800f382:	2201      	movs	r2, #1
 800f384:	e7e8      	b.n	800f358 <__d2b+0x64>
 800f386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f38a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f38e:	6038      	str	r0, [r7, #0]
 800f390:	6918      	ldr	r0, [r3, #16]
 800f392:	f7ff fd2d 	bl	800edf0 <__hi0bits>
 800f396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f39a:	e7e5      	b.n	800f368 <__d2b+0x74>
 800f39c:	080125d0 	.word	0x080125d0
 800f3a0:	080125e1 	.word	0x080125e1

0800f3a4 <__ssputs_r>:
 800f3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a8:	688e      	ldr	r6, [r1, #8]
 800f3aa:	461f      	mov	r7, r3
 800f3ac:	42be      	cmp	r6, r7
 800f3ae:	680b      	ldr	r3, [r1, #0]
 800f3b0:	4682      	mov	sl, r0
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	4690      	mov	r8, r2
 800f3b6:	d82d      	bhi.n	800f414 <__ssputs_r+0x70>
 800f3b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f3c0:	d026      	beq.n	800f410 <__ssputs_r+0x6c>
 800f3c2:	6965      	ldr	r5, [r4, #20]
 800f3c4:	6909      	ldr	r1, [r1, #16]
 800f3c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3ca:	eba3 0901 	sub.w	r9, r3, r1
 800f3ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3d2:	1c7b      	adds	r3, r7, #1
 800f3d4:	444b      	add	r3, r9
 800f3d6:	106d      	asrs	r5, r5, #1
 800f3d8:	429d      	cmp	r5, r3
 800f3da:	bf38      	it	cc
 800f3dc:	461d      	movcc	r5, r3
 800f3de:	0553      	lsls	r3, r2, #21
 800f3e0:	d527      	bpl.n	800f432 <__ssputs_r+0x8e>
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	f7ff fbd0 	bl	800eb88 <_malloc_r>
 800f3e8:	4606      	mov	r6, r0
 800f3ea:	b360      	cbz	r0, 800f446 <__ssputs_r+0xa2>
 800f3ec:	6921      	ldr	r1, [r4, #16]
 800f3ee:	464a      	mov	r2, r9
 800f3f0:	f7fe fce9 	bl	800ddc6 <memcpy>
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3fe:	81a3      	strh	r3, [r4, #12]
 800f400:	6126      	str	r6, [r4, #16]
 800f402:	6165      	str	r5, [r4, #20]
 800f404:	444e      	add	r6, r9
 800f406:	eba5 0509 	sub.w	r5, r5, r9
 800f40a:	6026      	str	r6, [r4, #0]
 800f40c:	60a5      	str	r5, [r4, #8]
 800f40e:	463e      	mov	r6, r7
 800f410:	42be      	cmp	r6, r7
 800f412:	d900      	bls.n	800f416 <__ssputs_r+0x72>
 800f414:	463e      	mov	r6, r7
 800f416:	6820      	ldr	r0, [r4, #0]
 800f418:	4632      	mov	r2, r6
 800f41a:	4641      	mov	r1, r8
 800f41c:	f000 f9c6 	bl	800f7ac <memmove>
 800f420:	68a3      	ldr	r3, [r4, #8]
 800f422:	1b9b      	subs	r3, r3, r6
 800f424:	60a3      	str	r3, [r4, #8]
 800f426:	6823      	ldr	r3, [r4, #0]
 800f428:	4433      	add	r3, r6
 800f42a:	6023      	str	r3, [r4, #0]
 800f42c:	2000      	movs	r0, #0
 800f42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f432:	462a      	mov	r2, r5
 800f434:	f000 fa28 	bl	800f888 <_realloc_r>
 800f438:	4606      	mov	r6, r0
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d1e0      	bne.n	800f400 <__ssputs_r+0x5c>
 800f43e:	6921      	ldr	r1, [r4, #16]
 800f440:	4650      	mov	r0, sl
 800f442:	f7ff fb2d 	bl	800eaa0 <_free_r>
 800f446:	230c      	movs	r3, #12
 800f448:	f8ca 3000 	str.w	r3, [sl]
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f452:	81a3      	strh	r3, [r4, #12]
 800f454:	f04f 30ff 	mov.w	r0, #4294967295
 800f458:	e7e9      	b.n	800f42e <__ssputs_r+0x8a>
	...

0800f45c <_svfiprintf_r>:
 800f45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f460:	4698      	mov	r8, r3
 800f462:	898b      	ldrh	r3, [r1, #12]
 800f464:	061b      	lsls	r3, r3, #24
 800f466:	b09d      	sub	sp, #116	@ 0x74
 800f468:	4607      	mov	r7, r0
 800f46a:	460d      	mov	r5, r1
 800f46c:	4614      	mov	r4, r2
 800f46e:	d510      	bpl.n	800f492 <_svfiprintf_r+0x36>
 800f470:	690b      	ldr	r3, [r1, #16]
 800f472:	b973      	cbnz	r3, 800f492 <_svfiprintf_r+0x36>
 800f474:	2140      	movs	r1, #64	@ 0x40
 800f476:	f7ff fb87 	bl	800eb88 <_malloc_r>
 800f47a:	6028      	str	r0, [r5, #0]
 800f47c:	6128      	str	r0, [r5, #16]
 800f47e:	b930      	cbnz	r0, 800f48e <_svfiprintf_r+0x32>
 800f480:	230c      	movs	r3, #12
 800f482:	603b      	str	r3, [r7, #0]
 800f484:	f04f 30ff 	mov.w	r0, #4294967295
 800f488:	b01d      	add	sp, #116	@ 0x74
 800f48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48e:	2340      	movs	r3, #64	@ 0x40
 800f490:	616b      	str	r3, [r5, #20]
 800f492:	2300      	movs	r3, #0
 800f494:	9309      	str	r3, [sp, #36]	@ 0x24
 800f496:	2320      	movs	r3, #32
 800f498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f49c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4a0:	2330      	movs	r3, #48	@ 0x30
 800f4a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f640 <_svfiprintf_r+0x1e4>
 800f4a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4aa:	f04f 0901 	mov.w	r9, #1
 800f4ae:	4623      	mov	r3, r4
 800f4b0:	469a      	mov	sl, r3
 800f4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4b6:	b10a      	cbz	r2, 800f4bc <_svfiprintf_r+0x60>
 800f4b8:	2a25      	cmp	r2, #37	@ 0x25
 800f4ba:	d1f9      	bne.n	800f4b0 <_svfiprintf_r+0x54>
 800f4bc:	ebba 0b04 	subs.w	fp, sl, r4
 800f4c0:	d00b      	beq.n	800f4da <_svfiprintf_r+0x7e>
 800f4c2:	465b      	mov	r3, fp
 800f4c4:	4622      	mov	r2, r4
 800f4c6:	4629      	mov	r1, r5
 800f4c8:	4638      	mov	r0, r7
 800f4ca:	f7ff ff6b 	bl	800f3a4 <__ssputs_r>
 800f4ce:	3001      	adds	r0, #1
 800f4d0:	f000 80a7 	beq.w	800f622 <_svfiprintf_r+0x1c6>
 800f4d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4d6:	445a      	add	r2, fp
 800f4d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4da:	f89a 3000 	ldrb.w	r3, [sl]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f000 809f 	beq.w	800f622 <_svfiprintf_r+0x1c6>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4ee:	f10a 0a01 	add.w	sl, sl, #1
 800f4f2:	9304      	str	r3, [sp, #16]
 800f4f4:	9307      	str	r3, [sp, #28]
 800f4f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4fc:	4654      	mov	r4, sl
 800f4fe:	2205      	movs	r2, #5
 800f500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f504:	484e      	ldr	r0, [pc, #312]	@ (800f640 <_svfiprintf_r+0x1e4>)
 800f506:	f7f0 fe63 	bl	80001d0 <memchr>
 800f50a:	9a04      	ldr	r2, [sp, #16]
 800f50c:	b9d8      	cbnz	r0, 800f546 <_svfiprintf_r+0xea>
 800f50e:	06d0      	lsls	r0, r2, #27
 800f510:	bf44      	itt	mi
 800f512:	2320      	movmi	r3, #32
 800f514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f518:	0711      	lsls	r1, r2, #28
 800f51a:	bf44      	itt	mi
 800f51c:	232b      	movmi	r3, #43	@ 0x2b
 800f51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f522:	f89a 3000 	ldrb.w	r3, [sl]
 800f526:	2b2a      	cmp	r3, #42	@ 0x2a
 800f528:	d015      	beq.n	800f556 <_svfiprintf_r+0xfa>
 800f52a:	9a07      	ldr	r2, [sp, #28]
 800f52c:	4654      	mov	r4, sl
 800f52e:	2000      	movs	r0, #0
 800f530:	f04f 0c0a 	mov.w	ip, #10
 800f534:	4621      	mov	r1, r4
 800f536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f53a:	3b30      	subs	r3, #48	@ 0x30
 800f53c:	2b09      	cmp	r3, #9
 800f53e:	d94b      	bls.n	800f5d8 <_svfiprintf_r+0x17c>
 800f540:	b1b0      	cbz	r0, 800f570 <_svfiprintf_r+0x114>
 800f542:	9207      	str	r2, [sp, #28]
 800f544:	e014      	b.n	800f570 <_svfiprintf_r+0x114>
 800f546:	eba0 0308 	sub.w	r3, r0, r8
 800f54a:	fa09 f303 	lsl.w	r3, r9, r3
 800f54e:	4313      	orrs	r3, r2
 800f550:	9304      	str	r3, [sp, #16]
 800f552:	46a2      	mov	sl, r4
 800f554:	e7d2      	b.n	800f4fc <_svfiprintf_r+0xa0>
 800f556:	9b03      	ldr	r3, [sp, #12]
 800f558:	1d19      	adds	r1, r3, #4
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	9103      	str	r1, [sp, #12]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	bfbb      	ittet	lt
 800f562:	425b      	neglt	r3, r3
 800f564:	f042 0202 	orrlt.w	r2, r2, #2
 800f568:	9307      	strge	r3, [sp, #28]
 800f56a:	9307      	strlt	r3, [sp, #28]
 800f56c:	bfb8      	it	lt
 800f56e:	9204      	strlt	r2, [sp, #16]
 800f570:	7823      	ldrb	r3, [r4, #0]
 800f572:	2b2e      	cmp	r3, #46	@ 0x2e
 800f574:	d10a      	bne.n	800f58c <_svfiprintf_r+0x130>
 800f576:	7863      	ldrb	r3, [r4, #1]
 800f578:	2b2a      	cmp	r3, #42	@ 0x2a
 800f57a:	d132      	bne.n	800f5e2 <_svfiprintf_r+0x186>
 800f57c:	9b03      	ldr	r3, [sp, #12]
 800f57e:	1d1a      	adds	r2, r3, #4
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	9203      	str	r2, [sp, #12]
 800f584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f588:	3402      	adds	r4, #2
 800f58a:	9305      	str	r3, [sp, #20]
 800f58c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f650 <_svfiprintf_r+0x1f4>
 800f590:	7821      	ldrb	r1, [r4, #0]
 800f592:	2203      	movs	r2, #3
 800f594:	4650      	mov	r0, sl
 800f596:	f7f0 fe1b 	bl	80001d0 <memchr>
 800f59a:	b138      	cbz	r0, 800f5ac <_svfiprintf_r+0x150>
 800f59c:	9b04      	ldr	r3, [sp, #16]
 800f59e:	eba0 000a 	sub.w	r0, r0, sl
 800f5a2:	2240      	movs	r2, #64	@ 0x40
 800f5a4:	4082      	lsls	r2, r0
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	3401      	adds	r4, #1
 800f5aa:	9304      	str	r3, [sp, #16]
 800f5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b0:	4824      	ldr	r0, [pc, #144]	@ (800f644 <_svfiprintf_r+0x1e8>)
 800f5b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f5b6:	2206      	movs	r2, #6
 800f5b8:	f7f0 fe0a 	bl	80001d0 <memchr>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d036      	beq.n	800f62e <_svfiprintf_r+0x1d2>
 800f5c0:	4b21      	ldr	r3, [pc, #132]	@ (800f648 <_svfiprintf_r+0x1ec>)
 800f5c2:	bb1b      	cbnz	r3, 800f60c <_svfiprintf_r+0x1b0>
 800f5c4:	9b03      	ldr	r3, [sp, #12]
 800f5c6:	3307      	adds	r3, #7
 800f5c8:	f023 0307 	bic.w	r3, r3, #7
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5d2:	4433      	add	r3, r6
 800f5d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5d6:	e76a      	b.n	800f4ae <_svfiprintf_r+0x52>
 800f5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5dc:	460c      	mov	r4, r1
 800f5de:	2001      	movs	r0, #1
 800f5e0:	e7a8      	b.n	800f534 <_svfiprintf_r+0xd8>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	3401      	adds	r4, #1
 800f5e6:	9305      	str	r3, [sp, #20]
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	f04f 0c0a 	mov.w	ip, #10
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5f4:	3a30      	subs	r2, #48	@ 0x30
 800f5f6:	2a09      	cmp	r2, #9
 800f5f8:	d903      	bls.n	800f602 <_svfiprintf_r+0x1a6>
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d0c6      	beq.n	800f58c <_svfiprintf_r+0x130>
 800f5fe:	9105      	str	r1, [sp, #20]
 800f600:	e7c4      	b.n	800f58c <_svfiprintf_r+0x130>
 800f602:	fb0c 2101 	mla	r1, ip, r1, r2
 800f606:	4604      	mov	r4, r0
 800f608:	2301      	movs	r3, #1
 800f60a:	e7f0      	b.n	800f5ee <_svfiprintf_r+0x192>
 800f60c:	ab03      	add	r3, sp, #12
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	462a      	mov	r2, r5
 800f612:	4b0e      	ldr	r3, [pc, #56]	@ (800f64c <_svfiprintf_r+0x1f0>)
 800f614:	a904      	add	r1, sp, #16
 800f616:	4638      	mov	r0, r7
 800f618:	f7fd fe78 	bl	800d30c <_printf_float>
 800f61c:	1c42      	adds	r2, r0, #1
 800f61e:	4606      	mov	r6, r0
 800f620:	d1d6      	bne.n	800f5d0 <_svfiprintf_r+0x174>
 800f622:	89ab      	ldrh	r3, [r5, #12]
 800f624:	065b      	lsls	r3, r3, #25
 800f626:	f53f af2d 	bmi.w	800f484 <_svfiprintf_r+0x28>
 800f62a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f62c:	e72c      	b.n	800f488 <_svfiprintf_r+0x2c>
 800f62e:	ab03      	add	r3, sp, #12
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	462a      	mov	r2, r5
 800f634:	4b05      	ldr	r3, [pc, #20]	@ (800f64c <_svfiprintf_r+0x1f0>)
 800f636:	a904      	add	r1, sp, #16
 800f638:	4638      	mov	r0, r7
 800f63a:	f7fe f8ff 	bl	800d83c <_printf_i>
 800f63e:	e7ed      	b.n	800f61c <_svfiprintf_r+0x1c0>
 800f640:	08012738 	.word	0x08012738
 800f644:	08012742 	.word	0x08012742
 800f648:	0800d30d 	.word	0x0800d30d
 800f64c:	0800f3a5 	.word	0x0800f3a5
 800f650:	0801273e 	.word	0x0801273e

0800f654 <__sflush_r>:
 800f654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f65c:	0716      	lsls	r6, r2, #28
 800f65e:	4605      	mov	r5, r0
 800f660:	460c      	mov	r4, r1
 800f662:	d454      	bmi.n	800f70e <__sflush_r+0xba>
 800f664:	684b      	ldr	r3, [r1, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	dc02      	bgt.n	800f670 <__sflush_r+0x1c>
 800f66a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	dd48      	ble.n	800f702 <__sflush_r+0xae>
 800f670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f672:	2e00      	cmp	r6, #0
 800f674:	d045      	beq.n	800f702 <__sflush_r+0xae>
 800f676:	2300      	movs	r3, #0
 800f678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f67c:	682f      	ldr	r7, [r5, #0]
 800f67e:	6a21      	ldr	r1, [r4, #32]
 800f680:	602b      	str	r3, [r5, #0]
 800f682:	d030      	beq.n	800f6e6 <__sflush_r+0x92>
 800f684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f686:	89a3      	ldrh	r3, [r4, #12]
 800f688:	0759      	lsls	r1, r3, #29
 800f68a:	d505      	bpl.n	800f698 <__sflush_r+0x44>
 800f68c:	6863      	ldr	r3, [r4, #4]
 800f68e:	1ad2      	subs	r2, r2, r3
 800f690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f692:	b10b      	cbz	r3, 800f698 <__sflush_r+0x44>
 800f694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f696:	1ad2      	subs	r2, r2, r3
 800f698:	2300      	movs	r3, #0
 800f69a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f69c:	6a21      	ldr	r1, [r4, #32]
 800f69e:	4628      	mov	r0, r5
 800f6a0:	47b0      	blx	r6
 800f6a2:	1c43      	adds	r3, r0, #1
 800f6a4:	89a3      	ldrh	r3, [r4, #12]
 800f6a6:	d106      	bne.n	800f6b6 <__sflush_r+0x62>
 800f6a8:	6829      	ldr	r1, [r5, #0]
 800f6aa:	291d      	cmp	r1, #29
 800f6ac:	d82b      	bhi.n	800f706 <__sflush_r+0xb2>
 800f6ae:	4a2a      	ldr	r2, [pc, #168]	@ (800f758 <__sflush_r+0x104>)
 800f6b0:	410a      	asrs	r2, r1
 800f6b2:	07d6      	lsls	r6, r2, #31
 800f6b4:	d427      	bmi.n	800f706 <__sflush_r+0xb2>
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	6062      	str	r2, [r4, #4]
 800f6ba:	04d9      	lsls	r1, r3, #19
 800f6bc:	6922      	ldr	r2, [r4, #16]
 800f6be:	6022      	str	r2, [r4, #0]
 800f6c0:	d504      	bpl.n	800f6cc <__sflush_r+0x78>
 800f6c2:	1c42      	adds	r2, r0, #1
 800f6c4:	d101      	bne.n	800f6ca <__sflush_r+0x76>
 800f6c6:	682b      	ldr	r3, [r5, #0]
 800f6c8:	b903      	cbnz	r3, 800f6cc <__sflush_r+0x78>
 800f6ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6ce:	602f      	str	r7, [r5, #0]
 800f6d0:	b1b9      	cbz	r1, 800f702 <__sflush_r+0xae>
 800f6d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6d6:	4299      	cmp	r1, r3
 800f6d8:	d002      	beq.n	800f6e0 <__sflush_r+0x8c>
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f7ff f9e0 	bl	800eaa0 <_free_r>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6e4:	e00d      	b.n	800f702 <__sflush_r+0xae>
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	47b0      	blx	r6
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	1c50      	adds	r0, r2, #1
 800f6f0:	d1c9      	bne.n	800f686 <__sflush_r+0x32>
 800f6f2:	682b      	ldr	r3, [r5, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d0c6      	beq.n	800f686 <__sflush_r+0x32>
 800f6f8:	2b1d      	cmp	r3, #29
 800f6fa:	d001      	beq.n	800f700 <__sflush_r+0xac>
 800f6fc:	2b16      	cmp	r3, #22
 800f6fe:	d11e      	bne.n	800f73e <__sflush_r+0xea>
 800f700:	602f      	str	r7, [r5, #0]
 800f702:	2000      	movs	r0, #0
 800f704:	e022      	b.n	800f74c <__sflush_r+0xf8>
 800f706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f70a:	b21b      	sxth	r3, r3
 800f70c:	e01b      	b.n	800f746 <__sflush_r+0xf2>
 800f70e:	690f      	ldr	r7, [r1, #16]
 800f710:	2f00      	cmp	r7, #0
 800f712:	d0f6      	beq.n	800f702 <__sflush_r+0xae>
 800f714:	0793      	lsls	r3, r2, #30
 800f716:	680e      	ldr	r6, [r1, #0]
 800f718:	bf08      	it	eq
 800f71a:	694b      	ldreq	r3, [r1, #20]
 800f71c:	600f      	str	r7, [r1, #0]
 800f71e:	bf18      	it	ne
 800f720:	2300      	movne	r3, #0
 800f722:	eba6 0807 	sub.w	r8, r6, r7
 800f726:	608b      	str	r3, [r1, #8]
 800f728:	f1b8 0f00 	cmp.w	r8, #0
 800f72c:	dde9      	ble.n	800f702 <__sflush_r+0xae>
 800f72e:	6a21      	ldr	r1, [r4, #32]
 800f730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f732:	4643      	mov	r3, r8
 800f734:	463a      	mov	r2, r7
 800f736:	4628      	mov	r0, r5
 800f738:	47b0      	blx	r6
 800f73a:	2800      	cmp	r0, #0
 800f73c:	dc08      	bgt.n	800f750 <__sflush_r+0xfc>
 800f73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f746:	81a3      	strh	r3, [r4, #12]
 800f748:	f04f 30ff 	mov.w	r0, #4294967295
 800f74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f750:	4407      	add	r7, r0
 800f752:	eba8 0800 	sub.w	r8, r8, r0
 800f756:	e7e7      	b.n	800f728 <__sflush_r+0xd4>
 800f758:	dfbffffe 	.word	0xdfbffffe

0800f75c <_fflush_r>:
 800f75c:	b538      	push	{r3, r4, r5, lr}
 800f75e:	690b      	ldr	r3, [r1, #16]
 800f760:	4605      	mov	r5, r0
 800f762:	460c      	mov	r4, r1
 800f764:	b913      	cbnz	r3, 800f76c <_fflush_r+0x10>
 800f766:	2500      	movs	r5, #0
 800f768:	4628      	mov	r0, r5
 800f76a:	bd38      	pop	{r3, r4, r5, pc}
 800f76c:	b118      	cbz	r0, 800f776 <_fflush_r+0x1a>
 800f76e:	6a03      	ldr	r3, [r0, #32]
 800f770:	b90b      	cbnz	r3, 800f776 <_fflush_r+0x1a>
 800f772:	f7fe fa0f 	bl	800db94 <__sinit>
 800f776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d0f3      	beq.n	800f766 <_fflush_r+0xa>
 800f77e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f780:	07d0      	lsls	r0, r2, #31
 800f782:	d404      	bmi.n	800f78e <_fflush_r+0x32>
 800f784:	0599      	lsls	r1, r3, #22
 800f786:	d402      	bmi.n	800f78e <_fflush_r+0x32>
 800f788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f78a:	f7fe fb1a 	bl	800ddc2 <__retarget_lock_acquire_recursive>
 800f78e:	4628      	mov	r0, r5
 800f790:	4621      	mov	r1, r4
 800f792:	f7ff ff5f 	bl	800f654 <__sflush_r>
 800f796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f798:	07da      	lsls	r2, r3, #31
 800f79a:	4605      	mov	r5, r0
 800f79c:	d4e4      	bmi.n	800f768 <_fflush_r+0xc>
 800f79e:	89a3      	ldrh	r3, [r4, #12]
 800f7a0:	059b      	lsls	r3, r3, #22
 800f7a2:	d4e1      	bmi.n	800f768 <_fflush_r+0xc>
 800f7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7a6:	f7fe fb0d 	bl	800ddc4 <__retarget_lock_release_recursive>
 800f7aa:	e7dd      	b.n	800f768 <_fflush_r+0xc>

0800f7ac <memmove>:
 800f7ac:	4288      	cmp	r0, r1
 800f7ae:	b510      	push	{r4, lr}
 800f7b0:	eb01 0402 	add.w	r4, r1, r2
 800f7b4:	d902      	bls.n	800f7bc <memmove+0x10>
 800f7b6:	4284      	cmp	r4, r0
 800f7b8:	4623      	mov	r3, r4
 800f7ba:	d807      	bhi.n	800f7cc <memmove+0x20>
 800f7bc:	1e43      	subs	r3, r0, #1
 800f7be:	42a1      	cmp	r1, r4
 800f7c0:	d008      	beq.n	800f7d4 <memmove+0x28>
 800f7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ca:	e7f8      	b.n	800f7be <memmove+0x12>
 800f7cc:	4402      	add	r2, r0
 800f7ce:	4601      	mov	r1, r0
 800f7d0:	428a      	cmp	r2, r1
 800f7d2:	d100      	bne.n	800f7d6 <memmove+0x2a>
 800f7d4:	bd10      	pop	{r4, pc}
 800f7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7de:	e7f7      	b.n	800f7d0 <memmove+0x24>

0800f7e0 <_sbrk_r>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4d06      	ldr	r5, [pc, #24]	@ (800f7fc <_sbrk_r+0x1c>)
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	4608      	mov	r0, r1
 800f7ea:	602b      	str	r3, [r5, #0]
 800f7ec:	f7f4 f934 	bl	8003a58 <_sbrk>
 800f7f0:	1c43      	adds	r3, r0, #1
 800f7f2:	d102      	bne.n	800f7fa <_sbrk_r+0x1a>
 800f7f4:	682b      	ldr	r3, [r5, #0]
 800f7f6:	b103      	cbz	r3, 800f7fa <_sbrk_r+0x1a>
 800f7f8:	6023      	str	r3, [r4, #0]
 800f7fa:	bd38      	pop	{r3, r4, r5, pc}
 800f7fc:	20002680 	.word	0x20002680

0800f800 <__assert_func>:
 800f800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f802:	4614      	mov	r4, r2
 800f804:	461a      	mov	r2, r3
 800f806:	4b09      	ldr	r3, [pc, #36]	@ (800f82c <__assert_func+0x2c>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4605      	mov	r5, r0
 800f80c:	68d8      	ldr	r0, [r3, #12]
 800f80e:	b954      	cbnz	r4, 800f826 <__assert_func+0x26>
 800f810:	4b07      	ldr	r3, [pc, #28]	@ (800f830 <__assert_func+0x30>)
 800f812:	461c      	mov	r4, r3
 800f814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f818:	9100      	str	r1, [sp, #0]
 800f81a:	462b      	mov	r3, r5
 800f81c:	4905      	ldr	r1, [pc, #20]	@ (800f834 <__assert_func+0x34>)
 800f81e:	f000 f86f 	bl	800f900 <fiprintf>
 800f822:	f000 f87f 	bl	800f924 <abort>
 800f826:	4b04      	ldr	r3, [pc, #16]	@ (800f838 <__assert_func+0x38>)
 800f828:	e7f4      	b.n	800f814 <__assert_func+0x14>
 800f82a:	bf00      	nop
 800f82c:	20000134 	.word	0x20000134
 800f830:	0801278e 	.word	0x0801278e
 800f834:	08012760 	.word	0x08012760
 800f838:	08012753 	.word	0x08012753

0800f83c <_calloc_r>:
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	fba1 5402 	umull	r5, r4, r1, r2
 800f842:	b93c      	cbnz	r4, 800f854 <_calloc_r+0x18>
 800f844:	4629      	mov	r1, r5
 800f846:	f7ff f99f 	bl	800eb88 <_malloc_r>
 800f84a:	4606      	mov	r6, r0
 800f84c:	b928      	cbnz	r0, 800f85a <_calloc_r+0x1e>
 800f84e:	2600      	movs	r6, #0
 800f850:	4630      	mov	r0, r6
 800f852:	bd70      	pop	{r4, r5, r6, pc}
 800f854:	220c      	movs	r2, #12
 800f856:	6002      	str	r2, [r0, #0]
 800f858:	e7f9      	b.n	800f84e <_calloc_r+0x12>
 800f85a:	462a      	mov	r2, r5
 800f85c:	4621      	mov	r1, r4
 800f85e:	f7fe fa32 	bl	800dcc6 <memset>
 800f862:	e7f5      	b.n	800f850 <_calloc_r+0x14>

0800f864 <__ascii_mbtowc>:
 800f864:	b082      	sub	sp, #8
 800f866:	b901      	cbnz	r1, 800f86a <__ascii_mbtowc+0x6>
 800f868:	a901      	add	r1, sp, #4
 800f86a:	b142      	cbz	r2, 800f87e <__ascii_mbtowc+0x1a>
 800f86c:	b14b      	cbz	r3, 800f882 <__ascii_mbtowc+0x1e>
 800f86e:	7813      	ldrb	r3, [r2, #0]
 800f870:	600b      	str	r3, [r1, #0]
 800f872:	7812      	ldrb	r2, [r2, #0]
 800f874:	1e10      	subs	r0, r2, #0
 800f876:	bf18      	it	ne
 800f878:	2001      	movne	r0, #1
 800f87a:	b002      	add	sp, #8
 800f87c:	4770      	bx	lr
 800f87e:	4610      	mov	r0, r2
 800f880:	e7fb      	b.n	800f87a <__ascii_mbtowc+0x16>
 800f882:	f06f 0001 	mvn.w	r0, #1
 800f886:	e7f8      	b.n	800f87a <__ascii_mbtowc+0x16>

0800f888 <_realloc_r>:
 800f888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f88c:	4680      	mov	r8, r0
 800f88e:	4615      	mov	r5, r2
 800f890:	460c      	mov	r4, r1
 800f892:	b921      	cbnz	r1, 800f89e <_realloc_r+0x16>
 800f894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f898:	4611      	mov	r1, r2
 800f89a:	f7ff b975 	b.w	800eb88 <_malloc_r>
 800f89e:	b92a      	cbnz	r2, 800f8ac <_realloc_r+0x24>
 800f8a0:	f7ff f8fe 	bl	800eaa0 <_free_r>
 800f8a4:	2400      	movs	r4, #0
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ac:	f000 f841 	bl	800f932 <_malloc_usable_size_r>
 800f8b0:	4285      	cmp	r5, r0
 800f8b2:	4606      	mov	r6, r0
 800f8b4:	d802      	bhi.n	800f8bc <_realloc_r+0x34>
 800f8b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f8ba:	d8f4      	bhi.n	800f8a6 <_realloc_r+0x1e>
 800f8bc:	4629      	mov	r1, r5
 800f8be:	4640      	mov	r0, r8
 800f8c0:	f7ff f962 	bl	800eb88 <_malloc_r>
 800f8c4:	4607      	mov	r7, r0
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	d0ec      	beq.n	800f8a4 <_realloc_r+0x1c>
 800f8ca:	42b5      	cmp	r5, r6
 800f8cc:	462a      	mov	r2, r5
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	bf28      	it	cs
 800f8d2:	4632      	movcs	r2, r6
 800f8d4:	f7fe fa77 	bl	800ddc6 <memcpy>
 800f8d8:	4621      	mov	r1, r4
 800f8da:	4640      	mov	r0, r8
 800f8dc:	f7ff f8e0 	bl	800eaa0 <_free_r>
 800f8e0:	463c      	mov	r4, r7
 800f8e2:	e7e0      	b.n	800f8a6 <_realloc_r+0x1e>

0800f8e4 <__ascii_wctomb>:
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	4608      	mov	r0, r1
 800f8e8:	b141      	cbz	r1, 800f8fc <__ascii_wctomb+0x18>
 800f8ea:	2aff      	cmp	r2, #255	@ 0xff
 800f8ec:	d904      	bls.n	800f8f8 <__ascii_wctomb+0x14>
 800f8ee:	228a      	movs	r2, #138	@ 0x8a
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f6:	4770      	bx	lr
 800f8f8:	700a      	strb	r2, [r1, #0]
 800f8fa:	2001      	movs	r0, #1
 800f8fc:	4770      	bx	lr
	...

0800f900 <fiprintf>:
 800f900:	b40e      	push	{r1, r2, r3}
 800f902:	b503      	push	{r0, r1, lr}
 800f904:	4601      	mov	r1, r0
 800f906:	ab03      	add	r3, sp, #12
 800f908:	4805      	ldr	r0, [pc, #20]	@ (800f920 <fiprintf+0x20>)
 800f90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f90e:	6800      	ldr	r0, [r0, #0]
 800f910:	9301      	str	r3, [sp, #4]
 800f912:	f000 f83f 	bl	800f994 <_vfiprintf_r>
 800f916:	b002      	add	sp, #8
 800f918:	f85d eb04 	ldr.w	lr, [sp], #4
 800f91c:	b003      	add	sp, #12
 800f91e:	4770      	bx	lr
 800f920:	20000134 	.word	0x20000134

0800f924 <abort>:
 800f924:	b508      	push	{r3, lr}
 800f926:	2006      	movs	r0, #6
 800f928:	f000 fa08 	bl	800fd3c <raise>
 800f92c:	2001      	movs	r0, #1
 800f92e:	f7f4 f81b 	bl	8003968 <_exit>

0800f932 <_malloc_usable_size_r>:
 800f932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f936:	1f18      	subs	r0, r3, #4
 800f938:	2b00      	cmp	r3, #0
 800f93a:	bfbc      	itt	lt
 800f93c:	580b      	ldrlt	r3, [r1, r0]
 800f93e:	18c0      	addlt	r0, r0, r3
 800f940:	4770      	bx	lr

0800f942 <__sfputc_r>:
 800f942:	6893      	ldr	r3, [r2, #8]
 800f944:	3b01      	subs	r3, #1
 800f946:	2b00      	cmp	r3, #0
 800f948:	b410      	push	{r4}
 800f94a:	6093      	str	r3, [r2, #8]
 800f94c:	da08      	bge.n	800f960 <__sfputc_r+0x1e>
 800f94e:	6994      	ldr	r4, [r2, #24]
 800f950:	42a3      	cmp	r3, r4
 800f952:	db01      	blt.n	800f958 <__sfputc_r+0x16>
 800f954:	290a      	cmp	r1, #10
 800f956:	d103      	bne.n	800f960 <__sfputc_r+0x1e>
 800f958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f95c:	f000 b932 	b.w	800fbc4 <__swbuf_r>
 800f960:	6813      	ldr	r3, [r2, #0]
 800f962:	1c58      	adds	r0, r3, #1
 800f964:	6010      	str	r0, [r2, #0]
 800f966:	7019      	strb	r1, [r3, #0]
 800f968:	4608      	mov	r0, r1
 800f96a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <__sfputs_r>:
 800f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f972:	4606      	mov	r6, r0
 800f974:	460f      	mov	r7, r1
 800f976:	4614      	mov	r4, r2
 800f978:	18d5      	adds	r5, r2, r3
 800f97a:	42ac      	cmp	r4, r5
 800f97c:	d101      	bne.n	800f982 <__sfputs_r+0x12>
 800f97e:	2000      	movs	r0, #0
 800f980:	e007      	b.n	800f992 <__sfputs_r+0x22>
 800f982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f986:	463a      	mov	r2, r7
 800f988:	4630      	mov	r0, r6
 800f98a:	f7ff ffda 	bl	800f942 <__sfputc_r>
 800f98e:	1c43      	adds	r3, r0, #1
 800f990:	d1f3      	bne.n	800f97a <__sfputs_r+0xa>
 800f992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f994 <_vfiprintf_r>:
 800f994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f998:	460d      	mov	r5, r1
 800f99a:	b09d      	sub	sp, #116	@ 0x74
 800f99c:	4614      	mov	r4, r2
 800f99e:	4698      	mov	r8, r3
 800f9a0:	4606      	mov	r6, r0
 800f9a2:	b118      	cbz	r0, 800f9ac <_vfiprintf_r+0x18>
 800f9a4:	6a03      	ldr	r3, [r0, #32]
 800f9a6:	b90b      	cbnz	r3, 800f9ac <_vfiprintf_r+0x18>
 800f9a8:	f7fe f8f4 	bl	800db94 <__sinit>
 800f9ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9ae:	07d9      	lsls	r1, r3, #31
 800f9b0:	d405      	bmi.n	800f9be <_vfiprintf_r+0x2a>
 800f9b2:	89ab      	ldrh	r3, [r5, #12]
 800f9b4:	059a      	lsls	r2, r3, #22
 800f9b6:	d402      	bmi.n	800f9be <_vfiprintf_r+0x2a>
 800f9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9ba:	f7fe fa02 	bl	800ddc2 <__retarget_lock_acquire_recursive>
 800f9be:	89ab      	ldrh	r3, [r5, #12]
 800f9c0:	071b      	lsls	r3, r3, #28
 800f9c2:	d501      	bpl.n	800f9c8 <_vfiprintf_r+0x34>
 800f9c4:	692b      	ldr	r3, [r5, #16]
 800f9c6:	b99b      	cbnz	r3, 800f9f0 <_vfiprintf_r+0x5c>
 800f9c8:	4629      	mov	r1, r5
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f000 f938 	bl	800fc40 <__swsetup_r>
 800f9d0:	b170      	cbz	r0, 800f9f0 <_vfiprintf_r+0x5c>
 800f9d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9d4:	07dc      	lsls	r4, r3, #31
 800f9d6:	d504      	bpl.n	800f9e2 <_vfiprintf_r+0x4e>
 800f9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9dc:	b01d      	add	sp, #116	@ 0x74
 800f9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e2:	89ab      	ldrh	r3, [r5, #12]
 800f9e4:	0598      	lsls	r0, r3, #22
 800f9e6:	d4f7      	bmi.n	800f9d8 <_vfiprintf_r+0x44>
 800f9e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9ea:	f7fe f9eb 	bl	800ddc4 <__retarget_lock_release_recursive>
 800f9ee:	e7f3      	b.n	800f9d8 <_vfiprintf_r+0x44>
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9f4:	2320      	movs	r3, #32
 800f9f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9fe:	2330      	movs	r3, #48	@ 0x30
 800fa00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fbb0 <_vfiprintf_r+0x21c>
 800fa04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa08:	f04f 0901 	mov.w	r9, #1
 800fa0c:	4623      	mov	r3, r4
 800fa0e:	469a      	mov	sl, r3
 800fa10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa14:	b10a      	cbz	r2, 800fa1a <_vfiprintf_r+0x86>
 800fa16:	2a25      	cmp	r2, #37	@ 0x25
 800fa18:	d1f9      	bne.n	800fa0e <_vfiprintf_r+0x7a>
 800fa1a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa1e:	d00b      	beq.n	800fa38 <_vfiprintf_r+0xa4>
 800fa20:	465b      	mov	r3, fp
 800fa22:	4622      	mov	r2, r4
 800fa24:	4629      	mov	r1, r5
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7ff ffa2 	bl	800f970 <__sfputs_r>
 800fa2c:	3001      	adds	r0, #1
 800fa2e:	f000 80a7 	beq.w	800fb80 <_vfiprintf_r+0x1ec>
 800fa32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa34:	445a      	add	r2, fp
 800fa36:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa38:	f89a 3000 	ldrb.w	r3, [sl]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f000 809f 	beq.w	800fb80 <_vfiprintf_r+0x1ec>
 800fa42:	2300      	movs	r3, #0
 800fa44:	f04f 32ff 	mov.w	r2, #4294967295
 800fa48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa4c:	f10a 0a01 	add.w	sl, sl, #1
 800fa50:	9304      	str	r3, [sp, #16]
 800fa52:	9307      	str	r3, [sp, #28]
 800fa54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa58:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa5a:	4654      	mov	r4, sl
 800fa5c:	2205      	movs	r2, #5
 800fa5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa62:	4853      	ldr	r0, [pc, #332]	@ (800fbb0 <_vfiprintf_r+0x21c>)
 800fa64:	f7f0 fbb4 	bl	80001d0 <memchr>
 800fa68:	9a04      	ldr	r2, [sp, #16]
 800fa6a:	b9d8      	cbnz	r0, 800faa4 <_vfiprintf_r+0x110>
 800fa6c:	06d1      	lsls	r1, r2, #27
 800fa6e:	bf44      	itt	mi
 800fa70:	2320      	movmi	r3, #32
 800fa72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa76:	0713      	lsls	r3, r2, #28
 800fa78:	bf44      	itt	mi
 800fa7a:	232b      	movmi	r3, #43	@ 0x2b
 800fa7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa80:	f89a 3000 	ldrb.w	r3, [sl]
 800fa84:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa86:	d015      	beq.n	800fab4 <_vfiprintf_r+0x120>
 800fa88:	9a07      	ldr	r2, [sp, #28]
 800fa8a:	4654      	mov	r4, sl
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	f04f 0c0a 	mov.w	ip, #10
 800fa92:	4621      	mov	r1, r4
 800fa94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa98:	3b30      	subs	r3, #48	@ 0x30
 800fa9a:	2b09      	cmp	r3, #9
 800fa9c:	d94b      	bls.n	800fb36 <_vfiprintf_r+0x1a2>
 800fa9e:	b1b0      	cbz	r0, 800face <_vfiprintf_r+0x13a>
 800faa0:	9207      	str	r2, [sp, #28]
 800faa2:	e014      	b.n	800face <_vfiprintf_r+0x13a>
 800faa4:	eba0 0308 	sub.w	r3, r0, r8
 800faa8:	fa09 f303 	lsl.w	r3, r9, r3
 800faac:	4313      	orrs	r3, r2
 800faae:	9304      	str	r3, [sp, #16]
 800fab0:	46a2      	mov	sl, r4
 800fab2:	e7d2      	b.n	800fa5a <_vfiprintf_r+0xc6>
 800fab4:	9b03      	ldr	r3, [sp, #12]
 800fab6:	1d19      	adds	r1, r3, #4
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	9103      	str	r1, [sp, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	bfbb      	ittet	lt
 800fac0:	425b      	neglt	r3, r3
 800fac2:	f042 0202 	orrlt.w	r2, r2, #2
 800fac6:	9307      	strge	r3, [sp, #28]
 800fac8:	9307      	strlt	r3, [sp, #28]
 800faca:	bfb8      	it	lt
 800facc:	9204      	strlt	r2, [sp, #16]
 800face:	7823      	ldrb	r3, [r4, #0]
 800fad0:	2b2e      	cmp	r3, #46	@ 0x2e
 800fad2:	d10a      	bne.n	800faea <_vfiprintf_r+0x156>
 800fad4:	7863      	ldrb	r3, [r4, #1]
 800fad6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fad8:	d132      	bne.n	800fb40 <_vfiprintf_r+0x1ac>
 800fada:	9b03      	ldr	r3, [sp, #12]
 800fadc:	1d1a      	adds	r2, r3, #4
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	9203      	str	r2, [sp, #12]
 800fae2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fae6:	3402      	adds	r4, #2
 800fae8:	9305      	str	r3, [sp, #20]
 800faea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fbc0 <_vfiprintf_r+0x22c>
 800faee:	7821      	ldrb	r1, [r4, #0]
 800faf0:	2203      	movs	r2, #3
 800faf2:	4650      	mov	r0, sl
 800faf4:	f7f0 fb6c 	bl	80001d0 <memchr>
 800faf8:	b138      	cbz	r0, 800fb0a <_vfiprintf_r+0x176>
 800fafa:	9b04      	ldr	r3, [sp, #16]
 800fafc:	eba0 000a 	sub.w	r0, r0, sl
 800fb00:	2240      	movs	r2, #64	@ 0x40
 800fb02:	4082      	lsls	r2, r0
 800fb04:	4313      	orrs	r3, r2
 800fb06:	3401      	adds	r4, #1
 800fb08:	9304      	str	r3, [sp, #16]
 800fb0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb0e:	4829      	ldr	r0, [pc, #164]	@ (800fbb4 <_vfiprintf_r+0x220>)
 800fb10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb14:	2206      	movs	r2, #6
 800fb16:	f7f0 fb5b 	bl	80001d0 <memchr>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d03f      	beq.n	800fb9e <_vfiprintf_r+0x20a>
 800fb1e:	4b26      	ldr	r3, [pc, #152]	@ (800fbb8 <_vfiprintf_r+0x224>)
 800fb20:	bb1b      	cbnz	r3, 800fb6a <_vfiprintf_r+0x1d6>
 800fb22:	9b03      	ldr	r3, [sp, #12]
 800fb24:	3307      	adds	r3, #7
 800fb26:	f023 0307 	bic.w	r3, r3, #7
 800fb2a:	3308      	adds	r3, #8
 800fb2c:	9303      	str	r3, [sp, #12]
 800fb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb30:	443b      	add	r3, r7
 800fb32:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb34:	e76a      	b.n	800fa0c <_vfiprintf_r+0x78>
 800fb36:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	2001      	movs	r0, #1
 800fb3e:	e7a8      	b.n	800fa92 <_vfiprintf_r+0xfe>
 800fb40:	2300      	movs	r3, #0
 800fb42:	3401      	adds	r4, #1
 800fb44:	9305      	str	r3, [sp, #20]
 800fb46:	4619      	mov	r1, r3
 800fb48:	f04f 0c0a 	mov.w	ip, #10
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb52:	3a30      	subs	r2, #48	@ 0x30
 800fb54:	2a09      	cmp	r2, #9
 800fb56:	d903      	bls.n	800fb60 <_vfiprintf_r+0x1cc>
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d0c6      	beq.n	800faea <_vfiprintf_r+0x156>
 800fb5c:	9105      	str	r1, [sp, #20]
 800fb5e:	e7c4      	b.n	800faea <_vfiprintf_r+0x156>
 800fb60:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb64:	4604      	mov	r4, r0
 800fb66:	2301      	movs	r3, #1
 800fb68:	e7f0      	b.n	800fb4c <_vfiprintf_r+0x1b8>
 800fb6a:	ab03      	add	r3, sp, #12
 800fb6c:	9300      	str	r3, [sp, #0]
 800fb6e:	462a      	mov	r2, r5
 800fb70:	4b12      	ldr	r3, [pc, #72]	@ (800fbbc <_vfiprintf_r+0x228>)
 800fb72:	a904      	add	r1, sp, #16
 800fb74:	4630      	mov	r0, r6
 800fb76:	f7fd fbc9 	bl	800d30c <_printf_float>
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	1c78      	adds	r0, r7, #1
 800fb7e:	d1d6      	bne.n	800fb2e <_vfiprintf_r+0x19a>
 800fb80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb82:	07d9      	lsls	r1, r3, #31
 800fb84:	d405      	bmi.n	800fb92 <_vfiprintf_r+0x1fe>
 800fb86:	89ab      	ldrh	r3, [r5, #12]
 800fb88:	059a      	lsls	r2, r3, #22
 800fb8a:	d402      	bmi.n	800fb92 <_vfiprintf_r+0x1fe>
 800fb8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb8e:	f7fe f919 	bl	800ddc4 <__retarget_lock_release_recursive>
 800fb92:	89ab      	ldrh	r3, [r5, #12]
 800fb94:	065b      	lsls	r3, r3, #25
 800fb96:	f53f af1f 	bmi.w	800f9d8 <_vfiprintf_r+0x44>
 800fb9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb9c:	e71e      	b.n	800f9dc <_vfiprintf_r+0x48>
 800fb9e:	ab03      	add	r3, sp, #12
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	462a      	mov	r2, r5
 800fba4:	4b05      	ldr	r3, [pc, #20]	@ (800fbbc <_vfiprintf_r+0x228>)
 800fba6:	a904      	add	r1, sp, #16
 800fba8:	4630      	mov	r0, r6
 800fbaa:	f7fd fe47 	bl	800d83c <_printf_i>
 800fbae:	e7e4      	b.n	800fb7a <_vfiprintf_r+0x1e6>
 800fbb0:	08012738 	.word	0x08012738
 800fbb4:	08012742 	.word	0x08012742
 800fbb8:	0800d30d 	.word	0x0800d30d
 800fbbc:	0800f971 	.word	0x0800f971
 800fbc0:	0801273e 	.word	0x0801273e

0800fbc4 <__swbuf_r>:
 800fbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbc6:	460e      	mov	r6, r1
 800fbc8:	4614      	mov	r4, r2
 800fbca:	4605      	mov	r5, r0
 800fbcc:	b118      	cbz	r0, 800fbd6 <__swbuf_r+0x12>
 800fbce:	6a03      	ldr	r3, [r0, #32]
 800fbd0:	b90b      	cbnz	r3, 800fbd6 <__swbuf_r+0x12>
 800fbd2:	f7fd ffdf 	bl	800db94 <__sinit>
 800fbd6:	69a3      	ldr	r3, [r4, #24]
 800fbd8:	60a3      	str	r3, [r4, #8]
 800fbda:	89a3      	ldrh	r3, [r4, #12]
 800fbdc:	071a      	lsls	r2, r3, #28
 800fbde:	d501      	bpl.n	800fbe4 <__swbuf_r+0x20>
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	b943      	cbnz	r3, 800fbf6 <__swbuf_r+0x32>
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f000 f82a 	bl	800fc40 <__swsetup_r>
 800fbec:	b118      	cbz	r0, 800fbf6 <__swbuf_r+0x32>
 800fbee:	f04f 37ff 	mov.w	r7, #4294967295
 800fbf2:	4638      	mov	r0, r7
 800fbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	6922      	ldr	r2, [r4, #16]
 800fbfa:	1a98      	subs	r0, r3, r2
 800fbfc:	6963      	ldr	r3, [r4, #20]
 800fbfe:	b2f6      	uxtb	r6, r6
 800fc00:	4283      	cmp	r3, r0
 800fc02:	4637      	mov	r7, r6
 800fc04:	dc05      	bgt.n	800fc12 <__swbuf_r+0x4e>
 800fc06:	4621      	mov	r1, r4
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f7ff fda7 	bl	800f75c <_fflush_r>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d1ed      	bne.n	800fbee <__swbuf_r+0x2a>
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	3b01      	subs	r3, #1
 800fc16:	60a3      	str	r3, [r4, #8]
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	1c5a      	adds	r2, r3, #1
 800fc1c:	6022      	str	r2, [r4, #0]
 800fc1e:	701e      	strb	r6, [r3, #0]
 800fc20:	6962      	ldr	r2, [r4, #20]
 800fc22:	1c43      	adds	r3, r0, #1
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d004      	beq.n	800fc32 <__swbuf_r+0x6e>
 800fc28:	89a3      	ldrh	r3, [r4, #12]
 800fc2a:	07db      	lsls	r3, r3, #31
 800fc2c:	d5e1      	bpl.n	800fbf2 <__swbuf_r+0x2e>
 800fc2e:	2e0a      	cmp	r6, #10
 800fc30:	d1df      	bne.n	800fbf2 <__swbuf_r+0x2e>
 800fc32:	4621      	mov	r1, r4
 800fc34:	4628      	mov	r0, r5
 800fc36:	f7ff fd91 	bl	800f75c <_fflush_r>
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d0d9      	beq.n	800fbf2 <__swbuf_r+0x2e>
 800fc3e:	e7d6      	b.n	800fbee <__swbuf_r+0x2a>

0800fc40 <__swsetup_r>:
 800fc40:	b538      	push	{r3, r4, r5, lr}
 800fc42:	4b29      	ldr	r3, [pc, #164]	@ (800fce8 <__swsetup_r+0xa8>)
 800fc44:	4605      	mov	r5, r0
 800fc46:	6818      	ldr	r0, [r3, #0]
 800fc48:	460c      	mov	r4, r1
 800fc4a:	b118      	cbz	r0, 800fc54 <__swsetup_r+0x14>
 800fc4c:	6a03      	ldr	r3, [r0, #32]
 800fc4e:	b90b      	cbnz	r3, 800fc54 <__swsetup_r+0x14>
 800fc50:	f7fd ffa0 	bl	800db94 <__sinit>
 800fc54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc58:	0719      	lsls	r1, r3, #28
 800fc5a:	d422      	bmi.n	800fca2 <__swsetup_r+0x62>
 800fc5c:	06da      	lsls	r2, r3, #27
 800fc5e:	d407      	bmi.n	800fc70 <__swsetup_r+0x30>
 800fc60:	2209      	movs	r2, #9
 800fc62:	602a      	str	r2, [r5, #0]
 800fc64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc68:	81a3      	strh	r3, [r4, #12]
 800fc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6e:	e033      	b.n	800fcd8 <__swsetup_r+0x98>
 800fc70:	0758      	lsls	r0, r3, #29
 800fc72:	d512      	bpl.n	800fc9a <__swsetup_r+0x5a>
 800fc74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc76:	b141      	cbz	r1, 800fc8a <__swsetup_r+0x4a>
 800fc78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc7c:	4299      	cmp	r1, r3
 800fc7e:	d002      	beq.n	800fc86 <__swsetup_r+0x46>
 800fc80:	4628      	mov	r0, r5
 800fc82:	f7fe ff0d 	bl	800eaa0 <_free_r>
 800fc86:	2300      	movs	r3, #0
 800fc88:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc8a:	89a3      	ldrh	r3, [r4, #12]
 800fc8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fc90:	81a3      	strh	r3, [r4, #12]
 800fc92:	2300      	movs	r3, #0
 800fc94:	6063      	str	r3, [r4, #4]
 800fc96:	6923      	ldr	r3, [r4, #16]
 800fc98:	6023      	str	r3, [r4, #0]
 800fc9a:	89a3      	ldrh	r3, [r4, #12]
 800fc9c:	f043 0308 	orr.w	r3, r3, #8
 800fca0:	81a3      	strh	r3, [r4, #12]
 800fca2:	6923      	ldr	r3, [r4, #16]
 800fca4:	b94b      	cbnz	r3, 800fcba <__swsetup_r+0x7a>
 800fca6:	89a3      	ldrh	r3, [r4, #12]
 800fca8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fcac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fcb0:	d003      	beq.n	800fcba <__swsetup_r+0x7a>
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	f000 f883 	bl	800fdc0 <__smakebuf_r>
 800fcba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcbe:	f013 0201 	ands.w	r2, r3, #1
 800fcc2:	d00a      	beq.n	800fcda <__swsetup_r+0x9a>
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	60a2      	str	r2, [r4, #8]
 800fcc8:	6962      	ldr	r2, [r4, #20]
 800fcca:	4252      	negs	r2, r2
 800fccc:	61a2      	str	r2, [r4, #24]
 800fcce:	6922      	ldr	r2, [r4, #16]
 800fcd0:	b942      	cbnz	r2, 800fce4 <__swsetup_r+0xa4>
 800fcd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fcd6:	d1c5      	bne.n	800fc64 <__swsetup_r+0x24>
 800fcd8:	bd38      	pop	{r3, r4, r5, pc}
 800fcda:	0799      	lsls	r1, r3, #30
 800fcdc:	bf58      	it	pl
 800fcde:	6962      	ldrpl	r2, [r4, #20]
 800fce0:	60a2      	str	r2, [r4, #8]
 800fce2:	e7f4      	b.n	800fcce <__swsetup_r+0x8e>
 800fce4:	2000      	movs	r0, #0
 800fce6:	e7f7      	b.n	800fcd8 <__swsetup_r+0x98>
 800fce8:	20000134 	.word	0x20000134

0800fcec <_raise_r>:
 800fcec:	291f      	cmp	r1, #31
 800fcee:	b538      	push	{r3, r4, r5, lr}
 800fcf0:	4605      	mov	r5, r0
 800fcf2:	460c      	mov	r4, r1
 800fcf4:	d904      	bls.n	800fd00 <_raise_r+0x14>
 800fcf6:	2316      	movs	r3, #22
 800fcf8:	6003      	str	r3, [r0, #0]
 800fcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800fcfe:	bd38      	pop	{r3, r4, r5, pc}
 800fd00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fd02:	b112      	cbz	r2, 800fd0a <_raise_r+0x1e>
 800fd04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd08:	b94b      	cbnz	r3, 800fd1e <_raise_r+0x32>
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	f000 f830 	bl	800fd70 <_getpid_r>
 800fd10:	4622      	mov	r2, r4
 800fd12:	4601      	mov	r1, r0
 800fd14:	4628      	mov	r0, r5
 800fd16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd1a:	f000 b817 	b.w	800fd4c <_kill_r>
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d00a      	beq.n	800fd38 <_raise_r+0x4c>
 800fd22:	1c59      	adds	r1, r3, #1
 800fd24:	d103      	bne.n	800fd2e <_raise_r+0x42>
 800fd26:	2316      	movs	r3, #22
 800fd28:	6003      	str	r3, [r0, #0]
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	e7e7      	b.n	800fcfe <_raise_r+0x12>
 800fd2e:	2100      	movs	r1, #0
 800fd30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fd34:	4620      	mov	r0, r4
 800fd36:	4798      	blx	r3
 800fd38:	2000      	movs	r0, #0
 800fd3a:	e7e0      	b.n	800fcfe <_raise_r+0x12>

0800fd3c <raise>:
 800fd3c:	4b02      	ldr	r3, [pc, #8]	@ (800fd48 <raise+0xc>)
 800fd3e:	4601      	mov	r1, r0
 800fd40:	6818      	ldr	r0, [r3, #0]
 800fd42:	f7ff bfd3 	b.w	800fcec <_raise_r>
 800fd46:	bf00      	nop
 800fd48:	20000134 	.word	0x20000134

0800fd4c <_kill_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	4d07      	ldr	r5, [pc, #28]	@ (800fd6c <_kill_r+0x20>)
 800fd50:	2300      	movs	r3, #0
 800fd52:	4604      	mov	r4, r0
 800fd54:	4608      	mov	r0, r1
 800fd56:	4611      	mov	r1, r2
 800fd58:	602b      	str	r3, [r5, #0]
 800fd5a:	f7f3 fdf5 	bl	8003948 <_kill>
 800fd5e:	1c43      	adds	r3, r0, #1
 800fd60:	d102      	bne.n	800fd68 <_kill_r+0x1c>
 800fd62:	682b      	ldr	r3, [r5, #0]
 800fd64:	b103      	cbz	r3, 800fd68 <_kill_r+0x1c>
 800fd66:	6023      	str	r3, [r4, #0]
 800fd68:	bd38      	pop	{r3, r4, r5, pc}
 800fd6a:	bf00      	nop
 800fd6c:	20002680 	.word	0x20002680

0800fd70 <_getpid_r>:
 800fd70:	f7f3 bde2 	b.w	8003938 <_getpid>

0800fd74 <__swhatbuf_r>:
 800fd74:	b570      	push	{r4, r5, r6, lr}
 800fd76:	460c      	mov	r4, r1
 800fd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd7c:	2900      	cmp	r1, #0
 800fd7e:	b096      	sub	sp, #88	@ 0x58
 800fd80:	4615      	mov	r5, r2
 800fd82:	461e      	mov	r6, r3
 800fd84:	da0d      	bge.n	800fda2 <__swhatbuf_r+0x2e>
 800fd86:	89a3      	ldrh	r3, [r4, #12]
 800fd88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd8c:	f04f 0100 	mov.w	r1, #0
 800fd90:	bf14      	ite	ne
 800fd92:	2340      	movne	r3, #64	@ 0x40
 800fd94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd98:	2000      	movs	r0, #0
 800fd9a:	6031      	str	r1, [r6, #0]
 800fd9c:	602b      	str	r3, [r5, #0]
 800fd9e:	b016      	add	sp, #88	@ 0x58
 800fda0:	bd70      	pop	{r4, r5, r6, pc}
 800fda2:	466a      	mov	r2, sp
 800fda4:	f000 f848 	bl	800fe38 <_fstat_r>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	dbec      	blt.n	800fd86 <__swhatbuf_r+0x12>
 800fdac:	9901      	ldr	r1, [sp, #4]
 800fdae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fdb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fdb6:	4259      	negs	r1, r3
 800fdb8:	4159      	adcs	r1, r3
 800fdba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fdbe:	e7eb      	b.n	800fd98 <__swhatbuf_r+0x24>

0800fdc0 <__smakebuf_r>:
 800fdc0:	898b      	ldrh	r3, [r1, #12]
 800fdc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdc4:	079d      	lsls	r5, r3, #30
 800fdc6:	4606      	mov	r6, r0
 800fdc8:	460c      	mov	r4, r1
 800fdca:	d507      	bpl.n	800fddc <__smakebuf_r+0x1c>
 800fdcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fdd0:	6023      	str	r3, [r4, #0]
 800fdd2:	6123      	str	r3, [r4, #16]
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	6163      	str	r3, [r4, #20]
 800fdd8:	b003      	add	sp, #12
 800fdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fddc:	ab01      	add	r3, sp, #4
 800fdde:	466a      	mov	r2, sp
 800fde0:	f7ff ffc8 	bl	800fd74 <__swhatbuf_r>
 800fde4:	9f00      	ldr	r7, [sp, #0]
 800fde6:	4605      	mov	r5, r0
 800fde8:	4639      	mov	r1, r7
 800fdea:	4630      	mov	r0, r6
 800fdec:	f7fe fecc 	bl	800eb88 <_malloc_r>
 800fdf0:	b948      	cbnz	r0, 800fe06 <__smakebuf_r+0x46>
 800fdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdf6:	059a      	lsls	r2, r3, #22
 800fdf8:	d4ee      	bmi.n	800fdd8 <__smakebuf_r+0x18>
 800fdfa:	f023 0303 	bic.w	r3, r3, #3
 800fdfe:	f043 0302 	orr.w	r3, r3, #2
 800fe02:	81a3      	strh	r3, [r4, #12]
 800fe04:	e7e2      	b.n	800fdcc <__smakebuf_r+0xc>
 800fe06:	89a3      	ldrh	r3, [r4, #12]
 800fe08:	6020      	str	r0, [r4, #0]
 800fe0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe0e:	81a3      	strh	r3, [r4, #12]
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fe16:	b15b      	cbz	r3, 800fe30 <__smakebuf_r+0x70>
 800fe18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	f000 f81d 	bl	800fe5c <_isatty_r>
 800fe22:	b128      	cbz	r0, 800fe30 <__smakebuf_r+0x70>
 800fe24:	89a3      	ldrh	r3, [r4, #12]
 800fe26:	f023 0303 	bic.w	r3, r3, #3
 800fe2a:	f043 0301 	orr.w	r3, r3, #1
 800fe2e:	81a3      	strh	r3, [r4, #12]
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	431d      	orrs	r5, r3
 800fe34:	81a5      	strh	r5, [r4, #12]
 800fe36:	e7cf      	b.n	800fdd8 <__smakebuf_r+0x18>

0800fe38 <_fstat_r>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	4d07      	ldr	r5, [pc, #28]	@ (800fe58 <_fstat_r+0x20>)
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	4604      	mov	r4, r0
 800fe40:	4608      	mov	r0, r1
 800fe42:	4611      	mov	r1, r2
 800fe44:	602b      	str	r3, [r5, #0]
 800fe46:	f7f3 fddf 	bl	8003a08 <_fstat>
 800fe4a:	1c43      	adds	r3, r0, #1
 800fe4c:	d102      	bne.n	800fe54 <_fstat_r+0x1c>
 800fe4e:	682b      	ldr	r3, [r5, #0]
 800fe50:	b103      	cbz	r3, 800fe54 <_fstat_r+0x1c>
 800fe52:	6023      	str	r3, [r4, #0]
 800fe54:	bd38      	pop	{r3, r4, r5, pc}
 800fe56:	bf00      	nop
 800fe58:	20002680 	.word	0x20002680

0800fe5c <_isatty_r>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	4d06      	ldr	r5, [pc, #24]	@ (800fe78 <_isatty_r+0x1c>)
 800fe60:	2300      	movs	r3, #0
 800fe62:	4604      	mov	r4, r0
 800fe64:	4608      	mov	r0, r1
 800fe66:	602b      	str	r3, [r5, #0]
 800fe68:	f7f3 fdde 	bl	8003a28 <_isatty>
 800fe6c:	1c43      	adds	r3, r0, #1
 800fe6e:	d102      	bne.n	800fe76 <_isatty_r+0x1a>
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	b103      	cbz	r3, 800fe76 <_isatty_r+0x1a>
 800fe74:	6023      	str	r3, [r4, #0]
 800fe76:	bd38      	pop	{r3, r4, r5, pc}
 800fe78:	20002680 	.word	0x20002680

0800fe7c <asin>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	ed2d 8b02 	vpush	{d8}
 800fe82:	ec55 4b10 	vmov	r4, r5, d0
 800fe86:	f000 fa93 	bl	80103b0 <__ieee754_asin>
 800fe8a:	4622      	mov	r2, r4
 800fe8c:	462b      	mov	r3, r5
 800fe8e:	4620      	mov	r0, r4
 800fe90:	4629      	mov	r1, r5
 800fe92:	eeb0 8a40 	vmov.f32	s16, s0
 800fe96:	eef0 8a60 	vmov.f32	s17, s1
 800fe9a:	f7f0 fe47 	bl	8000b2c <__aeabi_dcmpun>
 800fe9e:	b9a8      	cbnz	r0, 800fecc <asin+0x50>
 800fea0:	ec45 4b10 	vmov	d0, r4, r5
 800fea4:	f000 f8bc 	bl	8010020 <fabs>
 800fea8:	4b0c      	ldr	r3, [pc, #48]	@ (800fedc <asin+0x60>)
 800feaa:	ec51 0b10 	vmov	r0, r1, d0
 800feae:	2200      	movs	r2, #0
 800feb0:	f7f0 fe32 	bl	8000b18 <__aeabi_dcmpgt>
 800feb4:	b150      	cbz	r0, 800fecc <asin+0x50>
 800feb6:	f7fd ff59 	bl	800dd6c <__errno>
 800feba:	ecbd 8b02 	vpop	{d8}
 800febe:	2321      	movs	r3, #33	@ 0x21
 800fec0:	6003      	str	r3, [r0, #0]
 800fec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fec6:	4806      	ldr	r0, [pc, #24]	@ (800fee0 <asin+0x64>)
 800fec8:	f000 b986 	b.w	80101d8 <nan>
 800fecc:	eeb0 0a48 	vmov.f32	s0, s16
 800fed0:	eef0 0a68 	vmov.f32	s1, s17
 800fed4:	ecbd 8b02 	vpop	{d8}
 800fed8:	bd38      	pop	{r3, r4, r5, pc}
 800feda:	bf00      	nop
 800fedc:	3ff00000 	.word	0x3ff00000
 800fee0:	0801278e 	.word	0x0801278e

0800fee4 <atan2>:
 800fee4:	f000 bc68 	b.w	80107b8 <__ieee754_atan2>

0800fee8 <pow>:
 800fee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feea:	ed2d 8b02 	vpush	{d8}
 800feee:	eeb0 8a40 	vmov.f32	s16, s0
 800fef2:	eef0 8a60 	vmov.f32	s17, s1
 800fef6:	ec55 4b11 	vmov	r4, r5, d1
 800fefa:	f000 fd25 	bl	8010948 <__ieee754_pow>
 800fefe:	4622      	mov	r2, r4
 800ff00:	462b      	mov	r3, r5
 800ff02:	4620      	mov	r0, r4
 800ff04:	4629      	mov	r1, r5
 800ff06:	ec57 6b10 	vmov	r6, r7, d0
 800ff0a:	f7f0 fe0f 	bl	8000b2c <__aeabi_dcmpun>
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	d13b      	bne.n	800ff8a <pow+0xa2>
 800ff12:	ec51 0b18 	vmov	r0, r1, d8
 800ff16:	2200      	movs	r2, #0
 800ff18:	2300      	movs	r3, #0
 800ff1a:	f7f0 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff1e:	b1b8      	cbz	r0, 800ff50 <pow+0x68>
 800ff20:	2200      	movs	r2, #0
 800ff22:	2300      	movs	r3, #0
 800ff24:	4620      	mov	r0, r4
 800ff26:	4629      	mov	r1, r5
 800ff28:	f7f0 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d146      	bne.n	800ffbe <pow+0xd6>
 800ff30:	ec45 4b10 	vmov	d0, r4, r5
 800ff34:	f000 f944 	bl	80101c0 <finite>
 800ff38:	b338      	cbz	r0, 800ff8a <pow+0xa2>
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	4620      	mov	r0, r4
 800ff40:	4629      	mov	r1, r5
 800ff42:	f7f0 fdcb 	bl	8000adc <__aeabi_dcmplt>
 800ff46:	b300      	cbz	r0, 800ff8a <pow+0xa2>
 800ff48:	f7fd ff10 	bl	800dd6c <__errno>
 800ff4c:	2322      	movs	r3, #34	@ 0x22
 800ff4e:	e01b      	b.n	800ff88 <pow+0xa0>
 800ff50:	ec47 6b10 	vmov	d0, r6, r7
 800ff54:	f000 f934 	bl	80101c0 <finite>
 800ff58:	b9e0      	cbnz	r0, 800ff94 <pow+0xac>
 800ff5a:	eeb0 0a48 	vmov.f32	s0, s16
 800ff5e:	eef0 0a68 	vmov.f32	s1, s17
 800ff62:	f000 f92d 	bl	80101c0 <finite>
 800ff66:	b1a8      	cbz	r0, 800ff94 <pow+0xac>
 800ff68:	ec45 4b10 	vmov	d0, r4, r5
 800ff6c:	f000 f928 	bl	80101c0 <finite>
 800ff70:	b180      	cbz	r0, 800ff94 <pow+0xac>
 800ff72:	4632      	mov	r2, r6
 800ff74:	463b      	mov	r3, r7
 800ff76:	4630      	mov	r0, r6
 800ff78:	4639      	mov	r1, r7
 800ff7a:	f7f0 fdd7 	bl	8000b2c <__aeabi_dcmpun>
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	d0e2      	beq.n	800ff48 <pow+0x60>
 800ff82:	f7fd fef3 	bl	800dd6c <__errno>
 800ff86:	2321      	movs	r3, #33	@ 0x21
 800ff88:	6003      	str	r3, [r0, #0]
 800ff8a:	ecbd 8b02 	vpop	{d8}
 800ff8e:	ec47 6b10 	vmov	d0, r6, r7
 800ff92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff94:	2200      	movs	r2, #0
 800ff96:	2300      	movs	r3, #0
 800ff98:	4630      	mov	r0, r6
 800ff9a:	4639      	mov	r1, r7
 800ff9c:	f7f0 fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d0f2      	beq.n	800ff8a <pow+0xa2>
 800ffa4:	eeb0 0a48 	vmov.f32	s0, s16
 800ffa8:	eef0 0a68 	vmov.f32	s1, s17
 800ffac:	f000 f908 	bl	80101c0 <finite>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	d0ea      	beq.n	800ff8a <pow+0xa2>
 800ffb4:	ec45 4b10 	vmov	d0, r4, r5
 800ffb8:	f000 f902 	bl	80101c0 <finite>
 800ffbc:	e7c3      	b.n	800ff46 <pow+0x5e>
 800ffbe:	4f01      	ldr	r7, [pc, #4]	@ (800ffc4 <pow+0xdc>)
 800ffc0:	2600      	movs	r6, #0
 800ffc2:	e7e2      	b.n	800ff8a <pow+0xa2>
 800ffc4:	3ff00000 	.word	0x3ff00000

0800ffc8 <sqrt>:
 800ffc8:	b538      	push	{r3, r4, r5, lr}
 800ffca:	ed2d 8b02 	vpush	{d8}
 800ffce:	ec55 4b10 	vmov	r4, r5, d0
 800ffd2:	f000 f913 	bl	80101fc <__ieee754_sqrt>
 800ffd6:	4622      	mov	r2, r4
 800ffd8:	462b      	mov	r3, r5
 800ffda:	4620      	mov	r0, r4
 800ffdc:	4629      	mov	r1, r5
 800ffde:	eeb0 8a40 	vmov.f32	s16, s0
 800ffe2:	eef0 8a60 	vmov.f32	s17, s1
 800ffe6:	f7f0 fda1 	bl	8000b2c <__aeabi_dcmpun>
 800ffea:	b990      	cbnz	r0, 8010012 <sqrt+0x4a>
 800ffec:	2200      	movs	r2, #0
 800ffee:	2300      	movs	r3, #0
 800fff0:	4620      	mov	r0, r4
 800fff2:	4629      	mov	r1, r5
 800fff4:	f7f0 fd72 	bl	8000adc <__aeabi_dcmplt>
 800fff8:	b158      	cbz	r0, 8010012 <sqrt+0x4a>
 800fffa:	f7fd feb7 	bl	800dd6c <__errno>
 800fffe:	2321      	movs	r3, #33	@ 0x21
 8010000:	6003      	str	r3, [r0, #0]
 8010002:	2200      	movs	r2, #0
 8010004:	2300      	movs	r3, #0
 8010006:	4610      	mov	r0, r2
 8010008:	4619      	mov	r1, r3
 801000a:	f7f0 fc1f 	bl	800084c <__aeabi_ddiv>
 801000e:	ec41 0b18 	vmov	d8, r0, r1
 8010012:	eeb0 0a48 	vmov.f32	s0, s16
 8010016:	eef0 0a68 	vmov.f32	s1, s17
 801001a:	ecbd 8b02 	vpop	{d8}
 801001e:	bd38      	pop	{r3, r4, r5, pc}

08010020 <fabs>:
 8010020:	ec51 0b10 	vmov	r0, r1, d0
 8010024:	4602      	mov	r2, r0
 8010026:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801002a:	ec43 2b10 	vmov	d0, r2, r3
 801002e:	4770      	bx	lr

08010030 <expf>:
 8010030:	b508      	push	{r3, lr}
 8010032:	ed2d 8b02 	vpush	{d8}
 8010036:	eef0 8a40 	vmov.f32	s17, s0
 801003a:	f001 fc01 	bl	8011840 <__ieee754_expf>
 801003e:	eeb0 8a40 	vmov.f32	s16, s0
 8010042:	eeb0 0a68 	vmov.f32	s0, s17
 8010046:	f000 f8cf 	bl	80101e8 <finitef>
 801004a:	b160      	cbz	r0, 8010066 <expf+0x36>
 801004c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801008c <expf+0x5c>
 8010050:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010058:	dd0a      	ble.n	8010070 <expf+0x40>
 801005a:	f7fd fe87 	bl	800dd6c <__errno>
 801005e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8010090 <expf+0x60>
 8010062:	2322      	movs	r3, #34	@ 0x22
 8010064:	6003      	str	r3, [r0, #0]
 8010066:	eeb0 0a48 	vmov.f32	s0, s16
 801006a:	ecbd 8b02 	vpop	{d8}
 801006e:	bd08      	pop	{r3, pc}
 8010070:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010094 <expf+0x64>
 8010074:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007c:	d5f3      	bpl.n	8010066 <expf+0x36>
 801007e:	f7fd fe75 	bl	800dd6c <__errno>
 8010082:	2322      	movs	r3, #34	@ 0x22
 8010084:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8010098 <expf+0x68>
 8010088:	6003      	str	r3, [r0, #0]
 801008a:	e7ec      	b.n	8010066 <expf+0x36>
 801008c:	42b17217 	.word	0x42b17217
 8010090:	7f800000 	.word	0x7f800000
 8010094:	c2cff1b5 	.word	0xc2cff1b5
 8010098:	00000000 	.word	0x00000000

0801009c <cosf>:
 801009c:	ee10 3a10 	vmov	r3, s0
 80100a0:	b507      	push	{r0, r1, r2, lr}
 80100a2:	4a1e      	ldr	r2, [pc, #120]	@ (801011c <cosf+0x80>)
 80100a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d806      	bhi.n	80100ba <cosf+0x1e>
 80100ac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010120 <cosf+0x84>
 80100b0:	b003      	add	sp, #12
 80100b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80100b6:	f001 bb23 	b.w	8011700 <__kernel_cosf>
 80100ba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80100be:	d304      	bcc.n	80100ca <cosf+0x2e>
 80100c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80100c4:	b003      	add	sp, #12
 80100c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80100ca:	4668      	mov	r0, sp
 80100cc:	f001 fc86 	bl	80119dc <__ieee754_rem_pio2f>
 80100d0:	f000 0003 	and.w	r0, r0, #3
 80100d4:	2801      	cmp	r0, #1
 80100d6:	d009      	beq.n	80100ec <cosf+0x50>
 80100d8:	2802      	cmp	r0, #2
 80100da:	d010      	beq.n	80100fe <cosf+0x62>
 80100dc:	b9b0      	cbnz	r0, 801010c <cosf+0x70>
 80100de:	eddd 0a01 	vldr	s1, [sp, #4]
 80100e2:	ed9d 0a00 	vldr	s0, [sp]
 80100e6:	f001 fb0b 	bl	8011700 <__kernel_cosf>
 80100ea:	e7eb      	b.n	80100c4 <cosf+0x28>
 80100ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80100f0:	ed9d 0a00 	vldr	s0, [sp]
 80100f4:	f001 fb5c 	bl	80117b0 <__kernel_sinf>
 80100f8:	eeb1 0a40 	vneg.f32	s0, s0
 80100fc:	e7e2      	b.n	80100c4 <cosf+0x28>
 80100fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8010102:	ed9d 0a00 	vldr	s0, [sp]
 8010106:	f001 fafb 	bl	8011700 <__kernel_cosf>
 801010a:	e7f5      	b.n	80100f8 <cosf+0x5c>
 801010c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010110:	ed9d 0a00 	vldr	s0, [sp]
 8010114:	2001      	movs	r0, #1
 8010116:	f001 fb4b 	bl	80117b0 <__kernel_sinf>
 801011a:	e7d3      	b.n	80100c4 <cosf+0x28>
 801011c:	3f490fd8 	.word	0x3f490fd8
 8010120:	00000000 	.word	0x00000000

08010124 <fabsf>:
 8010124:	ee10 3a10 	vmov	r3, s0
 8010128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801012c:	ee00 3a10 	vmov	s0, r3
 8010130:	4770      	bx	lr
	...

08010134 <sinf>:
 8010134:	ee10 3a10 	vmov	r3, s0
 8010138:	b507      	push	{r0, r1, r2, lr}
 801013a:	4a1f      	ldr	r2, [pc, #124]	@ (80101b8 <sinf+0x84>)
 801013c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010140:	4293      	cmp	r3, r2
 8010142:	d807      	bhi.n	8010154 <sinf+0x20>
 8010144:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80101bc <sinf+0x88>
 8010148:	2000      	movs	r0, #0
 801014a:	b003      	add	sp, #12
 801014c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010150:	f001 bb2e 	b.w	80117b0 <__kernel_sinf>
 8010154:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010158:	d304      	bcc.n	8010164 <sinf+0x30>
 801015a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801015e:	b003      	add	sp, #12
 8010160:	f85d fb04 	ldr.w	pc, [sp], #4
 8010164:	4668      	mov	r0, sp
 8010166:	f001 fc39 	bl	80119dc <__ieee754_rem_pio2f>
 801016a:	f000 0003 	and.w	r0, r0, #3
 801016e:	2801      	cmp	r0, #1
 8010170:	d00a      	beq.n	8010188 <sinf+0x54>
 8010172:	2802      	cmp	r0, #2
 8010174:	d00f      	beq.n	8010196 <sinf+0x62>
 8010176:	b9c0      	cbnz	r0, 80101aa <sinf+0x76>
 8010178:	eddd 0a01 	vldr	s1, [sp, #4]
 801017c:	ed9d 0a00 	vldr	s0, [sp]
 8010180:	2001      	movs	r0, #1
 8010182:	f001 fb15 	bl	80117b0 <__kernel_sinf>
 8010186:	e7ea      	b.n	801015e <sinf+0x2a>
 8010188:	eddd 0a01 	vldr	s1, [sp, #4]
 801018c:	ed9d 0a00 	vldr	s0, [sp]
 8010190:	f001 fab6 	bl	8011700 <__kernel_cosf>
 8010194:	e7e3      	b.n	801015e <sinf+0x2a>
 8010196:	eddd 0a01 	vldr	s1, [sp, #4]
 801019a:	ed9d 0a00 	vldr	s0, [sp]
 801019e:	2001      	movs	r0, #1
 80101a0:	f001 fb06 	bl	80117b0 <__kernel_sinf>
 80101a4:	eeb1 0a40 	vneg.f32	s0, s0
 80101a8:	e7d9      	b.n	801015e <sinf+0x2a>
 80101aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80101ae:	ed9d 0a00 	vldr	s0, [sp]
 80101b2:	f001 faa5 	bl	8011700 <__kernel_cosf>
 80101b6:	e7f5      	b.n	80101a4 <sinf+0x70>
 80101b8:	3f490fd8 	.word	0x3f490fd8
 80101bc:	00000000 	.word	0x00000000

080101c0 <finite>:
 80101c0:	b082      	sub	sp, #8
 80101c2:	ed8d 0b00 	vstr	d0, [sp]
 80101c6:	9801      	ldr	r0, [sp, #4]
 80101c8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80101cc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80101d0:	0fc0      	lsrs	r0, r0, #31
 80101d2:	b002      	add	sp, #8
 80101d4:	4770      	bx	lr
	...

080101d8 <nan>:
 80101d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80101e0 <nan+0x8>
 80101dc:	4770      	bx	lr
 80101de:	bf00      	nop
 80101e0:	00000000 	.word	0x00000000
 80101e4:	7ff80000 	.word	0x7ff80000

080101e8 <finitef>:
 80101e8:	ee10 3a10 	vmov	r3, s0
 80101ec:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80101f0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80101f4:	bfac      	ite	ge
 80101f6:	2000      	movge	r0, #0
 80101f8:	2001      	movlt	r0, #1
 80101fa:	4770      	bx	lr

080101fc <__ieee754_sqrt>:
 80101fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010200:	4a68      	ldr	r2, [pc, #416]	@ (80103a4 <__ieee754_sqrt+0x1a8>)
 8010202:	ec55 4b10 	vmov	r4, r5, d0
 8010206:	43aa      	bics	r2, r5
 8010208:	462b      	mov	r3, r5
 801020a:	4621      	mov	r1, r4
 801020c:	d110      	bne.n	8010230 <__ieee754_sqrt+0x34>
 801020e:	4622      	mov	r2, r4
 8010210:	4620      	mov	r0, r4
 8010212:	4629      	mov	r1, r5
 8010214:	f7f0 f9f0 	bl	80005f8 <__aeabi_dmul>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4620      	mov	r0, r4
 801021e:	4629      	mov	r1, r5
 8010220:	f7f0 f834 	bl	800028c <__adddf3>
 8010224:	4604      	mov	r4, r0
 8010226:	460d      	mov	r5, r1
 8010228:	ec45 4b10 	vmov	d0, r4, r5
 801022c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010230:	2d00      	cmp	r5, #0
 8010232:	dc0e      	bgt.n	8010252 <__ieee754_sqrt+0x56>
 8010234:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010238:	4322      	orrs	r2, r4
 801023a:	d0f5      	beq.n	8010228 <__ieee754_sqrt+0x2c>
 801023c:	b19d      	cbz	r5, 8010266 <__ieee754_sqrt+0x6a>
 801023e:	4622      	mov	r2, r4
 8010240:	4620      	mov	r0, r4
 8010242:	4629      	mov	r1, r5
 8010244:	f7f0 f820 	bl	8000288 <__aeabi_dsub>
 8010248:	4602      	mov	r2, r0
 801024a:	460b      	mov	r3, r1
 801024c:	f7f0 fafe 	bl	800084c <__aeabi_ddiv>
 8010250:	e7e8      	b.n	8010224 <__ieee754_sqrt+0x28>
 8010252:	152a      	asrs	r2, r5, #20
 8010254:	d115      	bne.n	8010282 <__ieee754_sqrt+0x86>
 8010256:	2000      	movs	r0, #0
 8010258:	e009      	b.n	801026e <__ieee754_sqrt+0x72>
 801025a:	0acb      	lsrs	r3, r1, #11
 801025c:	3a15      	subs	r2, #21
 801025e:	0549      	lsls	r1, r1, #21
 8010260:	2b00      	cmp	r3, #0
 8010262:	d0fa      	beq.n	801025a <__ieee754_sqrt+0x5e>
 8010264:	e7f7      	b.n	8010256 <__ieee754_sqrt+0x5a>
 8010266:	462a      	mov	r2, r5
 8010268:	e7fa      	b.n	8010260 <__ieee754_sqrt+0x64>
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	3001      	adds	r0, #1
 801026e:	02dc      	lsls	r4, r3, #11
 8010270:	d5fb      	bpl.n	801026a <__ieee754_sqrt+0x6e>
 8010272:	1e44      	subs	r4, r0, #1
 8010274:	1b12      	subs	r2, r2, r4
 8010276:	f1c0 0420 	rsb	r4, r0, #32
 801027a:	fa21 f404 	lsr.w	r4, r1, r4
 801027e:	4323      	orrs	r3, r4
 8010280:	4081      	lsls	r1, r0
 8010282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010286:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801028a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801028e:	07d2      	lsls	r2, r2, #31
 8010290:	bf5c      	itt	pl
 8010292:	005b      	lslpl	r3, r3, #1
 8010294:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010298:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801029c:	bf58      	it	pl
 801029e:	0049      	lslpl	r1, r1, #1
 80102a0:	2600      	movs	r6, #0
 80102a2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80102a6:	106d      	asrs	r5, r5, #1
 80102a8:	0049      	lsls	r1, r1, #1
 80102aa:	2016      	movs	r0, #22
 80102ac:	4632      	mov	r2, r6
 80102ae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80102b2:	1917      	adds	r7, r2, r4
 80102b4:	429f      	cmp	r7, r3
 80102b6:	bfde      	ittt	le
 80102b8:	193a      	addle	r2, r7, r4
 80102ba:	1bdb      	suble	r3, r3, r7
 80102bc:	1936      	addle	r6, r6, r4
 80102be:	0fcf      	lsrs	r7, r1, #31
 80102c0:	3801      	subs	r0, #1
 80102c2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80102c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80102ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80102ce:	d1f0      	bne.n	80102b2 <__ieee754_sqrt+0xb6>
 80102d0:	4604      	mov	r4, r0
 80102d2:	2720      	movs	r7, #32
 80102d4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80102d8:	429a      	cmp	r2, r3
 80102da:	eb00 0e0c 	add.w	lr, r0, ip
 80102de:	db02      	blt.n	80102e6 <__ieee754_sqrt+0xea>
 80102e0:	d113      	bne.n	801030a <__ieee754_sqrt+0x10e>
 80102e2:	458e      	cmp	lr, r1
 80102e4:	d811      	bhi.n	801030a <__ieee754_sqrt+0x10e>
 80102e6:	f1be 0f00 	cmp.w	lr, #0
 80102ea:	eb0e 000c 	add.w	r0, lr, ip
 80102ee:	da42      	bge.n	8010376 <__ieee754_sqrt+0x17a>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	db40      	blt.n	8010376 <__ieee754_sqrt+0x17a>
 80102f4:	f102 0801 	add.w	r8, r2, #1
 80102f8:	1a9b      	subs	r3, r3, r2
 80102fa:	458e      	cmp	lr, r1
 80102fc:	bf88      	it	hi
 80102fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010302:	eba1 010e 	sub.w	r1, r1, lr
 8010306:	4464      	add	r4, ip
 8010308:	4642      	mov	r2, r8
 801030a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801030e:	3f01      	subs	r7, #1
 8010310:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010314:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010318:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801031c:	d1dc      	bne.n	80102d8 <__ieee754_sqrt+0xdc>
 801031e:	4319      	orrs	r1, r3
 8010320:	d01b      	beq.n	801035a <__ieee754_sqrt+0x15e>
 8010322:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80103a8 <__ieee754_sqrt+0x1ac>
 8010326:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80103ac <__ieee754_sqrt+0x1b0>
 801032a:	e9da 0100 	ldrd	r0, r1, [sl]
 801032e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010332:	f7ef ffa9 	bl	8000288 <__aeabi_dsub>
 8010336:	e9da 8900 	ldrd	r8, r9, [sl]
 801033a:	4602      	mov	r2, r0
 801033c:	460b      	mov	r3, r1
 801033e:	4640      	mov	r0, r8
 8010340:	4649      	mov	r1, r9
 8010342:	f7f0 fbd5 	bl	8000af0 <__aeabi_dcmple>
 8010346:	b140      	cbz	r0, 801035a <__ieee754_sqrt+0x15e>
 8010348:	f1b4 3fff 	cmp.w	r4, #4294967295
 801034c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010350:	e9db 2300 	ldrd	r2, r3, [fp]
 8010354:	d111      	bne.n	801037a <__ieee754_sqrt+0x17e>
 8010356:	3601      	adds	r6, #1
 8010358:	463c      	mov	r4, r7
 801035a:	1072      	asrs	r2, r6, #1
 801035c:	0863      	lsrs	r3, r4, #1
 801035e:	07f1      	lsls	r1, r6, #31
 8010360:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010364:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010368:	bf48      	it	mi
 801036a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801036e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010372:	4618      	mov	r0, r3
 8010374:	e756      	b.n	8010224 <__ieee754_sqrt+0x28>
 8010376:	4690      	mov	r8, r2
 8010378:	e7be      	b.n	80102f8 <__ieee754_sqrt+0xfc>
 801037a:	f7ef ff87 	bl	800028c <__adddf3>
 801037e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010382:	4602      	mov	r2, r0
 8010384:	460b      	mov	r3, r1
 8010386:	4640      	mov	r0, r8
 8010388:	4649      	mov	r1, r9
 801038a:	f7f0 fba7 	bl	8000adc <__aeabi_dcmplt>
 801038e:	b120      	cbz	r0, 801039a <__ieee754_sqrt+0x19e>
 8010390:	1ca0      	adds	r0, r4, #2
 8010392:	bf08      	it	eq
 8010394:	3601      	addeq	r6, #1
 8010396:	3402      	adds	r4, #2
 8010398:	e7df      	b.n	801035a <__ieee754_sqrt+0x15e>
 801039a:	1c63      	adds	r3, r4, #1
 801039c:	f023 0401 	bic.w	r4, r3, #1
 80103a0:	e7db      	b.n	801035a <__ieee754_sqrt+0x15e>
 80103a2:	bf00      	nop
 80103a4:	7ff00000 	.word	0x7ff00000
 80103a8:	200002f8 	.word	0x200002f8
 80103ac:	200002f0 	.word	0x200002f0

080103b0 <__ieee754_asin>:
 80103b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b4:	ec55 4b10 	vmov	r4, r5, d0
 80103b8:	4bc7      	ldr	r3, [pc, #796]	@ (80106d8 <__ieee754_asin+0x328>)
 80103ba:	b087      	sub	sp, #28
 80103bc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80103c0:	429e      	cmp	r6, r3
 80103c2:	9501      	str	r5, [sp, #4]
 80103c4:	d92d      	bls.n	8010422 <__ieee754_asin+0x72>
 80103c6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80103ca:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80103ce:	4326      	orrs	r6, r4
 80103d0:	d116      	bne.n	8010400 <__ieee754_asin+0x50>
 80103d2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8010670 <__ieee754_asin+0x2c0>)
 80103d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d8:	4620      	mov	r0, r4
 80103da:	4629      	mov	r1, r5
 80103dc:	f7f0 f90c 	bl	80005f8 <__aeabi_dmul>
 80103e0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8010678 <__ieee754_asin+0x2c8>)
 80103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e6:	4606      	mov	r6, r0
 80103e8:	460f      	mov	r7, r1
 80103ea:	4620      	mov	r0, r4
 80103ec:	4629      	mov	r1, r5
 80103ee:	f7f0 f903 	bl	80005f8 <__aeabi_dmul>
 80103f2:	4602      	mov	r2, r0
 80103f4:	460b      	mov	r3, r1
 80103f6:	4630      	mov	r0, r6
 80103f8:	4639      	mov	r1, r7
 80103fa:	f7ef ff47 	bl	800028c <__adddf3>
 80103fe:	e009      	b.n	8010414 <__ieee754_asin+0x64>
 8010400:	4622      	mov	r2, r4
 8010402:	462b      	mov	r3, r5
 8010404:	4620      	mov	r0, r4
 8010406:	4629      	mov	r1, r5
 8010408:	f7ef ff3e 	bl	8000288 <__aeabi_dsub>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	f7f0 fa1c 	bl	800084c <__aeabi_ddiv>
 8010414:	4604      	mov	r4, r0
 8010416:	460d      	mov	r5, r1
 8010418:	ec45 4b10 	vmov	d0, r4, r5
 801041c:	b007      	add	sp, #28
 801041e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010422:	4bae      	ldr	r3, [pc, #696]	@ (80106dc <__ieee754_asin+0x32c>)
 8010424:	429e      	cmp	r6, r3
 8010426:	d810      	bhi.n	801044a <__ieee754_asin+0x9a>
 8010428:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 801042c:	f080 80ad 	bcs.w	801058a <__ieee754_asin+0x1da>
 8010430:	a393      	add	r3, pc, #588	@ (adr r3, 8010680 <__ieee754_asin+0x2d0>)
 8010432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010436:	4620      	mov	r0, r4
 8010438:	4629      	mov	r1, r5
 801043a:	f7ef ff27 	bl	800028c <__adddf3>
 801043e:	4ba8      	ldr	r3, [pc, #672]	@ (80106e0 <__ieee754_asin+0x330>)
 8010440:	2200      	movs	r2, #0
 8010442:	f7f0 fb69 	bl	8000b18 <__aeabi_dcmpgt>
 8010446:	2800      	cmp	r0, #0
 8010448:	d1e6      	bne.n	8010418 <__ieee754_asin+0x68>
 801044a:	ec45 4b10 	vmov	d0, r4, r5
 801044e:	f7ff fde7 	bl	8010020 <fabs>
 8010452:	49a3      	ldr	r1, [pc, #652]	@ (80106e0 <__ieee754_asin+0x330>)
 8010454:	ec53 2b10 	vmov	r2, r3, d0
 8010458:	2000      	movs	r0, #0
 801045a:	f7ef ff15 	bl	8000288 <__aeabi_dsub>
 801045e:	4ba1      	ldr	r3, [pc, #644]	@ (80106e4 <__ieee754_asin+0x334>)
 8010460:	2200      	movs	r2, #0
 8010462:	f7f0 f8c9 	bl	80005f8 <__aeabi_dmul>
 8010466:	a388      	add	r3, pc, #544	@ (adr r3, 8010688 <__ieee754_asin+0x2d8>)
 8010468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046c:	4604      	mov	r4, r0
 801046e:	460d      	mov	r5, r1
 8010470:	f7f0 f8c2 	bl	80005f8 <__aeabi_dmul>
 8010474:	a386      	add	r3, pc, #536	@ (adr r3, 8010690 <__ieee754_asin+0x2e0>)
 8010476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047a:	f7ef ff07 	bl	800028c <__adddf3>
 801047e:	4622      	mov	r2, r4
 8010480:	462b      	mov	r3, r5
 8010482:	f7f0 f8b9 	bl	80005f8 <__aeabi_dmul>
 8010486:	a384      	add	r3, pc, #528	@ (adr r3, 8010698 <__ieee754_asin+0x2e8>)
 8010488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048c:	f7ef fefc 	bl	8000288 <__aeabi_dsub>
 8010490:	4622      	mov	r2, r4
 8010492:	462b      	mov	r3, r5
 8010494:	f7f0 f8b0 	bl	80005f8 <__aeabi_dmul>
 8010498:	a381      	add	r3, pc, #516	@ (adr r3, 80106a0 <__ieee754_asin+0x2f0>)
 801049a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049e:	f7ef fef5 	bl	800028c <__adddf3>
 80104a2:	4622      	mov	r2, r4
 80104a4:	462b      	mov	r3, r5
 80104a6:	f7f0 f8a7 	bl	80005f8 <__aeabi_dmul>
 80104aa:	a37f      	add	r3, pc, #508	@ (adr r3, 80106a8 <__ieee754_asin+0x2f8>)
 80104ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b0:	f7ef feea 	bl	8000288 <__aeabi_dsub>
 80104b4:	4622      	mov	r2, r4
 80104b6:	462b      	mov	r3, r5
 80104b8:	f7f0 f89e 	bl	80005f8 <__aeabi_dmul>
 80104bc:	a37c      	add	r3, pc, #496	@ (adr r3, 80106b0 <__ieee754_asin+0x300>)
 80104be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c2:	f7ef fee3 	bl	800028c <__adddf3>
 80104c6:	4622      	mov	r2, r4
 80104c8:	462b      	mov	r3, r5
 80104ca:	f7f0 f895 	bl	80005f8 <__aeabi_dmul>
 80104ce:	a37a      	add	r3, pc, #488	@ (adr r3, 80106b8 <__ieee754_asin+0x308>)
 80104d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104d8:	4620      	mov	r0, r4
 80104da:	4629      	mov	r1, r5
 80104dc:	f7f0 f88c 	bl	80005f8 <__aeabi_dmul>
 80104e0:	a377      	add	r3, pc, #476	@ (adr r3, 80106c0 <__ieee754_asin+0x310>)
 80104e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e6:	f7ef fecf 	bl	8000288 <__aeabi_dsub>
 80104ea:	4622      	mov	r2, r4
 80104ec:	462b      	mov	r3, r5
 80104ee:	f7f0 f883 	bl	80005f8 <__aeabi_dmul>
 80104f2:	a375      	add	r3, pc, #468	@ (adr r3, 80106c8 <__ieee754_asin+0x318>)
 80104f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f8:	f7ef fec8 	bl	800028c <__adddf3>
 80104fc:	4622      	mov	r2, r4
 80104fe:	462b      	mov	r3, r5
 8010500:	f7f0 f87a 	bl	80005f8 <__aeabi_dmul>
 8010504:	a372      	add	r3, pc, #456	@ (adr r3, 80106d0 <__ieee754_asin+0x320>)
 8010506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050a:	f7ef febd 	bl	8000288 <__aeabi_dsub>
 801050e:	4622      	mov	r2, r4
 8010510:	462b      	mov	r3, r5
 8010512:	f7f0 f871 	bl	80005f8 <__aeabi_dmul>
 8010516:	4b72      	ldr	r3, [pc, #456]	@ (80106e0 <__ieee754_asin+0x330>)
 8010518:	2200      	movs	r2, #0
 801051a:	f7ef feb7 	bl	800028c <__adddf3>
 801051e:	ec45 4b10 	vmov	d0, r4, r5
 8010522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010526:	f7ff fe69 	bl	80101fc <__ieee754_sqrt>
 801052a:	4b6f      	ldr	r3, [pc, #444]	@ (80106e8 <__ieee754_asin+0x338>)
 801052c:	429e      	cmp	r6, r3
 801052e:	ec5b ab10 	vmov	sl, fp, d0
 8010532:	f240 80db 	bls.w	80106ec <__ieee754_asin+0x33c>
 8010536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801053a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801053e:	f7f0 f985 	bl	800084c <__aeabi_ddiv>
 8010542:	4652      	mov	r2, sl
 8010544:	465b      	mov	r3, fp
 8010546:	f7f0 f857 	bl	80005f8 <__aeabi_dmul>
 801054a:	4652      	mov	r2, sl
 801054c:	465b      	mov	r3, fp
 801054e:	f7ef fe9d 	bl	800028c <__adddf3>
 8010552:	4602      	mov	r2, r0
 8010554:	460b      	mov	r3, r1
 8010556:	f7ef fe99 	bl	800028c <__adddf3>
 801055a:	a347      	add	r3, pc, #284	@ (adr r3, 8010678 <__ieee754_asin+0x2c8>)
 801055c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010560:	f7ef fe92 	bl	8000288 <__aeabi_dsub>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	a141      	add	r1, pc, #260	@ (adr r1, 8010670 <__ieee754_asin+0x2c0>)
 801056a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801056e:	f7ef fe8b 	bl	8000288 <__aeabi_dsub>
 8010572:	9b01      	ldr	r3, [sp, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	bfdc      	itt	le
 8010578:	4602      	movle	r2, r0
 801057a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801057e:	4604      	mov	r4, r0
 8010580:	460d      	mov	r5, r1
 8010582:	bfdc      	itt	le
 8010584:	4614      	movle	r4, r2
 8010586:	461d      	movle	r5, r3
 8010588:	e746      	b.n	8010418 <__ieee754_asin+0x68>
 801058a:	4622      	mov	r2, r4
 801058c:	462b      	mov	r3, r5
 801058e:	4620      	mov	r0, r4
 8010590:	4629      	mov	r1, r5
 8010592:	f7f0 f831 	bl	80005f8 <__aeabi_dmul>
 8010596:	a33c      	add	r3, pc, #240	@ (adr r3, 8010688 <__ieee754_asin+0x2d8>)
 8010598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059c:	4606      	mov	r6, r0
 801059e:	460f      	mov	r7, r1
 80105a0:	f7f0 f82a 	bl	80005f8 <__aeabi_dmul>
 80105a4:	a33a      	add	r3, pc, #232	@ (adr r3, 8010690 <__ieee754_asin+0x2e0>)
 80105a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105aa:	f7ef fe6f 	bl	800028c <__adddf3>
 80105ae:	4632      	mov	r2, r6
 80105b0:	463b      	mov	r3, r7
 80105b2:	f7f0 f821 	bl	80005f8 <__aeabi_dmul>
 80105b6:	a338      	add	r3, pc, #224	@ (adr r3, 8010698 <__ieee754_asin+0x2e8>)
 80105b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105bc:	f7ef fe64 	bl	8000288 <__aeabi_dsub>
 80105c0:	4632      	mov	r2, r6
 80105c2:	463b      	mov	r3, r7
 80105c4:	f7f0 f818 	bl	80005f8 <__aeabi_dmul>
 80105c8:	a335      	add	r3, pc, #212	@ (adr r3, 80106a0 <__ieee754_asin+0x2f0>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	f7ef fe5d 	bl	800028c <__adddf3>
 80105d2:	4632      	mov	r2, r6
 80105d4:	463b      	mov	r3, r7
 80105d6:	f7f0 f80f 	bl	80005f8 <__aeabi_dmul>
 80105da:	a333      	add	r3, pc, #204	@ (adr r3, 80106a8 <__ieee754_asin+0x2f8>)
 80105dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e0:	f7ef fe52 	bl	8000288 <__aeabi_dsub>
 80105e4:	4632      	mov	r2, r6
 80105e6:	463b      	mov	r3, r7
 80105e8:	f7f0 f806 	bl	80005f8 <__aeabi_dmul>
 80105ec:	a330      	add	r3, pc, #192	@ (adr r3, 80106b0 <__ieee754_asin+0x300>)
 80105ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f2:	f7ef fe4b 	bl	800028c <__adddf3>
 80105f6:	4632      	mov	r2, r6
 80105f8:	463b      	mov	r3, r7
 80105fa:	f7ef fffd 	bl	80005f8 <__aeabi_dmul>
 80105fe:	a32e      	add	r3, pc, #184	@ (adr r3, 80106b8 <__ieee754_asin+0x308>)
 8010600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010604:	4680      	mov	r8, r0
 8010606:	4689      	mov	r9, r1
 8010608:	4630      	mov	r0, r6
 801060a:	4639      	mov	r1, r7
 801060c:	f7ef fff4 	bl	80005f8 <__aeabi_dmul>
 8010610:	a32b      	add	r3, pc, #172	@ (adr r3, 80106c0 <__ieee754_asin+0x310>)
 8010612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010616:	f7ef fe37 	bl	8000288 <__aeabi_dsub>
 801061a:	4632      	mov	r2, r6
 801061c:	463b      	mov	r3, r7
 801061e:	f7ef ffeb 	bl	80005f8 <__aeabi_dmul>
 8010622:	a329      	add	r3, pc, #164	@ (adr r3, 80106c8 <__ieee754_asin+0x318>)
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	f7ef fe30 	bl	800028c <__adddf3>
 801062c:	4632      	mov	r2, r6
 801062e:	463b      	mov	r3, r7
 8010630:	f7ef ffe2 	bl	80005f8 <__aeabi_dmul>
 8010634:	a326      	add	r3, pc, #152	@ (adr r3, 80106d0 <__ieee754_asin+0x320>)
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	f7ef fe25 	bl	8000288 <__aeabi_dsub>
 801063e:	4632      	mov	r2, r6
 8010640:	463b      	mov	r3, r7
 8010642:	f7ef ffd9 	bl	80005f8 <__aeabi_dmul>
 8010646:	4b26      	ldr	r3, [pc, #152]	@ (80106e0 <__ieee754_asin+0x330>)
 8010648:	2200      	movs	r2, #0
 801064a:	f7ef fe1f 	bl	800028c <__adddf3>
 801064e:	4602      	mov	r2, r0
 8010650:	460b      	mov	r3, r1
 8010652:	4640      	mov	r0, r8
 8010654:	4649      	mov	r1, r9
 8010656:	f7f0 f8f9 	bl	800084c <__aeabi_ddiv>
 801065a:	4622      	mov	r2, r4
 801065c:	462b      	mov	r3, r5
 801065e:	f7ef ffcb 	bl	80005f8 <__aeabi_dmul>
 8010662:	4602      	mov	r2, r0
 8010664:	460b      	mov	r3, r1
 8010666:	4620      	mov	r0, r4
 8010668:	4629      	mov	r1, r5
 801066a:	e6c6      	b.n	80103fa <__ieee754_asin+0x4a>
 801066c:	f3af 8000 	nop.w
 8010670:	54442d18 	.word	0x54442d18
 8010674:	3ff921fb 	.word	0x3ff921fb
 8010678:	33145c07 	.word	0x33145c07
 801067c:	3c91a626 	.word	0x3c91a626
 8010680:	8800759c 	.word	0x8800759c
 8010684:	7e37e43c 	.word	0x7e37e43c
 8010688:	0dfdf709 	.word	0x0dfdf709
 801068c:	3f023de1 	.word	0x3f023de1
 8010690:	7501b288 	.word	0x7501b288
 8010694:	3f49efe0 	.word	0x3f49efe0
 8010698:	b5688f3b 	.word	0xb5688f3b
 801069c:	3fa48228 	.word	0x3fa48228
 80106a0:	0e884455 	.word	0x0e884455
 80106a4:	3fc9c155 	.word	0x3fc9c155
 80106a8:	03eb6f7d 	.word	0x03eb6f7d
 80106ac:	3fd4d612 	.word	0x3fd4d612
 80106b0:	55555555 	.word	0x55555555
 80106b4:	3fc55555 	.word	0x3fc55555
 80106b8:	b12e9282 	.word	0xb12e9282
 80106bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80106c0:	1b8d0159 	.word	0x1b8d0159
 80106c4:	3fe6066c 	.word	0x3fe6066c
 80106c8:	9c598ac8 	.word	0x9c598ac8
 80106cc:	40002ae5 	.word	0x40002ae5
 80106d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80106d4:	40033a27 	.word	0x40033a27
 80106d8:	3fefffff 	.word	0x3fefffff
 80106dc:	3fdfffff 	.word	0x3fdfffff
 80106e0:	3ff00000 	.word	0x3ff00000
 80106e4:	3fe00000 	.word	0x3fe00000
 80106e8:	3fef3332 	.word	0x3fef3332
 80106ec:	4652      	mov	r2, sl
 80106ee:	465b      	mov	r3, fp
 80106f0:	4650      	mov	r0, sl
 80106f2:	4659      	mov	r1, fp
 80106f4:	f7ef fdca 	bl	800028c <__adddf3>
 80106f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106fc:	4606      	mov	r6, r0
 80106fe:	460f      	mov	r7, r1
 8010700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010704:	f7f0 f8a2 	bl	800084c <__aeabi_ddiv>
 8010708:	4602      	mov	r2, r0
 801070a:	460b      	mov	r3, r1
 801070c:	4630      	mov	r0, r6
 801070e:	4639      	mov	r1, r7
 8010710:	f7ef ff72 	bl	80005f8 <__aeabi_dmul>
 8010714:	f04f 0800 	mov.w	r8, #0
 8010718:	4606      	mov	r6, r0
 801071a:	460f      	mov	r7, r1
 801071c:	4642      	mov	r2, r8
 801071e:	465b      	mov	r3, fp
 8010720:	4640      	mov	r0, r8
 8010722:	4659      	mov	r1, fp
 8010724:	f7ef ff68 	bl	80005f8 <__aeabi_dmul>
 8010728:	4602      	mov	r2, r0
 801072a:	460b      	mov	r3, r1
 801072c:	4620      	mov	r0, r4
 801072e:	4629      	mov	r1, r5
 8010730:	f7ef fdaa 	bl	8000288 <__aeabi_dsub>
 8010734:	4642      	mov	r2, r8
 8010736:	4604      	mov	r4, r0
 8010738:	460d      	mov	r5, r1
 801073a:	465b      	mov	r3, fp
 801073c:	4650      	mov	r0, sl
 801073e:	4659      	mov	r1, fp
 8010740:	f7ef fda4 	bl	800028c <__adddf3>
 8010744:	4602      	mov	r2, r0
 8010746:	460b      	mov	r3, r1
 8010748:	4620      	mov	r0, r4
 801074a:	4629      	mov	r1, r5
 801074c:	f7f0 f87e 	bl	800084c <__aeabi_ddiv>
 8010750:	4602      	mov	r2, r0
 8010752:	460b      	mov	r3, r1
 8010754:	f7ef fd9a 	bl	800028c <__adddf3>
 8010758:	4602      	mov	r2, r0
 801075a:	460b      	mov	r3, r1
 801075c:	a112      	add	r1, pc, #72	@ (adr r1, 80107a8 <__ieee754_asin+0x3f8>)
 801075e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010762:	f7ef fd91 	bl	8000288 <__aeabi_dsub>
 8010766:	4602      	mov	r2, r0
 8010768:	460b      	mov	r3, r1
 801076a:	4630      	mov	r0, r6
 801076c:	4639      	mov	r1, r7
 801076e:	f7ef fd8b 	bl	8000288 <__aeabi_dsub>
 8010772:	4642      	mov	r2, r8
 8010774:	4604      	mov	r4, r0
 8010776:	460d      	mov	r5, r1
 8010778:	465b      	mov	r3, fp
 801077a:	4640      	mov	r0, r8
 801077c:	4659      	mov	r1, fp
 801077e:	f7ef fd85 	bl	800028c <__adddf3>
 8010782:	4602      	mov	r2, r0
 8010784:	460b      	mov	r3, r1
 8010786:	a10a      	add	r1, pc, #40	@ (adr r1, 80107b0 <__ieee754_asin+0x400>)
 8010788:	e9d1 0100 	ldrd	r0, r1, [r1]
 801078c:	f7ef fd7c 	bl	8000288 <__aeabi_dsub>
 8010790:	4602      	mov	r2, r0
 8010792:	460b      	mov	r3, r1
 8010794:	4620      	mov	r0, r4
 8010796:	4629      	mov	r1, r5
 8010798:	f7ef fd76 	bl	8000288 <__aeabi_dsub>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	a103      	add	r1, pc, #12	@ (adr r1, 80107b0 <__ieee754_asin+0x400>)
 80107a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107a6:	e6e2      	b.n	801056e <__ieee754_asin+0x1be>
 80107a8:	33145c07 	.word	0x33145c07
 80107ac:	3c91a626 	.word	0x3c91a626
 80107b0:	54442d18 	.word	0x54442d18
 80107b4:	3fe921fb 	.word	0x3fe921fb

080107b8 <__ieee754_atan2>:
 80107b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107bc:	ec57 6b11 	vmov	r6, r7, d1
 80107c0:	4273      	negs	r3, r6
 80107c2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010940 <__ieee754_atan2+0x188>
 80107c6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80107ca:	4333      	orrs	r3, r6
 80107cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80107d0:	4543      	cmp	r3, r8
 80107d2:	ec51 0b10 	vmov	r0, r1, d0
 80107d6:	4635      	mov	r5, r6
 80107d8:	d809      	bhi.n	80107ee <__ieee754_atan2+0x36>
 80107da:	4244      	negs	r4, r0
 80107dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80107e0:	4304      	orrs	r4, r0
 80107e2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80107e6:	4544      	cmp	r4, r8
 80107e8:	468e      	mov	lr, r1
 80107ea:	4681      	mov	r9, r0
 80107ec:	d907      	bls.n	80107fe <__ieee754_atan2+0x46>
 80107ee:	4632      	mov	r2, r6
 80107f0:	463b      	mov	r3, r7
 80107f2:	f7ef fd4b 	bl	800028c <__adddf3>
 80107f6:	ec41 0b10 	vmov	d0, r0, r1
 80107fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107fe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010802:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010806:	4334      	orrs	r4, r6
 8010808:	d103      	bne.n	8010812 <__ieee754_atan2+0x5a>
 801080a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801080e:	f000 bddf 	b.w	80113d0 <atan>
 8010812:	17bc      	asrs	r4, r7, #30
 8010814:	f004 0402 	and.w	r4, r4, #2
 8010818:	ea53 0909 	orrs.w	r9, r3, r9
 801081c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010820:	d107      	bne.n	8010832 <__ieee754_atan2+0x7a>
 8010822:	2c02      	cmp	r4, #2
 8010824:	d05f      	beq.n	80108e6 <__ieee754_atan2+0x12e>
 8010826:	2c03      	cmp	r4, #3
 8010828:	d1e5      	bne.n	80107f6 <__ieee754_atan2+0x3e>
 801082a:	a141      	add	r1, pc, #260	@ (adr r1, 8010930 <__ieee754_atan2+0x178>)
 801082c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010830:	e7e1      	b.n	80107f6 <__ieee754_atan2+0x3e>
 8010832:	4315      	orrs	r5, r2
 8010834:	d106      	bne.n	8010844 <__ieee754_atan2+0x8c>
 8010836:	f1be 0f00 	cmp.w	lr, #0
 801083a:	da5f      	bge.n	80108fc <__ieee754_atan2+0x144>
 801083c:	a13e      	add	r1, pc, #248	@ (adr r1, 8010938 <__ieee754_atan2+0x180>)
 801083e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010842:	e7d8      	b.n	80107f6 <__ieee754_atan2+0x3e>
 8010844:	4542      	cmp	r2, r8
 8010846:	d10f      	bne.n	8010868 <__ieee754_atan2+0xb0>
 8010848:	4293      	cmp	r3, r2
 801084a:	f104 34ff 	add.w	r4, r4, #4294967295
 801084e:	d107      	bne.n	8010860 <__ieee754_atan2+0xa8>
 8010850:	2c02      	cmp	r4, #2
 8010852:	d84c      	bhi.n	80108ee <__ieee754_atan2+0x136>
 8010854:	4b34      	ldr	r3, [pc, #208]	@ (8010928 <__ieee754_atan2+0x170>)
 8010856:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801085a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801085e:	e7ca      	b.n	80107f6 <__ieee754_atan2+0x3e>
 8010860:	2c02      	cmp	r4, #2
 8010862:	d848      	bhi.n	80108f6 <__ieee754_atan2+0x13e>
 8010864:	4b31      	ldr	r3, [pc, #196]	@ (801092c <__ieee754_atan2+0x174>)
 8010866:	e7f6      	b.n	8010856 <__ieee754_atan2+0x9e>
 8010868:	4543      	cmp	r3, r8
 801086a:	d0e4      	beq.n	8010836 <__ieee754_atan2+0x7e>
 801086c:	1a9b      	subs	r3, r3, r2
 801086e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010872:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010876:	da1e      	bge.n	80108b6 <__ieee754_atan2+0xfe>
 8010878:	2f00      	cmp	r7, #0
 801087a:	da01      	bge.n	8010880 <__ieee754_atan2+0xc8>
 801087c:	323c      	adds	r2, #60	@ 0x3c
 801087e:	db1e      	blt.n	80108be <__ieee754_atan2+0x106>
 8010880:	4632      	mov	r2, r6
 8010882:	463b      	mov	r3, r7
 8010884:	f7ef ffe2 	bl	800084c <__aeabi_ddiv>
 8010888:	ec41 0b10 	vmov	d0, r0, r1
 801088c:	f7ff fbc8 	bl	8010020 <fabs>
 8010890:	f000 fd9e 	bl	80113d0 <atan>
 8010894:	ec51 0b10 	vmov	r0, r1, d0
 8010898:	2c01      	cmp	r4, #1
 801089a:	d013      	beq.n	80108c4 <__ieee754_atan2+0x10c>
 801089c:	2c02      	cmp	r4, #2
 801089e:	d015      	beq.n	80108cc <__ieee754_atan2+0x114>
 80108a0:	2c00      	cmp	r4, #0
 80108a2:	d0a8      	beq.n	80107f6 <__ieee754_atan2+0x3e>
 80108a4:	a318      	add	r3, pc, #96	@ (adr r3, 8010908 <__ieee754_atan2+0x150>)
 80108a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108aa:	f7ef fced 	bl	8000288 <__aeabi_dsub>
 80108ae:	a318      	add	r3, pc, #96	@ (adr r3, 8010910 <__ieee754_atan2+0x158>)
 80108b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b4:	e014      	b.n	80108e0 <__ieee754_atan2+0x128>
 80108b6:	a118      	add	r1, pc, #96	@ (adr r1, 8010918 <__ieee754_atan2+0x160>)
 80108b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108bc:	e7ec      	b.n	8010898 <__ieee754_atan2+0xe0>
 80108be:	2000      	movs	r0, #0
 80108c0:	2100      	movs	r1, #0
 80108c2:	e7e9      	b.n	8010898 <__ieee754_atan2+0xe0>
 80108c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80108c8:	4619      	mov	r1, r3
 80108ca:	e794      	b.n	80107f6 <__ieee754_atan2+0x3e>
 80108cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8010908 <__ieee754_atan2+0x150>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	f7ef fcd9 	bl	8000288 <__aeabi_dsub>
 80108d6:	4602      	mov	r2, r0
 80108d8:	460b      	mov	r3, r1
 80108da:	a10d      	add	r1, pc, #52	@ (adr r1, 8010910 <__ieee754_atan2+0x158>)
 80108dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108e0:	f7ef fcd2 	bl	8000288 <__aeabi_dsub>
 80108e4:	e787      	b.n	80107f6 <__ieee754_atan2+0x3e>
 80108e6:	a10a      	add	r1, pc, #40	@ (adr r1, 8010910 <__ieee754_atan2+0x158>)
 80108e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108ec:	e783      	b.n	80107f6 <__ieee754_atan2+0x3e>
 80108ee:	a10c      	add	r1, pc, #48	@ (adr r1, 8010920 <__ieee754_atan2+0x168>)
 80108f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108f4:	e77f      	b.n	80107f6 <__ieee754_atan2+0x3e>
 80108f6:	2000      	movs	r0, #0
 80108f8:	2100      	movs	r1, #0
 80108fa:	e77c      	b.n	80107f6 <__ieee754_atan2+0x3e>
 80108fc:	a106      	add	r1, pc, #24	@ (adr r1, 8010918 <__ieee754_atan2+0x160>)
 80108fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010902:	e778      	b.n	80107f6 <__ieee754_atan2+0x3e>
 8010904:	f3af 8000 	nop.w
 8010908:	33145c07 	.word	0x33145c07
 801090c:	3ca1a626 	.word	0x3ca1a626
 8010910:	54442d18 	.word	0x54442d18
 8010914:	400921fb 	.word	0x400921fb
 8010918:	54442d18 	.word	0x54442d18
 801091c:	3ff921fb 	.word	0x3ff921fb
 8010920:	54442d18 	.word	0x54442d18
 8010924:	3fe921fb 	.word	0x3fe921fb
 8010928:	080128a8 	.word	0x080128a8
 801092c:	08012890 	.word	0x08012890
 8010930:	54442d18 	.word	0x54442d18
 8010934:	c00921fb 	.word	0xc00921fb
 8010938:	54442d18 	.word	0x54442d18
 801093c:	bff921fb 	.word	0xbff921fb
 8010940:	7ff00000 	.word	0x7ff00000
 8010944:	00000000 	.word	0x00000000

08010948 <__ieee754_pow>:
 8010948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094c:	b091      	sub	sp, #68	@ 0x44
 801094e:	ed8d 1b00 	vstr	d1, [sp]
 8010952:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010956:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801095a:	ea5a 0001 	orrs.w	r0, sl, r1
 801095e:	ec57 6b10 	vmov	r6, r7, d0
 8010962:	d113      	bne.n	801098c <__ieee754_pow+0x44>
 8010964:	19b3      	adds	r3, r6, r6
 8010966:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801096a:	4152      	adcs	r2, r2
 801096c:	4298      	cmp	r0, r3
 801096e:	4b98      	ldr	r3, [pc, #608]	@ (8010bd0 <__ieee754_pow+0x288>)
 8010970:	4193      	sbcs	r3, r2
 8010972:	f080 84ea 	bcs.w	801134a <__ieee754_pow+0xa02>
 8010976:	e9dd 2300 	ldrd	r2, r3, [sp]
 801097a:	4630      	mov	r0, r6
 801097c:	4639      	mov	r1, r7
 801097e:	f7ef fc85 	bl	800028c <__adddf3>
 8010982:	ec41 0b10 	vmov	d0, r0, r1
 8010986:	b011      	add	sp, #68	@ 0x44
 8010988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098c:	4a91      	ldr	r2, [pc, #580]	@ (8010bd4 <__ieee754_pow+0x28c>)
 801098e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010992:	4590      	cmp	r8, r2
 8010994:	463d      	mov	r5, r7
 8010996:	4633      	mov	r3, r6
 8010998:	d806      	bhi.n	80109a8 <__ieee754_pow+0x60>
 801099a:	d101      	bne.n	80109a0 <__ieee754_pow+0x58>
 801099c:	2e00      	cmp	r6, #0
 801099e:	d1ea      	bne.n	8010976 <__ieee754_pow+0x2e>
 80109a0:	4592      	cmp	sl, r2
 80109a2:	d801      	bhi.n	80109a8 <__ieee754_pow+0x60>
 80109a4:	d10e      	bne.n	80109c4 <__ieee754_pow+0x7c>
 80109a6:	b169      	cbz	r1, 80109c4 <__ieee754_pow+0x7c>
 80109a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80109ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80109b0:	431d      	orrs	r5, r3
 80109b2:	d1e0      	bne.n	8010976 <__ieee754_pow+0x2e>
 80109b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80109b8:	18db      	adds	r3, r3, r3
 80109ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80109be:	4152      	adcs	r2, r2
 80109c0:	429d      	cmp	r5, r3
 80109c2:	e7d4      	b.n	801096e <__ieee754_pow+0x26>
 80109c4:	2d00      	cmp	r5, #0
 80109c6:	46c3      	mov	fp, r8
 80109c8:	da3a      	bge.n	8010a40 <__ieee754_pow+0xf8>
 80109ca:	4a83      	ldr	r2, [pc, #524]	@ (8010bd8 <__ieee754_pow+0x290>)
 80109cc:	4592      	cmp	sl, r2
 80109ce:	d84d      	bhi.n	8010a6c <__ieee754_pow+0x124>
 80109d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80109d4:	4592      	cmp	sl, r2
 80109d6:	f240 84c7 	bls.w	8011368 <__ieee754_pow+0xa20>
 80109da:	ea4f 522a 	mov.w	r2, sl, asr #20
 80109de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80109e2:	2a14      	cmp	r2, #20
 80109e4:	dd0f      	ble.n	8010a06 <__ieee754_pow+0xbe>
 80109e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80109ea:	fa21 f402 	lsr.w	r4, r1, r2
 80109ee:	fa04 f202 	lsl.w	r2, r4, r2
 80109f2:	428a      	cmp	r2, r1
 80109f4:	f040 84b8 	bne.w	8011368 <__ieee754_pow+0xa20>
 80109f8:	f004 0401 	and.w	r4, r4, #1
 80109fc:	f1c4 0402 	rsb	r4, r4, #2
 8010a00:	2900      	cmp	r1, #0
 8010a02:	d158      	bne.n	8010ab6 <__ieee754_pow+0x16e>
 8010a04:	e00e      	b.n	8010a24 <__ieee754_pow+0xdc>
 8010a06:	2900      	cmp	r1, #0
 8010a08:	d154      	bne.n	8010ab4 <__ieee754_pow+0x16c>
 8010a0a:	f1c2 0214 	rsb	r2, r2, #20
 8010a0e:	fa4a f402 	asr.w	r4, sl, r2
 8010a12:	fa04 f202 	lsl.w	r2, r4, r2
 8010a16:	4552      	cmp	r2, sl
 8010a18:	f040 84a3 	bne.w	8011362 <__ieee754_pow+0xa1a>
 8010a1c:	f004 0401 	and.w	r4, r4, #1
 8010a20:	f1c4 0402 	rsb	r4, r4, #2
 8010a24:	4a6d      	ldr	r2, [pc, #436]	@ (8010bdc <__ieee754_pow+0x294>)
 8010a26:	4592      	cmp	sl, r2
 8010a28:	d12e      	bne.n	8010a88 <__ieee754_pow+0x140>
 8010a2a:	f1b9 0f00 	cmp.w	r9, #0
 8010a2e:	f280 8494 	bge.w	801135a <__ieee754_pow+0xa12>
 8010a32:	496a      	ldr	r1, [pc, #424]	@ (8010bdc <__ieee754_pow+0x294>)
 8010a34:	4632      	mov	r2, r6
 8010a36:	463b      	mov	r3, r7
 8010a38:	2000      	movs	r0, #0
 8010a3a:	f7ef ff07 	bl	800084c <__aeabi_ddiv>
 8010a3e:	e7a0      	b.n	8010982 <__ieee754_pow+0x3a>
 8010a40:	2400      	movs	r4, #0
 8010a42:	bbc1      	cbnz	r1, 8010ab6 <__ieee754_pow+0x16e>
 8010a44:	4a63      	ldr	r2, [pc, #396]	@ (8010bd4 <__ieee754_pow+0x28c>)
 8010a46:	4592      	cmp	sl, r2
 8010a48:	d1ec      	bne.n	8010a24 <__ieee754_pow+0xdc>
 8010a4a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8010a4e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010a52:	431a      	orrs	r2, r3
 8010a54:	f000 8479 	beq.w	801134a <__ieee754_pow+0xa02>
 8010a58:	4b61      	ldr	r3, [pc, #388]	@ (8010be0 <__ieee754_pow+0x298>)
 8010a5a:	4598      	cmp	r8, r3
 8010a5c:	d908      	bls.n	8010a70 <__ieee754_pow+0x128>
 8010a5e:	f1b9 0f00 	cmp.w	r9, #0
 8010a62:	f2c0 8476 	blt.w	8011352 <__ieee754_pow+0xa0a>
 8010a66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a6a:	e78a      	b.n	8010982 <__ieee754_pow+0x3a>
 8010a6c:	2402      	movs	r4, #2
 8010a6e:	e7e8      	b.n	8010a42 <__ieee754_pow+0xfa>
 8010a70:	f1b9 0f00 	cmp.w	r9, #0
 8010a74:	f04f 0000 	mov.w	r0, #0
 8010a78:	f04f 0100 	mov.w	r1, #0
 8010a7c:	da81      	bge.n	8010982 <__ieee754_pow+0x3a>
 8010a7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010a82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010a86:	e77c      	b.n	8010982 <__ieee754_pow+0x3a>
 8010a88:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010a8c:	d106      	bne.n	8010a9c <__ieee754_pow+0x154>
 8010a8e:	4632      	mov	r2, r6
 8010a90:	463b      	mov	r3, r7
 8010a92:	4630      	mov	r0, r6
 8010a94:	4639      	mov	r1, r7
 8010a96:	f7ef fdaf 	bl	80005f8 <__aeabi_dmul>
 8010a9a:	e772      	b.n	8010982 <__ieee754_pow+0x3a>
 8010a9c:	4a51      	ldr	r2, [pc, #324]	@ (8010be4 <__ieee754_pow+0x29c>)
 8010a9e:	4591      	cmp	r9, r2
 8010aa0:	d109      	bne.n	8010ab6 <__ieee754_pow+0x16e>
 8010aa2:	2d00      	cmp	r5, #0
 8010aa4:	db07      	blt.n	8010ab6 <__ieee754_pow+0x16e>
 8010aa6:	ec47 6b10 	vmov	d0, r6, r7
 8010aaa:	b011      	add	sp, #68	@ 0x44
 8010aac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab0:	f7ff bba4 	b.w	80101fc <__ieee754_sqrt>
 8010ab4:	2400      	movs	r4, #0
 8010ab6:	ec47 6b10 	vmov	d0, r6, r7
 8010aba:	9302      	str	r3, [sp, #8]
 8010abc:	f7ff fab0 	bl	8010020 <fabs>
 8010ac0:	9b02      	ldr	r3, [sp, #8]
 8010ac2:	ec51 0b10 	vmov	r0, r1, d0
 8010ac6:	bb53      	cbnz	r3, 8010b1e <__ieee754_pow+0x1d6>
 8010ac8:	4b44      	ldr	r3, [pc, #272]	@ (8010bdc <__ieee754_pow+0x294>)
 8010aca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d002      	beq.n	8010ad8 <__ieee754_pow+0x190>
 8010ad2:	f1b8 0f00 	cmp.w	r8, #0
 8010ad6:	d122      	bne.n	8010b1e <__ieee754_pow+0x1d6>
 8010ad8:	f1b9 0f00 	cmp.w	r9, #0
 8010adc:	da05      	bge.n	8010aea <__ieee754_pow+0x1a2>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	493d      	ldr	r1, [pc, #244]	@ (8010bdc <__ieee754_pow+0x294>)
 8010ae6:	f7ef feb1 	bl	800084c <__aeabi_ddiv>
 8010aea:	2d00      	cmp	r5, #0
 8010aec:	f6bf af49 	bge.w	8010982 <__ieee754_pow+0x3a>
 8010af0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010af4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010af8:	ea58 0804 	orrs.w	r8, r8, r4
 8010afc:	d108      	bne.n	8010b10 <__ieee754_pow+0x1c8>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	4610      	mov	r0, r2
 8010b04:	4619      	mov	r1, r3
 8010b06:	f7ef fbbf 	bl	8000288 <__aeabi_dsub>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	e794      	b.n	8010a3a <__ieee754_pow+0xf2>
 8010b10:	2c01      	cmp	r4, #1
 8010b12:	f47f af36 	bne.w	8010982 <__ieee754_pow+0x3a>
 8010b16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	e731      	b.n	8010982 <__ieee754_pow+0x3a>
 8010b1e:	0feb      	lsrs	r3, r5, #31
 8010b20:	3b01      	subs	r3, #1
 8010b22:	ea53 0204 	orrs.w	r2, r3, r4
 8010b26:	d102      	bne.n	8010b2e <__ieee754_pow+0x1e6>
 8010b28:	4632      	mov	r2, r6
 8010b2a:	463b      	mov	r3, r7
 8010b2c:	e7e9      	b.n	8010b02 <__ieee754_pow+0x1ba>
 8010b2e:	3c01      	subs	r4, #1
 8010b30:	431c      	orrs	r4, r3
 8010b32:	d016      	beq.n	8010b62 <__ieee754_pow+0x21a>
 8010b34:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010bc0 <__ieee754_pow+0x278>
 8010b38:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010b3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b40:	f240 8112 	bls.w	8010d68 <__ieee754_pow+0x420>
 8010b44:	4b28      	ldr	r3, [pc, #160]	@ (8010be8 <__ieee754_pow+0x2a0>)
 8010b46:	459a      	cmp	sl, r3
 8010b48:	4b25      	ldr	r3, [pc, #148]	@ (8010be0 <__ieee754_pow+0x298>)
 8010b4a:	d916      	bls.n	8010b7a <__ieee754_pow+0x232>
 8010b4c:	4598      	cmp	r8, r3
 8010b4e:	d80b      	bhi.n	8010b68 <__ieee754_pow+0x220>
 8010b50:	f1b9 0f00 	cmp.w	r9, #0
 8010b54:	da0b      	bge.n	8010b6e <__ieee754_pow+0x226>
 8010b56:	2000      	movs	r0, #0
 8010b58:	b011      	add	sp, #68	@ 0x44
 8010b5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5e:	f001 b923 	b.w	8011da8 <__math_oflow>
 8010b62:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010bc8 <__ieee754_pow+0x280>
 8010b66:	e7e7      	b.n	8010b38 <__ieee754_pow+0x1f0>
 8010b68:	f1b9 0f00 	cmp.w	r9, #0
 8010b6c:	dcf3      	bgt.n	8010b56 <__ieee754_pow+0x20e>
 8010b6e:	2000      	movs	r0, #0
 8010b70:	b011      	add	sp, #68	@ 0x44
 8010b72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b76:	f001 b90f 	b.w	8011d98 <__math_uflow>
 8010b7a:	4598      	cmp	r8, r3
 8010b7c:	d20c      	bcs.n	8010b98 <__ieee754_pow+0x250>
 8010b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b82:	2200      	movs	r2, #0
 8010b84:	2300      	movs	r3, #0
 8010b86:	f7ef ffa9 	bl	8000adc <__aeabi_dcmplt>
 8010b8a:	3800      	subs	r0, #0
 8010b8c:	bf18      	it	ne
 8010b8e:	2001      	movne	r0, #1
 8010b90:	f1b9 0f00 	cmp.w	r9, #0
 8010b94:	daec      	bge.n	8010b70 <__ieee754_pow+0x228>
 8010b96:	e7df      	b.n	8010b58 <__ieee754_pow+0x210>
 8010b98:	4b10      	ldr	r3, [pc, #64]	@ (8010bdc <__ieee754_pow+0x294>)
 8010b9a:	4598      	cmp	r8, r3
 8010b9c:	f04f 0200 	mov.w	r2, #0
 8010ba0:	d924      	bls.n	8010bec <__ieee754_pow+0x2a4>
 8010ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	f7ef ff98 	bl	8000adc <__aeabi_dcmplt>
 8010bac:	3800      	subs	r0, #0
 8010bae:	bf18      	it	ne
 8010bb0:	2001      	movne	r0, #1
 8010bb2:	f1b9 0f00 	cmp.w	r9, #0
 8010bb6:	dccf      	bgt.n	8010b58 <__ieee754_pow+0x210>
 8010bb8:	e7da      	b.n	8010b70 <__ieee754_pow+0x228>
 8010bba:	bf00      	nop
 8010bbc:	f3af 8000 	nop.w
 8010bc0:	00000000 	.word	0x00000000
 8010bc4:	3ff00000 	.word	0x3ff00000
 8010bc8:	00000000 	.word	0x00000000
 8010bcc:	bff00000 	.word	0xbff00000
 8010bd0:	fff00000 	.word	0xfff00000
 8010bd4:	7ff00000 	.word	0x7ff00000
 8010bd8:	433fffff 	.word	0x433fffff
 8010bdc:	3ff00000 	.word	0x3ff00000
 8010be0:	3fefffff 	.word	0x3fefffff
 8010be4:	3fe00000 	.word	0x3fe00000
 8010be8:	43f00000 	.word	0x43f00000
 8010bec:	4b5a      	ldr	r3, [pc, #360]	@ (8010d58 <__ieee754_pow+0x410>)
 8010bee:	f7ef fb4b 	bl	8000288 <__aeabi_dsub>
 8010bf2:	a351      	add	r3, pc, #324	@ (adr r3, 8010d38 <__ieee754_pow+0x3f0>)
 8010bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	460d      	mov	r5, r1
 8010bfc:	f7ef fcfc 	bl	80005f8 <__aeabi_dmul>
 8010c00:	a34f      	add	r3, pc, #316	@ (adr r3, 8010d40 <__ieee754_pow+0x3f8>)
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	4606      	mov	r6, r0
 8010c08:	460f      	mov	r7, r1
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	f7ef fcf3 	bl	80005f8 <__aeabi_dmul>
 8010c12:	4b52      	ldr	r3, [pc, #328]	@ (8010d5c <__ieee754_pow+0x414>)
 8010c14:	4682      	mov	sl, r0
 8010c16:	468b      	mov	fp, r1
 8010c18:	2200      	movs	r2, #0
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	f7ef fceb 	bl	80005f8 <__aeabi_dmul>
 8010c22:	4602      	mov	r2, r0
 8010c24:	460b      	mov	r3, r1
 8010c26:	a148      	add	r1, pc, #288	@ (adr r1, 8010d48 <__ieee754_pow+0x400>)
 8010c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c2c:	f7ef fb2c 	bl	8000288 <__aeabi_dsub>
 8010c30:	4622      	mov	r2, r4
 8010c32:	462b      	mov	r3, r5
 8010c34:	f7ef fce0 	bl	80005f8 <__aeabi_dmul>
 8010c38:	4602      	mov	r2, r0
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	4948      	ldr	r1, [pc, #288]	@ (8010d60 <__ieee754_pow+0x418>)
 8010c40:	f7ef fb22 	bl	8000288 <__aeabi_dsub>
 8010c44:	4622      	mov	r2, r4
 8010c46:	4680      	mov	r8, r0
 8010c48:	4689      	mov	r9, r1
 8010c4a:	462b      	mov	r3, r5
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	4629      	mov	r1, r5
 8010c50:	f7ef fcd2 	bl	80005f8 <__aeabi_dmul>
 8010c54:	4602      	mov	r2, r0
 8010c56:	460b      	mov	r3, r1
 8010c58:	4640      	mov	r0, r8
 8010c5a:	4649      	mov	r1, r9
 8010c5c:	f7ef fccc 	bl	80005f8 <__aeabi_dmul>
 8010c60:	a33b      	add	r3, pc, #236	@ (adr r3, 8010d50 <__ieee754_pow+0x408>)
 8010c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c66:	f7ef fcc7 	bl	80005f8 <__aeabi_dmul>
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	4650      	mov	r0, sl
 8010c70:	4659      	mov	r1, fp
 8010c72:	f7ef fb09 	bl	8000288 <__aeabi_dsub>
 8010c76:	4602      	mov	r2, r0
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4680      	mov	r8, r0
 8010c7c:	4689      	mov	r9, r1
 8010c7e:	4630      	mov	r0, r6
 8010c80:	4639      	mov	r1, r7
 8010c82:	f7ef fb03 	bl	800028c <__adddf3>
 8010c86:	2400      	movs	r4, #0
 8010c88:	4632      	mov	r2, r6
 8010c8a:	463b      	mov	r3, r7
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	460d      	mov	r5, r1
 8010c90:	f7ef fafa 	bl	8000288 <__aeabi_dsub>
 8010c94:	4602      	mov	r2, r0
 8010c96:	460b      	mov	r3, r1
 8010c98:	4640      	mov	r0, r8
 8010c9a:	4649      	mov	r1, r9
 8010c9c:	f7ef faf4 	bl	8000288 <__aeabi_dsub>
 8010ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ca8:	2300      	movs	r3, #0
 8010caa:	9304      	str	r3, [sp, #16]
 8010cac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	460f      	mov	r7, r1
 8010cb4:	4652      	mov	r2, sl
 8010cb6:	465b      	mov	r3, fp
 8010cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cbc:	f7ef fae4 	bl	8000288 <__aeabi_dsub>
 8010cc0:	4622      	mov	r2, r4
 8010cc2:	462b      	mov	r3, r5
 8010cc4:	f7ef fc98 	bl	80005f8 <__aeabi_dmul>
 8010cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ccc:	4680      	mov	r8, r0
 8010cce:	4689      	mov	r9, r1
 8010cd0:	4630      	mov	r0, r6
 8010cd2:	4639      	mov	r1, r7
 8010cd4:	f7ef fc90 	bl	80005f8 <__aeabi_dmul>
 8010cd8:	4602      	mov	r2, r0
 8010cda:	460b      	mov	r3, r1
 8010cdc:	4640      	mov	r0, r8
 8010cde:	4649      	mov	r1, r9
 8010ce0:	f7ef fad4 	bl	800028c <__adddf3>
 8010ce4:	4652      	mov	r2, sl
 8010ce6:	465b      	mov	r3, fp
 8010ce8:	4606      	mov	r6, r0
 8010cea:	460f      	mov	r7, r1
 8010cec:	4620      	mov	r0, r4
 8010cee:	4629      	mov	r1, r5
 8010cf0:	f7ef fc82 	bl	80005f8 <__aeabi_dmul>
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	4680      	mov	r8, r0
 8010cfa:	4689      	mov	r9, r1
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	4639      	mov	r1, r7
 8010d00:	f7ef fac4 	bl	800028c <__adddf3>
 8010d04:	4b17      	ldr	r3, [pc, #92]	@ (8010d64 <__ieee754_pow+0x41c>)
 8010d06:	4299      	cmp	r1, r3
 8010d08:	4604      	mov	r4, r0
 8010d0a:	460d      	mov	r5, r1
 8010d0c:	468a      	mov	sl, r1
 8010d0e:	468b      	mov	fp, r1
 8010d10:	f340 82ef 	ble.w	80112f2 <__ieee754_pow+0x9aa>
 8010d14:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010d18:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010d1c:	4303      	orrs	r3, r0
 8010d1e:	f000 81e8 	beq.w	80110f2 <__ieee754_pow+0x7aa>
 8010d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d26:	2200      	movs	r2, #0
 8010d28:	2300      	movs	r3, #0
 8010d2a:	f7ef fed7 	bl	8000adc <__aeabi_dcmplt>
 8010d2e:	3800      	subs	r0, #0
 8010d30:	bf18      	it	ne
 8010d32:	2001      	movne	r0, #1
 8010d34:	e710      	b.n	8010b58 <__ieee754_pow+0x210>
 8010d36:	bf00      	nop
 8010d38:	60000000 	.word	0x60000000
 8010d3c:	3ff71547 	.word	0x3ff71547
 8010d40:	f85ddf44 	.word	0xf85ddf44
 8010d44:	3e54ae0b 	.word	0x3e54ae0b
 8010d48:	55555555 	.word	0x55555555
 8010d4c:	3fd55555 	.word	0x3fd55555
 8010d50:	652b82fe 	.word	0x652b82fe
 8010d54:	3ff71547 	.word	0x3ff71547
 8010d58:	3ff00000 	.word	0x3ff00000
 8010d5c:	3fd00000 	.word	0x3fd00000
 8010d60:	3fe00000 	.word	0x3fe00000
 8010d64:	408fffff 	.word	0x408fffff
 8010d68:	4bd5      	ldr	r3, [pc, #852]	@ (80110c0 <__ieee754_pow+0x778>)
 8010d6a:	402b      	ands	r3, r5
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	b92b      	cbnz	r3, 8010d7c <__ieee754_pow+0x434>
 8010d70:	4bd4      	ldr	r3, [pc, #848]	@ (80110c4 <__ieee754_pow+0x77c>)
 8010d72:	f7ef fc41 	bl	80005f8 <__aeabi_dmul>
 8010d76:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010d7a:	468b      	mov	fp, r1
 8010d7c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010d80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010d84:	4413      	add	r3, r2
 8010d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d88:	4bcf      	ldr	r3, [pc, #828]	@ (80110c8 <__ieee754_pow+0x780>)
 8010d8a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010d8e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010d92:	459b      	cmp	fp, r3
 8010d94:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010d98:	dd08      	ble.n	8010dac <__ieee754_pow+0x464>
 8010d9a:	4bcc      	ldr	r3, [pc, #816]	@ (80110cc <__ieee754_pow+0x784>)
 8010d9c:	459b      	cmp	fp, r3
 8010d9e:	f340 81a5 	ble.w	80110ec <__ieee754_pow+0x7a4>
 8010da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010da4:	3301      	adds	r3, #1
 8010da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010da8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010dac:	f04f 0a00 	mov.w	sl, #0
 8010db0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010db4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010db6:	4bc6      	ldr	r3, [pc, #792]	@ (80110d0 <__ieee754_pow+0x788>)
 8010db8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010dbc:	ed93 7b00 	vldr	d7, [r3]
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	ec53 2b17 	vmov	r2, r3, d7
 8010dc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010dca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010dce:	f7ef fa5b 	bl	8000288 <__aeabi_dsub>
 8010dd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010dd6:	4606      	mov	r6, r0
 8010dd8:	460f      	mov	r7, r1
 8010dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010dde:	f7ef fa55 	bl	800028c <__adddf3>
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	2000      	movs	r0, #0
 8010de8:	49ba      	ldr	r1, [pc, #744]	@ (80110d4 <__ieee754_pow+0x78c>)
 8010dea:	f7ef fd2f 	bl	800084c <__aeabi_ddiv>
 8010dee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010df2:	4602      	mov	r2, r0
 8010df4:	460b      	mov	r3, r1
 8010df6:	4630      	mov	r0, r6
 8010df8:	4639      	mov	r1, r7
 8010dfa:	f7ef fbfd 	bl	80005f8 <__aeabi_dmul>
 8010dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010e06:	106d      	asrs	r5, r5, #1
 8010e08:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010e0c:	f04f 0b00 	mov.w	fp, #0
 8010e10:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010e14:	4661      	mov	r1, ip
 8010e16:	2200      	movs	r2, #0
 8010e18:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010e1c:	4658      	mov	r0, fp
 8010e1e:	46e1      	mov	r9, ip
 8010e20:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010e24:	4614      	mov	r4, r2
 8010e26:	461d      	mov	r5, r3
 8010e28:	f7ef fbe6 	bl	80005f8 <__aeabi_dmul>
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	460b      	mov	r3, r1
 8010e30:	4630      	mov	r0, r6
 8010e32:	4639      	mov	r1, r7
 8010e34:	f7ef fa28 	bl	8000288 <__aeabi_dsub>
 8010e38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e3c:	4606      	mov	r6, r0
 8010e3e:	460f      	mov	r7, r1
 8010e40:	4620      	mov	r0, r4
 8010e42:	4629      	mov	r1, r5
 8010e44:	f7ef fa20 	bl	8000288 <__aeabi_dsub>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	460b      	mov	r3, r1
 8010e4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e50:	f7ef fa1a 	bl	8000288 <__aeabi_dsub>
 8010e54:	465a      	mov	r2, fp
 8010e56:	464b      	mov	r3, r9
 8010e58:	f7ef fbce 	bl	80005f8 <__aeabi_dmul>
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	460b      	mov	r3, r1
 8010e60:	4630      	mov	r0, r6
 8010e62:	4639      	mov	r1, r7
 8010e64:	f7ef fa10 	bl	8000288 <__aeabi_dsub>
 8010e68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010e6c:	f7ef fbc4 	bl	80005f8 <__aeabi_dmul>
 8010e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010e78:	4610      	mov	r0, r2
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	f7ef fbbc 	bl	80005f8 <__aeabi_dmul>
 8010e80:	a37d      	add	r3, pc, #500	@ (adr r3, 8011078 <__ieee754_pow+0x730>)
 8010e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e86:	4604      	mov	r4, r0
 8010e88:	460d      	mov	r5, r1
 8010e8a:	f7ef fbb5 	bl	80005f8 <__aeabi_dmul>
 8010e8e:	a37c      	add	r3, pc, #496	@ (adr r3, 8011080 <__ieee754_pow+0x738>)
 8010e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e94:	f7ef f9fa 	bl	800028c <__adddf3>
 8010e98:	4622      	mov	r2, r4
 8010e9a:	462b      	mov	r3, r5
 8010e9c:	f7ef fbac 	bl	80005f8 <__aeabi_dmul>
 8010ea0:	a379      	add	r3, pc, #484	@ (adr r3, 8011088 <__ieee754_pow+0x740>)
 8010ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea6:	f7ef f9f1 	bl	800028c <__adddf3>
 8010eaa:	4622      	mov	r2, r4
 8010eac:	462b      	mov	r3, r5
 8010eae:	f7ef fba3 	bl	80005f8 <__aeabi_dmul>
 8010eb2:	a377      	add	r3, pc, #476	@ (adr r3, 8011090 <__ieee754_pow+0x748>)
 8010eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb8:	f7ef f9e8 	bl	800028c <__adddf3>
 8010ebc:	4622      	mov	r2, r4
 8010ebe:	462b      	mov	r3, r5
 8010ec0:	f7ef fb9a 	bl	80005f8 <__aeabi_dmul>
 8010ec4:	a374      	add	r3, pc, #464	@ (adr r3, 8011098 <__ieee754_pow+0x750>)
 8010ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eca:	f7ef f9df 	bl	800028c <__adddf3>
 8010ece:	4622      	mov	r2, r4
 8010ed0:	462b      	mov	r3, r5
 8010ed2:	f7ef fb91 	bl	80005f8 <__aeabi_dmul>
 8010ed6:	a372      	add	r3, pc, #456	@ (adr r3, 80110a0 <__ieee754_pow+0x758>)
 8010ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010edc:	f7ef f9d6 	bl	800028c <__adddf3>
 8010ee0:	4622      	mov	r2, r4
 8010ee2:	4606      	mov	r6, r0
 8010ee4:	460f      	mov	r7, r1
 8010ee6:	462b      	mov	r3, r5
 8010ee8:	4620      	mov	r0, r4
 8010eea:	4629      	mov	r1, r5
 8010eec:	f7ef fb84 	bl	80005f8 <__aeabi_dmul>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	4639      	mov	r1, r7
 8010ef8:	f7ef fb7e 	bl	80005f8 <__aeabi_dmul>
 8010efc:	465a      	mov	r2, fp
 8010efe:	4604      	mov	r4, r0
 8010f00:	460d      	mov	r5, r1
 8010f02:	464b      	mov	r3, r9
 8010f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f08:	f7ef f9c0 	bl	800028c <__adddf3>
 8010f0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f10:	f7ef fb72 	bl	80005f8 <__aeabi_dmul>
 8010f14:	4622      	mov	r2, r4
 8010f16:	462b      	mov	r3, r5
 8010f18:	f7ef f9b8 	bl	800028c <__adddf3>
 8010f1c:	465a      	mov	r2, fp
 8010f1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010f22:	464b      	mov	r3, r9
 8010f24:	4658      	mov	r0, fp
 8010f26:	4649      	mov	r1, r9
 8010f28:	f7ef fb66 	bl	80005f8 <__aeabi_dmul>
 8010f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80110d8 <__ieee754_pow+0x790>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	4606      	mov	r6, r0
 8010f32:	460f      	mov	r7, r1
 8010f34:	f7ef f9aa 	bl	800028c <__adddf3>
 8010f38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010f3c:	f7ef f9a6 	bl	800028c <__adddf3>
 8010f40:	46d8      	mov	r8, fp
 8010f42:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010f46:	460d      	mov	r5, r1
 8010f48:	465a      	mov	r2, fp
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4640      	mov	r0, r8
 8010f4e:	4649      	mov	r1, r9
 8010f50:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010f54:	f7ef fb50 	bl	80005f8 <__aeabi_dmul>
 8010f58:	465c      	mov	r4, fp
 8010f5a:	4680      	mov	r8, r0
 8010f5c:	4689      	mov	r9, r1
 8010f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80110d8 <__ieee754_pow+0x790>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	4620      	mov	r0, r4
 8010f64:	4629      	mov	r1, r5
 8010f66:	f7ef f98f 	bl	8000288 <__aeabi_dsub>
 8010f6a:	4632      	mov	r2, r6
 8010f6c:	463b      	mov	r3, r7
 8010f6e:	f7ef f98b 	bl	8000288 <__aeabi_dsub>
 8010f72:	4602      	mov	r2, r0
 8010f74:	460b      	mov	r3, r1
 8010f76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010f7a:	f7ef f985 	bl	8000288 <__aeabi_dsub>
 8010f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f82:	f7ef fb39 	bl	80005f8 <__aeabi_dmul>
 8010f86:	4622      	mov	r2, r4
 8010f88:	4606      	mov	r6, r0
 8010f8a:	460f      	mov	r7, r1
 8010f8c:	462b      	mov	r3, r5
 8010f8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f92:	f7ef fb31 	bl	80005f8 <__aeabi_dmul>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	f7ef f975 	bl	800028c <__adddf3>
 8010fa2:	4606      	mov	r6, r0
 8010fa4:	460f      	mov	r7, r1
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	460b      	mov	r3, r1
 8010faa:	4640      	mov	r0, r8
 8010fac:	4649      	mov	r1, r9
 8010fae:	f7ef f96d 	bl	800028c <__adddf3>
 8010fb2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010fb6:	a33c      	add	r3, pc, #240	@ (adr r3, 80110a8 <__ieee754_pow+0x760>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	4658      	mov	r0, fp
 8010fbe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010fc2:	460d      	mov	r5, r1
 8010fc4:	f7ef fb18 	bl	80005f8 <__aeabi_dmul>
 8010fc8:	465c      	mov	r4, fp
 8010fca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010fce:	4642      	mov	r2, r8
 8010fd0:	464b      	mov	r3, r9
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	f7ef f957 	bl	8000288 <__aeabi_dsub>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	460b      	mov	r3, r1
 8010fde:	4630      	mov	r0, r6
 8010fe0:	4639      	mov	r1, r7
 8010fe2:	f7ef f951 	bl	8000288 <__aeabi_dsub>
 8010fe6:	a332      	add	r3, pc, #200	@ (adr r3, 80110b0 <__ieee754_pow+0x768>)
 8010fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fec:	f7ef fb04 	bl	80005f8 <__aeabi_dmul>
 8010ff0:	a331      	add	r3, pc, #196	@ (adr r3, 80110b8 <__ieee754_pow+0x770>)
 8010ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff6:	4606      	mov	r6, r0
 8010ff8:	460f      	mov	r7, r1
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	4629      	mov	r1, r5
 8010ffe:	f7ef fafb 	bl	80005f8 <__aeabi_dmul>
 8011002:	4602      	mov	r2, r0
 8011004:	460b      	mov	r3, r1
 8011006:	4630      	mov	r0, r6
 8011008:	4639      	mov	r1, r7
 801100a:	f7ef f93f 	bl	800028c <__adddf3>
 801100e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011010:	4b32      	ldr	r3, [pc, #200]	@ (80110dc <__ieee754_pow+0x794>)
 8011012:	4413      	add	r3, r2
 8011014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011018:	f7ef f938 	bl	800028c <__adddf3>
 801101c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011020:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011022:	f7ef fa7f 	bl	8000524 <__aeabi_i2d>
 8011026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011028:	4b2d      	ldr	r3, [pc, #180]	@ (80110e0 <__ieee754_pow+0x798>)
 801102a:	4413      	add	r3, r2
 801102c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011030:	4606      	mov	r6, r0
 8011032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011036:	460f      	mov	r7, r1
 8011038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801103c:	f7ef f926 	bl	800028c <__adddf3>
 8011040:	4642      	mov	r2, r8
 8011042:	464b      	mov	r3, r9
 8011044:	f7ef f922 	bl	800028c <__adddf3>
 8011048:	4632      	mov	r2, r6
 801104a:	463b      	mov	r3, r7
 801104c:	f7ef f91e 	bl	800028c <__adddf3>
 8011050:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8011054:	4632      	mov	r2, r6
 8011056:	463b      	mov	r3, r7
 8011058:	4658      	mov	r0, fp
 801105a:	460d      	mov	r5, r1
 801105c:	f7ef f914 	bl	8000288 <__aeabi_dsub>
 8011060:	4642      	mov	r2, r8
 8011062:	464b      	mov	r3, r9
 8011064:	f7ef f910 	bl	8000288 <__aeabi_dsub>
 8011068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801106c:	f7ef f90c 	bl	8000288 <__aeabi_dsub>
 8011070:	465c      	mov	r4, fp
 8011072:	4602      	mov	r2, r0
 8011074:	e036      	b.n	80110e4 <__ieee754_pow+0x79c>
 8011076:	bf00      	nop
 8011078:	4a454eef 	.word	0x4a454eef
 801107c:	3fca7e28 	.word	0x3fca7e28
 8011080:	93c9db65 	.word	0x93c9db65
 8011084:	3fcd864a 	.word	0x3fcd864a
 8011088:	a91d4101 	.word	0xa91d4101
 801108c:	3fd17460 	.word	0x3fd17460
 8011090:	518f264d 	.word	0x518f264d
 8011094:	3fd55555 	.word	0x3fd55555
 8011098:	db6fabff 	.word	0xdb6fabff
 801109c:	3fdb6db6 	.word	0x3fdb6db6
 80110a0:	33333303 	.word	0x33333303
 80110a4:	3fe33333 	.word	0x3fe33333
 80110a8:	e0000000 	.word	0xe0000000
 80110ac:	3feec709 	.word	0x3feec709
 80110b0:	dc3a03fd 	.word	0xdc3a03fd
 80110b4:	3feec709 	.word	0x3feec709
 80110b8:	145b01f5 	.word	0x145b01f5
 80110bc:	be3e2fe0 	.word	0xbe3e2fe0
 80110c0:	7ff00000 	.word	0x7ff00000
 80110c4:	43400000 	.word	0x43400000
 80110c8:	0003988e 	.word	0x0003988e
 80110cc:	000bb679 	.word	0x000bb679
 80110d0:	080128e0 	.word	0x080128e0
 80110d4:	3ff00000 	.word	0x3ff00000
 80110d8:	40080000 	.word	0x40080000
 80110dc:	080128c0 	.word	0x080128c0
 80110e0:	080128d0 	.word	0x080128d0
 80110e4:	460b      	mov	r3, r1
 80110e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110ea:	e5d7      	b.n	8010c9c <__ieee754_pow+0x354>
 80110ec:	f04f 0a01 	mov.w	sl, #1
 80110f0:	e65e      	b.n	8010db0 <__ieee754_pow+0x468>
 80110f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80113c4 <__ieee754_pow+0xa7c>)
 80110f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f8:	4630      	mov	r0, r6
 80110fa:	4639      	mov	r1, r7
 80110fc:	f7ef f8c6 	bl	800028c <__adddf3>
 8011100:	4642      	mov	r2, r8
 8011102:	e9cd 0100 	strd	r0, r1, [sp]
 8011106:	464b      	mov	r3, r9
 8011108:	4620      	mov	r0, r4
 801110a:	4629      	mov	r1, r5
 801110c:	f7ef f8bc 	bl	8000288 <__aeabi_dsub>
 8011110:	4602      	mov	r2, r0
 8011112:	460b      	mov	r3, r1
 8011114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011118:	f7ef fcfe 	bl	8000b18 <__aeabi_dcmpgt>
 801111c:	2800      	cmp	r0, #0
 801111e:	f47f ae00 	bne.w	8010d22 <__ieee754_pow+0x3da>
 8011122:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8011126:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801112a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801112e:	fa43 fa0a 	asr.w	sl, r3, sl
 8011132:	44da      	add	sl, fp
 8011134:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011138:	489d      	ldr	r0, [pc, #628]	@ (80113b0 <__ieee754_pow+0xa68>)
 801113a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801113e:	4108      	asrs	r0, r1
 8011140:	ea00 030a 	and.w	r3, r0, sl
 8011144:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011148:	f1c1 0114 	rsb	r1, r1, #20
 801114c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8011150:	fa4a fa01 	asr.w	sl, sl, r1
 8011154:	f1bb 0f00 	cmp.w	fp, #0
 8011158:	4640      	mov	r0, r8
 801115a:	4649      	mov	r1, r9
 801115c:	f04f 0200 	mov.w	r2, #0
 8011160:	bfb8      	it	lt
 8011162:	f1ca 0a00 	rsblt	sl, sl, #0
 8011166:	f7ef f88f 	bl	8000288 <__aeabi_dsub>
 801116a:	4680      	mov	r8, r0
 801116c:	4689      	mov	r9, r1
 801116e:	4632      	mov	r2, r6
 8011170:	463b      	mov	r3, r7
 8011172:	4640      	mov	r0, r8
 8011174:	4649      	mov	r1, r9
 8011176:	f7ef f889 	bl	800028c <__adddf3>
 801117a:	2400      	movs	r4, #0
 801117c:	a37c      	add	r3, pc, #496	@ (adr r3, 8011370 <__ieee754_pow+0xa28>)
 801117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011182:	4620      	mov	r0, r4
 8011184:	460d      	mov	r5, r1
 8011186:	f7ef fa37 	bl	80005f8 <__aeabi_dmul>
 801118a:	4642      	mov	r2, r8
 801118c:	e9cd 0100 	strd	r0, r1, [sp]
 8011190:	464b      	mov	r3, r9
 8011192:	4620      	mov	r0, r4
 8011194:	4629      	mov	r1, r5
 8011196:	f7ef f877 	bl	8000288 <__aeabi_dsub>
 801119a:	4602      	mov	r2, r0
 801119c:	460b      	mov	r3, r1
 801119e:	4630      	mov	r0, r6
 80111a0:	4639      	mov	r1, r7
 80111a2:	f7ef f871 	bl	8000288 <__aeabi_dsub>
 80111a6:	a374      	add	r3, pc, #464	@ (adr r3, 8011378 <__ieee754_pow+0xa30>)
 80111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ac:	f7ef fa24 	bl	80005f8 <__aeabi_dmul>
 80111b0:	a373      	add	r3, pc, #460	@ (adr r3, 8011380 <__ieee754_pow+0xa38>)
 80111b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b6:	4680      	mov	r8, r0
 80111b8:	4689      	mov	r9, r1
 80111ba:	4620      	mov	r0, r4
 80111bc:	4629      	mov	r1, r5
 80111be:	f7ef fa1b 	bl	80005f8 <__aeabi_dmul>
 80111c2:	4602      	mov	r2, r0
 80111c4:	460b      	mov	r3, r1
 80111c6:	4640      	mov	r0, r8
 80111c8:	4649      	mov	r1, r9
 80111ca:	f7ef f85f 	bl	800028c <__adddf3>
 80111ce:	4604      	mov	r4, r0
 80111d0:	460d      	mov	r5, r1
 80111d2:	4602      	mov	r2, r0
 80111d4:	460b      	mov	r3, r1
 80111d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111da:	f7ef f857 	bl	800028c <__adddf3>
 80111de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111e2:	4680      	mov	r8, r0
 80111e4:	4689      	mov	r9, r1
 80111e6:	f7ef f84f 	bl	8000288 <__aeabi_dsub>
 80111ea:	4602      	mov	r2, r0
 80111ec:	460b      	mov	r3, r1
 80111ee:	4620      	mov	r0, r4
 80111f0:	4629      	mov	r1, r5
 80111f2:	f7ef f849 	bl	8000288 <__aeabi_dsub>
 80111f6:	4642      	mov	r2, r8
 80111f8:	4606      	mov	r6, r0
 80111fa:	460f      	mov	r7, r1
 80111fc:	464b      	mov	r3, r9
 80111fe:	4640      	mov	r0, r8
 8011200:	4649      	mov	r1, r9
 8011202:	f7ef f9f9 	bl	80005f8 <__aeabi_dmul>
 8011206:	a360      	add	r3, pc, #384	@ (adr r3, 8011388 <__ieee754_pow+0xa40>)
 8011208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120c:	4604      	mov	r4, r0
 801120e:	460d      	mov	r5, r1
 8011210:	f7ef f9f2 	bl	80005f8 <__aeabi_dmul>
 8011214:	a35e      	add	r3, pc, #376	@ (adr r3, 8011390 <__ieee754_pow+0xa48>)
 8011216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121a:	f7ef f835 	bl	8000288 <__aeabi_dsub>
 801121e:	4622      	mov	r2, r4
 8011220:	462b      	mov	r3, r5
 8011222:	f7ef f9e9 	bl	80005f8 <__aeabi_dmul>
 8011226:	a35c      	add	r3, pc, #368	@ (adr r3, 8011398 <__ieee754_pow+0xa50>)
 8011228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122c:	f7ef f82e 	bl	800028c <__adddf3>
 8011230:	4622      	mov	r2, r4
 8011232:	462b      	mov	r3, r5
 8011234:	f7ef f9e0 	bl	80005f8 <__aeabi_dmul>
 8011238:	a359      	add	r3, pc, #356	@ (adr r3, 80113a0 <__ieee754_pow+0xa58>)
 801123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123e:	f7ef f823 	bl	8000288 <__aeabi_dsub>
 8011242:	4622      	mov	r2, r4
 8011244:	462b      	mov	r3, r5
 8011246:	f7ef f9d7 	bl	80005f8 <__aeabi_dmul>
 801124a:	a357      	add	r3, pc, #348	@ (adr r3, 80113a8 <__ieee754_pow+0xa60>)
 801124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011250:	f7ef f81c 	bl	800028c <__adddf3>
 8011254:	4622      	mov	r2, r4
 8011256:	462b      	mov	r3, r5
 8011258:	f7ef f9ce 	bl	80005f8 <__aeabi_dmul>
 801125c:	4602      	mov	r2, r0
 801125e:	460b      	mov	r3, r1
 8011260:	4640      	mov	r0, r8
 8011262:	4649      	mov	r1, r9
 8011264:	f7ef f810 	bl	8000288 <__aeabi_dsub>
 8011268:	4604      	mov	r4, r0
 801126a:	460d      	mov	r5, r1
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	4640      	mov	r0, r8
 8011272:	4649      	mov	r1, r9
 8011274:	f7ef f9c0 	bl	80005f8 <__aeabi_dmul>
 8011278:	2200      	movs	r2, #0
 801127a:	e9cd 0100 	strd	r0, r1, [sp]
 801127e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011282:	4620      	mov	r0, r4
 8011284:	4629      	mov	r1, r5
 8011286:	f7ee ffff 	bl	8000288 <__aeabi_dsub>
 801128a:	4602      	mov	r2, r0
 801128c:	460b      	mov	r3, r1
 801128e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011292:	f7ef fadb 	bl	800084c <__aeabi_ddiv>
 8011296:	4632      	mov	r2, r6
 8011298:	4604      	mov	r4, r0
 801129a:	460d      	mov	r5, r1
 801129c:	463b      	mov	r3, r7
 801129e:	4640      	mov	r0, r8
 80112a0:	4649      	mov	r1, r9
 80112a2:	f7ef f9a9 	bl	80005f8 <__aeabi_dmul>
 80112a6:	4632      	mov	r2, r6
 80112a8:	463b      	mov	r3, r7
 80112aa:	f7ee ffef 	bl	800028c <__adddf3>
 80112ae:	4602      	mov	r2, r0
 80112b0:	460b      	mov	r3, r1
 80112b2:	4620      	mov	r0, r4
 80112b4:	4629      	mov	r1, r5
 80112b6:	f7ee ffe7 	bl	8000288 <__aeabi_dsub>
 80112ba:	4642      	mov	r2, r8
 80112bc:	464b      	mov	r3, r9
 80112be:	f7ee ffe3 	bl	8000288 <__aeabi_dsub>
 80112c2:	460b      	mov	r3, r1
 80112c4:	4602      	mov	r2, r0
 80112c6:	493b      	ldr	r1, [pc, #236]	@ (80113b4 <__ieee754_pow+0xa6c>)
 80112c8:	2000      	movs	r0, #0
 80112ca:	f7ee ffdd 	bl	8000288 <__aeabi_dsub>
 80112ce:	ec41 0b10 	vmov	d0, r0, r1
 80112d2:	ee10 3a90 	vmov	r3, s1
 80112d6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80112da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80112de:	da30      	bge.n	8011342 <__ieee754_pow+0x9fa>
 80112e0:	4650      	mov	r0, sl
 80112e2:	f000 fcad 	bl	8011c40 <scalbn>
 80112e6:	ec51 0b10 	vmov	r0, r1, d0
 80112ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112ee:	f7ff bbd2 	b.w	8010a96 <__ieee754_pow+0x14e>
 80112f2:	4c31      	ldr	r4, [pc, #196]	@ (80113b8 <__ieee754_pow+0xa70>)
 80112f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80112f8:	42a3      	cmp	r3, r4
 80112fa:	d91a      	bls.n	8011332 <__ieee754_pow+0x9ea>
 80112fc:	4b2f      	ldr	r3, [pc, #188]	@ (80113bc <__ieee754_pow+0xa74>)
 80112fe:	440b      	add	r3, r1
 8011300:	4303      	orrs	r3, r0
 8011302:	d009      	beq.n	8011318 <__ieee754_pow+0x9d0>
 8011304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011308:	2200      	movs	r2, #0
 801130a:	2300      	movs	r3, #0
 801130c:	f7ef fbe6 	bl	8000adc <__aeabi_dcmplt>
 8011310:	3800      	subs	r0, #0
 8011312:	bf18      	it	ne
 8011314:	2001      	movne	r0, #1
 8011316:	e42b      	b.n	8010b70 <__ieee754_pow+0x228>
 8011318:	4642      	mov	r2, r8
 801131a:	464b      	mov	r3, r9
 801131c:	f7ee ffb4 	bl	8000288 <__aeabi_dsub>
 8011320:	4632      	mov	r2, r6
 8011322:	463b      	mov	r3, r7
 8011324:	f7ef fbee 	bl	8000b04 <__aeabi_dcmpge>
 8011328:	2800      	cmp	r0, #0
 801132a:	d1eb      	bne.n	8011304 <__ieee754_pow+0x9bc>
 801132c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80113cc <__ieee754_pow+0xa84>
 8011330:	e6f7      	b.n	8011122 <__ieee754_pow+0x7da>
 8011332:	469a      	mov	sl, r3
 8011334:	4b22      	ldr	r3, [pc, #136]	@ (80113c0 <__ieee754_pow+0xa78>)
 8011336:	459a      	cmp	sl, r3
 8011338:	f63f aef3 	bhi.w	8011122 <__ieee754_pow+0x7da>
 801133c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011340:	e715      	b.n	801116e <__ieee754_pow+0x826>
 8011342:	ec51 0b10 	vmov	r0, r1, d0
 8011346:	4619      	mov	r1, r3
 8011348:	e7cf      	b.n	80112ea <__ieee754_pow+0x9a2>
 801134a:	491a      	ldr	r1, [pc, #104]	@ (80113b4 <__ieee754_pow+0xa6c>)
 801134c:	2000      	movs	r0, #0
 801134e:	f7ff bb18 	b.w	8010982 <__ieee754_pow+0x3a>
 8011352:	2000      	movs	r0, #0
 8011354:	2100      	movs	r1, #0
 8011356:	f7ff bb14 	b.w	8010982 <__ieee754_pow+0x3a>
 801135a:	4630      	mov	r0, r6
 801135c:	4639      	mov	r1, r7
 801135e:	f7ff bb10 	b.w	8010982 <__ieee754_pow+0x3a>
 8011362:	460c      	mov	r4, r1
 8011364:	f7ff bb5e 	b.w	8010a24 <__ieee754_pow+0xdc>
 8011368:	2400      	movs	r4, #0
 801136a:	f7ff bb49 	b.w	8010a00 <__ieee754_pow+0xb8>
 801136e:	bf00      	nop
 8011370:	00000000 	.word	0x00000000
 8011374:	3fe62e43 	.word	0x3fe62e43
 8011378:	fefa39ef 	.word	0xfefa39ef
 801137c:	3fe62e42 	.word	0x3fe62e42
 8011380:	0ca86c39 	.word	0x0ca86c39
 8011384:	be205c61 	.word	0xbe205c61
 8011388:	72bea4d0 	.word	0x72bea4d0
 801138c:	3e663769 	.word	0x3e663769
 8011390:	c5d26bf1 	.word	0xc5d26bf1
 8011394:	3ebbbd41 	.word	0x3ebbbd41
 8011398:	af25de2c 	.word	0xaf25de2c
 801139c:	3f11566a 	.word	0x3f11566a
 80113a0:	16bebd93 	.word	0x16bebd93
 80113a4:	3f66c16c 	.word	0x3f66c16c
 80113a8:	5555553e 	.word	0x5555553e
 80113ac:	3fc55555 	.word	0x3fc55555
 80113b0:	fff00000 	.word	0xfff00000
 80113b4:	3ff00000 	.word	0x3ff00000
 80113b8:	4090cbff 	.word	0x4090cbff
 80113bc:	3f6f3400 	.word	0x3f6f3400
 80113c0:	3fe00000 	.word	0x3fe00000
 80113c4:	652b82fe 	.word	0x652b82fe
 80113c8:	3c971547 	.word	0x3c971547
 80113cc:	4090cc00 	.word	0x4090cc00

080113d0 <atan>:
 80113d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d4:	ec55 4b10 	vmov	r4, r5, d0
 80113d8:	4bbf      	ldr	r3, [pc, #764]	@ (80116d8 <atan+0x308>)
 80113da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80113de:	429e      	cmp	r6, r3
 80113e0:	46ab      	mov	fp, r5
 80113e2:	d918      	bls.n	8011416 <atan+0x46>
 80113e4:	4bbd      	ldr	r3, [pc, #756]	@ (80116dc <atan+0x30c>)
 80113e6:	429e      	cmp	r6, r3
 80113e8:	d801      	bhi.n	80113ee <atan+0x1e>
 80113ea:	d109      	bne.n	8011400 <atan+0x30>
 80113ec:	b144      	cbz	r4, 8011400 <atan+0x30>
 80113ee:	4622      	mov	r2, r4
 80113f0:	462b      	mov	r3, r5
 80113f2:	4620      	mov	r0, r4
 80113f4:	4629      	mov	r1, r5
 80113f6:	f7ee ff49 	bl	800028c <__adddf3>
 80113fa:	4604      	mov	r4, r0
 80113fc:	460d      	mov	r5, r1
 80113fe:	e006      	b.n	801140e <atan+0x3e>
 8011400:	f1bb 0f00 	cmp.w	fp, #0
 8011404:	f340 812b 	ble.w	801165e <atan+0x28e>
 8011408:	a597      	add	r5, pc, #604	@ (adr r5, 8011668 <atan+0x298>)
 801140a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801140e:	ec45 4b10 	vmov	d0, r4, r5
 8011412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011416:	4bb2      	ldr	r3, [pc, #712]	@ (80116e0 <atan+0x310>)
 8011418:	429e      	cmp	r6, r3
 801141a:	d813      	bhi.n	8011444 <atan+0x74>
 801141c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8011420:	429e      	cmp	r6, r3
 8011422:	d80c      	bhi.n	801143e <atan+0x6e>
 8011424:	a392      	add	r3, pc, #584	@ (adr r3, 8011670 <atan+0x2a0>)
 8011426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142a:	4620      	mov	r0, r4
 801142c:	4629      	mov	r1, r5
 801142e:	f7ee ff2d 	bl	800028c <__adddf3>
 8011432:	4bac      	ldr	r3, [pc, #688]	@ (80116e4 <atan+0x314>)
 8011434:	2200      	movs	r2, #0
 8011436:	f7ef fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 801143a:	2800      	cmp	r0, #0
 801143c:	d1e7      	bne.n	801140e <atan+0x3e>
 801143e:	f04f 3aff 	mov.w	sl, #4294967295
 8011442:	e029      	b.n	8011498 <atan+0xc8>
 8011444:	f7fe fdec 	bl	8010020 <fabs>
 8011448:	4ba7      	ldr	r3, [pc, #668]	@ (80116e8 <atan+0x318>)
 801144a:	429e      	cmp	r6, r3
 801144c:	ec55 4b10 	vmov	r4, r5, d0
 8011450:	f200 80bc 	bhi.w	80115cc <atan+0x1fc>
 8011454:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8011458:	429e      	cmp	r6, r3
 801145a:	f200 809e 	bhi.w	801159a <atan+0x1ca>
 801145e:	4622      	mov	r2, r4
 8011460:	462b      	mov	r3, r5
 8011462:	4620      	mov	r0, r4
 8011464:	4629      	mov	r1, r5
 8011466:	f7ee ff11 	bl	800028c <__adddf3>
 801146a:	4b9e      	ldr	r3, [pc, #632]	@ (80116e4 <atan+0x314>)
 801146c:	2200      	movs	r2, #0
 801146e:	f7ee ff0b 	bl	8000288 <__aeabi_dsub>
 8011472:	2200      	movs	r2, #0
 8011474:	4606      	mov	r6, r0
 8011476:	460f      	mov	r7, r1
 8011478:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801147c:	4620      	mov	r0, r4
 801147e:	4629      	mov	r1, r5
 8011480:	f7ee ff04 	bl	800028c <__adddf3>
 8011484:	4602      	mov	r2, r0
 8011486:	460b      	mov	r3, r1
 8011488:	4630      	mov	r0, r6
 801148a:	4639      	mov	r1, r7
 801148c:	f7ef f9de 	bl	800084c <__aeabi_ddiv>
 8011490:	f04f 0a00 	mov.w	sl, #0
 8011494:	4604      	mov	r4, r0
 8011496:	460d      	mov	r5, r1
 8011498:	4622      	mov	r2, r4
 801149a:	462b      	mov	r3, r5
 801149c:	4620      	mov	r0, r4
 801149e:	4629      	mov	r1, r5
 80114a0:	f7ef f8aa 	bl	80005f8 <__aeabi_dmul>
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	4680      	mov	r8, r0
 80114aa:	4689      	mov	r9, r1
 80114ac:	f7ef f8a4 	bl	80005f8 <__aeabi_dmul>
 80114b0:	a371      	add	r3, pc, #452	@ (adr r3, 8011678 <atan+0x2a8>)
 80114b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b6:	4606      	mov	r6, r0
 80114b8:	460f      	mov	r7, r1
 80114ba:	f7ef f89d 	bl	80005f8 <__aeabi_dmul>
 80114be:	a370      	add	r3, pc, #448	@ (adr r3, 8011680 <atan+0x2b0>)
 80114c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c4:	f7ee fee2 	bl	800028c <__adddf3>
 80114c8:	4632      	mov	r2, r6
 80114ca:	463b      	mov	r3, r7
 80114cc:	f7ef f894 	bl	80005f8 <__aeabi_dmul>
 80114d0:	a36d      	add	r3, pc, #436	@ (adr r3, 8011688 <atan+0x2b8>)
 80114d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d6:	f7ee fed9 	bl	800028c <__adddf3>
 80114da:	4632      	mov	r2, r6
 80114dc:	463b      	mov	r3, r7
 80114de:	f7ef f88b 	bl	80005f8 <__aeabi_dmul>
 80114e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8011690 <atan+0x2c0>)
 80114e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e8:	f7ee fed0 	bl	800028c <__adddf3>
 80114ec:	4632      	mov	r2, r6
 80114ee:	463b      	mov	r3, r7
 80114f0:	f7ef f882 	bl	80005f8 <__aeabi_dmul>
 80114f4:	a368      	add	r3, pc, #416	@ (adr r3, 8011698 <atan+0x2c8>)
 80114f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fa:	f7ee fec7 	bl	800028c <__adddf3>
 80114fe:	4632      	mov	r2, r6
 8011500:	463b      	mov	r3, r7
 8011502:	f7ef f879 	bl	80005f8 <__aeabi_dmul>
 8011506:	a366      	add	r3, pc, #408	@ (adr r3, 80116a0 <atan+0x2d0>)
 8011508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150c:	f7ee febe 	bl	800028c <__adddf3>
 8011510:	4642      	mov	r2, r8
 8011512:	464b      	mov	r3, r9
 8011514:	f7ef f870 	bl	80005f8 <__aeabi_dmul>
 8011518:	a363      	add	r3, pc, #396	@ (adr r3, 80116a8 <atan+0x2d8>)
 801151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151e:	4680      	mov	r8, r0
 8011520:	4689      	mov	r9, r1
 8011522:	4630      	mov	r0, r6
 8011524:	4639      	mov	r1, r7
 8011526:	f7ef f867 	bl	80005f8 <__aeabi_dmul>
 801152a:	a361      	add	r3, pc, #388	@ (adr r3, 80116b0 <atan+0x2e0>)
 801152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011530:	f7ee feaa 	bl	8000288 <__aeabi_dsub>
 8011534:	4632      	mov	r2, r6
 8011536:	463b      	mov	r3, r7
 8011538:	f7ef f85e 	bl	80005f8 <__aeabi_dmul>
 801153c:	a35e      	add	r3, pc, #376	@ (adr r3, 80116b8 <atan+0x2e8>)
 801153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011542:	f7ee fea1 	bl	8000288 <__aeabi_dsub>
 8011546:	4632      	mov	r2, r6
 8011548:	463b      	mov	r3, r7
 801154a:	f7ef f855 	bl	80005f8 <__aeabi_dmul>
 801154e:	a35c      	add	r3, pc, #368	@ (adr r3, 80116c0 <atan+0x2f0>)
 8011550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011554:	f7ee fe98 	bl	8000288 <__aeabi_dsub>
 8011558:	4632      	mov	r2, r6
 801155a:	463b      	mov	r3, r7
 801155c:	f7ef f84c 	bl	80005f8 <__aeabi_dmul>
 8011560:	a359      	add	r3, pc, #356	@ (adr r3, 80116c8 <atan+0x2f8>)
 8011562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011566:	f7ee fe8f 	bl	8000288 <__aeabi_dsub>
 801156a:	4632      	mov	r2, r6
 801156c:	463b      	mov	r3, r7
 801156e:	f7ef f843 	bl	80005f8 <__aeabi_dmul>
 8011572:	4602      	mov	r2, r0
 8011574:	460b      	mov	r3, r1
 8011576:	4640      	mov	r0, r8
 8011578:	4649      	mov	r1, r9
 801157a:	f7ee fe87 	bl	800028c <__adddf3>
 801157e:	4622      	mov	r2, r4
 8011580:	462b      	mov	r3, r5
 8011582:	f7ef f839 	bl	80005f8 <__aeabi_dmul>
 8011586:	f1ba 3fff 	cmp.w	sl, #4294967295
 801158a:	4602      	mov	r2, r0
 801158c:	460b      	mov	r3, r1
 801158e:	d148      	bne.n	8011622 <atan+0x252>
 8011590:	4620      	mov	r0, r4
 8011592:	4629      	mov	r1, r5
 8011594:	f7ee fe78 	bl	8000288 <__aeabi_dsub>
 8011598:	e72f      	b.n	80113fa <atan+0x2a>
 801159a:	4b52      	ldr	r3, [pc, #328]	@ (80116e4 <atan+0x314>)
 801159c:	2200      	movs	r2, #0
 801159e:	4620      	mov	r0, r4
 80115a0:	4629      	mov	r1, r5
 80115a2:	f7ee fe71 	bl	8000288 <__aeabi_dsub>
 80115a6:	4b4f      	ldr	r3, [pc, #316]	@ (80116e4 <atan+0x314>)
 80115a8:	4606      	mov	r6, r0
 80115aa:	460f      	mov	r7, r1
 80115ac:	2200      	movs	r2, #0
 80115ae:	4620      	mov	r0, r4
 80115b0:	4629      	mov	r1, r5
 80115b2:	f7ee fe6b 	bl	800028c <__adddf3>
 80115b6:	4602      	mov	r2, r0
 80115b8:	460b      	mov	r3, r1
 80115ba:	4630      	mov	r0, r6
 80115bc:	4639      	mov	r1, r7
 80115be:	f7ef f945 	bl	800084c <__aeabi_ddiv>
 80115c2:	f04f 0a01 	mov.w	sl, #1
 80115c6:	4604      	mov	r4, r0
 80115c8:	460d      	mov	r5, r1
 80115ca:	e765      	b.n	8011498 <atan+0xc8>
 80115cc:	4b47      	ldr	r3, [pc, #284]	@ (80116ec <atan+0x31c>)
 80115ce:	429e      	cmp	r6, r3
 80115d0:	d21c      	bcs.n	801160c <atan+0x23c>
 80115d2:	4b47      	ldr	r3, [pc, #284]	@ (80116f0 <atan+0x320>)
 80115d4:	2200      	movs	r2, #0
 80115d6:	4620      	mov	r0, r4
 80115d8:	4629      	mov	r1, r5
 80115da:	f7ee fe55 	bl	8000288 <__aeabi_dsub>
 80115de:	4b44      	ldr	r3, [pc, #272]	@ (80116f0 <atan+0x320>)
 80115e0:	4606      	mov	r6, r0
 80115e2:	460f      	mov	r7, r1
 80115e4:	2200      	movs	r2, #0
 80115e6:	4620      	mov	r0, r4
 80115e8:	4629      	mov	r1, r5
 80115ea:	f7ef f805 	bl	80005f8 <__aeabi_dmul>
 80115ee:	4b3d      	ldr	r3, [pc, #244]	@ (80116e4 <atan+0x314>)
 80115f0:	2200      	movs	r2, #0
 80115f2:	f7ee fe4b 	bl	800028c <__adddf3>
 80115f6:	4602      	mov	r2, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	4630      	mov	r0, r6
 80115fc:	4639      	mov	r1, r7
 80115fe:	f7ef f925 	bl	800084c <__aeabi_ddiv>
 8011602:	f04f 0a02 	mov.w	sl, #2
 8011606:	4604      	mov	r4, r0
 8011608:	460d      	mov	r5, r1
 801160a:	e745      	b.n	8011498 <atan+0xc8>
 801160c:	4622      	mov	r2, r4
 801160e:	462b      	mov	r3, r5
 8011610:	4938      	ldr	r1, [pc, #224]	@ (80116f4 <atan+0x324>)
 8011612:	2000      	movs	r0, #0
 8011614:	f7ef f91a 	bl	800084c <__aeabi_ddiv>
 8011618:	f04f 0a03 	mov.w	sl, #3
 801161c:	4604      	mov	r4, r0
 801161e:	460d      	mov	r5, r1
 8011620:	e73a      	b.n	8011498 <atan+0xc8>
 8011622:	4b35      	ldr	r3, [pc, #212]	@ (80116f8 <atan+0x328>)
 8011624:	4e35      	ldr	r6, [pc, #212]	@ (80116fc <atan+0x32c>)
 8011626:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162e:	f7ee fe2b 	bl	8000288 <__aeabi_dsub>
 8011632:	4622      	mov	r2, r4
 8011634:	462b      	mov	r3, r5
 8011636:	f7ee fe27 	bl	8000288 <__aeabi_dsub>
 801163a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011646:	f7ee fe1f 	bl	8000288 <__aeabi_dsub>
 801164a:	f1bb 0f00 	cmp.w	fp, #0
 801164e:	4604      	mov	r4, r0
 8011650:	460d      	mov	r5, r1
 8011652:	f6bf aedc 	bge.w	801140e <atan+0x3e>
 8011656:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801165a:	461d      	mov	r5, r3
 801165c:	e6d7      	b.n	801140e <atan+0x3e>
 801165e:	a51c      	add	r5, pc, #112	@ (adr r5, 80116d0 <atan+0x300>)
 8011660:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011664:	e6d3      	b.n	801140e <atan+0x3e>
 8011666:	bf00      	nop
 8011668:	54442d18 	.word	0x54442d18
 801166c:	3ff921fb 	.word	0x3ff921fb
 8011670:	8800759c 	.word	0x8800759c
 8011674:	7e37e43c 	.word	0x7e37e43c
 8011678:	e322da11 	.word	0xe322da11
 801167c:	3f90ad3a 	.word	0x3f90ad3a
 8011680:	24760deb 	.word	0x24760deb
 8011684:	3fa97b4b 	.word	0x3fa97b4b
 8011688:	a0d03d51 	.word	0xa0d03d51
 801168c:	3fb10d66 	.word	0x3fb10d66
 8011690:	c54c206e 	.word	0xc54c206e
 8011694:	3fb745cd 	.word	0x3fb745cd
 8011698:	920083ff 	.word	0x920083ff
 801169c:	3fc24924 	.word	0x3fc24924
 80116a0:	5555550d 	.word	0x5555550d
 80116a4:	3fd55555 	.word	0x3fd55555
 80116a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80116ac:	bfa2b444 	.word	0xbfa2b444
 80116b0:	52defd9a 	.word	0x52defd9a
 80116b4:	3fadde2d 	.word	0x3fadde2d
 80116b8:	af749a6d 	.word	0xaf749a6d
 80116bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80116c0:	fe231671 	.word	0xfe231671
 80116c4:	3fbc71c6 	.word	0x3fbc71c6
 80116c8:	9998ebc4 	.word	0x9998ebc4
 80116cc:	3fc99999 	.word	0x3fc99999
 80116d0:	54442d18 	.word	0x54442d18
 80116d4:	bff921fb 	.word	0xbff921fb
 80116d8:	440fffff 	.word	0x440fffff
 80116dc:	7ff00000 	.word	0x7ff00000
 80116e0:	3fdbffff 	.word	0x3fdbffff
 80116e4:	3ff00000 	.word	0x3ff00000
 80116e8:	3ff2ffff 	.word	0x3ff2ffff
 80116ec:	40038000 	.word	0x40038000
 80116f0:	3ff80000 	.word	0x3ff80000
 80116f4:	bff00000 	.word	0xbff00000
 80116f8:	080128f0 	.word	0x080128f0
 80116fc:	08012910 	.word	0x08012910

08011700 <__kernel_cosf>:
 8011700:	ee10 3a10 	vmov	r3, s0
 8011704:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011708:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801170c:	eef0 6a40 	vmov.f32	s13, s0
 8011710:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011714:	d204      	bcs.n	8011720 <__kernel_cosf+0x20>
 8011716:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801171a:	ee17 2a90 	vmov	r2, s15
 801171e:	b342      	cbz	r2, 8011772 <__kernel_cosf+0x72>
 8011720:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011724:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011790 <__kernel_cosf+0x90>
 8011728:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011794 <__kernel_cosf+0x94>
 801172c:	4a1a      	ldr	r2, [pc, #104]	@ (8011798 <__kernel_cosf+0x98>)
 801172e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011732:	4293      	cmp	r3, r2
 8011734:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801179c <__kernel_cosf+0x9c>
 8011738:	eee6 7a07 	vfma.f32	s15, s12, s14
 801173c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80117a0 <__kernel_cosf+0xa0>
 8011740:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011744:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80117a4 <__kernel_cosf+0xa4>
 8011748:	eee6 7a07 	vfma.f32	s15, s12, s14
 801174c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80117a8 <__kernel_cosf+0xa8>
 8011750:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011754:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8011758:	ee26 6a07 	vmul.f32	s12, s12, s14
 801175c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011760:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011768:	d804      	bhi.n	8011774 <__kernel_cosf+0x74>
 801176a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801176e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011772:	4770      	bx	lr
 8011774:	4a0d      	ldr	r2, [pc, #52]	@ (80117ac <__kernel_cosf+0xac>)
 8011776:	4293      	cmp	r3, r2
 8011778:	bf9a      	itte	ls
 801177a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801177e:	ee07 3a10 	vmovls	s14, r3
 8011782:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011786:	ee30 0a47 	vsub.f32	s0, s0, s14
 801178a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801178e:	e7ec      	b.n	801176a <__kernel_cosf+0x6a>
 8011790:	ad47d74e 	.word	0xad47d74e
 8011794:	310f74f6 	.word	0x310f74f6
 8011798:	3e999999 	.word	0x3e999999
 801179c:	b493f27c 	.word	0xb493f27c
 80117a0:	37d00d01 	.word	0x37d00d01
 80117a4:	bab60b61 	.word	0xbab60b61
 80117a8:	3d2aaaab 	.word	0x3d2aaaab
 80117ac:	3f480000 	.word	0x3f480000

080117b0 <__kernel_sinf>:
 80117b0:	ee10 3a10 	vmov	r3, s0
 80117b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80117b8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80117bc:	d204      	bcs.n	80117c8 <__kernel_sinf+0x18>
 80117be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80117c2:	ee17 3a90 	vmov	r3, s15
 80117c6:	b35b      	cbz	r3, 8011820 <__kernel_sinf+0x70>
 80117c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80117cc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011824 <__kernel_sinf+0x74>
 80117d0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011828 <__kernel_sinf+0x78>
 80117d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80117d8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801182c <__kernel_sinf+0x7c>
 80117dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80117e0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011830 <__kernel_sinf+0x80>
 80117e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80117e8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011834 <__kernel_sinf+0x84>
 80117ec:	ee60 6a07 	vmul.f32	s13, s0, s14
 80117f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80117f4:	b930      	cbnz	r0, 8011804 <__kernel_sinf+0x54>
 80117f6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011838 <__kernel_sinf+0x88>
 80117fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80117fe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011802:	4770      	bx	lr
 8011804:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011808:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801180c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011810:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011814:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801183c <__kernel_sinf+0x8c>
 8011818:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801181c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	2f2ec9d3 	.word	0x2f2ec9d3
 8011828:	b2d72f34 	.word	0xb2d72f34
 801182c:	3638ef1b 	.word	0x3638ef1b
 8011830:	b9500d01 	.word	0xb9500d01
 8011834:	3c088889 	.word	0x3c088889
 8011838:	be2aaaab 	.word	0xbe2aaaab
 801183c:	3e2aaaab 	.word	0x3e2aaaab

08011840 <__ieee754_expf>:
 8011840:	ee10 2a10 	vmov	r2, s0
 8011844:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8011848:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801184c:	d902      	bls.n	8011854 <__ieee754_expf+0x14>
 801184e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011852:	4770      	bx	lr
 8011854:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8011858:	d106      	bne.n	8011868 <__ieee754_expf+0x28>
 801185a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8011994 <__ieee754_expf+0x154>
 801185e:	2900      	cmp	r1, #0
 8011860:	bf18      	it	ne
 8011862:	eeb0 0a67 	vmovne.f32	s0, s15
 8011866:	4770      	bx	lr
 8011868:	484b      	ldr	r0, [pc, #300]	@ (8011998 <__ieee754_expf+0x158>)
 801186a:	4282      	cmp	r2, r0
 801186c:	dd02      	ble.n	8011874 <__ieee754_expf+0x34>
 801186e:	2000      	movs	r0, #0
 8011870:	f000 bb28 	b.w	8011ec4 <__math_oflowf>
 8011874:	2a00      	cmp	r2, #0
 8011876:	da05      	bge.n	8011884 <__ieee754_expf+0x44>
 8011878:	4a48      	ldr	r2, [pc, #288]	@ (801199c <__ieee754_expf+0x15c>)
 801187a:	4293      	cmp	r3, r2
 801187c:	d902      	bls.n	8011884 <__ieee754_expf+0x44>
 801187e:	2000      	movs	r0, #0
 8011880:	f000 bb1a 	b.w	8011eb8 <__math_uflowf>
 8011884:	4a46      	ldr	r2, [pc, #280]	@ (80119a0 <__ieee754_expf+0x160>)
 8011886:	4293      	cmp	r3, r2
 8011888:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801188c:	d952      	bls.n	8011934 <__ieee754_expf+0xf4>
 801188e:	4a45      	ldr	r2, [pc, #276]	@ (80119a4 <__ieee754_expf+0x164>)
 8011890:	4293      	cmp	r3, r2
 8011892:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8011896:	d834      	bhi.n	8011902 <__ieee754_expf+0xc2>
 8011898:	4b43      	ldr	r3, [pc, #268]	@ (80119a8 <__ieee754_expf+0x168>)
 801189a:	4413      	add	r3, r2
 801189c:	ed93 7a00 	vldr	s14, [r3]
 80118a0:	4b42      	ldr	r3, [pc, #264]	@ (80119ac <__ieee754_expf+0x16c>)
 80118a2:	4413      	add	r3, r2
 80118a4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80118a8:	f1c1 0201 	rsb	r2, r1, #1
 80118ac:	edd3 7a00 	vldr	s15, [r3]
 80118b0:	1a52      	subs	r2, r2, r1
 80118b2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80118b6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80118ba:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80119b0 <__ieee754_expf+0x170>
 80118be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80119b4 <__ieee754_expf+0x174>
 80118c2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80118c6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80119b8 <__ieee754_expf+0x178>
 80118ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 80118ce:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80119bc <__ieee754_expf+0x17c>
 80118d2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80118d6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80119c0 <__ieee754_expf+0x180>
 80118da:	eea6 5a86 	vfma.f32	s10, s13, s12
 80118de:	eef0 6a40 	vmov.f32	s13, s0
 80118e2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80118e6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80118ea:	ee20 5a26 	vmul.f32	s10, s0, s13
 80118ee:	bb92      	cbnz	r2, 8011956 <__ieee754_expf+0x116>
 80118f0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80118f4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80118f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80118fc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8011900:	4770      	bx	lr
 8011902:	4b30      	ldr	r3, [pc, #192]	@ (80119c4 <__ieee754_expf+0x184>)
 8011904:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80119c8 <__ieee754_expf+0x188>
 8011908:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80119cc <__ieee754_expf+0x18c>
 801190c:	4413      	add	r3, r2
 801190e:	edd3 7a00 	vldr	s15, [r3]
 8011912:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011916:	eeb0 7a40 	vmov.f32	s14, s0
 801191a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801191e:	ee17 2a90 	vmov	r2, s15
 8011922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011926:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801192a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80119d0 <__ieee754_expf+0x190>
 801192e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011932:	e7be      	b.n	80118b2 <__ieee754_expf+0x72>
 8011934:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8011938:	d20b      	bcs.n	8011952 <__ieee754_expf+0x112>
 801193a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80119d4 <__ieee754_expf+0x194>
 801193e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011942:	eef4 6ae5 	vcmpe.f32	s13, s11
 8011946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801194a:	dd02      	ble.n	8011952 <__ieee754_expf+0x112>
 801194c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8011950:	4770      	bx	lr
 8011952:	2200      	movs	r2, #0
 8011954:	e7af      	b.n	80118b6 <__ieee754_expf+0x76>
 8011956:	ee36 6a66 	vsub.f32	s12, s12, s13
 801195a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801195e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8011962:	bfb8      	it	lt
 8011964:	3264      	addlt	r2, #100	@ 0x64
 8011966:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801196a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801196e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011972:	ee17 3a90 	vmov	r3, s15
 8011976:	bfab      	itete	ge
 8011978:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801197c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011980:	ee00 3a10 	vmovge	s0, r3
 8011984:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80119d8 <__ieee754_expf+0x198>
 8011988:	bfbc      	itt	lt
 801198a:	ee00 3a10 	vmovlt	s0, r3
 801198e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011992:	4770      	bx	lr
 8011994:	00000000 	.word	0x00000000
 8011998:	42b17217 	.word	0x42b17217
 801199c:	42cff1b5 	.word	0x42cff1b5
 80119a0:	3eb17218 	.word	0x3eb17218
 80119a4:	3f851591 	.word	0x3f851591
 80119a8:	08012938 	.word	0x08012938
 80119ac:	08012930 	.word	0x08012930
 80119b0:	3331bb4c 	.word	0x3331bb4c
 80119b4:	b5ddea0e 	.word	0xb5ddea0e
 80119b8:	388ab355 	.word	0x388ab355
 80119bc:	bb360b61 	.word	0xbb360b61
 80119c0:	3e2aaaab 	.word	0x3e2aaaab
 80119c4:	08012940 	.word	0x08012940
 80119c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80119cc:	3f317180 	.word	0x3f317180
 80119d0:	3717f7d1 	.word	0x3717f7d1
 80119d4:	7149f2ca 	.word	0x7149f2ca
 80119d8:	0d800000 	.word	0x0d800000

080119dc <__ieee754_rem_pio2f>:
 80119dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119de:	ee10 6a10 	vmov	r6, s0
 80119e2:	4b88      	ldr	r3, [pc, #544]	@ (8011c04 <__ieee754_rem_pio2f+0x228>)
 80119e4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80119e8:	429d      	cmp	r5, r3
 80119ea:	b087      	sub	sp, #28
 80119ec:	4604      	mov	r4, r0
 80119ee:	d805      	bhi.n	80119fc <__ieee754_rem_pio2f+0x20>
 80119f0:	2300      	movs	r3, #0
 80119f2:	ed80 0a00 	vstr	s0, [r0]
 80119f6:	6043      	str	r3, [r0, #4]
 80119f8:	2000      	movs	r0, #0
 80119fa:	e022      	b.n	8011a42 <__ieee754_rem_pio2f+0x66>
 80119fc:	4b82      	ldr	r3, [pc, #520]	@ (8011c08 <__ieee754_rem_pio2f+0x22c>)
 80119fe:	429d      	cmp	r5, r3
 8011a00:	d83a      	bhi.n	8011a78 <__ieee754_rem_pio2f+0x9c>
 8011a02:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011c0c <__ieee754_rem_pio2f+0x230>
 8011a0c:	4a80      	ldr	r2, [pc, #512]	@ (8011c10 <__ieee754_rem_pio2f+0x234>)
 8011a0e:	f023 030f 	bic.w	r3, r3, #15
 8011a12:	dd18      	ble.n	8011a46 <__ieee754_rem_pio2f+0x6a>
 8011a14:	4293      	cmp	r3, r2
 8011a16:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011a1a:	bf09      	itett	eq
 8011a1c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011c14 <__ieee754_rem_pio2f+0x238>
 8011a20:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011c18 <__ieee754_rem_pio2f+0x23c>
 8011a24:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011c1c <__ieee754_rem_pio2f+0x240>
 8011a28:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011a2c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011a30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a34:	ed80 7a00 	vstr	s14, [r0]
 8011a38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011a3c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011a40:	2001      	movs	r0, #1
 8011a42:	b007      	add	sp, #28
 8011a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a46:	4293      	cmp	r3, r2
 8011a48:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011a4c:	bf09      	itett	eq
 8011a4e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011c14 <__ieee754_rem_pio2f+0x238>
 8011a52:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011c18 <__ieee754_rem_pio2f+0x23c>
 8011a56:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011c1c <__ieee754_rem_pio2f+0x240>
 8011a5a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011a5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a66:	ed80 7a00 	vstr	s14, [r0]
 8011a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a6e:	edc0 7a01 	vstr	s15, [r0, #4]
 8011a72:	f04f 30ff 	mov.w	r0, #4294967295
 8011a76:	e7e4      	b.n	8011a42 <__ieee754_rem_pio2f+0x66>
 8011a78:	4b69      	ldr	r3, [pc, #420]	@ (8011c20 <__ieee754_rem_pio2f+0x244>)
 8011a7a:	429d      	cmp	r5, r3
 8011a7c:	d873      	bhi.n	8011b66 <__ieee754_rem_pio2f+0x18a>
 8011a7e:	f7fe fb51 	bl	8010124 <fabsf>
 8011a82:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011c24 <__ieee754_rem_pio2f+0x248>
 8011a86:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011a8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011a96:	ee17 0a90 	vmov	r0, s15
 8011a9a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011c0c <__ieee754_rem_pio2f+0x230>
 8011a9e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011aa2:	281f      	cmp	r0, #31
 8011aa4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011c18 <__ieee754_rem_pio2f+0x23c>
 8011aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011aac:	eeb1 6a47 	vneg.f32	s12, s14
 8011ab0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011ab4:	ee16 1a90 	vmov	r1, s13
 8011ab8:	dc09      	bgt.n	8011ace <__ieee754_rem_pio2f+0xf2>
 8011aba:	4a5b      	ldr	r2, [pc, #364]	@ (8011c28 <__ieee754_rem_pio2f+0x24c>)
 8011abc:	1e47      	subs	r7, r0, #1
 8011abe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011ac2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8011ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011aca:	4293      	cmp	r3, r2
 8011acc:	d107      	bne.n	8011ade <__ieee754_rem_pio2f+0x102>
 8011ace:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011ad2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011ad6:	2a08      	cmp	r2, #8
 8011ad8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011adc:	dc14      	bgt.n	8011b08 <__ieee754_rem_pio2f+0x12c>
 8011ade:	6021      	str	r1, [r4, #0]
 8011ae0:	ed94 7a00 	vldr	s14, [r4]
 8011ae4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011ae8:	2e00      	cmp	r6, #0
 8011aea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011aee:	ed84 0a01 	vstr	s0, [r4, #4]
 8011af2:	daa6      	bge.n	8011a42 <__ieee754_rem_pio2f+0x66>
 8011af4:	eeb1 7a47 	vneg.f32	s14, s14
 8011af8:	eeb1 0a40 	vneg.f32	s0, s0
 8011afc:	ed84 7a00 	vstr	s14, [r4]
 8011b00:	ed84 0a01 	vstr	s0, [r4, #4]
 8011b04:	4240      	negs	r0, r0
 8011b06:	e79c      	b.n	8011a42 <__ieee754_rem_pio2f+0x66>
 8011b08:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011c14 <__ieee754_rem_pio2f+0x238>
 8011b0c:	eef0 6a40 	vmov.f32	s13, s0
 8011b10:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011b14:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011b18:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011b1c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011c1c <__ieee754_rem_pio2f+0x240>
 8011b20:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011b24:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011b28:	ee15 2a90 	vmov	r2, s11
 8011b2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011b30:	1a5b      	subs	r3, r3, r1
 8011b32:	2b19      	cmp	r3, #25
 8011b34:	dc04      	bgt.n	8011b40 <__ieee754_rem_pio2f+0x164>
 8011b36:	edc4 5a00 	vstr	s11, [r4]
 8011b3a:	eeb0 0a66 	vmov.f32	s0, s13
 8011b3e:	e7cf      	b.n	8011ae0 <__ieee754_rem_pio2f+0x104>
 8011b40:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011c2c <__ieee754_rem_pio2f+0x250>
 8011b44:	eeb0 0a66 	vmov.f32	s0, s13
 8011b48:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011b4c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011b50:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011c30 <__ieee754_rem_pio2f+0x254>
 8011b54:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011b58:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011b5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011b60:	ed84 7a00 	vstr	s14, [r4]
 8011b64:	e7bc      	b.n	8011ae0 <__ieee754_rem_pio2f+0x104>
 8011b66:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011b6a:	d306      	bcc.n	8011b7a <__ieee754_rem_pio2f+0x19e>
 8011b6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011b70:	edc0 7a01 	vstr	s15, [r0, #4]
 8011b74:	edc0 7a00 	vstr	s15, [r0]
 8011b78:	e73e      	b.n	80119f8 <__ieee754_rem_pio2f+0x1c>
 8011b7a:	15ea      	asrs	r2, r5, #23
 8011b7c:	3a86      	subs	r2, #134	@ 0x86
 8011b7e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011b82:	ee07 3a90 	vmov	s15, r3
 8011b86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011b8a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011c34 <__ieee754_rem_pio2f+0x258>
 8011b8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b96:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011b9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011ba2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011ba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011baa:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011bae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011bb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bba:	edcd 7a05 	vstr	s15, [sp, #20]
 8011bbe:	d11e      	bne.n	8011bfe <__ieee754_rem_pio2f+0x222>
 8011bc0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc8:	bf0c      	ite	eq
 8011bca:	2301      	moveq	r3, #1
 8011bcc:	2302      	movne	r3, #2
 8011bce:	491a      	ldr	r1, [pc, #104]	@ (8011c38 <__ieee754_rem_pio2f+0x25c>)
 8011bd0:	9101      	str	r1, [sp, #4]
 8011bd2:	2102      	movs	r1, #2
 8011bd4:	9100      	str	r1, [sp, #0]
 8011bd6:	a803      	add	r0, sp, #12
 8011bd8:	4621      	mov	r1, r4
 8011bda:	f000 f979 	bl	8011ed0 <__kernel_rem_pio2f>
 8011bde:	2e00      	cmp	r6, #0
 8011be0:	f6bf af2f 	bge.w	8011a42 <__ieee754_rem_pio2f+0x66>
 8011be4:	edd4 7a00 	vldr	s15, [r4]
 8011be8:	eef1 7a67 	vneg.f32	s15, s15
 8011bec:	edc4 7a00 	vstr	s15, [r4]
 8011bf0:	edd4 7a01 	vldr	s15, [r4, #4]
 8011bf4:	eef1 7a67 	vneg.f32	s15, s15
 8011bf8:	edc4 7a01 	vstr	s15, [r4, #4]
 8011bfc:	e782      	b.n	8011b04 <__ieee754_rem_pio2f+0x128>
 8011bfe:	2303      	movs	r3, #3
 8011c00:	e7e5      	b.n	8011bce <__ieee754_rem_pio2f+0x1f2>
 8011c02:	bf00      	nop
 8011c04:	3f490fd8 	.word	0x3f490fd8
 8011c08:	4016cbe3 	.word	0x4016cbe3
 8011c0c:	3fc90f80 	.word	0x3fc90f80
 8011c10:	3fc90fd0 	.word	0x3fc90fd0
 8011c14:	37354400 	.word	0x37354400
 8011c18:	37354443 	.word	0x37354443
 8011c1c:	2e85a308 	.word	0x2e85a308
 8011c20:	43490f80 	.word	0x43490f80
 8011c24:	3f22f984 	.word	0x3f22f984
 8011c28:	08012948 	.word	0x08012948
 8011c2c:	2e85a300 	.word	0x2e85a300
 8011c30:	248d3132 	.word	0x248d3132
 8011c34:	43800000 	.word	0x43800000
 8011c38:	080129c8 	.word	0x080129c8
 8011c3c:	00000000 	.word	0x00000000

08011c40 <scalbn>:
 8011c40:	b570      	push	{r4, r5, r6, lr}
 8011c42:	ec55 4b10 	vmov	r4, r5, d0
 8011c46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	462b      	mov	r3, r5
 8011c4e:	b991      	cbnz	r1, 8011c76 <scalbn+0x36>
 8011c50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011c54:	4323      	orrs	r3, r4
 8011c56:	d03d      	beq.n	8011cd4 <scalbn+0x94>
 8011c58:	4b35      	ldr	r3, [pc, #212]	@ (8011d30 <scalbn+0xf0>)
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	4629      	mov	r1, r5
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f7ee fcca 	bl	80005f8 <__aeabi_dmul>
 8011c64:	4b33      	ldr	r3, [pc, #204]	@ (8011d34 <scalbn+0xf4>)
 8011c66:	429e      	cmp	r6, r3
 8011c68:	4604      	mov	r4, r0
 8011c6a:	460d      	mov	r5, r1
 8011c6c:	da0f      	bge.n	8011c8e <scalbn+0x4e>
 8011c6e:	a328      	add	r3, pc, #160	@ (adr r3, 8011d10 <scalbn+0xd0>)
 8011c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c74:	e01e      	b.n	8011cb4 <scalbn+0x74>
 8011c76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011c7a:	4291      	cmp	r1, r2
 8011c7c:	d10b      	bne.n	8011c96 <scalbn+0x56>
 8011c7e:	4622      	mov	r2, r4
 8011c80:	4620      	mov	r0, r4
 8011c82:	4629      	mov	r1, r5
 8011c84:	f7ee fb02 	bl	800028c <__adddf3>
 8011c88:	4604      	mov	r4, r0
 8011c8a:	460d      	mov	r5, r1
 8011c8c:	e022      	b.n	8011cd4 <scalbn+0x94>
 8011c8e:	460b      	mov	r3, r1
 8011c90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011c94:	3936      	subs	r1, #54	@ 0x36
 8011c96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011c9a:	4296      	cmp	r6, r2
 8011c9c:	dd0d      	ble.n	8011cba <scalbn+0x7a>
 8011c9e:	2d00      	cmp	r5, #0
 8011ca0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011d18 <scalbn+0xd8>)
 8011ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ca6:	da02      	bge.n	8011cae <scalbn+0x6e>
 8011ca8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011d20 <scalbn+0xe0>)
 8011caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cae:	a31a      	add	r3, pc, #104	@ (adr r3, 8011d18 <scalbn+0xd8>)
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	f7ee fca0 	bl	80005f8 <__aeabi_dmul>
 8011cb8:	e7e6      	b.n	8011c88 <scalbn+0x48>
 8011cba:	1872      	adds	r2, r6, r1
 8011cbc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011cc0:	428a      	cmp	r2, r1
 8011cc2:	dcec      	bgt.n	8011c9e <scalbn+0x5e>
 8011cc4:	2a00      	cmp	r2, #0
 8011cc6:	dd08      	ble.n	8011cda <scalbn+0x9a>
 8011cc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011ccc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011cd0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011cd4:	ec45 4b10 	vmov	d0, r4, r5
 8011cd8:	bd70      	pop	{r4, r5, r6, pc}
 8011cda:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011cde:	da08      	bge.n	8011cf2 <scalbn+0xb2>
 8011ce0:	2d00      	cmp	r5, #0
 8011ce2:	a10b      	add	r1, pc, #44	@ (adr r1, 8011d10 <scalbn+0xd0>)
 8011ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ce8:	dac1      	bge.n	8011c6e <scalbn+0x2e>
 8011cea:	a10f      	add	r1, pc, #60	@ (adr r1, 8011d28 <scalbn+0xe8>)
 8011cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cf0:	e7bd      	b.n	8011c6e <scalbn+0x2e>
 8011cf2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011cf6:	3236      	adds	r2, #54	@ 0x36
 8011cf8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011cfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d00:	4620      	mov	r0, r4
 8011d02:	4b0d      	ldr	r3, [pc, #52]	@ (8011d38 <scalbn+0xf8>)
 8011d04:	4629      	mov	r1, r5
 8011d06:	2200      	movs	r2, #0
 8011d08:	e7d4      	b.n	8011cb4 <scalbn+0x74>
 8011d0a:	bf00      	nop
 8011d0c:	f3af 8000 	nop.w
 8011d10:	c2f8f359 	.word	0xc2f8f359
 8011d14:	01a56e1f 	.word	0x01a56e1f
 8011d18:	8800759c 	.word	0x8800759c
 8011d1c:	7e37e43c 	.word	0x7e37e43c
 8011d20:	8800759c 	.word	0x8800759c
 8011d24:	fe37e43c 	.word	0xfe37e43c
 8011d28:	c2f8f359 	.word	0xc2f8f359
 8011d2c:	81a56e1f 	.word	0x81a56e1f
 8011d30:	43500000 	.word	0x43500000
 8011d34:	ffff3cb0 	.word	0xffff3cb0
 8011d38:	3c900000 	.word	0x3c900000

08011d3c <with_errno>:
 8011d3c:	b510      	push	{r4, lr}
 8011d3e:	ed2d 8b02 	vpush	{d8}
 8011d42:	eeb0 8a40 	vmov.f32	s16, s0
 8011d46:	eef0 8a60 	vmov.f32	s17, s1
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	f7fc f80e 	bl	800dd6c <__errno>
 8011d50:	eeb0 0a48 	vmov.f32	s0, s16
 8011d54:	eef0 0a68 	vmov.f32	s1, s17
 8011d58:	ecbd 8b02 	vpop	{d8}
 8011d5c:	6004      	str	r4, [r0, #0]
 8011d5e:	bd10      	pop	{r4, pc}

08011d60 <xflow>:
 8011d60:	4603      	mov	r3, r0
 8011d62:	b507      	push	{r0, r1, r2, lr}
 8011d64:	ec51 0b10 	vmov	r0, r1, d0
 8011d68:	b183      	cbz	r3, 8011d8c <xflow+0x2c>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d70:	e9cd 2300 	strd	r2, r3, [sp]
 8011d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d78:	f7ee fc3e 	bl	80005f8 <__aeabi_dmul>
 8011d7c:	ec41 0b10 	vmov	d0, r0, r1
 8011d80:	2022      	movs	r0, #34	@ 0x22
 8011d82:	b003      	add	sp, #12
 8011d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d88:	f7ff bfd8 	b.w	8011d3c <with_errno>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	460b      	mov	r3, r1
 8011d90:	e7ee      	b.n	8011d70 <xflow+0x10>
 8011d92:	0000      	movs	r0, r0
 8011d94:	0000      	movs	r0, r0
	...

08011d98 <__math_uflow>:
 8011d98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011da0 <__math_uflow+0x8>
 8011d9c:	f7ff bfe0 	b.w	8011d60 <xflow>
 8011da0:	00000000 	.word	0x00000000
 8011da4:	10000000 	.word	0x10000000

08011da8 <__math_oflow>:
 8011da8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011db0 <__math_oflow+0x8>
 8011dac:	f7ff bfd8 	b.w	8011d60 <xflow>
 8011db0:	00000000 	.word	0x00000000
 8011db4:	70000000 	.word	0x70000000

08011db8 <scalbnf>:
 8011db8:	ee10 3a10 	vmov	r3, s0
 8011dbc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011dc0:	d02b      	beq.n	8011e1a <scalbnf+0x62>
 8011dc2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011dc6:	d302      	bcc.n	8011dce <scalbnf+0x16>
 8011dc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011dcc:	4770      	bx	lr
 8011dce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011dd2:	d123      	bne.n	8011e1c <scalbnf+0x64>
 8011dd4:	4b24      	ldr	r3, [pc, #144]	@ (8011e68 <scalbnf+0xb0>)
 8011dd6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011e6c <scalbnf+0xb4>
 8011dda:	4298      	cmp	r0, r3
 8011ddc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011de0:	db17      	blt.n	8011e12 <scalbnf+0x5a>
 8011de2:	ee10 3a10 	vmov	r3, s0
 8011de6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011dea:	3a19      	subs	r2, #25
 8011dec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011df0:	4288      	cmp	r0, r1
 8011df2:	dd15      	ble.n	8011e20 <scalbnf+0x68>
 8011df4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011e70 <scalbnf+0xb8>
 8011df8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011e74 <scalbnf+0xbc>
 8011dfc:	ee10 3a10 	vmov	r3, s0
 8011e00:	eeb0 7a67 	vmov.f32	s14, s15
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	bfb8      	it	lt
 8011e08:	eef0 7a66 	vmovlt.f32	s15, s13
 8011e0c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011e10:	4770      	bx	lr
 8011e12:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011e78 <scalbnf+0xc0>
 8011e16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011e1a:	4770      	bx	lr
 8011e1c:	0dd2      	lsrs	r2, r2, #23
 8011e1e:	e7e5      	b.n	8011dec <scalbnf+0x34>
 8011e20:	4410      	add	r0, r2
 8011e22:	28fe      	cmp	r0, #254	@ 0xfe
 8011e24:	dce6      	bgt.n	8011df4 <scalbnf+0x3c>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	dd06      	ble.n	8011e38 <scalbnf+0x80>
 8011e2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e2e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011e32:	ee00 3a10 	vmov	s0, r3
 8011e36:	4770      	bx	lr
 8011e38:	f110 0f16 	cmn.w	r0, #22
 8011e3c:	da09      	bge.n	8011e52 <scalbnf+0x9a>
 8011e3e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011e78 <scalbnf+0xc0>
 8011e42:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011e7c <scalbnf+0xc4>
 8011e46:	ee10 3a10 	vmov	r3, s0
 8011e4a:	eeb0 7a67 	vmov.f32	s14, s15
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	e7d9      	b.n	8011e06 <scalbnf+0x4e>
 8011e52:	3019      	adds	r0, #25
 8011e54:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e58:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011e5c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011e80 <scalbnf+0xc8>
 8011e60:	ee07 3a90 	vmov	s15, r3
 8011e64:	e7d7      	b.n	8011e16 <scalbnf+0x5e>
 8011e66:	bf00      	nop
 8011e68:	ffff3cb0 	.word	0xffff3cb0
 8011e6c:	4c000000 	.word	0x4c000000
 8011e70:	7149f2ca 	.word	0x7149f2ca
 8011e74:	f149f2ca 	.word	0xf149f2ca
 8011e78:	0da24260 	.word	0x0da24260
 8011e7c:	8da24260 	.word	0x8da24260
 8011e80:	33000000 	.word	0x33000000

08011e84 <with_errnof>:
 8011e84:	b510      	push	{r4, lr}
 8011e86:	ed2d 8b02 	vpush	{d8}
 8011e8a:	eeb0 8a40 	vmov.f32	s16, s0
 8011e8e:	4604      	mov	r4, r0
 8011e90:	f7fb ff6c 	bl	800dd6c <__errno>
 8011e94:	eeb0 0a48 	vmov.f32	s0, s16
 8011e98:	ecbd 8b02 	vpop	{d8}
 8011e9c:	6004      	str	r4, [r0, #0]
 8011e9e:	bd10      	pop	{r4, pc}

08011ea0 <xflowf>:
 8011ea0:	b130      	cbz	r0, 8011eb0 <xflowf+0x10>
 8011ea2:	eef1 7a40 	vneg.f32	s15, s0
 8011ea6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011eaa:	2022      	movs	r0, #34	@ 0x22
 8011eac:	f7ff bfea 	b.w	8011e84 <with_errnof>
 8011eb0:	eef0 7a40 	vmov.f32	s15, s0
 8011eb4:	e7f7      	b.n	8011ea6 <xflowf+0x6>
	...

08011eb8 <__math_uflowf>:
 8011eb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011ec0 <__math_uflowf+0x8>
 8011ebc:	f7ff bff0 	b.w	8011ea0 <xflowf>
 8011ec0:	10000000 	.word	0x10000000

08011ec4 <__math_oflowf>:
 8011ec4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011ecc <__math_oflowf+0x8>
 8011ec8:	f7ff bfea 	b.w	8011ea0 <xflowf>
 8011ecc:	70000000 	.word	0x70000000

08011ed0 <__kernel_rem_pio2f>:
 8011ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed4:	ed2d 8b04 	vpush	{d8-d9}
 8011ed8:	b0d9      	sub	sp, #356	@ 0x164
 8011eda:	4690      	mov	r8, r2
 8011edc:	9001      	str	r0, [sp, #4]
 8011ede:	4ab9      	ldr	r2, [pc, #740]	@ (80121c4 <__kernel_rem_pio2f+0x2f4>)
 8011ee0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011ee2:	f118 0f04 	cmn.w	r8, #4
 8011ee6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8011eea:	460f      	mov	r7, r1
 8011eec:	f103 3bff 	add.w	fp, r3, #4294967295
 8011ef0:	db27      	blt.n	8011f42 <__kernel_rem_pio2f+0x72>
 8011ef2:	f1b8 0203 	subs.w	r2, r8, #3
 8011ef6:	bf48      	it	mi
 8011ef8:	f108 0204 	addmi.w	r2, r8, #4
 8011efc:	10d2      	asrs	r2, r2, #3
 8011efe:	1c55      	adds	r5, r2, #1
 8011f00:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011f02:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80121d4 <__kernel_rem_pio2f+0x304>
 8011f06:	00e8      	lsls	r0, r5, #3
 8011f08:	eba2 060b 	sub.w	r6, r2, fp
 8011f0c:	9002      	str	r0, [sp, #8]
 8011f0e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8011f12:	eb0a 0c0b 	add.w	ip, sl, fp
 8011f16:	ac1c      	add	r4, sp, #112	@ 0x70
 8011f18:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8011f1c:	2000      	movs	r0, #0
 8011f1e:	4560      	cmp	r0, ip
 8011f20:	dd11      	ble.n	8011f46 <__kernel_rem_pio2f+0x76>
 8011f22:	a91c      	add	r1, sp, #112	@ 0x70
 8011f24:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011f28:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8011f2c:	f04f 0c00 	mov.w	ip, #0
 8011f30:	45d4      	cmp	ip, sl
 8011f32:	dc27      	bgt.n	8011f84 <__kernel_rem_pio2f+0xb4>
 8011f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011f38:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80121d4 <__kernel_rem_pio2f+0x304>
 8011f3c:	4606      	mov	r6, r0
 8011f3e:	2400      	movs	r4, #0
 8011f40:	e016      	b.n	8011f70 <__kernel_rem_pio2f+0xa0>
 8011f42:	2200      	movs	r2, #0
 8011f44:	e7db      	b.n	8011efe <__kernel_rem_pio2f+0x2e>
 8011f46:	42c6      	cmn	r6, r0
 8011f48:	bf5d      	ittte	pl
 8011f4a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8011f4e:	ee07 1a90 	vmovpl	s15, r1
 8011f52:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011f56:	eef0 7a47 	vmovmi.f32	s15, s14
 8011f5a:	ece4 7a01 	vstmia	r4!, {s15}
 8011f5e:	3001      	adds	r0, #1
 8011f60:	e7dd      	b.n	8011f1e <__kernel_rem_pio2f+0x4e>
 8011f62:	ecfe 6a01 	vldmia	lr!, {s13}
 8011f66:	ed96 7a00 	vldr	s14, [r6]
 8011f6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011f6e:	3401      	adds	r4, #1
 8011f70:	455c      	cmp	r4, fp
 8011f72:	f1a6 0604 	sub.w	r6, r6, #4
 8011f76:	ddf4      	ble.n	8011f62 <__kernel_rem_pio2f+0x92>
 8011f78:	ece9 7a01 	vstmia	r9!, {s15}
 8011f7c:	f10c 0c01 	add.w	ip, ip, #1
 8011f80:	3004      	adds	r0, #4
 8011f82:	e7d5      	b.n	8011f30 <__kernel_rem_pio2f+0x60>
 8011f84:	a908      	add	r1, sp, #32
 8011f86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f8a:	9104      	str	r1, [sp, #16]
 8011f8c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011f8e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80121d0 <__kernel_rem_pio2f+0x300>
 8011f92:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80121cc <__kernel_rem_pio2f+0x2fc>
 8011f96:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011f9a:	9203      	str	r2, [sp, #12]
 8011f9c:	4654      	mov	r4, sl
 8011f9e:	00a2      	lsls	r2, r4, #2
 8011fa0:	9205      	str	r2, [sp, #20]
 8011fa2:	aa58      	add	r2, sp, #352	@ 0x160
 8011fa4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011fa8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011fac:	a944      	add	r1, sp, #272	@ 0x110
 8011fae:	aa08      	add	r2, sp, #32
 8011fb0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011fb4:	4694      	mov	ip, r2
 8011fb6:	4626      	mov	r6, r4
 8011fb8:	2e00      	cmp	r6, #0
 8011fba:	f1a0 0004 	sub.w	r0, r0, #4
 8011fbe:	dc4c      	bgt.n	801205a <__kernel_rem_pio2f+0x18a>
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011fc6:	f7ff fef7 	bl	8011db8 <scalbnf>
 8011fca:	eeb0 8a40 	vmov.f32	s16, s0
 8011fce:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8011fd2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011fd6:	f000 f9ed 	bl	80123b4 <floorf>
 8011fda:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8011fde:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011fe2:	2d00      	cmp	r5, #0
 8011fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011fe8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011fec:	ee17 9a90 	vmov	r9, s15
 8011ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ff4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011ff8:	dd41      	ble.n	801207e <__kernel_rem_pio2f+0x1ae>
 8011ffa:	f104 3cff 	add.w	ip, r4, #4294967295
 8011ffe:	a908      	add	r1, sp, #32
 8012000:	f1c5 0e08 	rsb	lr, r5, #8
 8012004:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8012008:	fa46 f00e 	asr.w	r0, r6, lr
 801200c:	4481      	add	r9, r0
 801200e:	fa00 f00e 	lsl.w	r0, r0, lr
 8012012:	1a36      	subs	r6, r6, r0
 8012014:	f1c5 0007 	rsb	r0, r5, #7
 8012018:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801201c:	4106      	asrs	r6, r0
 801201e:	2e00      	cmp	r6, #0
 8012020:	dd3c      	ble.n	801209c <__kernel_rem_pio2f+0x1cc>
 8012022:	f04f 0e00 	mov.w	lr, #0
 8012026:	f109 0901 	add.w	r9, r9, #1
 801202a:	4670      	mov	r0, lr
 801202c:	4574      	cmp	r4, lr
 801202e:	dc68      	bgt.n	8012102 <__kernel_rem_pio2f+0x232>
 8012030:	2d00      	cmp	r5, #0
 8012032:	dd03      	ble.n	801203c <__kernel_rem_pio2f+0x16c>
 8012034:	2d01      	cmp	r5, #1
 8012036:	d074      	beq.n	8012122 <__kernel_rem_pio2f+0x252>
 8012038:	2d02      	cmp	r5, #2
 801203a:	d07d      	beq.n	8012138 <__kernel_rem_pio2f+0x268>
 801203c:	2e02      	cmp	r6, #2
 801203e:	d12d      	bne.n	801209c <__kernel_rem_pio2f+0x1cc>
 8012040:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012044:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012048:	b340      	cbz	r0, 801209c <__kernel_rem_pio2f+0x1cc>
 801204a:	4628      	mov	r0, r5
 801204c:	9306      	str	r3, [sp, #24]
 801204e:	f7ff feb3 	bl	8011db8 <scalbnf>
 8012052:	9b06      	ldr	r3, [sp, #24]
 8012054:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012058:	e020      	b.n	801209c <__kernel_rem_pio2f+0x1cc>
 801205a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801205e:	3e01      	subs	r6, #1
 8012060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012068:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801206c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012070:	ecac 0a01 	vstmia	ip!, {s0}
 8012074:	ed90 0a00 	vldr	s0, [r0]
 8012078:	ee37 0a80 	vadd.f32	s0, s15, s0
 801207c:	e79c      	b.n	8011fb8 <__kernel_rem_pio2f+0xe8>
 801207e:	d105      	bne.n	801208c <__kernel_rem_pio2f+0x1bc>
 8012080:	1e60      	subs	r0, r4, #1
 8012082:	a908      	add	r1, sp, #32
 8012084:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8012088:	11f6      	asrs	r6, r6, #7
 801208a:	e7c8      	b.n	801201e <__kernel_rem_pio2f+0x14e>
 801208c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012090:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012098:	da31      	bge.n	80120fe <__kernel_rem_pio2f+0x22e>
 801209a:	2600      	movs	r6, #0
 801209c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80120a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a4:	f040 8098 	bne.w	80121d8 <__kernel_rem_pio2f+0x308>
 80120a8:	1e60      	subs	r0, r4, #1
 80120aa:	2200      	movs	r2, #0
 80120ac:	4550      	cmp	r0, sl
 80120ae:	da4b      	bge.n	8012148 <__kernel_rem_pio2f+0x278>
 80120b0:	2a00      	cmp	r2, #0
 80120b2:	d065      	beq.n	8012180 <__kernel_rem_pio2f+0x2b0>
 80120b4:	3c01      	subs	r4, #1
 80120b6:	ab08      	add	r3, sp, #32
 80120b8:	3d08      	subs	r5, #8
 80120ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d0f8      	beq.n	80120b4 <__kernel_rem_pio2f+0x1e4>
 80120c2:	4628      	mov	r0, r5
 80120c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80120c8:	f7ff fe76 	bl	8011db8 <scalbnf>
 80120cc:	1c63      	adds	r3, r4, #1
 80120ce:	aa44      	add	r2, sp, #272	@ 0x110
 80120d0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80121d0 <__kernel_rem_pio2f+0x300>
 80120d4:	0099      	lsls	r1, r3, #2
 80120d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80120da:	4623      	mov	r3, r4
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f280 80a9 	bge.w	8012234 <__kernel_rem_pio2f+0x364>
 80120e2:	4623      	mov	r3, r4
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	f2c0 80c7 	blt.w	8012278 <__kernel_rem_pio2f+0x3a8>
 80120ea:	aa44      	add	r2, sp, #272	@ 0x110
 80120ec:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80120f0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80121c8 <__kernel_rem_pio2f+0x2f8>
 80120f4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80121d4 <__kernel_rem_pio2f+0x304>
 80120f8:	2000      	movs	r0, #0
 80120fa:	1ae2      	subs	r2, r4, r3
 80120fc:	e0b1      	b.n	8012262 <__kernel_rem_pio2f+0x392>
 80120fe:	2602      	movs	r6, #2
 8012100:	e78f      	b.n	8012022 <__kernel_rem_pio2f+0x152>
 8012102:	f852 1b04 	ldr.w	r1, [r2], #4
 8012106:	b948      	cbnz	r0, 801211c <__kernel_rem_pio2f+0x24c>
 8012108:	b121      	cbz	r1, 8012114 <__kernel_rem_pio2f+0x244>
 801210a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801210e:	f842 1c04 	str.w	r1, [r2, #-4]
 8012112:	2101      	movs	r1, #1
 8012114:	f10e 0e01 	add.w	lr, lr, #1
 8012118:	4608      	mov	r0, r1
 801211a:	e787      	b.n	801202c <__kernel_rem_pio2f+0x15c>
 801211c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8012120:	e7f5      	b.n	801210e <__kernel_rem_pio2f+0x23e>
 8012122:	f104 3cff 	add.w	ip, r4, #4294967295
 8012126:	aa08      	add	r2, sp, #32
 8012128:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801212c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012130:	a908      	add	r1, sp, #32
 8012132:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012136:	e781      	b.n	801203c <__kernel_rem_pio2f+0x16c>
 8012138:	f104 3cff 	add.w	ip, r4, #4294967295
 801213c:	aa08      	add	r2, sp, #32
 801213e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012142:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012146:	e7f3      	b.n	8012130 <__kernel_rem_pio2f+0x260>
 8012148:	a908      	add	r1, sp, #32
 801214a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801214e:	3801      	subs	r0, #1
 8012150:	430a      	orrs	r2, r1
 8012152:	e7ab      	b.n	80120ac <__kernel_rem_pio2f+0x1dc>
 8012154:	3201      	adds	r2, #1
 8012156:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801215a:	2e00      	cmp	r6, #0
 801215c:	d0fa      	beq.n	8012154 <__kernel_rem_pio2f+0x284>
 801215e:	9905      	ldr	r1, [sp, #20]
 8012160:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012164:	eb0d 0001 	add.w	r0, sp, r1
 8012168:	18e6      	adds	r6, r4, r3
 801216a:	a91c      	add	r1, sp, #112	@ 0x70
 801216c:	f104 0c01 	add.w	ip, r4, #1
 8012170:	384c      	subs	r0, #76	@ 0x4c
 8012172:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012176:	4422      	add	r2, r4
 8012178:	4562      	cmp	r2, ip
 801217a:	da04      	bge.n	8012186 <__kernel_rem_pio2f+0x2b6>
 801217c:	4614      	mov	r4, r2
 801217e:	e70e      	b.n	8011f9e <__kernel_rem_pio2f+0xce>
 8012180:	9804      	ldr	r0, [sp, #16]
 8012182:	2201      	movs	r2, #1
 8012184:	e7e7      	b.n	8012156 <__kernel_rem_pio2f+0x286>
 8012186:	9903      	ldr	r1, [sp, #12]
 8012188:	f8dd e004 	ldr.w	lr, [sp, #4]
 801218c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012190:	9105      	str	r1, [sp, #20]
 8012192:	ee07 1a90 	vmov	s15, r1
 8012196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801219a:	2400      	movs	r4, #0
 801219c:	ece6 7a01 	vstmia	r6!, {s15}
 80121a0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80121d4 <__kernel_rem_pio2f+0x304>
 80121a4:	46b1      	mov	r9, r6
 80121a6:	455c      	cmp	r4, fp
 80121a8:	dd04      	ble.n	80121b4 <__kernel_rem_pio2f+0x2e4>
 80121aa:	ece0 7a01 	vstmia	r0!, {s15}
 80121ae:	f10c 0c01 	add.w	ip, ip, #1
 80121b2:	e7e1      	b.n	8012178 <__kernel_rem_pio2f+0x2a8>
 80121b4:	ecfe 6a01 	vldmia	lr!, {s13}
 80121b8:	ed39 7a01 	vldmdb	r9!, {s14}
 80121bc:	3401      	adds	r4, #1
 80121be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80121c2:	e7f0      	b.n	80121a6 <__kernel_rem_pio2f+0x2d6>
 80121c4:	08012d0c 	.word	0x08012d0c
 80121c8:	08012ce0 	.word	0x08012ce0
 80121cc:	43800000 	.word	0x43800000
 80121d0:	3b800000 	.word	0x3b800000
 80121d4:	00000000 	.word	0x00000000
 80121d8:	9b02      	ldr	r3, [sp, #8]
 80121da:	eeb0 0a48 	vmov.f32	s0, s16
 80121de:	eba3 0008 	sub.w	r0, r3, r8
 80121e2:	f7ff fde9 	bl	8011db8 <scalbnf>
 80121e6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80121cc <__kernel_rem_pio2f+0x2fc>
 80121ea:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80121ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f2:	db19      	blt.n	8012228 <__kernel_rem_pio2f+0x358>
 80121f4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80121d0 <__kernel_rem_pio2f+0x300>
 80121f8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80121fc:	aa08      	add	r2, sp, #32
 80121fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012202:	3508      	adds	r5, #8
 8012204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012208:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801220c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012210:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012214:	ee10 3a10 	vmov	r3, s0
 8012218:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801221c:	ee17 3a90 	vmov	r3, s15
 8012220:	3401      	adds	r4, #1
 8012222:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012226:	e74c      	b.n	80120c2 <__kernel_rem_pio2f+0x1f2>
 8012228:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801222c:	aa08      	add	r2, sp, #32
 801222e:	ee10 3a10 	vmov	r3, s0
 8012232:	e7f6      	b.n	8012222 <__kernel_rem_pio2f+0x352>
 8012234:	a808      	add	r0, sp, #32
 8012236:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801223a:	9001      	str	r0, [sp, #4]
 801223c:	ee07 0a90 	vmov	s15, r0
 8012240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012244:	3b01      	subs	r3, #1
 8012246:	ee67 7a80 	vmul.f32	s15, s15, s0
 801224a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801224e:	ed62 7a01 	vstmdb	r2!, {s15}
 8012252:	e743      	b.n	80120dc <__kernel_rem_pio2f+0x20c>
 8012254:	ecfc 6a01 	vldmia	ip!, {s13}
 8012258:	ecb5 7a01 	vldmia	r5!, {s14}
 801225c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012260:	3001      	adds	r0, #1
 8012262:	4550      	cmp	r0, sl
 8012264:	dc01      	bgt.n	801226a <__kernel_rem_pio2f+0x39a>
 8012266:	4282      	cmp	r2, r0
 8012268:	daf4      	bge.n	8012254 <__kernel_rem_pio2f+0x384>
 801226a:	a858      	add	r0, sp, #352	@ 0x160
 801226c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012270:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012274:	3b01      	subs	r3, #1
 8012276:	e735      	b.n	80120e4 <__kernel_rem_pio2f+0x214>
 8012278:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801227a:	2b02      	cmp	r3, #2
 801227c:	dc09      	bgt.n	8012292 <__kernel_rem_pio2f+0x3c2>
 801227e:	2b00      	cmp	r3, #0
 8012280:	dc2b      	bgt.n	80122da <__kernel_rem_pio2f+0x40a>
 8012282:	d044      	beq.n	801230e <__kernel_rem_pio2f+0x43e>
 8012284:	f009 0007 	and.w	r0, r9, #7
 8012288:	b059      	add	sp, #356	@ 0x164
 801228a:	ecbd 8b04 	vpop	{d8-d9}
 801228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012292:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012294:	2b03      	cmp	r3, #3
 8012296:	d1f5      	bne.n	8012284 <__kernel_rem_pio2f+0x3b4>
 8012298:	aa30      	add	r2, sp, #192	@ 0xc0
 801229a:	1f0b      	subs	r3, r1, #4
 801229c:	4413      	add	r3, r2
 801229e:	461a      	mov	r2, r3
 80122a0:	4620      	mov	r0, r4
 80122a2:	2800      	cmp	r0, #0
 80122a4:	f1a2 0204 	sub.w	r2, r2, #4
 80122a8:	dc52      	bgt.n	8012350 <__kernel_rem_pio2f+0x480>
 80122aa:	4622      	mov	r2, r4
 80122ac:	2a01      	cmp	r2, #1
 80122ae:	f1a3 0304 	sub.w	r3, r3, #4
 80122b2:	dc5d      	bgt.n	8012370 <__kernel_rem_pio2f+0x4a0>
 80122b4:	ab30      	add	r3, sp, #192	@ 0xc0
 80122b6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80121d4 <__kernel_rem_pio2f+0x304>
 80122ba:	440b      	add	r3, r1
 80122bc:	2c01      	cmp	r4, #1
 80122be:	dc67      	bgt.n	8012390 <__kernel_rem_pio2f+0x4c0>
 80122c0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80122c4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80122c8:	2e00      	cmp	r6, #0
 80122ca:	d167      	bne.n	801239c <__kernel_rem_pio2f+0x4cc>
 80122cc:	edc7 6a00 	vstr	s13, [r7]
 80122d0:	ed87 7a01 	vstr	s14, [r7, #4]
 80122d4:	edc7 7a02 	vstr	s15, [r7, #8]
 80122d8:	e7d4      	b.n	8012284 <__kernel_rem_pio2f+0x3b4>
 80122da:	ab30      	add	r3, sp, #192	@ 0xc0
 80122dc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80121d4 <__kernel_rem_pio2f+0x304>
 80122e0:	440b      	add	r3, r1
 80122e2:	4622      	mov	r2, r4
 80122e4:	2a00      	cmp	r2, #0
 80122e6:	da24      	bge.n	8012332 <__kernel_rem_pio2f+0x462>
 80122e8:	b34e      	cbz	r6, 801233e <__kernel_rem_pio2f+0x46e>
 80122ea:	eef1 7a47 	vneg.f32	s15, s14
 80122ee:	edc7 7a00 	vstr	s15, [r7]
 80122f2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80122f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122fa:	aa31      	add	r2, sp, #196	@ 0xc4
 80122fc:	2301      	movs	r3, #1
 80122fe:	429c      	cmp	r4, r3
 8012300:	da20      	bge.n	8012344 <__kernel_rem_pio2f+0x474>
 8012302:	b10e      	cbz	r6, 8012308 <__kernel_rem_pio2f+0x438>
 8012304:	eef1 7a67 	vneg.f32	s15, s15
 8012308:	edc7 7a01 	vstr	s15, [r7, #4]
 801230c:	e7ba      	b.n	8012284 <__kernel_rem_pio2f+0x3b4>
 801230e:	ab30      	add	r3, sp, #192	@ 0xc0
 8012310:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80121d4 <__kernel_rem_pio2f+0x304>
 8012314:	440b      	add	r3, r1
 8012316:	2c00      	cmp	r4, #0
 8012318:	da05      	bge.n	8012326 <__kernel_rem_pio2f+0x456>
 801231a:	b10e      	cbz	r6, 8012320 <__kernel_rem_pio2f+0x450>
 801231c:	eef1 7a67 	vneg.f32	s15, s15
 8012320:	edc7 7a00 	vstr	s15, [r7]
 8012324:	e7ae      	b.n	8012284 <__kernel_rem_pio2f+0x3b4>
 8012326:	ed33 7a01 	vldmdb	r3!, {s14}
 801232a:	3c01      	subs	r4, #1
 801232c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012330:	e7f1      	b.n	8012316 <__kernel_rem_pio2f+0x446>
 8012332:	ed73 7a01 	vldmdb	r3!, {s15}
 8012336:	3a01      	subs	r2, #1
 8012338:	ee37 7a27 	vadd.f32	s14, s14, s15
 801233c:	e7d2      	b.n	80122e4 <__kernel_rem_pio2f+0x414>
 801233e:	eef0 7a47 	vmov.f32	s15, s14
 8012342:	e7d4      	b.n	80122ee <__kernel_rem_pio2f+0x41e>
 8012344:	ecb2 7a01 	vldmia	r2!, {s14}
 8012348:	3301      	adds	r3, #1
 801234a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801234e:	e7d6      	b.n	80122fe <__kernel_rem_pio2f+0x42e>
 8012350:	edd2 7a00 	vldr	s15, [r2]
 8012354:	edd2 6a01 	vldr	s13, [r2, #4]
 8012358:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801235c:	3801      	subs	r0, #1
 801235e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012362:	ed82 7a00 	vstr	s14, [r2]
 8012366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801236a:	edc2 7a01 	vstr	s15, [r2, #4]
 801236e:	e798      	b.n	80122a2 <__kernel_rem_pio2f+0x3d2>
 8012370:	edd3 7a00 	vldr	s15, [r3]
 8012374:	edd3 6a01 	vldr	s13, [r3, #4]
 8012378:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801237c:	3a01      	subs	r2, #1
 801237e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012382:	ed83 7a00 	vstr	s14, [r3]
 8012386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801238a:	edc3 7a01 	vstr	s15, [r3, #4]
 801238e:	e78d      	b.n	80122ac <__kernel_rem_pio2f+0x3dc>
 8012390:	ed33 7a01 	vldmdb	r3!, {s14}
 8012394:	3c01      	subs	r4, #1
 8012396:	ee77 7a87 	vadd.f32	s15, s15, s14
 801239a:	e78f      	b.n	80122bc <__kernel_rem_pio2f+0x3ec>
 801239c:	eef1 6a66 	vneg.f32	s13, s13
 80123a0:	eeb1 7a47 	vneg.f32	s14, s14
 80123a4:	edc7 6a00 	vstr	s13, [r7]
 80123a8:	ed87 7a01 	vstr	s14, [r7, #4]
 80123ac:	eef1 7a67 	vneg.f32	s15, s15
 80123b0:	e790      	b.n	80122d4 <__kernel_rem_pio2f+0x404>
 80123b2:	bf00      	nop

080123b4 <floorf>:
 80123b4:	ee10 3a10 	vmov	r3, s0
 80123b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80123bc:	3a7f      	subs	r2, #127	@ 0x7f
 80123be:	2a16      	cmp	r2, #22
 80123c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80123c4:	dc2b      	bgt.n	801241e <floorf+0x6a>
 80123c6:	2a00      	cmp	r2, #0
 80123c8:	da12      	bge.n	80123f0 <floorf+0x3c>
 80123ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012430 <floorf+0x7c>
 80123ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80123d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80123d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123da:	dd06      	ble.n	80123ea <floorf+0x36>
 80123dc:	2b00      	cmp	r3, #0
 80123de:	da24      	bge.n	801242a <floorf+0x76>
 80123e0:	2900      	cmp	r1, #0
 80123e2:	4b14      	ldr	r3, [pc, #80]	@ (8012434 <floorf+0x80>)
 80123e4:	bf08      	it	eq
 80123e6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80123ea:	ee00 3a10 	vmov	s0, r3
 80123ee:	4770      	bx	lr
 80123f0:	4911      	ldr	r1, [pc, #68]	@ (8012438 <floorf+0x84>)
 80123f2:	4111      	asrs	r1, r2
 80123f4:	420b      	tst	r3, r1
 80123f6:	d0fa      	beq.n	80123ee <floorf+0x3a>
 80123f8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012430 <floorf+0x7c>
 80123fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012400:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012408:	ddef      	ble.n	80123ea <floorf+0x36>
 801240a:	2b00      	cmp	r3, #0
 801240c:	bfbe      	ittt	lt
 801240e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8012412:	fa40 f202 	asrlt.w	r2, r0, r2
 8012416:	189b      	addlt	r3, r3, r2
 8012418:	ea23 0301 	bic.w	r3, r3, r1
 801241c:	e7e5      	b.n	80123ea <floorf+0x36>
 801241e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012422:	d3e4      	bcc.n	80123ee <floorf+0x3a>
 8012424:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012428:	4770      	bx	lr
 801242a:	2300      	movs	r3, #0
 801242c:	e7dd      	b.n	80123ea <floorf+0x36>
 801242e:	bf00      	nop
 8012430:	7149f2ca 	.word	0x7149f2ca
 8012434:	bf800000 	.word	0xbf800000
 8012438:	007fffff 	.word	0x007fffff

0801243c <_init>:
 801243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801243e:	bf00      	nop
 8012440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012442:	bc08      	pop	{r3}
 8012444:	469e      	mov	lr, r3
 8012446:	4770      	bx	lr

08012448 <_fini>:
 8012448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801244a:	bf00      	nop
 801244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801244e:	bc08      	pop	{r3}
 8012450:	469e      	mov	lr, r3
 8012452:	4770      	bx	lr
