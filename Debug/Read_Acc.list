
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001062c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  080107c0  080107c0  000117c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011078  08011078  000132f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011078  08011078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011080  08011080  000132f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011080  08011080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011084  08011084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  08011088  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132f8  2**0
                  CONTENTS
 10 .bss          0000200c  200002f8  200002f8  000132f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002304  20002304  000132f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001829e  00000000  00000000  00013328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fba  00000000  00000000  0002b5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0002f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001085  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005aff  00000000  00000000  00031bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b815  00000000  00000000  000376b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6c58  00000000  00000000  00052ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119b21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007268  00000000  00000000  00119b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00120dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107a4 	.word	0x080107a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	080107a4 	.word	0x080107a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a3a      	ldr	r2, [r7, #32]
 8000f5c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f62:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6858      	ldr	r0, [r3, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	899b      	ldrh	r3, [r3, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f002 ff5a 	bl	8003e38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f002 f8f3 	bl	8003170 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6858      	ldr	r0, [r3, #4]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	899b      	ldrh	r3, [r3, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4619      	mov	r1, r3
 8000f96:	f002 ff4f 	bl	8003e38 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f9a:	2032      	movs	r0, #50	@ 0x32
 8000f9c:	f002 f8e8 	bl	8003170 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000fa0:	22b6      	movs	r2, #182	@ 0xb6
 8000fa2:	217e      	movs	r1, #126	@ 0x7e
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f959 	bl	800125c <BMI088_WriteAccRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000fb4:	2032      	movs	r0, #50	@ 0x32
 8000fb6:	f002 f8db 	bl	8003170 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000fba:	f107 0316 	add.w	r3, r7, #22
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f8d0 	bl	8001168 <BMI088_ReadAccRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	4413      	add	r3, r2
 8000fd0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f002 f8cc 	bl	8003170 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0x09); /* (no oversampling, ODR = 200 Hz, BW = ?? Hz /////////////////////////BW = 40 Hz) */
 8000fd8:	2209      	movs	r2, #9
 8000fda:	2140      	movs	r1, #64	@ 0x40
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f93d 	bl	800125c <BMI088_WriteAccRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	4413      	add	r3, r2
 8000fea:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f002 f8bf 	bl	8003170 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x01); /* +- 6g range */
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2141      	movs	r1, #65	@ 0x41
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f930 	bl	800125c <BMI088_WriteAccRegister>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	4413      	add	r3, r2
 8001004:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f002 f8b2 	bl	8003170 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 800100c:	220a      	movs	r2, #10
 800100e:	2153      	movs	r1, #83	@ 0x53
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 f923 	bl	800125c <BMI088_WriteAccRegister>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	4413      	add	r3, r2
 800101e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f002 f8a5 	bl	8003170 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8001026:	2204      	movs	r2, #4
 8001028:	2158      	movs	r1, #88	@ 0x58
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f916 	bl	800125c <BMI088_WriteAccRegister>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	4413      	add	r3, r2
 8001038:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f002 f898 	bl	8003170 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8001040:	2200      	movs	r2, #0
 8001042:	217c      	movs	r1, #124	@ 0x7c
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f909 	bl	800125c <BMI088_WriteAccRegister>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4413      	add	r3, r2
 8001052:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f002 f88b 	bl	8003170 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800105a:	2204      	movs	r2, #4
 800105c:	217d      	movs	r1, #125	@ 0x7d
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f8fc 	bl	800125c <BMI088_WriteAccRegister>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	4413      	add	r3, r2
 800106c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f002 f87e 	bl	8003170 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4a3a      	ldr	r2, [pc, #232]	@ (8001160 <BMI088_Init+0x228>)
 8001078:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2292      	movs	r2, #146	@ 0x92
 800107e:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	89db      	ldrh	r3, [r3, #14]
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	f002 fed4 	bl	8003e38 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001090:	22b6      	movs	r2, #182	@ 0xb6
 8001092:	2114      	movs	r1, #20
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f91b 	bl	80012d0 <BMI088_WriteGyrRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4413      	add	r3, r2
 80010a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80010a4:	20fa      	movs	r0, #250	@ 0xfa
 80010a6:	f002 f863 	bl	8003170 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80010aa:	f107 0316 	add.w	r3, r7, #22
 80010ae:	461a      	mov	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f896 	bl	80011e4 <BMI088_ReadGyrRegister>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	4413      	add	r3, r2
 80010c0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f002 f854 	bl	8003170 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80010c8:	2201      	movs	r2, #1
 80010ca:	210f      	movs	r1, #15
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f8ff 	bl	80012d0 <BMI088_WriteGyrRegister>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	4413      	add	r3, r2
 80010da:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f002 f847 	bl	8003170 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* ODR = 200 Hz, Filter bandwidth = 64 Hz */
 80010e2:	2206      	movs	r2, #6
 80010e4:	2110      	movs	r1, #16
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 f8f2 	bl	80012d0 <BMI088_WriteGyrRegister>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	4413      	add	r3, r2
 80010f4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f002 f83a 	bl	8003170 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	2115      	movs	r1, #21
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f8e5 	bl	80012d0 <BMI088_WriteGyrRegister>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	4413      	add	r3, r2
 800110e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f002 f82d 	bl	8003170 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001116:	2201      	movs	r2, #1
 8001118:	2116      	movs	r1, #22
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f8d8 	bl	80012d0 <BMI088_WriteGyrRegister>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	4413      	add	r3, r2
 8001128:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800112a:	200a      	movs	r0, #10
 800112c:	f002 f820 	bl	8003170 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001130:	2201      	movs	r2, #1
 8001132:	2118      	movs	r1, #24
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f8cb 	bl	80012d0 <BMI088_WriteGyrRegister>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	4413      	add	r3, r2
 8001142:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f002 f813 	bl	8003170 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <BMI088_Init+0x22c>)
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2282      	movs	r2, #130	@ 0x82
 8001154:	769a      	strb	r2, [r3, #26]

	return status;
 8001156:	7dfb      	ldrb	r3, [r7, #23]

}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	3a6b70a4 	.word	0x3a6b70a4
 8001164:	3a0ba058 	.word	0x3a0ba058

08001168 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af02      	add	r7, sp, #8
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	460b      	mov	r3, r1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	753b      	strb	r3, [r7, #20]
 8001180:	2300      	movs	r3, #0
 8001182:	757b      	strb	r3, [r7, #21]
 8001184:	2300      	movs	r3, #0
 8001186:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	899b      	ldrh	r3, [r3, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f002 fe50 	bl	8003e38 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2303      	movs	r3, #3
 80011ac:	f004 ff1d 	bl	8005fea <HAL_SPI_TransmitReceive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6858      	ldr	r0, [r3, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	899b      	ldrh	r3, [r3, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	f002 fe35 	bl	8003e38 <HAL_GPIO_WritePin>

	if (status == 1) {
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d102      	bne.n	80011da <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80011d4:	7cba      	ldrb	r2, [r7, #18]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80011da:	7dfb      	ldrb	r3, [r7, #23]

}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	460b      	mov	r3, r1
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	753b      	strb	r3, [r7, #20]
 80011fc:	2300      	movs	r3, #0
 80011fe:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6898      	ldr	r0, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	89db      	ldrh	r3, [r3, #14]
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	f002 fe14 	bl	8003e38 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	f107 0114 	add.w	r1, r7, #20
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2302      	movs	r3, #2
 8001224:	f004 fee1 	bl	8005fea <HAL_SPI_TransmitReceive>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6898      	ldr	r0, [r3, #8]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	89db      	ldrh	r3, [r3, #14]
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	f002 fdf9 	bl	8003e38 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 800124c:	7c7a      	ldrb	r2, [r7, #17]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8001252:	7dfb      	ldrb	r3, [r7, #23]

}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
 8001268:	4613      	mov	r3, r2
 800126a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	733b      	strb	r3, [r7, #12]
 8001270:	78bb      	ldrb	r3, [r7, #2]
 8001272:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6858      	ldr	r0, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	899b      	ldrh	r3, [r3, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f002 fdda 	bl	8003e38 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	f107 010c 	add.w	r1, r7, #12
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	2202      	movs	r2, #2
 8001292:	f004 fd66 	bl	8005d62 <HAL_SPI_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80012a4:	bf00      	nop
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 fa5e 	bl	800676c <HAL_SPI_GetState>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d1f7      	bne.n	80012a6 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6858      	ldr	r0, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	899b      	ldrh	r3, [r3, #12]
 80012be:	2201      	movs	r2, #1
 80012c0:	4619      	mov	r1, r3
 80012c2:	f002 fdb9 	bl	8003e38 <HAL_GPIO_WritePin>

	return status;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	4613      	mov	r3, r2
 80012de:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	733b      	strb	r3, [r7, #12]
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6898      	ldr	r0, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	89db      	ldrh	r3, [r3, #14]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	f002 fda0 	bl	8003e38 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	f107 010c 	add.w	r1, r7, #12
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	2202      	movs	r2, #2
 8001306:	f004 fd2c 	bl	8005d62 <HAL_SPI_Transmit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001318:	bf00      	nop
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fa24 	bl	800676c <HAL_SPI_GetState>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d1f7      	bne.n	800131a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6898      	ldr	r0, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	89db      	ldrh	r3, [r3, #14]
 8001332:	2201      	movs	r2, #1
 8001334:	4619      	mov	r1, r3
 8001336:	f002 fd7f 	bl	8003e38 <HAL_GPIO_WritePin>

	return status;
 800133a:	7bfb      	ldrb	r3, [r7, #15]

}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

	if (imu->readingAcc)  // To not have double calls
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7c1b      	ldrb	r3, [r3, #16]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <BMI088_ReadAccelerometerDMA+0x14>
		return 0;
 8001354:	2300      	movs	r3, #0
 8001356:	e023      	b.n	80013a0 <BMI088_ReadAccelerometerDMA+0x5c>

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6858      	ldr	r0, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	899b      	ldrh	r3, [r3, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	f002 fd68 	bl	8003e38 <HAL_GPIO_WritePin>

	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f103 0112 	add.w	r1, r3, #18
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001378:	2308      	movs	r3, #8
 800137a:	f004 ffdf 	bl	800633c <HAL_SPI_TransmitReceive_DMA>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d104      	bne.n	800138e <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	741a      	strb	r2, [r3, #16]
		return 1;
 800138a:	2301      	movs	r3, #1
 800138c:	e008      	b.n	80013a0 <BMI088_ReadAccelerometerDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6858      	ldr	r0, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	899b      	ldrh	r3, [r3, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	4619      	mov	r1, r3
 800139a:	f002 fd4d 	bl	8003e38 <HAL_GPIO_WritePin>
		return 0;
 800139e:	2300      	movs	r3, #0

	}

}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6858      	ldr	r0, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	899b      	ldrh	r3, [r3, #12]
 80013b8:	2201      	movs	r2, #1
 80013ba:	4619      	mov	r1, r3
 80013bc:	f002 fd3c 	bl	8003e38 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001400:	b2db      	uxtb	r3, r3
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800140c:	b2db      	uxtb	r3, r3
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX * 2;		// *2 was added by Cristiano.
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800141a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY * 2;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800143a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ * 2;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800145a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	if (imu->readingGyr)  // To not have double calls
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7c5b      	ldrb	r3, [r3, #17]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <BMI088_ReadGyroscopeDMA+0x14>
		return 0;
 800148c:	2300      	movs	r3, #0
 800148e:	e023      	b.n	80014d8 <BMI088_ReadGyroscopeDMA+0x5c>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6898      	ldr	r0, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	89db      	ldrh	r3, [r3, #14]
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	f002 fccc 	bl	8003e38 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 011a 	add.w	r1, r3, #26
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80014b0:	2307      	movs	r3, #7
 80014b2:	f004 ff43 	bl	800633c <HAL_SPI_TransmitReceive_DMA>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d104      	bne.n	80014c6 <BMI088_ReadGyroscopeDMA+0x4a>

		imu->readingGyr = 1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	745a      	strb	r2, [r3, #17]
		return 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e008      	b.n	80014d8 <BMI088_ReadGyroscopeDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6898      	ldr	r0, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	89db      	ldrh	r3, [r3, #14]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	f002 fcb1 	bl	8003e38 <HAL_GPIO_WritePin>
		return 0;
 80014d6:	2300      	movs	r3, #0

	}

}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6898      	ldr	r0, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	89db      	ldrh	r3, [r3, #14]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f002 fca0 	bl	8003e38 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001504:	b2db      	uxtb	r3, r3
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001510:	b2db      	uxtb	r3, r3
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800151e:	b2db      	uxtb	r3, r3
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001538:	b2db      	uxtb	r3, r3
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800156e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800158a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <SetQuaternionFromEuler>:

float correction_factor = 0.0f;


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80015b8:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 80015bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800174c <SetQuaternionFromEuler+0x1a4>
 80015c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c8:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 80015cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800174c <SetQuaternionFromEuler+0x1a4>
 80015d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d8:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 80015dc:	edd7 7a00 	vldr	s15, [r7]
 80015e0:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800174c <SetQuaternionFromEuler+0x1a4>
 80015e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e8:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 80015ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80015f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f8:	eeb0 0a67 	vmov.f32	s0, s15
 80015fc:	f00c ff02 	bl	800e404 <cosf>
 8001600:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 8001604:	edd7 7a02 	vldr	s15, [r7, #8]
 8001608:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800160c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f00c ff42 	bl	800e49c <sinf>
 8001618:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 800161c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001620:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	f00c feea 	bl	800e404 <cosf>
 8001630:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 8001634:	edd7 7a01 	vldr	s15, [r7, #4]
 8001638:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800163c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	f00c ff2a 	bl	800e49c <sinf>
 8001648:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 800164c:	edd7 7a00 	vldr	s15, [r7]
 8001650:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	f00c fed2 	bl	800e404 <cosf>
 8001660:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 8001664:	edd7 7a00 	vldr	s15, [r7]
 8001668:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800166c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f00c ff12 	bl	800e49c <sinf>
 8001678:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 800167c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001680:	edd7 7a07 	vldr	s15, [r7, #28]
 8001684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001688:	edd7 7a05 	vldr	s15, [r7, #20]
 800168c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001690:	edd7 6a08 	vldr	s13, [r7, #32]
 8001694:	edd7 7a06 	vldr	s15, [r7, #24]
 8001698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800169c:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 80016ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80016b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80016b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80016be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 80016e0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f4:	edd7 6a08 	vldr	s13, [r7, #32]
 80016f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001700:	edd7 7a04 	vldr	s15, [r7, #16]
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 8001712:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001716:	edd7 7a07 	vldr	s15, [r7, #28]
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001726:	edd7 6a08 	vldr	s13, [r7, #32]
 800172a:	edd7 7a06 	vldr	s15, [r7, #24]
 800172e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001732:	edd7 7a05 	vldr	s15, [r7, #20]
 8001736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	@ 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	3c8efa39 	.word	0x3c8efa39

08001750 <NormalizeQuaternion>:




// Function to normalize a generic quaternion
void NormalizeQuaternion(Quaternion *q) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    float norm = sqrt(q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edd3 6a01 	vldr	s13, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	edd3 7a01 	vldr	s15, [r3, #4]
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	edd3 7a02 	vldr	s15, [r3, #8]
 8001788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	edd3 6a03 	vldr	s13, [r3, #12]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	edd3 7a03 	vldr	s15, [r3, #12]
 800179c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	ee17 0a90 	vmov	r0, s15
 80017a8:	f7fe fece 	bl	8000548 <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	ec43 2b10 	vmov	d0, r2, r3
 80017b4:	f00c fdbc 	bl	800e330 <sqrt>
 80017b8:	ec53 2b10 	vmov	r2, r3, d0
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f9f2 	bl	8000ba8 <__aeabi_d2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]
    if (norm > 0.0f) {
 80017c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d4:	dc00      	bgt.n	80017d8 <NormalizeQuaternion+0x88>
        q->w /= norm;
        q->x /= norm;
        q->y /= norm;
        q->z /= norm;
    }
}
 80017d6:	e027      	b.n	8001828 <NormalizeQuaternion+0xd8>
        q->w /= norm;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edd3 6a00 	vldr	s13, [r3]
 80017de:	ed97 7a03 	vldr	s14, [r7, #12]
 80017e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edc3 7a00 	vstr	s15, [r3]
        q->x /= norm;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80017f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	edc3 7a01 	vstr	s15, [r3, #4]
        q->y /= norm;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edd3 6a02 	vldr	s13, [r3, #8]
 8001806:	ed97 7a03 	vldr	s14, [r7, #12]
 800180a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	edc3 7a02 	vstr	s15, [r3, #8]
        q->z /= norm;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	edd3 6a03 	vldr	s13, [r3, #12]
 800181a:	ed97 7a03 	vldr	s14, [r7, #12]
 800181e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <UpdateQuaternion>:


// Update the rotation
void UpdateQuaternion(Quaternion *q, Vector3 gyro, float dt) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	@ 0x38
 8001834:	af00      	add	r7, sp, #0
 8001836:	6178      	str	r0, [r7, #20]
 8001838:	eef0 6a40 	vmov.f32	s13, s0
 800183c:	eeb0 7a60 	vmov.f32	s14, s1
 8001840:	eef0 7a41 	vmov.f32	s15, s2
 8001844:	edc7 1a01 	vstr	s3, [r7, #4]
 8001848:	edc7 6a02 	vstr	s13, [r7, #8]
 800184c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001850:	edc7 7a04 	vstr	s15, [r7, #16]
    float gx = gyro.x * 0.5f * dt;
 8001854:	edd7 7a02 	vldr	s15, [r7, #8]
 8001858:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800185c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001860:	ed97 7a01 	vldr	s14, [r7, #4]
 8001864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001868:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float gy = gyro.y * 0.5f * dt;
 800186c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001870:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001878:	ed97 7a01 	vldr	s14, [r7, #4]
 800187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001880:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float gz = gyro.z * 0.5f * dt;
 8001884:	edd7 7a04 	vldr	s15, [r7, #16]
 8001888:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800188c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001890:	ed97 7a01 	vldr	s14, [r7, #4]
 8001894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001898:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    Quaternion q_dot = {
        -q->x * gx - q->y * gy - q->z * gz,
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	edd3 7a01 	vldr	s15, [r3, #4]
 80018a2:	eeb1 7a67 	vneg.f32	s14, s15
 80018a6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80018b4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80018c6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 80018d2:	edc7 7a07 	vstr	s15, [r7, #28]
         q->w * gx + q->y * gz - q->z * gy,
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80018ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80018fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001904:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 8001908:	edc7 7a08 	vstr	s15, [r7, #32]
         q->w * gy - q->x * gz + q->z * gx,
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	ed93 7a00 	vldr	s14, [r3]
 8001912:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001920:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001928:	ee37 7a67 	vsub.f32	s14, s14, s15
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001932:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193a:	ee77 7a27 	vadd.f32	s15, s14, s15
    Quaternion q_dot = {
 800193e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         q->w * gz + q->x * gy - q->y * gx
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	ed93 7a00 	vldr	s14, [r3]
 8001948:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800194c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	edd3 6a01 	vldr	s13, [r3, #4]
 8001956:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	edd3 6a02 	vldr	s13, [r3, #8]
 8001968:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800196c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001970:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 8001974:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    };

    q->w += q_dot.w;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	edc3 7a00 	vstr	s15, [r3]
    q->x += q_dot.x;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001992:	edd7 7a08 	vldr	s15, [r7, #32]
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y += q_dot.y;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80019a6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z += q_dot.z;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80019ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	edc3 7a03 	vstr	s15, [r3, #12]

    NormalizeQuaternion(q);
 80019c8:	6978      	ldr	r0, [r7, #20]
 80019ca:	f7ff fec1 	bl	8001750 <NormalizeQuaternion>
}
 80019ce:	bf00      	nop
 80019d0:	3738      	adds	r7, #56	@ 0x38
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <CorrectQuaternionWithAccel>:

// Correction with accelerometer
void CorrectQuaternionWithAccel(Quaternion *q, Vector3 accel, float alpha) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	@ 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6178      	str	r0, [r7, #20]
 80019e0:	eef0 6a40 	vmov.f32	s13, s0
 80019e4:	eeb0 7a60 	vmov.f32	s14, s1
 80019e8:	eef0 7a41 	vmov.f32	s15, s2
 80019ec:	edc7 1a01 	vstr	s3, [r7, #4]
 80019f0:	edc7 6a02 	vstr	s13, [r7, #8]
 80019f4:	ed87 7a03 	vstr	s14, [r7, #12]
 80019f8:	edc7 7a04 	vstr	s15, [r7, #16]
	// (alpha not used right now)
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	edd3 6a00 	vldr	s13, [r3]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                        2.0f * (q->w * q->x + q->y * q->z),
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	ed93 7a00 	vldr	s14, [r3]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 8001a50:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                        q->w * q->w - q->x * q->x - q->y * q->y + q->z * q->z };
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	ed93 7a00 	vldr	s14, [r3]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 8001aa0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001aa4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aa8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ab4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac0:	edc7 7a06 	vstr	s15, [r7, #24]
                      accel.z * gravity.x - accel.x * gravity.z,
 8001ac4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ac8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad0:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ad4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001adc:	ee77 7a67 	vsub.f32	s15, s14, s15
    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001ae0:	edc7 7a07 	vstr	s15, [r7, #28]
                      accel.x * gravity.y - accel.y * gravity.x };
 8001ae4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ae8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001af4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001b00:	edc7 7a08 	vstr	s15, [r7, #32]

	correction_factor = 0.0f;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <CorrectQuaternionWithAccel+0x19c>)
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
    q->x += correction_factor * error.x;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b12:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <CorrectQuaternionWithAccel+0x19c>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	edc3 7a01 	vstr	s15, [r3, #4]
	q->y += correction_factor * error.y;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b34:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <CorrectQuaternionWithAccel+0x19c>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	edc3 7a02 	vstr	s15, [r3, #8]
	q->z += correction_factor * error.z;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b4e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b52:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <CorrectQuaternionWithAccel+0x19c>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	edc3 7a03 	vstr	s15, [r3, #12]

    NormalizeQuaternion(q);
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff fdf2 	bl	8001750 <NormalizeQuaternion>
}
 8001b6c:	bf00      	nop
 8001b6e:	3730      	adds	r7, #48	@ 0x30
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000314 	.word	0x20000314

08001b78 <QuaternionToEuler>:



// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	eeb0 6a40 	vmov.f32	s12, s0
 8001b82:	eef0 6a60 	vmov.f32	s13, s1
 8001b86:	eeb0 7a41 	vmov.f32	s14, s2
 8001b8a:	eef0 7a61 	vmov.f32	s15, s3
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	ed87 6a02 	vstr	s12, [r7, #8]
 8001b94:	edc7 6a03 	vstr	s13, [r7, #12]
 8001b98:	ed87 7a04 	vstr	s14, [r7, #16]
 8001b9c:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 8001ba0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ba4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bac:	edd7 6a04 	vldr	s13, [r7, #16]
 8001bb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bc0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 8001bc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001be4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 8001bf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001bf2:	f7fe fca9 	bl	8000548 <__aeabi_f2d>
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	460d      	mov	r5, r1
 8001bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bfc:	f7fe fca4 	bl	8000548 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	ec43 2b11 	vmov	d1, r2, r3
 8001c08:	ec45 4b10 	vmov	d0, r4, r5
 8001c0c:	f00c fb1e 	bl	800e24c <atan2>
 8001c10:	ec51 0b10 	vmov	r0, r1, d0
 8001c14:	a356      	add	r3, pc, #344	@ (adr r3, 8001d70 <QuaternionToEuler+0x1f8>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fced 	bl	80005f8 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe ffbf 	bl	8000ba8 <__aeabi_d2f>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 8001c30:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c3c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 8001c54:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c58:	eef0 7ae7 	vabs.f32	s15, s15
 8001c5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	db13      	blt.n	8001c92 <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 8001c6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c6c:	f7fe fc6c 	bl	8000548 <__aeabi_f2d>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	ec43 2b11 	vmov	d1, r2, r3
 8001c78:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001d68 <QuaternionToEuler+0x1f0>
 8001c7c:	f00a fa67 	bl	800c14e <copysign>
 8001c80:	ec51 0b10 	vmov	r0, r1, d0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	1d1c      	adds	r4, r3, #4
 8001c88:	f7fe ff8e 	bl	8000ba8 <__aeabi_d2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	6023      	str	r3, [r4, #0]
 8001c90:	e019      	b.n	8001cc6 <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 8001c92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c94:	f7fe fc58 	bl	8000548 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	ec43 2b10 	vmov	d0, r2, r3
 8001ca0:	f00c faa0 	bl	800e1e4 <asin>
 8001ca4:	ec51 0b10 	vmov	r0, r1, d0
 8001ca8:	a331      	add	r3, pc, #196	@ (adr r3, 8001d70 <QuaternionToEuler+0x1f8>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fca3 	bl	80005f8 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	1d1c      	adds	r4, r3, #4
 8001cbe:	f7fe ff73 	bl	8000ba8 <__aeabi_d2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 8001cc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd2:	edd7 6a03 	vldr	s13, [r7, #12]
 8001cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ce6:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 8001cea:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf6:	edd7 6a05 	vldr	s13, [r7, #20]
 8001cfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d12:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 8001d16:	6a38      	ldr	r0, [r7, #32]
 8001d18:	f7fe fc16 	bl	8000548 <__aeabi_f2d>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	460d      	mov	r5, r1
 8001d20:	69f8      	ldr	r0, [r7, #28]
 8001d22:	f7fe fc11 	bl	8000548 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	ec43 2b11 	vmov	d1, r2, r3
 8001d2e:	ec45 4b10 	vmov	d0, r4, r5
 8001d32:	f00c fa8b 	bl	800e24c <atan2>
 8001d36:	ec51 0b10 	vmov	r0, r1, d0
 8001d3a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001d70 <QuaternionToEuler+0x1f8>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fc5a 	bl	80005f8 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f103 0408 	add.w	r4, r3, #8
 8001d52:	f7fe ff29 	bl	8000ba8 <__aeabi_d2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 8001d5a:	bf00      	nop
 8001d5c:	3730      	adds	r7, #48	@ 0x30
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bdb0      	pop	{r4, r5, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	f3af 8000 	nop.w
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	40568000 	.word	0x40568000
 8001d70:	20000000 	.word	0x20000000
 8001d74:	404ca5dc 	.word	0x404ca5dc

08001d78 <EKF_CalculateGyroBias>:
 * @param imu IMU algorithm structure
 * @param samples number of samples to calculate the mean average bias
 * @param ret_bias address (array) where to write the calculated bias values
 */
void EKF_CalculateGyroBias(BMI088* imu, int cycles)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
    float bias[3] = {0,0,0};
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < cycles; i++) {
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	e01d      	b.n	8001dd6 <EKF_CalculateGyroBias+0x5e>
        bias[0] += imu->gyr_rps[0];
 8001d9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	edc7 7a03 	vstr	s15, [r7, #12]
        bias[1] += imu->gyr_rps[1];
 8001dac:	ed97 7a04 	vldr	s14, [r7, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	edc7 7a04 	vstr	s15, [r7, #16]
        bias[2] += imu->gyr_rps[2];
 8001dbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dcc:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < cycles; i++) {
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbdd      	blt.n	8001d9a <EKF_CalculateGyroBias+0x22>
    }
    for (int i = 0; i < 3; i++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	e016      	b.n	8001e12 <EKF_CalculateGyroBias+0x9a>
        gyro_bias[i] = bias[i] / cycles;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3320      	adds	r3, #32
 8001dea:	443b      	add	r3, r7
 8001dec:	3b14      	subs	r3, #20
 8001dee:	edd3 6a00 	vldr	s13, [r3]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e00:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <EKF_CalculateGyroBias+0xb0>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	dde5      	ble.n	8001de4 <EKF_CalculateGyroBias+0x6c>
    }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3724      	adds	r7, #36	@ 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000318 	.word	0x20000318

08001e2c <Filter_Init>:
/// ######################################################################################################
/// ##### FILTER SECTION #################################################################################
/// ######################################################################################################

void Filter_Init(LPF_FILTER *filt, float f_LP_gyr, float f_LP_acc, float f_HP_gyr, float f_HP_acc, float dt)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6178      	str	r0, [r7, #20]
 8001e34:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e38:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e3c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e40:	edc7 1a01 	vstr	s3, [r7, #4]
 8001e44:	ed87 2a00 	vstr	s4, [r7]

	LPF_Init(filt, f_LP_gyr, f_LP_acc, dt);
 8001e48:	ed97 1a00 	vldr	s2, [r7]
 8001e4c:	edd7 0a03 	vldr	s1, [r7, #12]
 8001e50:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f000 f8b9 	bl	8001fcc <LPF_Init>
	HPF_Init(filt, f_HP_gyr, f_HP_acc, dt);
 8001e5a:	ed97 1a00 	vldr	s2, [r7]
 8001e5e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001e62:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f000 f917 	bl	800209a <HPF_Init>

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	e032      	b.n	8001ed8 <Filter_Init+0xac>
	{
		filt->filt_gyr_x[i] = 0.0f;					// filt_gyr_x[0] -> past filtered sample   //	filt_gyr_x[1] -> curr filtered sample
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3304      	adds	r3, #4
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_y[i] = 0.0f;					// filt_gyr_x[0] ==> y(n)
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	3306      	adds	r3, #6
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_z[i] = 0.0f;					// filt_gyr_x[1] ==> y(n-1)
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	3308      	adds	r3, #8
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
		filt->filt_acc_x[i] = 0.0f;
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	330a      	adds	r3, #10
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
		filt->filt_acc_y[i] = 0.0f;
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
		filt->filt_acc_z[i] = 0.0f;
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	330e      	adds	r3, #14
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	ddc9      	ble.n	8001e72 <Filter_Init+0x46>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	e032      	b.n	8001f4a <Filter_Init+0x11e>
	{
		filt->not_filt_gyr_x[i] = 0.0f;					// not_filt_gyr_x[0] -> past not filtered sample   //	not_filt_gyr_x[1] -> curr not filtered sample
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	3310      	adds	r3, #16
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_y[i] = 0.0f;					// not_filt_gyr_x[0] ==> x(n)
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3312      	adds	r3, #18
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_z[i] = 0.0f;					// not_filt_gyr_x[1] ==> x(n-1)
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	3314      	adds	r3, #20
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_x[i] = 0.0f;
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	3316      	adds	r3, #22
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_y[i] = 0.0f;
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	3318      	adds	r3, #24
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_z[i] = 0.0f;
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	331a      	adds	r3, #26
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	ddc9      	ble.n	8001ee4 <Filter_Init+0xb8>
	}
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	0000      	movs	r0, r0
 8001f5c:	0000      	movs	r0, r0
	...

08001f60 <LPF_CalculateAlpha>:

/// ######################################################################################################
/// ##### LOW PASS FILTER SECTION ########################################################################
/// ######################################################################################################
float LPF_CalculateAlpha(float f_cut, float dt)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f6a:	edc7 0a00 	vstr	s1, [r7]
	float tau = 1.0f / (2.0f * M_PI * f_cut);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe faea 	bl	8000548 <__aeabi_f2d>
 8001f74:	a313      	add	r3, pc, #76	@ (adr r3, 8001fc4 <LPF_CalculateAlpha+0x64>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb3d 	bl	80005f8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	f04f 0000 	mov.w	r0, #0
 8001f86:	490e      	ldr	r1, [pc, #56]	@ (8001fc0 <LPF_CalculateAlpha+0x60>)
 8001f88:	f7fe fc60 	bl	800084c <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fe08 	bl	8000ba8 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]
	return dt / (tau + dt);
 8001f9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fa0:	edd7 7a00 	vldr	s15, [r7]
 8001fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa8:	ed97 7a00 	vldr	s14, [r7]
 8001fac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fb0:	eef0 7a66 	vmov.f32	s15, s13
}
 8001fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	3ff00000 	.word	0x3ff00000
 8001fc4:	54442d18 	.word	0x54442d18
 8001fc8:	401921fb 	.word	0x401921fb

08001fcc <LPF_Init>:



void LPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float dt)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fd8:	edc7 0a01 	vstr	s1, [r7, #4]
 8001fdc:	ed87 1a00 	vstr	s2, [r7]
	// aplha for LPF settings
	float alpha_gyr = LPF_CalculateAlpha(f_cut_gyr, dt);
 8001fe0:	edd7 0a00 	vldr	s1, [r7]
 8001fe4:	ed97 0a02 	vldr	s0, [r7, #8]
 8001fe8:	f7ff ffba 	bl	8001f60 <LPF_CalculateAlpha>
 8001fec:	ed87 0a05 	vstr	s0, [r7, #20]
	float alpha_acc = LPF_CalculateAlpha(f_cut_acc, dt);
 8001ff0:	edd7 0a00 	vldr	s1, [r7]
 8001ff4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ff8:	f7ff ffb2 	bl	8001f60 <LPF_CalculateAlpha>
 8001ffc:	ed87 0a04 	vstr	s0, [r7, #16]
	LPF_SetAlpha(filt, alpha_gyr, alpha_acc);
 8002000:	edd7 0a04 	vldr	s1, [r7, #16]
 8002004:	ed97 0a05 	vldr	s0, [r7, #20]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f804 	bl	8002016 <LPF_SetAlpha>

}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <LPF_SetAlpha>:

void LPF_SetAlpha(LPF_FILTER *filt, float alpha_gyr, float alpha_acc)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002022:	edc7 0a01 	vstr	s1, [r7, #4]
	if(alpha_gyr > 1.0f)
 8002026:	edd7 7a02 	vldr	s15, [r7, #8]
 800202a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800202e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	dd03      	ble.n	8002040 <LPF_SetAlpha+0x2a>
	{
		alpha_gyr = 1.0f;
 8002038:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	e009      	b.n	8002054 <LPF_SetAlpha+0x3e>
	}
	else if(alpha_gyr < 0.0f)
 8002040:	edd7 7a02 	vldr	s15, [r7, #8]
 8002044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	d502      	bpl.n	8002054 <LPF_SetAlpha+0x3e>
	{
		alpha_gyr = 0.0f;
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
	}

	if(alpha_acc > 1.0f)
 8002054:	edd7 7a01 	vldr	s15, [r7, #4]
 8002058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800205c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	dd03      	ble.n	800206e <LPF_SetAlpha+0x58>
	{
		alpha_acc = 1.0f;
 8002066:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	e009      	b.n	8002082 <LPF_SetAlpha+0x6c>
	}
	else if(alpha_acc < 0.0f)
 800206e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d502      	bpl.n	8002082 <LPF_SetAlpha+0x6c>
	{
		alpha_acc = 0.0f;
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
	}

	filt->alpha_gyr = alpha_gyr;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	601a      	str	r2, [r3, #0]
	filt->alpha_acc = alpha_acc;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	605a      	str	r2, [r3, #4]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HPF_Init>:
/// ##### HIGH PASS FILTER SECTION #######################################################################
/// ######################################################################################################


void HPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float dt)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80020a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80020aa:	ed87 1a00 	vstr	s2, [r7]
	// beta for HPF settings
	float beta_gyr = HPF_CalculateBeta(f_cut_gyr, dt);
 80020ae:	edd7 0a00 	vldr	s1, [r7]
 80020b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80020b6:	f000 f815 	bl	80020e4 <HPF_CalculateBeta>
 80020ba:	ed87 0a05 	vstr	s0, [r7, #20]
	float beta_acc = HPF_CalculateBeta(f_cut_acc, dt);
 80020be:	edd7 0a00 	vldr	s1, [r7]
 80020c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80020c6:	f000 f80d 	bl	80020e4 <HPF_CalculateBeta>
 80020ca:	ed87 0a04 	vstr	s0, [r7, #16]
	HPF_SetBeta(filt, beta_gyr, beta_acc);
 80020ce:	edd7 0a04 	vldr	s1, [r7, #16]
 80020d2:	ed97 0a05 	vldr	s0, [r7, #20]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f826 	bl	8002128 <HPF_SetBeta>

}
 80020dc:	bf00      	nop
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HPF_CalculateBeta>:


float HPF_CalculateBeta(float f_cut, float dt)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80020ee:	edc7 0a00 	vstr	s1, [r7]
	return 1.0f - expf(-2.0f * (float)M_PI * f_cut * dt);
 80020f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002124 <HPF_CalculateBeta+0x40>
 80020fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020fe:	edd7 7a00 	vldr	s15, [r7]
 8002102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002106:	eeb0 0a67 	vmov.f32	s0, s15
 800210a:	f00c f945 	bl	800e398 <expf>
 800210e:	eef0 7a40 	vmov.f32	s15, s0
 8002112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002116:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	c0c90fdb 	.word	0xc0c90fdb

08002128 <HPF_SetBeta>:


void HPF_SetBeta(LPF_FILTER *filt, float beta_gyr, float beta_acc)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	ed87 0a02 	vstr	s0, [r7, #8]
 8002134:	edc7 0a01 	vstr	s1, [r7, #4]
	if(beta_gyr > 1.0f)
 8002138:	edd7 7a02 	vldr	s15, [r7, #8]
 800213c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	dd03      	ble.n	8002152 <HPF_SetBeta+0x2a>
	{
		beta_gyr = 1.0f;
 800214a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	e009      	b.n	8002166 <HPF_SetBeta+0x3e>
	}
	else if(beta_gyr < 0.0f)
 8002152:	edd7 7a02 	vldr	s15, [r7, #8]
 8002156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	d502      	bpl.n	8002166 <HPF_SetBeta+0x3e>
	{
		beta_gyr = 0.0f;
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
	}

	if(beta_acc > 1.0f)
 8002166:	edd7 7a01 	vldr	s15, [r7, #4]
 800216a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800216e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	dd03      	ble.n	8002180 <HPF_SetBeta+0x58>
	{
		beta_acc = 1.0f;
 8002178:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	e009      	b.n	8002194 <HPF_SetBeta+0x6c>
	}
	else if(beta_acc < 0.0f)
 8002180:	edd7 7a01 	vldr	s15, [r7, #4]
 8002184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218c:	d502      	bpl.n	8002194 <HPF_SetBeta+0x6c>
	{
		beta_acc = 0.0f;
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
	}

	filt->beta_gyr = beta_gyr;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	609a      	str	r2, [r3, #8]
	filt->beta_acc = beta_acc;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_GPIO_EXTI_Callback>:
float f_HP_acc = 0.0001f; // HP freq cut frequency in Hz of acc


/// DMA Reading
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d107      	bne.n	80021cc <HAL_GPIO_EXTI_Callback+0x20>
	{
		// we check if the interrupt pin is the accelerometer one
		if (!imu.readingAcc)
 80021bc:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80021be:	7c1b      	ldrb	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_GPIO_EXTI_Callback+0x34>
			BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 80021c4:	4808      	ldr	r0, [pc, #32]	@ (80021e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80021c6:	f7ff f8bd 	bl	8001344 <BMI088_ReadAccelerometerDMA>
		// we check if the interrupt pin is the gyroscope one
		if (!imu.readingGyr)
			BMI088_ReadGyroscopeDMA(&imu);
	}

}
 80021ca:	e009      	b.n	80021e0 <HAL_GPIO_EXTI_Callback+0x34>
	else if(GPIO_Pin == INT_GYR_Pin)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d106      	bne.n	80021e0 <HAL_GPIO_EXTI_Callback+0x34>
		if (!imu.readingGyr)
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80021d4:	7c5b      	ldrb	r3, [r3, #17]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_GPIO_EXTI_Callback+0x34>
			BMI088_ReadGyroscopeDMA(&imu);
 80021da:	4803      	ldr	r0, [pc, #12]	@ (80021e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80021dc:	f7ff f94e 	bl	800147c <BMI088_ReadGyroscopeDMA>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200004cc 	.word	0x200004cc

080021ec <HAL_SPI_TxRxCpltCallback>:
/// DMA CALLBACK
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_SPI_TxRxCpltCallback+0x38>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10d      	bne.n	800221a <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002200:	7c1b      	ldrb	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8002206:	4808      	ldr	r0, [pc, #32]	@ (8002228 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002208:	f7ff f8ce 	bl	80013a8 <BMI088_ReadAccelerometerDMA_Complete>

		}

		if (imu.readingGyr)
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800220e:	7c5b      	ldrb	r3, [r3, #17]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8002214:	4804      	ldr	r0, [pc, #16]	@ (8002228 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002216:	f7ff f963 	bl	80014e0 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40013000 	.word	0x40013000
 8002228:	200004cc 	.word	0x200004cc
 800222c:	00000000 	.word	0x00000000

08002230 <HAL_TIM_PeriodElapsedCallback>:


/// Callback of the timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002234:	b0e9      	sub	sp, #420	@ 0x1a4
 8002236:	af18      	add	r7, sp, #96	@ 0x60
 8002238:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800223c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002240:	6018      	str	r0, [r3, #0]
	// Calculate angles with quaternions
    if(htim->Instance == TIM2)
 8002242:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002252:	f040 808f 	bne.w	8002374 <HAL_TIM_PeriodElapsedCallback+0x144>
    {
        // Code to execute at constant sample rate
        Take_IMU_Measurements(&imu);
 8002256:	489c      	ldr	r0, [pc, #624]	@ (80024c8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002258:	f000 f950 	bl	80024fc <Take_IMU_Measurements>
        gyr.z = filt.filt_gyr_z[1];
        acc.x = filt.filt_acc_x[1];
		acc.y = filt.filt_acc_y[1];
		acc.z = filt.filt_acc_z[1];*/

        UpdateQuaternion(&q, gyr, T_TIM2);
 800225c:	4b9b      	ldr	r3, [pc, #620]	@ (80024cc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800225e:	ed93 6a00 	vldr	s12, [r3]
 8002262:	4b9b      	ldr	r3, [pc, #620]	@ (80024d0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002264:	edd3 6a00 	vldr	s13, [r3]
 8002268:	ed93 7a01 	vldr	s14, [r3, #4]
 800226c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002270:	eef0 1a46 	vmov.f32	s3, s12
 8002274:	eeb0 0a66 	vmov.f32	s0, s13
 8002278:	eef0 0a47 	vmov.f32	s1, s14
 800227c:	eeb0 1a67 	vmov.f32	s2, s15
 8002280:	4894      	ldr	r0, [pc, #592]	@ (80024d4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002282:	f7ff fad5 	bl	8001830 <UpdateQuaternion>
        CorrectQuaternionWithAccel(&q, acc, 0.9f);
 8002286:	4b94      	ldr	r3, [pc, #592]	@ (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002288:	edd3 6a00 	vldr	s13, [r3]
 800228c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002290:	edd3 7a02 	vldr	s15, [r3, #8]
 8002294:	eddf 1a91 	vldr	s3, [pc, #580]	@ 80024dc <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8002298:	eeb0 0a66 	vmov.f32	s0, s13
 800229c:	eef0 0a47 	vmov.f32	s1, s14
 80022a0:	eeb0 1a67 	vmov.f32	s2, s15
 80022a4:	488b      	ldr	r0, [pc, #556]	@ (80024d4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80022a6:	f7ff fb97 	bl	80019d8 <CorrectQuaternionWithAccel>
        QuaternionToEuler(q, angles);
 80022aa:	4b8a      	ldr	r3, [pc, #552]	@ (80024d4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80022ac:	ed93 6a00 	vldr	s12, [r3]
 80022b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80022b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80022b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022bc:	4888      	ldr	r0, [pc, #544]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80022be:	eeb0 0a46 	vmov.f32	s0, s12
 80022c2:	eef0 0a66 	vmov.f32	s1, s13
 80022c6:	eeb0 1a47 	vmov.f32	s2, s14
 80022ca:	eef0 1a67 	vmov.f32	s3, s15
 80022ce:	f7ff fc53 	bl	8001b78 <QuaternionToEuler>

        abs_acc = sqrt(pow(acc.x,2)+pow(acc.y,2) + pow(acc.z,2));
 80022d2:	4b81      	ldr	r3, [pc, #516]	@ (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f936 	bl	8000548 <__aeabi_f2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	ed9f 1b77 	vldr	d1, [pc, #476]	@ 80024c0 <HAL_TIM_PeriodElapsedCallback+0x290>
 80022e4:	ec43 2b10 	vmov	d0, r2, r3
 80022e8:	f00b ffb2 	bl	800e250 <pow>
 80022ec:	ec55 4b10 	vmov	r4, r5, d0
 80022f0:	4b79      	ldr	r3, [pc, #484]	@ (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f927 	bl	8000548 <__aeabi_f2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 80024c0 <HAL_TIM_PeriodElapsedCallback+0x290>
 8002302:	ec43 2b10 	vmov	d0, r2, r3
 8002306:	f00b ffa3 	bl	800e250 <pow>
 800230a:	ec53 2b10 	vmov	r2, r3, d0
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fd ffbb 	bl	800028c <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4614      	mov	r4, r2
 800231c:	461d      	mov	r5, r3
 800231e:	4b6e      	ldr	r3, [pc, #440]	@ (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f910 	bl	8000548 <__aeabi_f2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	ed9f 1b64 	vldr	d1, [pc, #400]	@ 80024c0 <HAL_TIM_PeriodElapsedCallback+0x290>
 8002330:	ec43 2b10 	vmov	d0, r2, r3
 8002334:	f00b ff8c 	bl	800e250 <pow>
 8002338:	ec53 2b10 	vmov	r2, r3, d0
 800233c:	4620      	mov	r0, r4
 800233e:	4629      	mov	r1, r5
 8002340:	f7fd ffa4 	bl	800028c <__adddf3>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	ec43 2b17 	vmov	d7, r2, r3
 800234c:	eeb0 0a47 	vmov.f32	s0, s14
 8002350:	eef0 0a67 	vmov.f32	s1, s15
 8002354:	f00b ffec 	bl	800e330 <sqrt>
 8002358:	ec53 2b10 	vmov	r2, r3, d0
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fc22 	bl	8000ba8 <__aeabi_d2f>
 8002364:	4603      	mov	r3, r0
 8002366:	4a5f      	ldr	r2, [pc, #380]	@ (80024e4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002368:	6013      	str	r3, [r2, #0]

        timestamp_TIM2++;	// how many times TIM2 is called
 800236a:	4b5f      	ldr	r3, [pc, #380]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	4a5d      	ldr	r2, [pc, #372]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002372:	6013      	str	r3, [r2, #0]
    }

    // Send data with CDC_Transfer_FS
    if(htim->Instance == TIM3)
 8002374:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a5a      	ldr	r2, [pc, #360]	@ (80024ec <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	f040 8095 	bne.w	80024b2 <HAL_TIM_PeriodElapsedCallback+0x282>
		//API_PrintAngles(HAL_GetTick(), angles);
		//float gyrArr[3] = {gyr.x, gyr.y, gyr.z};
		//float accArr[3] = {acc.x, acc.y, acc.z};
		//API_SendInertial(HAL_GetTick(), gyrArr, accArr);

		timestamp_TIM3++;	// how many times TIM3 is called
 8002388:	4b59      	ldr	r3, [pc, #356]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002390:	6013      	str	r3, [r2, #0]

	// Send every data using just one string and one TX
		char txBuff[256];
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002392:	4b58      	ldr	r3, [pc, #352]	@ (80024f4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80023a0:	4b4f      	ldr	r3, [pc, #316]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8cf 	bl	8000548 <__aeabi_f2d>
 80023aa:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80023ae:	4b4c      	ldr	r3, [pc, #304]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80023b0:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8c8 	bl	8000548 <__aeabi_f2d>
 80023b8:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80023bc:	4b48      	ldr	r3, [pc, #288]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80023be:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f8c1 	bl	8000548 <__aeabi_f2d>
 80023c6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80023ca:	4b4a      	ldr	r3, [pc, #296]	@ (80024f4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023d2:	fb02 f103 	mul.w	r1, r2, r3
 80023d6:	61f9      	str	r1, [r7, #28]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80023d8:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80023da:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8b3 	bl	8000548 <__aeabi_f2d>
 80023e2:	e9c7 0104 	strd	r0, r1, [r7, #16]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80023e6:	4b3a      	ldr	r3, [pc, #232]	@ (80024d0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80023e8:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f8ac 	bl	8000548 <__aeabi_f2d>
 80023f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80023f4:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80023f6:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f8a5 	bl	8000548 <__aeabi_f2d>
 80023fe:	e9c7 0100 	strd	r0, r1, [r7]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 8002402:	4b35      	ldr	r3, [pc, #212]	@ (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002404:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f89e 	bl	8000548 <__aeabi_f2d>
 800240c:	4682      	mov	sl, r0
 800240e:	468b      	mov	fp, r1
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 8002410:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002412:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f897 	bl	8000548 <__aeabi_f2d>
 800241a:	4680      	mov	r8, r0
 800241c:	4689      	mov	r9, r1
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 800241e:	4b2e      	ldr	r3, [pc, #184]	@ (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002420:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f890 	bl	8000548 <__aeabi_f2d>
 8002428:	4604      	mov	r4, r0
 800242a:	460d      	mov	r5, r1
 800242c:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002434:	fb03 f602 	mul.w	r6, r3, r2
 8002438:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f883 	bl	8000548 <__aeabi_f2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800244a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 800244e:	9614      	str	r6, [sp, #80]	@ 0x50
 8002450:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8002454:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8002458:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 800245c:	ed97 7b00 	vldr	d7, [r7]
 8002460:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002464:	ed97 7b02 	vldr	d7, [r7, #8]
 8002468:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800246c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002470:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002474:	69f9      	ldr	r1, [r7, #28]
 8002476:	9106      	str	r1, [sp, #24]
 8002478:	ed97 7b08 	vldr	d7, [r7, #32]
 800247c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002480:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002484:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002488:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800248c:	ed8d 7b00 	vstr	d7, [sp]
 8002490:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002492:	4919      	ldr	r1, [pc, #100]	@ (80024f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002494:	f009 fd6a 	bl	800bf6c <siprintf>
		CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff));
 8002498:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd fee7 	bl	8000270 <strlen>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f008 fbe7 	bl	800ac80 <CDC_Transmit_FS>


	}
}
 80024b2:	bf00      	nop
 80024b4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024be:	bf00      	nop
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40000000 	.word	0x40000000
 80024c8:	200004cc 	.word	0x200004cc
 80024cc:	2000058c 	.word	0x2000058c
 80024d0:	200005a8 	.word	0x200005a8
 80024d4:	20000000 	.word	0x20000000
 80024d8:	200005b4 	.word	0x200005b4
 80024dc:	3f666666 	.word	0x3f666666
 80024e0:	20000590 	.word	0x20000590
 80024e4:	200005c0 	.word	0x200005c0
 80024e8:	200005a0 	.word	0x200005a0
 80024ec:	40000400 	.word	0x40000400
 80024f0:	2000059c 	.word	0x2000059c
 80024f4:	200005a4 	.word	0x200005a4
 80024f8:	080107c0 	.word	0x080107c0

080024fc <Take_IMU_Measurements>:


/// Function to insert IMU measurements from memory to memory (data is adjusted)
void Take_IMU_Measurements(BMI088 *imu)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	measureTick = HAL_GetTick();		// Timestamp when data is taken from memory to memory (not from BMI088 to memory!)
 8002504:	f000 fe28 	bl	8003158 <HAL_GetTick>
 8002508:	4603      	mov	r3, r0
 800250a:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <Take_IMU_Measurements+0x5c>)
 800250c:	6013      	str	r3, [r2, #0]
	acc[2] = imu->acc_mps2[2];
	gyr[0] = imu->gyr_rps[0];
	gyr[1] = imu->gyr_rps[1];
	gyr[2] = imu->gyr_rps[2];*/

	gyr.y = -imu->gyr_rps[0];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002514:	eef1 7a67 	vneg.f32	s15, s15
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <Take_IMU_Measurements+0x60>)
 800251a:	edc3 7a01 	vstr	s15, [r3, #4]
	gyr.x = imu->gyr_rps[1];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002522:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <Take_IMU_Measurements+0x60>)
 8002524:	6013      	str	r3, [r2, #0]
	gyr.z = imu->gyr_rps[2];
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252a:	4a0c      	ldr	r2, [pc, #48]	@ (800255c <Take_IMU_Measurements+0x60>)
 800252c:	6093      	str	r3, [r2, #8]
	acc.y = -imu->acc_mps2[0];
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002534:	eef1 7a67 	vneg.f32	s15, s15
 8002538:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <Take_IMU_Measurements+0x64>)
 800253a:	edc3 7a01 	vstr	s15, [r3, #4]
	acc.x = imu->acc_mps2[1];
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002542:	4a07      	ldr	r2, [pc, #28]	@ (8002560 <Take_IMU_Measurements+0x64>)
 8002544:	6013      	str	r3, [r2, #0]
	acc.z = imu->acc_mps2[2];
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <Take_IMU_Measurements+0x64>)
 800254c:	6093      	str	r3, [r2, #8]

}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200005a4 	.word	0x200005a4
 800255c:	200005a8 	.word	0x200005a8
 8002560:	200005b4 	.word	0x200005b4

08002564 <Toggle>:

/// Function that toggles the led of the board to show if the device is working
void Toggle(uint32_t waitingTime)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= waitingTime)
 800256c:	f000 fdf4 	bl	8003158 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <Toggle+0x40>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	d808      	bhi.n	8002590 <Toggle+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800257e:	2110      	movs	r1, #16
 8002580:	4809      	ldr	r0, [pc, #36]	@ (80025a8 <Toggle+0x44>)
 8002582:	f001 fc72 	bl	8003e6a <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 8002586:	f000 fde7 	bl	8003158 <HAL_GetTick>
 800258a:	4603      	mov	r3, r0
 800258c:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <Toggle+0x40>)
 800258e:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 8002590:	f000 fde2 	bl	8003158 <HAL_GetTick>
 8002594:	4603      	mov	r3, r0
 8002596:	4a05      	ldr	r2, [pc, #20]	@ (80025ac <Toggle+0x48>)
 8002598:	6013      	str	r3, [r2, #0]
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200005c8 	.word	0x200005c8
 80025a8:	40020400 	.word	0x40020400
 80025ac:	200005c4 	.word	0x200005c4

080025b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b6:	f000 fd69 	bl	800308c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ba:	f000 f887 	bl	80026cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025be:	f000 fa03 	bl	80029c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80025c2:	f000 f9d9 	bl	8002978 <MX_DMA_Init>
  MX_SPI1_Init();
 80025c6:	f000 f8eb 	bl	80027a0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80025ca:	f000 f91f 	bl	800280c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80025ce:	f008 fa99 	bl	800ab04 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80025d2:	f000 f983 	bl	80028dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /*.... Priorities ....................*/
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80025d6:	2005      	movs	r0, #5
 80025d8:	f000 febe 	bl	8003358 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	2038      	movs	r0, #56	@ 0x38
 80025e2:	f000 fec4 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 1);
 80025e6:	2201      	movs	r2, #1
 80025e8:	2100      	movs	r1, #0
 80025ea:	203b      	movs	r0, #59	@ 0x3b
 80025ec:	f000 febf 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2101      	movs	r1, #1
 80025f4:	2008      	movs	r0, #8
 80025f6:	f000 feba 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 80025fa:	2201      	movs	r2, #1
 80025fc:	2101      	movs	r1, #1
 80025fe:	2009      	movs	r0, #9
 8002600:	f000 feb5 	bl	800336e <HAL_NVIC_SetPriority>

  /*....................................*/
  HAL_Delay(1000);
 8002604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002608:	f000 fdb2 	bl	8003170 <HAL_Delay>


  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 800260c:	2310      	movs	r3, #16
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <main+0xe4>)
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2310      	movs	r3, #16
 8002616:	4a20      	ldr	r2, [pc, #128]	@ (8002698 <main+0xe8>)
 8002618:	4920      	ldr	r1, [pc, #128]	@ (800269c <main+0xec>)
 800261a:	4821      	ldr	r0, [pc, #132]	@ (80026a0 <main+0xf0>)
 800261c:	f7fe fc8c 	bl	8000f38 <BMI088_Init>
  EKF_CalculateGyroBias(&imu, 500);
 8002620:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002624:	481e      	ldr	r0, [pc, #120]	@ (80026a0 <main+0xf0>)
 8002626:	f7ff fba7 	bl	8001d78 <EKF_CalculateGyroBias>
  SetQuaternionFromEuler(&q, 0, 0, 0);				// Angles on the starting position: roll=0, pitch=0, yaw=0
 800262a:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 80026a4 <main+0xf4>
 800262e:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80026a4 <main+0xf4>
 8002632:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80026a4 <main+0xf4>
 8002636:	481c      	ldr	r0, [pc, #112]	@ (80026a8 <main+0xf8>)
 8002638:	f7fe ffb6 	bl	80015a8 <SetQuaternionFromEuler>
  Filter_Init(&filt, f_LP_gyr, f_LP_acc, f_HP_gyr, f_HP_acc, T_TIM2);
 800263c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <main+0xfc>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <main+0x100>)
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <main+0x104>)
 800264a:	edd3 6a00 	vldr	s13, [r3]
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <main+0x108>)
 8002650:	ed93 6a00 	vldr	s12, [r3]
 8002654:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <main+0x10c>)
 8002656:	edd3 5a00 	vldr	s11, [r3]
 800265a:	eeb0 2a65 	vmov.f32	s4, s11
 800265e:	eef0 1a46 	vmov.f32	s3, s12
 8002662:	eeb0 1a66 	vmov.f32	s2, s13
 8002666:	eef0 0a47 	vmov.f32	s1, s14
 800266a:	eeb0 0a67 	vmov.f32	s0, s15
 800266e:	4814      	ldr	r0, [pc, #80]	@ (80026c0 <main+0x110>)
 8002670:	f7ff fbdc 	bl	8001e2c <Filter_Init>

  HAL_Delay(1000);
 8002674:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002678:	f000 fd7a 	bl	8003170 <HAL_Delay>
  /* ----- START TIMERS ------------------------------------------------------- */
  HAL_TIM_Base_Start_IT(&htim2);   // Start timer: calculation of the algorithm
 800267c:	4811      	ldr	r0, [pc, #68]	@ (80026c4 <main+0x114>)
 800267e:	f004 fb01 	bl	8006c84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);   // Start timer: send data with CDC_Transmit_FS serial interface
 8002682:	4811      	ldr	r0, [pc, #68]	@ (80026c8 <main+0x118>)
 8002684:	f004 fafe 	bl	8006c84 <HAL_TIM_Base_Start_IT>

  while (1)
  {

	  //Debug_SPI_DMA();
	  Toggle(SAMPLE_TIME_MS_TOGGLE);
 8002688:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800268c:	f7ff ff6a 	bl	8002564 <Toggle>
 8002690:	e7fa      	b.n	8002688 <main+0xd8>
 8002692:	bf00      	nop
 8002694:	40020800 	.word	0x40020800
 8002698:	40020000 	.word	0x40020000
 800269c:	20000324 	.word	0x20000324
 80026a0:	200004cc 	.word	0x200004cc
 80026a4:	00000000 	.word	0x00000000
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000010 	.word	0x20000010
 80026b0:	20000014 	.word	0x20000014
 80026b4:	20000018 	.word	0x20000018
 80026b8:	2000001c 	.word	0x2000001c
 80026bc:	2000058c 	.word	0x2000058c
 80026c0:	2000051c 	.word	0x2000051c
 80026c4:	2000043c 	.word	0x2000043c
 80026c8:	20000484 	.word	0x20000484

080026cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b094      	sub	sp, #80	@ 0x50
 80026d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	2230      	movs	r2, #48	@ 0x30
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f009 fca9 	bl	800c032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <SystemClock_Config+0xcc>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	4a27      	ldr	r2, [pc, #156]	@ (8002798 <SystemClock_Config+0xcc>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002700:	4b25      	ldr	r3, [pc, #148]	@ (8002798 <SystemClock_Config+0xcc>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	2300      	movs	r3, #0
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	4b22      	ldr	r3, [pc, #136]	@ (800279c <SystemClock_Config+0xd0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a21      	ldr	r2, [pc, #132]	@ (800279c <SystemClock_Config+0xd0>)
 8002716:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <SystemClock_Config+0xd0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002728:	2301      	movs	r3, #1
 800272a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800272c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002732:	2302      	movs	r3, #2
 8002734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800273a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800273c:	2308      	movs	r3, #8
 800273e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002740:	23a8      	movs	r3, #168	@ 0xa8
 8002742:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002744:	2302      	movs	r3, #2
 8002746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002748:	2307      	movs	r3, #7
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fe0f 	bl	8005374 <HAL_RCC_OscConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800275c:	f000 f9da 	bl	8002b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002760:	230f      	movs	r3, #15
 8002762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002764:	2302      	movs	r3, #2
 8002766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800276c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	2105      	movs	r1, #5
 800277e:	4618      	mov	r0, r3
 8002780:	f003 f870 	bl	8005864 <HAL_RCC_ClockConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800278a:	f000 f9c3 	bl	8002b14 <Error_Handler>
  }
}
 800278e:	bf00      	nop
 8002790:	3750      	adds	r7, #80	@ 0x50
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40007000 	.word	0x40007000

080027a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027a4:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027a6:	4a18      	ldr	r2, [pc, #96]	@ (8002808 <MX_SPI1_Init+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027aa:	4b16      	ldr	r3, [pc, #88]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027b2:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027d4:	2210      	movs	r2, #16
 80027d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e4:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027ec:	220a      	movs	r2, #10
 80027ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027f0:	4804      	ldr	r0, [pc, #16]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027f2:	f003 fa2d 	bl	8005c50 <HAL_SPI_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027fc:	f000 f98a 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000324 	.word	0x20000324
 8002808:	40013000 	.word	0x40013000

0800280c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002820:	463b      	mov	r3, r7
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002828:	4b29      	ldr	r3, [pc, #164]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 800282a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800282e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8002830:	4b27      	ldr	r3, [pc, #156]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 8002832:	2229      	movs	r2, #41	@ 0x29
 8002834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002836:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800283c:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 800283e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	4b22      	ldr	r3, [pc, #136]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284a:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002850:	481f      	ldr	r0, [pc, #124]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 8002852:	f004 f9c7 	bl	8006be4 <HAL_TIM_Base_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800285c:	f000 f95a 	bl	8002b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4619      	mov	r1, r3
 800286c:	4818      	ldr	r0, [pc, #96]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 800286e:	f004 fb69 	bl	8006f44 <HAL_TIM_ConfigClockSource>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002878:	f000 f94c 	bl	8002b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002884:	463b      	mov	r3, r7
 8002886:	4619      	mov	r1, r3
 8002888:	4811      	ldr	r0, [pc, #68]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 800288a:	f004 fd91 	bl	80073b0 <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002894:	f000 f93e 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

	T_TIM2 = 1.0f / (f_CK / (float)((htim2.Init.Period +1 ) * htim2.Init.Prescaler + 1));
 8002898:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80028d4 <MX_TIM2_Init+0xc8>
 800289c:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	3301      	adds	r3, #1
 80028a2:	4a0b      	ldr	r2, [pc, #44]	@ (80028d0 <MX_TIM2_Init+0xc4>)
 80028a4:	6852      	ldr	r2, [r2, #4]
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <MX_TIM2_Init+0xcc>)
 80028c2:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM2_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000043c 	.word	0x2000043c
 80028d4:	4ca037a0 	.word	0x4ca037a0
 80028d8:	2000058c 	.word	0x2000058c

080028dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f0:	463b      	mov	r3, r7
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <MX_TIM3_Init+0x94>)
 80028fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002974 <MX_TIM3_Init+0x98>)
 80028fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80028fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <MX_TIM3_Init+0x94>)
 8002900:	2229      	movs	r2, #41	@ 0x29
 8002902:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002904:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <MX_TIM3_Init+0x94>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800290a:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <MX_TIM3_Init+0x94>)
 800290c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002910:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002912:	4b17      	ldr	r3, [pc, #92]	@ (8002970 <MX_TIM3_Init+0x94>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <MX_TIM3_Init+0x94>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800291e:	4814      	ldr	r0, [pc, #80]	@ (8002970 <MX_TIM3_Init+0x94>)
 8002920:	f004 f960 	bl	8006be4 <HAL_TIM_Base_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800292a:	f000 f8f3 	bl	8002b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800292e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002934:	f107 0308 	add.w	r3, r7, #8
 8002938:	4619      	mov	r1, r3
 800293a:	480d      	ldr	r0, [pc, #52]	@ (8002970 <MX_TIM3_Init+0x94>)
 800293c:	f004 fb02 	bl	8006f44 <HAL_TIM_ConfigClockSource>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002946:	f000 f8e5 	bl	8002b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002952:	463b      	mov	r3, r7
 8002954:	4619      	mov	r1, r3
 8002956:	4806      	ldr	r0, [pc, #24]	@ (8002970 <MX_TIM3_Init+0x94>)
 8002958:	f004 fd2a 	bl	80073b0 <HAL_TIMEx_MasterConfigSynchronization>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002962:	f000 f8d7 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000484 	.word	0x20000484
 8002974:	40000400 	.word	0x40000400

08002978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <MX_DMA_Init+0x4c>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a0f      	ldr	r2, [pc, #60]	@ (80029c4 <MX_DMA_Init+0x4c>)
 8002988:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b0d      	ldr	r3, [pc, #52]	@ (80029c4 <MX_DMA_Init+0x4c>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	2038      	movs	r0, #56	@ 0x38
 80029a0:	f000 fce5 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029a4:	2038      	movs	r0, #56	@ 0x38
 80029a6:	f000 fcfe 	bl	80033a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 1);
 80029aa:	2201      	movs	r2, #1
 80029ac:	2100      	movs	r1, #0
 80029ae:	203b      	movs	r0, #59	@ 0x3b
 80029b0:	f000 fcdd 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80029b4:	203b      	movs	r0, #59	@ 0x3b
 80029b6:	f000 fcf6 	bl	80033a6 <HAL_NVIC_EnableIRQ>

}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b48      	ldr	r3, [pc, #288]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a47      	ldr	r2, [pc, #284]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 80029e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b45      	ldr	r3, [pc, #276]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b41      	ldr	r3, [pc, #260]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a40      	ldr	r2, [pc, #256]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a39      	ldr	r2, [pc, #228]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b37      	ldr	r3, [pc, #220]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a32      	ldr	r2, [pc, #200]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b30      	ldr	r3, [pc, #192]	@ (8002b04 <MX_GPIO_Init+0x13c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2110      	movs	r1, #16
 8002a52:	482d      	ldr	r0, [pc, #180]	@ (8002b08 <MX_GPIO_Init+0x140>)
 8002a54:	f001 f9f0 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	482b      	ldr	r0, [pc, #172]	@ (8002b0c <MX_GPIO_Init+0x144>)
 8002a5e:	f001 f9eb 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2110      	movs	r1, #16
 8002a66:	482a      	ldr	r0, [pc, #168]	@ (8002b10 <MX_GPIO_Init+0x148>)
 8002a68:	f001 f9e6 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8002a6c:	230c      	movs	r3, #12
 8002a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4822      	ldr	r0, [pc, #136]	@ (8002b0c <MX_GPIO_Init+0x144>)
 8002a82:	f001 f83d 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8002a86:	2310      	movs	r3, #16
 8002a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481a      	ldr	r0, [pc, #104]	@ (8002b08 <MX_GPIO_Init+0x140>)
 8002a9e:	f001 f82f 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4814      	ldr	r0, [pc, #80]	@ (8002b0c <MX_GPIO_Init+0x144>)
 8002aba:	f001 f821 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002abe:	2310      	movs	r3, #16
 8002ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480e      	ldr	r0, [pc, #56]	@ (8002b10 <MX_GPIO_Init+0x148>)
 8002ad6:	f001 f813 	bl	8003b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2101      	movs	r1, #1
 8002ade:	2008      	movs	r0, #8
 8002ae0:	f000 fc45 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002ae4:	2008      	movs	r0, #8
 8002ae6:	f000 fc5e 	bl	80033a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 8002aea:	2201      	movs	r2, #1
 8002aec:	2101      	movs	r1, #1
 8002aee:	2009      	movs	r0, #9
 8002af0:	f000 fc3d 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002af4:	2009      	movs	r0, #9
 8002af6:	f000 fc56 	bl	80033a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	@ 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020800 	.word	0x40020800
 8002b10:	40020400 	.word	0x40020400

08002b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b0a0      	sub	sp, #128	@ 0x80
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	char txBuff[128];
	sprintf(txBuff, "SPI Error!");
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	490b      	ldr	r1, [pc, #44]	@ (8002b4c <Error_Handler+0x38>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f009 fa24 	bl	800bf6c <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 8002b24:	bf00      	nop
 8002b26:	463b      	mov	r3, r7
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fba1 	bl	8000270 <strlen>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	463b      	mov	r3, r7
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f008 f8a2 	bl	800ac80 <CDC_Transmit_FS>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d0f1      	beq.n	8002b26 <Error_Handler+0x12>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b42:	b672      	cpsid	i
}
 8002b44:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b46:	bf00      	nop
 8002b48:	e7fd      	b.n	8002b46 <Error_Handler+0x32>
 8002b4a:	bf00      	nop
 8002b4c:	08010814 	.word	0x08010814

08002b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800

08002ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf0 <HAL_SPI_MspInit+0x150>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	f040 8092 	bne.w	8002ce8 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf4 <HAL_SPI_MspInit+0x154>)
 8002bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bcc:	4a49      	ldr	r2, [pc, #292]	@ (8002cf4 <HAL_SPI_MspInit+0x154>)
 8002bce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bd4:	4b47      	ldr	r3, [pc, #284]	@ (8002cf4 <HAL_SPI_MspInit+0x154>)
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <HAL_SPI_MspInit+0x154>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	4a42      	ldr	r2, [pc, #264]	@ (8002cf4 <HAL_SPI_MspInit+0x154>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf0:	4b40      	ldr	r3, [pc, #256]	@ (8002cf4 <HAL_SPI_MspInit+0x154>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bfc:	23e0      	movs	r3, #224	@ 0xe0
 8002bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c0c:	2305      	movs	r3, #5
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4619      	mov	r1, r3
 8002c16:	4838      	ldr	r0, [pc, #224]	@ (8002cf8 <HAL_SPI_MspInit+0x158>)
 8002c18:	f000 ff72 	bl	8003b00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002c1c:	4b37      	ldr	r3, [pc, #220]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c1e:	4a38      	ldr	r2, [pc, #224]	@ (8002d00 <HAL_SPI_MspInit+0x160>)
 8002c20:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002c22:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c24:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002c28:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c2a:	4b34      	ldr	r3, [pc, #208]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c30:	4b32      	ldr	r3, [pc, #200]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c36:	4b31      	ldr	r3, [pc, #196]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c3c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c44:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c50:	4b2a      	ldr	r3, [pc, #168]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c56:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c58:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002c5e:	4827      	ldr	r0, [pc, #156]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c60:	f000 fbbc 	bl	80033dc <HAL_DMA_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8002c6a:	f7ff ff53 	bl	8002b14 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a22      	ldr	r2, [pc, #136]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c72:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002c74:	4a21      	ldr	r2, [pc, #132]	@ (8002cfc <HAL_SPI_MspInit+0x15c>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002c7a:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002c7c:	4a22      	ldr	r2, [pc, #136]	@ (8002d08 <HAL_SPI_MspInit+0x168>)
 8002c7e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002c80:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002c82:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002c86:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002c8a:	2240      	movs	r2, #64	@ 0x40
 8002c8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002c96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c9a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca2:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002cb0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cb4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002cbc:	4811      	ldr	r0, [pc, #68]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002cbe:	f000 fb8d 	bl	80033dc <HAL_DMA_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002cc8:	f7ff ff24 	bl	8002b14 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0d      	ldr	r2, [pc, #52]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002cd0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d04 <HAL_SPI_MspInit+0x164>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2023      	movs	r0, #35	@ 0x23
 8002cde:	f000 fb46 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002ce2:	2023      	movs	r0, #35	@ 0x23
 8002ce4:	f000 fb5f 	bl	80033a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ce8:	bf00      	nop
 8002cea:	3728      	adds	r7, #40	@ 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40013000 	.word	0x40013000
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	2000037c 	.word	0x2000037c
 8002d00:	40026410 	.word	0x40026410
 8002d04:	200003dc 	.word	0x200003dc
 8002d08:	40026458 	.word	0x40026458

08002d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1c:	d116      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <HAL_TIM_Base_MspInit+0x80>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <HAL_TIM_Base_MspInit+0x80>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d2e:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_TIM_Base_MspInit+0x80>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	201c      	movs	r0, #28
 8002d40:	f000 fb15 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d44:	201c      	movs	r0, #28
 8002d46:	f000 fb2e 	bl	80033a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d4a:	e01a      	b.n	8002d82 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0f      	ldr	r2, [pc, #60]	@ (8002d90 <HAL_TIM_Base_MspInit+0x84>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d115      	bne.n	8002d82 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <HAL_TIM_Base_MspInit+0x80>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d8c <HAL_TIM_Base_MspInit+0x80>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d66:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_TIM_Base_MspInit+0x80>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	201d      	movs	r0, #29
 8002d78:	f000 faf9 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d7c:	201d      	movs	r0, #29
 8002d7e:	f000 fb12 	bl	80033a6 <HAL_NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40000400 	.word	0x40000400

08002d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <NMI_Handler+0x4>

08002d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <HardFault_Handler+0x4>

08002da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <MemManage_Handler+0x4>

08002dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <BusFault_Handler+0x4>

08002db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <UsageFault_Handler+0x4>

08002dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dea:	f000 f9a1 	bl	8003130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8002df6:	2004      	movs	r0, #4
 8002df8:	f001 f852 	bl	8003ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8002e04:	2008      	movs	r0, #8
 8002e06:	f001 f84b 	bl	8003ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <TIM2_IRQHandler+0x10>)
 8002e16:	f003 ffa5 	bl	8006d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000043c 	.word	0x2000043c

08002e24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e28:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <TIM3_IRQHandler+0x10>)
 8002e2a:	f003 ff9b 	bl	8006d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000484 	.word	0x20000484

08002e38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002e3c:	4802      	ldr	r0, [pc, #8]	@ (8002e48 <SPI1_IRQHandler+0x10>)
 8002e3e:	f003 fb79 	bl	8006534 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000324 	.word	0x20000324

08002e4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002e50:	4802      	ldr	r0, [pc, #8]	@ (8002e5c <DMA2_Stream0_IRQHandler+0x10>)
 8002e52:	f000 fbeb 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000037c 	.word	0x2000037c

08002e60 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e64:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <DMA2_Stream3_IRQHandler+0x10>)
 8002e66:	f000 fbe1 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200003dc 	.word	0x200003dc

08002e74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e78:	4802      	ldr	r0, [pc, #8]	@ (8002e84 <OTG_FS_IRQHandler+0x10>)
 8002e7a:	f001 f96d 	bl	8004158 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20001ab4 	.word	0x20001ab4

08002e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return 1;
 8002e8c:	2301      	movs	r3, #1
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_kill>:

int _kill(int pid, int sig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ea2:	f009 f919 	bl	800c0d8 <__errno>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2216      	movs	r2, #22
 8002eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_exit>:

void _exit (int status)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ffe7 	bl	8002e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eca:	bf00      	nop
 8002ecc:	e7fd      	b.n	8002eca <_exit+0x12>

08002ece <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e00a      	b.n	8002ef6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ee0:	f3af 8000 	nop.w
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	60ba      	str	r2, [r7, #8]
 8002eec:	b2ca      	uxtb	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	dbf0      	blt.n	8002ee0 <_read+0x12>
  }

  return len;
 8002efe:	687b      	ldr	r3, [r7, #4]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e009      	b.n	8002f2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	60ba      	str	r2, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	dbf1      	blt.n	8002f1a <_write+0x12>
  }
  return len;
 8002f36:	687b      	ldr	r3, [r7, #4]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_close>:

int _close(int file)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f68:	605a      	str	r2, [r3, #4]
  return 0;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_isatty>:

int _isatty(int file)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f80:	2301      	movs	r3, #1
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb0:	4a14      	ldr	r2, [pc, #80]	@ (8003004 <_sbrk+0x5c>)
 8002fb2:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <_sbrk+0x60>)
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fbc:	4b13      	ldr	r3, [pc, #76]	@ (800300c <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc4:	4b11      	ldr	r3, [pc, #68]	@ (800300c <_sbrk+0x64>)
 8002fc6:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <_sbrk+0x68>)
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <_sbrk+0x64>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d207      	bcs.n	8002fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd8:	f009 f87e 	bl	800c0d8 <__errno>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	220c      	movs	r2, #12
 8002fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	e009      	b.n	8002ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe8:	4b08      	ldr	r3, [pc, #32]	@ (800300c <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fee:	4b07      	ldr	r3, [pc, #28]	@ (800300c <_sbrk+0x64>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4a05      	ldr	r2, [pc, #20]	@ (800300c <_sbrk+0x64>)
 8002ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20020000 	.word	0x20020000
 8003008:	00000400 	.word	0x00000400
 800300c:	200005cc 	.word	0x200005cc
 8003010:	20002308 	.word	0x20002308

08003014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <SystemInit+0x20>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	4a05      	ldr	r2, [pc, #20]	@ (8003034 <SystemInit+0x20>)
 8003020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003038:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003070 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800303c:	f7ff ffea 	bl	8003014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003040:	480c      	ldr	r0, [pc, #48]	@ (8003074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003042:	490d      	ldr	r1, [pc, #52]	@ (8003078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003044:	4a0d      	ldr	r2, [pc, #52]	@ (800307c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003048:	e002      	b.n	8003050 <LoopCopyDataInit>

0800304a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800304c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800304e:	3304      	adds	r3, #4

08003050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003054:	d3f9      	bcc.n	800304a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003056:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003058:	4c0a      	ldr	r4, [pc, #40]	@ (8003084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800305c:	e001      	b.n	8003062 <LoopFillZerobss>

0800305e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800305e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003060:	3204      	adds	r2, #4

08003062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003064:	d3fb      	bcc.n	800305e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003066:	f009 f83d 	bl	800c0e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306a:	f7ff faa1 	bl	80025b0 <main>
  bx  lr    
 800306e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003078:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 800307c:	08011088 	.word	0x08011088
  ldr r2, =_sbss
 8003080:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8003084:	20002304 	.word	0x20002304

08003088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003088:	e7fe      	b.n	8003088 <ADC_IRQHandler>
	...

0800308c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003090:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0d      	ldr	r2, [pc, #52]	@ (80030cc <HAL_Init+0x40>)
 8003096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800309a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <HAL_Init+0x40>)
 80030a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <HAL_Init+0x40>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b4:	2003      	movs	r0, #3
 80030b6:	f000 f94f 	bl	8003358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ba:	200f      	movs	r0, #15
 80030bc:	f000 f808 	bl	80030d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c0:	f7ff fd46 	bl	8002b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023c00 	.word	0x40023c00

080030d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d8:	4b12      	ldr	r3, [pc, #72]	@ (8003124 <HAL_InitTick+0x54>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_InitTick+0x58>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f967 	bl	80033c2 <HAL_SYSTICK_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00e      	b.n	800311c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b0f      	cmp	r3, #15
 8003102:	d80a      	bhi.n	800311a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003104:	2200      	movs	r2, #0
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f000 f92f 	bl	800336e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003110:	4a06      	ldr	r2, [pc, #24]	@ (800312c <HAL_InitTick+0x5c>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000020 	.word	0x20000020
 8003128:	20000028 	.word	0x20000028
 800312c:	20000024 	.word	0x20000024

08003130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_IncTick+0x20>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_IncTick+0x24>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4413      	add	r3, r2
 8003140:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <HAL_IncTick+0x24>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000028 	.word	0x20000028
 8003154:	200005d0 	.word	0x200005d0

08003158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return uwTick;
 800315c:	4b03      	ldr	r3, [pc, #12]	@ (800316c <HAL_GetTick+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	200005d0 	.word	0x200005d0

08003170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff ffee 	bl	8003158 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d005      	beq.n	8003196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318a:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <HAL_Delay+0x44>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003196:	bf00      	nop
 8003198:	f7ff ffde 	bl	8003158 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d8f7      	bhi.n	8003198 <HAL_Delay+0x28>
  {
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000028 	.word	0x20000028

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4907      	ldr	r1, [pc, #28]	@ (8003254 <__NVIC_EnableIRQ+0x38>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	2b00      	cmp	r3, #0
 800326a:	db0a      	blt.n	8003282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	490c      	ldr	r1, [pc, #48]	@ (80032a4 <__NVIC_SetPriority+0x4c>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003280:	e00a      	b.n	8003298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4908      	ldr	r1, [pc, #32]	@ (80032a8 <__NVIC_SetPriority+0x50>)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3b04      	subs	r3, #4
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	440b      	add	r3, r1
 8003296:	761a      	strb	r2, [r3, #24]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf28      	it	cs
 80032ca:	2304      	movcs	r3, #4
 80032cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d902      	bls.n	80032dc <NVIC_EncodePriority+0x30>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3b03      	subs	r3, #3
 80032da:	e000      	b.n	80032de <NVIC_EncodePriority+0x32>
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	401a      	ands	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f4:	f04f 31ff 	mov.w	r1, #4294967295
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43d9      	mvns	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	4313      	orrs	r3, r2
         );
}
 8003306:	4618      	mov	r0, r3
 8003308:	3724      	adds	r7, #36	@ 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003324:	d301      	bcc.n	800332a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003326:	2301      	movs	r3, #1
 8003328:	e00f      	b.n	800334a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332a:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <SysTick_Config+0x40>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003332:	210f      	movs	r1, #15
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f7ff ff8e 	bl	8003258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <SysTick_Config+0x40>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003342:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <SysTick_Config+0x40>)
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	e000e010 	.word	0xe000e010

08003358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff29 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003380:	f7ff ff3e 	bl	8003200 <__NVIC_GetPriorityGrouping>
 8003384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff ff8e 	bl	80032ac <NVIC_EncodePriority>
 8003390:	4602      	mov	r2, r0
 8003392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff5d 	bl	8003258 <__NVIC_SetPriority>
}
 800339e:	bf00      	nop
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff31 	bl	800321c <__NVIC_EnableIRQ>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ffa2 	bl	8003314 <SysTick_Config>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7ff feb6 	bl	8003158 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e099      	b.n	800352c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003418:	e00f      	b.n	800343a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341a:	f7ff fe9d 	bl	8003158 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b05      	cmp	r3, #5
 8003426:	d908      	bls.n	800343a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2203      	movs	r2, #3
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e078      	b.n	800352c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e8      	bne.n	800341a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4b38      	ldr	r3, [pc, #224]	@ (8003534 <HAL_DMA_Init+0x158>)
 8003454:	4013      	ands	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	2b04      	cmp	r3, #4
 8003492:	d107      	bne.n	80034a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	4313      	orrs	r3, r2
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d117      	bne.n	80034fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fa91 	bl	8003a08 <DMA_CheckFifoParam>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2240      	movs	r2, #64	@ 0x40
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80034fa:	2301      	movs	r3, #1
 80034fc:	e016      	b.n	800352c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa48 	bl	800399c <DMA_CalcBaseAndBitshift>
 800350c:	4603      	mov	r3, r0
 800350e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003514:	223f      	movs	r2, #63	@ 0x3f
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	f010803f 	.word	0xf010803f

08003538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_DMA_Start_IT+0x26>
 800355a:	2302      	movs	r3, #2
 800355c:	e040      	b.n	80035e0 <HAL_DMA_Start_IT+0xa8>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d12f      	bne.n	80035d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f9da 	bl	8003940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003590:	223f      	movs	r2, #63	@ 0x3f
 8003592:	409a      	lsls	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0216 	orr.w	r2, r2, #22
 80035a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0208 	orr.w	r2, r2, #8
 80035be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e005      	b.n	80035de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035da:	2302      	movs	r3, #2
 80035dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d004      	beq.n	8003606 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00c      	b.n	8003620 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003638:	4b8e      	ldr	r3, [pc, #568]	@ (8003874 <HAL_DMA_IRQHandler+0x248>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a8e      	ldr	r2, [pc, #568]	@ (8003878 <HAL_DMA_IRQHandler+0x24c>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	2208      	movs	r2, #8
 8003658:	409a      	lsls	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01a      	beq.n	8003698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0204 	bic.w	r2, r2, #4
 800367e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	2208      	movs	r2, #8
 8003686:	409a      	lsls	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d012      	beq.n	80036ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	2201      	movs	r2, #1
 80036bc:	409a      	lsls	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	2204      	movs	r2, #4
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d012      	beq.n	8003704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f0:	2204      	movs	r2, #4
 80036f2:	409a      	lsls	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	2210      	movs	r2, #16
 800370a:	409a      	lsls	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d043      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03c      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	2210      	movs	r2, #16
 8003728:	409a      	lsls	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d018      	beq.n	800376e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d024      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
 800375a:	e01f      	b.n	800379c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01b      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e016      	b.n	800379c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0208 	bic.w	r2, r2, #8
 800378a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a0:	2220      	movs	r2, #32
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 808f 	beq.w	80038cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8087 	beq.w	80038cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c2:	2220      	movs	r2, #32
 80037c4:	409a      	lsls	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d136      	bne.n	8003844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0216 	bic.w	r2, r2, #22
 80037e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_DMA_IRQHandler+0x1da>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	223f      	movs	r2, #63	@ 0x3f
 800381c:	409a      	lsls	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003836:	2b00      	cmp	r3, #0
 8003838:	d07e      	beq.n	8003938 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
        }
        return;
 8003842:	e079      	b.n	8003938 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01d      	beq.n	800388e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10d      	bne.n	800387c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	2b00      	cmp	r3, #0
 8003866:	d031      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e02c      	b.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
 8003872:	bf00      	nop
 8003874:	20000020 	.word	0x20000020
 8003878:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d023      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
 800388c:	e01e      	b.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10f      	bne.n	80038bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0210 	bic.w	r2, r2, #16
 80038aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d032      	beq.n	800393a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d022      	beq.n	8003926 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2205      	movs	r2, #5
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	d307      	bcc.n	8003914 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f2      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x2cc>
 8003912:	e000      	b.n	8003916 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003914:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
 8003936:	e000      	b.n	800393a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003938:	bf00      	nop
    }
  }
}
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800395c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b40      	cmp	r3, #64	@ 0x40
 800396c:	d108      	bne.n	8003980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397e:	e007      	b.n	8003990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3b10      	subs	r3, #16
 80039ac:	4a14      	ldr	r2, [pc, #80]	@ (8003a00 <DMA_CalcBaseAndBitshift+0x64>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b6:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <DMA_CalcBaseAndBitshift+0x68>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d909      	bls.n	80039de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	659a      	str	r2, [r3, #88]	@ 0x58
 80039dc:	e007      	b.n	80039ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	aaaaaaab 	.word	0xaaaaaaab
 8003a04:	08010878 	.word	0x08010878

08003a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11f      	bne.n	8003a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d856      	bhi.n	8003ad6 <DMA_CheckFifoParam+0xce>
 8003a28:	a201      	add	r2, pc, #4	@ (adr r2, 8003a30 <DMA_CheckFifoParam+0x28>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a53 	.word	0x08003a53
 8003a38:	08003a41 	.word	0x08003a41
 8003a3c:	08003ad7 	.word	0x08003ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d046      	beq.n	8003ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e043      	b.n	8003ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a5a:	d140      	bne.n	8003ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e03d      	b.n	8003ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6a:	d121      	bne.n	8003ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d837      	bhi.n	8003ae2 <DMA_CheckFifoParam+0xda>
 8003a72:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <DMA_CheckFifoParam+0x70>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a8f 	.word	0x08003a8f
 8003a80:	08003a89 	.word	0x08003a89
 8003a84:	08003aa1 	.word	0x08003aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e030      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d025      	beq.n	8003ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e022      	b.n	8003ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aa8:	d11f      	bne.n	8003aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aae:	e01c      	b.n	8003aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d903      	bls.n	8003abe <DMA_CheckFifoParam+0xb6>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d003      	beq.n	8003ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003abc:	e018      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac2:	e015      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00e      	beq.n	8003aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e00b      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e00a      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e008      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e006      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
    }
  } 
  
  return status; 
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	@ 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e16b      	b.n	8003df4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f040 815a 	bne.w	8003dee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d005      	beq.n	8003b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d130      	bne.n	8003bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b88:	2201      	movs	r2, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 0201 	and.w	r2, r3, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d017      	beq.n	8003bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d123      	bne.n	8003c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	08da      	lsrs	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3208      	adds	r2, #8
 8003c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	220f      	movs	r2, #15
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	08da      	lsrs	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3208      	adds	r2, #8
 8003c3e:	69b9      	ldr	r1, [r7, #24]
 8003c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0203 	and.w	r2, r3, #3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80b4 	beq.w	8003dee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b60      	ldr	r3, [pc, #384]	@ (8003e0c <HAL_GPIO_Init+0x30c>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	4a5f      	ldr	r2, [pc, #380]	@ (8003e0c <HAL_GPIO_Init+0x30c>)
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c96:	4b5d      	ldr	r3, [pc, #372]	@ (8003e0c <HAL_GPIO_Init+0x30c>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e10 <HAL_GPIO_Init+0x310>)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	3302      	adds	r3, #2
 8003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	220f      	movs	r2, #15
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	@ (8003e14 <HAL_GPIO_Init+0x314>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02b      	beq.n	8003d26 <HAL_GPIO_Init+0x226>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a51      	ldr	r2, [pc, #324]	@ (8003e18 <HAL_GPIO_Init+0x318>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d025      	beq.n	8003d22 <HAL_GPIO_Init+0x222>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a50      	ldr	r2, [pc, #320]	@ (8003e1c <HAL_GPIO_Init+0x31c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01f      	beq.n	8003d1e <HAL_GPIO_Init+0x21e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a4f      	ldr	r2, [pc, #316]	@ (8003e20 <HAL_GPIO_Init+0x320>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d019      	beq.n	8003d1a <HAL_GPIO_Init+0x21a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a4e      	ldr	r2, [pc, #312]	@ (8003e24 <HAL_GPIO_Init+0x324>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_GPIO_Init+0x216>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4d      	ldr	r2, [pc, #308]	@ (8003e28 <HAL_GPIO_Init+0x328>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00d      	beq.n	8003d12 <HAL_GPIO_Init+0x212>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4c      	ldr	r2, [pc, #304]	@ (8003e2c <HAL_GPIO_Init+0x32c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d007      	beq.n	8003d0e <HAL_GPIO_Init+0x20e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4b      	ldr	r2, [pc, #300]	@ (8003e30 <HAL_GPIO_Init+0x330>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_GPIO_Init+0x20a>
 8003d06:	2307      	movs	r3, #7
 8003d08:	e00e      	b.n	8003d28 <HAL_GPIO_Init+0x228>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	e00c      	b.n	8003d28 <HAL_GPIO_Init+0x228>
 8003d0e:	2306      	movs	r3, #6
 8003d10:	e00a      	b.n	8003d28 <HAL_GPIO_Init+0x228>
 8003d12:	2305      	movs	r3, #5
 8003d14:	e008      	b.n	8003d28 <HAL_GPIO_Init+0x228>
 8003d16:	2304      	movs	r3, #4
 8003d18:	e006      	b.n	8003d28 <HAL_GPIO_Init+0x228>
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e004      	b.n	8003d28 <HAL_GPIO_Init+0x228>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_Init+0x228>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_GPIO_Init+0x228>
 8003d26:	2300      	movs	r3, #0
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	f002 0203 	and.w	r2, r2, #3
 8003d2e:	0092      	lsls	r2, r2, #2
 8003d30:	4093      	lsls	r3, r2
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d38:	4935      	ldr	r1, [pc, #212]	@ (8003e10 <HAL_GPIO_Init+0x310>)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d46:	4b3b      	ldr	r3, [pc, #236]	@ (8003e34 <HAL_GPIO_Init+0x334>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d6a:	4a32      	ldr	r2, [pc, #200]	@ (8003e34 <HAL_GPIO_Init+0x334>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d70:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <HAL_GPIO_Init+0x334>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d94:	4a27      	ldr	r2, [pc, #156]	@ (8003e34 <HAL_GPIO_Init+0x334>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d9a:	4b26      	ldr	r3, [pc, #152]	@ (8003e34 <HAL_GPIO_Init+0x334>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003e34 <HAL_GPIO_Init+0x334>)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <HAL_GPIO_Init+0x334>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003de8:	4a12      	ldr	r2, [pc, #72]	@ (8003e34 <HAL_GPIO_Init+0x334>)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3301      	adds	r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b0f      	cmp	r3, #15
 8003df8:	f67f ae90 	bls.w	8003b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3724      	adds	r7, #36	@ 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40013800 	.word	0x40013800
 8003e14:	40020000 	.word	0x40020000
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	40020800 	.word	0x40020800
 8003e20:	40020c00 	.word	0x40020c00
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40021400 	.word	0x40021400
 8003e2c:	40021800 	.word	0x40021800
 8003e30:	40021c00 	.word	0x40021c00
 8003e34:	40013c00 	.word	0x40013c00

08003e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
 8003e44:	4613      	mov	r3, r2
 8003e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e48:	787b      	ldrb	r3, [r7, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e54:	e003      	b.n	8003e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	041a      	lsls	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	619a      	str	r2, [r3, #24]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	460b      	mov	r3, r1
 8003e74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e7c:	887a      	ldrh	r2, [r7, #2]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4013      	ands	r3, r2
 8003e82:	041a      	lsls	r2, r3, #16
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	43d9      	mvns	r1, r3
 8003e88:	887b      	ldrh	r3, [r7, #2]
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	619a      	str	r2, [r3, #24]
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eb6:	4a05      	ldr	r2, [pc, #20]	@ (8003ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe f974 	bl	80021ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40013c00 	.word	0x40013c00

08003ed0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e101      	b.n	80040e6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f007 f807 	bl	800af10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2203      	movs	r2, #3
 8003f06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f10:	d102      	bne.n	8003f18 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 fbee 	bl	80076fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	7c1a      	ldrb	r2, [r3, #16]
 8003f2a:	f88d 2000 	strb.w	r2, [sp]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f32:	f003 facd 	bl	80074d0 <USB_CoreInit>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0ce      	b.n	80040e6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f003 fbe6 	bl	8007720 <USB_SetCurrentMode>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0bf      	b.n	80040e6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	e04a      	b.n	8004002 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f6c:	7bfa      	ldrb	r2, [r7, #15]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	3315      	adds	r3, #21
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3314      	adds	r3, #20
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	b298      	uxth	r0, r3
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	332e      	adds	r3, #46	@ 0x2e
 8003fa8:	4602      	mov	r2, r0
 8003faa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3318      	adds	r3, #24
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	331c      	adds	r3, #28
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3320      	adds	r3, #32
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3324      	adds	r3, #36	@ 0x24
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	3301      	adds	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	791b      	ldrb	r3, [r3, #4]
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	429a      	cmp	r2, r3
 800400a:	d3af      	bcc.n	8003f6c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	e044      	b.n	800409c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	3301      	adds	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	791b      	ldrb	r3, [r3, #4]
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3b5      	bcc.n	8004012 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	7c1a      	ldrb	r2, [r3, #16]
 80040ae:	f88d 2000 	strb.w	r2, [sp]
 80040b2:	3304      	adds	r3, #4
 80040b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040b6:	f003 fb7f 	bl	80077b8 <USB_DevInit>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e00c      	b.n	80040e6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f004 fbc9 	bl	8008876 <USB_DevDisconnect>

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_PCD_Start+0x1c>
 8004106:	2302      	movs	r3, #2
 8004108:	e022      	b.n	8004150 <HAL_PCD_Start+0x62>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f003 fad0 	bl	80076dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f004 fb77 	bl	8008834 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b08d      	sub	sp, #52	@ 0x34
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f004 fc35 	bl	80089de <USB_GetMode>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	f040 848c 	bne.w	8004a94 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f004 fb99 	bl	80088b8 <USB_ReadInterrupts>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8482 	beq.w	8004a92 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f004 fb86 	bl	80088b8 <USB_ReadInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d107      	bne.n	80041c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f002 0202 	and.w	r2, r2, #2
 80041c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f004 fb74 	bl	80088b8 <USB_ReadInterrupts>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d161      	bne.n	800429e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0210 	bic.w	r2, r2, #16
 80041e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f003 020f 	and.w	r2, r3, #15
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4413      	add	r3, r2
 8004206:	3304      	adds	r3, #4
 8004208:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	0c5b      	lsrs	r3, r3, #17
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	2b02      	cmp	r3, #2
 8004214:	d124      	bne.n	8004260 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d035      	beq.n	800428e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800422c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004230:	b29b      	uxth	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	6a38      	ldr	r0, [r7, #32]
 8004236:	f004 f9ab 	bl	8008590 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004246:	441a      	add	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004258:	441a      	add	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	615a      	str	r2, [r3, #20]
 800425e:	e016      	b.n	800428e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	0c5b      	lsrs	r3, r3, #17
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2b06      	cmp	r3, #6
 800426a:	d110      	bne.n	800428e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004272:	2208      	movs	r2, #8
 8004274:	4619      	mov	r1, r3
 8004276:	6a38      	ldr	r0, [r7, #32]
 8004278:	f004 f98a 	bl	8008590 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004288:	441a      	add	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0210 	orr.w	r2, r2, #16
 800429c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 fb08 	bl	80088b8 <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042b2:	f040 80a7 	bne.w	8004404 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 fb0d 	bl	80088de <USB_ReadDevAllOutEpInterrupt>
 80042c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80042c6:	e099      	b.n	80043fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 808e 	beq.w	80043f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	4611      	mov	r1, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 fb31 	bl	8008946 <USB_ReadDevOutEPInterrupt>
 80042e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	2301      	movs	r3, #1
 8004300:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004302:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fea3 	bl	8005050 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004320:	461a      	mov	r2, r3
 8004322:	2308      	movs	r3, #8
 8004324:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004326:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 ff79 	bl	8005220 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	2310      	movs	r3, #16
 8004348:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d030      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435c:	2b80      	cmp	r3, #128	@ 0x80
 800435e:	d109      	bne.n	8004374 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800436e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004372:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	3304      	adds	r3, #4
 8004388:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	78db      	ldrb	r3, [r3, #3]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d108      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	b2db      	uxtb	r3, r3
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f006 febc 	bl	800b11c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b0:	461a      	mov	r2, r3
 80043b2:	2302      	movs	r3, #2
 80043b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	461a      	mov	r2, r3
 80043ce:	2320      	movs	r3, #32
 80043d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d009      	beq.n	80043f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e8:	461a      	mov	r2, r3
 80043ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	3301      	adds	r3, #1
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f47f af62 	bne.w	80042c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f004 fa55 	bl	80088b8 <USB_ReadInterrupts>
 800440e:	4603      	mov	r3, r0
 8004410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004414:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004418:	f040 80db 	bne.w	80045d2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f004 fa76 	bl	8008912 <USB_ReadDevAllInEpInterrupt>
 8004426:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800442c:	e0cd      	b.n	80045ca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80c2 	beq.w	80045be <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f004 fa9c 	bl	8008982 <USB_ReadDevInEPInterrupt>
 800444a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d057      	beq.n	8004506 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	2201      	movs	r2, #1
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	43db      	mvns	r3, r3
 8004470:	69f9      	ldr	r1, [r7, #28]
 8004472:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004476:	4013      	ands	r3, r2
 8004478:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004486:	461a      	mov	r2, r3
 8004488:	2301      	movs	r3, #1
 800448a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	799b      	ldrb	r3, [r3, #6]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d132      	bne.n	80044fa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	3320      	adds	r3, #32
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4403      	add	r3, r0
 80044b4:	331c      	adds	r3, #28
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4419      	add	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4403      	add	r3, r0
 80044c8:	3320      	adds	r3, #32
 80044ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d113      	bne.n	80044fa <HAL_PCD_IRQHandler+0x3a2>
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	3324      	adds	r3, #36	@ 0x24
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044f2:	461a      	mov	r2, r3
 80044f4:	2101      	movs	r1, #1
 80044f6:	f004 faa3 	bl	8008a40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f006 fd86 	bl	800b012 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451c:	461a      	mov	r2, r3
 800451e:	2308      	movs	r3, #8
 8004520:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004538:	461a      	mov	r2, r3
 800453a:	2310      	movs	r3, #16
 800453c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004554:	461a      	mov	r2, r3
 8004556:	2340      	movs	r3, #64	@ 0x40
 8004558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d023      	beq.n	80045ac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004566:	6a38      	ldr	r0, [r7, #32]
 8004568:	f003 fa8a 	bl	8007a80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800456c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456e:	4613      	mov	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	3310      	adds	r3, #16
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	3304      	adds	r3, #4
 800457e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	78db      	ldrb	r3, [r3, #3]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d108      	bne.n	800459a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f006 fdd3 	bl	800b140 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a6:	461a      	mov	r2, r3
 80045a8:	2302      	movs	r3, #2
 80045aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fcbd 	bl	8004f38 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	3301      	adds	r3, #1
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	085b      	lsrs	r3, r3, #1
 80045c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f47f af2e 	bne.w	800442e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f004 f96e 	bl	80088b8 <USB_ReadInterrupts>
 80045dc:	4603      	mov	r3, r0
 80045de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045e6:	d122      	bne.n	800462e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004602:	2b01      	cmp	r3, #1
 8004604:	d108      	bne.n	8004618 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800460e:	2100      	movs	r1, #0
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fea3 	bl	800535c <HAL_PCDEx_LPM_Callback>
 8004616:	e002      	b.n	800461e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f006 fd71 	bl	800b100 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800462c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f004 f940 	bl	80088b8 <USB_ReadInterrupts>
 8004638:	4603      	mov	r3, r0
 800463a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800463e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004642:	d112      	bne.n	800466a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d102      	bne.n	800465a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f006 fd2d 	bl	800b0b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004668:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f004 f922 	bl	80088b8 <USB_ReadInterrupts>
 8004674:	4603      	mov	r3, r0
 8004676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467e:	f040 80b7 	bne.w	80047f0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2110      	movs	r1, #16
 800469c:	4618      	mov	r0, r3
 800469e:	f003 f9ef 	bl	8007a80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a6:	e046      	b.n	8004736 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b4:	461a      	mov	r2, r3
 80046b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e8:	461a      	mov	r2, r3
 80046ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800470a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800470e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800472a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800472e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004732:	3301      	adds	r3, #1
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	791b      	ldrb	r3, [r3, #4]
 800473a:	461a      	mov	r2, r3
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	4293      	cmp	r3, r2
 8004740:	d3b2      	bcc.n	80046a8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004750:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004754:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7bdb      	ldrb	r3, [r3, #15]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800476e:	f043 030b 	orr.w	r3, r3, #11
 8004772:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004784:	f043 030b 	orr.w	r3, r3, #11
 8004788:	6453      	str	r3, [r2, #68]	@ 0x44
 800478a:	e015      	b.n	80047b8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800479a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800479e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80047a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b2:	f043 030b 	orr.w	r3, r3, #11
 80047b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047da:	461a      	mov	r2, r3
 80047dc:	f004 f930 	bl	8008a40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80047ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f004 f85f 	bl	80088b8 <USB_ReadInterrupts>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004804:	d123      	bne.n	800484e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f004 f8f5 	bl	80089fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f003 f9ac 	bl	8007b72 <USB_GetDevSpeed>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681c      	ldr	r4, [r3, #0]
 8004826:	f001 fa07 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 800482a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004830:	461a      	mov	r2, r3
 8004832:	4620      	mov	r0, r4
 8004834:	f002 feb0 	bl	8007598 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f006 fc12 	bl	800b062 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800484c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f004 f830 	bl	80088b8 <USB_ReadInterrupts>
 8004858:	4603      	mov	r3, r0
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d10a      	bne.n	8004878 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f006 fbef 	bl	800b046 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f002 0208 	and.w	r2, r2, #8
 8004876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f004 f81b 	bl	80088b8 <USB_ReadInterrupts>
 8004882:	4603      	mov	r3, r0
 8004884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004888:	2b80      	cmp	r3, #128	@ 0x80
 800488a:	d123      	bne.n	80048d4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004898:	2301      	movs	r3, #1
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
 800489c:	e014      	b.n	80048c8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d105      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb0a 	bl	8004ed6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	3301      	adds	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	791b      	ldrb	r3, [r3, #4]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d3e4      	bcc.n	800489e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f003 ffed 	bl	80088b8 <USB_ReadInterrupts>
 80048de:	4603      	mov	r3, r0
 80048e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048e8:	d13c      	bne.n	8004964 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ea:	2301      	movs	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ee:	e02b      	b.n	8004948 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	3318      	adds	r3, #24
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d115      	bne.n	8004942 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004916:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004918:	2b00      	cmp	r3, #0
 800491a:	da12      	bge.n	8004942 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004920:	4613      	mov	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	3317      	adds	r3, #23
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 faca 	bl	8004ed6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	3301      	adds	r3, #1
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	791b      	ldrb	r3, [r3, #4]
 800494c:	461a      	mov	r2, r3
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	4293      	cmp	r3, r2
 8004952:	d3cd      	bcc.n	80048f0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f003 ffa5 	bl	80088b8 <USB_ReadInterrupts>
 800496e:	4603      	mov	r3, r0
 8004970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004974:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004978:	d156      	bne.n	8004a28 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800497a:	2301      	movs	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
 800497e:	e045      	b.n	8004a0c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d12e      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da2b      	bge.n	8004a06 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80049ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049be:	429a      	cmp	r2, r3
 80049c0:	d121      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c6:	4613      	mov	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a02:	6053      	str	r3, [r2, #4]
            break;
 8004a04:	e008      	b.n	8004a18 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	3301      	adds	r3, #1
 8004a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	461a      	mov	r2, r3
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d3b3      	bcc.n	8004980 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f003 ff43 	bl	80088b8 <USB_ReadInterrupts>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3c:	d10a      	bne.n	8004a54 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f006 fb90 	bl	800b164 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f003 ff2d 	bl	80088b8 <USB_ReadInterrupts>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d115      	bne.n	8004a94 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f006 fb80 	bl	800b180 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	e000      	b.n	8004a94 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004a92:	bf00      	nop
    }
  }
}
 8004a94:	3734      	adds	r7, #52	@ 0x34
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd90      	pop	{r4, r7, pc}

08004a9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_PCD_SetAddress+0x1a>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e012      	b.n	8004ada <HAL_PCD_SetAddress+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f003 fe8c 	bl	80087e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	4608      	mov	r0, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	461a      	mov	r2, r3
 8004af0:	4603      	mov	r3, r0
 8004af2:	70fb      	strb	r3, [r7, #3]
 8004af4:	460b      	mov	r3, r1
 8004af6:	803b      	strh	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da0f      	bge.n	8004b28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	f003 020f 	and.w	r2, r3, #15
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	3310      	adds	r3, #16
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	705a      	strb	r2, [r3, #1]
 8004b26:	e00f      	b.n	8004b48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f003 020f 	and.w	r2, r3, #15
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3304      	adds	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004b54:	883b      	ldrh	r3, [r7, #0]
 8004b56:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	78ba      	ldrb	r2, [r7, #2]
 8004b62:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b76:	78bb      	ldrb	r3, [r7, #2]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d102      	bne.n	8004b82 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_PCD_EP_Open+0xae>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e00e      	b.n	8004bae <HAL_PCD_EP_Open+0xcc>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f003 f80c 	bl	8007bbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004bac:	7afb      	ldrb	r3, [r7, #11]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	da0f      	bge.n	8004bea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	3310      	adds	r3, #16
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	3304      	adds	r3, #4
 8004be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	705a      	strb	r2, [r3, #1]
 8004be8:	e00f      	b.n	8004c0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	f003 020f 	and.w	r2, r3, #15
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	3304      	adds	r3, #4
 8004c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_PCD_EP_Close+0x6e>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e00e      	b.n	8004c42 <HAL_PCD_EP_Close+0x8c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68f9      	ldr	r1, [r7, #12]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 f84a 	bl	8007ccc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	460b      	mov	r3, r1
 8004c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c5a:	7afb      	ldrb	r3, [r7, #11]
 8004c5c:	f003 020f 	and.w	r2, r3, #15
 8004c60:	4613      	mov	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	3304      	adds	r3, #4
 8004c72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2200      	movs	r2, #0
 8004c84:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c8c:	7afb      	ldrb	r3, [r7, #11]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	799b      	ldrb	r3, [r3, #6]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d102      	bne.n	8004ca6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	799b      	ldrb	r3, [r3, #6]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6979      	ldr	r1, [r7, #20]
 8004cb2:	f003 f8e7 	bl	8007e84 <USB_EPStartXfer>

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	607a      	str	r2, [r7, #4]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d00:	7afb      	ldrb	r3, [r7, #11]
 8004d02:	f003 020f 	and.w	r2, r3, #15
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	3310      	adds	r3, #16
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	3304      	adds	r3, #4
 8004d16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d30:	7afb      	ldrb	r3, [r7, #11]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	799b      	ldrb	r3, [r3, #6]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d102      	bne.n	8004d4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	799b      	ldrb	r3, [r3, #6]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	f003 f895 	bl	8007e84 <USB_EPStartXfer>

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	7912      	ldrb	r2, [r2, #4]
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e04f      	b.n	8004e22 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	da0f      	bge.n	8004daa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	3310      	adds	r3, #16
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3304      	adds	r3, #4
 8004da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	705a      	strb	r2, [r3, #1]
 8004da8:	e00d      	b.n	8004dc6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_PCD_EP_SetStall+0x82>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e01d      	b.n	8004e22 <HAL_PCD_EP_SetStall+0xbe>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f003 fc23 	bl	8008640 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7999      	ldrb	r1, [r3, #6]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e12:	461a      	mov	r2, r3
 8004e14:	f003 fe14 	bl	8008a40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	7912      	ldrb	r2, [r2, #4]
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e042      	b.n	8004ece <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da0f      	bge.n	8004e70 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	f003 020f 	and.w	r2, r3, #15
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	3310      	adds	r3, #16
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4413      	add	r3, r2
 8004e64:	3304      	adds	r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	705a      	strb	r2, [r3, #1]
 8004e6e:	e00f      	b.n	8004e90 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	f003 020f 	and.w	r2, r3, #15
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4413      	add	r3, r2
 8004e86:	3304      	adds	r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_PCD_EP_ClrStall+0x86>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e00e      	b.n	8004ece <HAL_PCD_EP_ClrStall+0xa4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f003 fc2c 	bl	800871c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da0c      	bge.n	8004f04 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	3310      	adds	r3, #16
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	3304      	adds	r3, #4
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e00c      	b.n	8004f1e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	f003 020f 	and.w	r2, r3, #15
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f003 fa4b 	bl	80083c0 <USB_EPStopXfer>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	@ 0x28
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	3310      	adds	r3, #16
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d901      	bls.n	8004f70 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e06b      	b.n	8005048 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d902      	bls.n	8004f8c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	3303      	adds	r3, #3
 8004f90:	089b      	lsrs	r3, r3, #2
 8004f92:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f94:	e02a      	b.n	8004fec <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d902      	bls.n	8004fb2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3303      	adds	r3, #3
 8004fb6:	089b      	lsrs	r3, r3, #2
 8004fb8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68d9      	ldr	r1, [r3, #12]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4603      	mov	r3, r0
 8004fce:	6978      	ldr	r0, [r7, #20]
 8004fd0:	f003 faa0 	bl	8008514 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	441a      	add	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	441a      	add	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d809      	bhi.n	8005016 <PCD_WriteEmptyTxFifo+0xde>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800500a:	429a      	cmp	r2, r3
 800500c:	d203      	bcs.n	8005016 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1bf      	bne.n	8004f96 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	429a      	cmp	r2, r3
 8005020:	d811      	bhi.n	8005046 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	2201      	movs	r2, #1
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	43db      	mvns	r3, r3
 800503c:	6939      	ldr	r1, [r7, #16]
 800503e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005042:	4013      	ands	r3, r2
 8005044:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	333c      	adds	r3, #60	@ 0x3c
 8005068:	3304      	adds	r3, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	799b      	ldrb	r3, [r3, #6]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d17b      	bne.n	800517e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d015      	beq.n	80050bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4a61      	ldr	r2, [pc, #388]	@ (8005218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	f240 80b9 	bls.w	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80b3 	beq.w	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b2:	461a      	mov	r2, r3
 80050b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	e0a7      	b.n	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d2:	461a      	mov	r2, r3
 80050d4:	2320      	movs	r3, #32
 80050d6:	6093      	str	r3, [r2, #8]
 80050d8:	e098      	b.n	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f040 8093 	bne.w	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d90f      	bls.n	800510e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005104:	461a      	mov	r2, r3
 8005106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800510a:	6093      	str	r3, [r2, #8]
 800510c:	e07e      	b.n	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	4413      	add	r3, r2
 8005120:	3304      	adds	r3, #4
 8005122:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	0159      	lsls	r1, r3, #5
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	440b      	add	r3, r1
 8005130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513a:	1ad2      	subs	r2, r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d114      	bne.n	8005170 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005158:	461a      	mov	r2, r3
 800515a:	2101      	movs	r1, #1
 800515c:	f003 fc70 	bl	8008a40 <USB_EP0_OutStart>
 8005160:	e006      	b.n	8005170 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	441a      	add	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f005 ff30 	bl	800afdc <HAL_PCD_DataOutStageCallback>
 800517c:	e046      	b.n	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4a26      	ldr	r2, [pc, #152]	@ (800521c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d124      	bne.n	80051d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519c:	461a      	mov	r2, r3
 800519e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a2:	6093      	str	r3, [r2, #8]
 80051a4:	e032      	b.n	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	461a      	mov	r2, r3
 80051be:	2320      	movs	r3, #32
 80051c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f005 ff07 	bl	800afdc <HAL_PCD_DataOutStageCallback>
 80051ce:	e01d      	b.n	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d114      	bne.n	8005200 <PCD_EP_OutXfrComplete_int+0x1b0>
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d108      	bne.n	8005200 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051f8:	461a      	mov	r2, r3
 80051fa:	2100      	movs	r1, #0
 80051fc:	f003 fc20 	bl	8008a40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f005 fee8 	bl	800afdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	4f54300a 	.word	0x4f54300a
 800521c:	4f54310a 	.word	0x4f54310a

08005220 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	333c      	adds	r3, #60	@ 0x3c
 8005238:	3304      	adds	r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a15      	ldr	r2, [pc, #84]	@ (80052a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d90e      	bls.n	8005274 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800525c:	2b00      	cmp	r3, #0
 800525e:	d009      	beq.n	8005274 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526c:	461a      	mov	r2, r3
 800526e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005272:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f005 fe9f 	bl	800afb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a0a      	ldr	r2, [pc, #40]	@ (80052a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d90c      	bls.n	800529c <PCD_EP_OutSetupPacket_int+0x7c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	799b      	ldrb	r3, [r3, #6]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d108      	bne.n	800529c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005294:	461a      	mov	r2, r3
 8005296:	2101      	movs	r1, #1
 8005298:	f003 fbd2 	bl	8008a40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	4f54300a 	.word	0x4f54300a

080052ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
 80052b8:	4613      	mov	r3, r2
 80052ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052ca:	883b      	ldrh	r3, [r7, #0]
 80052cc:	0419      	lsls	r1, r3, #16
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80052d8:	e028      	b.n	800532c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4413      	add	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]
 80052ec:	e00d      	b.n	800530a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	3340      	adds	r3, #64	@ 0x40
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4413      	add	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	3301      	adds	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	3b01      	subs	r3, #1
 8005310:	429a      	cmp	r2, r3
 8005312:	d3ec      	bcc.n	80052ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005314:	883b      	ldrh	r3, [r7, #0]
 8005316:	0418      	lsls	r0, r3, #16
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6819      	ldr	r1, [r3, #0]
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	3b01      	subs	r3, #1
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	4302      	orrs	r2, r0
 8005324:	3340      	adds	r3, #64	@ 0x40
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	887a      	ldrh	r2, [r7, #2]
 800534c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e267      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d075      	beq.n	800547e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005392:	4b88      	ldr	r3, [pc, #544]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b04      	cmp	r3, #4
 800539c:	d00c      	beq.n	80053b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539e:	4b85      	ldr	r3, [pc, #532]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d112      	bne.n	80053d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053aa:	4b82      	ldr	r3, [pc, #520]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053b6:	d10b      	bne.n	80053d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b8:	4b7e      	ldr	r3, [pc, #504]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05b      	beq.n	800547c <HAL_RCC_OscConfig+0x108>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d157      	bne.n	800547c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e242      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d8:	d106      	bne.n	80053e8 <HAL_RCC_OscConfig+0x74>
 80053da:	4b76      	ldr	r3, [pc, #472]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a75      	ldr	r2, [pc, #468]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e01d      	b.n	8005424 <HAL_RCC_OscConfig+0xb0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053f0:	d10c      	bne.n	800540c <HAL_RCC_OscConfig+0x98>
 80053f2:	4b70      	ldr	r3, [pc, #448]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a6f      	ldr	r2, [pc, #444]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80053f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4b6d      	ldr	r3, [pc, #436]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a6c      	ldr	r2, [pc, #432]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e00b      	b.n	8005424 <HAL_RCC_OscConfig+0xb0>
 800540c:	4b69      	ldr	r3, [pc, #420]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a68      	ldr	r2, [pc, #416]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	4b66      	ldr	r3, [pc, #408]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a65      	ldr	r2, [pc, #404]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 800541e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d013      	beq.n	8005454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fd fe94 	bl	8003158 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005434:	f7fd fe90 	bl	8003158 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	@ 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e207      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005446:	4b5b      	ldr	r3, [pc, #364]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0xc0>
 8005452:	e014      	b.n	800547e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fd fe80 	bl	8003158 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545c:	f7fd fe7c 	bl	8003158 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	@ 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e1f3      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546e:	4b51      	ldr	r3, [pc, #324]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0xe8>
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d063      	beq.n	8005552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800548a:	4b4a      	ldr	r3, [pc, #296]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005496:	4b47      	ldr	r3, [pc, #284]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d11c      	bne.n	80054dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a2:	4b44      	ldr	r3, [pc, #272]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d116      	bne.n	80054dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ae:	4b41      	ldr	r3, [pc, #260]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_RCC_OscConfig+0x152>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d001      	beq.n	80054c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e1c7      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c6:	4b3b      	ldr	r3, [pc, #236]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4937      	ldr	r1, [pc, #220]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054da:	e03a      	b.n	8005552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d020      	beq.n	8005526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e4:	4b34      	ldr	r3, [pc, #208]	@ (80055b8 <HAL_RCC_OscConfig+0x244>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ea:	f7fd fe35 	bl	8003158 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f2:	f7fd fe31 	bl	8003158 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e1a8      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005504:	4b2b      	ldr	r3, [pc, #172]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005510:	4b28      	ldr	r3, [pc, #160]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4925      	ldr	r1, [pc, #148]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005520:	4313      	orrs	r3, r2
 8005522:	600b      	str	r3, [r1, #0]
 8005524:	e015      	b.n	8005552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005526:	4b24      	ldr	r3, [pc, #144]	@ (80055b8 <HAL_RCC_OscConfig+0x244>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fd fe14 	bl	8003158 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005534:	f7fd fe10 	bl	8003158 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e187      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005546:	4b1b      	ldr	r3, [pc, #108]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d036      	beq.n	80055cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d016      	beq.n	8005594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005566:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <HAL_RCC_OscConfig+0x248>)
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fd fdf4 	bl	8003158 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005574:	f7fd fdf0 	bl	8003158 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e167      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <HAL_RCC_OscConfig+0x240>)
 8005588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x200>
 8005592:	e01b      	b.n	80055cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005594:	4b09      	ldr	r3, [pc, #36]	@ (80055bc <HAL_RCC_OscConfig+0x248>)
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800559a:	f7fd fddd 	bl	8003158 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a0:	e00e      	b.n	80055c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a2:	f7fd fdd9 	bl	8003158 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d907      	bls.n	80055c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e150      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
 80055b4:	40023800 	.word	0x40023800
 80055b8:	42470000 	.word	0x42470000
 80055bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c0:	4b88      	ldr	r3, [pc, #544]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80055c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ea      	bne.n	80055a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8097 	beq.w	8005708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055da:	2300      	movs	r3, #0
 80055dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055de:	4b81      	ldr	r3, [pc, #516]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	4b7d      	ldr	r3, [pc, #500]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	4a7c      	ldr	r2, [pc, #496]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80055f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80055fa:	4b7a      	ldr	r3, [pc, #488]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560a:	4b77      	ldr	r3, [pc, #476]	@ (80057e8 <HAL_RCC_OscConfig+0x474>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d118      	bne.n	8005648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005616:	4b74      	ldr	r3, [pc, #464]	@ (80057e8 <HAL_RCC_OscConfig+0x474>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a73      	ldr	r2, [pc, #460]	@ (80057e8 <HAL_RCC_OscConfig+0x474>)
 800561c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005622:	f7fd fd99 	bl	8003158 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562a:	f7fd fd95 	bl	8003158 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e10c      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563c:	4b6a      	ldr	r3, [pc, #424]	@ (80057e8 <HAL_RCC_OscConfig+0x474>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f0      	beq.n	800562a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d106      	bne.n	800565e <HAL_RCC_OscConfig+0x2ea>
 8005650:	4b64      	ldr	r3, [pc, #400]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005654:	4a63      	ldr	r2, [pc, #396]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	6713      	str	r3, [r2, #112]	@ 0x70
 800565c:	e01c      	b.n	8005698 <HAL_RCC_OscConfig+0x324>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b05      	cmp	r3, #5
 8005664:	d10c      	bne.n	8005680 <HAL_RCC_OscConfig+0x30c>
 8005666:	4b5f      	ldr	r3, [pc, #380]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566a:	4a5e      	ldr	r2, [pc, #376]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 800566c:	f043 0304 	orr.w	r3, r3, #4
 8005670:	6713      	str	r3, [r2, #112]	@ 0x70
 8005672:	4b5c      	ldr	r3, [pc, #368]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005676:	4a5b      	ldr	r2, [pc, #364]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6713      	str	r3, [r2, #112]	@ 0x70
 800567e:	e00b      	b.n	8005698 <HAL_RCC_OscConfig+0x324>
 8005680:	4b58      	ldr	r3, [pc, #352]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005684:	4a57      	ldr	r2, [pc, #348]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	6713      	str	r3, [r2, #112]	@ 0x70
 800568c:	4b55      	ldr	r3, [pc, #340]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005690:	4a54      	ldr	r2, [pc, #336]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005692:	f023 0304 	bic.w	r3, r3, #4
 8005696:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d015      	beq.n	80056cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a0:	f7fd fd5a 	bl	8003158 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a6:	e00a      	b.n	80056be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a8:	f7fd fd56 	bl	8003158 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e0cb      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056be:	4b49      	ldr	r3, [pc, #292]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0ee      	beq.n	80056a8 <HAL_RCC_OscConfig+0x334>
 80056ca:	e014      	b.n	80056f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056cc:	f7fd fd44 	bl	8003158 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d2:	e00a      	b.n	80056ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d4:	f7fd fd40 	bl	8003158 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e0b5      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ea:	4b3e      	ldr	r3, [pc, #248]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1ee      	bne.n	80056d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d105      	bne.n	8005708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056fc:	4b39      	ldr	r3, [pc, #228]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	4a38      	ldr	r2, [pc, #224]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005706:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80a1 	beq.w	8005854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005712:	4b34      	ldr	r3, [pc, #208]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b08      	cmp	r3, #8
 800571c:	d05c      	beq.n	80057d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d141      	bne.n	80057aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005726:	4b31      	ldr	r3, [pc, #196]	@ (80057ec <HAL_RCC_OscConfig+0x478>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572c:	f7fd fd14 	bl	8003158 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005734:	f7fd fd10 	bl	8003158 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e087      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005746:	4b27      	ldr	r3, [pc, #156]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	019b      	lsls	r3, r3, #6
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	3b01      	subs	r3, #1
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	061b      	lsls	r3, r3, #24
 8005776:	491b      	ldr	r1, [pc, #108]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 8005778:	4313      	orrs	r3, r2
 800577a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800577c:	4b1b      	ldr	r3, [pc, #108]	@ (80057ec <HAL_RCC_OscConfig+0x478>)
 800577e:	2201      	movs	r2, #1
 8005780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005782:	f7fd fce9 	bl	8003158 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800578a:	f7fd fce5 	bl	8003158 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e05c      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579c:	4b11      	ldr	r3, [pc, #68]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0f0      	beq.n	800578a <HAL_RCC_OscConfig+0x416>
 80057a8:	e054      	b.n	8005854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <HAL_RCC_OscConfig+0x478>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b0:	f7fd fcd2 	bl	8003158 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b8:	f7fd fcce 	bl	8003158 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e045      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ca:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <HAL_RCC_OscConfig+0x470>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0x444>
 80057d6:	e03d      	b.n	8005854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d107      	bne.n	80057f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e038      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
 80057e4:	40023800 	.word	0x40023800
 80057e8:	40007000 	.word	0x40007000
 80057ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005860 <HAL_RCC_OscConfig+0x4ec>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d028      	beq.n	8005850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005808:	429a      	cmp	r2, r3
 800580a:	d121      	bne.n	8005850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d11a      	bne.n	8005850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005820:	4013      	ands	r3, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005828:	4293      	cmp	r3, r2
 800582a:	d111      	bne.n	8005850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	3b01      	subs	r3, #1
 800583a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d107      	bne.n	8005850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40023800 	.word	0x40023800

08005864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0cc      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005878:	4b68      	ldr	r3, [pc, #416]	@ (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d90c      	bls.n	80058a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b65      	ldr	r3, [pc, #404]	@ (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b63      	ldr	r3, [pc, #396]	@ (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0b8      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b8:	4b59      	ldr	r3, [pc, #356]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	4a58      	ldr	r2, [pc, #352]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d0:	4b53      	ldr	r3, [pc, #332]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4a52      	ldr	r2, [pc, #328]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b50      	ldr	r3, [pc, #320]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	494d      	ldr	r1, [pc, #308]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d044      	beq.n	8005984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005902:	4b47      	ldr	r3, [pc, #284]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d119      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e07f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d003      	beq.n	8005922 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591e:	2b03      	cmp	r3, #3
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005922:	4b3f      	ldr	r3, [pc, #252]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e06f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005932:	4b3b      	ldr	r3, [pc, #236]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e067      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005942:	4b37      	ldr	r3, [pc, #220]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f023 0203 	bic.w	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4934      	ldr	r1, [pc, #208]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	4313      	orrs	r3, r2
 8005952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005954:	f7fd fc00 	bl	8003158 <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595a:	e00a      	b.n	8005972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fd fbfc 	bl	8003158 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e04f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	4b2b      	ldr	r3, [pc, #172]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 020c 	and.w	r2, r3, #12
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	429a      	cmp	r2, r3
 8005982:	d1eb      	bne.n	800595c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005984:	4b25      	ldr	r3, [pc, #148]	@ (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d20c      	bcs.n	80059ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b22      	ldr	r3, [pc, #136]	@ (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b20      	ldr	r3, [pc, #128]	@ (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e032      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b8:	4b19      	ldr	r3, [pc, #100]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4916      	ldr	r1, [pc, #88]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d6:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	490e      	ldr	r1, [pc, #56]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ea:	f000 f821 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	490a      	ldr	r1, [pc, #40]	@ (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 80059fc:	5ccb      	ldrb	r3, [r1, r3]
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	4a09      	ldr	r2, [pc, #36]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 8005a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a06:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd fb60 	bl	80030d0 <HAL_InitTick>

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40023c00 	.word	0x40023c00
 8005a20:	40023800 	.word	0x40023800
 8005a24:	08010868 	.word	0x08010868
 8005a28:	20000020 	.word	0x20000020
 8005a2c:	20000024 	.word	0x20000024

08005a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a34:	b094      	sub	sp, #80	@ 0x50
 8005a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a48:	4b79      	ldr	r3, [pc, #484]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d00d      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x40>
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	f200 80e1 	bhi.w	8005c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0x34>
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d003      	beq.n	8005a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a62:	e0db      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a64:	4b73      	ldr	r3, [pc, #460]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a68:	e0db      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a6a:	4b72      	ldr	r3, [pc, #456]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a6e:	e0d8      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a70:	4b6f      	ldr	r3, [pc, #444]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d063      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a86:	4b6a      	ldr	r3, [pc, #424]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	f04f 0000 	mov.w	r0, #0
 8005aaa:	f04f 0100 	mov.w	r1, #0
 8005aae:	0159      	lsls	r1, r3, #5
 8005ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ab4:	0150      	lsls	r0, r2, #5
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4621      	mov	r1, r4
 8005abc:	1a51      	subs	r1, r2, r1
 8005abe:	6139      	str	r1, [r7, #16]
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	018b      	lsls	r3, r1, #6
 8005ad8:	4651      	mov	r1, sl
 8005ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ade:	4651      	mov	r1, sl
 8005ae0:	018a      	lsls	r2, r1, #6
 8005ae2:	4651      	mov	r1, sl
 8005ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8005ae8:	4659      	mov	r1, fp
 8005aea:	eb63 0901 	sbc.w	r9, r3, r1
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b02:	4690      	mov	r8, r2
 8005b04:	4699      	mov	r9, r3
 8005b06:	4623      	mov	r3, r4
 8005b08:	eb18 0303 	adds.w	r3, r8, r3
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	462b      	mov	r3, r5
 8005b10:	eb49 0303 	adc.w	r3, r9, r3
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b22:	4629      	mov	r1, r5
 8005b24:	028b      	lsls	r3, r1, #10
 8005b26:	4621      	mov	r1, r4
 8005b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	028a      	lsls	r2, r1, #10
 8005b30:	4610      	mov	r0, r2
 8005b32:	4619      	mov	r1, r3
 8005b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b36:	2200      	movs	r2, #0
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b40:	f7fb f882 	bl	8000c48 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4613      	mov	r3, r2
 8005b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b4c:	e058      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b4e:	4b38      	ldr	r3, [pc, #224]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	099b      	lsrs	r3, r3, #6
 8005b54:	2200      	movs	r2, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	4611      	mov	r1, r2
 8005b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b5e:	623b      	str	r3, [r7, #32]
 8005b60:	2300      	movs	r3, #0
 8005b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b68:	4642      	mov	r2, r8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	f04f 0000 	mov.w	r0, #0
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	0159      	lsls	r1, r3, #5
 8005b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b7a:	0150      	lsls	r0, r2, #5
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4641      	mov	r1, r8
 8005b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b86:	4649      	mov	r1, r9
 8005b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	00eb      	lsls	r3, r5, #3
 8005bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb6:	00e2      	lsls	r2, r4, #3
 8005bb8:	4614      	mov	r4, r2
 8005bba:	461d      	mov	r5, r3
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	18e3      	adds	r3, r4, r3
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	eb45 0303 	adc.w	r3, r5, r3
 8005bc8:	607b      	str	r3, [r7, #4]
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	028b      	lsls	r3, r1, #10
 8005bda:	4621      	mov	r1, r4
 8005bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005be0:	4621      	mov	r1, r4
 8005be2:	028a      	lsls	r2, r1, #10
 8005be4:	4610      	mov	r0, r2
 8005be6:	4619      	mov	r1, r3
 8005be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bea:	2200      	movs	r2, #0
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	61fa      	str	r2, [r7, #28]
 8005bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bf4:	f7fb f828 	bl	8000c48 <__aeabi_uldivmod>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c00:	4b0b      	ldr	r3, [pc, #44]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c1a:	e002      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3750      	adds	r7, #80	@ 0x50
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800
 8005c34:	00f42400 	.word	0x00f42400

08005c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c3c:	4b03      	ldr	r3, [pc, #12]	@ (8005c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000020 	.word	0x20000020

08005c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e07b      	b.n	8005d5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c72:	d009      	beq.n	8005c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	61da      	str	r2, [r3, #28]
 8005c7a:	e005      	b.n	8005c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fc ff7c 	bl	8002ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0c:	ea42 0103 	orr.w	r1, r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	f003 0104 	and.w	r1, r3, #4
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	f003 0210 	and.w	r2, r3, #16
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b088      	sub	sp, #32
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d72:	f7fd f9f1 	bl	8003158 <HAL_GetTick>
 8005d76:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d001      	beq.n	8005d8c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e12a      	b.n	8005fe2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_SPI_Transmit+0x36>
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e122      	b.n	8005fe2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_SPI_Transmit+0x48>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e11b      	b.n	8005fe2 <HAL_SPI_Transmit+0x280>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2203      	movs	r2, #3
 8005db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	88fa      	ldrh	r2, [r7, #6]
 8005dca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df8:	d10f      	bne.n	8005e1a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e24:	2b40      	cmp	r3, #64	@ 0x40
 8005e26:	d007      	beq.n	8005e38 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e40:	d152      	bne.n	8005ee8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SPI_Transmit+0xee>
 8005e4a:	8b7b      	ldrh	r3, [r7, #26]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d145      	bne.n	8005edc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e54:	881a      	ldrh	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e60:	1c9a      	adds	r2, r3, #2
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e74:	e032      	b.n	8005edc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d112      	bne.n	8005eaa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e88:	881a      	ldrh	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e94:	1c9a      	adds	r2, r3, #2
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ea8:	e018      	b.n	8005edc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eaa:	f7fd f955 	bl	8003158 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d803      	bhi.n	8005ec2 <HAL_SPI_Transmit+0x160>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d102      	bne.n	8005ec8 <HAL_SPI_Transmit+0x166>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e082      	b.n	8005fe2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1c7      	bne.n	8005e76 <HAL_SPI_Transmit+0x114>
 8005ee6:	e053      	b.n	8005f90 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_Transmit+0x194>
 8005ef0:	8b7b      	ldrh	r3, [r7, #26]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d147      	bne.n	8005f86 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f1c:	e033      	b.n	8005f86 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d113      	bne.n	8005f54 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f52:	e018      	b.n	8005f86 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f54:	f7fd f900 	bl	8003158 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d803      	bhi.n	8005f6c <HAL_SPI_Transmit+0x20a>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6a:	d102      	bne.n	8005f72 <HAL_SPI_Transmit+0x210>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e02d      	b.n	8005fe2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1c6      	bne.n	8005f1e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 fdd1 	bl	8006b3c <SPI_EndRxTxTransaction>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
  }
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b08a      	sub	sp, #40	@ 0x28
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ffc:	f7fd f8ac 	bl	8003158 <HAL_GetTick>
 8006000:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006008:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006010:	887b      	ldrh	r3, [r7, #2]
 8006012:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006014:	7ffb      	ldrb	r3, [r7, #31]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d00c      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x4a>
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006020:	d106      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x46>
 800602a:	7ffb      	ldrb	r3, [r7, #31]
 800602c:	2b04      	cmp	r3, #4
 800602e:	d001      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006030:	2302      	movs	r3, #2
 8006032:	e17f      	b.n	8006334 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_SPI_TransmitReceive+0x5c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_SPI_TransmitReceive+0x5c>
 8006040:	887b      	ldrh	r3, [r7, #2]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e174      	b.n	8006334 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_SPI_TransmitReceive+0x6e>
 8006054:	2302      	movs	r3, #2
 8006056:	e16d      	b.n	8006334 <HAL_SPI_TransmitReceive+0x34a>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b04      	cmp	r3, #4
 800606a:	d003      	beq.n	8006074 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2205      	movs	r2, #5
 8006070:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	887a      	ldrh	r2, [r7, #2]
 8006084:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	887a      	ldrh	r2, [r7, #2]
 800608a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	887a      	ldrh	r2, [r7, #2]
 8006096:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b4:	2b40      	cmp	r3, #64	@ 0x40
 80060b6:	d007      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060d0:	d17e      	bne.n	80061d0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0xf6>
 80060da:	8afb      	ldrh	r3, [r7, #22]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d16c      	bne.n	80061ba <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e4:	881a      	ldrh	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006104:	e059      	b.n	80061ba <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b02      	cmp	r3, #2
 8006112:	d11b      	bne.n	800614c <HAL_SPI_TransmitReceive+0x162>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <HAL_SPI_TransmitReceive+0x162>
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	2b01      	cmp	r3, #1
 8006122:	d113      	bne.n	800614c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006128:	881a      	ldrh	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006134:	1c9a      	adds	r2, r3, #2
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b01      	cmp	r3, #1
 8006158:	d119      	bne.n	800618e <HAL_SPI_TransmitReceive+0x1a4>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d014      	beq.n	800618e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616e:	b292      	uxth	r2, r2
 8006170:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006176:	1c9a      	adds	r2, r3, #2
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800618a:	2301      	movs	r3, #1
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800618e:	f7fc ffe3 	bl	8003158 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800619a:	429a      	cmp	r2, r3
 800619c:	d80d      	bhi.n	80061ba <HAL_SPI_TransmitReceive+0x1d0>
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d009      	beq.n	80061ba <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e0bc      	b.n	8006334 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1a0      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x11c>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d19b      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x11c>
 80061ce:	e082      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_SPI_TransmitReceive+0x1f4>
 80061d8:	8afb      	ldrh	r3, [r7, #22]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d171      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006204:	e05d      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b02      	cmp	r3, #2
 8006212:	d11c      	bne.n	800624e <HAL_SPI_TransmitReceive+0x264>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d017      	beq.n	800624e <HAL_SPI_TransmitReceive+0x264>
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	2b01      	cmp	r3, #1
 8006222:	d114      	bne.n	800624e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	7812      	ldrb	r2, [r2, #0]
 8006230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d119      	bne.n	8006290 <HAL_SPI_TransmitReceive+0x2a6>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d014      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800628c:	2301      	movs	r3, #1
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006290:	f7fc ff62 	bl	8003158 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629c:	429a      	cmp	r2, r3
 800629e:	d803      	bhi.n	80062a8 <HAL_SPI_TransmitReceive+0x2be>
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d102      	bne.n	80062ae <HAL_SPI_TransmitReceive+0x2c4>
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d109      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e038      	b.n	8006334 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d19c      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x21c>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d197      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fc2e 	bl	8006b3c <SPI_EndRxTxTransaction>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e01d      	b.n	8006334 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006332:	2300      	movs	r3, #0
  }
}
 8006334:	4618      	mov	r0, r3
 8006336:	3728      	adds	r7, #40	@ 0x28
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006350:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d00c      	beq.n	8006378 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006364:	d106      	bne.n	8006374 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <HAL_SPI_TransmitReceive_DMA+0x38>
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	2b04      	cmp	r3, #4
 8006372:	d001      	beq.n	8006378 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
 8006376:	e0cf      	b.n	8006518 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006384:	887b      	ldrh	r3, [r7, #2]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e0c4      	b.n	8006518 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_SPI_TransmitReceive_DMA+0x60>
 8006398:	2302      	movs	r3, #2
 800639a:	e0bd      	b.n	8006518 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d003      	beq.n	80063b8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2205      	movs	r2, #5
 80063b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	887a      	ldrh	r2, [r7, #2]
 80063c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	887a      	ldrh	r2, [r7, #2]
 80063ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	887a      	ldrh	r2, [r7, #2]
 80063da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	887a      	ldrh	r2, [r7, #2]
 80063e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d108      	bne.n	800640c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fe:	4a48      	ldr	r2, [pc, #288]	@ (8006520 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006400:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006406:	4a47      	ldr	r2, [pc, #284]	@ (8006524 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006408:	63da      	str	r2, [r3, #60]	@ 0x3c
 800640a:	e007      	b.n	800641c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006410:	4a45      	ldr	r2, [pc, #276]	@ (8006528 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006412:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006418:	4a44      	ldr	r2, [pc, #272]	@ (800652c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800641a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006420:	4a43      	ldr	r2, [pc, #268]	@ (8006530 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006422:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006428:	2200      	movs	r2, #0
 800642a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	4619      	mov	r1, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006442:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006444:	f7fd f878 	bl	8003538 <HAL_DMA_Start_IT>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006452:	f043 0210 	orr.w	r2, r3, #16
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e058      	b.n	8006518 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647a:	2200      	movs	r2, #0
 800647c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006482:	2200      	movs	r2, #0
 8006484:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800648a:	2200      	movs	r2, #0
 800648c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006492:	2200      	movs	r2, #0
 8006494:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649e:	4619      	mov	r1, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064ac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064ae:	f7fd f843 	bl	8003538 <HAL_DMA_Start_IT>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064bc:	f043 0210 	orr.w	r2, r3, #16
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e023      	b.n	8006518 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064da:	2b40      	cmp	r3, #64	@ 0x40
 80064dc:	d007      	beq.n	80064ee <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064ec:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0220 	orr.w	r2, r2, #32
 8006504:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0202 	orr.w	r2, r2, #2
 8006514:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	080068c1 	.word	0x080068c1
 8006524:	08006789 	.word	0x08006789
 8006528:	080068dd 	.word	0x080068dd
 800652c:	08006831 	.word	0x08006831
 8006530:	080068f9 	.word	0x080068f9

08006534 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10e      	bne.n	8006574 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
    return;
 8006572:	e0ce      	b.n	8006712 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d009      	beq.n	8006592 <HAL_SPI_IRQHandler+0x5e>
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
    return;
 8006590:	e0bf      	b.n	8006712 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <HAL_SPI_IRQHandler+0x7e>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d105      	bne.n	80065b2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80b0 	beq.w	8006712 <HAL_SPI_IRQHandler+0x1de>
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80aa 	beq.w	8006712 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d023      	beq.n	8006610 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d011      	beq.n	80065f8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d8:	f043 0204 	orr.w	r2, r3, #4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	e00b      	b.n	8006610 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	693b      	ldr	r3, [r7, #16]
        return;
 800660e:	e080      	b.n	8006712 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00c      	beq.n	8006668 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006652:	f043 0208 	orr.w	r2, r3, #8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666c:	2b00      	cmp	r3, #0
 800666e:	d04f      	beq.n	8006710 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800667e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <HAL_SPI_IRQHandler+0x168>
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d034      	beq.n	8006706 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0203 	bic.w	r2, r2, #3
 80066aa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b8:	4a17      	ldr	r2, [pc, #92]	@ (8006718 <HAL_SPI_IRQHandler+0x1e4>)
 80066ba:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fc ff91 	bl	80035e8 <HAL_DMA_Abort_IT>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d016      	beq.n	800670e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006718 <HAL_SPI_IRQHandler+0x1e4>)
 80066e6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fc ff7b 	bl	80035e8 <HAL_DMA_Abort_IT>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006704:	e003      	b.n	800670e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f826 	bl	8006758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800670c:	e000      	b.n	8006710 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800670e:	bf00      	nop
    return;
 8006710:	bf00      	nop
  }
}
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	08006939 	.word	0x08006939

0800671c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800677a:	b2db      	uxtb	r3, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006794:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006796:	f7fc fcdf 	bl	8003158 <HAL_GetTick>
 800679a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067aa:	d03b      	beq.n	8006824 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0220 	bic.w	r2, r2, #32
 80067ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10d      	bne.n	80067e0 <SPI_DMAReceiveCplt+0x58>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067cc:	d108      	bne.n	80067e0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0203 	bic.w	r2, r2, #3
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	e007      	b.n	80067f0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0201 	bic.w	r2, r2, #1
 80067ee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	2164      	movs	r1, #100	@ 0x64
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f93b 	bl	8006a70 <SPI_EndRxTransaction>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff ff9b 	bl	8006758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006822:	e002      	b.n	800682a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff ff79 	bl	800671c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683e:	f7fc fc8b 	bl	8003158 <HAL_GetTick>
 8006842:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006852:	d02f      	beq.n	80068b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0220 	bic.w	r2, r2, #32
 8006862:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	2164      	movs	r1, #100	@ 0x64
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f967 	bl	8006b3c <SPI_EndRxTxTransaction>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006878:	f043 0220 	orr.w	r2, r3, #32
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0203 	bic.w	r2, r2, #3
 800688e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff ff53 	bl	8006758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068b2:	e002      	b.n	80068ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7fb fc99 	bl	80021ec <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff ff2e 	bl	8006730 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff ff2a 	bl	8006744 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0203 	bic.w	r2, r2, #3
 8006914:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691a:	f043 0210 	orr.w	r2, r3, #16
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff ff14 	bl	8006758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff ff00 	bl	8006758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006970:	f7fc fbf2 	bl	8003158 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	4413      	add	r3, r2
 800697e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006980:	f7fc fbea 	bl	8003158 <HAL_GetTick>
 8006984:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006986:	4b39      	ldr	r3, [pc, #228]	@ (8006a6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	015b      	lsls	r3, r3, #5
 800698c:	0d1b      	lsrs	r3, r3, #20
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	fb02 f303 	mul.w	r3, r2, r3
 8006994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006996:	e054      	b.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699e:	d050      	beq.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069a0:	f7fc fbda 	bl	8003158 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d902      	bls.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d13d      	bne.n	8006a32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069ce:	d111      	bne.n	80069f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d8:	d004      	beq.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e2:	d107      	bne.n	80069f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fc:	d10f      	bne.n	8006a1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e017      	b.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d19b      	bne.n	8006998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000020 	.word	0x20000020

08006a70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a84:	d111      	bne.n	8006aaa <SPI_EndRxTransaction+0x3a>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a8e:	d004      	beq.n	8006a9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a98:	d107      	bne.n	8006aaa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aa8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ab2:	d12a      	bne.n	8006b0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abc:	d012      	beq.n	8006ae4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2180      	movs	r1, #128	@ 0x80
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff ff49 	bl	8006960 <SPI_WaitFlagStateUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d02d      	beq.n	8006b30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e026      	b.n	8006b32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2200      	movs	r2, #0
 8006aec:	2101      	movs	r1, #1
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff ff36 	bl	8006960 <SPI_WaitFlagStateUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01a      	beq.n	8006b30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e013      	b.n	8006b32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2200      	movs	r2, #0
 8006b12:	2101      	movs	r1, #1
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff ff23 	bl	8006960 <SPI_WaitFlagStateUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b24:	f043 0220 	orr.w	r2, r3, #32
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e000      	b.n	8006b32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	2102      	movs	r1, #2
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff ff04 	bl	8006960 <SPI_WaitFlagStateUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b62:	f043 0220 	orr.w	r2, r3, #32
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e032      	b.n	8006bd4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bdc <SPI_EndRxTxTransaction+0xa0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1b      	ldr	r2, [pc, #108]	@ (8006be0 <SPI_EndRxTxTransaction+0xa4>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	0d5b      	lsrs	r3, r3, #21
 8006b7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b8c:	d112      	bne.n	8006bb4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2200      	movs	r2, #0
 8006b96:	2180      	movs	r1, #128	@ 0x80
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fee1 	bl	8006960 <SPI_WaitFlagStateUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d016      	beq.n	8006bd2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba8:	f043 0220 	orr.w	r2, r3, #32
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e00f      	b.n	8006bd4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bca:	2b80      	cmp	r3, #128	@ 0x80
 8006bcc:	d0f2      	beq.n	8006bb4 <SPI_EndRxTxTransaction+0x78>
 8006bce:	e000      	b.n	8006bd2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006bd0:	bf00      	nop
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000020 	.word	0x20000020
 8006be0:	165e9f81 	.word	0x165e9f81

08006be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e041      	b.n	8006c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fc f87e 	bl	8002d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f000 fa7e 	bl	8007124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d001      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e04e      	b.n	8006d3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a23      	ldr	r2, [pc, #140]	@ (8006d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d022      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc6:	d01d      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d018      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00e      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	@ (8006d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a19      	ldr	r2, [pc, #100]	@ (8006d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	@ (8006d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d111      	bne.n	8006d28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b06      	cmp	r3, #6
 8006d14:	d010      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d26:	e007      	b.n	8006d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40010400 	.word	0x40010400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40001800 	.word	0x40001800

08006d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d020      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0202 	mvn.w	r2, #2
 8006d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f999 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006db4:	e005      	b.n	8006dc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f98b 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f99c 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d020      	beq.n	8006e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01b      	beq.n	8006e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0204 	mvn.w	r2, #4
 8006de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f973 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006e00:	e005      	b.n	8006e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f965 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f976 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d020      	beq.n	8006e60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01b      	beq.n	8006e60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0208 	mvn.w	r2, #8
 8006e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2204      	movs	r2, #4
 8006e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f94d 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006e4c:	e005      	b.n	8006e5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f93f 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f950 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f003 0310 	and.w	r3, r3, #16
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d020      	beq.n	8006eac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01b      	beq.n	8006eac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0210 	mvn.w	r2, #16
 8006e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2208      	movs	r2, #8
 8006e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f927 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f919 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f92a 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00c      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0201 	mvn.w	r2, #1
 8006ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fb f9b0 	bl	8002230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d007      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fae4 	bl	80074bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f8fb 	bl	800710e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00c      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0220 	mvn.w	r2, #32
 8006f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fab6 	bl	80074a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIM_ConfigClockSource+0x1c>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e0b4      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x186>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f98:	d03e      	beq.n	8007018 <HAL_TIM_ConfigClockSource+0xd4>
 8006f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9e:	f200 8087 	bhi.w	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa6:	f000 8086 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x172>
 8006faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fae:	d87f      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb0:	2b70      	cmp	r3, #112	@ 0x70
 8006fb2:	d01a      	beq.n	8006fea <HAL_TIM_ConfigClockSource+0xa6>
 8006fb4:	2b70      	cmp	r3, #112	@ 0x70
 8006fb6:	d87b      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb8:	2b60      	cmp	r3, #96	@ 0x60
 8006fba:	d050      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x11a>
 8006fbc:	2b60      	cmp	r3, #96	@ 0x60
 8006fbe:	d877      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc0:	2b50      	cmp	r3, #80	@ 0x50
 8006fc2:	d03c      	beq.n	800703e <HAL_TIM_ConfigClockSource+0xfa>
 8006fc4:	2b50      	cmp	r3, #80	@ 0x50
 8006fc6:	d873      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d058      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x13a>
 8006fcc:	2b40      	cmp	r3, #64	@ 0x40
 8006fce:	d86f      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd0:	2b30      	cmp	r3, #48	@ 0x30
 8006fd2:	d064      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15a>
 8006fd4:	2b30      	cmp	r3, #48	@ 0x30
 8006fd6:	d86b      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d060      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15a>
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d867      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d05c      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15a>
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d05a      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15a>
 8006fe8:	e062      	b.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ffa:	f000 f9b9 	bl	8007370 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800700c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	609a      	str	r2, [r3, #8]
      break;
 8007016:	e04f      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007028:	f000 f9a2 	bl	8007370 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800703a:	609a      	str	r2, [r3, #8]
      break;
 800703c:	e03c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800704a:	461a      	mov	r2, r3
 800704c:	f000 f916 	bl	800727c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2150      	movs	r1, #80	@ 0x50
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f96f 	bl	800733a <TIM_ITRx_SetConfig>
      break;
 800705c:	e02c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800706a:	461a      	mov	r2, r3
 800706c:	f000 f935 	bl	80072da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2160      	movs	r1, #96	@ 0x60
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f95f 	bl	800733a <TIM_ITRx_SetConfig>
      break;
 800707c:	e01c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800708a:	461a      	mov	r2, r3
 800708c:	f000 f8f6 	bl	800727c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2140      	movs	r1, #64	@ 0x40
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f94f 	bl	800733a <TIM_ITRx_SetConfig>
      break;
 800709c:	e00c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f000 f946 	bl	800733a <TIM_ITRx_SetConfig>
      break;
 80070ae:	e003      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
      break;
 80070b4:	e000      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a46      	ldr	r2, [pc, #280]	@ (8007250 <TIM_Base_SetConfig+0x12c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007142:	d00f      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a43      	ldr	r2, [pc, #268]	@ (8007254 <TIM_Base_SetConfig+0x130>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00b      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a42      	ldr	r2, [pc, #264]	@ (8007258 <TIM_Base_SetConfig+0x134>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a41      	ldr	r2, [pc, #260]	@ (800725c <TIM_Base_SetConfig+0x138>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a40      	ldr	r2, [pc, #256]	@ (8007260 <TIM_Base_SetConfig+0x13c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d108      	bne.n	8007176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800716a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a35      	ldr	r2, [pc, #212]	@ (8007250 <TIM_Base_SetConfig+0x12c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d02b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007184:	d027      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a32      	ldr	r2, [pc, #200]	@ (8007254 <TIM_Base_SetConfig+0x130>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d023      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a31      	ldr	r2, [pc, #196]	@ (8007258 <TIM_Base_SetConfig+0x134>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01f      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a30      	ldr	r2, [pc, #192]	@ (800725c <TIM_Base_SetConfig+0x138>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007260 <TIM_Base_SetConfig+0x13c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d017      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007264 <TIM_Base_SetConfig+0x140>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007268 <TIM_Base_SetConfig+0x144>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00f      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2c      	ldr	r2, [pc, #176]	@ (800726c <TIM_Base_SetConfig+0x148>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007270 <TIM_Base_SetConfig+0x14c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007274 <TIM_Base_SetConfig+0x150>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a29      	ldr	r2, [pc, #164]	@ (8007278 <TIM_Base_SetConfig+0x154>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a10      	ldr	r2, [pc, #64]	@ (8007250 <TIM_Base_SetConfig+0x12c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_Base_SetConfig+0xf8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a12      	ldr	r2, [pc, #72]	@ (8007260 <TIM_Base_SetConfig+0x13c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d103      	bne.n	8007224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	691a      	ldr	r2, [r3, #16]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b01      	cmp	r3, #1
 8007234:	d105      	bne.n	8007242 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f023 0201 	bic.w	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	611a      	str	r2, [r3, #16]
  }
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40010000 	.word	0x40010000
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800
 800725c:	40000c00 	.word	0x40000c00
 8007260:	40010400 	.word	0x40010400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800
 8007270:	40001800 	.word	0x40001800
 8007274:	40001c00 	.word	0x40001c00
 8007278:	40002000 	.word	0x40002000

0800727c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	f023 0201 	bic.w	r2, r3, #1
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f023 030a 	bic.w	r3, r3, #10
 80072b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072da:	b480      	push	{r7}
 80072dc:	b087      	sub	sp, #28
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f023 0210 	bic.w	r2, r3, #16
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	031b      	lsls	r3, r3, #12
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007316:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	621a      	str	r2, [r3, #32]
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4313      	orrs	r3, r2
 8007358:	f043 0307 	orr.w	r3, r3, #7
 800735c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	609a      	str	r2, [r3, #8]
}
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800738a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	021a      	lsls	r2, r3, #8
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	431a      	orrs	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4313      	orrs	r3, r2
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d101      	bne.n	80073c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073c4:	2302      	movs	r3, #2
 80073c6:	e05a      	b.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a21      	ldr	r2, [pc, #132]	@ (800748c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d022      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007414:	d01d      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1d      	ldr	r2, [pc, #116]	@ (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d018      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1b      	ldr	r2, [pc, #108]	@ (8007494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1a      	ldr	r2, [pc, #104]	@ (8007498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a18      	ldr	r2, [pc, #96]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d009      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a15      	ldr	r2, [pc, #84]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10c      	bne.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	4313      	orrs	r3, r2
 8007462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40010000 	.word	0x40010000
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40010400 	.word	0x40010400
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40001800 	.word	0x40001800

080074a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074d0:	b084      	sub	sp, #16
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	f107 001c 	add.w	r0, r7, #28
 80074de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d123      	bne.n	8007532 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80074fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007512:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007516:	2b01      	cmp	r3, #1
 8007518:	d105      	bne.n	8007526 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fae8 	bl	8008afc <USB_CoreReset>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]
 8007530:	e01b      	b.n	800756a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 fadc 	bl	8008afc <USB_CoreReset>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007548:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800754c:	2b00      	cmp	r3, #0
 800754e:	d106      	bne.n	800755e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007554:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	639a      	str	r2, [r3, #56]	@ 0x38
 800755c:	e005      	b.n	800756a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007562:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800756a:	7fbb      	ldrb	r3, [r7, #30]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d10b      	bne.n	8007588 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f043 0206 	orr.w	r2, r3, #6
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f043 0220 	orr.w	r2, r3, #32
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007594:	b004      	add	sp, #16
 8007596:	4770      	bx	lr

08007598 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d165      	bne.n	8007678 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	4a41      	ldr	r2, [pc, #260]	@ (80076b4 <USB_SetTurnaroundTime+0x11c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d906      	bls.n	80075c2 <USB_SetTurnaroundTime+0x2a>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4a40      	ldr	r2, [pc, #256]	@ (80076b8 <USB_SetTurnaroundTime+0x120>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d202      	bcs.n	80075c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075bc:	230f      	movs	r3, #15
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	e062      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	4a3c      	ldr	r2, [pc, #240]	@ (80076b8 <USB_SetTurnaroundTime+0x120>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d306      	bcc.n	80075d8 <USB_SetTurnaroundTime+0x40>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4a3b      	ldr	r2, [pc, #236]	@ (80076bc <USB_SetTurnaroundTime+0x124>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d202      	bcs.n	80075d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075d2:	230e      	movs	r3, #14
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e057      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	4a38      	ldr	r2, [pc, #224]	@ (80076bc <USB_SetTurnaroundTime+0x124>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d306      	bcc.n	80075ee <USB_SetTurnaroundTime+0x56>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4a37      	ldr	r2, [pc, #220]	@ (80076c0 <USB_SetTurnaroundTime+0x128>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d202      	bcs.n	80075ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80075e8:	230d      	movs	r3, #13
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	e04c      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	4a33      	ldr	r2, [pc, #204]	@ (80076c0 <USB_SetTurnaroundTime+0x128>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d306      	bcc.n	8007604 <USB_SetTurnaroundTime+0x6c>
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4a32      	ldr	r2, [pc, #200]	@ (80076c4 <USB_SetTurnaroundTime+0x12c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d802      	bhi.n	8007604 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80075fe:	230c      	movs	r3, #12
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	e041      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	4a2f      	ldr	r2, [pc, #188]	@ (80076c4 <USB_SetTurnaroundTime+0x12c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d906      	bls.n	800761a <USB_SetTurnaroundTime+0x82>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4a2e      	ldr	r2, [pc, #184]	@ (80076c8 <USB_SetTurnaroundTime+0x130>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d802      	bhi.n	800761a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007614:	230b      	movs	r3, #11
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	e036      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	4a2a      	ldr	r2, [pc, #168]	@ (80076c8 <USB_SetTurnaroundTime+0x130>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d906      	bls.n	8007630 <USB_SetTurnaroundTime+0x98>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4a29      	ldr	r2, [pc, #164]	@ (80076cc <USB_SetTurnaroundTime+0x134>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d802      	bhi.n	8007630 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800762a:	230a      	movs	r3, #10
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	e02b      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	4a26      	ldr	r2, [pc, #152]	@ (80076cc <USB_SetTurnaroundTime+0x134>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d906      	bls.n	8007646 <USB_SetTurnaroundTime+0xae>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4a25      	ldr	r2, [pc, #148]	@ (80076d0 <USB_SetTurnaroundTime+0x138>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d202      	bcs.n	8007646 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007640:	2309      	movs	r3, #9
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e020      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	4a21      	ldr	r2, [pc, #132]	@ (80076d0 <USB_SetTurnaroundTime+0x138>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d306      	bcc.n	800765c <USB_SetTurnaroundTime+0xc4>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	4a20      	ldr	r2, [pc, #128]	@ (80076d4 <USB_SetTurnaroundTime+0x13c>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d802      	bhi.n	800765c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007656:	2308      	movs	r3, #8
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	e015      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4a1d      	ldr	r2, [pc, #116]	@ (80076d4 <USB_SetTurnaroundTime+0x13c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d906      	bls.n	8007672 <USB_SetTurnaroundTime+0xda>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	4a1c      	ldr	r2, [pc, #112]	@ (80076d8 <USB_SetTurnaroundTime+0x140>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d202      	bcs.n	8007672 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800766c:	2307      	movs	r3, #7
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	e00a      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007672:	2306      	movs	r3, #6
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e007      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800767e:	2309      	movs	r3, #9
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	e001      	b.n	8007688 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007684:	2309      	movs	r3, #9
 8007686:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	029b      	lsls	r3, r3, #10
 800769c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80076a0:	431a      	orrs	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	00d8acbf 	.word	0x00d8acbf
 80076b8:	00e4e1c0 	.word	0x00e4e1c0
 80076bc:	00f42400 	.word	0x00f42400
 80076c0:	01067380 	.word	0x01067380
 80076c4:	011a499f 	.word	0x011a499f
 80076c8:	01312cff 	.word	0x01312cff
 80076cc:	014ca43f 	.word	0x014ca43f
 80076d0:	016e3600 	.word	0x016e3600
 80076d4:	01a6ab1f 	.word	0x01a6ab1f
 80076d8:	01e84800 	.word	0x01e84800

080076dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f043 0201 	orr.w	r2, r3, #1
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f023 0201 	bic.w	r2, r3, #1
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d115      	bne.n	800776e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800774e:	200a      	movs	r0, #10
 8007750:	f7fb fd0e 	bl	8003170 <HAL_Delay>
      ms += 10U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	330a      	adds	r3, #10
 8007758:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 f93f 	bl	80089de <USB_GetMode>
 8007760:	4603      	mov	r3, r0
 8007762:	2b01      	cmp	r3, #1
 8007764:	d01e      	beq.n	80077a4 <USB_SetCurrentMode+0x84>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2bc7      	cmp	r3, #199	@ 0xc7
 800776a:	d9f0      	bls.n	800774e <USB_SetCurrentMode+0x2e>
 800776c:	e01a      	b.n	80077a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d115      	bne.n	80077a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007780:	200a      	movs	r0, #10
 8007782:	f7fb fcf5 	bl	8003170 <HAL_Delay>
      ms += 10U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	330a      	adds	r3, #10
 800778a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 f926 	bl	80089de <USB_GetMode>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <USB_SetCurrentMode+0x84>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2bc7      	cmp	r3, #199	@ 0xc7
 800779c:	d9f0      	bls.n	8007780 <USB_SetCurrentMode+0x60>
 800779e:	e001      	b.n	80077a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e005      	b.n	80077b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80077a8:	d101      	bne.n	80077ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077b8:	b084      	sub	sp, #16
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b086      	sub	sp, #24
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	e009      	b.n	80077ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3340      	adds	r3, #64	@ 0x40
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	3301      	adds	r3, #1
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2b0e      	cmp	r3, #14
 80077f0:	d9f2      	bls.n	80077d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d11c      	bne.n	8007834 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007808:	f043 0302 	orr.w	r3, r3, #2
 800780c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	639a      	str	r2, [r3, #56]	@ 0x38
 8007832:	e00b      	b.n	800784c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007838:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007852:	461a      	mov	r2, r3
 8007854:	2300      	movs	r3, #0
 8007856:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007858:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800785c:	2b01      	cmp	r3, #1
 800785e:	d10d      	bne.n	800787c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007868:	2100      	movs	r1, #0
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f968 	bl	8007b40 <USB_SetDevSpeed>
 8007870:	e008      	b.n	8007884 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007872:	2101      	movs	r1, #1
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f963 	bl	8007b40 <USB_SetDevSpeed>
 800787a:	e003      	b.n	8007884 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800787c:	2103      	movs	r1, #3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f95e 	bl	8007b40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007884:	2110      	movs	r1, #16
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f8fa 	bl	8007a80 <USB_FlushTxFifo>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f924 	bl	8007ae4 <USB_FlushRxFifo>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ac:	461a      	mov	r2, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b8:	461a      	mov	r2, r3
 80078ba:	2300      	movs	r3, #0
 80078bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c4:	461a      	mov	r2, r3
 80078c6:	2300      	movs	r3, #0
 80078c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ca:	2300      	movs	r3, #0
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	e043      	b.n	8007958 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078e6:	d118      	bne.n	800791a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fa:	461a      	mov	r2, r3
 80078fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	e013      	b.n	800792c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007910:	461a      	mov	r2, r3
 8007912:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	e008      	b.n	800792c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007926:	461a      	mov	r2, r3
 8007928:	2300      	movs	r3, #0
 800792a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007938:	461a      	mov	r2, r3
 800793a:	2300      	movs	r3, #0
 800793c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794a:	461a      	mov	r2, r3
 800794c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007950:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	3301      	adds	r3, #1
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800795c:	461a      	mov	r2, r3
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	4293      	cmp	r3, r2
 8007962:	d3b5      	bcc.n	80078d0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	e043      	b.n	80079f2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800797c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007980:	d118      	bne.n	80079b4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007994:	461a      	mov	r2, r3
 8007996:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e013      	b.n	80079c6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079aa:	461a      	mov	r2, r3
 80079ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e008      	b.n	80079c6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c0:	461a      	mov	r2, r3
 80079c2:	2300      	movs	r3, #0
 80079c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d2:	461a      	mov	r2, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e4:	461a      	mov	r2, r3
 80079e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3301      	adds	r3, #1
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079f6:	461a      	mov	r2, r3
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d3b5      	bcc.n	800796a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d105      	bne.n	8007a34 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f043 0210 	orr.w	r2, r3, #16
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	4b10      	ldr	r3, [pc, #64]	@ (8007a7c <USB_DevInit+0x2c4>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f043 0208 	orr.w	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d107      	bne.n	8007a6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a64:	f043 0304 	orr.w	r3, r3, #4
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a78:	b004      	add	sp, #16
 8007a7a:	4770      	bx	lr
 8007a7c:	803c3800 	.word	0x803c3800

08007a80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3301      	adds	r3, #1
 8007a92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a9a:	d901      	bls.n	8007aa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e01b      	b.n	8007ad8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	daf2      	bge.n	8007a8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	019b      	lsls	r3, r3, #6
 8007ab0:	f043 0220 	orr.w	r2, r3, #32
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ac4:	d901      	bls.n	8007aca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e006      	b.n	8007ad8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d0f0      	beq.n	8007ab8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007afc:	d901      	bls.n	8007b02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e018      	b.n	8007b34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	daf2      	bge.n	8007af0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2210      	movs	r2, #16
 8007b12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3301      	adds	r3, #1
 8007b18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b20:	d901      	bls.n	8007b26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e006      	b.n	8007b34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f003 0310 	and.w	r3, r3, #16
 8007b2e:	2b10      	cmp	r3, #16
 8007b30:	d0f0      	beq.n	8007b14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b60:	4313      	orrs	r3, r2
 8007b62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b087      	sub	sp, #28
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 0306 	and.w	r3, r3, #6
 8007b8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d102      	bne.n	8007b98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b92:	2300      	movs	r3, #0
 8007b94:	75fb      	strb	r3, [r7, #23]
 8007b96:	e00a      	b.n	8007bae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d002      	beq.n	8007ba4 <USB_GetDevSpeed+0x32>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b06      	cmp	r3, #6
 8007ba2:	d102      	bne.n	8007baa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	75fb      	strb	r3, [r7, #23]
 8007ba8:	e001      	b.n	8007bae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007baa:	230f      	movs	r3, #15
 8007bac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	371c      	adds	r7, #28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	785b      	ldrb	r3, [r3, #1]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d13a      	bne.n	8007c4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 030f 	and.w	r3, r3, #15
 8007be8:	2101      	movs	r1, #1
 8007bea:	fa01 f303 	lsl.w	r3, r1, r3
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	68f9      	ldr	r1, [r7, #12]
 8007bf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d155      	bne.n	8007cbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	791b      	ldrb	r3, [r3, #4]
 8007c2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	059b      	lsls	r3, r3, #22
 8007c32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c34:	4313      	orrs	r3, r2
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	e036      	b.n	8007cbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c54:	69da      	ldr	r2, [r3, #28]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	2101      	movs	r1, #1
 8007c60:	fa01 f303 	lsl.w	r3, r1, r3
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d11a      	bne.n	8007cbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	791b      	ldrb	r3, [r3, #4]
 8007ca0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ca2:	430b      	orrs	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	0151      	lsls	r1, r2, #5
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	440a      	add	r2, r1
 8007cae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d161      	bne.n	8007dac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cfe:	d11f      	bne.n	8007d40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	0151      	lsls	r1, r2, #5
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	440a      	add	r2, r1
 8007d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f003 030f 	and.w	r3, r3, #15
 8007d50:	2101      	movs	r1, #1
 8007d52:	fa01 f303 	lsl.w	r3, r1, r3
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d60:	4013      	ands	r3, r2
 8007d62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	2101      	movs	r1, #1
 8007d76:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	43db      	mvns	r3, r3
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d84:	4013      	ands	r3, r2
 8007d86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	0159      	lsls	r1, r3, #5
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	440b      	add	r3, r1
 8007d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da2:	4619      	mov	r1, r3
 8007da4:	4b35      	ldr	r3, [pc, #212]	@ (8007e7c <USB_DeactivateEndpoint+0x1b0>)
 8007da6:	4013      	ands	r3, r2
 8007da8:	600b      	str	r3, [r1, #0]
 8007daa:	e060      	b.n	8007e6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dc2:	d11f      	bne.n	8007e04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	0151      	lsls	r1, r2, #5
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	440a      	add	r2, r1
 8007dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007de2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	2101      	movs	r1, #1
 8007e16:	fa01 f303 	lsl.w	r3, r1, r3
 8007e1a:	041b      	lsls	r3, r3, #16
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	68f9      	ldr	r1, [r7, #12]
 8007e20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e24:	4013      	ands	r3, r2
 8007e26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e2e:	69da      	ldr	r2, [r3, #28]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	2101      	movs	r1, #1
 8007e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3e:	041b      	lsls	r3, r3, #16
 8007e40:	43db      	mvns	r3, r3
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e48:	4013      	ands	r3, r2
 8007e4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	0159      	lsls	r1, r3, #5
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	440b      	add	r3, r1
 8007e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e66:	4619      	mov	r1, r3
 8007e68:	4b05      	ldr	r3, [pc, #20]	@ (8007e80 <USB_DeactivateEndpoint+0x1b4>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	ec337800 	.word	0xec337800
 8007e80:	eff37800 	.word	0xeff37800

08007e84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b08a      	sub	sp, #40	@ 0x28
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	f040 817f 	bne.w	80081a4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d132      	bne.n	8007f14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	0151      	lsls	r1, r2, #5
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	440a      	add	r2, r1
 8007ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ec8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ecc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007ed0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ef0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f0c:	0cdb      	lsrs	r3, r3, #19
 8007f0e:	04db      	lsls	r3, r3, #19
 8007f10:	6113      	str	r3, [r2, #16]
 8007f12:	e097      	b.n	8008044 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f2e:	0cdb      	lsrs	r3, r3, #19
 8007f30:	04db      	lsls	r3, r3, #19
 8007f32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f56:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d11a      	bne.n	8007f94 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d903      	bls.n	8007f72 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	0151      	lsls	r1, r2, #5
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	440a      	add	r2, r1
 8007f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f90:	6113      	str	r3, [r2, #16]
 8007f92:	e044      	b.n	800801e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	1e5a      	subs	r2, r3, #1
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	8afb      	ldrh	r3, [r7, #22]
 8007fba:	04d9      	lsls	r1, r3, #19
 8007fbc:	4ba4      	ldr	r3, [pc, #656]	@ (8008250 <USB_EPStartXfer+0x3cc>)
 8007fbe:	400b      	ands	r3, r1
 8007fc0:	69b9      	ldr	r1, [r7, #24]
 8007fc2:	0148      	lsls	r0, r1, #5
 8007fc4:	69f9      	ldr	r1, [r7, #28]
 8007fc6:	4401      	add	r1, r0
 8007fc8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	791b      	ldrb	r3, [r3, #4]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d122      	bne.n	800801e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007ff6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008004:	691a      	ldr	r2, [r3, #16]
 8008006:	8afb      	ldrh	r3, [r7, #22]
 8008008:	075b      	lsls	r3, r3, #29
 800800a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800800e:	69b9      	ldr	r1, [r7, #24]
 8008010:	0148      	lsls	r0, r1, #5
 8008012:	69f9      	ldr	r1, [r7, #28]
 8008014:	4401      	add	r1, r0
 8008016:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800801a:	4313      	orrs	r3, r2
 800801c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008034:	69b9      	ldr	r1, [r7, #24]
 8008036:	0148      	lsls	r0, r1, #5
 8008038:	69f9      	ldr	r1, [r7, #28]
 800803a:	4401      	add	r1, r0
 800803c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008040:	4313      	orrs	r3, r2
 8008042:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d14b      	bne.n	80080e2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805e:	461a      	mov	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	791b      	ldrb	r3, [r3, #4]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d128      	bne.n	80080c0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807a:	2b00      	cmp	r3, #0
 800807c:	d110      	bne.n	80080a0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008098:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	e00f      	b.n	80080c0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080be:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	69fa      	ldr	r2, [r7, #28]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	e166      	b.n	80083b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008100:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	791b      	ldrb	r3, [r3, #4]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d015      	beq.n	8008136 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 814e 	beq.w	80083b0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800811a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f003 030f 	and.w	r3, r3, #15
 8008124:	2101      	movs	r1, #1
 8008126:	fa01 f303 	lsl.w	r3, r1, r3
 800812a:	69f9      	ldr	r1, [r7, #28]
 800812c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008130:	4313      	orrs	r3, r2
 8008132:	634b      	str	r3, [r1, #52]	@ 0x34
 8008134:	e13c      	b.n	80083b0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008142:	2b00      	cmp	r3, #0
 8008144:	d110      	bne.n	8008168 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008160:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	e00f      	b.n	8008188 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	440a      	add	r2, r1
 800817e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008186:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	68d9      	ldr	r1, [r3, #12]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	b298      	uxth	r0, r3
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	4603      	mov	r3, r0
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f9b9 	bl	8008514 <USB_WritePacket>
 80081a2:	e105      	b.n	80083b0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081be:	0cdb      	lsrs	r3, r3, #19
 80081c0:	04db      	lsls	r3, r3, #19
 80081c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80081e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80081e6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d132      	bne.n	8008254 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800821c:	69b9      	ldr	r1, [r7, #24]
 800821e:	0148      	lsls	r0, r1, #5
 8008220:	69f9      	ldr	r1, [r7, #28]
 8008222:	4401      	add	r1, r0
 8008224:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008228:	4313      	orrs	r3, r2
 800822a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	0151      	lsls	r1, r2, #5
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	440a      	add	r2, r1
 8008242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008246:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800824a:	6113      	str	r3, [r2, #16]
 800824c:	e062      	b.n	8008314 <USB_EPStartXfer+0x490>
 800824e:	bf00      	nop
 8008250:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d123      	bne.n	80082a4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008268:	691a      	ldr	r2, [r3, #16]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008272:	69b9      	ldr	r1, [r7, #24]
 8008274:	0148      	lsls	r0, r1, #5
 8008276:	69f9      	ldr	r1, [r7, #28]
 8008278:	4401      	add	r1, r0
 800827a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800827e:	4313      	orrs	r3, r2
 8008280:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800829c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082a0:	6113      	str	r3, [r2, #16]
 80082a2:	e037      	b.n	8008314 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	8afa      	ldrh	r2, [r7, #22]
 80082c0:	fb03 f202 	mul.w	r2, r3, r2
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	8afb      	ldrh	r3, [r7, #22]
 80082d8:	04d9      	lsls	r1, r3, #19
 80082da:	4b38      	ldr	r3, [pc, #224]	@ (80083bc <USB_EPStartXfer+0x538>)
 80082dc:	400b      	ands	r3, r1
 80082de:	69b9      	ldr	r1, [r7, #24]
 80082e0:	0148      	lsls	r0, r1, #5
 80082e2:	69f9      	ldr	r1, [r7, #28]
 80082e4:	4401      	add	r1, r0
 80082e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082ea:	4313      	orrs	r3, r2
 80082ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008304:	69b9      	ldr	r1, [r7, #24]
 8008306:	0148      	lsls	r0, r1, #5
 8008308:	69f9      	ldr	r1, [r7, #28]
 800830a:	4401      	add	r1, r0
 800830c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008310:	4313      	orrs	r3, r2
 8008312:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d10d      	bne.n	8008336 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d009      	beq.n	8008336 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	68d9      	ldr	r1, [r3, #12]
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008332:	460a      	mov	r2, r1
 8008334:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	791b      	ldrb	r3, [r3, #4]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d128      	bne.n	8008390 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834a:	2b00      	cmp	r3, #0
 800834c:	d110      	bne.n	8008370 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	0151      	lsls	r1, r2, #5
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	440a      	add	r2, r1
 8008364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008368:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	e00f      	b.n	8008390 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	0151      	lsls	r1, r2, #5
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	440a      	add	r2, r1
 8008386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800838a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800838e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3720      	adds	r7, #32
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	1ff80000 	.word	0x1ff80000

080083c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d14a      	bne.n	8008474 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083f6:	f040 8086 	bne.w	8008506 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	7812      	ldrb	r2, [r2, #0]
 800840e:	0151      	lsls	r1, r2, #5
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	440a      	add	r2, r1
 8008414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008418:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800841c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	7812      	ldrb	r2, [r2, #0]
 8008432:	0151      	lsls	r1, r2, #5
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	440a      	add	r2, r1
 8008438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800843c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008440:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3301      	adds	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800844e:	4293      	cmp	r3, r2
 8008450:	d902      	bls.n	8008458 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	75fb      	strb	r3, [r7, #23]
          break;
 8008456:	e056      	b.n	8008506 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800846c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008470:	d0e7      	beq.n	8008442 <USB_EPStopXfer+0x82>
 8008472:	e048      	b.n	8008506 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800848c:	d13b      	bne.n	8008506 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	7812      	ldrb	r2, [r2, #0]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	0151      	lsls	r1, r2, #5
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d902      	bls.n	80084ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	75fb      	strb	r3, [r7, #23]
          break;
 80084ea:	e00c      	b.n	8008506 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008504:	d0e7      	beq.n	80084d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
}
 8008508:	4618      	mov	r0, r3
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008514:	b480      	push	{r7}
 8008516:	b089      	sub	sp, #36	@ 0x24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4611      	mov	r1, r2
 8008520:	461a      	mov	r2, r3
 8008522:	460b      	mov	r3, r1
 8008524:	71fb      	strb	r3, [r7, #7]
 8008526:	4613      	mov	r3, r2
 8008528:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008532:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008536:	2b00      	cmp	r3, #0
 8008538:	d123      	bne.n	8008582 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800853a:	88bb      	ldrh	r3, [r7, #4]
 800853c:	3303      	adds	r3, #3
 800853e:	089b      	lsrs	r3, r3, #2
 8008540:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008542:	2300      	movs	r3, #0
 8008544:	61bb      	str	r3, [r7, #24]
 8008546:	e018      	b.n	800857a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	031a      	lsls	r2, r3, #12
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	4413      	add	r3, r2
 8008550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008554:	461a      	mov	r2, r3
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	3301      	adds	r3, #1
 8008560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	3301      	adds	r3, #1
 8008566:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	3301      	adds	r3, #1
 800856c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	3301      	adds	r3, #1
 8008572:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	3301      	adds	r3, #1
 8008578:	61bb      	str	r3, [r7, #24]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	429a      	cmp	r2, r3
 8008580:	d3e2      	bcc.n	8008548 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3724      	adds	r7, #36	@ 0x24
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008590:	b480      	push	{r7}
 8008592:	b08b      	sub	sp, #44	@ 0x2c
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80085a6:	88fb      	ldrh	r3, [r7, #6]
 80085a8:	089b      	lsrs	r3, r3, #2
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	f003 0303 	and.w	r3, r3, #3
 80085b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085b6:	2300      	movs	r3, #0
 80085b8:	623b      	str	r3, [r7, #32]
 80085ba:	e014      	b.n	80085e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	3301      	adds	r3, #1
 80085cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	3301      	adds	r3, #1
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	3301      	adds	r3, #1
 80085d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	3301      	adds	r3, #1
 80085de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	3301      	adds	r3, #1
 80085e4:	623b      	str	r3, [r7, #32]
 80085e6:	6a3a      	ldr	r2, [r7, #32]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d3e6      	bcc.n	80085bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085ee:	8bfb      	ldrh	r3, [r7, #30]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01e      	beq.n	8008632 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085fe:	461a      	mov	r2, r3
 8008600:	f107 0310 	add.w	r3, r7, #16
 8008604:	6812      	ldr	r2, [r2, #0]
 8008606:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
 8008614:	b2da      	uxtb	r2, r3
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	701a      	strb	r2, [r3, #0]
      i++;
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	3301      	adds	r3, #1
 800861e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008622:	3301      	adds	r3, #1
 8008624:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008626:	8bfb      	ldrh	r3, [r7, #30]
 8008628:	3b01      	subs	r3, #1
 800862a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800862c:	8bfb      	ldrh	r3, [r7, #30]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1ea      	bne.n	8008608 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008634:	4618      	mov	r0, r3
 8008636:	372c      	adds	r7, #44	@ 0x2c
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	785b      	ldrb	r3, [r3, #1]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d12c      	bne.n	80086b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	db12      	blt.n	8008694 <USB_EPSetStall+0x54>
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00f      	beq.n	8008694 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	440a      	add	r2, r1
 800868a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800868e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008692:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	e02b      	b.n	800870e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	db12      	blt.n	80086ee <USB_EPSetStall+0xae>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00f      	beq.n	80086ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	0151      	lsls	r1, r2, #5
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	440a      	add	r2, r1
 8008704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008708:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800870c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d128      	bne.n	800878a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	0151      	lsls	r1, r2, #5
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	440a      	add	r2, r1
 800874e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008752:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008756:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	791b      	ldrb	r3, [r3, #4]
 800875c:	2b03      	cmp	r3, #3
 800875e:	d003      	beq.n	8008768 <USB_EPClearStall+0x4c>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	791b      	ldrb	r3, [r3, #4]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d138      	bne.n	80087da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	440a      	add	r2, r1
 800877e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e027      	b.n	80087da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	791b      	ldrb	r3, [r3, #4]
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d003      	beq.n	80087ba <USB_EPClearStall+0x9e>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	791b      	ldrb	r3, [r3, #4]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d10f      	bne.n	80087da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008806:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800880a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800881c:	68f9      	ldr	r1, [r7, #12]
 800881e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008822:	4313      	orrs	r3, r2
 8008824:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800884e:	f023 0303 	bic.w	r3, r3, #3
 8008852:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008862:	f023 0302 	bic.w	r3, r3, #2
 8008866:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008876:	b480      	push	{r7}
 8008878:	b085      	sub	sp, #20
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008890:	f023 0303 	bic.w	r3, r3, #3
 8008894:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088a4:	f043 0302 	orr.w	r3, r3, #2
 80088a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	4013      	ands	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088d0:	68fb      	ldr	r3, [r7, #12]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	4013      	ands	r3, r2
 8008900:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	0c1b      	lsrs	r3, r3, #16
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	4013      	ands	r3, r2
 8008934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	b29b      	uxth	r3, r3
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	4013      	ands	r3, r2
 8008972:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008974:	68bb      	ldr	r3, [r7, #8]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008982:	b480      	push	{r7}
 8008984:	b087      	sub	sp, #28
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80089a6:	78fb      	ldrb	r3, [r7, #3]
 80089a8:	f003 030f 	and.w	r3, r3, #15
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	fa22 f303 	lsr.w	r3, r2, r3
 80089b2:	01db      	lsls	r3, r3, #7
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4013      	ands	r3, r2
 80089ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089d0:	68bb      	ldr	r3, [r7, #8]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f003 0301 	and.w	r3, r3, #1
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008a18:	f023 0307 	bic.w	r3, r3, #7
 8008a1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	333c      	adds	r3, #60	@ 0x3c
 8008a56:	3304      	adds	r3, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	4a26      	ldr	r2, [pc, #152]	@ (8008af8 <USB_EP0_OutStart+0xb8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d90a      	bls.n	8008a7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a74:	d101      	bne.n	8008a7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e037      	b.n	8008aea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a80:	461a      	mov	r2, r3
 8008a82:	2300      	movs	r3, #0
 8008a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aa8:	f043 0318 	orr.w	r3, r3, #24
 8008aac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008abc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008ac0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008ac2:	7afb      	ldrb	r3, [r7, #11]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d10f      	bne.n	8008ae8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ace:	461a      	mov	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ae2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008ae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	4f54300a 	.word	0x4f54300a

08008afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b14:	d901      	bls.n	8008b1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e01b      	b.n	8008b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	daf2      	bge.n	8008b08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f043 0201 	orr.w	r2, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3301      	adds	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b3e:	d901      	bls.n	8008b44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e006      	b.n	8008b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d0f0      	beq.n	8008b32 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b6c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008b70:	f002 fc9e 	bl	800b4b0 <USBD_static_malloc>
 8008b74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d109      	bne.n	8008b90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32b0      	adds	r2, #176	@ 0xb0
 8008b86:	2100      	movs	r1, #0
 8008b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e0d4      	b.n	8008d3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008b90:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b94:	2100      	movs	r1, #0
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f003 fa4b 	bl	800c032 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	32b0      	adds	r2, #176	@ 0xb0
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	32b0      	adds	r2, #176	@ 0xb0
 8008bb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	7c1b      	ldrb	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d138      	bne.n	8008c3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008bc8:	4b5e      	ldr	r3, [pc, #376]	@ (8008d44 <USBD_CDC_Init+0x1e4>)
 8008bca:	7819      	ldrb	r1, [r3, #0]
 8008bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f002 fb49 	bl	800b26a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8008d44 <USBD_CDC_Init+0x1e4>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f003 020f 	and.w	r2, r3, #15
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	3324      	adds	r3, #36	@ 0x24
 8008bee:	2201      	movs	r2, #1
 8008bf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bf2:	4b55      	ldr	r3, [pc, #340]	@ (8008d48 <USBD_CDC_Init+0x1e8>)
 8008bf4:	7819      	ldrb	r1, [r3, #0]
 8008bf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f002 fb34 	bl	800b26a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c02:	4b51      	ldr	r3, [pc, #324]	@ (8008d48 <USBD_CDC_Init+0x1e8>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	f003 020f 	and.w	r2, r3, #15
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8008d4c <USBD_CDC_Init+0x1ec>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f003 020f 	and.w	r2, r3, #15
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	3326      	adds	r3, #38	@ 0x26
 8008c34:	2210      	movs	r2, #16
 8008c36:	801a      	strh	r2, [r3, #0]
 8008c38:	e035      	b.n	8008ca6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c3a:	4b42      	ldr	r3, [pc, #264]	@ (8008d44 <USBD_CDC_Init+0x1e4>)
 8008c3c:	7819      	ldrb	r1, [r3, #0]
 8008c3e:	2340      	movs	r3, #64	@ 0x40
 8008c40:	2202      	movs	r2, #2
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f002 fb11 	bl	800b26a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008c48:	4b3e      	ldr	r3, [pc, #248]	@ (8008d44 <USBD_CDC_Init+0x1e4>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 020f 	and.w	r2, r3, #15
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3324      	adds	r3, #36	@ 0x24
 8008c5e:	2201      	movs	r2, #1
 8008c60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c62:	4b39      	ldr	r3, [pc, #228]	@ (8008d48 <USBD_CDC_Init+0x1e8>)
 8008c64:	7819      	ldrb	r1, [r3, #0]
 8008c66:	2340      	movs	r3, #64	@ 0x40
 8008c68:	2202      	movs	r2, #2
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f002 fafd 	bl	800b26a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c70:	4b35      	ldr	r3, [pc, #212]	@ (8008d48 <USBD_CDC_Init+0x1e8>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f003 020f 	and.w	r2, r3, #15
 8008c78:	6879      	ldr	r1, [r7, #4]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c88:	2201      	movs	r2, #1
 8008c8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8008d4c <USBD_CDC_Init+0x1ec>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f003 020f 	and.w	r2, r3, #15
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3326      	adds	r3, #38	@ 0x26
 8008ca2:	2210      	movs	r2, #16
 8008ca4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ca6:	4b29      	ldr	r3, [pc, #164]	@ (8008d4c <USBD_CDC_Init+0x1ec>)
 8008ca8:	7819      	ldrb	r1, [r3, #0]
 8008caa:	2308      	movs	r3, #8
 8008cac:	2203      	movs	r2, #3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f002 fadb 	bl	800b26a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008cb4:	4b25      	ldr	r3, [pc, #148]	@ (8008d4c <USBD_CDC_Init+0x1ec>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 020f 	and.w	r2, r3, #15
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3324      	adds	r3, #36	@ 0x24
 8008cca:	2201      	movs	r2, #1
 8008ccc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	33b0      	adds	r3, #176	@ 0xb0
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008d04:	2302      	movs	r3, #2
 8008d06:	e018      	b.n	8008d3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	7c1b      	ldrb	r3, [r3, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d10:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <USBD_CDC_Init+0x1e8>)
 8008d12:	7819      	ldrb	r1, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f002 fb92 	bl	800b448 <USBD_LL_PrepareReceive>
 8008d24:	e008      	b.n	8008d38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d26:	4b08      	ldr	r3, [pc, #32]	@ (8008d48 <USBD_CDC_Init+0x1e8>)
 8008d28:	7819      	ldrb	r1, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d30:	2340      	movs	r3, #64	@ 0x40
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f002 fb88 	bl	800b448 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	200000b3 	.word	0x200000b3
 8008d48:	200000b4 	.word	0x200000b4
 8008d4c:	200000b5 	.word	0x200000b5

08008d50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8008e48 <USBD_CDC_DeInit+0xf8>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f002 faa7 	bl	800b2b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008d68:	4b37      	ldr	r3, [pc, #220]	@ (8008e48 <USBD_CDC_DeInit+0xf8>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f003 020f 	and.w	r2, r3, #15
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	440b      	add	r3, r1
 8008d7c:	3324      	adds	r3, #36	@ 0x24
 8008d7e:	2200      	movs	r2, #0
 8008d80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008d82:	4b32      	ldr	r3, [pc, #200]	@ (8008e4c <USBD_CDC_DeInit+0xfc>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f002 fa94 	bl	800b2b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008e4c <USBD_CDC_DeInit+0xfc>)
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	f003 020f 	and.w	r2, r3, #15
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008da6:	2200      	movs	r2, #0
 8008da8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008daa:	4b29      	ldr	r3, [pc, #164]	@ (8008e50 <USBD_CDC_DeInit+0x100>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f002 fa80 	bl	800b2b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008db6:	4b26      	ldr	r3, [pc, #152]	@ (8008e50 <USBD_CDC_DeInit+0x100>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	f003 020f 	and.w	r2, r3, #15
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	3324      	adds	r3, #36	@ 0x24
 8008dcc:	2200      	movs	r2, #0
 8008dce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e50 <USBD_CDC_DeInit+0x100>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	f003 020f 	and.w	r2, r3, #15
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	3326      	adds	r3, #38	@ 0x26
 8008de6:	2200      	movs	r2, #0
 8008de8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	32b0      	adds	r2, #176	@ 0xb0
 8008df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01f      	beq.n	8008e3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	33b0      	adds	r3, #176	@ 0xb0
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	32b0      	adds	r2, #176	@ 0xb0
 8008e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 fb54 	bl	800b4cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	32b0      	adds	r2, #176	@ 0xb0
 8008e2e:	2100      	movs	r1, #0
 8008e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200000b3 	.word	0x200000b3
 8008e4c:	200000b4 	.word	0x200000b4
 8008e50:	200000b5 	.word	0x200000b5

08008e54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	32b0      	adds	r2, #176	@ 0xb0
 8008e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e0bf      	b.n	8009004 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d050      	beq.n	8008f32 <USBD_CDC_Setup+0xde>
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	f040 80af 	bne.w	8008ff4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	88db      	ldrh	r3, [r3, #6]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d03a      	beq.n	8008f14 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	b25b      	sxtb	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	da1b      	bge.n	8008ee0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	33b0      	adds	r3, #176	@ 0xb0
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008ebe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	88d2      	ldrh	r2, [r2, #6]
 8008ec4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	88db      	ldrh	r3, [r3, #6]
 8008eca:	2b07      	cmp	r3, #7
 8008ecc:	bf28      	it	cs
 8008ece:	2307      	movcs	r3, #7
 8008ed0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	89fa      	ldrh	r2, [r7, #14]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 fd93 	bl	800aa04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008ede:	e090      	b.n	8009002 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	785a      	ldrb	r2, [r3, #1]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	88db      	ldrh	r3, [r3, #6]
 8008eee:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ef0:	d803      	bhi.n	8008efa <USBD_CDC_Setup+0xa6>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	88db      	ldrh	r3, [r3, #6]
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	e000      	b.n	8008efc <USBD_CDC_Setup+0xa8>
 8008efa:	2240      	movs	r2, #64	@ 0x40
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008f02:	6939      	ldr	r1, [r7, #16]
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fda5 	bl	800aa5c <USBD_CtlPrepareRx>
      break;
 8008f12:	e076      	b.n	8009002 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	33b0      	adds	r3, #176	@ 0xb0
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	7850      	ldrb	r0, [r2, #1]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	4798      	blx	r3
      break;
 8008f30:	e067      	b.n	8009002 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	785b      	ldrb	r3, [r3, #1]
 8008f36:	2b0b      	cmp	r3, #11
 8008f38:	d851      	bhi.n	8008fde <USBD_CDC_Setup+0x18a>
 8008f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f40 <USBD_CDC_Setup+0xec>)
 8008f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f40:	08008f71 	.word	0x08008f71
 8008f44:	08008fed 	.word	0x08008fed
 8008f48:	08008fdf 	.word	0x08008fdf
 8008f4c:	08008fdf 	.word	0x08008fdf
 8008f50:	08008fdf 	.word	0x08008fdf
 8008f54:	08008fdf 	.word	0x08008fdf
 8008f58:	08008fdf 	.word	0x08008fdf
 8008f5c:	08008fdf 	.word	0x08008fdf
 8008f60:	08008fdf 	.word	0x08008fdf
 8008f64:	08008fdf 	.word	0x08008fdf
 8008f68:	08008f9b 	.word	0x08008f9b
 8008f6c:	08008fc5 	.word	0x08008fc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d107      	bne.n	8008f8c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f7c:	f107 030a 	add.w	r3, r7, #10
 8008f80:	2202      	movs	r2, #2
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 fd3d 	bl	800aa04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f8a:	e032      	b.n	8008ff2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 fcbb 	bl	800a90a <USBD_CtlError>
            ret = USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	75fb      	strb	r3, [r7, #23]
          break;
 8008f98:	e02b      	b.n	8008ff2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d107      	bne.n	8008fb6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008fa6:	f107 030d 	add.w	r3, r7, #13
 8008faa:	2201      	movs	r2, #1
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 fd28 	bl	800aa04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fb4:	e01d      	b.n	8008ff2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f001 fca6 	bl	800a90a <USBD_CtlError>
            ret = USBD_FAIL;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fc2:	e016      	b.n	8008ff2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d00f      	beq.n	8008ff0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 fc99 	bl	800a90a <USBD_CtlError>
            ret = USBD_FAIL;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008fdc:	e008      	b.n	8008ff0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 fc92 	bl	800a90a <USBD_CtlError>
          ret = USBD_FAIL;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8008fea:	e002      	b.n	8008ff2 <USBD_CDC_Setup+0x19e>
          break;
 8008fec:	bf00      	nop
 8008fee:	e008      	b.n	8009002 <USBD_CDC_Setup+0x1ae>
          break;
 8008ff0:	bf00      	nop
      }
      break;
 8008ff2:	e006      	b.n	8009002 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 fc87 	bl	800a90a <USBD_CtlError>
      ret = USBD_FAIL;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8009000:	bf00      	nop
  }

  return (uint8_t)ret;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800901e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	32b0      	adds	r2, #176	@ 0xb0
 800902a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009032:	2303      	movs	r3, #3
 8009034:	e065      	b.n	8009102 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	32b0      	adds	r2, #176	@ 0xb0
 8009040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009044:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	f003 020f 	and.w	r2, r3, #15
 800904c:	6879      	ldr	r1, [r7, #4]
 800904e:	4613      	mov	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	440b      	add	r3, r1
 8009058:	3318      	adds	r3, #24
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d02f      	beq.n	80090c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	f003 020f 	and.w	r2, r3, #15
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	440b      	add	r3, r1
 8009072:	3318      	adds	r3, #24
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	f003 010f 	and.w	r1, r3, #15
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	460b      	mov	r3, r1
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	440b      	add	r3, r1
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4403      	add	r3, r0
 8009088:	331c      	adds	r3, #28
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009096:	2b00      	cmp	r3, #0
 8009098:	d112      	bne.n	80090c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800909a:	78fb      	ldrb	r3, [r7, #3]
 800909c:	f003 020f 	and.w	r2, r3, #15
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	4613      	mov	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	440b      	add	r3, r1
 80090ac:	3318      	adds	r3, #24
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090b2:	78f9      	ldrb	r1, [r7, #3]
 80090b4:	2300      	movs	r3, #0
 80090b6:	2200      	movs	r2, #0
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f002 f9a4 	bl	800b406 <USBD_LL_Transmit>
 80090be:	e01f      	b.n	8009100 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	33b0      	adds	r3, #176	@ 0xb0
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d010      	beq.n	8009100 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	33b0      	adds	r3, #176	@ 0xb0
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80090fc:	78fa      	ldrb	r2, [r7, #3]
 80090fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	32b0      	adds	r2, #176	@ 0xb0
 8009120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009124:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	32b0      	adds	r2, #176	@ 0xb0
 8009130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009138:	2303      	movs	r3, #3
 800913a:	e01a      	b.n	8009172 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f002 f9a2 	bl	800b48a <USBD_LL_GetRxDataSize>
 8009146:	4602      	mov	r2, r0
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	33b0      	adds	r3, #176	@ 0xb0
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800916c:	4611      	mov	r1, r2
 800916e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	32b0      	adds	r2, #176	@ 0xb0
 800918c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009190:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009198:	2303      	movs	r3, #3
 800919a:	e024      	b.n	80091e6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	33b0      	adds	r3, #176	@ 0xb0
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d019      	beq.n	80091e4 <USBD_CDC_EP0_RxReady+0x6a>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80091b6:	2bff      	cmp	r3, #255	@ 0xff
 80091b8:	d014      	beq.n	80091e4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	33b0      	adds	r3, #176	@ 0xb0
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80091d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	22ff      	movs	r2, #255	@ 0xff
 80091e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091f8:	2182      	movs	r1, #130	@ 0x82
 80091fa:	4818      	ldr	r0, [pc, #96]	@ (800925c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091fc:	f000 fd4f 	bl	8009c9e <USBD_GetEpDesc>
 8009200:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009202:	2101      	movs	r1, #1
 8009204:	4815      	ldr	r0, [pc, #84]	@ (800925c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009206:	f000 fd4a 	bl	8009c9e <USBD_GetEpDesc>
 800920a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800920c:	2181      	movs	r1, #129	@ 0x81
 800920e:	4813      	ldr	r0, [pc, #76]	@ (800925c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009210:	f000 fd45 	bl	8009c9e <USBD_GetEpDesc>
 8009214:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2210      	movs	r2, #16
 8009220:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2200      	movs	r2, #0
 800922c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009230:	711a      	strb	r2, [r3, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d006      	beq.n	800924a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009244:	711a      	strb	r2, [r3, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2243      	movs	r2, #67	@ 0x43
 800924e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009250:	4b02      	ldr	r3, [pc, #8]	@ (800925c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000070 	.word	0x20000070

08009260 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009268:	2182      	movs	r1, #130	@ 0x82
 800926a:	4818      	ldr	r0, [pc, #96]	@ (80092cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800926c:	f000 fd17 	bl	8009c9e <USBD_GetEpDesc>
 8009270:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009272:	2101      	movs	r1, #1
 8009274:	4815      	ldr	r0, [pc, #84]	@ (80092cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009276:	f000 fd12 	bl	8009c9e <USBD_GetEpDesc>
 800927a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800927c:	2181      	movs	r1, #129	@ 0x81
 800927e:	4813      	ldr	r0, [pc, #76]	@ (80092cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009280:	f000 fd0d 	bl	8009c9e <USBD_GetEpDesc>
 8009284:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2210      	movs	r2, #16
 8009290:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d006      	beq.n	80092a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	2200      	movs	r2, #0
 800929c:	711a      	strb	r2, [r3, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f042 0202 	orr.w	r2, r2, #2
 80092a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d006      	beq.n	80092ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	711a      	strb	r2, [r3, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f042 0202 	orr.w	r2, r2, #2
 80092b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2243      	movs	r2, #67	@ 0x43
 80092be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092c0:	4b02      	ldr	r3, [pc, #8]	@ (80092cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000070 	.word	0x20000070

080092d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092d8:	2182      	movs	r1, #130	@ 0x82
 80092da:	4818      	ldr	r0, [pc, #96]	@ (800933c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092dc:	f000 fcdf 	bl	8009c9e <USBD_GetEpDesc>
 80092e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092e2:	2101      	movs	r1, #1
 80092e4:	4815      	ldr	r0, [pc, #84]	@ (800933c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092e6:	f000 fcda 	bl	8009c9e <USBD_GetEpDesc>
 80092ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092ec:	2181      	movs	r1, #129	@ 0x81
 80092ee:	4813      	ldr	r0, [pc, #76]	@ (800933c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092f0:	f000 fcd5 	bl	8009c9e <USBD_GetEpDesc>
 80092f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2210      	movs	r2, #16
 8009300:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d006      	beq.n	8009316 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2200      	movs	r2, #0
 800930c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009310:	711a      	strb	r2, [r3, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d006      	beq.n	800932a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009324:	711a      	strb	r2, [r3, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2243      	movs	r2, #67	@ 0x43
 800932e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009330:	4b02      	ldr	r3, [pc, #8]	@ (800933c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000070 	.word	0x20000070

08009340 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	220a      	movs	r2, #10
 800934c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800934e:	4b03      	ldr	r3, [pc, #12]	@ (800935c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	2000002c 	.word	0x2000002c

08009360 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009370:	2303      	movs	r3, #3
 8009372:	e009      	b.n	8009388 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	33b0      	adds	r3, #176	@ 0xb0
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	32b0      	adds	r2, #176	@ 0xb0
 80093aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e008      	b.n	80093cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	32b0      	adds	r2, #176	@ 0xb0
 80093ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e004      	b.n	8009406 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
	...

08009414 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	32b0      	adds	r2, #176	@ 0xb0
 8009426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800942c:	2301      	movs	r3, #1
 800942e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009436:	2303      	movs	r3, #3
 8009438:	e025      	b.n	8009486 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009440:	2b00      	cmp	r3, #0
 8009442:	d11f      	bne.n	8009484 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2201      	movs	r2, #1
 8009448:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800944c:	4b10      	ldr	r3, [pc, #64]	@ (8009490 <USBD_CDC_TransmitPacket+0x7c>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 020f 	and.w	r2, r3, #15
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4403      	add	r3, r0
 8009466:	3318      	adds	r3, #24
 8009468:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800946a:	4b09      	ldr	r3, [pc, #36]	@ (8009490 <USBD_CDC_TransmitPacket+0x7c>)
 800946c:	7819      	ldrb	r1, [r3, #0]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f001 ffc3 	bl	800b406 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009484:	7bfb      	ldrb	r3, [r7, #15]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200000b3 	.word	0x200000b3

08009494 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	32b0      	adds	r2, #176	@ 0xb0
 80094a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	32b0      	adds	r2, #176	@ 0xb0
 80094b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80094be:	2303      	movs	r3, #3
 80094c0:	e018      	b.n	80094f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	7c1b      	ldrb	r3, [r3, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094ca:	4b0c      	ldr	r3, [pc, #48]	@ (80094fc <USBD_CDC_ReceivePacket+0x68>)
 80094cc:	7819      	ldrb	r1, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 ffb5 	bl	800b448 <USBD_LL_PrepareReceive>
 80094de:	e008      	b.n	80094f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094e0:	4b06      	ldr	r3, [pc, #24]	@ (80094fc <USBD_CDC_ReceivePacket+0x68>)
 80094e2:	7819      	ldrb	r1, [r3, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094ea:	2340      	movs	r3, #64	@ 0x40
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 ffab 	bl	800b448 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200000b4 	.word	0x200000b4

08009500 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009514:	2303      	movs	r3, #3
 8009516:	e01f      	b.n	8009558 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	79fa      	ldrb	r2, [r7, #7]
 800954a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f001 fe25 	bl	800b19c <USBD_LL_Init>
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009556:	7dfb      	ldrb	r3, [r7, #23]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	e025      	b.n	80095c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	32ae      	adds	r2, #174	@ 0xae
 800958a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00f      	beq.n	80095b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	32ae      	adds	r2, #174	@ 0xae
 800959e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a4:	f107 020e 	add.w	r2, r7, #14
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
 80095ac:	4602      	mov	r2, r0
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fe2d 	bl	800b234 <USBD_LL_Start>
 80095da:	4603      	mov	r3, r0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	460b      	mov	r3, r1
 8009604:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009610:	2b00      	cmp	r3, #0
 8009612:	d009      	beq.n	8009628 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	78fa      	ldrb	r2, [r7, #3]
 800961e:	4611      	mov	r1, r2
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	4798      	blx	r3
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009658:	2303      	movs	r3, #3
 800965a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	4618      	mov	r0, r3
 800967a:	f001 f90c 	bl	800a896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800968c:	461a      	mov	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800969a:	f003 031f 	and.w	r3, r3, #31
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d01a      	beq.n	80096d8 <USBD_LL_SetupStage+0x72>
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d822      	bhi.n	80096ec <USBD_LL_SetupStage+0x86>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <USBD_LL_SetupStage+0x4a>
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d00a      	beq.n	80096c4 <USBD_LL_SetupStage+0x5e>
 80096ae:	e01d      	b.n	80096ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fb63 	bl	8009d84 <USBD_StdDevReq>
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]
      break;
 80096c2:	e020      	b.n	8009706 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fbcb 	bl	8009e68 <USBD_StdItfReq>
 80096d2:	4603      	mov	r3, r0
 80096d4:	73fb      	strb	r3, [r7, #15]
      break;
 80096d6:	e016      	b.n	8009706 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fc2d 	bl	8009f40 <USBD_StdEPReq>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73fb      	strb	r3, [r7, #15]
      break;
 80096ea:	e00c      	b.n	8009706 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fdfa 	bl	800b2f4 <USBD_LL_StallEP>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
      break;
 8009704:	bf00      	nop
  }

  return ret;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	460b      	mov	r3, r1
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009722:	7afb      	ldrb	r3, [r7, #11]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d16e      	bne.n	8009806 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800972e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009736:	2b03      	cmp	r3, #3
 8009738:	f040 8098 	bne.w	800986c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	429a      	cmp	r2, r3
 8009746:	d913      	bls.n	8009770 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	1ad2      	subs	r2, r2, r3
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	4293      	cmp	r3, r2
 8009760:	bf28      	it	cs
 8009762:	4613      	movcs	r3, r2
 8009764:	461a      	mov	r2, r3
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f001 f994 	bl	800aa96 <USBD_CtlContinueRx>
 800976e:	e07d      	b.n	800986c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009776:	f003 031f 	and.w	r3, r3, #31
 800977a:	2b02      	cmp	r3, #2
 800977c:	d014      	beq.n	80097a8 <USBD_LL_DataOutStage+0x98>
 800977e:	2b02      	cmp	r3, #2
 8009780:	d81d      	bhi.n	80097be <USBD_LL_DataOutStage+0xae>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <USBD_LL_DataOutStage+0x7c>
 8009786:	2b01      	cmp	r3, #1
 8009788:	d003      	beq.n	8009792 <USBD_LL_DataOutStage+0x82>
 800978a:	e018      	b.n	80097be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	75bb      	strb	r3, [r7, #22]
            break;
 8009790:	e018      	b.n	80097c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009798:	b2db      	uxtb	r3, r3
 800979a:	4619      	mov	r1, r3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 fa64 	bl	8009c6a <USBD_CoreFindIF>
 80097a2:	4603      	mov	r3, r0
 80097a4:	75bb      	strb	r3, [r7, #22]
            break;
 80097a6:	e00d      	b.n	80097c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	4619      	mov	r1, r3
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fa66 	bl	8009c84 <USBD_CoreFindEP>
 80097b8:	4603      	mov	r3, r0
 80097ba:	75bb      	strb	r3, [r7, #22]
            break;
 80097bc:	e002      	b.n	80097c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	75bb      	strb	r3, [r7, #22]
            break;
 80097c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80097c4:	7dbb      	ldrb	r3, [r7, #22]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d119      	bne.n	80097fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d113      	bne.n	80097fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80097d6:	7dba      	ldrb	r2, [r7, #22]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	32ae      	adds	r2, #174	@ 0xae
 80097dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00b      	beq.n	80097fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80097e6:	7dba      	ldrb	r2, [r7, #22]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80097ee:	7dba      	ldrb	r2, [r7, #22]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	32ae      	adds	r2, #174	@ 0xae
 80097f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f001 f95a 	bl	800aab8 <USBD_CtlSendStatus>
 8009804:	e032      	b.n	800986c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800980c:	b2db      	uxtb	r3, r3
 800980e:	4619      	mov	r1, r3
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 fa37 	bl	8009c84 <USBD_CoreFindEP>
 8009816:	4603      	mov	r3, r0
 8009818:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800981a:	7dbb      	ldrb	r3, [r7, #22]
 800981c:	2bff      	cmp	r3, #255	@ 0xff
 800981e:	d025      	beq.n	800986c <USBD_LL_DataOutStage+0x15c>
 8009820:	7dbb      	ldrb	r3, [r7, #22]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d122      	bne.n	800986c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b03      	cmp	r3, #3
 8009830:	d117      	bne.n	8009862 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009832:	7dba      	ldrb	r2, [r7, #22]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	32ae      	adds	r2, #174	@ 0xae
 8009838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00f      	beq.n	8009862 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009842:	7dba      	ldrb	r2, [r7, #22]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800984a:	7dba      	ldrb	r2, [r7, #22]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	32ae      	adds	r2, #174	@ 0xae
 8009850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	7afa      	ldrb	r2, [r7, #11]
 8009858:	4611      	mov	r1, r2
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	4798      	blx	r3
 800985e:	4603      	mov	r3, r0
 8009860:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009862:	7dfb      	ldrb	r3, [r7, #23]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	e000      	b.n	800986e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b086      	sub	sp, #24
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	460b      	mov	r3, r1
 8009880:	607a      	str	r2, [r7, #4]
 8009882:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d16f      	bne.n	800996a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3314      	adds	r3, #20
 800988e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009896:	2b02      	cmp	r3, #2
 8009898:	d15a      	bne.n	8009950 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	689a      	ldr	r2, [r3, #8]
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d914      	bls.n	80098d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	689a      	ldr	r2, [r3, #8]
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	1ad2      	subs	r2, r2, r3
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	461a      	mov	r2, r3
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f001 f8bc 	bl	800aa3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098c2:	2300      	movs	r3, #0
 80098c4:	2200      	movs	r2, #0
 80098c6:	2100      	movs	r1, #0
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f001 fdbd 	bl	800b448 <USBD_LL_PrepareReceive>
 80098ce:	e03f      	b.n	8009950 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d11c      	bne.n	8009916 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d316      	bcc.n	8009916 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d20f      	bcs.n	8009916 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098f6:	2200      	movs	r2, #0
 80098f8:	2100      	movs	r1, #0
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f001 f89d 	bl	800aa3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009908:	2300      	movs	r3, #0
 800990a:	2200      	movs	r2, #0
 800990c:	2100      	movs	r1, #0
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f001 fd9a 	bl	800b448 <USBD_LL_PrepareReceive>
 8009914:	e01c      	b.n	8009950 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b03      	cmp	r3, #3
 8009920:	d10f      	bne.n	8009942 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009942:	2180      	movs	r1, #128	@ 0x80
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f001 fcd5 	bl	800b2f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f001 f8c7 	bl	800aade <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d03a      	beq.n	80099d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff fe42 	bl	80095e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009968:	e032      	b.n	80099d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009970:	b2db      	uxtb	r3, r3
 8009972:	4619      	mov	r1, r3
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 f985 	bl	8009c84 <USBD_CoreFindEP>
 800997a:	4603      	mov	r3, r0
 800997c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800997e:	7dfb      	ldrb	r3, [r7, #23]
 8009980:	2bff      	cmp	r3, #255	@ 0xff
 8009982:	d025      	beq.n	80099d0 <USBD_LL_DataInStage+0x15a>
 8009984:	7dfb      	ldrb	r3, [r7, #23]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d122      	bne.n	80099d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b03      	cmp	r3, #3
 8009994:	d11c      	bne.n	80099d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009996:	7dfa      	ldrb	r2, [r7, #23]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	32ae      	adds	r2, #174	@ 0xae
 800999c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d014      	beq.n	80099d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80099a6:	7dfa      	ldrb	r2, [r7, #23]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80099ae:	7dfa      	ldrb	r2, [r7, #23]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	32ae      	adds	r2, #174	@ 0xae
 80099b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	7afa      	ldrb	r2, [r7, #11]
 80099bc:	4611      	mov	r1, r2
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	4798      	blx	r3
 80099c2:	4603      	mov	r3, r0
 80099c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80099c6:	7dbb      	ldrb	r3, [r7, #22]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80099cc:	7dbb      	ldrb	r3, [r7, #22]
 80099ce:	e000      	b.n	80099d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d014      	beq.n	8009a40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00e      	beq.n	8009a40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	6852      	ldr	r2, [r2, #4]
 8009a2e:	b2d2      	uxtb	r2, r2
 8009a30:	4611      	mov	r1, r2
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a40:	2340      	movs	r3, #64	@ 0x40
 8009a42:	2200      	movs	r2, #0
 8009a44:	2100      	movs	r1, #0
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 fc0f 	bl	800b26a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2240      	movs	r2, #64	@ 0x40
 8009a58:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a5c:	2340      	movs	r3, #64	@ 0x40
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2180      	movs	r1, #128	@ 0x80
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 fc01 	bl	800b26a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2240      	movs	r2, #64	@ 0x40
 8009a72:	621a      	str	r2, [r3, #32]

  return ret;
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	78fa      	ldrb	r2, [r7, #3]
 8009a8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d006      	beq.n	8009ac0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2204      	movs	r2, #4
 8009ac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d106      	bne.n	8009af8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d110      	bne.n	8009b3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00b      	beq.n	8009b3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	32ae      	adds	r2, #174	@ 0xae
 8009b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e01c      	b.n	8009ba2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d115      	bne.n	8009ba0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	32ae      	adds	r2, #174	@ 0xae
 8009b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00b      	beq.n	8009ba0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	32ae      	adds	r2, #174	@ 0xae
 8009b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	78fa      	ldrb	r2, [r7, #3]
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	32ae      	adds	r2, #174	@ 0xae
 8009bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e01c      	b.n	8009c06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d115      	bne.n	8009c04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	32ae      	adds	r2, #174	@ 0xae
 8009be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	32ae      	adds	r2, #174	@ 0xae
 8009bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfc:	78fa      	ldrb	r2, [r7, #3]
 8009bfe:	4611      	mov	r1, r2
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00e      	beq.n	8009c60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	6852      	ldr	r2, [r2, #4]
 8009c4e:	b2d2      	uxtb	r2, r2
 8009c50:	4611      	mov	r1, r2
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4798      	blx	r3
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009c76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009c90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b086      	sub	sp, #24
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	7812      	ldrb	r2, [r2, #0]
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d91f      	bls.n	8009d04 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009cca:	e013      	b.n	8009cf4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ccc:	f107 030a 	add.w	r3, r7, #10
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6978      	ldr	r0, [r7, #20]
 8009cd4:	f000 f81b 	bl	8009d0e <USBD_GetNextDesc>
 8009cd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	2b05      	cmp	r3, #5
 8009ce0:	d108      	bne.n	8009cf4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	789b      	ldrb	r3, [r3, #2]
 8009cea:	78fa      	ldrb	r2, [r7, #3]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d008      	beq.n	8009d02 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	885b      	ldrh	r3, [r3, #2]
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	897b      	ldrh	r3, [r7, #10]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d8e5      	bhi.n	8009ccc <USBD_GetEpDesc+0x2e>
 8009d00:	e000      	b.n	8009d04 <USBD_GetEpDesc+0x66>
          break;
 8009d02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d04:	693b      	ldr	r3, [r7, #16]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b085      	sub	sp, #20
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	7812      	ldrb	r2, [r2, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4413      	add	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d38:	68fb      	ldr	r3, [r7, #12]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b087      	sub	sp, #28
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009d64:	8a3b      	ldrh	r3, [r7, #16]
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	b21a      	sxth	r2, r3
 8009d6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	b21b      	sxth	r3, r3
 8009d72:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009d74:	89fb      	ldrh	r3, [r7, #14]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
	...

08009d84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d9a:	2b40      	cmp	r3, #64	@ 0x40
 8009d9c:	d005      	beq.n	8009daa <USBD_StdDevReq+0x26>
 8009d9e:	2b40      	cmp	r3, #64	@ 0x40
 8009da0:	d857      	bhi.n	8009e52 <USBD_StdDevReq+0xce>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00f      	beq.n	8009dc6 <USBD_StdDevReq+0x42>
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d153      	bne.n	8009e52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	32ae      	adds	r2, #174	@ 0xae
 8009db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	4798      	blx	r3
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc4:	e04a      	b.n	8009e5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	2b09      	cmp	r3, #9
 8009dcc:	d83b      	bhi.n	8009e46 <USBD_StdDevReq+0xc2>
 8009dce:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <USBD_StdDevReq+0x50>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009e29 	.word	0x08009e29
 8009dd8:	08009e3d 	.word	0x08009e3d
 8009ddc:	08009e47 	.word	0x08009e47
 8009de0:	08009e33 	.word	0x08009e33
 8009de4:	08009e47 	.word	0x08009e47
 8009de8:	08009e07 	.word	0x08009e07
 8009dec:	08009dfd 	.word	0x08009dfd
 8009df0:	08009e47 	.word	0x08009e47
 8009df4:	08009e1f 	.word	0x08009e1f
 8009df8:	08009e11 	.word	0x08009e11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fa3c 	bl	800a27c <USBD_GetDescriptor>
          break;
 8009e04:	e024      	b.n	8009e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fba1 	bl	800a550 <USBD_SetAddress>
          break;
 8009e0e:	e01f      	b.n	8009e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fbe0 	bl	800a5d8 <USBD_SetConfig>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]
          break;
 8009e1c:	e018      	b.n	8009e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fc83 	bl	800a72c <USBD_GetConfig>
          break;
 8009e26:	e013      	b.n	8009e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fcb4 	bl	800a798 <USBD_GetStatus>
          break;
 8009e30:	e00e      	b.n	8009e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fce3 	bl	800a800 <USBD_SetFeature>
          break;
 8009e3a:	e009      	b.n	8009e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fd07 	bl	800a852 <USBD_ClrFeature>
          break;
 8009e44:	e004      	b.n	8009e50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fd5e 	bl	800a90a <USBD_CtlError>
          break;
 8009e4e:	bf00      	nop
      }
      break;
 8009e50:	e004      	b.n	8009e5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fd58 	bl	800a90a <USBD_CtlError>
      break;
 8009e5a:	bf00      	nop
  }

  return ret;
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop

08009e68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e7e:	2b40      	cmp	r3, #64	@ 0x40
 8009e80:	d005      	beq.n	8009e8e <USBD_StdItfReq+0x26>
 8009e82:	2b40      	cmp	r3, #64	@ 0x40
 8009e84:	d852      	bhi.n	8009f2c <USBD_StdItfReq+0xc4>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <USBD_StdItfReq+0x26>
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d14e      	bne.n	8009f2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	3b01      	subs	r3, #1
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d840      	bhi.n	8009f1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	889b      	ldrh	r3, [r3, #4]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d836      	bhi.n	8009f14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	889b      	ldrh	r3, [r3, #4]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7ff fedb 	bl	8009c6a <USBD_CoreFindIF>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2bff      	cmp	r3, #255	@ 0xff
 8009ebc:	d01d      	beq.n	8009efa <USBD_StdItfReq+0x92>
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d11a      	bne.n	8009efa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ec4:	7bba      	ldrb	r2, [r7, #14]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	32ae      	adds	r2, #174	@ 0xae
 8009eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00f      	beq.n	8009ef4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ed4:	7bba      	ldrb	r2, [r7, #14]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009edc:	7bba      	ldrb	r2, [r7, #14]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	32ae      	adds	r2, #174	@ 0xae
 8009ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ef2:	e004      	b.n	8009efe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ef8:	e001      	b.n	8009efe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009efa:	2303      	movs	r3, #3
 8009efc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	88db      	ldrh	r3, [r3, #6]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d110      	bne.n	8009f28 <USBD_StdItfReq+0xc0>
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10d      	bne.n	8009f28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fdd3 	bl	800aab8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f12:	e009      	b.n	8009f28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fcf7 	bl	800a90a <USBD_CtlError>
          break;
 8009f1c:	e004      	b.n	8009f28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fcf2 	bl	800a90a <USBD_CtlError>
          break;
 8009f26:	e000      	b.n	8009f2a <USBD_StdItfReq+0xc2>
          break;
 8009f28:	bf00      	nop
      }
      break;
 8009f2a:	e004      	b.n	8009f36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fceb 	bl	800a90a <USBD_CtlError>
      break;
 8009f34:	bf00      	nop
  }

  return ret;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	889b      	ldrh	r3, [r3, #4]
 8009f52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f5c:	2b40      	cmp	r3, #64	@ 0x40
 8009f5e:	d007      	beq.n	8009f70 <USBD_StdEPReq+0x30>
 8009f60:	2b40      	cmp	r3, #64	@ 0x40
 8009f62:	f200 817f 	bhi.w	800a264 <USBD_StdEPReq+0x324>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d02a      	beq.n	8009fc0 <USBD_StdEPReq+0x80>
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	f040 817a 	bne.w	800a264 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff fe85 	bl	8009c84 <USBD_CoreFindEP>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f7e:	7b7b      	ldrb	r3, [r7, #13]
 8009f80:	2bff      	cmp	r3, #255	@ 0xff
 8009f82:	f000 8174 	beq.w	800a26e <USBD_StdEPReq+0x32e>
 8009f86:	7b7b      	ldrb	r3, [r7, #13]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f040 8170 	bne.w	800a26e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009f8e:	7b7a      	ldrb	r2, [r7, #13]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009f96:	7b7a      	ldrb	r2, [r7, #13]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	32ae      	adds	r2, #174	@ 0xae
 8009f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 8163 	beq.w	800a26e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009fa8:	7b7a      	ldrb	r2, [r7, #13]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	32ae      	adds	r2, #174	@ 0xae
 8009fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	4798      	blx	r3
 8009fba:	4603      	mov	r3, r0
 8009fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009fbe:	e156      	b.n	800a26e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	785b      	ldrb	r3, [r3, #1]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d008      	beq.n	8009fda <USBD_StdEPReq+0x9a>
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	f300 8145 	bgt.w	800a258 <USBD_StdEPReq+0x318>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 809b 	beq.w	800a10a <USBD_StdEPReq+0x1ca>
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d03c      	beq.n	800a052 <USBD_StdEPReq+0x112>
 8009fd8:	e13e      	b.n	800a258 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d002      	beq.n	8009fec <USBD_StdEPReq+0xac>
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d016      	beq.n	800a018 <USBD_StdEPReq+0xd8>
 8009fea:	e02c      	b.n	800a046 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00d      	beq.n	800a00e <USBD_StdEPReq+0xce>
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
 8009ff4:	2b80      	cmp	r3, #128	@ 0x80
 8009ff6:	d00a      	beq.n	800a00e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 f979 	bl	800b2f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a002:	2180      	movs	r1, #128	@ 0x80
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 f975 	bl	800b2f4 <USBD_LL_StallEP>
 800a00a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a00c:	e020      	b.n	800a050 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fc7a 	bl	800a90a <USBD_CtlError>
              break;
 800a016:	e01b      	b.n	800a050 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	885b      	ldrh	r3, [r3, #2]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10e      	bne.n	800a03e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <USBD_StdEPReq+0xfe>
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b80      	cmp	r3, #128	@ 0x80
 800a02a:	d008      	beq.n	800a03e <USBD_StdEPReq+0xfe>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	88db      	ldrh	r3, [r3, #6]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 f95b 	bl	800b2f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fd3a 	bl	800aab8 <USBD_CtlSendStatus>

              break;
 800a044:	e004      	b.n	800a050 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fc5e 	bl	800a90a <USBD_CtlError>
              break;
 800a04e:	bf00      	nop
          }
          break;
 800a050:	e107      	b.n	800a262 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d002      	beq.n	800a064 <USBD_StdEPReq+0x124>
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d016      	beq.n	800a090 <USBD_StdEPReq+0x150>
 800a062:	e04b      	b.n	800a0fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00d      	beq.n	800a086 <USBD_StdEPReq+0x146>
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	2b80      	cmp	r3, #128	@ 0x80
 800a06e:	d00a      	beq.n	800a086 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 f93d 	bl	800b2f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a07a:	2180      	movs	r1, #128	@ 0x80
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 f939 	bl	800b2f4 <USBD_LL_StallEP>
 800a082:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a084:	e040      	b.n	800a108 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fc3e 	bl	800a90a <USBD_CtlError>
              break;
 800a08e:	e03b      	b.n	800a108 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	885b      	ldrh	r3, [r3, #2]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d136      	bne.n	800a106 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d004      	beq.n	800a0ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 f943 	bl	800b332 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fd03 	bl	800aab8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7ff fde4 	bl	8009c84 <USBD_CoreFindEP>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0c0:	7b7b      	ldrb	r3, [r7, #13]
 800a0c2:	2bff      	cmp	r3, #255	@ 0xff
 800a0c4:	d01f      	beq.n	800a106 <USBD_StdEPReq+0x1c6>
 800a0c6:	7b7b      	ldrb	r3, [r7, #13]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d11c      	bne.n	800a106 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a0cc:	7b7a      	ldrb	r2, [r7, #13]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a0d4:	7b7a      	ldrb	r2, [r7, #13]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	32ae      	adds	r2, #174	@ 0xae
 800a0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d010      	beq.n	800a106 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a0e4:	7b7a      	ldrb	r2, [r7, #13]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	32ae      	adds	r2, #174	@ 0xae
 800a0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	4798      	blx	r3
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a0fa:	e004      	b.n	800a106 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fc03 	bl	800a90a <USBD_CtlError>
              break;
 800a104:	e000      	b.n	800a108 <USBD_StdEPReq+0x1c8>
              break;
 800a106:	bf00      	nop
          }
          break;
 800a108:	e0ab      	b.n	800a262 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b02      	cmp	r3, #2
 800a114:	d002      	beq.n	800a11c <USBD_StdEPReq+0x1dc>
 800a116:	2b03      	cmp	r3, #3
 800a118:	d032      	beq.n	800a180 <USBD_StdEPReq+0x240>
 800a11a:	e097      	b.n	800a24c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d007      	beq.n	800a132 <USBD_StdEPReq+0x1f2>
 800a122:	7bbb      	ldrb	r3, [r7, #14]
 800a124:	2b80      	cmp	r3, #128	@ 0x80
 800a126:	d004      	beq.n	800a132 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fbed 	bl	800a90a <USBD_CtlError>
                break;
 800a130:	e091      	b.n	800a256 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a136:	2b00      	cmp	r3, #0
 800a138:	da0b      	bge.n	800a152 <USBD_StdEPReq+0x212>
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a140:	4613      	mov	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4413      	add	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	3310      	adds	r3, #16
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	4413      	add	r3, r2
 800a14e:	3304      	adds	r3, #4
 800a150:	e00b      	b.n	800a16a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a158:	4613      	mov	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	4413      	add	r3, r2
 800a168:	3304      	adds	r3, #4
 800a16a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2202      	movs	r2, #2
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fc43 	bl	800aa04 <USBD_CtlSendData>
              break;
 800a17e:	e06a      	b.n	800a256 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a184:	2b00      	cmp	r3, #0
 800a186:	da11      	bge.n	800a1ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a188:	7bbb      	ldrb	r3, [r7, #14]
 800a18a:	f003 020f 	and.w	r2, r3, #15
 800a18e:	6879      	ldr	r1, [r7, #4]
 800a190:	4613      	mov	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	440b      	add	r3, r1
 800a19a:	3324      	adds	r3, #36	@ 0x24
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d117      	bne.n	800a1d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fbb0 	bl	800a90a <USBD_CtlError>
                  break;
 800a1aa:	e054      	b.n	800a256 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	f003 020f 	and.w	r2, r3, #15
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	440b      	add	r3, r1
 800a1be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d104      	bne.n	800a1d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fb9d 	bl	800a90a <USBD_CtlError>
                  break;
 800a1d0:	e041      	b.n	800a256 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	da0b      	bge.n	800a1f2 <USBD_StdEPReq+0x2b2>
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	3310      	adds	r3, #16
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	e00b      	b.n	800a20a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1f2:	7bbb      	ldrb	r3, [r7, #14]
 800a1f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	4413      	add	r3, r2
 800a208:	3304      	adds	r3, #4
 800a20a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <USBD_StdEPReq+0x2d8>
 800a212:	7bbb      	ldrb	r3, [r7, #14]
 800a214:	2b80      	cmp	r3, #128	@ 0x80
 800a216:	d103      	bne.n	800a220 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2200      	movs	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	e00e      	b.n	800a23e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 f8a3 	bl	800b370 <USBD_LL_IsStallEP>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	2201      	movs	r2, #1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e002      	b.n	800a23e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2202      	movs	r2, #2
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fbdd 	bl	800aa04 <USBD_CtlSendData>
              break;
 800a24a:	e004      	b.n	800a256 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fb5b 	bl	800a90a <USBD_CtlError>
              break;
 800a254:	bf00      	nop
          }
          break;
 800a256:	e004      	b.n	800a262 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fb55 	bl	800a90a <USBD_CtlError>
          break;
 800a260:	bf00      	nop
      }
      break;
 800a262:	e005      	b.n	800a270 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fb4f 	bl	800a90a <USBD_CtlError>
      break;
 800a26c:	e000      	b.n	800a270 <USBD_StdEPReq+0x330>
      break;
 800a26e:	bf00      	nop
  }

  return ret;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	0a1b      	lsrs	r3, r3, #8
 800a298:	b29b      	uxth	r3, r3
 800a29a:	3b01      	subs	r3, #1
 800a29c:	2b06      	cmp	r3, #6
 800a29e:	f200 8128 	bhi.w	800a4f2 <USBD_GetDescriptor+0x276>
 800a2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a8 <USBD_GetDescriptor+0x2c>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a2c5 	.word	0x0800a2c5
 800a2ac:	0800a2dd 	.word	0x0800a2dd
 800a2b0:	0800a31d 	.word	0x0800a31d
 800a2b4:	0800a4f3 	.word	0x0800a4f3
 800a2b8:	0800a4f3 	.word	0x0800a4f3
 800a2bc:	0800a493 	.word	0x0800a493
 800a2c0:	0800a4bf 	.word	0x0800a4bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	7c12      	ldrb	r2, [r2, #16]
 800a2d0:	f107 0108 	add.w	r1, r7, #8
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4798      	blx	r3
 800a2d8:	60f8      	str	r0, [r7, #12]
      break;
 800a2da:	e112      	b.n	800a502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	7c1b      	ldrb	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10d      	bne.n	800a300 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ec:	f107 0208 	add.w	r2, r7, #8
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	4798      	blx	r3
 800a2f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a2fe:	e100      	b.n	800a502 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a308:	f107 0208 	add.w	r2, r7, #8
 800a30c:	4610      	mov	r0, r2
 800a30e:	4798      	blx	r3
 800a310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3301      	adds	r3, #1
 800a316:	2202      	movs	r2, #2
 800a318:	701a      	strb	r2, [r3, #0]
      break;
 800a31a:	e0f2      	b.n	800a502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	885b      	ldrh	r3, [r3, #2]
 800a320:	b2db      	uxtb	r3, r3
 800a322:	2b05      	cmp	r3, #5
 800a324:	f200 80ac 	bhi.w	800a480 <USBD_GetDescriptor+0x204>
 800a328:	a201      	add	r2, pc, #4	@ (adr r2, 800a330 <USBD_GetDescriptor+0xb4>)
 800a32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32e:	bf00      	nop
 800a330:	0800a349 	.word	0x0800a349
 800a334:	0800a37d 	.word	0x0800a37d
 800a338:	0800a3b1 	.word	0x0800a3b1
 800a33c:	0800a3e5 	.word	0x0800a3e5
 800a340:	0800a419 	.word	0x0800a419
 800a344:	0800a44d 	.word	0x0800a44d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00b      	beq.n	800a36c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	7c12      	ldrb	r2, [r2, #16]
 800a360:	f107 0108 	add.w	r1, r7, #8
 800a364:	4610      	mov	r0, r2
 800a366:	4798      	blx	r3
 800a368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36a:	e091      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 facb 	bl	800a90a <USBD_CtlError>
            err++;
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	3301      	adds	r3, #1
 800a378:	72fb      	strb	r3, [r7, #11]
          break;
 800a37a:	e089      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00b      	beq.n	800a3a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	7c12      	ldrb	r2, [r2, #16]
 800a394:	f107 0108 	add.w	r1, r7, #8
 800a398:	4610      	mov	r0, r2
 800a39a:	4798      	blx	r3
 800a39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a39e:	e077      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fab1 	bl	800a90a <USBD_CtlError>
            err++;
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a3ae:	e06f      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00b      	beq.n	800a3d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	7c12      	ldrb	r2, [r2, #16]
 800a3c8:	f107 0108 	add.w	r1, r7, #8
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	4798      	blx	r3
 800a3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3d2:	e05d      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fa97 	bl	800a90a <USBD_CtlError>
            err++;
 800a3dc:	7afb      	ldrb	r3, [r7, #11]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3e2:	e055      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00b      	beq.n	800a408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	7c12      	ldrb	r2, [r2, #16]
 800a3fc:	f107 0108 	add.w	r1, r7, #8
 800a400:	4610      	mov	r0, r2
 800a402:	4798      	blx	r3
 800a404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a406:	e043      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa7d 	bl	800a90a <USBD_CtlError>
            err++;
 800a410:	7afb      	ldrb	r3, [r7, #11]
 800a412:	3301      	adds	r3, #1
 800a414:	72fb      	strb	r3, [r7, #11]
          break;
 800a416:	e03b      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00b      	beq.n	800a43c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	7c12      	ldrb	r2, [r2, #16]
 800a430:	f107 0108 	add.w	r1, r7, #8
 800a434:	4610      	mov	r0, r2
 800a436:	4798      	blx	r3
 800a438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a43a:	e029      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fa63 	bl	800a90a <USBD_CtlError>
            err++;
 800a444:	7afb      	ldrb	r3, [r7, #11]
 800a446:	3301      	adds	r3, #1
 800a448:	72fb      	strb	r3, [r7, #11]
          break;
 800a44a:	e021      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00b      	beq.n	800a470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	7c12      	ldrb	r2, [r2, #16]
 800a464:	f107 0108 	add.w	r1, r7, #8
 800a468:	4610      	mov	r0, r2
 800a46a:	4798      	blx	r3
 800a46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a46e:	e00f      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa49 	bl	800a90a <USBD_CtlError>
            err++;
 800a478:	7afb      	ldrb	r3, [r7, #11]
 800a47a:	3301      	adds	r3, #1
 800a47c:	72fb      	strb	r3, [r7, #11]
          break;
 800a47e:	e007      	b.n	800a490 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fa41 	bl	800a90a <USBD_CtlError>
          err++;
 800a488:	7afb      	ldrb	r3, [r7, #11]
 800a48a:	3301      	adds	r3, #1
 800a48c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a48e:	bf00      	nop
      }
      break;
 800a490:	e037      	b.n	800a502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	7c1b      	ldrb	r3, [r3, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d109      	bne.n	800a4ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a2:	f107 0208 	add.w	r2, r7, #8
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	4798      	blx	r3
 800a4aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4ac:	e029      	b.n	800a502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fa2a 	bl	800a90a <USBD_CtlError>
        err++;
 800a4b6:	7afb      	ldrb	r3, [r7, #11]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a4bc:	e021      	b.n	800a502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	7c1b      	ldrb	r3, [r3, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10d      	bne.n	800a4e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ce:	f107 0208 	add.w	r2, r7, #8
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	4798      	blx	r3
 800a4d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	2207      	movs	r2, #7
 800a4de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4e0:	e00f      	b.n	800a502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fa10 	bl	800a90a <USBD_CtlError>
        err++;
 800a4ea:	7afb      	ldrb	r3, [r7, #11]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a4f0:	e007      	b.n	800a502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fa08 	bl	800a90a <USBD_CtlError>
      err++;
 800a4fa:	7afb      	ldrb	r3, [r7, #11]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a500:	bf00      	nop
  }

  if (err != 0U)
 800a502:	7afb      	ldrb	r3, [r7, #11]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11e      	bne.n	800a546 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	88db      	ldrh	r3, [r3, #6]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d016      	beq.n	800a53e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a510:	893b      	ldrh	r3, [r7, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00e      	beq.n	800a534 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	88da      	ldrh	r2, [r3, #6]
 800a51a:	893b      	ldrh	r3, [r7, #8]
 800a51c:	4293      	cmp	r3, r2
 800a51e:	bf28      	it	cs
 800a520:	4613      	movcs	r3, r2
 800a522:	b29b      	uxth	r3, r3
 800a524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a526:	893b      	ldrh	r3, [r7, #8]
 800a528:	461a      	mov	r2, r3
 800a52a:	68f9      	ldr	r1, [r7, #12]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fa69 	bl	800aa04 <USBD_CtlSendData>
 800a532:	e009      	b.n	800a548 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f9e7 	bl	800a90a <USBD_CtlError>
 800a53c:	e004      	b.n	800a548 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 faba 	bl	800aab8 <USBD_CtlSendStatus>
 800a544:	e000      	b.n	800a548 <USBD_GetDescriptor+0x2cc>
    return;
 800a546:	bf00      	nop
  }
}
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop

0800a550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	889b      	ldrh	r3, [r3, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d131      	bne.n	800a5c6 <USBD_SetAddress+0x76>
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	88db      	ldrh	r3, [r3, #6]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d12d      	bne.n	800a5c6 <USBD_SetAddress+0x76>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	885b      	ldrh	r3, [r3, #2]
 800a56e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a570:	d829      	bhi.n	800a5c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	885b      	ldrh	r3, [r3, #2]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a57c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b03      	cmp	r3, #3
 800a588:	d104      	bne.n	800a594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f9bc 	bl	800a90a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a592:	e01d      	b.n	800a5d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	7bfa      	ldrb	r2, [r7, #15]
 800a598:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 ff11 	bl	800b3c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fa86 	bl	800aab8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d004      	beq.n	800a5bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ba:	e009      	b.n	800a5d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c4:	e004      	b.n	800a5d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f99e 	bl	800a90a <USBD_CtlError>
  }
}
 800a5ce:	bf00      	nop
 800a5d0:	bf00      	nop
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	885b      	ldrh	r3, [r3, #2]
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	4b4e      	ldr	r3, [pc, #312]	@ (800a728 <USBD_SetConfig+0x150>)
 800a5ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a5f0:	4b4d      	ldr	r3, [pc, #308]	@ (800a728 <USBD_SetConfig+0x150>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d905      	bls.n	800a604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f985 	bl	800a90a <USBD_CtlError>
    return USBD_FAIL;
 800a600:	2303      	movs	r3, #3
 800a602:	e08c      	b.n	800a71e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d002      	beq.n	800a616 <USBD_SetConfig+0x3e>
 800a610:	2b03      	cmp	r3, #3
 800a612:	d029      	beq.n	800a668 <USBD_SetConfig+0x90>
 800a614:	e075      	b.n	800a702 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a616:	4b44      	ldr	r3, [pc, #272]	@ (800a728 <USBD_SetConfig+0x150>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d020      	beq.n	800a660 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a61e:	4b42      	ldr	r3, [pc, #264]	@ (800a728 <USBD_SetConfig+0x150>)
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	461a      	mov	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a628:	4b3f      	ldr	r3, [pc, #252]	@ (800a728 <USBD_SetConfig+0x150>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7fe ffe3 	bl	80095fa <USBD_SetClassConfig>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d008      	beq.n	800a650 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f962 	bl	800a90a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2202      	movs	r2, #2
 800a64a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a64e:	e065      	b.n	800a71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fa31 	bl	800aab8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2203      	movs	r2, #3
 800a65a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a65e:	e05d      	b.n	800a71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fa29 	bl	800aab8 <USBD_CtlSendStatus>
      break;
 800a666:	e059      	b.n	800a71c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a668:	4b2f      	ldr	r3, [pc, #188]	@ (800a728 <USBD_SetConfig+0x150>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d112      	bne.n	800a696 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a678:	4b2b      	ldr	r3, [pc, #172]	@ (800a728 <USBD_SetConfig+0x150>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a682:	4b29      	ldr	r3, [pc, #164]	@ (800a728 <USBD_SetConfig+0x150>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f7fe ffd2 	bl	8009632 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fa12 	bl	800aab8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a694:	e042      	b.n	800a71c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a696:	4b24      	ldr	r3, [pc, #144]	@ (800a728 <USBD_SetConfig+0x150>)
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d02a      	beq.n	800a6fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7fe ffc0 	bl	8009632 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a6b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a728 <USBD_SetConfig+0x150>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6bc:	4b1a      	ldr	r3, [pc, #104]	@ (800a728 <USBD_SetConfig+0x150>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7fe ff99 	bl	80095fa <USBD_SetClassConfig>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00f      	beq.n	800a6f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f918 	bl	800a90a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7fe ffa5 	bl	8009632 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a6f0:	e014      	b.n	800a71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f9e0 	bl	800aab8 <USBD_CtlSendStatus>
      break;
 800a6f8:	e010      	b.n	800a71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f9dc 	bl	800aab8 <USBD_CtlSendStatus>
      break;
 800a700:	e00c      	b.n	800a71c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f900 	bl	800a90a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a70a:	4b07      	ldr	r3, [pc, #28]	@ (800a728 <USBD_SetConfig+0x150>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7fe ff8e 	bl	8009632 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a716:	2303      	movs	r3, #3
 800a718:	73fb      	strb	r3, [r7, #15]
      break;
 800a71a:	bf00      	nop
  }

  return ret;
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200005d4 	.word	0x200005d4

0800a72c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	88db      	ldrh	r3, [r3, #6]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d004      	beq.n	800a748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f8e2 	bl	800a90a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a746:	e023      	b.n	800a790 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b02      	cmp	r3, #2
 800a752:	dc02      	bgt.n	800a75a <USBD_GetConfig+0x2e>
 800a754:	2b00      	cmp	r3, #0
 800a756:	dc03      	bgt.n	800a760 <USBD_GetConfig+0x34>
 800a758:	e015      	b.n	800a786 <USBD_GetConfig+0x5a>
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d00b      	beq.n	800a776 <USBD_GetConfig+0x4a>
 800a75e:	e012      	b.n	800a786 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3308      	adds	r3, #8
 800a76a:	2201      	movs	r2, #1
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f948 	bl	800aa04 <USBD_CtlSendData>
        break;
 800a774:	e00c      	b.n	800a790 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	3304      	adds	r3, #4
 800a77a:	2201      	movs	r2, #1
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f940 	bl	800aa04 <USBD_CtlSendData>
        break;
 800a784:	e004      	b.n	800a790 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f8be 	bl	800a90a <USBD_CtlError>
        break;
 800a78e:	bf00      	nop
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d81e      	bhi.n	800a7ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	88db      	ldrh	r3, [r3, #6]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d004      	beq.n	800a7c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f8a5 	bl	800a90a <USBD_CtlError>
        break;
 800a7c0:	e01a      	b.n	800a7f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d005      	beq.n	800a7de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f043 0202 	orr.w	r2, r3, #2
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f90c 	bl	800aa04 <USBD_CtlSendData>
      break;
 800a7ec:	e004      	b.n	800a7f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f88a 	bl	800a90a <USBD_CtlError>
      break;
 800a7f6:	bf00      	nop
  }
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	885b      	ldrh	r3, [r3, #2]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d107      	bne.n	800a822 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f94c 	bl	800aab8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a820:	e013      	b.n	800a84a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	885b      	ldrh	r3, [r3, #2]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d10b      	bne.n	800a842 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	889b      	ldrh	r3, [r3, #4]
 800a82e:	0a1b      	lsrs	r3, r3, #8
 800a830:	b29b      	uxth	r3, r3
 800a832:	b2da      	uxtb	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f93c 	bl	800aab8 <USBD_CtlSendStatus>
}
 800a840:	e003      	b.n	800a84a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f860 	bl	800a90a <USBD_CtlError>
}
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a862:	b2db      	uxtb	r3, r3
 800a864:	3b01      	subs	r3, #1
 800a866:	2b02      	cmp	r3, #2
 800a868:	d80b      	bhi.n	800a882 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	885b      	ldrh	r3, [r3, #2]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d10c      	bne.n	800a88c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f91c 	bl	800aab8 <USBD_CtlSendStatus>
      }
      break;
 800a880:	e004      	b.n	800a88c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f840 	bl	800a90a <USBD_CtlError>
      break;
 800a88a:	e000      	b.n	800a88e <USBD_ClrFeature+0x3c>
      break;
 800a88c:	bf00      	nop
  }
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	781a      	ldrb	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	781a      	ldrb	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f7ff fa40 	bl	8009d46 <SWAPBYTE>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f7ff fa33 	bl	8009d46 <SWAPBYTE>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f7ff fa26 	bl	8009d46 <SWAPBYTE>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	80da      	strh	r2, [r3, #6]
}
 800a902:	bf00      	nop
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b082      	sub	sp, #8
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a914:	2180      	movs	r1, #128	@ 0x80
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fcec 	bl	800b2f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a91c:	2100      	movs	r1, #0
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fce8 	bl	800b2f4 <USBD_LL_StallEP>
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d042      	beq.n	800a9c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a946:	6938      	ldr	r0, [r7, #16]
 800a948:	f000 f842 	bl	800a9d0 <USBD_GetLen>
 800a94c:	4603      	mov	r3, r0
 800a94e:	3301      	adds	r3, #1
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a956:	d808      	bhi.n	800a96a <USBD_GetString+0x3e>
 800a958:	6938      	ldr	r0, [r7, #16]
 800a95a:	f000 f839 	bl	800a9d0 <USBD_GetLen>
 800a95e:	4603      	mov	r3, r0
 800a960:	3301      	adds	r3, #1
 800a962:	b29b      	uxth	r3, r3
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	b29a      	uxth	r2, r3
 800a968:	e001      	b.n	800a96e <USBD_GetString+0x42>
 800a96a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	4413      	add	r3, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	7812      	ldrb	r2, [r2, #0]
 800a97c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	3301      	adds	r3, #1
 800a982:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a984:	7dfb      	ldrb	r3, [r7, #23]
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	4413      	add	r3, r2
 800a98a:	2203      	movs	r2, #3
 800a98c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	3301      	adds	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a994:	e013      	b.n	800a9be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a996:	7dfb      	ldrb	r3, [r7, #23]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	4413      	add	r3, r2
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	7812      	ldrb	r2, [r2, #0]
 800a9a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	613b      	str	r3, [r7, #16]
    idx++;
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e7      	bne.n	800a996 <USBD_GetString+0x6a>
 800a9c6:	e000      	b.n	800a9ca <USBD_GetString+0x9e>
    return;
 800a9c8:	bf00      	nop
  }
}
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a9e0:	e005      	b.n	800a9ee <USBD_GetLen+0x1e>
  {
    len++;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1f5      	bne.n	800a9e2 <USBD_GetLen+0x12>
  }

  return len;
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2202      	movs	r2, #2
 800aa14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	2100      	movs	r1, #0
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 fceb 	bl	800b406 <USBD_LL_Transmit>

  return USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	60f8      	str	r0, [r7, #12]
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 fcda 	bl	800b406 <USBD_LL_Transmit>

  return USBD_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	68ba      	ldr	r2, [r7, #8]
 800aa84:	2100      	movs	r1, #0
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 fcde 	bl	800b448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 fccd 	bl	800b448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2204      	movs	r2, #4
 800aac4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aac8:	2300      	movs	r3, #0
 800aaca:	2200      	movs	r2, #0
 800aacc:	2100      	movs	r1, #0
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fc99 	bl	800b406 <USBD_LL_Transmit>

  return USBD_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2205      	movs	r2, #5
 800aaea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaee:	2300      	movs	r3, #0
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fca7 	bl	800b448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	4912      	ldr	r1, [pc, #72]	@ (800ab54 <MX_USB_DEVICE_Init+0x50>)
 800ab0c:	4812      	ldr	r0, [pc, #72]	@ (800ab58 <MX_USB_DEVICE_Init+0x54>)
 800ab0e:	f7fe fcf7 	bl	8009500 <USBD_Init>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab18:	f7f7 fffc 	bl	8002b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab1c:	490f      	ldr	r1, [pc, #60]	@ (800ab5c <MX_USB_DEVICE_Init+0x58>)
 800ab1e:	480e      	ldr	r0, [pc, #56]	@ (800ab58 <MX_USB_DEVICE_Init+0x54>)
 800ab20:	f7fe fd1e 	bl	8009560 <USBD_RegisterClass>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab2a:	f7f7 fff3 	bl	8002b14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab2e:	490c      	ldr	r1, [pc, #48]	@ (800ab60 <MX_USB_DEVICE_Init+0x5c>)
 800ab30:	4809      	ldr	r0, [pc, #36]	@ (800ab58 <MX_USB_DEVICE_Init+0x54>)
 800ab32:	f7fe fc15 	bl	8009360 <USBD_CDC_RegisterInterface>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab3c:	f7f7 ffea 	bl	8002b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab40:	4805      	ldr	r0, [pc, #20]	@ (800ab58 <MX_USB_DEVICE_Init+0x54>)
 800ab42:	f7fe fd43 	bl	80095cc <USBD_Start>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab4c:	f7f7 ffe2 	bl	8002b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab50:	bf00      	nop
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	200000cc 	.word	0x200000cc
 800ab58:	200005d8 	.word	0x200005d8
 800ab5c:	20000038 	.word	0x20000038
 800ab60:	200000b8 	.word	0x200000b8

0800ab64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab68:	2200      	movs	r2, #0
 800ab6a:	4905      	ldr	r1, [pc, #20]	@ (800ab80 <CDC_Init_FS+0x1c>)
 800ab6c:	4805      	ldr	r0, [pc, #20]	@ (800ab84 <CDC_Init_FS+0x20>)
 800ab6e:	f7fe fc11 	bl	8009394 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab72:	4905      	ldr	r1, [pc, #20]	@ (800ab88 <CDC_Init_FS+0x24>)
 800ab74:	4803      	ldr	r0, [pc, #12]	@ (800ab84 <CDC_Init_FS+0x20>)
 800ab76:	f7fe fc2f 	bl	80093d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	200010b4 	.word	0x200010b4
 800ab84:	200005d8 	.word	0x200005d8
 800ab88:	200008b4 	.word	0x200008b4

0800ab8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	6039      	str	r1, [r7, #0]
 800aba6:	71fb      	strb	r3, [r7, #7]
 800aba8:	4613      	mov	r3, r2
 800abaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	2b23      	cmp	r3, #35	@ 0x23
 800abb0:	d84a      	bhi.n	800ac48 <CDC_Control_FS+0xac>
 800abb2:	a201      	add	r2, pc, #4	@ (adr r2, 800abb8 <CDC_Control_FS+0x1c>)
 800abb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb8:	0800ac49 	.word	0x0800ac49
 800abbc:	0800ac49 	.word	0x0800ac49
 800abc0:	0800ac49 	.word	0x0800ac49
 800abc4:	0800ac49 	.word	0x0800ac49
 800abc8:	0800ac49 	.word	0x0800ac49
 800abcc:	0800ac49 	.word	0x0800ac49
 800abd0:	0800ac49 	.word	0x0800ac49
 800abd4:	0800ac49 	.word	0x0800ac49
 800abd8:	0800ac49 	.word	0x0800ac49
 800abdc:	0800ac49 	.word	0x0800ac49
 800abe0:	0800ac49 	.word	0x0800ac49
 800abe4:	0800ac49 	.word	0x0800ac49
 800abe8:	0800ac49 	.word	0x0800ac49
 800abec:	0800ac49 	.word	0x0800ac49
 800abf0:	0800ac49 	.word	0x0800ac49
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800ac49 	.word	0x0800ac49
 800abfc:	0800ac49 	.word	0x0800ac49
 800ac00:	0800ac49 	.word	0x0800ac49
 800ac04:	0800ac49 	.word	0x0800ac49
 800ac08:	0800ac49 	.word	0x0800ac49
 800ac0c:	0800ac49 	.word	0x0800ac49
 800ac10:	0800ac49 	.word	0x0800ac49
 800ac14:	0800ac49 	.word	0x0800ac49
 800ac18:	0800ac49 	.word	0x0800ac49
 800ac1c:	0800ac49 	.word	0x0800ac49
 800ac20:	0800ac49 	.word	0x0800ac49
 800ac24:	0800ac49 	.word	0x0800ac49
 800ac28:	0800ac49 	.word	0x0800ac49
 800ac2c:	0800ac49 	.word	0x0800ac49
 800ac30:	0800ac49 	.word	0x0800ac49
 800ac34:	0800ac49 	.word	0x0800ac49
 800ac38:	0800ac49 	.word	0x0800ac49
 800ac3c:	0800ac49 	.word	0x0800ac49
 800ac40:	0800ac49 	.word	0x0800ac49
 800ac44:	0800ac49 	.word	0x0800ac49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac48:	bf00      	nop
  }

  return (USBD_OK);
 800ac4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	4805      	ldr	r0, [pc, #20]	@ (800ac7c <CDC_Receive_FS+0x24>)
 800ac66:	f7fe fbb7 	bl	80093d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac6a:	4804      	ldr	r0, [pc, #16]	@ (800ac7c <CDC_Receive_FS+0x24>)
 800ac6c:	f7fe fc12 	bl	8009494 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200005d8 	.word	0x200005d8

0800ac80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac90:	4b0d      	ldr	r3, [pc, #52]	@ (800acc8 <CDC_Transmit_FS+0x48>)
 800ac92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e00b      	b.n	800acbe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aca6:	887b      	ldrh	r3, [r7, #2]
 800aca8:	461a      	mov	r2, r3
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	4806      	ldr	r0, [pc, #24]	@ (800acc8 <CDC_Transmit_FS+0x48>)
 800acae:	f7fe fb71 	bl	8009394 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800acb2:	4805      	ldr	r0, [pc, #20]	@ (800acc8 <CDC_Transmit_FS+0x48>)
 800acb4:	f7fe fbae 	bl	8009414 <USBD_CDC_TransmitPacket>
 800acb8:	4603      	mov	r3, r0
 800acba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	200005d8 	.word	0x200005d8

0800accc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800accc:	b480      	push	{r7}
 800acce:	b087      	sub	sp, #28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800acde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	371c      	adds	r7, #28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
	...

0800acf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	6039      	str	r1, [r7, #0]
 800acfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2212      	movs	r2, #18
 800ad00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad02:	4b03      	ldr	r3, [pc, #12]	@ (800ad10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	200000e8 	.word	0x200000e8

0800ad14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	6039      	str	r1, [r7, #0]
 800ad1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2204      	movs	r2, #4
 800ad24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad26:	4b03      	ldr	r3, [pc, #12]	@ (800ad34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	200000fc 	.word	0x200000fc

0800ad38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d105      	bne.n	800ad56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	4907      	ldr	r1, [pc, #28]	@ (800ad6c <USBD_FS_ProductStrDescriptor+0x34>)
 800ad4e:	4808      	ldr	r0, [pc, #32]	@ (800ad70 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad50:	f7ff fdec 	bl	800a92c <USBD_GetString>
 800ad54:	e004      	b.n	800ad60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	4904      	ldr	r1, [pc, #16]	@ (800ad6c <USBD_FS_ProductStrDescriptor+0x34>)
 800ad5a:	4805      	ldr	r0, [pc, #20]	@ (800ad70 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad5c:	f7ff fde6 	bl	800a92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad60:	4b02      	ldr	r3, [pc, #8]	@ (800ad6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200018b4 	.word	0x200018b4
 800ad70:	08010820 	.word	0x08010820

0800ad74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	6039      	str	r1, [r7, #0]
 800ad7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	4904      	ldr	r1, [pc, #16]	@ (800ad94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad84:	4804      	ldr	r0, [pc, #16]	@ (800ad98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad86:	f7ff fdd1 	bl	800a92c <USBD_GetString>
  return USBD_StrDesc;
 800ad8a:	4b02      	ldr	r3, [pc, #8]	@ (800ad94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	200018b4 	.word	0x200018b4
 800ad98:	08010838 	.word	0x08010838

0800ad9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	6039      	str	r1, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	221a      	movs	r2, #26
 800adac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800adae:	f000 f843 	bl	800ae38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800adb2:	4b02      	ldr	r3, [pc, #8]	@ (800adbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20000100 	.word	0x20000100

0800adc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	4603      	mov	r3, r0
 800adc8:	6039      	str	r1, [r7, #0]
 800adca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d105      	bne.n	800adde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	4907      	ldr	r1, [pc, #28]	@ (800adf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800add6:	4808      	ldr	r0, [pc, #32]	@ (800adf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800add8:	f7ff fda8 	bl	800a92c <USBD_GetString>
 800addc:	e004      	b.n	800ade8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	4904      	ldr	r1, [pc, #16]	@ (800adf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ade2:	4805      	ldr	r0, [pc, #20]	@ (800adf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ade4:	f7ff fda2 	bl	800a92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ade8:	4b02      	ldr	r3, [pc, #8]	@ (800adf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800adea:	4618      	mov	r0, r3
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	200018b4 	.word	0x200018b4
 800adf8:	0801084c 	.word	0x0801084c

0800adfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	4603      	mov	r3, r0
 800ae04:	6039      	str	r1, [r7, #0]
 800ae06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d105      	bne.n	800ae1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	4907      	ldr	r1, [pc, #28]	@ (800ae30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae12:	4808      	ldr	r0, [pc, #32]	@ (800ae34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae14:	f7ff fd8a 	bl	800a92c <USBD_GetString>
 800ae18:	e004      	b.n	800ae24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	4904      	ldr	r1, [pc, #16]	@ (800ae30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae1e:	4805      	ldr	r0, [pc, #20]	@ (800ae34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae20:	f7ff fd84 	bl	800a92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae24:	4b02      	ldr	r3, [pc, #8]	@ (800ae30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	200018b4 	.word	0x200018b4
 800ae34:	08010858 	.word	0x08010858

0800ae38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae7c <Get_SerialNum+0x44>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae44:	4b0e      	ldr	r3, [pc, #56]	@ (800ae80 <Get_SerialNum+0x48>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae84 <Get_SerialNum+0x4c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4413      	add	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d009      	beq.n	800ae72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae5e:	2208      	movs	r2, #8
 800ae60:	4909      	ldr	r1, [pc, #36]	@ (800ae88 <Get_SerialNum+0x50>)
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 f814 	bl	800ae90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae68:	2204      	movs	r2, #4
 800ae6a:	4908      	ldr	r1, [pc, #32]	@ (800ae8c <Get_SerialNum+0x54>)
 800ae6c:	68b8      	ldr	r0, [r7, #8]
 800ae6e:	f000 f80f 	bl	800ae90 <IntToUnicode>
  }
}
 800ae72:	bf00      	nop
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	1fff7a10 	.word	0x1fff7a10
 800ae80:	1fff7a14 	.word	0x1fff7a14
 800ae84:	1fff7a18 	.word	0x1fff7a18
 800ae88:	20000102 	.word	0x20000102
 800ae8c:	20000112 	.word	0x20000112

0800ae90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b087      	sub	sp, #28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aea2:	2300      	movs	r3, #0
 800aea4:	75fb      	strb	r3, [r7, #23]
 800aea6:	e027      	b.n	800aef8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	0f1b      	lsrs	r3, r3, #28
 800aeac:	2b09      	cmp	r3, #9
 800aeae:	d80b      	bhi.n	800aec8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	0f1b      	lsrs	r3, r3, #28
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	7dfb      	ldrb	r3, [r7, #23]
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	4619      	mov	r1, r3
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	440b      	add	r3, r1
 800aec0:	3230      	adds	r2, #48	@ 0x30
 800aec2:	b2d2      	uxtb	r2, r2
 800aec4:	701a      	strb	r2, [r3, #0]
 800aec6:	e00a      	b.n	800aede <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	0f1b      	lsrs	r3, r3, #28
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	4619      	mov	r1, r3
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	440b      	add	r3, r1
 800aed8:	3237      	adds	r2, #55	@ 0x37
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	3301      	adds	r3, #1
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	4413      	add	r3, r2
 800aeee:	2200      	movs	r2, #0
 800aef0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	3301      	adds	r3, #1
 800aef6:	75fb      	strb	r3, [r7, #23]
 800aef8:	7dfa      	ldrb	r2, [r7, #23]
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d3d3      	bcc.n	800aea8 <IntToUnicode+0x18>
  }
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	371c      	adds	r7, #28
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
	...

0800af10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	@ 0x28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af18:	f107 0314 	add.w	r3, r7, #20
 800af1c:	2200      	movs	r2, #0
 800af1e:	601a      	str	r2, [r3, #0]
 800af20:	605a      	str	r2, [r3, #4]
 800af22:	609a      	str	r2, [r3, #8]
 800af24:	60da      	str	r2, [r3, #12]
 800af26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af30:	d13a      	bne.n	800afa8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af32:	2300      	movs	r3, #0
 800af34:	613b      	str	r3, [r7, #16]
 800af36:	4b1e      	ldr	r3, [pc, #120]	@ (800afb0 <HAL_PCD_MspInit+0xa0>)
 800af38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3a:	4a1d      	ldr	r2, [pc, #116]	@ (800afb0 <HAL_PCD_MspInit+0xa0>)
 800af3c:	f043 0301 	orr.w	r3, r3, #1
 800af40:	6313      	str	r3, [r2, #48]	@ 0x30
 800af42:	4b1b      	ldr	r3, [pc, #108]	@ (800afb0 <HAL_PCD_MspInit+0xa0>)
 800af44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	613b      	str	r3, [r7, #16]
 800af4c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800af4e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800af52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af54:	2302      	movs	r3, #2
 800af56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af58:	2300      	movs	r3, #0
 800af5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af5c:	2303      	movs	r3, #3
 800af5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af60:	230a      	movs	r3, #10
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af64:	f107 0314 	add.w	r3, r7, #20
 800af68:	4619      	mov	r1, r3
 800af6a:	4812      	ldr	r0, [pc, #72]	@ (800afb4 <HAL_PCD_MspInit+0xa4>)
 800af6c:	f7f8 fdc8 	bl	8003b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af70:	4b0f      	ldr	r3, [pc, #60]	@ (800afb0 <HAL_PCD_MspInit+0xa0>)
 800af72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af74:	4a0e      	ldr	r2, [pc, #56]	@ (800afb0 <HAL_PCD_MspInit+0xa0>)
 800af76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af7a:	6353      	str	r3, [r2, #52]	@ 0x34
 800af7c:	2300      	movs	r3, #0
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	4b0b      	ldr	r3, [pc, #44]	@ (800afb0 <HAL_PCD_MspInit+0xa0>)
 800af82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af84:	4a0a      	ldr	r2, [pc, #40]	@ (800afb0 <HAL_PCD_MspInit+0xa0>)
 800af86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800af8a:	6453      	str	r3, [r2, #68]	@ 0x44
 800af8c:	4b08      	ldr	r3, [pc, #32]	@ (800afb0 <HAL_PCD_MspInit+0xa0>)
 800af8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af98:	2200      	movs	r2, #0
 800af9a:	2100      	movs	r1, #0
 800af9c:	2043      	movs	r0, #67	@ 0x43
 800af9e:	f7f8 f9e6 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800afa2:	2043      	movs	r0, #67	@ 0x43
 800afa4:	f7f8 f9ff 	bl	80033a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afa8:	bf00      	nop
 800afaa:	3728      	adds	r7, #40	@ 0x28
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	40023800 	.word	0x40023800
 800afb4:	40020000 	.word	0x40020000

0800afb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800afcc:	4619      	mov	r1, r3
 800afce:	4610      	mov	r0, r2
 800afd0:	f7fe fb49 	bl	8009666 <USBD_LL_SetupStage>
}
 800afd4:	bf00      	nop
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800afee:	78fa      	ldrb	r2, [r7, #3]
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	4613      	mov	r3, r2
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	78fb      	ldrb	r3, [r7, #3]
 800b004:	4619      	mov	r1, r3
 800b006:	f7fe fb83 	bl	8009710 <USBD_LL_DataOutStage>
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b024:	78fa      	ldrb	r2, [r7, #3]
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	4613      	mov	r3, r2
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	440b      	add	r3, r1
 800b032:	3320      	adds	r3, #32
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	78fb      	ldrb	r3, [r7, #3]
 800b038:	4619      	mov	r1, r3
 800b03a:	f7fe fc1c 	bl	8009876 <USBD_LL_DataInStage>
}
 800b03e:	bf00      	nop
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe fd56 	bl	8009b06 <USBD_LL_SOF>
}
 800b05a:	bf00      	nop
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b06a:	2301      	movs	r3, #1
 800b06c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	79db      	ldrb	r3, [r3, #7]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d102      	bne.n	800b07c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]
 800b07a:	e008      	b.n	800b08e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	79db      	ldrb	r3, [r3, #7]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d102      	bne.n	800b08a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b084:	2301      	movs	r3, #1
 800b086:	73fb      	strb	r3, [r7, #15]
 800b088:	e001      	b.n	800b08e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b08a:	f7f7 fd43 	bl	8002b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b094:	7bfa      	ldrb	r2, [r7, #15]
 800b096:	4611      	mov	r1, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fe fcf0 	bl	8009a7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe fc98 	bl	80099da <USBD_LL_Reset>
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fceb 	bl	8009a9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6812      	ldr	r2, [r2, #0]
 800b0d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b0da:	f043 0301 	orr.w	r3, r3, #1
 800b0de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7adb      	ldrb	r3, [r3, #11]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d005      	beq.n	800b0f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0e8:	4b04      	ldr	r3, [pc, #16]	@ (800b0fc <HAL_PCD_SuspendCallback+0x48>)
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	4a03      	ldr	r2, [pc, #12]	@ (800b0fc <HAL_PCD_SuspendCallback+0x48>)
 800b0ee:	f043 0306 	orr.w	r3, r3, #6
 800b0f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	e000ed00 	.word	0xe000ed00

0800b100 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe fce1 	bl	8009ad6 <USBD_LL_Resume>
}
 800b114:	bf00      	nop
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b12e:	78fa      	ldrb	r2, [r7, #3]
 800b130:	4611      	mov	r1, r2
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe fd39 	bl	8009baa <USBD_LL_IsoOUTIncomplete>
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b152:	78fa      	ldrb	r2, [r7, #3]
 800b154:	4611      	mov	r1, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe fcf5 	bl	8009b46 <USBD_LL_IsoINIncomplete>
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b172:	4618      	mov	r0, r3
 800b174:	f7fe fd4b 	bl	8009c0e <USBD_LL_DevConnected>
}
 800b178:	bf00      	nop
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe fd48 	bl	8009c24 <USBD_LL_DevDisconnected>
}
 800b194:	bf00      	nop
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d13c      	bne.n	800b226 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b1ac:	4a20      	ldr	r2, [pc, #128]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a1e      	ldr	r2, [pc, #120]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b1c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b1c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1c6:	2204      	movs	r2, #4
 800b1c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1ca:	4b19      	ldr	r3, [pc, #100]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b1d0:	4b17      	ldr	r3, [pc, #92]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b1d6:	4b16      	ldr	r3, [pc, #88]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1d8:	2202      	movs	r2, #2
 800b1da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1dc:	4b14      	ldr	r3, [pc, #80]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b1e2:	4b13      	ldr	r3, [pc, #76]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b1e8:	4b11      	ldr	r3, [pc, #68]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b1ee:	4b10      	ldr	r3, [pc, #64]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b1fa:	480d      	ldr	r0, [pc, #52]	@ (800b230 <USBD_LL_Init+0x94>)
 800b1fc:	f7f8 fe68 	bl	8003ed0 <HAL_PCD_Init>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b206:	f7f7 fc85 	bl	8002b14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b20a:	2180      	movs	r1, #128	@ 0x80
 800b20c:	4808      	ldr	r0, [pc, #32]	@ (800b230 <USBD_LL_Init+0x94>)
 800b20e:	f7fa f894 	bl	800533a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b212:	2240      	movs	r2, #64	@ 0x40
 800b214:	2100      	movs	r1, #0
 800b216:	4806      	ldr	r0, [pc, #24]	@ (800b230 <USBD_LL_Init+0x94>)
 800b218:	f7fa f848 	bl	80052ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b21c:	2280      	movs	r2, #128	@ 0x80
 800b21e:	2101      	movs	r1, #1
 800b220:	4803      	ldr	r0, [pc, #12]	@ (800b230 <USBD_LL_Init+0x94>)
 800b222:	f7fa f843 	bl	80052ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	20001ab4 	.word	0x20001ab4

0800b234 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7f8 ff4f 	bl	80040ee <HAL_PCD_Start>
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b254:	7bfb      	ldrb	r3, [r7, #15]
 800b256:	4618      	mov	r0, r3
 800b258:	f000 f942 	bl	800b4e0 <USBD_Get_USB_Status>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b260:	7bbb      	ldrb	r3, [r7, #14]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b084      	sub	sp, #16
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	4608      	mov	r0, r1
 800b274:	4611      	mov	r1, r2
 800b276:	461a      	mov	r2, r3
 800b278:	4603      	mov	r3, r0
 800b27a:	70fb      	strb	r3, [r7, #3]
 800b27c:	460b      	mov	r3, r1
 800b27e:	70bb      	strb	r3, [r7, #2]
 800b280:	4613      	mov	r3, r2
 800b282:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b292:	78bb      	ldrb	r3, [r7, #2]
 800b294:	883a      	ldrh	r2, [r7, #0]
 800b296:	78f9      	ldrb	r1, [r7, #3]
 800b298:	f7f9 fc23 	bl	8004ae2 <HAL_PCD_EP_Open>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 f91c 	bl	800b4e0 <USBD_Get_USB_Status>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	460b      	mov	r3, r1
 800b2c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2d0:	78fa      	ldrb	r2, [r7, #3]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f9 fc6e 	bl	8004bb6 <HAL_PCD_EP_Close>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 f8fd 	bl	800b4e0 <USBD_Get_USB_Status>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	4611      	mov	r1, r2
 800b312:	4618      	mov	r0, r3
 800b314:	f7f9 fd26 	bl	8004d64 <HAL_PCD_EP_SetStall>
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 f8de 	bl	800b4e0 <USBD_Get_USB_Status>
 800b324:	4603      	mov	r3, r0
 800b326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b328:	7bbb      	ldrb	r3, [r7, #14]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	460b      	mov	r3, r1
 800b33c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b34c:	78fa      	ldrb	r2, [r7, #3]
 800b34e:	4611      	mov	r1, r2
 800b350:	4618      	mov	r0, r3
 800b352:	f7f9 fd6a 	bl	8004e2a <HAL_PCD_EP_ClrStall>
 800b356:	4603      	mov	r3, r0
 800b358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 f8bf 	bl	800b4e0 <USBD_Get_USB_Status>
 800b362:	4603      	mov	r3, r0
 800b364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b366:	7bbb      	ldrb	r3, [r7, #14]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b382:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	da0b      	bge.n	800b3a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b38c:	78fb      	ldrb	r3, [r7, #3]
 800b38e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b392:	68f9      	ldr	r1, [r7, #12]
 800b394:	4613      	mov	r3, r2
 800b396:	00db      	lsls	r3, r3, #3
 800b398:	4413      	add	r3, r2
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	440b      	add	r3, r1
 800b39e:	3316      	adds	r3, #22
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	e00b      	b.n	800b3bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b3a4:	78fb      	ldrb	r3, [r7, #3]
 800b3a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3aa:	68f9      	ldr	r1, [r7, #12]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	440b      	add	r3, r1
 800b3b6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b3ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3e2:	78fa      	ldrb	r2, [r7, #3]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7f9 fb57 	bl	8004a9a <HAL_PCD_SetAddress>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 f874 	bl	800b4e0 <USBD_Get_USB_Status>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b086      	sub	sp, #24
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	607a      	str	r2, [r7, #4]
 800b410:	603b      	str	r3, [r7, #0]
 800b412:	460b      	mov	r3, r1
 800b414:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b424:	7af9      	ldrb	r1, [r7, #11]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	f7f9 fc61 	bl	8004cf0 <HAL_PCD_EP_Transmit>
 800b42e:	4603      	mov	r3, r0
 800b430:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b432:	7dfb      	ldrb	r3, [r7, #23]
 800b434:	4618      	mov	r0, r3
 800b436:	f000 f853 	bl	800b4e0 <USBD_Get_USB_Status>
 800b43a:	4603      	mov	r3, r0
 800b43c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b43e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	607a      	str	r2, [r7, #4]
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	460b      	mov	r3, r1
 800b456:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b458:	2300      	movs	r3, #0
 800b45a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b466:	7af9      	ldrb	r1, [r7, #11]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	f7f9 fbed 	bl	8004c4a <HAL_PCD_EP_Receive>
 800b470:	4603      	mov	r3, r0
 800b472:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	4618      	mov	r0, r3
 800b478:	f000 f832 	bl	800b4e0 <USBD_Get_USB_Status>
 800b47c:	4603      	mov	r3, r0
 800b47e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b480:	7dbb      	ldrb	r3, [r7, #22]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b49c:	78fa      	ldrb	r2, [r7, #3]
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7f9 fc0d 	bl	8004cc0 <HAL_PCD_EP_GetRxCount>
 800b4a6:	4603      	mov	r3, r0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b4b8:	4b03      	ldr	r3, [pc, #12]	@ (800b4c8 <USBD_static_malloc+0x18>)
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20001f98 	.word	0x20001f98

0800b4cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]

}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d817      	bhi.n	800b524 <USBD_Get_USB_Status+0x44>
 800b4f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4fc <USBD_Get_USB_Status+0x1c>)
 800b4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fa:	bf00      	nop
 800b4fc:	0800b50d 	.word	0x0800b50d
 800b500:	0800b513 	.word	0x0800b513
 800b504:	0800b519 	.word	0x0800b519
 800b508:	0800b51f 	.word	0x0800b51f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	73fb      	strb	r3, [r7, #15]
    break;
 800b510:	e00b      	b.n	800b52a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b512:	2303      	movs	r3, #3
 800b514:	73fb      	strb	r3, [r7, #15]
    break;
 800b516:	e008      	b.n	800b52a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b518:	2301      	movs	r3, #1
 800b51a:	73fb      	strb	r3, [r7, #15]
    break;
 800b51c:	e005      	b.n	800b52a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b51e:	2303      	movs	r3, #3
 800b520:	73fb      	strb	r3, [r7, #15]
    break;
 800b522:	e002      	b.n	800b52a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	73fb      	strb	r3, [r7, #15]
    break;
 800b528:	bf00      	nop
  }
  return usb_status;
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <__cvt>:
 800b538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b53c:	ec57 6b10 	vmov	r6, r7, d0
 800b540:	2f00      	cmp	r7, #0
 800b542:	460c      	mov	r4, r1
 800b544:	4619      	mov	r1, r3
 800b546:	463b      	mov	r3, r7
 800b548:	bfbb      	ittet	lt
 800b54a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b54e:	461f      	movlt	r7, r3
 800b550:	2300      	movge	r3, #0
 800b552:	232d      	movlt	r3, #45	@ 0x2d
 800b554:	700b      	strb	r3, [r1, #0]
 800b556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b558:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b55c:	4691      	mov	r9, r2
 800b55e:	f023 0820 	bic.w	r8, r3, #32
 800b562:	bfbc      	itt	lt
 800b564:	4632      	movlt	r2, r6
 800b566:	4616      	movlt	r6, r2
 800b568:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b56c:	d005      	beq.n	800b57a <__cvt+0x42>
 800b56e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b572:	d100      	bne.n	800b576 <__cvt+0x3e>
 800b574:	3401      	adds	r4, #1
 800b576:	2102      	movs	r1, #2
 800b578:	e000      	b.n	800b57c <__cvt+0x44>
 800b57a:	2103      	movs	r1, #3
 800b57c:	ab03      	add	r3, sp, #12
 800b57e:	9301      	str	r3, [sp, #4]
 800b580:	ab02      	add	r3, sp, #8
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	ec47 6b10 	vmov	d0, r6, r7
 800b588:	4653      	mov	r3, sl
 800b58a:	4622      	mov	r2, r4
 800b58c:	f000 fe78 	bl	800c280 <_dtoa_r>
 800b590:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b594:	4605      	mov	r5, r0
 800b596:	d119      	bne.n	800b5cc <__cvt+0x94>
 800b598:	f019 0f01 	tst.w	r9, #1
 800b59c:	d00e      	beq.n	800b5bc <__cvt+0x84>
 800b59e:	eb00 0904 	add.w	r9, r0, r4
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	f7f5 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5ae:	b108      	cbz	r0, 800b5b4 <__cvt+0x7c>
 800b5b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5b4:	2230      	movs	r2, #48	@ 0x30
 800b5b6:	9b03      	ldr	r3, [sp, #12]
 800b5b8:	454b      	cmp	r3, r9
 800b5ba:	d31e      	bcc.n	800b5fa <__cvt+0xc2>
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5c0:	1b5b      	subs	r3, r3, r5
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	b004      	add	sp, #16
 800b5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b5d0:	eb00 0904 	add.w	r9, r0, r4
 800b5d4:	d1e5      	bne.n	800b5a2 <__cvt+0x6a>
 800b5d6:	7803      	ldrb	r3, [r0, #0]
 800b5d8:	2b30      	cmp	r3, #48	@ 0x30
 800b5da:	d10a      	bne.n	800b5f2 <__cvt+0xba>
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2300      	movs	r3, #0
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	f7f5 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5e8:	b918      	cbnz	r0, 800b5f2 <__cvt+0xba>
 800b5ea:	f1c4 0401 	rsb	r4, r4, #1
 800b5ee:	f8ca 4000 	str.w	r4, [sl]
 800b5f2:	f8da 3000 	ldr.w	r3, [sl]
 800b5f6:	4499      	add	r9, r3
 800b5f8:	e7d3      	b.n	800b5a2 <__cvt+0x6a>
 800b5fa:	1c59      	adds	r1, r3, #1
 800b5fc:	9103      	str	r1, [sp, #12]
 800b5fe:	701a      	strb	r2, [r3, #0]
 800b600:	e7d9      	b.n	800b5b6 <__cvt+0x7e>

0800b602 <__exponent>:
 800b602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b604:	2900      	cmp	r1, #0
 800b606:	bfba      	itte	lt
 800b608:	4249      	neglt	r1, r1
 800b60a:	232d      	movlt	r3, #45	@ 0x2d
 800b60c:	232b      	movge	r3, #43	@ 0x2b
 800b60e:	2909      	cmp	r1, #9
 800b610:	7002      	strb	r2, [r0, #0]
 800b612:	7043      	strb	r3, [r0, #1]
 800b614:	dd29      	ble.n	800b66a <__exponent+0x68>
 800b616:	f10d 0307 	add.w	r3, sp, #7
 800b61a:	461d      	mov	r5, r3
 800b61c:	270a      	movs	r7, #10
 800b61e:	461a      	mov	r2, r3
 800b620:	fbb1 f6f7 	udiv	r6, r1, r7
 800b624:	fb07 1416 	mls	r4, r7, r6, r1
 800b628:	3430      	adds	r4, #48	@ 0x30
 800b62a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b62e:	460c      	mov	r4, r1
 800b630:	2c63      	cmp	r4, #99	@ 0x63
 800b632:	f103 33ff 	add.w	r3, r3, #4294967295
 800b636:	4631      	mov	r1, r6
 800b638:	dcf1      	bgt.n	800b61e <__exponent+0x1c>
 800b63a:	3130      	adds	r1, #48	@ 0x30
 800b63c:	1e94      	subs	r4, r2, #2
 800b63e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b642:	1c41      	adds	r1, r0, #1
 800b644:	4623      	mov	r3, r4
 800b646:	42ab      	cmp	r3, r5
 800b648:	d30a      	bcc.n	800b660 <__exponent+0x5e>
 800b64a:	f10d 0309 	add.w	r3, sp, #9
 800b64e:	1a9b      	subs	r3, r3, r2
 800b650:	42ac      	cmp	r4, r5
 800b652:	bf88      	it	hi
 800b654:	2300      	movhi	r3, #0
 800b656:	3302      	adds	r3, #2
 800b658:	4403      	add	r3, r0
 800b65a:	1a18      	subs	r0, r3, r0
 800b65c:	b003      	add	sp, #12
 800b65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b660:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b664:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b668:	e7ed      	b.n	800b646 <__exponent+0x44>
 800b66a:	2330      	movs	r3, #48	@ 0x30
 800b66c:	3130      	adds	r1, #48	@ 0x30
 800b66e:	7083      	strb	r3, [r0, #2]
 800b670:	70c1      	strb	r1, [r0, #3]
 800b672:	1d03      	adds	r3, r0, #4
 800b674:	e7f1      	b.n	800b65a <__exponent+0x58>
	...

0800b678 <_printf_float>:
 800b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67c:	b08d      	sub	sp, #52	@ 0x34
 800b67e:	460c      	mov	r4, r1
 800b680:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b684:	4616      	mov	r6, r2
 800b686:	461f      	mov	r7, r3
 800b688:	4605      	mov	r5, r0
 800b68a:	f000 fcdb 	bl	800c044 <_localeconv_r>
 800b68e:	6803      	ldr	r3, [r0, #0]
 800b690:	9304      	str	r3, [sp, #16]
 800b692:	4618      	mov	r0, r3
 800b694:	f7f4 fdec 	bl	8000270 <strlen>
 800b698:	2300      	movs	r3, #0
 800b69a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b69c:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a0:	9005      	str	r0, [sp, #20]
 800b6a2:	3307      	adds	r3, #7
 800b6a4:	f023 0307 	bic.w	r3, r3, #7
 800b6a8:	f103 0208 	add.w	r2, r3, #8
 800b6ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b6b0:	f8d4 b000 	ldr.w	fp, [r4]
 800b6b4:	f8c8 2000 	str.w	r2, [r8]
 800b6b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b6c0:	9307      	str	r3, [sp, #28]
 800b6c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b6c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b6ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6ce:	4b9c      	ldr	r3, [pc, #624]	@ (800b940 <_printf_float+0x2c8>)
 800b6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d4:	f7f5 fa2a 	bl	8000b2c <__aeabi_dcmpun>
 800b6d8:	bb70      	cbnz	r0, 800b738 <_printf_float+0xc0>
 800b6da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6de:	4b98      	ldr	r3, [pc, #608]	@ (800b940 <_printf_float+0x2c8>)
 800b6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e4:	f7f5 fa04 	bl	8000af0 <__aeabi_dcmple>
 800b6e8:	bb30      	cbnz	r0, 800b738 <_printf_float+0xc0>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	f7f5 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800b6f6:	b110      	cbz	r0, 800b6fe <_printf_float+0x86>
 800b6f8:	232d      	movs	r3, #45	@ 0x2d
 800b6fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6fe:	4a91      	ldr	r2, [pc, #580]	@ (800b944 <_printf_float+0x2cc>)
 800b700:	4b91      	ldr	r3, [pc, #580]	@ (800b948 <_printf_float+0x2d0>)
 800b702:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b706:	bf94      	ite	ls
 800b708:	4690      	movls	r8, r2
 800b70a:	4698      	movhi	r8, r3
 800b70c:	2303      	movs	r3, #3
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	f02b 0304 	bic.w	r3, fp, #4
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	f04f 0900 	mov.w	r9, #0
 800b71a:	9700      	str	r7, [sp, #0]
 800b71c:	4633      	mov	r3, r6
 800b71e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b720:	4621      	mov	r1, r4
 800b722:	4628      	mov	r0, r5
 800b724:	f000 f9d2 	bl	800bacc <_printf_common>
 800b728:	3001      	adds	r0, #1
 800b72a:	f040 808d 	bne.w	800b848 <_printf_float+0x1d0>
 800b72e:	f04f 30ff 	mov.w	r0, #4294967295
 800b732:	b00d      	add	sp, #52	@ 0x34
 800b734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b738:	4642      	mov	r2, r8
 800b73a:	464b      	mov	r3, r9
 800b73c:	4640      	mov	r0, r8
 800b73e:	4649      	mov	r1, r9
 800b740:	f7f5 f9f4 	bl	8000b2c <__aeabi_dcmpun>
 800b744:	b140      	cbz	r0, 800b758 <_printf_float+0xe0>
 800b746:	464b      	mov	r3, r9
 800b748:	2b00      	cmp	r3, #0
 800b74a:	bfbc      	itt	lt
 800b74c:	232d      	movlt	r3, #45	@ 0x2d
 800b74e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b752:	4a7e      	ldr	r2, [pc, #504]	@ (800b94c <_printf_float+0x2d4>)
 800b754:	4b7e      	ldr	r3, [pc, #504]	@ (800b950 <_printf_float+0x2d8>)
 800b756:	e7d4      	b.n	800b702 <_printf_float+0x8a>
 800b758:	6863      	ldr	r3, [r4, #4]
 800b75a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b75e:	9206      	str	r2, [sp, #24]
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	d13b      	bne.n	800b7dc <_printf_float+0x164>
 800b764:	2306      	movs	r3, #6
 800b766:	6063      	str	r3, [r4, #4]
 800b768:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b76c:	2300      	movs	r3, #0
 800b76e:	6022      	str	r2, [r4, #0]
 800b770:	9303      	str	r3, [sp, #12]
 800b772:	ab0a      	add	r3, sp, #40	@ 0x28
 800b774:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b778:	ab09      	add	r3, sp, #36	@ 0x24
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	6861      	ldr	r1, [r4, #4]
 800b77e:	ec49 8b10 	vmov	d0, r8, r9
 800b782:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b786:	4628      	mov	r0, r5
 800b788:	f7ff fed6 	bl	800b538 <__cvt>
 800b78c:	9b06      	ldr	r3, [sp, #24]
 800b78e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b790:	2b47      	cmp	r3, #71	@ 0x47
 800b792:	4680      	mov	r8, r0
 800b794:	d129      	bne.n	800b7ea <_printf_float+0x172>
 800b796:	1cc8      	adds	r0, r1, #3
 800b798:	db02      	blt.n	800b7a0 <_printf_float+0x128>
 800b79a:	6863      	ldr	r3, [r4, #4]
 800b79c:	4299      	cmp	r1, r3
 800b79e:	dd41      	ble.n	800b824 <_printf_float+0x1ac>
 800b7a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b7a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b7a8:	3901      	subs	r1, #1
 800b7aa:	4652      	mov	r2, sl
 800b7ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b7b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b7b2:	f7ff ff26 	bl	800b602 <__exponent>
 800b7b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7b8:	1813      	adds	r3, r2, r0
 800b7ba:	2a01      	cmp	r2, #1
 800b7bc:	4681      	mov	r9, r0
 800b7be:	6123      	str	r3, [r4, #16]
 800b7c0:	dc02      	bgt.n	800b7c8 <_printf_float+0x150>
 800b7c2:	6822      	ldr	r2, [r4, #0]
 800b7c4:	07d2      	lsls	r2, r2, #31
 800b7c6:	d501      	bpl.n	800b7cc <_printf_float+0x154>
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d0a2      	beq.n	800b71a <_printf_float+0xa2>
 800b7d4:	232d      	movs	r3, #45	@ 0x2d
 800b7d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7da:	e79e      	b.n	800b71a <_printf_float+0xa2>
 800b7dc:	9a06      	ldr	r2, [sp, #24]
 800b7de:	2a47      	cmp	r2, #71	@ 0x47
 800b7e0:	d1c2      	bne.n	800b768 <_printf_float+0xf0>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1c0      	bne.n	800b768 <_printf_float+0xf0>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e7bd      	b.n	800b766 <_printf_float+0xee>
 800b7ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b7ee:	d9db      	bls.n	800b7a8 <_printf_float+0x130>
 800b7f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b7f4:	d118      	bne.n	800b828 <_printf_float+0x1b0>
 800b7f6:	2900      	cmp	r1, #0
 800b7f8:	6863      	ldr	r3, [r4, #4]
 800b7fa:	dd0b      	ble.n	800b814 <_printf_float+0x19c>
 800b7fc:	6121      	str	r1, [r4, #16]
 800b7fe:	b913      	cbnz	r3, 800b806 <_printf_float+0x18e>
 800b800:	6822      	ldr	r2, [r4, #0]
 800b802:	07d0      	lsls	r0, r2, #31
 800b804:	d502      	bpl.n	800b80c <_printf_float+0x194>
 800b806:	3301      	adds	r3, #1
 800b808:	440b      	add	r3, r1
 800b80a:	6123      	str	r3, [r4, #16]
 800b80c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b80e:	f04f 0900 	mov.w	r9, #0
 800b812:	e7db      	b.n	800b7cc <_printf_float+0x154>
 800b814:	b913      	cbnz	r3, 800b81c <_printf_float+0x1a4>
 800b816:	6822      	ldr	r2, [r4, #0]
 800b818:	07d2      	lsls	r2, r2, #31
 800b81a:	d501      	bpl.n	800b820 <_printf_float+0x1a8>
 800b81c:	3302      	adds	r3, #2
 800b81e:	e7f4      	b.n	800b80a <_printf_float+0x192>
 800b820:	2301      	movs	r3, #1
 800b822:	e7f2      	b.n	800b80a <_printf_float+0x192>
 800b824:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b82a:	4299      	cmp	r1, r3
 800b82c:	db05      	blt.n	800b83a <_printf_float+0x1c2>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	6121      	str	r1, [r4, #16]
 800b832:	07d8      	lsls	r0, r3, #31
 800b834:	d5ea      	bpl.n	800b80c <_printf_float+0x194>
 800b836:	1c4b      	adds	r3, r1, #1
 800b838:	e7e7      	b.n	800b80a <_printf_float+0x192>
 800b83a:	2900      	cmp	r1, #0
 800b83c:	bfd4      	ite	le
 800b83e:	f1c1 0202 	rsble	r2, r1, #2
 800b842:	2201      	movgt	r2, #1
 800b844:	4413      	add	r3, r2
 800b846:	e7e0      	b.n	800b80a <_printf_float+0x192>
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	055a      	lsls	r2, r3, #21
 800b84c:	d407      	bmi.n	800b85e <_printf_float+0x1e6>
 800b84e:	6923      	ldr	r3, [r4, #16]
 800b850:	4642      	mov	r2, r8
 800b852:	4631      	mov	r1, r6
 800b854:	4628      	mov	r0, r5
 800b856:	47b8      	blx	r7
 800b858:	3001      	adds	r0, #1
 800b85a:	d12b      	bne.n	800b8b4 <_printf_float+0x23c>
 800b85c:	e767      	b.n	800b72e <_printf_float+0xb6>
 800b85e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b862:	f240 80dd 	bls.w	800ba20 <_printf_float+0x3a8>
 800b866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b86a:	2200      	movs	r2, #0
 800b86c:	2300      	movs	r3, #0
 800b86e:	f7f5 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b872:	2800      	cmp	r0, #0
 800b874:	d033      	beq.n	800b8de <_printf_float+0x266>
 800b876:	4a37      	ldr	r2, [pc, #220]	@ (800b954 <_printf_float+0x2dc>)
 800b878:	2301      	movs	r3, #1
 800b87a:	4631      	mov	r1, r6
 800b87c:	4628      	mov	r0, r5
 800b87e:	47b8      	blx	r7
 800b880:	3001      	adds	r0, #1
 800b882:	f43f af54 	beq.w	800b72e <_printf_float+0xb6>
 800b886:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b88a:	4543      	cmp	r3, r8
 800b88c:	db02      	blt.n	800b894 <_printf_float+0x21c>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	07d8      	lsls	r0, r3, #31
 800b892:	d50f      	bpl.n	800b8b4 <_printf_float+0x23c>
 800b894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b898:	4631      	mov	r1, r6
 800b89a:	4628      	mov	r0, r5
 800b89c:	47b8      	blx	r7
 800b89e:	3001      	adds	r0, #1
 800b8a0:	f43f af45 	beq.w	800b72e <_printf_float+0xb6>
 800b8a4:	f04f 0900 	mov.w	r9, #0
 800b8a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8ac:	f104 0a1a 	add.w	sl, r4, #26
 800b8b0:	45c8      	cmp	r8, r9
 800b8b2:	dc09      	bgt.n	800b8c8 <_printf_float+0x250>
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	079b      	lsls	r3, r3, #30
 800b8b8:	f100 8103 	bmi.w	800bac2 <_printf_float+0x44a>
 800b8bc:	68e0      	ldr	r0, [r4, #12]
 800b8be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8c0:	4298      	cmp	r0, r3
 800b8c2:	bfb8      	it	lt
 800b8c4:	4618      	movlt	r0, r3
 800b8c6:	e734      	b.n	800b732 <_printf_float+0xba>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	47b8      	blx	r7
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	f43f af2b 	beq.w	800b72e <_printf_float+0xb6>
 800b8d8:	f109 0901 	add.w	r9, r9, #1
 800b8dc:	e7e8      	b.n	800b8b0 <_printf_float+0x238>
 800b8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dc39      	bgt.n	800b958 <_printf_float+0x2e0>
 800b8e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b954 <_printf_float+0x2dc>)
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	47b8      	blx	r7
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	f43f af1d 	beq.w	800b72e <_printf_float+0xb6>
 800b8f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b8f8:	ea59 0303 	orrs.w	r3, r9, r3
 800b8fc:	d102      	bne.n	800b904 <_printf_float+0x28c>
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	07d9      	lsls	r1, r3, #31
 800b902:	d5d7      	bpl.n	800b8b4 <_printf_float+0x23c>
 800b904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b908:	4631      	mov	r1, r6
 800b90a:	4628      	mov	r0, r5
 800b90c:	47b8      	blx	r7
 800b90e:	3001      	adds	r0, #1
 800b910:	f43f af0d 	beq.w	800b72e <_printf_float+0xb6>
 800b914:	f04f 0a00 	mov.w	sl, #0
 800b918:	f104 0b1a 	add.w	fp, r4, #26
 800b91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b91e:	425b      	negs	r3, r3
 800b920:	4553      	cmp	r3, sl
 800b922:	dc01      	bgt.n	800b928 <_printf_float+0x2b0>
 800b924:	464b      	mov	r3, r9
 800b926:	e793      	b.n	800b850 <_printf_float+0x1d8>
 800b928:	2301      	movs	r3, #1
 800b92a:	465a      	mov	r2, fp
 800b92c:	4631      	mov	r1, r6
 800b92e:	4628      	mov	r0, r5
 800b930:	47b8      	blx	r7
 800b932:	3001      	adds	r0, #1
 800b934:	f43f aefb 	beq.w	800b72e <_printf_float+0xb6>
 800b938:	f10a 0a01 	add.w	sl, sl, #1
 800b93c:	e7ee      	b.n	800b91c <_printf_float+0x2a4>
 800b93e:	bf00      	nop
 800b940:	7fefffff 	.word	0x7fefffff
 800b944:	08010880 	.word	0x08010880
 800b948:	08010884 	.word	0x08010884
 800b94c:	08010888 	.word	0x08010888
 800b950:	0801088c 	.word	0x0801088c
 800b954:	08010890 	.word	0x08010890
 800b958:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b95a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b95e:	4553      	cmp	r3, sl
 800b960:	bfa8      	it	ge
 800b962:	4653      	movge	r3, sl
 800b964:	2b00      	cmp	r3, #0
 800b966:	4699      	mov	r9, r3
 800b968:	dc36      	bgt.n	800b9d8 <_printf_float+0x360>
 800b96a:	f04f 0b00 	mov.w	fp, #0
 800b96e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b972:	f104 021a 	add.w	r2, r4, #26
 800b976:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b978:	9306      	str	r3, [sp, #24]
 800b97a:	eba3 0309 	sub.w	r3, r3, r9
 800b97e:	455b      	cmp	r3, fp
 800b980:	dc31      	bgt.n	800b9e6 <_printf_float+0x36e>
 800b982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b984:	459a      	cmp	sl, r3
 800b986:	dc3a      	bgt.n	800b9fe <_printf_float+0x386>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	07da      	lsls	r2, r3, #31
 800b98c:	d437      	bmi.n	800b9fe <_printf_float+0x386>
 800b98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b990:	ebaa 0903 	sub.w	r9, sl, r3
 800b994:	9b06      	ldr	r3, [sp, #24]
 800b996:	ebaa 0303 	sub.w	r3, sl, r3
 800b99a:	4599      	cmp	r9, r3
 800b99c:	bfa8      	it	ge
 800b99e:	4699      	movge	r9, r3
 800b9a0:	f1b9 0f00 	cmp.w	r9, #0
 800b9a4:	dc33      	bgt.n	800ba0e <_printf_float+0x396>
 800b9a6:	f04f 0800 	mov.w	r8, #0
 800b9aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9ae:	f104 0b1a 	add.w	fp, r4, #26
 800b9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b4:	ebaa 0303 	sub.w	r3, sl, r3
 800b9b8:	eba3 0309 	sub.w	r3, r3, r9
 800b9bc:	4543      	cmp	r3, r8
 800b9be:	f77f af79 	ble.w	800b8b4 <_printf_float+0x23c>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	465a      	mov	r2, fp
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	47b8      	blx	r7
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	f43f aeae 	beq.w	800b72e <_printf_float+0xb6>
 800b9d2:	f108 0801 	add.w	r8, r8, #1
 800b9d6:	e7ec      	b.n	800b9b2 <_printf_float+0x33a>
 800b9d8:	4642      	mov	r2, r8
 800b9da:	4631      	mov	r1, r6
 800b9dc:	4628      	mov	r0, r5
 800b9de:	47b8      	blx	r7
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d1c2      	bne.n	800b96a <_printf_float+0x2f2>
 800b9e4:	e6a3      	b.n	800b72e <_printf_float+0xb6>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	4631      	mov	r1, r6
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	9206      	str	r2, [sp, #24]
 800b9ee:	47b8      	blx	r7
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	f43f ae9c 	beq.w	800b72e <_printf_float+0xb6>
 800b9f6:	9a06      	ldr	r2, [sp, #24]
 800b9f8:	f10b 0b01 	add.w	fp, fp, #1
 800b9fc:	e7bb      	b.n	800b976 <_printf_float+0x2fe>
 800b9fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba02:	4631      	mov	r1, r6
 800ba04:	4628      	mov	r0, r5
 800ba06:	47b8      	blx	r7
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d1c0      	bne.n	800b98e <_printf_float+0x316>
 800ba0c:	e68f      	b.n	800b72e <_printf_float+0xb6>
 800ba0e:	9a06      	ldr	r2, [sp, #24]
 800ba10:	464b      	mov	r3, r9
 800ba12:	4442      	add	r2, r8
 800ba14:	4631      	mov	r1, r6
 800ba16:	4628      	mov	r0, r5
 800ba18:	47b8      	blx	r7
 800ba1a:	3001      	adds	r0, #1
 800ba1c:	d1c3      	bne.n	800b9a6 <_printf_float+0x32e>
 800ba1e:	e686      	b.n	800b72e <_printf_float+0xb6>
 800ba20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ba24:	f1ba 0f01 	cmp.w	sl, #1
 800ba28:	dc01      	bgt.n	800ba2e <_printf_float+0x3b6>
 800ba2a:	07db      	lsls	r3, r3, #31
 800ba2c:	d536      	bpl.n	800ba9c <_printf_float+0x424>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	4642      	mov	r2, r8
 800ba32:	4631      	mov	r1, r6
 800ba34:	4628      	mov	r0, r5
 800ba36:	47b8      	blx	r7
 800ba38:	3001      	adds	r0, #1
 800ba3a:	f43f ae78 	beq.w	800b72e <_printf_float+0xb6>
 800ba3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba42:	4631      	mov	r1, r6
 800ba44:	4628      	mov	r0, r5
 800ba46:	47b8      	blx	r7
 800ba48:	3001      	adds	r0, #1
 800ba4a:	f43f ae70 	beq.w	800b72e <_printf_float+0xb6>
 800ba4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ba52:	2200      	movs	r2, #0
 800ba54:	2300      	movs	r3, #0
 800ba56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba5a:	f7f5 f835 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba5e:	b9c0      	cbnz	r0, 800ba92 <_printf_float+0x41a>
 800ba60:	4653      	mov	r3, sl
 800ba62:	f108 0201 	add.w	r2, r8, #1
 800ba66:	4631      	mov	r1, r6
 800ba68:	4628      	mov	r0, r5
 800ba6a:	47b8      	blx	r7
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d10c      	bne.n	800ba8a <_printf_float+0x412>
 800ba70:	e65d      	b.n	800b72e <_printf_float+0xb6>
 800ba72:	2301      	movs	r3, #1
 800ba74:	465a      	mov	r2, fp
 800ba76:	4631      	mov	r1, r6
 800ba78:	4628      	mov	r0, r5
 800ba7a:	47b8      	blx	r7
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	f43f ae56 	beq.w	800b72e <_printf_float+0xb6>
 800ba82:	f108 0801 	add.w	r8, r8, #1
 800ba86:	45d0      	cmp	r8, sl
 800ba88:	dbf3      	blt.n	800ba72 <_printf_float+0x3fa>
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ba90:	e6df      	b.n	800b852 <_printf_float+0x1da>
 800ba92:	f04f 0800 	mov.w	r8, #0
 800ba96:	f104 0b1a 	add.w	fp, r4, #26
 800ba9a:	e7f4      	b.n	800ba86 <_printf_float+0x40e>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	4642      	mov	r2, r8
 800baa0:	e7e1      	b.n	800ba66 <_printf_float+0x3ee>
 800baa2:	2301      	movs	r3, #1
 800baa4:	464a      	mov	r2, r9
 800baa6:	4631      	mov	r1, r6
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b8      	blx	r7
 800baac:	3001      	adds	r0, #1
 800baae:	f43f ae3e 	beq.w	800b72e <_printf_float+0xb6>
 800bab2:	f108 0801 	add.w	r8, r8, #1
 800bab6:	68e3      	ldr	r3, [r4, #12]
 800bab8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800baba:	1a5b      	subs	r3, r3, r1
 800babc:	4543      	cmp	r3, r8
 800babe:	dcf0      	bgt.n	800baa2 <_printf_float+0x42a>
 800bac0:	e6fc      	b.n	800b8bc <_printf_float+0x244>
 800bac2:	f04f 0800 	mov.w	r8, #0
 800bac6:	f104 0919 	add.w	r9, r4, #25
 800baca:	e7f4      	b.n	800bab6 <_printf_float+0x43e>

0800bacc <_printf_common>:
 800bacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad0:	4616      	mov	r6, r2
 800bad2:	4698      	mov	r8, r3
 800bad4:	688a      	ldr	r2, [r1, #8]
 800bad6:	690b      	ldr	r3, [r1, #16]
 800bad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800badc:	4293      	cmp	r3, r2
 800bade:	bfb8      	it	lt
 800bae0:	4613      	movlt	r3, r2
 800bae2:	6033      	str	r3, [r6, #0]
 800bae4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bae8:	4607      	mov	r7, r0
 800baea:	460c      	mov	r4, r1
 800baec:	b10a      	cbz	r2, 800baf2 <_printf_common+0x26>
 800baee:	3301      	adds	r3, #1
 800baf0:	6033      	str	r3, [r6, #0]
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	0699      	lsls	r1, r3, #26
 800baf6:	bf42      	ittt	mi
 800baf8:	6833      	ldrmi	r3, [r6, #0]
 800bafa:	3302      	addmi	r3, #2
 800bafc:	6033      	strmi	r3, [r6, #0]
 800bafe:	6825      	ldr	r5, [r4, #0]
 800bb00:	f015 0506 	ands.w	r5, r5, #6
 800bb04:	d106      	bne.n	800bb14 <_printf_common+0x48>
 800bb06:	f104 0a19 	add.w	sl, r4, #25
 800bb0a:	68e3      	ldr	r3, [r4, #12]
 800bb0c:	6832      	ldr	r2, [r6, #0]
 800bb0e:	1a9b      	subs	r3, r3, r2
 800bb10:	42ab      	cmp	r3, r5
 800bb12:	dc26      	bgt.n	800bb62 <_printf_common+0x96>
 800bb14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb18:	6822      	ldr	r2, [r4, #0]
 800bb1a:	3b00      	subs	r3, #0
 800bb1c:	bf18      	it	ne
 800bb1e:	2301      	movne	r3, #1
 800bb20:	0692      	lsls	r2, r2, #26
 800bb22:	d42b      	bmi.n	800bb7c <_printf_common+0xb0>
 800bb24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb28:	4641      	mov	r1, r8
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	47c8      	blx	r9
 800bb2e:	3001      	adds	r0, #1
 800bb30:	d01e      	beq.n	800bb70 <_printf_common+0xa4>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	6922      	ldr	r2, [r4, #16]
 800bb36:	f003 0306 	and.w	r3, r3, #6
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	bf02      	ittt	eq
 800bb3e:	68e5      	ldreq	r5, [r4, #12]
 800bb40:	6833      	ldreq	r3, [r6, #0]
 800bb42:	1aed      	subeq	r5, r5, r3
 800bb44:	68a3      	ldr	r3, [r4, #8]
 800bb46:	bf0c      	ite	eq
 800bb48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb4c:	2500      	movne	r5, #0
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	bfc4      	itt	gt
 800bb52:	1a9b      	subgt	r3, r3, r2
 800bb54:	18ed      	addgt	r5, r5, r3
 800bb56:	2600      	movs	r6, #0
 800bb58:	341a      	adds	r4, #26
 800bb5a:	42b5      	cmp	r5, r6
 800bb5c:	d11a      	bne.n	800bb94 <_printf_common+0xc8>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e008      	b.n	800bb74 <_printf_common+0xa8>
 800bb62:	2301      	movs	r3, #1
 800bb64:	4652      	mov	r2, sl
 800bb66:	4641      	mov	r1, r8
 800bb68:	4638      	mov	r0, r7
 800bb6a:	47c8      	blx	r9
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d103      	bne.n	800bb78 <_printf_common+0xac>
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295
 800bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb78:	3501      	adds	r5, #1
 800bb7a:	e7c6      	b.n	800bb0a <_printf_common+0x3e>
 800bb7c:	18e1      	adds	r1, r4, r3
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	2030      	movs	r0, #48	@ 0x30
 800bb82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb86:	4422      	add	r2, r4
 800bb88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb90:	3302      	adds	r3, #2
 800bb92:	e7c7      	b.n	800bb24 <_printf_common+0x58>
 800bb94:	2301      	movs	r3, #1
 800bb96:	4622      	mov	r2, r4
 800bb98:	4641      	mov	r1, r8
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	47c8      	blx	r9
 800bb9e:	3001      	adds	r0, #1
 800bba0:	d0e6      	beq.n	800bb70 <_printf_common+0xa4>
 800bba2:	3601      	adds	r6, #1
 800bba4:	e7d9      	b.n	800bb5a <_printf_common+0x8e>
	...

0800bba8 <_printf_i>:
 800bba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbac:	7e0f      	ldrb	r7, [r1, #24]
 800bbae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bbb0:	2f78      	cmp	r7, #120	@ 0x78
 800bbb2:	4691      	mov	r9, r2
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	469a      	mov	sl, r3
 800bbba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bbbe:	d807      	bhi.n	800bbd0 <_printf_i+0x28>
 800bbc0:	2f62      	cmp	r7, #98	@ 0x62
 800bbc2:	d80a      	bhi.n	800bbda <_printf_i+0x32>
 800bbc4:	2f00      	cmp	r7, #0
 800bbc6:	f000 80d2 	beq.w	800bd6e <_printf_i+0x1c6>
 800bbca:	2f58      	cmp	r7, #88	@ 0x58
 800bbcc:	f000 80b9 	beq.w	800bd42 <_printf_i+0x19a>
 800bbd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbd8:	e03a      	b.n	800bc50 <_printf_i+0xa8>
 800bbda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbde:	2b15      	cmp	r3, #21
 800bbe0:	d8f6      	bhi.n	800bbd0 <_printf_i+0x28>
 800bbe2:	a101      	add	r1, pc, #4	@ (adr r1, 800bbe8 <_printf_i+0x40>)
 800bbe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbe8:	0800bc41 	.word	0x0800bc41
 800bbec:	0800bc55 	.word	0x0800bc55
 800bbf0:	0800bbd1 	.word	0x0800bbd1
 800bbf4:	0800bbd1 	.word	0x0800bbd1
 800bbf8:	0800bbd1 	.word	0x0800bbd1
 800bbfc:	0800bbd1 	.word	0x0800bbd1
 800bc00:	0800bc55 	.word	0x0800bc55
 800bc04:	0800bbd1 	.word	0x0800bbd1
 800bc08:	0800bbd1 	.word	0x0800bbd1
 800bc0c:	0800bbd1 	.word	0x0800bbd1
 800bc10:	0800bbd1 	.word	0x0800bbd1
 800bc14:	0800bd55 	.word	0x0800bd55
 800bc18:	0800bc7f 	.word	0x0800bc7f
 800bc1c:	0800bd0f 	.word	0x0800bd0f
 800bc20:	0800bbd1 	.word	0x0800bbd1
 800bc24:	0800bbd1 	.word	0x0800bbd1
 800bc28:	0800bd77 	.word	0x0800bd77
 800bc2c:	0800bbd1 	.word	0x0800bbd1
 800bc30:	0800bc7f 	.word	0x0800bc7f
 800bc34:	0800bbd1 	.word	0x0800bbd1
 800bc38:	0800bbd1 	.word	0x0800bbd1
 800bc3c:	0800bd17 	.word	0x0800bd17
 800bc40:	6833      	ldr	r3, [r6, #0]
 800bc42:	1d1a      	adds	r2, r3, #4
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	6032      	str	r2, [r6, #0]
 800bc48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc50:	2301      	movs	r3, #1
 800bc52:	e09d      	b.n	800bd90 <_printf_i+0x1e8>
 800bc54:	6833      	ldr	r3, [r6, #0]
 800bc56:	6820      	ldr	r0, [r4, #0]
 800bc58:	1d19      	adds	r1, r3, #4
 800bc5a:	6031      	str	r1, [r6, #0]
 800bc5c:	0606      	lsls	r6, r0, #24
 800bc5e:	d501      	bpl.n	800bc64 <_printf_i+0xbc>
 800bc60:	681d      	ldr	r5, [r3, #0]
 800bc62:	e003      	b.n	800bc6c <_printf_i+0xc4>
 800bc64:	0645      	lsls	r5, r0, #25
 800bc66:	d5fb      	bpl.n	800bc60 <_printf_i+0xb8>
 800bc68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc6c:	2d00      	cmp	r5, #0
 800bc6e:	da03      	bge.n	800bc78 <_printf_i+0xd0>
 800bc70:	232d      	movs	r3, #45	@ 0x2d
 800bc72:	426d      	negs	r5, r5
 800bc74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc78:	4859      	ldr	r0, [pc, #356]	@ (800bde0 <_printf_i+0x238>)
 800bc7a:	230a      	movs	r3, #10
 800bc7c:	e011      	b.n	800bca2 <_printf_i+0xfa>
 800bc7e:	6821      	ldr	r1, [r4, #0]
 800bc80:	6833      	ldr	r3, [r6, #0]
 800bc82:	0608      	lsls	r0, r1, #24
 800bc84:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc88:	d402      	bmi.n	800bc90 <_printf_i+0xe8>
 800bc8a:	0649      	lsls	r1, r1, #25
 800bc8c:	bf48      	it	mi
 800bc8e:	b2ad      	uxthmi	r5, r5
 800bc90:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc92:	4853      	ldr	r0, [pc, #332]	@ (800bde0 <_printf_i+0x238>)
 800bc94:	6033      	str	r3, [r6, #0]
 800bc96:	bf14      	ite	ne
 800bc98:	230a      	movne	r3, #10
 800bc9a:	2308      	moveq	r3, #8
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bca2:	6866      	ldr	r6, [r4, #4]
 800bca4:	60a6      	str	r6, [r4, #8]
 800bca6:	2e00      	cmp	r6, #0
 800bca8:	bfa2      	ittt	ge
 800bcaa:	6821      	ldrge	r1, [r4, #0]
 800bcac:	f021 0104 	bicge.w	r1, r1, #4
 800bcb0:	6021      	strge	r1, [r4, #0]
 800bcb2:	b90d      	cbnz	r5, 800bcb8 <_printf_i+0x110>
 800bcb4:	2e00      	cmp	r6, #0
 800bcb6:	d04b      	beq.n	800bd50 <_printf_i+0x1a8>
 800bcb8:	4616      	mov	r6, r2
 800bcba:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcbe:	fb03 5711 	mls	r7, r3, r1, r5
 800bcc2:	5dc7      	ldrb	r7, [r0, r7]
 800bcc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcc8:	462f      	mov	r7, r5
 800bcca:	42bb      	cmp	r3, r7
 800bccc:	460d      	mov	r5, r1
 800bcce:	d9f4      	bls.n	800bcba <_printf_i+0x112>
 800bcd0:	2b08      	cmp	r3, #8
 800bcd2:	d10b      	bne.n	800bcec <_printf_i+0x144>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	07df      	lsls	r7, r3, #31
 800bcd8:	d508      	bpl.n	800bcec <_printf_i+0x144>
 800bcda:	6923      	ldr	r3, [r4, #16]
 800bcdc:	6861      	ldr	r1, [r4, #4]
 800bcde:	4299      	cmp	r1, r3
 800bce0:	bfde      	ittt	le
 800bce2:	2330      	movle	r3, #48	@ 0x30
 800bce4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bce8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bcec:	1b92      	subs	r2, r2, r6
 800bcee:	6122      	str	r2, [r4, #16]
 800bcf0:	f8cd a000 	str.w	sl, [sp]
 800bcf4:	464b      	mov	r3, r9
 800bcf6:	aa03      	add	r2, sp, #12
 800bcf8:	4621      	mov	r1, r4
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	f7ff fee6 	bl	800bacc <_printf_common>
 800bd00:	3001      	adds	r0, #1
 800bd02:	d14a      	bne.n	800bd9a <_printf_i+0x1f2>
 800bd04:	f04f 30ff 	mov.w	r0, #4294967295
 800bd08:	b004      	add	sp, #16
 800bd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	f043 0320 	orr.w	r3, r3, #32
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	4833      	ldr	r0, [pc, #204]	@ (800bde4 <_printf_i+0x23c>)
 800bd18:	2778      	movs	r7, #120	@ 0x78
 800bd1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	6831      	ldr	r1, [r6, #0]
 800bd22:	061f      	lsls	r7, r3, #24
 800bd24:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd28:	d402      	bmi.n	800bd30 <_printf_i+0x188>
 800bd2a:	065f      	lsls	r7, r3, #25
 800bd2c:	bf48      	it	mi
 800bd2e:	b2ad      	uxthmi	r5, r5
 800bd30:	6031      	str	r1, [r6, #0]
 800bd32:	07d9      	lsls	r1, r3, #31
 800bd34:	bf44      	itt	mi
 800bd36:	f043 0320 	orrmi.w	r3, r3, #32
 800bd3a:	6023      	strmi	r3, [r4, #0]
 800bd3c:	b11d      	cbz	r5, 800bd46 <_printf_i+0x19e>
 800bd3e:	2310      	movs	r3, #16
 800bd40:	e7ac      	b.n	800bc9c <_printf_i+0xf4>
 800bd42:	4827      	ldr	r0, [pc, #156]	@ (800bde0 <_printf_i+0x238>)
 800bd44:	e7e9      	b.n	800bd1a <_printf_i+0x172>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	f023 0320 	bic.w	r3, r3, #32
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	e7f6      	b.n	800bd3e <_printf_i+0x196>
 800bd50:	4616      	mov	r6, r2
 800bd52:	e7bd      	b.n	800bcd0 <_printf_i+0x128>
 800bd54:	6833      	ldr	r3, [r6, #0]
 800bd56:	6825      	ldr	r5, [r4, #0]
 800bd58:	6961      	ldr	r1, [r4, #20]
 800bd5a:	1d18      	adds	r0, r3, #4
 800bd5c:	6030      	str	r0, [r6, #0]
 800bd5e:	062e      	lsls	r6, r5, #24
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	d501      	bpl.n	800bd68 <_printf_i+0x1c0>
 800bd64:	6019      	str	r1, [r3, #0]
 800bd66:	e002      	b.n	800bd6e <_printf_i+0x1c6>
 800bd68:	0668      	lsls	r0, r5, #25
 800bd6a:	d5fb      	bpl.n	800bd64 <_printf_i+0x1bc>
 800bd6c:	8019      	strh	r1, [r3, #0]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	6123      	str	r3, [r4, #16]
 800bd72:	4616      	mov	r6, r2
 800bd74:	e7bc      	b.n	800bcf0 <_printf_i+0x148>
 800bd76:	6833      	ldr	r3, [r6, #0]
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	6032      	str	r2, [r6, #0]
 800bd7c:	681e      	ldr	r6, [r3, #0]
 800bd7e:	6862      	ldr	r2, [r4, #4]
 800bd80:	2100      	movs	r1, #0
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7f4 fa24 	bl	80001d0 <memchr>
 800bd88:	b108      	cbz	r0, 800bd8e <_printf_i+0x1e6>
 800bd8a:	1b80      	subs	r0, r0, r6
 800bd8c:	6060      	str	r0, [r4, #4]
 800bd8e:	6863      	ldr	r3, [r4, #4]
 800bd90:	6123      	str	r3, [r4, #16]
 800bd92:	2300      	movs	r3, #0
 800bd94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd98:	e7aa      	b.n	800bcf0 <_printf_i+0x148>
 800bd9a:	6923      	ldr	r3, [r4, #16]
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	4649      	mov	r1, r9
 800bda0:	4640      	mov	r0, r8
 800bda2:	47d0      	blx	sl
 800bda4:	3001      	adds	r0, #1
 800bda6:	d0ad      	beq.n	800bd04 <_printf_i+0x15c>
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	079b      	lsls	r3, r3, #30
 800bdac:	d413      	bmi.n	800bdd6 <_printf_i+0x22e>
 800bdae:	68e0      	ldr	r0, [r4, #12]
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	4298      	cmp	r0, r3
 800bdb4:	bfb8      	it	lt
 800bdb6:	4618      	movlt	r0, r3
 800bdb8:	e7a6      	b.n	800bd08 <_printf_i+0x160>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	47d0      	blx	sl
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d09d      	beq.n	800bd04 <_printf_i+0x15c>
 800bdc8:	3501      	adds	r5, #1
 800bdca:	68e3      	ldr	r3, [r4, #12]
 800bdcc:	9903      	ldr	r1, [sp, #12]
 800bdce:	1a5b      	subs	r3, r3, r1
 800bdd0:	42ab      	cmp	r3, r5
 800bdd2:	dcf2      	bgt.n	800bdba <_printf_i+0x212>
 800bdd4:	e7eb      	b.n	800bdae <_printf_i+0x206>
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	f104 0619 	add.w	r6, r4, #25
 800bddc:	e7f5      	b.n	800bdca <_printf_i+0x222>
 800bdde:	bf00      	nop
 800bde0:	08010892 	.word	0x08010892
 800bde4:	080108a3 	.word	0x080108a3

0800bde8 <std>:
 800bde8:	2300      	movs	r3, #0
 800bdea:	b510      	push	{r4, lr}
 800bdec:	4604      	mov	r4, r0
 800bdee:	e9c0 3300 	strd	r3, r3, [r0]
 800bdf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdf6:	6083      	str	r3, [r0, #8]
 800bdf8:	8181      	strh	r1, [r0, #12]
 800bdfa:	6643      	str	r3, [r0, #100]	@ 0x64
 800bdfc:	81c2      	strh	r2, [r0, #14]
 800bdfe:	6183      	str	r3, [r0, #24]
 800be00:	4619      	mov	r1, r3
 800be02:	2208      	movs	r2, #8
 800be04:	305c      	adds	r0, #92	@ 0x5c
 800be06:	f000 f914 	bl	800c032 <memset>
 800be0a:	4b0d      	ldr	r3, [pc, #52]	@ (800be40 <std+0x58>)
 800be0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800be0e:	4b0d      	ldr	r3, [pc, #52]	@ (800be44 <std+0x5c>)
 800be10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be12:	4b0d      	ldr	r3, [pc, #52]	@ (800be48 <std+0x60>)
 800be14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be16:	4b0d      	ldr	r3, [pc, #52]	@ (800be4c <std+0x64>)
 800be18:	6323      	str	r3, [r4, #48]	@ 0x30
 800be1a:	4b0d      	ldr	r3, [pc, #52]	@ (800be50 <std+0x68>)
 800be1c:	6224      	str	r4, [r4, #32]
 800be1e:	429c      	cmp	r4, r3
 800be20:	d006      	beq.n	800be30 <std+0x48>
 800be22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be26:	4294      	cmp	r4, r2
 800be28:	d002      	beq.n	800be30 <std+0x48>
 800be2a:	33d0      	adds	r3, #208	@ 0xd0
 800be2c:	429c      	cmp	r4, r3
 800be2e:	d105      	bne.n	800be3c <std+0x54>
 800be30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be38:	f000 b978 	b.w	800c12c <__retarget_lock_init_recursive>
 800be3c:	bd10      	pop	{r4, pc}
 800be3e:	bf00      	nop
 800be40:	0800bfad 	.word	0x0800bfad
 800be44:	0800bfcf 	.word	0x0800bfcf
 800be48:	0800c007 	.word	0x0800c007
 800be4c:	0800c02b 	.word	0x0800c02b
 800be50:	200021b8 	.word	0x200021b8

0800be54 <stdio_exit_handler>:
 800be54:	4a02      	ldr	r2, [pc, #8]	@ (800be60 <stdio_exit_handler+0xc>)
 800be56:	4903      	ldr	r1, [pc, #12]	@ (800be64 <stdio_exit_handler+0x10>)
 800be58:	4803      	ldr	r0, [pc, #12]	@ (800be68 <stdio_exit_handler+0x14>)
 800be5a:	f000 b869 	b.w	800bf30 <_fwalk_sglue>
 800be5e:	bf00      	nop
 800be60:	2000011c 	.word	0x2000011c
 800be64:	0800dac5 	.word	0x0800dac5
 800be68:	2000012c 	.word	0x2000012c

0800be6c <cleanup_stdio>:
 800be6c:	6841      	ldr	r1, [r0, #4]
 800be6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bea0 <cleanup_stdio+0x34>)
 800be70:	4299      	cmp	r1, r3
 800be72:	b510      	push	{r4, lr}
 800be74:	4604      	mov	r4, r0
 800be76:	d001      	beq.n	800be7c <cleanup_stdio+0x10>
 800be78:	f001 fe24 	bl	800dac4 <_fflush_r>
 800be7c:	68a1      	ldr	r1, [r4, #8]
 800be7e:	4b09      	ldr	r3, [pc, #36]	@ (800bea4 <cleanup_stdio+0x38>)
 800be80:	4299      	cmp	r1, r3
 800be82:	d002      	beq.n	800be8a <cleanup_stdio+0x1e>
 800be84:	4620      	mov	r0, r4
 800be86:	f001 fe1d 	bl	800dac4 <_fflush_r>
 800be8a:	68e1      	ldr	r1, [r4, #12]
 800be8c:	4b06      	ldr	r3, [pc, #24]	@ (800bea8 <cleanup_stdio+0x3c>)
 800be8e:	4299      	cmp	r1, r3
 800be90:	d004      	beq.n	800be9c <cleanup_stdio+0x30>
 800be92:	4620      	mov	r0, r4
 800be94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be98:	f001 be14 	b.w	800dac4 <_fflush_r>
 800be9c:	bd10      	pop	{r4, pc}
 800be9e:	bf00      	nop
 800bea0:	200021b8 	.word	0x200021b8
 800bea4:	20002220 	.word	0x20002220
 800bea8:	20002288 	.word	0x20002288

0800beac <global_stdio_init.part.0>:
 800beac:	b510      	push	{r4, lr}
 800beae:	4b0b      	ldr	r3, [pc, #44]	@ (800bedc <global_stdio_init.part.0+0x30>)
 800beb0:	4c0b      	ldr	r4, [pc, #44]	@ (800bee0 <global_stdio_init.part.0+0x34>)
 800beb2:	4a0c      	ldr	r2, [pc, #48]	@ (800bee4 <global_stdio_init.part.0+0x38>)
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	4620      	mov	r0, r4
 800beb8:	2200      	movs	r2, #0
 800beba:	2104      	movs	r1, #4
 800bebc:	f7ff ff94 	bl	800bde8 <std>
 800bec0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bec4:	2201      	movs	r2, #1
 800bec6:	2109      	movs	r1, #9
 800bec8:	f7ff ff8e 	bl	800bde8 <std>
 800becc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bed0:	2202      	movs	r2, #2
 800bed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed6:	2112      	movs	r1, #18
 800bed8:	f7ff bf86 	b.w	800bde8 <std>
 800bedc:	200022f0 	.word	0x200022f0
 800bee0:	200021b8 	.word	0x200021b8
 800bee4:	0800be55 	.word	0x0800be55

0800bee8 <__sfp_lock_acquire>:
 800bee8:	4801      	ldr	r0, [pc, #4]	@ (800bef0 <__sfp_lock_acquire+0x8>)
 800beea:	f000 b920 	b.w	800c12e <__retarget_lock_acquire_recursive>
 800beee:	bf00      	nop
 800bef0:	200022f9 	.word	0x200022f9

0800bef4 <__sfp_lock_release>:
 800bef4:	4801      	ldr	r0, [pc, #4]	@ (800befc <__sfp_lock_release+0x8>)
 800bef6:	f000 b91b 	b.w	800c130 <__retarget_lock_release_recursive>
 800befa:	bf00      	nop
 800befc:	200022f9 	.word	0x200022f9

0800bf00 <__sinit>:
 800bf00:	b510      	push	{r4, lr}
 800bf02:	4604      	mov	r4, r0
 800bf04:	f7ff fff0 	bl	800bee8 <__sfp_lock_acquire>
 800bf08:	6a23      	ldr	r3, [r4, #32]
 800bf0a:	b11b      	cbz	r3, 800bf14 <__sinit+0x14>
 800bf0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf10:	f7ff bff0 	b.w	800bef4 <__sfp_lock_release>
 800bf14:	4b04      	ldr	r3, [pc, #16]	@ (800bf28 <__sinit+0x28>)
 800bf16:	6223      	str	r3, [r4, #32]
 800bf18:	4b04      	ldr	r3, [pc, #16]	@ (800bf2c <__sinit+0x2c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1f5      	bne.n	800bf0c <__sinit+0xc>
 800bf20:	f7ff ffc4 	bl	800beac <global_stdio_init.part.0>
 800bf24:	e7f2      	b.n	800bf0c <__sinit+0xc>
 800bf26:	bf00      	nop
 800bf28:	0800be6d 	.word	0x0800be6d
 800bf2c:	200022f0 	.word	0x200022f0

0800bf30 <_fwalk_sglue>:
 800bf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf34:	4607      	mov	r7, r0
 800bf36:	4688      	mov	r8, r1
 800bf38:	4614      	mov	r4, r2
 800bf3a:	2600      	movs	r6, #0
 800bf3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf40:	f1b9 0901 	subs.w	r9, r9, #1
 800bf44:	d505      	bpl.n	800bf52 <_fwalk_sglue+0x22>
 800bf46:	6824      	ldr	r4, [r4, #0]
 800bf48:	2c00      	cmp	r4, #0
 800bf4a:	d1f7      	bne.n	800bf3c <_fwalk_sglue+0xc>
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf52:	89ab      	ldrh	r3, [r5, #12]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d907      	bls.n	800bf68 <_fwalk_sglue+0x38>
 800bf58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	d003      	beq.n	800bf68 <_fwalk_sglue+0x38>
 800bf60:	4629      	mov	r1, r5
 800bf62:	4638      	mov	r0, r7
 800bf64:	47c0      	blx	r8
 800bf66:	4306      	orrs	r6, r0
 800bf68:	3568      	adds	r5, #104	@ 0x68
 800bf6a:	e7e9      	b.n	800bf40 <_fwalk_sglue+0x10>

0800bf6c <siprintf>:
 800bf6c:	b40e      	push	{r1, r2, r3}
 800bf6e:	b500      	push	{lr}
 800bf70:	b09c      	sub	sp, #112	@ 0x70
 800bf72:	ab1d      	add	r3, sp, #116	@ 0x74
 800bf74:	9002      	str	r0, [sp, #8]
 800bf76:	9006      	str	r0, [sp, #24]
 800bf78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bf7c:	4809      	ldr	r0, [pc, #36]	@ (800bfa4 <siprintf+0x38>)
 800bf7e:	9107      	str	r1, [sp, #28]
 800bf80:	9104      	str	r1, [sp, #16]
 800bf82:	4909      	ldr	r1, [pc, #36]	@ (800bfa8 <siprintf+0x3c>)
 800bf84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf88:	9105      	str	r1, [sp, #20]
 800bf8a:	6800      	ldr	r0, [r0, #0]
 800bf8c:	9301      	str	r3, [sp, #4]
 800bf8e:	a902      	add	r1, sp, #8
 800bf90:	f001 fc18 	bl	800d7c4 <_svfiprintf_r>
 800bf94:	9b02      	ldr	r3, [sp, #8]
 800bf96:	2200      	movs	r2, #0
 800bf98:	701a      	strb	r2, [r3, #0]
 800bf9a:	b01c      	add	sp, #112	@ 0x70
 800bf9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfa0:	b003      	add	sp, #12
 800bfa2:	4770      	bx	lr
 800bfa4:	20000128 	.word	0x20000128
 800bfa8:	ffff0208 	.word	0xffff0208

0800bfac <__sread>:
 800bfac:	b510      	push	{r4, lr}
 800bfae:	460c      	mov	r4, r1
 800bfb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb4:	f000 f86c 	bl	800c090 <_read_r>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	bfab      	itete	ge
 800bfbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bfbe:	89a3      	ldrhlt	r3, [r4, #12]
 800bfc0:	181b      	addge	r3, r3, r0
 800bfc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfc6:	bfac      	ite	ge
 800bfc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfca:	81a3      	strhlt	r3, [r4, #12]
 800bfcc:	bd10      	pop	{r4, pc}

0800bfce <__swrite>:
 800bfce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd2:	461f      	mov	r7, r3
 800bfd4:	898b      	ldrh	r3, [r1, #12]
 800bfd6:	05db      	lsls	r3, r3, #23
 800bfd8:	4605      	mov	r5, r0
 800bfda:	460c      	mov	r4, r1
 800bfdc:	4616      	mov	r6, r2
 800bfde:	d505      	bpl.n	800bfec <__swrite+0x1e>
 800bfe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f000 f840 	bl	800c06c <_lseek_r>
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bff6:	81a3      	strh	r3, [r4, #12]
 800bff8:	4632      	mov	r2, r6
 800bffa:	463b      	mov	r3, r7
 800bffc:	4628      	mov	r0, r5
 800bffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c002:	f000 b857 	b.w	800c0b4 <_write_r>

0800c006 <__sseek>:
 800c006:	b510      	push	{r4, lr}
 800c008:	460c      	mov	r4, r1
 800c00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c00e:	f000 f82d 	bl	800c06c <_lseek_r>
 800c012:	1c43      	adds	r3, r0, #1
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	bf15      	itete	ne
 800c018:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c01a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c01e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c022:	81a3      	strheq	r3, [r4, #12]
 800c024:	bf18      	it	ne
 800c026:	81a3      	strhne	r3, [r4, #12]
 800c028:	bd10      	pop	{r4, pc}

0800c02a <__sclose>:
 800c02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02e:	f000 b80d 	b.w	800c04c <_close_r>

0800c032 <memset>:
 800c032:	4402      	add	r2, r0
 800c034:	4603      	mov	r3, r0
 800c036:	4293      	cmp	r3, r2
 800c038:	d100      	bne.n	800c03c <memset+0xa>
 800c03a:	4770      	bx	lr
 800c03c:	f803 1b01 	strb.w	r1, [r3], #1
 800c040:	e7f9      	b.n	800c036 <memset+0x4>
	...

0800c044 <_localeconv_r>:
 800c044:	4800      	ldr	r0, [pc, #0]	@ (800c048 <_localeconv_r+0x4>)
 800c046:	4770      	bx	lr
 800c048:	20000268 	.word	0x20000268

0800c04c <_close_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	4d06      	ldr	r5, [pc, #24]	@ (800c068 <_close_r+0x1c>)
 800c050:	2300      	movs	r3, #0
 800c052:	4604      	mov	r4, r0
 800c054:	4608      	mov	r0, r1
 800c056:	602b      	str	r3, [r5, #0]
 800c058:	f7f6 ff72 	bl	8002f40 <_close>
 800c05c:	1c43      	adds	r3, r0, #1
 800c05e:	d102      	bne.n	800c066 <_close_r+0x1a>
 800c060:	682b      	ldr	r3, [r5, #0]
 800c062:	b103      	cbz	r3, 800c066 <_close_r+0x1a>
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	200022f4 	.word	0x200022f4

0800c06c <_lseek_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4d07      	ldr	r5, [pc, #28]	@ (800c08c <_lseek_r+0x20>)
 800c070:	4604      	mov	r4, r0
 800c072:	4608      	mov	r0, r1
 800c074:	4611      	mov	r1, r2
 800c076:	2200      	movs	r2, #0
 800c078:	602a      	str	r2, [r5, #0]
 800c07a:	461a      	mov	r2, r3
 800c07c:	f7f6 ff87 	bl	8002f8e <_lseek>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d102      	bne.n	800c08a <_lseek_r+0x1e>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b103      	cbz	r3, 800c08a <_lseek_r+0x1e>
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	200022f4 	.word	0x200022f4

0800c090 <_read_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4d07      	ldr	r5, [pc, #28]	@ (800c0b0 <_read_r+0x20>)
 800c094:	4604      	mov	r4, r0
 800c096:	4608      	mov	r0, r1
 800c098:	4611      	mov	r1, r2
 800c09a:	2200      	movs	r2, #0
 800c09c:	602a      	str	r2, [r5, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f7f6 ff15 	bl	8002ece <_read>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_read_r+0x1e>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_read_r+0x1e>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	200022f4 	.word	0x200022f4

0800c0b4 <_write_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4d07      	ldr	r5, [pc, #28]	@ (800c0d4 <_write_r+0x20>)
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	4608      	mov	r0, r1
 800c0bc:	4611      	mov	r1, r2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	602a      	str	r2, [r5, #0]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f7f6 ff20 	bl	8002f08 <_write>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_write_r+0x1e>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_write_r+0x1e>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	200022f4 	.word	0x200022f4

0800c0d8 <__errno>:
 800c0d8:	4b01      	ldr	r3, [pc, #4]	@ (800c0e0 <__errno+0x8>)
 800c0da:	6818      	ldr	r0, [r3, #0]
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	20000128 	.word	0x20000128

0800c0e4 <__libc_init_array>:
 800c0e4:	b570      	push	{r4, r5, r6, lr}
 800c0e6:	4d0d      	ldr	r5, [pc, #52]	@ (800c11c <__libc_init_array+0x38>)
 800c0e8:	4c0d      	ldr	r4, [pc, #52]	@ (800c120 <__libc_init_array+0x3c>)
 800c0ea:	1b64      	subs	r4, r4, r5
 800c0ec:	10a4      	asrs	r4, r4, #2
 800c0ee:	2600      	movs	r6, #0
 800c0f0:	42a6      	cmp	r6, r4
 800c0f2:	d109      	bne.n	800c108 <__libc_init_array+0x24>
 800c0f4:	4d0b      	ldr	r5, [pc, #44]	@ (800c124 <__libc_init_array+0x40>)
 800c0f6:	4c0c      	ldr	r4, [pc, #48]	@ (800c128 <__libc_init_array+0x44>)
 800c0f8:	f004 fb54 	bl	80107a4 <_init>
 800c0fc:	1b64      	subs	r4, r4, r5
 800c0fe:	10a4      	asrs	r4, r4, #2
 800c100:	2600      	movs	r6, #0
 800c102:	42a6      	cmp	r6, r4
 800c104:	d105      	bne.n	800c112 <__libc_init_array+0x2e>
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	f855 3b04 	ldr.w	r3, [r5], #4
 800c10c:	4798      	blx	r3
 800c10e:	3601      	adds	r6, #1
 800c110:	e7ee      	b.n	800c0f0 <__libc_init_array+0xc>
 800c112:	f855 3b04 	ldr.w	r3, [r5], #4
 800c116:	4798      	blx	r3
 800c118:	3601      	adds	r6, #1
 800c11a:	e7f2      	b.n	800c102 <__libc_init_array+0x1e>
 800c11c:	08011080 	.word	0x08011080
 800c120:	08011080 	.word	0x08011080
 800c124:	08011080 	.word	0x08011080
 800c128:	08011084 	.word	0x08011084

0800c12c <__retarget_lock_init_recursive>:
 800c12c:	4770      	bx	lr

0800c12e <__retarget_lock_acquire_recursive>:
 800c12e:	4770      	bx	lr

0800c130 <__retarget_lock_release_recursive>:
 800c130:	4770      	bx	lr

0800c132 <memcpy>:
 800c132:	440a      	add	r2, r1
 800c134:	4291      	cmp	r1, r2
 800c136:	f100 33ff 	add.w	r3, r0, #4294967295
 800c13a:	d100      	bne.n	800c13e <memcpy+0xc>
 800c13c:	4770      	bx	lr
 800c13e:	b510      	push	{r4, lr}
 800c140:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c144:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c148:	4291      	cmp	r1, r2
 800c14a:	d1f9      	bne.n	800c140 <memcpy+0xe>
 800c14c:	bd10      	pop	{r4, pc}

0800c14e <copysign>:
 800c14e:	b082      	sub	sp, #8
 800c150:	ec51 0b10 	vmov	r0, r1, d0
 800c154:	ed8d 1b00 	vstr	d1, [sp]
 800c158:	4602      	mov	r2, r0
 800c15a:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800c15e:	9901      	ldr	r1, [sp, #4]
 800c160:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c164:	ea40 0301 	orr.w	r3, r0, r1
 800c168:	ec43 2b10 	vmov	d0, r2, r3
 800c16c:	b002      	add	sp, #8
 800c16e:	4770      	bx	lr

0800c170 <quorem>:
 800c170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	6903      	ldr	r3, [r0, #16]
 800c176:	690c      	ldr	r4, [r1, #16]
 800c178:	42a3      	cmp	r3, r4
 800c17a:	4607      	mov	r7, r0
 800c17c:	db7e      	blt.n	800c27c <quorem+0x10c>
 800c17e:	3c01      	subs	r4, #1
 800c180:	f101 0814 	add.w	r8, r1, #20
 800c184:	00a3      	lsls	r3, r4, #2
 800c186:	f100 0514 	add.w	r5, r0, #20
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c190:	9301      	str	r3, [sp, #4]
 800c192:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c19a:	3301      	adds	r3, #1
 800c19c:	429a      	cmp	r2, r3
 800c19e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1a6:	d32e      	bcc.n	800c206 <quorem+0x96>
 800c1a8:	f04f 0a00 	mov.w	sl, #0
 800c1ac:	46c4      	mov	ip, r8
 800c1ae:	46ae      	mov	lr, r5
 800c1b0:	46d3      	mov	fp, sl
 800c1b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c1b6:	b298      	uxth	r0, r3
 800c1b8:	fb06 a000 	mla	r0, r6, r0, sl
 800c1bc:	0c02      	lsrs	r2, r0, #16
 800c1be:	0c1b      	lsrs	r3, r3, #16
 800c1c0:	fb06 2303 	mla	r3, r6, r3, r2
 800c1c4:	f8de 2000 	ldr.w	r2, [lr]
 800c1c8:	b280      	uxth	r0, r0
 800c1ca:	b292      	uxth	r2, r2
 800c1cc:	1a12      	subs	r2, r2, r0
 800c1ce:	445a      	add	r2, fp
 800c1d0:	f8de 0000 	ldr.w	r0, [lr]
 800c1d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c1de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c1e2:	b292      	uxth	r2, r2
 800c1e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c1e8:	45e1      	cmp	r9, ip
 800c1ea:	f84e 2b04 	str.w	r2, [lr], #4
 800c1ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c1f2:	d2de      	bcs.n	800c1b2 <quorem+0x42>
 800c1f4:	9b00      	ldr	r3, [sp, #0]
 800c1f6:	58eb      	ldr	r3, [r5, r3]
 800c1f8:	b92b      	cbnz	r3, 800c206 <quorem+0x96>
 800c1fa:	9b01      	ldr	r3, [sp, #4]
 800c1fc:	3b04      	subs	r3, #4
 800c1fe:	429d      	cmp	r5, r3
 800c200:	461a      	mov	r2, r3
 800c202:	d32f      	bcc.n	800c264 <quorem+0xf4>
 800c204:	613c      	str	r4, [r7, #16]
 800c206:	4638      	mov	r0, r7
 800c208:	f001 f978 	bl	800d4fc <__mcmp>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	db25      	blt.n	800c25c <quorem+0xec>
 800c210:	4629      	mov	r1, r5
 800c212:	2000      	movs	r0, #0
 800c214:	f858 2b04 	ldr.w	r2, [r8], #4
 800c218:	f8d1 c000 	ldr.w	ip, [r1]
 800c21c:	fa1f fe82 	uxth.w	lr, r2
 800c220:	fa1f f38c 	uxth.w	r3, ip
 800c224:	eba3 030e 	sub.w	r3, r3, lr
 800c228:	4403      	add	r3, r0
 800c22a:	0c12      	lsrs	r2, r2, #16
 800c22c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c230:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c234:	b29b      	uxth	r3, r3
 800c236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c23a:	45c1      	cmp	r9, r8
 800c23c:	f841 3b04 	str.w	r3, [r1], #4
 800c240:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c244:	d2e6      	bcs.n	800c214 <quorem+0xa4>
 800c246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c24a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c24e:	b922      	cbnz	r2, 800c25a <quorem+0xea>
 800c250:	3b04      	subs	r3, #4
 800c252:	429d      	cmp	r5, r3
 800c254:	461a      	mov	r2, r3
 800c256:	d30b      	bcc.n	800c270 <quorem+0x100>
 800c258:	613c      	str	r4, [r7, #16]
 800c25a:	3601      	adds	r6, #1
 800c25c:	4630      	mov	r0, r6
 800c25e:	b003      	add	sp, #12
 800c260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c264:	6812      	ldr	r2, [r2, #0]
 800c266:	3b04      	subs	r3, #4
 800c268:	2a00      	cmp	r2, #0
 800c26a:	d1cb      	bne.n	800c204 <quorem+0x94>
 800c26c:	3c01      	subs	r4, #1
 800c26e:	e7c6      	b.n	800c1fe <quorem+0x8e>
 800c270:	6812      	ldr	r2, [r2, #0]
 800c272:	3b04      	subs	r3, #4
 800c274:	2a00      	cmp	r2, #0
 800c276:	d1ef      	bne.n	800c258 <quorem+0xe8>
 800c278:	3c01      	subs	r4, #1
 800c27a:	e7ea      	b.n	800c252 <quorem+0xe2>
 800c27c:	2000      	movs	r0, #0
 800c27e:	e7ee      	b.n	800c25e <quorem+0xee>

0800c280 <_dtoa_r>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	69c7      	ldr	r7, [r0, #28]
 800c286:	b099      	sub	sp, #100	@ 0x64
 800c288:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c28c:	ec55 4b10 	vmov	r4, r5, d0
 800c290:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c292:	9109      	str	r1, [sp, #36]	@ 0x24
 800c294:	4683      	mov	fp, r0
 800c296:	920e      	str	r2, [sp, #56]	@ 0x38
 800c298:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c29a:	b97f      	cbnz	r7, 800c2bc <_dtoa_r+0x3c>
 800c29c:	2010      	movs	r0, #16
 800c29e:	f000 fdfd 	bl	800ce9c <malloc>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c2a8:	b920      	cbnz	r0, 800c2b4 <_dtoa_r+0x34>
 800c2aa:	4ba7      	ldr	r3, [pc, #668]	@ (800c548 <_dtoa_r+0x2c8>)
 800c2ac:	21ef      	movs	r1, #239	@ 0xef
 800c2ae:	48a7      	ldr	r0, [pc, #668]	@ (800c54c <_dtoa_r+0x2cc>)
 800c2b0:	f001 fc5a 	bl	800db68 <__assert_func>
 800c2b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c2b8:	6007      	str	r7, [r0, #0]
 800c2ba:	60c7      	str	r7, [r0, #12]
 800c2bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c2c0:	6819      	ldr	r1, [r3, #0]
 800c2c2:	b159      	cbz	r1, 800c2dc <_dtoa_r+0x5c>
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	604a      	str	r2, [r1, #4]
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	4093      	lsls	r3, r2
 800c2cc:	608b      	str	r3, [r1, #8]
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	f000 feda 	bl	800d088 <_Bfree>
 800c2d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]
 800c2dc:	1e2b      	subs	r3, r5, #0
 800c2de:	bfb9      	ittee	lt
 800c2e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c2e4:	9303      	strlt	r3, [sp, #12]
 800c2e6:	2300      	movge	r3, #0
 800c2e8:	6033      	strge	r3, [r6, #0]
 800c2ea:	9f03      	ldr	r7, [sp, #12]
 800c2ec:	4b98      	ldr	r3, [pc, #608]	@ (800c550 <_dtoa_r+0x2d0>)
 800c2ee:	bfbc      	itt	lt
 800c2f0:	2201      	movlt	r2, #1
 800c2f2:	6032      	strlt	r2, [r6, #0]
 800c2f4:	43bb      	bics	r3, r7
 800c2f6:	d112      	bne.n	800c31e <_dtoa_r+0x9e>
 800c2f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c2fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c304:	4323      	orrs	r3, r4
 800c306:	f000 854d 	beq.w	800cda4 <_dtoa_r+0xb24>
 800c30a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c30c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c564 <_dtoa_r+0x2e4>
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 854f 	beq.w	800cdb4 <_dtoa_r+0xb34>
 800c316:	f10a 0303 	add.w	r3, sl, #3
 800c31a:	f000 bd49 	b.w	800cdb0 <_dtoa_r+0xb30>
 800c31e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c322:	2200      	movs	r2, #0
 800c324:	ec51 0b17 	vmov	r0, r1, d7
 800c328:	2300      	movs	r3, #0
 800c32a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c32e:	f7f4 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c332:	4680      	mov	r8, r0
 800c334:	b158      	cbz	r0, 800c34e <_dtoa_r+0xce>
 800c336:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c338:	2301      	movs	r3, #1
 800c33a:	6013      	str	r3, [r2, #0]
 800c33c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c33e:	b113      	cbz	r3, 800c346 <_dtoa_r+0xc6>
 800c340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c342:	4b84      	ldr	r3, [pc, #528]	@ (800c554 <_dtoa_r+0x2d4>)
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c568 <_dtoa_r+0x2e8>
 800c34a:	f000 bd33 	b.w	800cdb4 <_dtoa_r+0xb34>
 800c34e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c352:	aa16      	add	r2, sp, #88	@ 0x58
 800c354:	a917      	add	r1, sp, #92	@ 0x5c
 800c356:	4658      	mov	r0, fp
 800c358:	f001 f980 	bl	800d65c <__d2b>
 800c35c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c360:	4681      	mov	r9, r0
 800c362:	2e00      	cmp	r6, #0
 800c364:	d077      	beq.n	800c456 <_dtoa_r+0x1d6>
 800c366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c368:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c36c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c374:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c378:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c37c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c380:	4619      	mov	r1, r3
 800c382:	2200      	movs	r2, #0
 800c384:	4b74      	ldr	r3, [pc, #464]	@ (800c558 <_dtoa_r+0x2d8>)
 800c386:	f7f3 ff7f 	bl	8000288 <__aeabi_dsub>
 800c38a:	a369      	add	r3, pc, #420	@ (adr r3, 800c530 <_dtoa_r+0x2b0>)
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f7f4 f932 	bl	80005f8 <__aeabi_dmul>
 800c394:	a368      	add	r3, pc, #416	@ (adr r3, 800c538 <_dtoa_r+0x2b8>)
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	f7f3 ff77 	bl	800028c <__adddf3>
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	f7f4 f8be 	bl	8000524 <__aeabi_i2d>
 800c3a8:	a365      	add	r3, pc, #404	@ (adr r3, 800c540 <_dtoa_r+0x2c0>)
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	f7f4 f923 	bl	80005f8 <__aeabi_dmul>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	f7f3 ff67 	bl	800028c <__adddf3>
 800c3be:	4604      	mov	r4, r0
 800c3c0:	460d      	mov	r5, r1
 800c3c2:	f7f4 fbc9 	bl	8000b58 <__aeabi_d2iz>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	4607      	mov	r7, r0
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f4 fb84 	bl	8000adc <__aeabi_dcmplt>
 800c3d4:	b140      	cbz	r0, 800c3e8 <_dtoa_r+0x168>
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f7f4 f8a4 	bl	8000524 <__aeabi_i2d>
 800c3dc:	4622      	mov	r2, r4
 800c3de:	462b      	mov	r3, r5
 800c3e0:	f7f4 fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3e4:	b900      	cbnz	r0, 800c3e8 <_dtoa_r+0x168>
 800c3e6:	3f01      	subs	r7, #1
 800c3e8:	2f16      	cmp	r7, #22
 800c3ea:	d851      	bhi.n	800c490 <_dtoa_r+0x210>
 800c3ec:	4b5b      	ldr	r3, [pc, #364]	@ (800c55c <_dtoa_r+0x2dc>)
 800c3ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3fa:	f7f4 fb6f 	bl	8000adc <__aeabi_dcmplt>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d048      	beq.n	800c494 <_dtoa_r+0x214>
 800c402:	3f01      	subs	r7, #1
 800c404:	2300      	movs	r3, #0
 800c406:	9312      	str	r3, [sp, #72]	@ 0x48
 800c408:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c40a:	1b9b      	subs	r3, r3, r6
 800c40c:	1e5a      	subs	r2, r3, #1
 800c40e:	bf44      	itt	mi
 800c410:	f1c3 0801 	rsbmi	r8, r3, #1
 800c414:	2300      	movmi	r3, #0
 800c416:	9208      	str	r2, [sp, #32]
 800c418:	bf54      	ite	pl
 800c41a:	f04f 0800 	movpl.w	r8, #0
 800c41e:	9308      	strmi	r3, [sp, #32]
 800c420:	2f00      	cmp	r7, #0
 800c422:	db39      	blt.n	800c498 <_dtoa_r+0x218>
 800c424:	9b08      	ldr	r3, [sp, #32]
 800c426:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c428:	443b      	add	r3, r7
 800c42a:	9308      	str	r3, [sp, #32]
 800c42c:	2300      	movs	r3, #0
 800c42e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c432:	2b09      	cmp	r3, #9
 800c434:	d864      	bhi.n	800c500 <_dtoa_r+0x280>
 800c436:	2b05      	cmp	r3, #5
 800c438:	bfc4      	itt	gt
 800c43a:	3b04      	subgt	r3, #4
 800c43c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c440:	f1a3 0302 	sub.w	r3, r3, #2
 800c444:	bfcc      	ite	gt
 800c446:	2400      	movgt	r4, #0
 800c448:	2401      	movle	r4, #1
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d863      	bhi.n	800c516 <_dtoa_r+0x296>
 800c44e:	e8df f003 	tbb	[pc, r3]
 800c452:	372a      	.short	0x372a
 800c454:	5535      	.short	0x5535
 800c456:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c45a:	441e      	add	r6, r3
 800c45c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c460:	2b20      	cmp	r3, #32
 800c462:	bfc1      	itttt	gt
 800c464:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c468:	409f      	lslgt	r7, r3
 800c46a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c46e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c472:	bfd6      	itet	le
 800c474:	f1c3 0320 	rsble	r3, r3, #32
 800c478:	ea47 0003 	orrgt.w	r0, r7, r3
 800c47c:	fa04 f003 	lslle.w	r0, r4, r3
 800c480:	f7f4 f840 	bl	8000504 <__aeabi_ui2d>
 800c484:	2201      	movs	r2, #1
 800c486:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c48a:	3e01      	subs	r6, #1
 800c48c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c48e:	e777      	b.n	800c380 <_dtoa_r+0x100>
 800c490:	2301      	movs	r3, #1
 800c492:	e7b8      	b.n	800c406 <_dtoa_r+0x186>
 800c494:	9012      	str	r0, [sp, #72]	@ 0x48
 800c496:	e7b7      	b.n	800c408 <_dtoa_r+0x188>
 800c498:	427b      	negs	r3, r7
 800c49a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c49c:	2300      	movs	r3, #0
 800c49e:	eba8 0807 	sub.w	r8, r8, r7
 800c4a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4a4:	e7c4      	b.n	800c430 <_dtoa_r+0x1b0>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dc35      	bgt.n	800c51c <_dtoa_r+0x29c>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	9307      	str	r3, [sp, #28]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4ba:	e00b      	b.n	800c4d4 <_dtoa_r+0x254>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e7f3      	b.n	800c4a8 <_dtoa_r+0x228>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c6:	18fb      	adds	r3, r7, r3
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	9307      	str	r3, [sp, #28]
 800c4d0:	bfb8      	it	lt
 800c4d2:	2301      	movlt	r3, #1
 800c4d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c4d8:	2100      	movs	r1, #0
 800c4da:	2204      	movs	r2, #4
 800c4dc:	f102 0514 	add.w	r5, r2, #20
 800c4e0:	429d      	cmp	r5, r3
 800c4e2:	d91f      	bls.n	800c524 <_dtoa_r+0x2a4>
 800c4e4:	6041      	str	r1, [r0, #4]
 800c4e6:	4658      	mov	r0, fp
 800c4e8:	f000 fd8e 	bl	800d008 <_Balloc>
 800c4ec:	4682      	mov	sl, r0
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d13c      	bne.n	800c56c <_dtoa_r+0x2ec>
 800c4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c560 <_dtoa_r+0x2e0>)
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c4fa:	e6d8      	b.n	800c2ae <_dtoa_r+0x2e>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e7e0      	b.n	800c4c2 <_dtoa_r+0x242>
 800c500:	2401      	movs	r4, #1
 800c502:	2300      	movs	r3, #0
 800c504:	9309      	str	r3, [sp, #36]	@ 0x24
 800c506:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c508:	f04f 33ff 	mov.w	r3, #4294967295
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	9307      	str	r3, [sp, #28]
 800c510:	2200      	movs	r2, #0
 800c512:	2312      	movs	r3, #18
 800c514:	e7d0      	b.n	800c4b8 <_dtoa_r+0x238>
 800c516:	2301      	movs	r3, #1
 800c518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c51a:	e7f5      	b.n	800c508 <_dtoa_r+0x288>
 800c51c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	9307      	str	r3, [sp, #28]
 800c522:	e7d7      	b.n	800c4d4 <_dtoa_r+0x254>
 800c524:	3101      	adds	r1, #1
 800c526:	0052      	lsls	r2, r2, #1
 800c528:	e7d8      	b.n	800c4dc <_dtoa_r+0x25c>
 800c52a:	bf00      	nop
 800c52c:	f3af 8000 	nop.w
 800c530:	636f4361 	.word	0x636f4361
 800c534:	3fd287a7 	.word	0x3fd287a7
 800c538:	8b60c8b3 	.word	0x8b60c8b3
 800c53c:	3fc68a28 	.word	0x3fc68a28
 800c540:	509f79fb 	.word	0x509f79fb
 800c544:	3fd34413 	.word	0x3fd34413
 800c548:	080108c1 	.word	0x080108c1
 800c54c:	080108d8 	.word	0x080108d8
 800c550:	7ff00000 	.word	0x7ff00000
 800c554:	08010891 	.word	0x08010891
 800c558:	3ff80000 	.word	0x3ff80000
 800c55c:	080109d0 	.word	0x080109d0
 800c560:	08010930 	.word	0x08010930
 800c564:	080108bd 	.word	0x080108bd
 800c568:	08010890 	.word	0x08010890
 800c56c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c570:	6018      	str	r0, [r3, #0]
 800c572:	9b07      	ldr	r3, [sp, #28]
 800c574:	2b0e      	cmp	r3, #14
 800c576:	f200 80a4 	bhi.w	800c6c2 <_dtoa_r+0x442>
 800c57a:	2c00      	cmp	r4, #0
 800c57c:	f000 80a1 	beq.w	800c6c2 <_dtoa_r+0x442>
 800c580:	2f00      	cmp	r7, #0
 800c582:	dd33      	ble.n	800c5ec <_dtoa_r+0x36c>
 800c584:	4bad      	ldr	r3, [pc, #692]	@ (800c83c <_dtoa_r+0x5bc>)
 800c586:	f007 020f 	and.w	r2, r7, #15
 800c58a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c58e:	ed93 7b00 	vldr	d7, [r3]
 800c592:	05f8      	lsls	r0, r7, #23
 800c594:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c598:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c59c:	d516      	bpl.n	800c5cc <_dtoa_r+0x34c>
 800c59e:	4ba8      	ldr	r3, [pc, #672]	@ (800c840 <_dtoa_r+0x5c0>)
 800c5a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c5a8:	f7f4 f950 	bl	800084c <__aeabi_ddiv>
 800c5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5b0:	f004 040f 	and.w	r4, r4, #15
 800c5b4:	2603      	movs	r6, #3
 800c5b6:	4da2      	ldr	r5, [pc, #648]	@ (800c840 <_dtoa_r+0x5c0>)
 800c5b8:	b954      	cbnz	r4, 800c5d0 <_dtoa_r+0x350>
 800c5ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5c2:	f7f4 f943 	bl	800084c <__aeabi_ddiv>
 800c5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ca:	e028      	b.n	800c61e <_dtoa_r+0x39e>
 800c5cc:	2602      	movs	r6, #2
 800c5ce:	e7f2      	b.n	800c5b6 <_dtoa_r+0x336>
 800c5d0:	07e1      	lsls	r1, r4, #31
 800c5d2:	d508      	bpl.n	800c5e6 <_dtoa_r+0x366>
 800c5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5dc:	f7f4 f80c 	bl	80005f8 <__aeabi_dmul>
 800c5e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5e4:	3601      	adds	r6, #1
 800c5e6:	1064      	asrs	r4, r4, #1
 800c5e8:	3508      	adds	r5, #8
 800c5ea:	e7e5      	b.n	800c5b8 <_dtoa_r+0x338>
 800c5ec:	f000 80d2 	beq.w	800c794 <_dtoa_r+0x514>
 800c5f0:	427c      	negs	r4, r7
 800c5f2:	4b92      	ldr	r3, [pc, #584]	@ (800c83c <_dtoa_r+0x5bc>)
 800c5f4:	4d92      	ldr	r5, [pc, #584]	@ (800c840 <_dtoa_r+0x5c0>)
 800c5f6:	f004 020f 	and.w	r2, r4, #15
 800c5fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c60e:	1124      	asrs	r4, r4, #4
 800c610:	2300      	movs	r3, #0
 800c612:	2602      	movs	r6, #2
 800c614:	2c00      	cmp	r4, #0
 800c616:	f040 80b2 	bne.w	800c77e <_dtoa_r+0x4fe>
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1d3      	bne.n	800c5c6 <_dtoa_r+0x346>
 800c61e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c620:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c624:	2b00      	cmp	r3, #0
 800c626:	f000 80b7 	beq.w	800c798 <_dtoa_r+0x518>
 800c62a:	4b86      	ldr	r3, [pc, #536]	@ (800c844 <_dtoa_r+0x5c4>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	4620      	mov	r0, r4
 800c630:	4629      	mov	r1, r5
 800c632:	f7f4 fa53 	bl	8000adc <__aeabi_dcmplt>
 800c636:	2800      	cmp	r0, #0
 800c638:	f000 80ae 	beq.w	800c798 <_dtoa_r+0x518>
 800c63c:	9b07      	ldr	r3, [sp, #28]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f000 80aa 	beq.w	800c798 <_dtoa_r+0x518>
 800c644:	9b00      	ldr	r3, [sp, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	dd37      	ble.n	800c6ba <_dtoa_r+0x43a>
 800c64a:	1e7b      	subs	r3, r7, #1
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	4620      	mov	r0, r4
 800c650:	4b7d      	ldr	r3, [pc, #500]	@ (800c848 <_dtoa_r+0x5c8>)
 800c652:	2200      	movs	r2, #0
 800c654:	4629      	mov	r1, r5
 800c656:	f7f3 ffcf 	bl	80005f8 <__aeabi_dmul>
 800c65a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c65e:	9c00      	ldr	r4, [sp, #0]
 800c660:	3601      	adds	r6, #1
 800c662:	4630      	mov	r0, r6
 800c664:	f7f3 ff5e 	bl	8000524 <__aeabi_i2d>
 800c668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c66c:	f7f3 ffc4 	bl	80005f8 <__aeabi_dmul>
 800c670:	4b76      	ldr	r3, [pc, #472]	@ (800c84c <_dtoa_r+0x5cc>)
 800c672:	2200      	movs	r2, #0
 800c674:	f7f3 fe0a 	bl	800028c <__adddf3>
 800c678:	4605      	mov	r5, r0
 800c67a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c67e:	2c00      	cmp	r4, #0
 800c680:	f040 808d 	bne.w	800c79e <_dtoa_r+0x51e>
 800c684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c688:	4b71      	ldr	r3, [pc, #452]	@ (800c850 <_dtoa_r+0x5d0>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	f7f3 fdfc 	bl	8000288 <__aeabi_dsub>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c698:	462a      	mov	r2, r5
 800c69a:	4633      	mov	r3, r6
 800c69c:	f7f4 fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	f040 828b 	bne.w	800cbbc <_dtoa_r+0x93c>
 800c6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c6b0:	f7f4 fa14 	bl	8000adc <__aeabi_dcmplt>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	f040 8128 	bne.w	800c90a <_dtoa_r+0x68a>
 800c6ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c6be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c6c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f2c0 815a 	blt.w	800c97e <_dtoa_r+0x6fe>
 800c6ca:	2f0e      	cmp	r7, #14
 800c6cc:	f300 8157 	bgt.w	800c97e <_dtoa_r+0x6fe>
 800c6d0:	4b5a      	ldr	r3, [pc, #360]	@ (800c83c <_dtoa_r+0x5bc>)
 800c6d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c6d6:	ed93 7b00 	vldr	d7, [r3]
 800c6da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	ed8d 7b00 	vstr	d7, [sp]
 800c6e2:	da03      	bge.n	800c6ec <_dtoa_r+0x46c>
 800c6e4:	9b07      	ldr	r3, [sp, #28]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f340 8101 	ble.w	800c8ee <_dtoa_r+0x66e>
 800c6ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c6f0:	4656      	mov	r6, sl
 800c6f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	f7f4 f8a7 	bl	800084c <__aeabi_ddiv>
 800c6fe:	f7f4 fa2b 	bl	8000b58 <__aeabi_d2iz>
 800c702:	4680      	mov	r8, r0
 800c704:	f7f3 ff0e 	bl	8000524 <__aeabi_i2d>
 800c708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c70c:	f7f3 ff74 	bl	80005f8 <__aeabi_dmul>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c71c:	f7f3 fdb4 	bl	8000288 <__aeabi_dsub>
 800c720:	f806 4b01 	strb.w	r4, [r6], #1
 800c724:	9d07      	ldr	r5, [sp, #28]
 800c726:	eba6 040a 	sub.w	r4, r6, sl
 800c72a:	42a5      	cmp	r5, r4
 800c72c:	4602      	mov	r2, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	f040 8117 	bne.w	800c962 <_dtoa_r+0x6e2>
 800c734:	f7f3 fdaa 	bl	800028c <__adddf3>
 800c738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c73c:	4604      	mov	r4, r0
 800c73e:	460d      	mov	r5, r1
 800c740:	f7f4 f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 800c744:	2800      	cmp	r0, #0
 800c746:	f040 80f9 	bne.w	800c93c <_dtoa_r+0x6bc>
 800c74a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	f7f4 f9b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c756:	b118      	cbz	r0, 800c760 <_dtoa_r+0x4e0>
 800c758:	f018 0f01 	tst.w	r8, #1
 800c75c:	f040 80ee 	bne.w	800c93c <_dtoa_r+0x6bc>
 800c760:	4649      	mov	r1, r9
 800c762:	4658      	mov	r0, fp
 800c764:	f000 fc90 	bl	800d088 <_Bfree>
 800c768:	2300      	movs	r3, #0
 800c76a:	7033      	strb	r3, [r6, #0]
 800c76c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c76e:	3701      	adds	r7, #1
 800c770:	601f      	str	r7, [r3, #0]
 800c772:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c774:	2b00      	cmp	r3, #0
 800c776:	f000 831d 	beq.w	800cdb4 <_dtoa_r+0xb34>
 800c77a:	601e      	str	r6, [r3, #0]
 800c77c:	e31a      	b.n	800cdb4 <_dtoa_r+0xb34>
 800c77e:	07e2      	lsls	r2, r4, #31
 800c780:	d505      	bpl.n	800c78e <_dtoa_r+0x50e>
 800c782:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c786:	f7f3 ff37 	bl	80005f8 <__aeabi_dmul>
 800c78a:	3601      	adds	r6, #1
 800c78c:	2301      	movs	r3, #1
 800c78e:	1064      	asrs	r4, r4, #1
 800c790:	3508      	adds	r5, #8
 800c792:	e73f      	b.n	800c614 <_dtoa_r+0x394>
 800c794:	2602      	movs	r6, #2
 800c796:	e742      	b.n	800c61e <_dtoa_r+0x39e>
 800c798:	9c07      	ldr	r4, [sp, #28]
 800c79a:	9704      	str	r7, [sp, #16]
 800c79c:	e761      	b.n	800c662 <_dtoa_r+0x3e2>
 800c79e:	4b27      	ldr	r3, [pc, #156]	@ (800c83c <_dtoa_r+0x5bc>)
 800c7a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7aa:	4454      	add	r4, sl
 800c7ac:	2900      	cmp	r1, #0
 800c7ae:	d053      	beq.n	800c858 <_dtoa_r+0x5d8>
 800c7b0:	4928      	ldr	r1, [pc, #160]	@ (800c854 <_dtoa_r+0x5d4>)
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	f7f4 f84a 	bl	800084c <__aeabi_ddiv>
 800c7b8:	4633      	mov	r3, r6
 800c7ba:	462a      	mov	r2, r5
 800c7bc:	f7f3 fd64 	bl	8000288 <__aeabi_dsub>
 800c7c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c7c4:	4656      	mov	r6, sl
 800c7c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ca:	f7f4 f9c5 	bl	8000b58 <__aeabi_d2iz>
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	f7f3 fea8 	bl	8000524 <__aeabi_i2d>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7dc:	f7f3 fd54 	bl	8000288 <__aeabi_dsub>
 800c7e0:	3530      	adds	r5, #48	@ 0x30
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7ea:	f806 5b01 	strb.w	r5, [r6], #1
 800c7ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c7f2:	f7f4 f973 	bl	8000adc <__aeabi_dcmplt>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d171      	bne.n	800c8de <_dtoa_r+0x65e>
 800c7fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7fe:	4911      	ldr	r1, [pc, #68]	@ (800c844 <_dtoa_r+0x5c4>)
 800c800:	2000      	movs	r0, #0
 800c802:	f7f3 fd41 	bl	8000288 <__aeabi_dsub>
 800c806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c80a:	f7f4 f967 	bl	8000adc <__aeabi_dcmplt>
 800c80e:	2800      	cmp	r0, #0
 800c810:	f040 8095 	bne.w	800c93e <_dtoa_r+0x6be>
 800c814:	42a6      	cmp	r6, r4
 800c816:	f43f af50 	beq.w	800c6ba <_dtoa_r+0x43a>
 800c81a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c81e:	4b0a      	ldr	r3, [pc, #40]	@ (800c848 <_dtoa_r+0x5c8>)
 800c820:	2200      	movs	r2, #0
 800c822:	f7f3 fee9 	bl	80005f8 <__aeabi_dmul>
 800c826:	4b08      	ldr	r3, [pc, #32]	@ (800c848 <_dtoa_r+0x5c8>)
 800c828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c82c:	2200      	movs	r2, #0
 800c82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c832:	f7f3 fee1 	bl	80005f8 <__aeabi_dmul>
 800c836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c83a:	e7c4      	b.n	800c7c6 <_dtoa_r+0x546>
 800c83c:	080109d0 	.word	0x080109d0
 800c840:	080109a8 	.word	0x080109a8
 800c844:	3ff00000 	.word	0x3ff00000
 800c848:	40240000 	.word	0x40240000
 800c84c:	401c0000 	.word	0x401c0000
 800c850:	40140000 	.word	0x40140000
 800c854:	3fe00000 	.word	0x3fe00000
 800c858:	4631      	mov	r1, r6
 800c85a:	4628      	mov	r0, r5
 800c85c:	f7f3 fecc 	bl	80005f8 <__aeabi_dmul>
 800c860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c864:	9415      	str	r4, [sp, #84]	@ 0x54
 800c866:	4656      	mov	r6, sl
 800c868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c86c:	f7f4 f974 	bl	8000b58 <__aeabi_d2iz>
 800c870:	4605      	mov	r5, r0
 800c872:	f7f3 fe57 	bl	8000524 <__aeabi_i2d>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c87e:	f7f3 fd03 	bl	8000288 <__aeabi_dsub>
 800c882:	3530      	adds	r5, #48	@ 0x30
 800c884:	f806 5b01 	strb.w	r5, [r6], #1
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	42a6      	cmp	r6, r4
 800c88e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c892:	f04f 0200 	mov.w	r2, #0
 800c896:	d124      	bne.n	800c8e2 <_dtoa_r+0x662>
 800c898:	4bac      	ldr	r3, [pc, #688]	@ (800cb4c <_dtoa_r+0x8cc>)
 800c89a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c89e:	f7f3 fcf5 	bl	800028c <__adddf3>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8aa:	f7f4 f935 	bl	8000b18 <__aeabi_dcmpgt>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d145      	bne.n	800c93e <_dtoa_r+0x6be>
 800c8b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c8b6:	49a5      	ldr	r1, [pc, #660]	@ (800cb4c <_dtoa_r+0x8cc>)
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	f7f3 fce5 	bl	8000288 <__aeabi_dsub>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8c6:	f7f4 f909 	bl	8000adc <__aeabi_dcmplt>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	f43f aef5 	beq.w	800c6ba <_dtoa_r+0x43a>
 800c8d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c8d2:	1e73      	subs	r3, r6, #1
 800c8d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c8d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c8da:	2b30      	cmp	r3, #48	@ 0x30
 800c8dc:	d0f8      	beq.n	800c8d0 <_dtoa_r+0x650>
 800c8de:	9f04      	ldr	r7, [sp, #16]
 800c8e0:	e73e      	b.n	800c760 <_dtoa_r+0x4e0>
 800c8e2:	4b9b      	ldr	r3, [pc, #620]	@ (800cb50 <_dtoa_r+0x8d0>)
 800c8e4:	f7f3 fe88 	bl	80005f8 <__aeabi_dmul>
 800c8e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8ec:	e7bc      	b.n	800c868 <_dtoa_r+0x5e8>
 800c8ee:	d10c      	bne.n	800c90a <_dtoa_r+0x68a>
 800c8f0:	4b98      	ldr	r3, [pc, #608]	@ (800cb54 <_dtoa_r+0x8d4>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8f8:	f7f3 fe7e 	bl	80005f8 <__aeabi_dmul>
 800c8fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c900:	f7f4 f900 	bl	8000b04 <__aeabi_dcmpge>
 800c904:	2800      	cmp	r0, #0
 800c906:	f000 8157 	beq.w	800cbb8 <_dtoa_r+0x938>
 800c90a:	2400      	movs	r4, #0
 800c90c:	4625      	mov	r5, r4
 800c90e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c910:	43db      	mvns	r3, r3
 800c912:	9304      	str	r3, [sp, #16]
 800c914:	4656      	mov	r6, sl
 800c916:	2700      	movs	r7, #0
 800c918:	4621      	mov	r1, r4
 800c91a:	4658      	mov	r0, fp
 800c91c:	f000 fbb4 	bl	800d088 <_Bfree>
 800c920:	2d00      	cmp	r5, #0
 800c922:	d0dc      	beq.n	800c8de <_dtoa_r+0x65e>
 800c924:	b12f      	cbz	r7, 800c932 <_dtoa_r+0x6b2>
 800c926:	42af      	cmp	r7, r5
 800c928:	d003      	beq.n	800c932 <_dtoa_r+0x6b2>
 800c92a:	4639      	mov	r1, r7
 800c92c:	4658      	mov	r0, fp
 800c92e:	f000 fbab 	bl	800d088 <_Bfree>
 800c932:	4629      	mov	r1, r5
 800c934:	4658      	mov	r0, fp
 800c936:	f000 fba7 	bl	800d088 <_Bfree>
 800c93a:	e7d0      	b.n	800c8de <_dtoa_r+0x65e>
 800c93c:	9704      	str	r7, [sp, #16]
 800c93e:	4633      	mov	r3, r6
 800c940:	461e      	mov	r6, r3
 800c942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c946:	2a39      	cmp	r2, #57	@ 0x39
 800c948:	d107      	bne.n	800c95a <_dtoa_r+0x6da>
 800c94a:	459a      	cmp	sl, r3
 800c94c:	d1f8      	bne.n	800c940 <_dtoa_r+0x6c0>
 800c94e:	9a04      	ldr	r2, [sp, #16]
 800c950:	3201      	adds	r2, #1
 800c952:	9204      	str	r2, [sp, #16]
 800c954:	2230      	movs	r2, #48	@ 0x30
 800c956:	f88a 2000 	strb.w	r2, [sl]
 800c95a:	781a      	ldrb	r2, [r3, #0]
 800c95c:	3201      	adds	r2, #1
 800c95e:	701a      	strb	r2, [r3, #0]
 800c960:	e7bd      	b.n	800c8de <_dtoa_r+0x65e>
 800c962:	4b7b      	ldr	r3, [pc, #492]	@ (800cb50 <_dtoa_r+0x8d0>)
 800c964:	2200      	movs	r2, #0
 800c966:	f7f3 fe47 	bl	80005f8 <__aeabi_dmul>
 800c96a:	2200      	movs	r2, #0
 800c96c:	2300      	movs	r3, #0
 800c96e:	4604      	mov	r4, r0
 800c970:	460d      	mov	r5, r1
 800c972:	f7f4 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c976:	2800      	cmp	r0, #0
 800c978:	f43f aebb 	beq.w	800c6f2 <_dtoa_r+0x472>
 800c97c:	e6f0      	b.n	800c760 <_dtoa_r+0x4e0>
 800c97e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c980:	2a00      	cmp	r2, #0
 800c982:	f000 80db 	beq.w	800cb3c <_dtoa_r+0x8bc>
 800c986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c988:	2a01      	cmp	r2, #1
 800c98a:	f300 80bf 	bgt.w	800cb0c <_dtoa_r+0x88c>
 800c98e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c990:	2a00      	cmp	r2, #0
 800c992:	f000 80b7 	beq.w	800cb04 <_dtoa_r+0x884>
 800c996:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c99a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c99c:	4646      	mov	r6, r8
 800c99e:	9a08      	ldr	r2, [sp, #32]
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	441a      	add	r2, r3
 800c9a4:	4658      	mov	r0, fp
 800c9a6:	4498      	add	r8, r3
 800c9a8:	9208      	str	r2, [sp, #32]
 800c9aa:	f000 fc21 	bl	800d1f0 <__i2b>
 800c9ae:	4605      	mov	r5, r0
 800c9b0:	b15e      	cbz	r6, 800c9ca <_dtoa_r+0x74a>
 800c9b2:	9b08      	ldr	r3, [sp, #32]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	dd08      	ble.n	800c9ca <_dtoa_r+0x74a>
 800c9b8:	42b3      	cmp	r3, r6
 800c9ba:	9a08      	ldr	r2, [sp, #32]
 800c9bc:	bfa8      	it	ge
 800c9be:	4633      	movge	r3, r6
 800c9c0:	eba8 0803 	sub.w	r8, r8, r3
 800c9c4:	1af6      	subs	r6, r6, r3
 800c9c6:	1ad3      	subs	r3, r2, r3
 800c9c8:	9308      	str	r3, [sp, #32]
 800c9ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9cc:	b1f3      	cbz	r3, 800ca0c <_dtoa_r+0x78c>
 800c9ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 80b7 	beq.w	800cb44 <_dtoa_r+0x8c4>
 800c9d6:	b18c      	cbz	r4, 800c9fc <_dtoa_r+0x77c>
 800c9d8:	4629      	mov	r1, r5
 800c9da:	4622      	mov	r2, r4
 800c9dc:	4658      	mov	r0, fp
 800c9de:	f000 fcc7 	bl	800d370 <__pow5mult>
 800c9e2:	464a      	mov	r2, r9
 800c9e4:	4601      	mov	r1, r0
 800c9e6:	4605      	mov	r5, r0
 800c9e8:	4658      	mov	r0, fp
 800c9ea:	f000 fc17 	bl	800d21c <__multiply>
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	9004      	str	r0, [sp, #16]
 800c9f2:	4658      	mov	r0, fp
 800c9f4:	f000 fb48 	bl	800d088 <_Bfree>
 800c9f8:	9b04      	ldr	r3, [sp, #16]
 800c9fa:	4699      	mov	r9, r3
 800c9fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9fe:	1b1a      	subs	r2, r3, r4
 800ca00:	d004      	beq.n	800ca0c <_dtoa_r+0x78c>
 800ca02:	4649      	mov	r1, r9
 800ca04:	4658      	mov	r0, fp
 800ca06:	f000 fcb3 	bl	800d370 <__pow5mult>
 800ca0a:	4681      	mov	r9, r0
 800ca0c:	2101      	movs	r1, #1
 800ca0e:	4658      	mov	r0, fp
 800ca10:	f000 fbee 	bl	800d1f0 <__i2b>
 800ca14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca16:	4604      	mov	r4, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 81cf 	beq.w	800cdbc <_dtoa_r+0xb3c>
 800ca1e:	461a      	mov	r2, r3
 800ca20:	4601      	mov	r1, r0
 800ca22:	4658      	mov	r0, fp
 800ca24:	f000 fca4 	bl	800d370 <__pow5mult>
 800ca28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	f300 8095 	bgt.w	800cb5c <_dtoa_r+0x8dc>
 800ca32:	9b02      	ldr	r3, [sp, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f040 8087 	bne.w	800cb48 <_dtoa_r+0x8c8>
 800ca3a:	9b03      	ldr	r3, [sp, #12]
 800ca3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f040 8089 	bne.w	800cb58 <_dtoa_r+0x8d8>
 800ca46:	9b03      	ldr	r3, [sp, #12]
 800ca48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca4c:	0d1b      	lsrs	r3, r3, #20
 800ca4e:	051b      	lsls	r3, r3, #20
 800ca50:	b12b      	cbz	r3, 800ca5e <_dtoa_r+0x7de>
 800ca52:	9b08      	ldr	r3, [sp, #32]
 800ca54:	3301      	adds	r3, #1
 800ca56:	9308      	str	r3, [sp, #32]
 800ca58:	f108 0801 	add.w	r8, r8, #1
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 81b0 	beq.w	800cdc8 <_dtoa_r+0xb48>
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca6e:	6918      	ldr	r0, [r3, #16]
 800ca70:	f000 fb72 	bl	800d158 <__hi0bits>
 800ca74:	f1c0 0020 	rsb	r0, r0, #32
 800ca78:	9b08      	ldr	r3, [sp, #32]
 800ca7a:	4418      	add	r0, r3
 800ca7c:	f010 001f 	ands.w	r0, r0, #31
 800ca80:	d077      	beq.n	800cb72 <_dtoa_r+0x8f2>
 800ca82:	f1c0 0320 	rsb	r3, r0, #32
 800ca86:	2b04      	cmp	r3, #4
 800ca88:	dd6b      	ble.n	800cb62 <_dtoa_r+0x8e2>
 800ca8a:	9b08      	ldr	r3, [sp, #32]
 800ca8c:	f1c0 001c 	rsb	r0, r0, #28
 800ca90:	4403      	add	r3, r0
 800ca92:	4480      	add	r8, r0
 800ca94:	4406      	add	r6, r0
 800ca96:	9308      	str	r3, [sp, #32]
 800ca98:	f1b8 0f00 	cmp.w	r8, #0
 800ca9c:	dd05      	ble.n	800caaa <_dtoa_r+0x82a>
 800ca9e:	4649      	mov	r1, r9
 800caa0:	4642      	mov	r2, r8
 800caa2:	4658      	mov	r0, fp
 800caa4:	f000 fcbe 	bl	800d424 <__lshift>
 800caa8:	4681      	mov	r9, r0
 800caaa:	9b08      	ldr	r3, [sp, #32]
 800caac:	2b00      	cmp	r3, #0
 800caae:	dd05      	ble.n	800cabc <_dtoa_r+0x83c>
 800cab0:	4621      	mov	r1, r4
 800cab2:	461a      	mov	r2, r3
 800cab4:	4658      	mov	r0, fp
 800cab6:	f000 fcb5 	bl	800d424 <__lshift>
 800caba:	4604      	mov	r4, r0
 800cabc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d059      	beq.n	800cb76 <_dtoa_r+0x8f6>
 800cac2:	4621      	mov	r1, r4
 800cac4:	4648      	mov	r0, r9
 800cac6:	f000 fd19 	bl	800d4fc <__mcmp>
 800caca:	2800      	cmp	r0, #0
 800cacc:	da53      	bge.n	800cb76 <_dtoa_r+0x8f6>
 800cace:	1e7b      	subs	r3, r7, #1
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	4649      	mov	r1, r9
 800cad4:	2300      	movs	r3, #0
 800cad6:	220a      	movs	r2, #10
 800cad8:	4658      	mov	r0, fp
 800cada:	f000 faf7 	bl	800d0cc <__multadd>
 800cade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cae0:	4681      	mov	r9, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 8172 	beq.w	800cdcc <_dtoa_r+0xb4c>
 800cae8:	2300      	movs	r3, #0
 800caea:	4629      	mov	r1, r5
 800caec:	220a      	movs	r2, #10
 800caee:	4658      	mov	r0, fp
 800caf0:	f000 faec 	bl	800d0cc <__multadd>
 800caf4:	9b00      	ldr	r3, [sp, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	4605      	mov	r5, r0
 800cafa:	dc67      	bgt.n	800cbcc <_dtoa_r+0x94c>
 800cafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	dc41      	bgt.n	800cb86 <_dtoa_r+0x906>
 800cb02:	e063      	b.n	800cbcc <_dtoa_r+0x94c>
 800cb04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cb06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cb0a:	e746      	b.n	800c99a <_dtoa_r+0x71a>
 800cb0c:	9b07      	ldr	r3, [sp, #28]
 800cb0e:	1e5c      	subs	r4, r3, #1
 800cb10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb12:	42a3      	cmp	r3, r4
 800cb14:	bfbf      	itttt	lt
 800cb16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cb18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cb1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cb1c:	1ae3      	sublt	r3, r4, r3
 800cb1e:	bfb4      	ite	lt
 800cb20:	18d2      	addlt	r2, r2, r3
 800cb22:	1b1c      	subge	r4, r3, r4
 800cb24:	9b07      	ldr	r3, [sp, #28]
 800cb26:	bfbc      	itt	lt
 800cb28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cb2a:	2400      	movlt	r4, #0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	bfb5      	itete	lt
 800cb30:	eba8 0603 	sublt.w	r6, r8, r3
 800cb34:	9b07      	ldrge	r3, [sp, #28]
 800cb36:	2300      	movlt	r3, #0
 800cb38:	4646      	movge	r6, r8
 800cb3a:	e730      	b.n	800c99e <_dtoa_r+0x71e>
 800cb3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cb40:	4646      	mov	r6, r8
 800cb42:	e735      	b.n	800c9b0 <_dtoa_r+0x730>
 800cb44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb46:	e75c      	b.n	800ca02 <_dtoa_r+0x782>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	e788      	b.n	800ca5e <_dtoa_r+0x7de>
 800cb4c:	3fe00000 	.word	0x3fe00000
 800cb50:	40240000 	.word	0x40240000
 800cb54:	40140000 	.word	0x40140000
 800cb58:	9b02      	ldr	r3, [sp, #8]
 800cb5a:	e780      	b.n	800ca5e <_dtoa_r+0x7de>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb60:	e782      	b.n	800ca68 <_dtoa_r+0x7e8>
 800cb62:	d099      	beq.n	800ca98 <_dtoa_r+0x818>
 800cb64:	9a08      	ldr	r2, [sp, #32]
 800cb66:	331c      	adds	r3, #28
 800cb68:	441a      	add	r2, r3
 800cb6a:	4498      	add	r8, r3
 800cb6c:	441e      	add	r6, r3
 800cb6e:	9208      	str	r2, [sp, #32]
 800cb70:	e792      	b.n	800ca98 <_dtoa_r+0x818>
 800cb72:	4603      	mov	r3, r0
 800cb74:	e7f6      	b.n	800cb64 <_dtoa_r+0x8e4>
 800cb76:	9b07      	ldr	r3, [sp, #28]
 800cb78:	9704      	str	r7, [sp, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dc20      	bgt.n	800cbc0 <_dtoa_r+0x940>
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	dd1e      	ble.n	800cbc4 <_dtoa_r+0x944>
 800cb86:	9b00      	ldr	r3, [sp, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f47f aec0 	bne.w	800c90e <_dtoa_r+0x68e>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	2205      	movs	r2, #5
 800cb92:	4658      	mov	r0, fp
 800cb94:	f000 fa9a 	bl	800d0cc <__multadd>
 800cb98:	4601      	mov	r1, r0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4648      	mov	r0, r9
 800cb9e:	f000 fcad 	bl	800d4fc <__mcmp>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	f77f aeb3 	ble.w	800c90e <_dtoa_r+0x68e>
 800cba8:	4656      	mov	r6, sl
 800cbaa:	2331      	movs	r3, #49	@ 0x31
 800cbac:	f806 3b01 	strb.w	r3, [r6], #1
 800cbb0:	9b04      	ldr	r3, [sp, #16]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	9304      	str	r3, [sp, #16]
 800cbb6:	e6ae      	b.n	800c916 <_dtoa_r+0x696>
 800cbb8:	9c07      	ldr	r4, [sp, #28]
 800cbba:	9704      	str	r7, [sp, #16]
 800cbbc:	4625      	mov	r5, r4
 800cbbe:	e7f3      	b.n	800cba8 <_dtoa_r+0x928>
 800cbc0:	9b07      	ldr	r3, [sp, #28]
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f000 8104 	beq.w	800cdd4 <_dtoa_r+0xb54>
 800cbcc:	2e00      	cmp	r6, #0
 800cbce:	dd05      	ble.n	800cbdc <_dtoa_r+0x95c>
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	4632      	mov	r2, r6
 800cbd4:	4658      	mov	r0, fp
 800cbd6:	f000 fc25 	bl	800d424 <__lshift>
 800cbda:	4605      	mov	r5, r0
 800cbdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d05a      	beq.n	800cc98 <_dtoa_r+0xa18>
 800cbe2:	6869      	ldr	r1, [r5, #4]
 800cbe4:	4658      	mov	r0, fp
 800cbe6:	f000 fa0f 	bl	800d008 <_Balloc>
 800cbea:	4606      	mov	r6, r0
 800cbec:	b928      	cbnz	r0, 800cbfa <_dtoa_r+0x97a>
 800cbee:	4b84      	ldr	r3, [pc, #528]	@ (800ce00 <_dtoa_r+0xb80>)
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cbf6:	f7ff bb5a 	b.w	800c2ae <_dtoa_r+0x2e>
 800cbfa:	692a      	ldr	r2, [r5, #16]
 800cbfc:	3202      	adds	r2, #2
 800cbfe:	0092      	lsls	r2, r2, #2
 800cc00:	f105 010c 	add.w	r1, r5, #12
 800cc04:	300c      	adds	r0, #12
 800cc06:	f7ff fa94 	bl	800c132 <memcpy>
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	4631      	mov	r1, r6
 800cc0e:	4658      	mov	r0, fp
 800cc10:	f000 fc08 	bl	800d424 <__lshift>
 800cc14:	f10a 0301 	add.w	r3, sl, #1
 800cc18:	9307      	str	r3, [sp, #28]
 800cc1a:	9b00      	ldr	r3, [sp, #0]
 800cc1c:	4453      	add	r3, sl
 800cc1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc20:	9b02      	ldr	r3, [sp, #8]
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	462f      	mov	r7, r5
 800cc28:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	9b07      	ldr	r3, [sp, #28]
 800cc2e:	4621      	mov	r1, r4
 800cc30:	3b01      	subs	r3, #1
 800cc32:	4648      	mov	r0, r9
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	f7ff fa9b 	bl	800c170 <quorem>
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	9002      	str	r0, [sp, #8]
 800cc3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc42:	4648      	mov	r0, r9
 800cc44:	f000 fc5a 	bl	800d4fc <__mcmp>
 800cc48:	462a      	mov	r2, r5
 800cc4a:	9008      	str	r0, [sp, #32]
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	4658      	mov	r0, fp
 800cc50:	f000 fc70 	bl	800d534 <__mdiff>
 800cc54:	68c2      	ldr	r2, [r0, #12]
 800cc56:	4606      	mov	r6, r0
 800cc58:	bb02      	cbnz	r2, 800cc9c <_dtoa_r+0xa1c>
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	4648      	mov	r0, r9
 800cc5e:	f000 fc4d 	bl	800d4fc <__mcmp>
 800cc62:	4602      	mov	r2, r0
 800cc64:	4631      	mov	r1, r6
 800cc66:	4658      	mov	r0, fp
 800cc68:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc6a:	f000 fa0d 	bl	800d088 <_Bfree>
 800cc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc72:	9e07      	ldr	r6, [sp, #28]
 800cc74:	ea43 0102 	orr.w	r1, r3, r2
 800cc78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc7a:	4319      	orrs	r1, r3
 800cc7c:	d110      	bne.n	800cca0 <_dtoa_r+0xa20>
 800cc7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc82:	d029      	beq.n	800ccd8 <_dtoa_r+0xa58>
 800cc84:	9b08      	ldr	r3, [sp, #32]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	dd02      	ble.n	800cc90 <_dtoa_r+0xa10>
 800cc8a:	9b02      	ldr	r3, [sp, #8]
 800cc8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cc90:	9b00      	ldr	r3, [sp, #0]
 800cc92:	f883 8000 	strb.w	r8, [r3]
 800cc96:	e63f      	b.n	800c918 <_dtoa_r+0x698>
 800cc98:	4628      	mov	r0, r5
 800cc9a:	e7bb      	b.n	800cc14 <_dtoa_r+0x994>
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	e7e1      	b.n	800cc64 <_dtoa_r+0x9e4>
 800cca0:	9b08      	ldr	r3, [sp, #32]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	db04      	blt.n	800ccb0 <_dtoa_r+0xa30>
 800cca6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cca8:	430b      	orrs	r3, r1
 800ccaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ccac:	430b      	orrs	r3, r1
 800ccae:	d120      	bne.n	800ccf2 <_dtoa_r+0xa72>
 800ccb0:	2a00      	cmp	r2, #0
 800ccb2:	dded      	ble.n	800cc90 <_dtoa_r+0xa10>
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	4658      	mov	r0, fp
 800ccba:	f000 fbb3 	bl	800d424 <__lshift>
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4681      	mov	r9, r0
 800ccc2:	f000 fc1b 	bl	800d4fc <__mcmp>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	dc03      	bgt.n	800ccd2 <_dtoa_r+0xa52>
 800ccca:	d1e1      	bne.n	800cc90 <_dtoa_r+0xa10>
 800cccc:	f018 0f01 	tst.w	r8, #1
 800ccd0:	d0de      	beq.n	800cc90 <_dtoa_r+0xa10>
 800ccd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ccd6:	d1d8      	bne.n	800cc8a <_dtoa_r+0xa0a>
 800ccd8:	9a00      	ldr	r2, [sp, #0]
 800ccda:	2339      	movs	r3, #57	@ 0x39
 800ccdc:	7013      	strb	r3, [r2, #0]
 800ccde:	4633      	mov	r3, r6
 800cce0:	461e      	mov	r6, r3
 800cce2:	3b01      	subs	r3, #1
 800cce4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cce8:	2a39      	cmp	r2, #57	@ 0x39
 800ccea:	d052      	beq.n	800cd92 <_dtoa_r+0xb12>
 800ccec:	3201      	adds	r2, #1
 800ccee:	701a      	strb	r2, [r3, #0]
 800ccf0:	e612      	b.n	800c918 <_dtoa_r+0x698>
 800ccf2:	2a00      	cmp	r2, #0
 800ccf4:	dd07      	ble.n	800cd06 <_dtoa_r+0xa86>
 800ccf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ccfa:	d0ed      	beq.n	800ccd8 <_dtoa_r+0xa58>
 800ccfc:	9a00      	ldr	r2, [sp, #0]
 800ccfe:	f108 0301 	add.w	r3, r8, #1
 800cd02:	7013      	strb	r3, [r2, #0]
 800cd04:	e608      	b.n	800c918 <_dtoa_r+0x698>
 800cd06:	9b07      	ldr	r3, [sp, #28]
 800cd08:	9a07      	ldr	r2, [sp, #28]
 800cd0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cd0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d028      	beq.n	800cd66 <_dtoa_r+0xae6>
 800cd14:	4649      	mov	r1, r9
 800cd16:	2300      	movs	r3, #0
 800cd18:	220a      	movs	r2, #10
 800cd1a:	4658      	mov	r0, fp
 800cd1c:	f000 f9d6 	bl	800d0cc <__multadd>
 800cd20:	42af      	cmp	r7, r5
 800cd22:	4681      	mov	r9, r0
 800cd24:	f04f 0300 	mov.w	r3, #0
 800cd28:	f04f 020a 	mov.w	r2, #10
 800cd2c:	4639      	mov	r1, r7
 800cd2e:	4658      	mov	r0, fp
 800cd30:	d107      	bne.n	800cd42 <_dtoa_r+0xac2>
 800cd32:	f000 f9cb 	bl	800d0cc <__multadd>
 800cd36:	4607      	mov	r7, r0
 800cd38:	4605      	mov	r5, r0
 800cd3a:	9b07      	ldr	r3, [sp, #28]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	9307      	str	r3, [sp, #28]
 800cd40:	e774      	b.n	800cc2c <_dtoa_r+0x9ac>
 800cd42:	f000 f9c3 	bl	800d0cc <__multadd>
 800cd46:	4629      	mov	r1, r5
 800cd48:	4607      	mov	r7, r0
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	220a      	movs	r2, #10
 800cd4e:	4658      	mov	r0, fp
 800cd50:	f000 f9bc 	bl	800d0cc <__multadd>
 800cd54:	4605      	mov	r5, r0
 800cd56:	e7f0      	b.n	800cd3a <_dtoa_r+0xaba>
 800cd58:	9b00      	ldr	r3, [sp, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	bfcc      	ite	gt
 800cd5e:	461e      	movgt	r6, r3
 800cd60:	2601      	movle	r6, #1
 800cd62:	4456      	add	r6, sl
 800cd64:	2700      	movs	r7, #0
 800cd66:	4649      	mov	r1, r9
 800cd68:	2201      	movs	r2, #1
 800cd6a:	4658      	mov	r0, fp
 800cd6c:	f000 fb5a 	bl	800d424 <__lshift>
 800cd70:	4621      	mov	r1, r4
 800cd72:	4681      	mov	r9, r0
 800cd74:	f000 fbc2 	bl	800d4fc <__mcmp>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	dcb0      	bgt.n	800ccde <_dtoa_r+0xa5e>
 800cd7c:	d102      	bne.n	800cd84 <_dtoa_r+0xb04>
 800cd7e:	f018 0f01 	tst.w	r8, #1
 800cd82:	d1ac      	bne.n	800ccde <_dtoa_r+0xa5e>
 800cd84:	4633      	mov	r3, r6
 800cd86:	461e      	mov	r6, r3
 800cd88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd8c:	2a30      	cmp	r2, #48	@ 0x30
 800cd8e:	d0fa      	beq.n	800cd86 <_dtoa_r+0xb06>
 800cd90:	e5c2      	b.n	800c918 <_dtoa_r+0x698>
 800cd92:	459a      	cmp	sl, r3
 800cd94:	d1a4      	bne.n	800cce0 <_dtoa_r+0xa60>
 800cd96:	9b04      	ldr	r3, [sp, #16]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	2331      	movs	r3, #49	@ 0x31
 800cd9e:	f88a 3000 	strb.w	r3, [sl]
 800cda2:	e5b9      	b.n	800c918 <_dtoa_r+0x698>
 800cda4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cda6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ce04 <_dtoa_r+0xb84>
 800cdaa:	b11b      	cbz	r3, 800cdb4 <_dtoa_r+0xb34>
 800cdac:	f10a 0308 	add.w	r3, sl, #8
 800cdb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	4650      	mov	r0, sl
 800cdb6:	b019      	add	sp, #100	@ 0x64
 800cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	f77f ae37 	ble.w	800ca32 <_dtoa_r+0x7b2>
 800cdc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdc8:	2001      	movs	r0, #1
 800cdca:	e655      	b.n	800ca78 <_dtoa_r+0x7f8>
 800cdcc:	9b00      	ldr	r3, [sp, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f77f aed6 	ble.w	800cb80 <_dtoa_r+0x900>
 800cdd4:	4656      	mov	r6, sl
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	4648      	mov	r0, r9
 800cdda:	f7ff f9c9 	bl	800c170 <quorem>
 800cdde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cde2:	f806 8b01 	strb.w	r8, [r6], #1
 800cde6:	9b00      	ldr	r3, [sp, #0]
 800cde8:	eba6 020a 	sub.w	r2, r6, sl
 800cdec:	4293      	cmp	r3, r2
 800cdee:	ddb3      	ble.n	800cd58 <_dtoa_r+0xad8>
 800cdf0:	4649      	mov	r1, r9
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	220a      	movs	r2, #10
 800cdf6:	4658      	mov	r0, fp
 800cdf8:	f000 f968 	bl	800d0cc <__multadd>
 800cdfc:	4681      	mov	r9, r0
 800cdfe:	e7ea      	b.n	800cdd6 <_dtoa_r+0xb56>
 800ce00:	08010930 	.word	0x08010930
 800ce04:	080108b4 	.word	0x080108b4

0800ce08 <_free_r>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	4605      	mov	r5, r0
 800ce0c:	2900      	cmp	r1, #0
 800ce0e:	d041      	beq.n	800ce94 <_free_r+0x8c>
 800ce10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce14:	1f0c      	subs	r4, r1, #4
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	bfb8      	it	lt
 800ce1a:	18e4      	addlt	r4, r4, r3
 800ce1c:	f000 f8e8 	bl	800cff0 <__malloc_lock>
 800ce20:	4a1d      	ldr	r2, [pc, #116]	@ (800ce98 <_free_r+0x90>)
 800ce22:	6813      	ldr	r3, [r2, #0]
 800ce24:	b933      	cbnz	r3, 800ce34 <_free_r+0x2c>
 800ce26:	6063      	str	r3, [r4, #4]
 800ce28:	6014      	str	r4, [r2, #0]
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce30:	f000 b8e4 	b.w	800cffc <__malloc_unlock>
 800ce34:	42a3      	cmp	r3, r4
 800ce36:	d908      	bls.n	800ce4a <_free_r+0x42>
 800ce38:	6820      	ldr	r0, [r4, #0]
 800ce3a:	1821      	adds	r1, r4, r0
 800ce3c:	428b      	cmp	r3, r1
 800ce3e:	bf01      	itttt	eq
 800ce40:	6819      	ldreq	r1, [r3, #0]
 800ce42:	685b      	ldreq	r3, [r3, #4]
 800ce44:	1809      	addeq	r1, r1, r0
 800ce46:	6021      	streq	r1, [r4, #0]
 800ce48:	e7ed      	b.n	800ce26 <_free_r+0x1e>
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	b10b      	cbz	r3, 800ce54 <_free_r+0x4c>
 800ce50:	42a3      	cmp	r3, r4
 800ce52:	d9fa      	bls.n	800ce4a <_free_r+0x42>
 800ce54:	6811      	ldr	r1, [r2, #0]
 800ce56:	1850      	adds	r0, r2, r1
 800ce58:	42a0      	cmp	r0, r4
 800ce5a:	d10b      	bne.n	800ce74 <_free_r+0x6c>
 800ce5c:	6820      	ldr	r0, [r4, #0]
 800ce5e:	4401      	add	r1, r0
 800ce60:	1850      	adds	r0, r2, r1
 800ce62:	4283      	cmp	r3, r0
 800ce64:	6011      	str	r1, [r2, #0]
 800ce66:	d1e0      	bne.n	800ce2a <_free_r+0x22>
 800ce68:	6818      	ldr	r0, [r3, #0]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	6053      	str	r3, [r2, #4]
 800ce6e:	4408      	add	r0, r1
 800ce70:	6010      	str	r0, [r2, #0]
 800ce72:	e7da      	b.n	800ce2a <_free_r+0x22>
 800ce74:	d902      	bls.n	800ce7c <_free_r+0x74>
 800ce76:	230c      	movs	r3, #12
 800ce78:	602b      	str	r3, [r5, #0]
 800ce7a:	e7d6      	b.n	800ce2a <_free_r+0x22>
 800ce7c:	6820      	ldr	r0, [r4, #0]
 800ce7e:	1821      	adds	r1, r4, r0
 800ce80:	428b      	cmp	r3, r1
 800ce82:	bf04      	itt	eq
 800ce84:	6819      	ldreq	r1, [r3, #0]
 800ce86:	685b      	ldreq	r3, [r3, #4]
 800ce88:	6063      	str	r3, [r4, #4]
 800ce8a:	bf04      	itt	eq
 800ce8c:	1809      	addeq	r1, r1, r0
 800ce8e:	6021      	streq	r1, [r4, #0]
 800ce90:	6054      	str	r4, [r2, #4]
 800ce92:	e7ca      	b.n	800ce2a <_free_r+0x22>
 800ce94:	bd38      	pop	{r3, r4, r5, pc}
 800ce96:	bf00      	nop
 800ce98:	20002300 	.word	0x20002300

0800ce9c <malloc>:
 800ce9c:	4b02      	ldr	r3, [pc, #8]	@ (800cea8 <malloc+0xc>)
 800ce9e:	4601      	mov	r1, r0
 800cea0:	6818      	ldr	r0, [r3, #0]
 800cea2:	f000 b825 	b.w	800cef0 <_malloc_r>
 800cea6:	bf00      	nop
 800cea8:	20000128 	.word	0x20000128

0800ceac <sbrk_aligned>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	4e0f      	ldr	r6, [pc, #60]	@ (800ceec <sbrk_aligned+0x40>)
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	6831      	ldr	r1, [r6, #0]
 800ceb4:	4605      	mov	r5, r0
 800ceb6:	b911      	cbnz	r1, 800cebe <sbrk_aligned+0x12>
 800ceb8:	f000 fe46 	bl	800db48 <_sbrk_r>
 800cebc:	6030      	str	r0, [r6, #0]
 800cebe:	4621      	mov	r1, r4
 800cec0:	4628      	mov	r0, r5
 800cec2:	f000 fe41 	bl	800db48 <_sbrk_r>
 800cec6:	1c43      	adds	r3, r0, #1
 800cec8:	d103      	bne.n	800ced2 <sbrk_aligned+0x26>
 800ceca:	f04f 34ff 	mov.w	r4, #4294967295
 800cece:	4620      	mov	r0, r4
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
 800ced2:	1cc4      	adds	r4, r0, #3
 800ced4:	f024 0403 	bic.w	r4, r4, #3
 800ced8:	42a0      	cmp	r0, r4
 800ceda:	d0f8      	beq.n	800cece <sbrk_aligned+0x22>
 800cedc:	1a21      	subs	r1, r4, r0
 800cede:	4628      	mov	r0, r5
 800cee0:	f000 fe32 	bl	800db48 <_sbrk_r>
 800cee4:	3001      	adds	r0, #1
 800cee6:	d1f2      	bne.n	800cece <sbrk_aligned+0x22>
 800cee8:	e7ef      	b.n	800ceca <sbrk_aligned+0x1e>
 800ceea:	bf00      	nop
 800ceec:	200022fc 	.word	0x200022fc

0800cef0 <_malloc_r>:
 800cef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef4:	1ccd      	adds	r5, r1, #3
 800cef6:	f025 0503 	bic.w	r5, r5, #3
 800cefa:	3508      	adds	r5, #8
 800cefc:	2d0c      	cmp	r5, #12
 800cefe:	bf38      	it	cc
 800cf00:	250c      	movcc	r5, #12
 800cf02:	2d00      	cmp	r5, #0
 800cf04:	4606      	mov	r6, r0
 800cf06:	db01      	blt.n	800cf0c <_malloc_r+0x1c>
 800cf08:	42a9      	cmp	r1, r5
 800cf0a:	d904      	bls.n	800cf16 <_malloc_r+0x26>
 800cf0c:	230c      	movs	r3, #12
 800cf0e:	6033      	str	r3, [r6, #0]
 800cf10:	2000      	movs	r0, #0
 800cf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cfec <_malloc_r+0xfc>
 800cf1a:	f000 f869 	bl	800cff0 <__malloc_lock>
 800cf1e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf22:	461c      	mov	r4, r3
 800cf24:	bb44      	cbnz	r4, 800cf78 <_malloc_r+0x88>
 800cf26:	4629      	mov	r1, r5
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7ff ffbf 	bl	800ceac <sbrk_aligned>
 800cf2e:	1c43      	adds	r3, r0, #1
 800cf30:	4604      	mov	r4, r0
 800cf32:	d158      	bne.n	800cfe6 <_malloc_r+0xf6>
 800cf34:	f8d8 4000 	ldr.w	r4, [r8]
 800cf38:	4627      	mov	r7, r4
 800cf3a:	2f00      	cmp	r7, #0
 800cf3c:	d143      	bne.n	800cfc6 <_malloc_r+0xd6>
 800cf3e:	2c00      	cmp	r4, #0
 800cf40:	d04b      	beq.n	800cfda <_malloc_r+0xea>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	4639      	mov	r1, r7
 800cf46:	4630      	mov	r0, r6
 800cf48:	eb04 0903 	add.w	r9, r4, r3
 800cf4c:	f000 fdfc 	bl	800db48 <_sbrk_r>
 800cf50:	4581      	cmp	r9, r0
 800cf52:	d142      	bne.n	800cfda <_malloc_r+0xea>
 800cf54:	6821      	ldr	r1, [r4, #0]
 800cf56:	1a6d      	subs	r5, r5, r1
 800cf58:	4629      	mov	r1, r5
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f7ff ffa6 	bl	800ceac <sbrk_aligned>
 800cf60:	3001      	adds	r0, #1
 800cf62:	d03a      	beq.n	800cfda <_malloc_r+0xea>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	442b      	add	r3, r5
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf6e:	685a      	ldr	r2, [r3, #4]
 800cf70:	bb62      	cbnz	r2, 800cfcc <_malloc_r+0xdc>
 800cf72:	f8c8 7000 	str.w	r7, [r8]
 800cf76:	e00f      	b.n	800cf98 <_malloc_r+0xa8>
 800cf78:	6822      	ldr	r2, [r4, #0]
 800cf7a:	1b52      	subs	r2, r2, r5
 800cf7c:	d420      	bmi.n	800cfc0 <_malloc_r+0xd0>
 800cf7e:	2a0b      	cmp	r2, #11
 800cf80:	d917      	bls.n	800cfb2 <_malloc_r+0xc2>
 800cf82:	1961      	adds	r1, r4, r5
 800cf84:	42a3      	cmp	r3, r4
 800cf86:	6025      	str	r5, [r4, #0]
 800cf88:	bf18      	it	ne
 800cf8a:	6059      	strne	r1, [r3, #4]
 800cf8c:	6863      	ldr	r3, [r4, #4]
 800cf8e:	bf08      	it	eq
 800cf90:	f8c8 1000 	streq.w	r1, [r8]
 800cf94:	5162      	str	r2, [r4, r5]
 800cf96:	604b      	str	r3, [r1, #4]
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f000 f82f 	bl	800cffc <__malloc_unlock>
 800cf9e:	f104 000b 	add.w	r0, r4, #11
 800cfa2:	1d23      	adds	r3, r4, #4
 800cfa4:	f020 0007 	bic.w	r0, r0, #7
 800cfa8:	1ac2      	subs	r2, r0, r3
 800cfaa:	bf1c      	itt	ne
 800cfac:	1a1b      	subne	r3, r3, r0
 800cfae:	50a3      	strne	r3, [r4, r2]
 800cfb0:	e7af      	b.n	800cf12 <_malloc_r+0x22>
 800cfb2:	6862      	ldr	r2, [r4, #4]
 800cfb4:	42a3      	cmp	r3, r4
 800cfb6:	bf0c      	ite	eq
 800cfb8:	f8c8 2000 	streq.w	r2, [r8]
 800cfbc:	605a      	strne	r2, [r3, #4]
 800cfbe:	e7eb      	b.n	800cf98 <_malloc_r+0xa8>
 800cfc0:	4623      	mov	r3, r4
 800cfc2:	6864      	ldr	r4, [r4, #4]
 800cfc4:	e7ae      	b.n	800cf24 <_malloc_r+0x34>
 800cfc6:	463c      	mov	r4, r7
 800cfc8:	687f      	ldr	r7, [r7, #4]
 800cfca:	e7b6      	b.n	800cf3a <_malloc_r+0x4a>
 800cfcc:	461a      	mov	r2, r3
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	42a3      	cmp	r3, r4
 800cfd2:	d1fb      	bne.n	800cfcc <_malloc_r+0xdc>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	6053      	str	r3, [r2, #4]
 800cfd8:	e7de      	b.n	800cf98 <_malloc_r+0xa8>
 800cfda:	230c      	movs	r3, #12
 800cfdc:	6033      	str	r3, [r6, #0]
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f000 f80c 	bl	800cffc <__malloc_unlock>
 800cfe4:	e794      	b.n	800cf10 <_malloc_r+0x20>
 800cfe6:	6005      	str	r5, [r0, #0]
 800cfe8:	e7d6      	b.n	800cf98 <_malloc_r+0xa8>
 800cfea:	bf00      	nop
 800cfec:	20002300 	.word	0x20002300

0800cff0 <__malloc_lock>:
 800cff0:	4801      	ldr	r0, [pc, #4]	@ (800cff8 <__malloc_lock+0x8>)
 800cff2:	f7ff b89c 	b.w	800c12e <__retarget_lock_acquire_recursive>
 800cff6:	bf00      	nop
 800cff8:	200022f8 	.word	0x200022f8

0800cffc <__malloc_unlock>:
 800cffc:	4801      	ldr	r0, [pc, #4]	@ (800d004 <__malloc_unlock+0x8>)
 800cffe:	f7ff b897 	b.w	800c130 <__retarget_lock_release_recursive>
 800d002:	bf00      	nop
 800d004:	200022f8 	.word	0x200022f8

0800d008 <_Balloc>:
 800d008:	b570      	push	{r4, r5, r6, lr}
 800d00a:	69c6      	ldr	r6, [r0, #28]
 800d00c:	4604      	mov	r4, r0
 800d00e:	460d      	mov	r5, r1
 800d010:	b976      	cbnz	r6, 800d030 <_Balloc+0x28>
 800d012:	2010      	movs	r0, #16
 800d014:	f7ff ff42 	bl	800ce9c <malloc>
 800d018:	4602      	mov	r2, r0
 800d01a:	61e0      	str	r0, [r4, #28]
 800d01c:	b920      	cbnz	r0, 800d028 <_Balloc+0x20>
 800d01e:	4b18      	ldr	r3, [pc, #96]	@ (800d080 <_Balloc+0x78>)
 800d020:	4818      	ldr	r0, [pc, #96]	@ (800d084 <_Balloc+0x7c>)
 800d022:	216b      	movs	r1, #107	@ 0x6b
 800d024:	f000 fda0 	bl	800db68 <__assert_func>
 800d028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d02c:	6006      	str	r6, [r0, #0]
 800d02e:	60c6      	str	r6, [r0, #12]
 800d030:	69e6      	ldr	r6, [r4, #28]
 800d032:	68f3      	ldr	r3, [r6, #12]
 800d034:	b183      	cbz	r3, 800d058 <_Balloc+0x50>
 800d036:	69e3      	ldr	r3, [r4, #28]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d03e:	b9b8      	cbnz	r0, 800d070 <_Balloc+0x68>
 800d040:	2101      	movs	r1, #1
 800d042:	fa01 f605 	lsl.w	r6, r1, r5
 800d046:	1d72      	adds	r2, r6, #5
 800d048:	0092      	lsls	r2, r2, #2
 800d04a:	4620      	mov	r0, r4
 800d04c:	f000 fdaa 	bl	800dba4 <_calloc_r>
 800d050:	b160      	cbz	r0, 800d06c <_Balloc+0x64>
 800d052:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d056:	e00e      	b.n	800d076 <_Balloc+0x6e>
 800d058:	2221      	movs	r2, #33	@ 0x21
 800d05a:	2104      	movs	r1, #4
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 fda1 	bl	800dba4 <_calloc_r>
 800d062:	69e3      	ldr	r3, [r4, #28]
 800d064:	60f0      	str	r0, [r6, #12]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1e4      	bne.n	800d036 <_Balloc+0x2e>
 800d06c:	2000      	movs	r0, #0
 800d06e:	bd70      	pop	{r4, r5, r6, pc}
 800d070:	6802      	ldr	r2, [r0, #0]
 800d072:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d076:	2300      	movs	r3, #0
 800d078:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d07c:	e7f7      	b.n	800d06e <_Balloc+0x66>
 800d07e:	bf00      	nop
 800d080:	080108c1 	.word	0x080108c1
 800d084:	08010941 	.word	0x08010941

0800d088 <_Bfree>:
 800d088:	b570      	push	{r4, r5, r6, lr}
 800d08a:	69c6      	ldr	r6, [r0, #28]
 800d08c:	4605      	mov	r5, r0
 800d08e:	460c      	mov	r4, r1
 800d090:	b976      	cbnz	r6, 800d0b0 <_Bfree+0x28>
 800d092:	2010      	movs	r0, #16
 800d094:	f7ff ff02 	bl	800ce9c <malloc>
 800d098:	4602      	mov	r2, r0
 800d09a:	61e8      	str	r0, [r5, #28]
 800d09c:	b920      	cbnz	r0, 800d0a8 <_Bfree+0x20>
 800d09e:	4b09      	ldr	r3, [pc, #36]	@ (800d0c4 <_Bfree+0x3c>)
 800d0a0:	4809      	ldr	r0, [pc, #36]	@ (800d0c8 <_Bfree+0x40>)
 800d0a2:	218f      	movs	r1, #143	@ 0x8f
 800d0a4:	f000 fd60 	bl	800db68 <__assert_func>
 800d0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0ac:	6006      	str	r6, [r0, #0]
 800d0ae:	60c6      	str	r6, [r0, #12]
 800d0b0:	b13c      	cbz	r4, 800d0c2 <_Bfree+0x3a>
 800d0b2:	69eb      	ldr	r3, [r5, #28]
 800d0b4:	6862      	ldr	r2, [r4, #4]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0bc:	6021      	str	r1, [r4, #0]
 800d0be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}
 800d0c4:	080108c1 	.word	0x080108c1
 800d0c8:	08010941 	.word	0x08010941

0800d0cc <__multadd>:
 800d0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d0:	690d      	ldr	r5, [r1, #16]
 800d0d2:	4607      	mov	r7, r0
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	461e      	mov	r6, r3
 800d0d8:	f101 0c14 	add.w	ip, r1, #20
 800d0dc:	2000      	movs	r0, #0
 800d0de:	f8dc 3000 	ldr.w	r3, [ip]
 800d0e2:	b299      	uxth	r1, r3
 800d0e4:	fb02 6101 	mla	r1, r2, r1, r6
 800d0e8:	0c1e      	lsrs	r6, r3, #16
 800d0ea:	0c0b      	lsrs	r3, r1, #16
 800d0ec:	fb02 3306 	mla	r3, r2, r6, r3
 800d0f0:	b289      	uxth	r1, r1
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0f8:	4285      	cmp	r5, r0
 800d0fa:	f84c 1b04 	str.w	r1, [ip], #4
 800d0fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d102:	dcec      	bgt.n	800d0de <__multadd+0x12>
 800d104:	b30e      	cbz	r6, 800d14a <__multadd+0x7e>
 800d106:	68a3      	ldr	r3, [r4, #8]
 800d108:	42ab      	cmp	r3, r5
 800d10a:	dc19      	bgt.n	800d140 <__multadd+0x74>
 800d10c:	6861      	ldr	r1, [r4, #4]
 800d10e:	4638      	mov	r0, r7
 800d110:	3101      	adds	r1, #1
 800d112:	f7ff ff79 	bl	800d008 <_Balloc>
 800d116:	4680      	mov	r8, r0
 800d118:	b928      	cbnz	r0, 800d126 <__multadd+0x5a>
 800d11a:	4602      	mov	r2, r0
 800d11c:	4b0c      	ldr	r3, [pc, #48]	@ (800d150 <__multadd+0x84>)
 800d11e:	480d      	ldr	r0, [pc, #52]	@ (800d154 <__multadd+0x88>)
 800d120:	21ba      	movs	r1, #186	@ 0xba
 800d122:	f000 fd21 	bl	800db68 <__assert_func>
 800d126:	6922      	ldr	r2, [r4, #16]
 800d128:	3202      	adds	r2, #2
 800d12a:	f104 010c 	add.w	r1, r4, #12
 800d12e:	0092      	lsls	r2, r2, #2
 800d130:	300c      	adds	r0, #12
 800d132:	f7fe fffe 	bl	800c132 <memcpy>
 800d136:	4621      	mov	r1, r4
 800d138:	4638      	mov	r0, r7
 800d13a:	f7ff ffa5 	bl	800d088 <_Bfree>
 800d13e:	4644      	mov	r4, r8
 800d140:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d144:	3501      	adds	r5, #1
 800d146:	615e      	str	r6, [r3, #20]
 800d148:	6125      	str	r5, [r4, #16]
 800d14a:	4620      	mov	r0, r4
 800d14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d150:	08010930 	.word	0x08010930
 800d154:	08010941 	.word	0x08010941

0800d158 <__hi0bits>:
 800d158:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d15c:	4603      	mov	r3, r0
 800d15e:	bf36      	itet	cc
 800d160:	0403      	lslcc	r3, r0, #16
 800d162:	2000      	movcs	r0, #0
 800d164:	2010      	movcc	r0, #16
 800d166:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d16a:	bf3c      	itt	cc
 800d16c:	021b      	lslcc	r3, r3, #8
 800d16e:	3008      	addcc	r0, #8
 800d170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d174:	bf3c      	itt	cc
 800d176:	011b      	lslcc	r3, r3, #4
 800d178:	3004      	addcc	r0, #4
 800d17a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d17e:	bf3c      	itt	cc
 800d180:	009b      	lslcc	r3, r3, #2
 800d182:	3002      	addcc	r0, #2
 800d184:	2b00      	cmp	r3, #0
 800d186:	db05      	blt.n	800d194 <__hi0bits+0x3c>
 800d188:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d18c:	f100 0001 	add.w	r0, r0, #1
 800d190:	bf08      	it	eq
 800d192:	2020      	moveq	r0, #32
 800d194:	4770      	bx	lr

0800d196 <__lo0bits>:
 800d196:	6803      	ldr	r3, [r0, #0]
 800d198:	4602      	mov	r2, r0
 800d19a:	f013 0007 	ands.w	r0, r3, #7
 800d19e:	d00b      	beq.n	800d1b8 <__lo0bits+0x22>
 800d1a0:	07d9      	lsls	r1, r3, #31
 800d1a2:	d421      	bmi.n	800d1e8 <__lo0bits+0x52>
 800d1a4:	0798      	lsls	r0, r3, #30
 800d1a6:	bf49      	itett	mi
 800d1a8:	085b      	lsrmi	r3, r3, #1
 800d1aa:	089b      	lsrpl	r3, r3, #2
 800d1ac:	2001      	movmi	r0, #1
 800d1ae:	6013      	strmi	r3, [r2, #0]
 800d1b0:	bf5c      	itt	pl
 800d1b2:	6013      	strpl	r3, [r2, #0]
 800d1b4:	2002      	movpl	r0, #2
 800d1b6:	4770      	bx	lr
 800d1b8:	b299      	uxth	r1, r3
 800d1ba:	b909      	cbnz	r1, 800d1c0 <__lo0bits+0x2a>
 800d1bc:	0c1b      	lsrs	r3, r3, #16
 800d1be:	2010      	movs	r0, #16
 800d1c0:	b2d9      	uxtb	r1, r3
 800d1c2:	b909      	cbnz	r1, 800d1c8 <__lo0bits+0x32>
 800d1c4:	3008      	adds	r0, #8
 800d1c6:	0a1b      	lsrs	r3, r3, #8
 800d1c8:	0719      	lsls	r1, r3, #28
 800d1ca:	bf04      	itt	eq
 800d1cc:	091b      	lsreq	r3, r3, #4
 800d1ce:	3004      	addeq	r0, #4
 800d1d0:	0799      	lsls	r1, r3, #30
 800d1d2:	bf04      	itt	eq
 800d1d4:	089b      	lsreq	r3, r3, #2
 800d1d6:	3002      	addeq	r0, #2
 800d1d8:	07d9      	lsls	r1, r3, #31
 800d1da:	d403      	bmi.n	800d1e4 <__lo0bits+0x4e>
 800d1dc:	085b      	lsrs	r3, r3, #1
 800d1de:	f100 0001 	add.w	r0, r0, #1
 800d1e2:	d003      	beq.n	800d1ec <__lo0bits+0x56>
 800d1e4:	6013      	str	r3, [r2, #0]
 800d1e6:	4770      	bx	lr
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	4770      	bx	lr
 800d1ec:	2020      	movs	r0, #32
 800d1ee:	4770      	bx	lr

0800d1f0 <__i2b>:
 800d1f0:	b510      	push	{r4, lr}
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	f7ff ff07 	bl	800d008 <_Balloc>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	b928      	cbnz	r0, 800d20a <__i2b+0x1a>
 800d1fe:	4b05      	ldr	r3, [pc, #20]	@ (800d214 <__i2b+0x24>)
 800d200:	4805      	ldr	r0, [pc, #20]	@ (800d218 <__i2b+0x28>)
 800d202:	f240 1145 	movw	r1, #325	@ 0x145
 800d206:	f000 fcaf 	bl	800db68 <__assert_func>
 800d20a:	2301      	movs	r3, #1
 800d20c:	6144      	str	r4, [r0, #20]
 800d20e:	6103      	str	r3, [r0, #16]
 800d210:	bd10      	pop	{r4, pc}
 800d212:	bf00      	nop
 800d214:	08010930 	.word	0x08010930
 800d218:	08010941 	.word	0x08010941

0800d21c <__multiply>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	4614      	mov	r4, r2
 800d222:	690a      	ldr	r2, [r1, #16]
 800d224:	6923      	ldr	r3, [r4, #16]
 800d226:	429a      	cmp	r2, r3
 800d228:	bfa8      	it	ge
 800d22a:	4623      	movge	r3, r4
 800d22c:	460f      	mov	r7, r1
 800d22e:	bfa4      	itt	ge
 800d230:	460c      	movge	r4, r1
 800d232:	461f      	movge	r7, r3
 800d234:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d238:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d23c:	68a3      	ldr	r3, [r4, #8]
 800d23e:	6861      	ldr	r1, [r4, #4]
 800d240:	eb0a 0609 	add.w	r6, sl, r9
 800d244:	42b3      	cmp	r3, r6
 800d246:	b085      	sub	sp, #20
 800d248:	bfb8      	it	lt
 800d24a:	3101      	addlt	r1, #1
 800d24c:	f7ff fedc 	bl	800d008 <_Balloc>
 800d250:	b930      	cbnz	r0, 800d260 <__multiply+0x44>
 800d252:	4602      	mov	r2, r0
 800d254:	4b44      	ldr	r3, [pc, #272]	@ (800d368 <__multiply+0x14c>)
 800d256:	4845      	ldr	r0, [pc, #276]	@ (800d36c <__multiply+0x150>)
 800d258:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d25c:	f000 fc84 	bl	800db68 <__assert_func>
 800d260:	f100 0514 	add.w	r5, r0, #20
 800d264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d268:	462b      	mov	r3, r5
 800d26a:	2200      	movs	r2, #0
 800d26c:	4543      	cmp	r3, r8
 800d26e:	d321      	bcc.n	800d2b4 <__multiply+0x98>
 800d270:	f107 0114 	add.w	r1, r7, #20
 800d274:	f104 0214 	add.w	r2, r4, #20
 800d278:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d27c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d280:	9302      	str	r3, [sp, #8]
 800d282:	1b13      	subs	r3, r2, r4
 800d284:	3b15      	subs	r3, #21
 800d286:	f023 0303 	bic.w	r3, r3, #3
 800d28a:	3304      	adds	r3, #4
 800d28c:	f104 0715 	add.w	r7, r4, #21
 800d290:	42ba      	cmp	r2, r7
 800d292:	bf38      	it	cc
 800d294:	2304      	movcc	r3, #4
 800d296:	9301      	str	r3, [sp, #4]
 800d298:	9b02      	ldr	r3, [sp, #8]
 800d29a:	9103      	str	r1, [sp, #12]
 800d29c:	428b      	cmp	r3, r1
 800d29e:	d80c      	bhi.n	800d2ba <__multiply+0x9e>
 800d2a0:	2e00      	cmp	r6, #0
 800d2a2:	dd03      	ble.n	800d2ac <__multiply+0x90>
 800d2a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d05b      	beq.n	800d364 <__multiply+0x148>
 800d2ac:	6106      	str	r6, [r0, #16]
 800d2ae:	b005      	add	sp, #20
 800d2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b4:	f843 2b04 	str.w	r2, [r3], #4
 800d2b8:	e7d8      	b.n	800d26c <__multiply+0x50>
 800d2ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2be:	f1ba 0f00 	cmp.w	sl, #0
 800d2c2:	d024      	beq.n	800d30e <__multiply+0xf2>
 800d2c4:	f104 0e14 	add.w	lr, r4, #20
 800d2c8:	46a9      	mov	r9, r5
 800d2ca:	f04f 0c00 	mov.w	ip, #0
 800d2ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2d2:	f8d9 3000 	ldr.w	r3, [r9]
 800d2d6:	fa1f fb87 	uxth.w	fp, r7
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800d2e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d2e4:	f8d9 7000 	ldr.w	r7, [r9]
 800d2e8:	4463      	add	r3, ip
 800d2ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d2ee:	fb0a c70b 	mla	r7, sl, fp, ip
 800d2f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d2fc:	4572      	cmp	r2, lr
 800d2fe:	f849 3b04 	str.w	r3, [r9], #4
 800d302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d306:	d8e2      	bhi.n	800d2ce <__multiply+0xb2>
 800d308:	9b01      	ldr	r3, [sp, #4]
 800d30a:	f845 c003 	str.w	ip, [r5, r3]
 800d30e:	9b03      	ldr	r3, [sp, #12]
 800d310:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d314:	3104      	adds	r1, #4
 800d316:	f1b9 0f00 	cmp.w	r9, #0
 800d31a:	d021      	beq.n	800d360 <__multiply+0x144>
 800d31c:	682b      	ldr	r3, [r5, #0]
 800d31e:	f104 0c14 	add.w	ip, r4, #20
 800d322:	46ae      	mov	lr, r5
 800d324:	f04f 0a00 	mov.w	sl, #0
 800d328:	f8bc b000 	ldrh.w	fp, [ip]
 800d32c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d330:	fb09 770b 	mla	r7, r9, fp, r7
 800d334:	4457      	add	r7, sl
 800d336:	b29b      	uxth	r3, r3
 800d338:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d33c:	f84e 3b04 	str.w	r3, [lr], #4
 800d340:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d344:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d348:	f8be 3000 	ldrh.w	r3, [lr]
 800d34c:	fb09 330a 	mla	r3, r9, sl, r3
 800d350:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d354:	4562      	cmp	r2, ip
 800d356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d35a:	d8e5      	bhi.n	800d328 <__multiply+0x10c>
 800d35c:	9f01      	ldr	r7, [sp, #4]
 800d35e:	51eb      	str	r3, [r5, r7]
 800d360:	3504      	adds	r5, #4
 800d362:	e799      	b.n	800d298 <__multiply+0x7c>
 800d364:	3e01      	subs	r6, #1
 800d366:	e79b      	b.n	800d2a0 <__multiply+0x84>
 800d368:	08010930 	.word	0x08010930
 800d36c:	08010941 	.word	0x08010941

0800d370 <__pow5mult>:
 800d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d374:	4615      	mov	r5, r2
 800d376:	f012 0203 	ands.w	r2, r2, #3
 800d37a:	4607      	mov	r7, r0
 800d37c:	460e      	mov	r6, r1
 800d37e:	d007      	beq.n	800d390 <__pow5mult+0x20>
 800d380:	4c25      	ldr	r4, [pc, #148]	@ (800d418 <__pow5mult+0xa8>)
 800d382:	3a01      	subs	r2, #1
 800d384:	2300      	movs	r3, #0
 800d386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d38a:	f7ff fe9f 	bl	800d0cc <__multadd>
 800d38e:	4606      	mov	r6, r0
 800d390:	10ad      	asrs	r5, r5, #2
 800d392:	d03d      	beq.n	800d410 <__pow5mult+0xa0>
 800d394:	69fc      	ldr	r4, [r7, #28]
 800d396:	b97c      	cbnz	r4, 800d3b8 <__pow5mult+0x48>
 800d398:	2010      	movs	r0, #16
 800d39a:	f7ff fd7f 	bl	800ce9c <malloc>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	61f8      	str	r0, [r7, #28]
 800d3a2:	b928      	cbnz	r0, 800d3b0 <__pow5mult+0x40>
 800d3a4:	4b1d      	ldr	r3, [pc, #116]	@ (800d41c <__pow5mult+0xac>)
 800d3a6:	481e      	ldr	r0, [pc, #120]	@ (800d420 <__pow5mult+0xb0>)
 800d3a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d3ac:	f000 fbdc 	bl	800db68 <__assert_func>
 800d3b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3b4:	6004      	str	r4, [r0, #0]
 800d3b6:	60c4      	str	r4, [r0, #12]
 800d3b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3c0:	b94c      	cbnz	r4, 800d3d6 <__pow5mult+0x66>
 800d3c2:	f240 2171 	movw	r1, #625	@ 0x271
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	f7ff ff12 	bl	800d1f0 <__i2b>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	6003      	str	r3, [r0, #0]
 800d3d6:	f04f 0900 	mov.w	r9, #0
 800d3da:	07eb      	lsls	r3, r5, #31
 800d3dc:	d50a      	bpl.n	800d3f4 <__pow5mult+0x84>
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4622      	mov	r2, r4
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	f7ff ff1a 	bl	800d21c <__multiply>
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	f7ff fe4b 	bl	800d088 <_Bfree>
 800d3f2:	4646      	mov	r6, r8
 800d3f4:	106d      	asrs	r5, r5, #1
 800d3f6:	d00b      	beq.n	800d410 <__pow5mult+0xa0>
 800d3f8:	6820      	ldr	r0, [r4, #0]
 800d3fa:	b938      	cbnz	r0, 800d40c <__pow5mult+0x9c>
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	4621      	mov	r1, r4
 800d400:	4638      	mov	r0, r7
 800d402:	f7ff ff0b 	bl	800d21c <__multiply>
 800d406:	6020      	str	r0, [r4, #0]
 800d408:	f8c0 9000 	str.w	r9, [r0]
 800d40c:	4604      	mov	r4, r0
 800d40e:	e7e4      	b.n	800d3da <__pow5mult+0x6a>
 800d410:	4630      	mov	r0, r6
 800d412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d416:	bf00      	nop
 800d418:	0801099c 	.word	0x0801099c
 800d41c:	080108c1 	.word	0x080108c1
 800d420:	08010941 	.word	0x08010941

0800d424 <__lshift>:
 800d424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d428:	460c      	mov	r4, r1
 800d42a:	6849      	ldr	r1, [r1, #4]
 800d42c:	6923      	ldr	r3, [r4, #16]
 800d42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d432:	68a3      	ldr	r3, [r4, #8]
 800d434:	4607      	mov	r7, r0
 800d436:	4691      	mov	r9, r2
 800d438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d43c:	f108 0601 	add.w	r6, r8, #1
 800d440:	42b3      	cmp	r3, r6
 800d442:	db0b      	blt.n	800d45c <__lshift+0x38>
 800d444:	4638      	mov	r0, r7
 800d446:	f7ff fddf 	bl	800d008 <_Balloc>
 800d44a:	4605      	mov	r5, r0
 800d44c:	b948      	cbnz	r0, 800d462 <__lshift+0x3e>
 800d44e:	4602      	mov	r2, r0
 800d450:	4b28      	ldr	r3, [pc, #160]	@ (800d4f4 <__lshift+0xd0>)
 800d452:	4829      	ldr	r0, [pc, #164]	@ (800d4f8 <__lshift+0xd4>)
 800d454:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d458:	f000 fb86 	bl	800db68 <__assert_func>
 800d45c:	3101      	adds	r1, #1
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	e7ee      	b.n	800d440 <__lshift+0x1c>
 800d462:	2300      	movs	r3, #0
 800d464:	f100 0114 	add.w	r1, r0, #20
 800d468:	f100 0210 	add.w	r2, r0, #16
 800d46c:	4618      	mov	r0, r3
 800d46e:	4553      	cmp	r3, sl
 800d470:	db33      	blt.n	800d4da <__lshift+0xb6>
 800d472:	6920      	ldr	r0, [r4, #16]
 800d474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d478:	f104 0314 	add.w	r3, r4, #20
 800d47c:	f019 091f 	ands.w	r9, r9, #31
 800d480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d484:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d488:	d02b      	beq.n	800d4e2 <__lshift+0xbe>
 800d48a:	f1c9 0e20 	rsb	lr, r9, #32
 800d48e:	468a      	mov	sl, r1
 800d490:	2200      	movs	r2, #0
 800d492:	6818      	ldr	r0, [r3, #0]
 800d494:	fa00 f009 	lsl.w	r0, r0, r9
 800d498:	4310      	orrs	r0, r2
 800d49a:	f84a 0b04 	str.w	r0, [sl], #4
 800d49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4a2:	459c      	cmp	ip, r3
 800d4a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4a8:	d8f3      	bhi.n	800d492 <__lshift+0x6e>
 800d4aa:	ebac 0304 	sub.w	r3, ip, r4
 800d4ae:	3b15      	subs	r3, #21
 800d4b0:	f023 0303 	bic.w	r3, r3, #3
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	f104 0015 	add.w	r0, r4, #21
 800d4ba:	4584      	cmp	ip, r0
 800d4bc:	bf38      	it	cc
 800d4be:	2304      	movcc	r3, #4
 800d4c0:	50ca      	str	r2, [r1, r3]
 800d4c2:	b10a      	cbz	r2, 800d4c8 <__lshift+0xa4>
 800d4c4:	f108 0602 	add.w	r6, r8, #2
 800d4c8:	3e01      	subs	r6, #1
 800d4ca:	4638      	mov	r0, r7
 800d4cc:	612e      	str	r6, [r5, #16]
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	f7ff fdda 	bl	800d088 <_Bfree>
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4de:	3301      	adds	r3, #1
 800d4e0:	e7c5      	b.n	800d46e <__lshift+0x4a>
 800d4e2:	3904      	subs	r1, #4
 800d4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4ec:	459c      	cmp	ip, r3
 800d4ee:	d8f9      	bhi.n	800d4e4 <__lshift+0xc0>
 800d4f0:	e7ea      	b.n	800d4c8 <__lshift+0xa4>
 800d4f2:	bf00      	nop
 800d4f4:	08010930 	.word	0x08010930
 800d4f8:	08010941 	.word	0x08010941

0800d4fc <__mcmp>:
 800d4fc:	690a      	ldr	r2, [r1, #16]
 800d4fe:	4603      	mov	r3, r0
 800d500:	6900      	ldr	r0, [r0, #16]
 800d502:	1a80      	subs	r0, r0, r2
 800d504:	b530      	push	{r4, r5, lr}
 800d506:	d10e      	bne.n	800d526 <__mcmp+0x2a>
 800d508:	3314      	adds	r3, #20
 800d50a:	3114      	adds	r1, #20
 800d50c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d510:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d514:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d518:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d51c:	4295      	cmp	r5, r2
 800d51e:	d003      	beq.n	800d528 <__mcmp+0x2c>
 800d520:	d205      	bcs.n	800d52e <__mcmp+0x32>
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	bd30      	pop	{r4, r5, pc}
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d3f3      	bcc.n	800d514 <__mcmp+0x18>
 800d52c:	e7fb      	b.n	800d526 <__mcmp+0x2a>
 800d52e:	2001      	movs	r0, #1
 800d530:	e7f9      	b.n	800d526 <__mcmp+0x2a>
	...

0800d534 <__mdiff>:
 800d534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d538:	4689      	mov	r9, r1
 800d53a:	4606      	mov	r6, r0
 800d53c:	4611      	mov	r1, r2
 800d53e:	4648      	mov	r0, r9
 800d540:	4614      	mov	r4, r2
 800d542:	f7ff ffdb 	bl	800d4fc <__mcmp>
 800d546:	1e05      	subs	r5, r0, #0
 800d548:	d112      	bne.n	800d570 <__mdiff+0x3c>
 800d54a:	4629      	mov	r1, r5
 800d54c:	4630      	mov	r0, r6
 800d54e:	f7ff fd5b 	bl	800d008 <_Balloc>
 800d552:	4602      	mov	r2, r0
 800d554:	b928      	cbnz	r0, 800d562 <__mdiff+0x2e>
 800d556:	4b3f      	ldr	r3, [pc, #252]	@ (800d654 <__mdiff+0x120>)
 800d558:	f240 2137 	movw	r1, #567	@ 0x237
 800d55c:	483e      	ldr	r0, [pc, #248]	@ (800d658 <__mdiff+0x124>)
 800d55e:	f000 fb03 	bl	800db68 <__assert_func>
 800d562:	2301      	movs	r3, #1
 800d564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d568:	4610      	mov	r0, r2
 800d56a:	b003      	add	sp, #12
 800d56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d570:	bfbc      	itt	lt
 800d572:	464b      	movlt	r3, r9
 800d574:	46a1      	movlt	r9, r4
 800d576:	4630      	mov	r0, r6
 800d578:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d57c:	bfba      	itte	lt
 800d57e:	461c      	movlt	r4, r3
 800d580:	2501      	movlt	r5, #1
 800d582:	2500      	movge	r5, #0
 800d584:	f7ff fd40 	bl	800d008 <_Balloc>
 800d588:	4602      	mov	r2, r0
 800d58a:	b918      	cbnz	r0, 800d594 <__mdiff+0x60>
 800d58c:	4b31      	ldr	r3, [pc, #196]	@ (800d654 <__mdiff+0x120>)
 800d58e:	f240 2145 	movw	r1, #581	@ 0x245
 800d592:	e7e3      	b.n	800d55c <__mdiff+0x28>
 800d594:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d598:	6926      	ldr	r6, [r4, #16]
 800d59a:	60c5      	str	r5, [r0, #12]
 800d59c:	f109 0310 	add.w	r3, r9, #16
 800d5a0:	f109 0514 	add.w	r5, r9, #20
 800d5a4:	f104 0e14 	add.w	lr, r4, #20
 800d5a8:	f100 0b14 	add.w	fp, r0, #20
 800d5ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d5b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d5b4:	9301      	str	r3, [sp, #4]
 800d5b6:	46d9      	mov	r9, fp
 800d5b8:	f04f 0c00 	mov.w	ip, #0
 800d5bc:	9b01      	ldr	r3, [sp, #4]
 800d5be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d5c6:	9301      	str	r3, [sp, #4]
 800d5c8:	fa1f f38a 	uxth.w	r3, sl
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	b283      	uxth	r3, r0
 800d5d0:	1acb      	subs	r3, r1, r3
 800d5d2:	0c00      	lsrs	r0, r0, #16
 800d5d4:	4463      	add	r3, ip
 800d5d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d5da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d5e4:	4576      	cmp	r6, lr
 800d5e6:	f849 3b04 	str.w	r3, [r9], #4
 800d5ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5ee:	d8e5      	bhi.n	800d5bc <__mdiff+0x88>
 800d5f0:	1b33      	subs	r3, r6, r4
 800d5f2:	3b15      	subs	r3, #21
 800d5f4:	f023 0303 	bic.w	r3, r3, #3
 800d5f8:	3415      	adds	r4, #21
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	42a6      	cmp	r6, r4
 800d5fe:	bf38      	it	cc
 800d600:	2304      	movcc	r3, #4
 800d602:	441d      	add	r5, r3
 800d604:	445b      	add	r3, fp
 800d606:	461e      	mov	r6, r3
 800d608:	462c      	mov	r4, r5
 800d60a:	4544      	cmp	r4, r8
 800d60c:	d30e      	bcc.n	800d62c <__mdiff+0xf8>
 800d60e:	f108 0103 	add.w	r1, r8, #3
 800d612:	1b49      	subs	r1, r1, r5
 800d614:	f021 0103 	bic.w	r1, r1, #3
 800d618:	3d03      	subs	r5, #3
 800d61a:	45a8      	cmp	r8, r5
 800d61c:	bf38      	it	cc
 800d61e:	2100      	movcc	r1, #0
 800d620:	440b      	add	r3, r1
 800d622:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d626:	b191      	cbz	r1, 800d64e <__mdiff+0x11a>
 800d628:	6117      	str	r7, [r2, #16]
 800d62a:	e79d      	b.n	800d568 <__mdiff+0x34>
 800d62c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d630:	46e6      	mov	lr, ip
 800d632:	0c08      	lsrs	r0, r1, #16
 800d634:	fa1c fc81 	uxtah	ip, ip, r1
 800d638:	4471      	add	r1, lr
 800d63a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d63e:	b289      	uxth	r1, r1
 800d640:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d644:	f846 1b04 	str.w	r1, [r6], #4
 800d648:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d64c:	e7dd      	b.n	800d60a <__mdiff+0xd6>
 800d64e:	3f01      	subs	r7, #1
 800d650:	e7e7      	b.n	800d622 <__mdiff+0xee>
 800d652:	bf00      	nop
 800d654:	08010930 	.word	0x08010930
 800d658:	08010941 	.word	0x08010941

0800d65c <__d2b>:
 800d65c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d660:	460f      	mov	r7, r1
 800d662:	2101      	movs	r1, #1
 800d664:	ec59 8b10 	vmov	r8, r9, d0
 800d668:	4616      	mov	r6, r2
 800d66a:	f7ff fccd 	bl	800d008 <_Balloc>
 800d66e:	4604      	mov	r4, r0
 800d670:	b930      	cbnz	r0, 800d680 <__d2b+0x24>
 800d672:	4602      	mov	r2, r0
 800d674:	4b23      	ldr	r3, [pc, #140]	@ (800d704 <__d2b+0xa8>)
 800d676:	4824      	ldr	r0, [pc, #144]	@ (800d708 <__d2b+0xac>)
 800d678:	f240 310f 	movw	r1, #783	@ 0x30f
 800d67c:	f000 fa74 	bl	800db68 <__assert_func>
 800d680:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d684:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d688:	b10d      	cbz	r5, 800d68e <__d2b+0x32>
 800d68a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d68e:	9301      	str	r3, [sp, #4]
 800d690:	f1b8 0300 	subs.w	r3, r8, #0
 800d694:	d023      	beq.n	800d6de <__d2b+0x82>
 800d696:	4668      	mov	r0, sp
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	f7ff fd7c 	bl	800d196 <__lo0bits>
 800d69e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6a2:	b1d0      	cbz	r0, 800d6da <__d2b+0x7e>
 800d6a4:	f1c0 0320 	rsb	r3, r0, #32
 800d6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ac:	430b      	orrs	r3, r1
 800d6ae:	40c2      	lsrs	r2, r0
 800d6b0:	6163      	str	r3, [r4, #20]
 800d6b2:	9201      	str	r2, [sp, #4]
 800d6b4:	9b01      	ldr	r3, [sp, #4]
 800d6b6:	61a3      	str	r3, [r4, #24]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	bf0c      	ite	eq
 800d6bc:	2201      	moveq	r2, #1
 800d6be:	2202      	movne	r2, #2
 800d6c0:	6122      	str	r2, [r4, #16]
 800d6c2:	b1a5      	cbz	r5, 800d6ee <__d2b+0x92>
 800d6c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d6c8:	4405      	add	r5, r0
 800d6ca:	603d      	str	r5, [r7, #0]
 800d6cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d6d0:	6030      	str	r0, [r6, #0]
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	b003      	add	sp, #12
 800d6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6da:	6161      	str	r1, [r4, #20]
 800d6dc:	e7ea      	b.n	800d6b4 <__d2b+0x58>
 800d6de:	a801      	add	r0, sp, #4
 800d6e0:	f7ff fd59 	bl	800d196 <__lo0bits>
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	6163      	str	r3, [r4, #20]
 800d6e8:	3020      	adds	r0, #32
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	e7e8      	b.n	800d6c0 <__d2b+0x64>
 800d6ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d6f6:	6038      	str	r0, [r7, #0]
 800d6f8:	6918      	ldr	r0, [r3, #16]
 800d6fa:	f7ff fd2d 	bl	800d158 <__hi0bits>
 800d6fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d702:	e7e5      	b.n	800d6d0 <__d2b+0x74>
 800d704:	08010930 	.word	0x08010930
 800d708:	08010941 	.word	0x08010941

0800d70c <__ssputs_r>:
 800d70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d710:	688e      	ldr	r6, [r1, #8]
 800d712:	461f      	mov	r7, r3
 800d714:	42be      	cmp	r6, r7
 800d716:	680b      	ldr	r3, [r1, #0]
 800d718:	4682      	mov	sl, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	4690      	mov	r8, r2
 800d71e:	d82d      	bhi.n	800d77c <__ssputs_r+0x70>
 800d720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d724:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d728:	d026      	beq.n	800d778 <__ssputs_r+0x6c>
 800d72a:	6965      	ldr	r5, [r4, #20]
 800d72c:	6909      	ldr	r1, [r1, #16]
 800d72e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d732:	eba3 0901 	sub.w	r9, r3, r1
 800d736:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d73a:	1c7b      	adds	r3, r7, #1
 800d73c:	444b      	add	r3, r9
 800d73e:	106d      	asrs	r5, r5, #1
 800d740:	429d      	cmp	r5, r3
 800d742:	bf38      	it	cc
 800d744:	461d      	movcc	r5, r3
 800d746:	0553      	lsls	r3, r2, #21
 800d748:	d527      	bpl.n	800d79a <__ssputs_r+0x8e>
 800d74a:	4629      	mov	r1, r5
 800d74c:	f7ff fbd0 	bl	800cef0 <_malloc_r>
 800d750:	4606      	mov	r6, r0
 800d752:	b360      	cbz	r0, 800d7ae <__ssputs_r+0xa2>
 800d754:	6921      	ldr	r1, [r4, #16]
 800d756:	464a      	mov	r2, r9
 800d758:	f7fe fceb 	bl	800c132 <memcpy>
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d766:	81a3      	strh	r3, [r4, #12]
 800d768:	6126      	str	r6, [r4, #16]
 800d76a:	6165      	str	r5, [r4, #20]
 800d76c:	444e      	add	r6, r9
 800d76e:	eba5 0509 	sub.w	r5, r5, r9
 800d772:	6026      	str	r6, [r4, #0]
 800d774:	60a5      	str	r5, [r4, #8]
 800d776:	463e      	mov	r6, r7
 800d778:	42be      	cmp	r6, r7
 800d77a:	d900      	bls.n	800d77e <__ssputs_r+0x72>
 800d77c:	463e      	mov	r6, r7
 800d77e:	6820      	ldr	r0, [r4, #0]
 800d780:	4632      	mov	r2, r6
 800d782:	4641      	mov	r1, r8
 800d784:	f000 f9c6 	bl	800db14 <memmove>
 800d788:	68a3      	ldr	r3, [r4, #8]
 800d78a:	1b9b      	subs	r3, r3, r6
 800d78c:	60a3      	str	r3, [r4, #8]
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	4433      	add	r3, r6
 800d792:	6023      	str	r3, [r4, #0]
 800d794:	2000      	movs	r0, #0
 800d796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79a:	462a      	mov	r2, r5
 800d79c:	f000 fa28 	bl	800dbf0 <_realloc_r>
 800d7a0:	4606      	mov	r6, r0
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d1e0      	bne.n	800d768 <__ssputs_r+0x5c>
 800d7a6:	6921      	ldr	r1, [r4, #16]
 800d7a8:	4650      	mov	r0, sl
 800d7aa:	f7ff fb2d 	bl	800ce08 <_free_r>
 800d7ae:	230c      	movs	r3, #12
 800d7b0:	f8ca 3000 	str.w	r3, [sl]
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ba:	81a3      	strh	r3, [r4, #12]
 800d7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c0:	e7e9      	b.n	800d796 <__ssputs_r+0x8a>
	...

0800d7c4 <_svfiprintf_r>:
 800d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c8:	4698      	mov	r8, r3
 800d7ca:	898b      	ldrh	r3, [r1, #12]
 800d7cc:	061b      	lsls	r3, r3, #24
 800d7ce:	b09d      	sub	sp, #116	@ 0x74
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	460d      	mov	r5, r1
 800d7d4:	4614      	mov	r4, r2
 800d7d6:	d510      	bpl.n	800d7fa <_svfiprintf_r+0x36>
 800d7d8:	690b      	ldr	r3, [r1, #16]
 800d7da:	b973      	cbnz	r3, 800d7fa <_svfiprintf_r+0x36>
 800d7dc:	2140      	movs	r1, #64	@ 0x40
 800d7de:	f7ff fb87 	bl	800cef0 <_malloc_r>
 800d7e2:	6028      	str	r0, [r5, #0]
 800d7e4:	6128      	str	r0, [r5, #16]
 800d7e6:	b930      	cbnz	r0, 800d7f6 <_svfiprintf_r+0x32>
 800d7e8:	230c      	movs	r3, #12
 800d7ea:	603b      	str	r3, [r7, #0]
 800d7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f0:	b01d      	add	sp, #116	@ 0x74
 800d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f6:	2340      	movs	r3, #64	@ 0x40
 800d7f8:	616b      	str	r3, [r5, #20]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7fe:	2320      	movs	r3, #32
 800d800:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d804:	f8cd 800c 	str.w	r8, [sp, #12]
 800d808:	2330      	movs	r3, #48	@ 0x30
 800d80a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d9a8 <_svfiprintf_r+0x1e4>
 800d80e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d812:	f04f 0901 	mov.w	r9, #1
 800d816:	4623      	mov	r3, r4
 800d818:	469a      	mov	sl, r3
 800d81a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d81e:	b10a      	cbz	r2, 800d824 <_svfiprintf_r+0x60>
 800d820:	2a25      	cmp	r2, #37	@ 0x25
 800d822:	d1f9      	bne.n	800d818 <_svfiprintf_r+0x54>
 800d824:	ebba 0b04 	subs.w	fp, sl, r4
 800d828:	d00b      	beq.n	800d842 <_svfiprintf_r+0x7e>
 800d82a:	465b      	mov	r3, fp
 800d82c:	4622      	mov	r2, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	4638      	mov	r0, r7
 800d832:	f7ff ff6b 	bl	800d70c <__ssputs_r>
 800d836:	3001      	adds	r0, #1
 800d838:	f000 80a7 	beq.w	800d98a <_svfiprintf_r+0x1c6>
 800d83c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d83e:	445a      	add	r2, fp
 800d840:	9209      	str	r2, [sp, #36]	@ 0x24
 800d842:	f89a 3000 	ldrb.w	r3, [sl]
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 809f 	beq.w	800d98a <_svfiprintf_r+0x1c6>
 800d84c:	2300      	movs	r3, #0
 800d84e:	f04f 32ff 	mov.w	r2, #4294967295
 800d852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d856:	f10a 0a01 	add.w	sl, sl, #1
 800d85a:	9304      	str	r3, [sp, #16]
 800d85c:	9307      	str	r3, [sp, #28]
 800d85e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d862:	931a      	str	r3, [sp, #104]	@ 0x68
 800d864:	4654      	mov	r4, sl
 800d866:	2205      	movs	r2, #5
 800d868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d86c:	484e      	ldr	r0, [pc, #312]	@ (800d9a8 <_svfiprintf_r+0x1e4>)
 800d86e:	f7f2 fcaf 	bl	80001d0 <memchr>
 800d872:	9a04      	ldr	r2, [sp, #16]
 800d874:	b9d8      	cbnz	r0, 800d8ae <_svfiprintf_r+0xea>
 800d876:	06d0      	lsls	r0, r2, #27
 800d878:	bf44      	itt	mi
 800d87a:	2320      	movmi	r3, #32
 800d87c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d880:	0711      	lsls	r1, r2, #28
 800d882:	bf44      	itt	mi
 800d884:	232b      	movmi	r3, #43	@ 0x2b
 800d886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d88a:	f89a 3000 	ldrb.w	r3, [sl]
 800d88e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d890:	d015      	beq.n	800d8be <_svfiprintf_r+0xfa>
 800d892:	9a07      	ldr	r2, [sp, #28]
 800d894:	4654      	mov	r4, sl
 800d896:	2000      	movs	r0, #0
 800d898:	f04f 0c0a 	mov.w	ip, #10
 800d89c:	4621      	mov	r1, r4
 800d89e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8a2:	3b30      	subs	r3, #48	@ 0x30
 800d8a4:	2b09      	cmp	r3, #9
 800d8a6:	d94b      	bls.n	800d940 <_svfiprintf_r+0x17c>
 800d8a8:	b1b0      	cbz	r0, 800d8d8 <_svfiprintf_r+0x114>
 800d8aa:	9207      	str	r2, [sp, #28]
 800d8ac:	e014      	b.n	800d8d8 <_svfiprintf_r+0x114>
 800d8ae:	eba0 0308 	sub.w	r3, r0, r8
 800d8b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	9304      	str	r3, [sp, #16]
 800d8ba:	46a2      	mov	sl, r4
 800d8bc:	e7d2      	b.n	800d864 <_svfiprintf_r+0xa0>
 800d8be:	9b03      	ldr	r3, [sp, #12]
 800d8c0:	1d19      	adds	r1, r3, #4
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	9103      	str	r1, [sp, #12]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	bfbb      	ittet	lt
 800d8ca:	425b      	neglt	r3, r3
 800d8cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d8d0:	9307      	strge	r3, [sp, #28]
 800d8d2:	9307      	strlt	r3, [sp, #28]
 800d8d4:	bfb8      	it	lt
 800d8d6:	9204      	strlt	r2, [sp, #16]
 800d8d8:	7823      	ldrb	r3, [r4, #0]
 800d8da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8dc:	d10a      	bne.n	800d8f4 <_svfiprintf_r+0x130>
 800d8de:	7863      	ldrb	r3, [r4, #1]
 800d8e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8e2:	d132      	bne.n	800d94a <_svfiprintf_r+0x186>
 800d8e4:	9b03      	ldr	r3, [sp, #12]
 800d8e6:	1d1a      	adds	r2, r3, #4
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	9203      	str	r2, [sp, #12]
 800d8ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8f0:	3402      	adds	r4, #2
 800d8f2:	9305      	str	r3, [sp, #20]
 800d8f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9b8 <_svfiprintf_r+0x1f4>
 800d8f8:	7821      	ldrb	r1, [r4, #0]
 800d8fa:	2203      	movs	r2, #3
 800d8fc:	4650      	mov	r0, sl
 800d8fe:	f7f2 fc67 	bl	80001d0 <memchr>
 800d902:	b138      	cbz	r0, 800d914 <_svfiprintf_r+0x150>
 800d904:	9b04      	ldr	r3, [sp, #16]
 800d906:	eba0 000a 	sub.w	r0, r0, sl
 800d90a:	2240      	movs	r2, #64	@ 0x40
 800d90c:	4082      	lsls	r2, r0
 800d90e:	4313      	orrs	r3, r2
 800d910:	3401      	adds	r4, #1
 800d912:	9304      	str	r3, [sp, #16]
 800d914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d918:	4824      	ldr	r0, [pc, #144]	@ (800d9ac <_svfiprintf_r+0x1e8>)
 800d91a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d91e:	2206      	movs	r2, #6
 800d920:	f7f2 fc56 	bl	80001d0 <memchr>
 800d924:	2800      	cmp	r0, #0
 800d926:	d036      	beq.n	800d996 <_svfiprintf_r+0x1d2>
 800d928:	4b21      	ldr	r3, [pc, #132]	@ (800d9b0 <_svfiprintf_r+0x1ec>)
 800d92a:	bb1b      	cbnz	r3, 800d974 <_svfiprintf_r+0x1b0>
 800d92c:	9b03      	ldr	r3, [sp, #12]
 800d92e:	3307      	adds	r3, #7
 800d930:	f023 0307 	bic.w	r3, r3, #7
 800d934:	3308      	adds	r3, #8
 800d936:	9303      	str	r3, [sp, #12]
 800d938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d93a:	4433      	add	r3, r6
 800d93c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d93e:	e76a      	b.n	800d816 <_svfiprintf_r+0x52>
 800d940:	fb0c 3202 	mla	r2, ip, r2, r3
 800d944:	460c      	mov	r4, r1
 800d946:	2001      	movs	r0, #1
 800d948:	e7a8      	b.n	800d89c <_svfiprintf_r+0xd8>
 800d94a:	2300      	movs	r3, #0
 800d94c:	3401      	adds	r4, #1
 800d94e:	9305      	str	r3, [sp, #20]
 800d950:	4619      	mov	r1, r3
 800d952:	f04f 0c0a 	mov.w	ip, #10
 800d956:	4620      	mov	r0, r4
 800d958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d95c:	3a30      	subs	r2, #48	@ 0x30
 800d95e:	2a09      	cmp	r2, #9
 800d960:	d903      	bls.n	800d96a <_svfiprintf_r+0x1a6>
 800d962:	2b00      	cmp	r3, #0
 800d964:	d0c6      	beq.n	800d8f4 <_svfiprintf_r+0x130>
 800d966:	9105      	str	r1, [sp, #20]
 800d968:	e7c4      	b.n	800d8f4 <_svfiprintf_r+0x130>
 800d96a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d96e:	4604      	mov	r4, r0
 800d970:	2301      	movs	r3, #1
 800d972:	e7f0      	b.n	800d956 <_svfiprintf_r+0x192>
 800d974:	ab03      	add	r3, sp, #12
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	462a      	mov	r2, r5
 800d97a:	4b0e      	ldr	r3, [pc, #56]	@ (800d9b4 <_svfiprintf_r+0x1f0>)
 800d97c:	a904      	add	r1, sp, #16
 800d97e:	4638      	mov	r0, r7
 800d980:	f7fd fe7a 	bl	800b678 <_printf_float>
 800d984:	1c42      	adds	r2, r0, #1
 800d986:	4606      	mov	r6, r0
 800d988:	d1d6      	bne.n	800d938 <_svfiprintf_r+0x174>
 800d98a:	89ab      	ldrh	r3, [r5, #12]
 800d98c:	065b      	lsls	r3, r3, #25
 800d98e:	f53f af2d 	bmi.w	800d7ec <_svfiprintf_r+0x28>
 800d992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d994:	e72c      	b.n	800d7f0 <_svfiprintf_r+0x2c>
 800d996:	ab03      	add	r3, sp, #12
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	462a      	mov	r2, r5
 800d99c:	4b05      	ldr	r3, [pc, #20]	@ (800d9b4 <_svfiprintf_r+0x1f0>)
 800d99e:	a904      	add	r1, sp, #16
 800d9a0:	4638      	mov	r0, r7
 800d9a2:	f7fe f901 	bl	800bba8 <_printf_i>
 800d9a6:	e7ed      	b.n	800d984 <_svfiprintf_r+0x1c0>
 800d9a8:	08010a98 	.word	0x08010a98
 800d9ac:	08010aa2 	.word	0x08010aa2
 800d9b0:	0800b679 	.word	0x0800b679
 800d9b4:	0800d70d 	.word	0x0800d70d
 800d9b8:	08010a9e 	.word	0x08010a9e

0800d9bc <__sflush_r>:
 800d9bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c4:	0716      	lsls	r6, r2, #28
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	460c      	mov	r4, r1
 800d9ca:	d454      	bmi.n	800da76 <__sflush_r+0xba>
 800d9cc:	684b      	ldr	r3, [r1, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	dc02      	bgt.n	800d9d8 <__sflush_r+0x1c>
 800d9d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	dd48      	ble.n	800da6a <__sflush_r+0xae>
 800d9d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9da:	2e00      	cmp	r6, #0
 800d9dc:	d045      	beq.n	800da6a <__sflush_r+0xae>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9e4:	682f      	ldr	r7, [r5, #0]
 800d9e6:	6a21      	ldr	r1, [r4, #32]
 800d9e8:	602b      	str	r3, [r5, #0]
 800d9ea:	d030      	beq.n	800da4e <__sflush_r+0x92>
 800d9ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9ee:	89a3      	ldrh	r3, [r4, #12]
 800d9f0:	0759      	lsls	r1, r3, #29
 800d9f2:	d505      	bpl.n	800da00 <__sflush_r+0x44>
 800d9f4:	6863      	ldr	r3, [r4, #4]
 800d9f6:	1ad2      	subs	r2, r2, r3
 800d9f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9fa:	b10b      	cbz	r3, 800da00 <__sflush_r+0x44>
 800d9fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	2300      	movs	r3, #0
 800da02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da04:	6a21      	ldr	r1, [r4, #32]
 800da06:	4628      	mov	r0, r5
 800da08:	47b0      	blx	r6
 800da0a:	1c43      	adds	r3, r0, #1
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	d106      	bne.n	800da1e <__sflush_r+0x62>
 800da10:	6829      	ldr	r1, [r5, #0]
 800da12:	291d      	cmp	r1, #29
 800da14:	d82b      	bhi.n	800da6e <__sflush_r+0xb2>
 800da16:	4a2a      	ldr	r2, [pc, #168]	@ (800dac0 <__sflush_r+0x104>)
 800da18:	410a      	asrs	r2, r1
 800da1a:	07d6      	lsls	r6, r2, #31
 800da1c:	d427      	bmi.n	800da6e <__sflush_r+0xb2>
 800da1e:	2200      	movs	r2, #0
 800da20:	6062      	str	r2, [r4, #4]
 800da22:	04d9      	lsls	r1, r3, #19
 800da24:	6922      	ldr	r2, [r4, #16]
 800da26:	6022      	str	r2, [r4, #0]
 800da28:	d504      	bpl.n	800da34 <__sflush_r+0x78>
 800da2a:	1c42      	adds	r2, r0, #1
 800da2c:	d101      	bne.n	800da32 <__sflush_r+0x76>
 800da2e:	682b      	ldr	r3, [r5, #0]
 800da30:	b903      	cbnz	r3, 800da34 <__sflush_r+0x78>
 800da32:	6560      	str	r0, [r4, #84]	@ 0x54
 800da34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da36:	602f      	str	r7, [r5, #0]
 800da38:	b1b9      	cbz	r1, 800da6a <__sflush_r+0xae>
 800da3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da3e:	4299      	cmp	r1, r3
 800da40:	d002      	beq.n	800da48 <__sflush_r+0x8c>
 800da42:	4628      	mov	r0, r5
 800da44:	f7ff f9e0 	bl	800ce08 <_free_r>
 800da48:	2300      	movs	r3, #0
 800da4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800da4c:	e00d      	b.n	800da6a <__sflush_r+0xae>
 800da4e:	2301      	movs	r3, #1
 800da50:	4628      	mov	r0, r5
 800da52:	47b0      	blx	r6
 800da54:	4602      	mov	r2, r0
 800da56:	1c50      	adds	r0, r2, #1
 800da58:	d1c9      	bne.n	800d9ee <__sflush_r+0x32>
 800da5a:	682b      	ldr	r3, [r5, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d0c6      	beq.n	800d9ee <__sflush_r+0x32>
 800da60:	2b1d      	cmp	r3, #29
 800da62:	d001      	beq.n	800da68 <__sflush_r+0xac>
 800da64:	2b16      	cmp	r3, #22
 800da66:	d11e      	bne.n	800daa6 <__sflush_r+0xea>
 800da68:	602f      	str	r7, [r5, #0]
 800da6a:	2000      	movs	r0, #0
 800da6c:	e022      	b.n	800dab4 <__sflush_r+0xf8>
 800da6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da72:	b21b      	sxth	r3, r3
 800da74:	e01b      	b.n	800daae <__sflush_r+0xf2>
 800da76:	690f      	ldr	r7, [r1, #16]
 800da78:	2f00      	cmp	r7, #0
 800da7a:	d0f6      	beq.n	800da6a <__sflush_r+0xae>
 800da7c:	0793      	lsls	r3, r2, #30
 800da7e:	680e      	ldr	r6, [r1, #0]
 800da80:	bf08      	it	eq
 800da82:	694b      	ldreq	r3, [r1, #20]
 800da84:	600f      	str	r7, [r1, #0]
 800da86:	bf18      	it	ne
 800da88:	2300      	movne	r3, #0
 800da8a:	eba6 0807 	sub.w	r8, r6, r7
 800da8e:	608b      	str	r3, [r1, #8]
 800da90:	f1b8 0f00 	cmp.w	r8, #0
 800da94:	dde9      	ble.n	800da6a <__sflush_r+0xae>
 800da96:	6a21      	ldr	r1, [r4, #32]
 800da98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da9a:	4643      	mov	r3, r8
 800da9c:	463a      	mov	r2, r7
 800da9e:	4628      	mov	r0, r5
 800daa0:	47b0      	blx	r6
 800daa2:	2800      	cmp	r0, #0
 800daa4:	dc08      	bgt.n	800dab8 <__sflush_r+0xfc>
 800daa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	f04f 30ff 	mov.w	r0, #4294967295
 800dab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab8:	4407      	add	r7, r0
 800daba:	eba8 0800 	sub.w	r8, r8, r0
 800dabe:	e7e7      	b.n	800da90 <__sflush_r+0xd4>
 800dac0:	dfbffffe 	.word	0xdfbffffe

0800dac4 <_fflush_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	690b      	ldr	r3, [r1, #16]
 800dac8:	4605      	mov	r5, r0
 800daca:	460c      	mov	r4, r1
 800dacc:	b913      	cbnz	r3, 800dad4 <_fflush_r+0x10>
 800dace:	2500      	movs	r5, #0
 800dad0:	4628      	mov	r0, r5
 800dad2:	bd38      	pop	{r3, r4, r5, pc}
 800dad4:	b118      	cbz	r0, 800dade <_fflush_r+0x1a>
 800dad6:	6a03      	ldr	r3, [r0, #32]
 800dad8:	b90b      	cbnz	r3, 800dade <_fflush_r+0x1a>
 800dada:	f7fe fa11 	bl	800bf00 <__sinit>
 800dade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d0f3      	beq.n	800dace <_fflush_r+0xa>
 800dae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dae8:	07d0      	lsls	r0, r2, #31
 800daea:	d404      	bmi.n	800daf6 <_fflush_r+0x32>
 800daec:	0599      	lsls	r1, r3, #22
 800daee:	d402      	bmi.n	800daf6 <_fflush_r+0x32>
 800daf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daf2:	f7fe fb1c 	bl	800c12e <__retarget_lock_acquire_recursive>
 800daf6:	4628      	mov	r0, r5
 800daf8:	4621      	mov	r1, r4
 800dafa:	f7ff ff5f 	bl	800d9bc <__sflush_r>
 800dafe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db00:	07da      	lsls	r2, r3, #31
 800db02:	4605      	mov	r5, r0
 800db04:	d4e4      	bmi.n	800dad0 <_fflush_r+0xc>
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	059b      	lsls	r3, r3, #22
 800db0a:	d4e1      	bmi.n	800dad0 <_fflush_r+0xc>
 800db0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db0e:	f7fe fb0f 	bl	800c130 <__retarget_lock_release_recursive>
 800db12:	e7dd      	b.n	800dad0 <_fflush_r+0xc>

0800db14 <memmove>:
 800db14:	4288      	cmp	r0, r1
 800db16:	b510      	push	{r4, lr}
 800db18:	eb01 0402 	add.w	r4, r1, r2
 800db1c:	d902      	bls.n	800db24 <memmove+0x10>
 800db1e:	4284      	cmp	r4, r0
 800db20:	4623      	mov	r3, r4
 800db22:	d807      	bhi.n	800db34 <memmove+0x20>
 800db24:	1e43      	subs	r3, r0, #1
 800db26:	42a1      	cmp	r1, r4
 800db28:	d008      	beq.n	800db3c <memmove+0x28>
 800db2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db32:	e7f8      	b.n	800db26 <memmove+0x12>
 800db34:	4402      	add	r2, r0
 800db36:	4601      	mov	r1, r0
 800db38:	428a      	cmp	r2, r1
 800db3a:	d100      	bne.n	800db3e <memmove+0x2a>
 800db3c:	bd10      	pop	{r4, pc}
 800db3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db46:	e7f7      	b.n	800db38 <memmove+0x24>

0800db48 <_sbrk_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4d06      	ldr	r5, [pc, #24]	@ (800db64 <_sbrk_r+0x1c>)
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	602b      	str	r3, [r5, #0]
 800db54:	f7f5 fa28 	bl	8002fa8 <_sbrk>
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	d102      	bne.n	800db62 <_sbrk_r+0x1a>
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	b103      	cbz	r3, 800db62 <_sbrk_r+0x1a>
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	200022f4 	.word	0x200022f4

0800db68 <__assert_func>:
 800db68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db6a:	4614      	mov	r4, r2
 800db6c:	461a      	mov	r2, r3
 800db6e:	4b09      	ldr	r3, [pc, #36]	@ (800db94 <__assert_func+0x2c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4605      	mov	r5, r0
 800db74:	68d8      	ldr	r0, [r3, #12]
 800db76:	b954      	cbnz	r4, 800db8e <__assert_func+0x26>
 800db78:	4b07      	ldr	r3, [pc, #28]	@ (800db98 <__assert_func+0x30>)
 800db7a:	461c      	mov	r4, r3
 800db7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db80:	9100      	str	r1, [sp, #0]
 800db82:	462b      	mov	r3, r5
 800db84:	4905      	ldr	r1, [pc, #20]	@ (800db9c <__assert_func+0x34>)
 800db86:	f000 f86f 	bl	800dc68 <fiprintf>
 800db8a:	f000 f87f 	bl	800dc8c <abort>
 800db8e:	4b04      	ldr	r3, [pc, #16]	@ (800dba0 <__assert_func+0x38>)
 800db90:	e7f4      	b.n	800db7c <__assert_func+0x14>
 800db92:	bf00      	nop
 800db94:	20000128 	.word	0x20000128
 800db98:	08010aee 	.word	0x08010aee
 800db9c:	08010ac0 	.word	0x08010ac0
 800dba0:	08010ab3 	.word	0x08010ab3

0800dba4 <_calloc_r>:
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	fba1 5402 	umull	r5, r4, r1, r2
 800dbaa:	b93c      	cbnz	r4, 800dbbc <_calloc_r+0x18>
 800dbac:	4629      	mov	r1, r5
 800dbae:	f7ff f99f 	bl	800cef0 <_malloc_r>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	b928      	cbnz	r0, 800dbc2 <_calloc_r+0x1e>
 800dbb6:	2600      	movs	r6, #0
 800dbb8:	4630      	mov	r0, r6
 800dbba:	bd70      	pop	{r4, r5, r6, pc}
 800dbbc:	220c      	movs	r2, #12
 800dbbe:	6002      	str	r2, [r0, #0]
 800dbc0:	e7f9      	b.n	800dbb6 <_calloc_r+0x12>
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	f7fe fa34 	bl	800c032 <memset>
 800dbca:	e7f5      	b.n	800dbb8 <_calloc_r+0x14>

0800dbcc <__ascii_mbtowc>:
 800dbcc:	b082      	sub	sp, #8
 800dbce:	b901      	cbnz	r1, 800dbd2 <__ascii_mbtowc+0x6>
 800dbd0:	a901      	add	r1, sp, #4
 800dbd2:	b142      	cbz	r2, 800dbe6 <__ascii_mbtowc+0x1a>
 800dbd4:	b14b      	cbz	r3, 800dbea <__ascii_mbtowc+0x1e>
 800dbd6:	7813      	ldrb	r3, [r2, #0]
 800dbd8:	600b      	str	r3, [r1, #0]
 800dbda:	7812      	ldrb	r2, [r2, #0]
 800dbdc:	1e10      	subs	r0, r2, #0
 800dbde:	bf18      	it	ne
 800dbe0:	2001      	movne	r0, #1
 800dbe2:	b002      	add	sp, #8
 800dbe4:	4770      	bx	lr
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	e7fb      	b.n	800dbe2 <__ascii_mbtowc+0x16>
 800dbea:	f06f 0001 	mvn.w	r0, #1
 800dbee:	e7f8      	b.n	800dbe2 <__ascii_mbtowc+0x16>

0800dbf0 <_realloc_r>:
 800dbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf4:	4680      	mov	r8, r0
 800dbf6:	4615      	mov	r5, r2
 800dbf8:	460c      	mov	r4, r1
 800dbfa:	b921      	cbnz	r1, 800dc06 <_realloc_r+0x16>
 800dbfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc00:	4611      	mov	r1, r2
 800dc02:	f7ff b975 	b.w	800cef0 <_malloc_r>
 800dc06:	b92a      	cbnz	r2, 800dc14 <_realloc_r+0x24>
 800dc08:	f7ff f8fe 	bl	800ce08 <_free_r>
 800dc0c:	2400      	movs	r4, #0
 800dc0e:	4620      	mov	r0, r4
 800dc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc14:	f000 f841 	bl	800dc9a <_malloc_usable_size_r>
 800dc18:	4285      	cmp	r5, r0
 800dc1a:	4606      	mov	r6, r0
 800dc1c:	d802      	bhi.n	800dc24 <_realloc_r+0x34>
 800dc1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc22:	d8f4      	bhi.n	800dc0e <_realloc_r+0x1e>
 800dc24:	4629      	mov	r1, r5
 800dc26:	4640      	mov	r0, r8
 800dc28:	f7ff f962 	bl	800cef0 <_malloc_r>
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d0ec      	beq.n	800dc0c <_realloc_r+0x1c>
 800dc32:	42b5      	cmp	r5, r6
 800dc34:	462a      	mov	r2, r5
 800dc36:	4621      	mov	r1, r4
 800dc38:	bf28      	it	cs
 800dc3a:	4632      	movcs	r2, r6
 800dc3c:	f7fe fa79 	bl	800c132 <memcpy>
 800dc40:	4621      	mov	r1, r4
 800dc42:	4640      	mov	r0, r8
 800dc44:	f7ff f8e0 	bl	800ce08 <_free_r>
 800dc48:	463c      	mov	r4, r7
 800dc4a:	e7e0      	b.n	800dc0e <_realloc_r+0x1e>

0800dc4c <__ascii_wctomb>:
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	4608      	mov	r0, r1
 800dc50:	b141      	cbz	r1, 800dc64 <__ascii_wctomb+0x18>
 800dc52:	2aff      	cmp	r2, #255	@ 0xff
 800dc54:	d904      	bls.n	800dc60 <__ascii_wctomb+0x14>
 800dc56:	228a      	movs	r2, #138	@ 0x8a
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5e:	4770      	bx	lr
 800dc60:	700a      	strb	r2, [r1, #0]
 800dc62:	2001      	movs	r0, #1
 800dc64:	4770      	bx	lr
	...

0800dc68 <fiprintf>:
 800dc68:	b40e      	push	{r1, r2, r3}
 800dc6a:	b503      	push	{r0, r1, lr}
 800dc6c:	4601      	mov	r1, r0
 800dc6e:	ab03      	add	r3, sp, #12
 800dc70:	4805      	ldr	r0, [pc, #20]	@ (800dc88 <fiprintf+0x20>)
 800dc72:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc76:	6800      	ldr	r0, [r0, #0]
 800dc78:	9301      	str	r3, [sp, #4]
 800dc7a:	f000 f83f 	bl	800dcfc <_vfiprintf_r>
 800dc7e:	b002      	add	sp, #8
 800dc80:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc84:	b003      	add	sp, #12
 800dc86:	4770      	bx	lr
 800dc88:	20000128 	.word	0x20000128

0800dc8c <abort>:
 800dc8c:	b508      	push	{r3, lr}
 800dc8e:	2006      	movs	r0, #6
 800dc90:	f000 fa08 	bl	800e0a4 <raise>
 800dc94:	2001      	movs	r0, #1
 800dc96:	f7f5 f90f 	bl	8002eb8 <_exit>

0800dc9a <_malloc_usable_size_r>:
 800dc9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc9e:	1f18      	subs	r0, r3, #4
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	bfbc      	itt	lt
 800dca4:	580b      	ldrlt	r3, [r1, r0]
 800dca6:	18c0      	addlt	r0, r0, r3
 800dca8:	4770      	bx	lr

0800dcaa <__sfputc_r>:
 800dcaa:	6893      	ldr	r3, [r2, #8]
 800dcac:	3b01      	subs	r3, #1
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	b410      	push	{r4}
 800dcb2:	6093      	str	r3, [r2, #8]
 800dcb4:	da08      	bge.n	800dcc8 <__sfputc_r+0x1e>
 800dcb6:	6994      	ldr	r4, [r2, #24]
 800dcb8:	42a3      	cmp	r3, r4
 800dcba:	db01      	blt.n	800dcc0 <__sfputc_r+0x16>
 800dcbc:	290a      	cmp	r1, #10
 800dcbe:	d103      	bne.n	800dcc8 <__sfputc_r+0x1e>
 800dcc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcc4:	f000 b932 	b.w	800df2c <__swbuf_r>
 800dcc8:	6813      	ldr	r3, [r2, #0]
 800dcca:	1c58      	adds	r0, r3, #1
 800dccc:	6010      	str	r0, [r2, #0]
 800dcce:	7019      	strb	r1, [r3, #0]
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <__sfputs_r>:
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	4606      	mov	r6, r0
 800dcdc:	460f      	mov	r7, r1
 800dcde:	4614      	mov	r4, r2
 800dce0:	18d5      	adds	r5, r2, r3
 800dce2:	42ac      	cmp	r4, r5
 800dce4:	d101      	bne.n	800dcea <__sfputs_r+0x12>
 800dce6:	2000      	movs	r0, #0
 800dce8:	e007      	b.n	800dcfa <__sfputs_r+0x22>
 800dcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcee:	463a      	mov	r2, r7
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7ff ffda 	bl	800dcaa <__sfputc_r>
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	d1f3      	bne.n	800dce2 <__sfputs_r+0xa>
 800dcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dcfc <_vfiprintf_r>:
 800dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	460d      	mov	r5, r1
 800dd02:	b09d      	sub	sp, #116	@ 0x74
 800dd04:	4614      	mov	r4, r2
 800dd06:	4698      	mov	r8, r3
 800dd08:	4606      	mov	r6, r0
 800dd0a:	b118      	cbz	r0, 800dd14 <_vfiprintf_r+0x18>
 800dd0c:	6a03      	ldr	r3, [r0, #32]
 800dd0e:	b90b      	cbnz	r3, 800dd14 <_vfiprintf_r+0x18>
 800dd10:	f7fe f8f6 	bl	800bf00 <__sinit>
 800dd14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd16:	07d9      	lsls	r1, r3, #31
 800dd18:	d405      	bmi.n	800dd26 <_vfiprintf_r+0x2a>
 800dd1a:	89ab      	ldrh	r3, [r5, #12]
 800dd1c:	059a      	lsls	r2, r3, #22
 800dd1e:	d402      	bmi.n	800dd26 <_vfiprintf_r+0x2a>
 800dd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd22:	f7fe fa04 	bl	800c12e <__retarget_lock_acquire_recursive>
 800dd26:	89ab      	ldrh	r3, [r5, #12]
 800dd28:	071b      	lsls	r3, r3, #28
 800dd2a:	d501      	bpl.n	800dd30 <_vfiprintf_r+0x34>
 800dd2c:	692b      	ldr	r3, [r5, #16]
 800dd2e:	b99b      	cbnz	r3, 800dd58 <_vfiprintf_r+0x5c>
 800dd30:	4629      	mov	r1, r5
 800dd32:	4630      	mov	r0, r6
 800dd34:	f000 f938 	bl	800dfa8 <__swsetup_r>
 800dd38:	b170      	cbz	r0, 800dd58 <_vfiprintf_r+0x5c>
 800dd3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd3c:	07dc      	lsls	r4, r3, #31
 800dd3e:	d504      	bpl.n	800dd4a <_vfiprintf_r+0x4e>
 800dd40:	f04f 30ff 	mov.w	r0, #4294967295
 800dd44:	b01d      	add	sp, #116	@ 0x74
 800dd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4a:	89ab      	ldrh	r3, [r5, #12]
 800dd4c:	0598      	lsls	r0, r3, #22
 800dd4e:	d4f7      	bmi.n	800dd40 <_vfiprintf_r+0x44>
 800dd50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd52:	f7fe f9ed 	bl	800c130 <__retarget_lock_release_recursive>
 800dd56:	e7f3      	b.n	800dd40 <_vfiprintf_r+0x44>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd5c:	2320      	movs	r3, #32
 800dd5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd62:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd66:	2330      	movs	r3, #48	@ 0x30
 800dd68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800df18 <_vfiprintf_r+0x21c>
 800dd6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd70:	f04f 0901 	mov.w	r9, #1
 800dd74:	4623      	mov	r3, r4
 800dd76:	469a      	mov	sl, r3
 800dd78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd7c:	b10a      	cbz	r2, 800dd82 <_vfiprintf_r+0x86>
 800dd7e:	2a25      	cmp	r2, #37	@ 0x25
 800dd80:	d1f9      	bne.n	800dd76 <_vfiprintf_r+0x7a>
 800dd82:	ebba 0b04 	subs.w	fp, sl, r4
 800dd86:	d00b      	beq.n	800dda0 <_vfiprintf_r+0xa4>
 800dd88:	465b      	mov	r3, fp
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7ff ffa2 	bl	800dcd8 <__sfputs_r>
 800dd94:	3001      	adds	r0, #1
 800dd96:	f000 80a7 	beq.w	800dee8 <_vfiprintf_r+0x1ec>
 800dd9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd9c:	445a      	add	r2, fp
 800dd9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dda0:	f89a 3000 	ldrb.w	r3, [sl]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 809f 	beq.w	800dee8 <_vfiprintf_r+0x1ec>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddb4:	f10a 0a01 	add.w	sl, sl, #1
 800ddb8:	9304      	str	r3, [sp, #16]
 800ddba:	9307      	str	r3, [sp, #28]
 800ddbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ddc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddc2:	4654      	mov	r4, sl
 800ddc4:	2205      	movs	r2, #5
 800ddc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddca:	4853      	ldr	r0, [pc, #332]	@ (800df18 <_vfiprintf_r+0x21c>)
 800ddcc:	f7f2 fa00 	bl	80001d0 <memchr>
 800ddd0:	9a04      	ldr	r2, [sp, #16]
 800ddd2:	b9d8      	cbnz	r0, 800de0c <_vfiprintf_r+0x110>
 800ddd4:	06d1      	lsls	r1, r2, #27
 800ddd6:	bf44      	itt	mi
 800ddd8:	2320      	movmi	r3, #32
 800ddda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddde:	0713      	lsls	r3, r2, #28
 800dde0:	bf44      	itt	mi
 800dde2:	232b      	movmi	r3, #43	@ 0x2b
 800dde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dde8:	f89a 3000 	ldrb.w	r3, [sl]
 800ddec:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddee:	d015      	beq.n	800de1c <_vfiprintf_r+0x120>
 800ddf0:	9a07      	ldr	r2, [sp, #28]
 800ddf2:	4654      	mov	r4, sl
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	f04f 0c0a 	mov.w	ip, #10
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de00:	3b30      	subs	r3, #48	@ 0x30
 800de02:	2b09      	cmp	r3, #9
 800de04:	d94b      	bls.n	800de9e <_vfiprintf_r+0x1a2>
 800de06:	b1b0      	cbz	r0, 800de36 <_vfiprintf_r+0x13a>
 800de08:	9207      	str	r2, [sp, #28]
 800de0a:	e014      	b.n	800de36 <_vfiprintf_r+0x13a>
 800de0c:	eba0 0308 	sub.w	r3, r0, r8
 800de10:	fa09 f303 	lsl.w	r3, r9, r3
 800de14:	4313      	orrs	r3, r2
 800de16:	9304      	str	r3, [sp, #16]
 800de18:	46a2      	mov	sl, r4
 800de1a:	e7d2      	b.n	800ddc2 <_vfiprintf_r+0xc6>
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	1d19      	adds	r1, r3, #4
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	9103      	str	r1, [sp, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	bfbb      	ittet	lt
 800de28:	425b      	neglt	r3, r3
 800de2a:	f042 0202 	orrlt.w	r2, r2, #2
 800de2e:	9307      	strge	r3, [sp, #28]
 800de30:	9307      	strlt	r3, [sp, #28]
 800de32:	bfb8      	it	lt
 800de34:	9204      	strlt	r2, [sp, #16]
 800de36:	7823      	ldrb	r3, [r4, #0]
 800de38:	2b2e      	cmp	r3, #46	@ 0x2e
 800de3a:	d10a      	bne.n	800de52 <_vfiprintf_r+0x156>
 800de3c:	7863      	ldrb	r3, [r4, #1]
 800de3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800de40:	d132      	bne.n	800dea8 <_vfiprintf_r+0x1ac>
 800de42:	9b03      	ldr	r3, [sp, #12]
 800de44:	1d1a      	adds	r2, r3, #4
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	9203      	str	r2, [sp, #12]
 800de4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de4e:	3402      	adds	r4, #2
 800de50:	9305      	str	r3, [sp, #20]
 800de52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df28 <_vfiprintf_r+0x22c>
 800de56:	7821      	ldrb	r1, [r4, #0]
 800de58:	2203      	movs	r2, #3
 800de5a:	4650      	mov	r0, sl
 800de5c:	f7f2 f9b8 	bl	80001d0 <memchr>
 800de60:	b138      	cbz	r0, 800de72 <_vfiprintf_r+0x176>
 800de62:	9b04      	ldr	r3, [sp, #16]
 800de64:	eba0 000a 	sub.w	r0, r0, sl
 800de68:	2240      	movs	r2, #64	@ 0x40
 800de6a:	4082      	lsls	r2, r0
 800de6c:	4313      	orrs	r3, r2
 800de6e:	3401      	adds	r4, #1
 800de70:	9304      	str	r3, [sp, #16]
 800de72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de76:	4829      	ldr	r0, [pc, #164]	@ (800df1c <_vfiprintf_r+0x220>)
 800de78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de7c:	2206      	movs	r2, #6
 800de7e:	f7f2 f9a7 	bl	80001d0 <memchr>
 800de82:	2800      	cmp	r0, #0
 800de84:	d03f      	beq.n	800df06 <_vfiprintf_r+0x20a>
 800de86:	4b26      	ldr	r3, [pc, #152]	@ (800df20 <_vfiprintf_r+0x224>)
 800de88:	bb1b      	cbnz	r3, 800ded2 <_vfiprintf_r+0x1d6>
 800de8a:	9b03      	ldr	r3, [sp, #12]
 800de8c:	3307      	adds	r3, #7
 800de8e:	f023 0307 	bic.w	r3, r3, #7
 800de92:	3308      	adds	r3, #8
 800de94:	9303      	str	r3, [sp, #12]
 800de96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de98:	443b      	add	r3, r7
 800de9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800de9c:	e76a      	b.n	800dd74 <_vfiprintf_r+0x78>
 800de9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dea2:	460c      	mov	r4, r1
 800dea4:	2001      	movs	r0, #1
 800dea6:	e7a8      	b.n	800ddfa <_vfiprintf_r+0xfe>
 800dea8:	2300      	movs	r3, #0
 800deaa:	3401      	adds	r4, #1
 800deac:	9305      	str	r3, [sp, #20]
 800deae:	4619      	mov	r1, r3
 800deb0:	f04f 0c0a 	mov.w	ip, #10
 800deb4:	4620      	mov	r0, r4
 800deb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deba:	3a30      	subs	r2, #48	@ 0x30
 800debc:	2a09      	cmp	r2, #9
 800debe:	d903      	bls.n	800dec8 <_vfiprintf_r+0x1cc>
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d0c6      	beq.n	800de52 <_vfiprintf_r+0x156>
 800dec4:	9105      	str	r1, [sp, #20]
 800dec6:	e7c4      	b.n	800de52 <_vfiprintf_r+0x156>
 800dec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800decc:	4604      	mov	r4, r0
 800dece:	2301      	movs	r3, #1
 800ded0:	e7f0      	b.n	800deb4 <_vfiprintf_r+0x1b8>
 800ded2:	ab03      	add	r3, sp, #12
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	462a      	mov	r2, r5
 800ded8:	4b12      	ldr	r3, [pc, #72]	@ (800df24 <_vfiprintf_r+0x228>)
 800deda:	a904      	add	r1, sp, #16
 800dedc:	4630      	mov	r0, r6
 800dede:	f7fd fbcb 	bl	800b678 <_printf_float>
 800dee2:	4607      	mov	r7, r0
 800dee4:	1c78      	adds	r0, r7, #1
 800dee6:	d1d6      	bne.n	800de96 <_vfiprintf_r+0x19a>
 800dee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800deea:	07d9      	lsls	r1, r3, #31
 800deec:	d405      	bmi.n	800defa <_vfiprintf_r+0x1fe>
 800deee:	89ab      	ldrh	r3, [r5, #12]
 800def0:	059a      	lsls	r2, r3, #22
 800def2:	d402      	bmi.n	800defa <_vfiprintf_r+0x1fe>
 800def4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800def6:	f7fe f91b 	bl	800c130 <__retarget_lock_release_recursive>
 800defa:	89ab      	ldrh	r3, [r5, #12]
 800defc:	065b      	lsls	r3, r3, #25
 800defe:	f53f af1f 	bmi.w	800dd40 <_vfiprintf_r+0x44>
 800df02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df04:	e71e      	b.n	800dd44 <_vfiprintf_r+0x48>
 800df06:	ab03      	add	r3, sp, #12
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	462a      	mov	r2, r5
 800df0c:	4b05      	ldr	r3, [pc, #20]	@ (800df24 <_vfiprintf_r+0x228>)
 800df0e:	a904      	add	r1, sp, #16
 800df10:	4630      	mov	r0, r6
 800df12:	f7fd fe49 	bl	800bba8 <_printf_i>
 800df16:	e7e4      	b.n	800dee2 <_vfiprintf_r+0x1e6>
 800df18:	08010a98 	.word	0x08010a98
 800df1c:	08010aa2 	.word	0x08010aa2
 800df20:	0800b679 	.word	0x0800b679
 800df24:	0800dcd9 	.word	0x0800dcd9
 800df28:	08010a9e 	.word	0x08010a9e

0800df2c <__swbuf_r>:
 800df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2e:	460e      	mov	r6, r1
 800df30:	4614      	mov	r4, r2
 800df32:	4605      	mov	r5, r0
 800df34:	b118      	cbz	r0, 800df3e <__swbuf_r+0x12>
 800df36:	6a03      	ldr	r3, [r0, #32]
 800df38:	b90b      	cbnz	r3, 800df3e <__swbuf_r+0x12>
 800df3a:	f7fd ffe1 	bl	800bf00 <__sinit>
 800df3e:	69a3      	ldr	r3, [r4, #24]
 800df40:	60a3      	str	r3, [r4, #8]
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	071a      	lsls	r2, r3, #28
 800df46:	d501      	bpl.n	800df4c <__swbuf_r+0x20>
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	b943      	cbnz	r3, 800df5e <__swbuf_r+0x32>
 800df4c:	4621      	mov	r1, r4
 800df4e:	4628      	mov	r0, r5
 800df50:	f000 f82a 	bl	800dfa8 <__swsetup_r>
 800df54:	b118      	cbz	r0, 800df5e <__swbuf_r+0x32>
 800df56:	f04f 37ff 	mov.w	r7, #4294967295
 800df5a:	4638      	mov	r0, r7
 800df5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	6922      	ldr	r2, [r4, #16]
 800df62:	1a98      	subs	r0, r3, r2
 800df64:	6963      	ldr	r3, [r4, #20]
 800df66:	b2f6      	uxtb	r6, r6
 800df68:	4283      	cmp	r3, r0
 800df6a:	4637      	mov	r7, r6
 800df6c:	dc05      	bgt.n	800df7a <__swbuf_r+0x4e>
 800df6e:	4621      	mov	r1, r4
 800df70:	4628      	mov	r0, r5
 800df72:	f7ff fda7 	bl	800dac4 <_fflush_r>
 800df76:	2800      	cmp	r0, #0
 800df78:	d1ed      	bne.n	800df56 <__swbuf_r+0x2a>
 800df7a:	68a3      	ldr	r3, [r4, #8]
 800df7c:	3b01      	subs	r3, #1
 800df7e:	60a3      	str	r3, [r4, #8]
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	1c5a      	adds	r2, r3, #1
 800df84:	6022      	str	r2, [r4, #0]
 800df86:	701e      	strb	r6, [r3, #0]
 800df88:	6962      	ldr	r2, [r4, #20]
 800df8a:	1c43      	adds	r3, r0, #1
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d004      	beq.n	800df9a <__swbuf_r+0x6e>
 800df90:	89a3      	ldrh	r3, [r4, #12]
 800df92:	07db      	lsls	r3, r3, #31
 800df94:	d5e1      	bpl.n	800df5a <__swbuf_r+0x2e>
 800df96:	2e0a      	cmp	r6, #10
 800df98:	d1df      	bne.n	800df5a <__swbuf_r+0x2e>
 800df9a:	4621      	mov	r1, r4
 800df9c:	4628      	mov	r0, r5
 800df9e:	f7ff fd91 	bl	800dac4 <_fflush_r>
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d0d9      	beq.n	800df5a <__swbuf_r+0x2e>
 800dfa6:	e7d6      	b.n	800df56 <__swbuf_r+0x2a>

0800dfa8 <__swsetup_r>:
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	4b29      	ldr	r3, [pc, #164]	@ (800e050 <__swsetup_r+0xa8>)
 800dfac:	4605      	mov	r5, r0
 800dfae:	6818      	ldr	r0, [r3, #0]
 800dfb0:	460c      	mov	r4, r1
 800dfb2:	b118      	cbz	r0, 800dfbc <__swsetup_r+0x14>
 800dfb4:	6a03      	ldr	r3, [r0, #32]
 800dfb6:	b90b      	cbnz	r3, 800dfbc <__swsetup_r+0x14>
 800dfb8:	f7fd ffa2 	bl	800bf00 <__sinit>
 800dfbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfc0:	0719      	lsls	r1, r3, #28
 800dfc2:	d422      	bmi.n	800e00a <__swsetup_r+0x62>
 800dfc4:	06da      	lsls	r2, r3, #27
 800dfc6:	d407      	bmi.n	800dfd8 <__swsetup_r+0x30>
 800dfc8:	2209      	movs	r2, #9
 800dfca:	602a      	str	r2, [r5, #0]
 800dfcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfd0:	81a3      	strh	r3, [r4, #12]
 800dfd2:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd6:	e033      	b.n	800e040 <__swsetup_r+0x98>
 800dfd8:	0758      	lsls	r0, r3, #29
 800dfda:	d512      	bpl.n	800e002 <__swsetup_r+0x5a>
 800dfdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfde:	b141      	cbz	r1, 800dff2 <__swsetup_r+0x4a>
 800dfe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfe4:	4299      	cmp	r1, r3
 800dfe6:	d002      	beq.n	800dfee <__swsetup_r+0x46>
 800dfe8:	4628      	mov	r0, r5
 800dfea:	f7fe ff0d 	bl	800ce08 <_free_r>
 800dfee:	2300      	movs	r3, #0
 800dff0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dff8:	81a3      	strh	r3, [r4, #12]
 800dffa:	2300      	movs	r3, #0
 800dffc:	6063      	str	r3, [r4, #4]
 800dffe:	6923      	ldr	r3, [r4, #16]
 800e000:	6023      	str	r3, [r4, #0]
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	f043 0308 	orr.w	r3, r3, #8
 800e008:	81a3      	strh	r3, [r4, #12]
 800e00a:	6923      	ldr	r3, [r4, #16]
 800e00c:	b94b      	cbnz	r3, 800e022 <__swsetup_r+0x7a>
 800e00e:	89a3      	ldrh	r3, [r4, #12]
 800e010:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e018:	d003      	beq.n	800e022 <__swsetup_r+0x7a>
 800e01a:	4621      	mov	r1, r4
 800e01c:	4628      	mov	r0, r5
 800e01e:	f000 f883 	bl	800e128 <__smakebuf_r>
 800e022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e026:	f013 0201 	ands.w	r2, r3, #1
 800e02a:	d00a      	beq.n	800e042 <__swsetup_r+0x9a>
 800e02c:	2200      	movs	r2, #0
 800e02e:	60a2      	str	r2, [r4, #8]
 800e030:	6962      	ldr	r2, [r4, #20]
 800e032:	4252      	negs	r2, r2
 800e034:	61a2      	str	r2, [r4, #24]
 800e036:	6922      	ldr	r2, [r4, #16]
 800e038:	b942      	cbnz	r2, 800e04c <__swsetup_r+0xa4>
 800e03a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e03e:	d1c5      	bne.n	800dfcc <__swsetup_r+0x24>
 800e040:	bd38      	pop	{r3, r4, r5, pc}
 800e042:	0799      	lsls	r1, r3, #30
 800e044:	bf58      	it	pl
 800e046:	6962      	ldrpl	r2, [r4, #20]
 800e048:	60a2      	str	r2, [r4, #8]
 800e04a:	e7f4      	b.n	800e036 <__swsetup_r+0x8e>
 800e04c:	2000      	movs	r0, #0
 800e04e:	e7f7      	b.n	800e040 <__swsetup_r+0x98>
 800e050:	20000128 	.word	0x20000128

0800e054 <_raise_r>:
 800e054:	291f      	cmp	r1, #31
 800e056:	b538      	push	{r3, r4, r5, lr}
 800e058:	4605      	mov	r5, r0
 800e05a:	460c      	mov	r4, r1
 800e05c:	d904      	bls.n	800e068 <_raise_r+0x14>
 800e05e:	2316      	movs	r3, #22
 800e060:	6003      	str	r3, [r0, #0]
 800e062:	f04f 30ff 	mov.w	r0, #4294967295
 800e066:	bd38      	pop	{r3, r4, r5, pc}
 800e068:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e06a:	b112      	cbz	r2, 800e072 <_raise_r+0x1e>
 800e06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e070:	b94b      	cbnz	r3, 800e086 <_raise_r+0x32>
 800e072:	4628      	mov	r0, r5
 800e074:	f000 f830 	bl	800e0d8 <_getpid_r>
 800e078:	4622      	mov	r2, r4
 800e07a:	4601      	mov	r1, r0
 800e07c:	4628      	mov	r0, r5
 800e07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e082:	f000 b817 	b.w	800e0b4 <_kill_r>
 800e086:	2b01      	cmp	r3, #1
 800e088:	d00a      	beq.n	800e0a0 <_raise_r+0x4c>
 800e08a:	1c59      	adds	r1, r3, #1
 800e08c:	d103      	bne.n	800e096 <_raise_r+0x42>
 800e08e:	2316      	movs	r3, #22
 800e090:	6003      	str	r3, [r0, #0]
 800e092:	2001      	movs	r0, #1
 800e094:	e7e7      	b.n	800e066 <_raise_r+0x12>
 800e096:	2100      	movs	r1, #0
 800e098:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e09c:	4620      	mov	r0, r4
 800e09e:	4798      	blx	r3
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	e7e0      	b.n	800e066 <_raise_r+0x12>

0800e0a4 <raise>:
 800e0a4:	4b02      	ldr	r3, [pc, #8]	@ (800e0b0 <raise+0xc>)
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	6818      	ldr	r0, [r3, #0]
 800e0aa:	f7ff bfd3 	b.w	800e054 <_raise_r>
 800e0ae:	bf00      	nop
 800e0b0:	20000128 	.word	0x20000128

0800e0b4 <_kill_r>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4d07      	ldr	r5, [pc, #28]	@ (800e0d4 <_kill_r+0x20>)
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	4608      	mov	r0, r1
 800e0be:	4611      	mov	r1, r2
 800e0c0:	602b      	str	r3, [r5, #0]
 800e0c2:	f7f4 fee9 	bl	8002e98 <_kill>
 800e0c6:	1c43      	adds	r3, r0, #1
 800e0c8:	d102      	bne.n	800e0d0 <_kill_r+0x1c>
 800e0ca:	682b      	ldr	r3, [r5, #0]
 800e0cc:	b103      	cbz	r3, 800e0d0 <_kill_r+0x1c>
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	bd38      	pop	{r3, r4, r5, pc}
 800e0d2:	bf00      	nop
 800e0d4:	200022f4 	.word	0x200022f4

0800e0d8 <_getpid_r>:
 800e0d8:	f7f4 bed6 	b.w	8002e88 <_getpid>

0800e0dc <__swhatbuf_r>:
 800e0dc:	b570      	push	{r4, r5, r6, lr}
 800e0de:	460c      	mov	r4, r1
 800e0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e4:	2900      	cmp	r1, #0
 800e0e6:	b096      	sub	sp, #88	@ 0x58
 800e0e8:	4615      	mov	r5, r2
 800e0ea:	461e      	mov	r6, r3
 800e0ec:	da0d      	bge.n	800e10a <__swhatbuf_r+0x2e>
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e0f4:	f04f 0100 	mov.w	r1, #0
 800e0f8:	bf14      	ite	ne
 800e0fa:	2340      	movne	r3, #64	@ 0x40
 800e0fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e100:	2000      	movs	r0, #0
 800e102:	6031      	str	r1, [r6, #0]
 800e104:	602b      	str	r3, [r5, #0]
 800e106:	b016      	add	sp, #88	@ 0x58
 800e108:	bd70      	pop	{r4, r5, r6, pc}
 800e10a:	466a      	mov	r2, sp
 800e10c:	f000 f848 	bl	800e1a0 <_fstat_r>
 800e110:	2800      	cmp	r0, #0
 800e112:	dbec      	blt.n	800e0ee <__swhatbuf_r+0x12>
 800e114:	9901      	ldr	r1, [sp, #4]
 800e116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e11a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e11e:	4259      	negs	r1, r3
 800e120:	4159      	adcs	r1, r3
 800e122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e126:	e7eb      	b.n	800e100 <__swhatbuf_r+0x24>

0800e128 <__smakebuf_r>:
 800e128:	898b      	ldrh	r3, [r1, #12]
 800e12a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e12c:	079d      	lsls	r5, r3, #30
 800e12e:	4606      	mov	r6, r0
 800e130:	460c      	mov	r4, r1
 800e132:	d507      	bpl.n	800e144 <__smakebuf_r+0x1c>
 800e134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e138:	6023      	str	r3, [r4, #0]
 800e13a:	6123      	str	r3, [r4, #16]
 800e13c:	2301      	movs	r3, #1
 800e13e:	6163      	str	r3, [r4, #20]
 800e140:	b003      	add	sp, #12
 800e142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e144:	ab01      	add	r3, sp, #4
 800e146:	466a      	mov	r2, sp
 800e148:	f7ff ffc8 	bl	800e0dc <__swhatbuf_r>
 800e14c:	9f00      	ldr	r7, [sp, #0]
 800e14e:	4605      	mov	r5, r0
 800e150:	4639      	mov	r1, r7
 800e152:	4630      	mov	r0, r6
 800e154:	f7fe fecc 	bl	800cef0 <_malloc_r>
 800e158:	b948      	cbnz	r0, 800e16e <__smakebuf_r+0x46>
 800e15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e15e:	059a      	lsls	r2, r3, #22
 800e160:	d4ee      	bmi.n	800e140 <__smakebuf_r+0x18>
 800e162:	f023 0303 	bic.w	r3, r3, #3
 800e166:	f043 0302 	orr.w	r3, r3, #2
 800e16a:	81a3      	strh	r3, [r4, #12]
 800e16c:	e7e2      	b.n	800e134 <__smakebuf_r+0xc>
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	6020      	str	r0, [r4, #0]
 800e172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	9b01      	ldr	r3, [sp, #4]
 800e17a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e17e:	b15b      	cbz	r3, 800e198 <__smakebuf_r+0x70>
 800e180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e184:	4630      	mov	r0, r6
 800e186:	f000 f81d 	bl	800e1c4 <_isatty_r>
 800e18a:	b128      	cbz	r0, 800e198 <__smakebuf_r+0x70>
 800e18c:	89a3      	ldrh	r3, [r4, #12]
 800e18e:	f023 0303 	bic.w	r3, r3, #3
 800e192:	f043 0301 	orr.w	r3, r3, #1
 800e196:	81a3      	strh	r3, [r4, #12]
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	431d      	orrs	r5, r3
 800e19c:	81a5      	strh	r5, [r4, #12]
 800e19e:	e7cf      	b.n	800e140 <__smakebuf_r+0x18>

0800e1a0 <_fstat_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4d07      	ldr	r5, [pc, #28]	@ (800e1c0 <_fstat_r+0x20>)
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	602b      	str	r3, [r5, #0]
 800e1ae:	f7f4 fed3 	bl	8002f58 <_fstat>
 800e1b2:	1c43      	adds	r3, r0, #1
 800e1b4:	d102      	bne.n	800e1bc <_fstat_r+0x1c>
 800e1b6:	682b      	ldr	r3, [r5, #0]
 800e1b8:	b103      	cbz	r3, 800e1bc <_fstat_r+0x1c>
 800e1ba:	6023      	str	r3, [r4, #0]
 800e1bc:	bd38      	pop	{r3, r4, r5, pc}
 800e1be:	bf00      	nop
 800e1c0:	200022f4 	.word	0x200022f4

0800e1c4 <_isatty_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d06      	ldr	r5, [pc, #24]	@ (800e1e0 <_isatty_r+0x1c>)
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	4608      	mov	r0, r1
 800e1ce:	602b      	str	r3, [r5, #0]
 800e1d0:	f7f4 fed2 	bl	8002f78 <_isatty>
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	d102      	bne.n	800e1de <_isatty_r+0x1a>
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	b103      	cbz	r3, 800e1de <_isatty_r+0x1a>
 800e1dc:	6023      	str	r3, [r4, #0]
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	200022f4 	.word	0x200022f4

0800e1e4 <asin>:
 800e1e4:	b538      	push	{r3, r4, r5, lr}
 800e1e6:	ed2d 8b02 	vpush	{d8}
 800e1ea:	ec55 4b10 	vmov	r4, r5, d0
 800e1ee:	f000 fa93 	bl	800e718 <__ieee754_asin>
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	eeb0 8a40 	vmov.f32	s16, s0
 800e1fe:	eef0 8a60 	vmov.f32	s17, s1
 800e202:	f7f2 fc93 	bl	8000b2c <__aeabi_dcmpun>
 800e206:	b9a8      	cbnz	r0, 800e234 <asin+0x50>
 800e208:	ec45 4b10 	vmov	d0, r4, r5
 800e20c:	f000 f8bc 	bl	800e388 <fabs>
 800e210:	4b0c      	ldr	r3, [pc, #48]	@ (800e244 <asin+0x60>)
 800e212:	ec51 0b10 	vmov	r0, r1, d0
 800e216:	2200      	movs	r2, #0
 800e218:	f7f2 fc7e 	bl	8000b18 <__aeabi_dcmpgt>
 800e21c:	b150      	cbz	r0, 800e234 <asin+0x50>
 800e21e:	f7fd ff5b 	bl	800c0d8 <__errno>
 800e222:	ecbd 8b02 	vpop	{d8}
 800e226:	2321      	movs	r3, #33	@ 0x21
 800e228:	6003      	str	r3, [r0, #0]
 800e22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e22e:	4806      	ldr	r0, [pc, #24]	@ (800e248 <asin+0x64>)
 800e230:	f000 b986 	b.w	800e540 <nan>
 800e234:	eeb0 0a48 	vmov.f32	s0, s16
 800e238:	eef0 0a68 	vmov.f32	s1, s17
 800e23c:	ecbd 8b02 	vpop	{d8}
 800e240:	bd38      	pop	{r3, r4, r5, pc}
 800e242:	bf00      	nop
 800e244:	3ff00000 	.word	0x3ff00000
 800e248:	08010aee 	.word	0x08010aee

0800e24c <atan2>:
 800e24c:	f000 bc68 	b.w	800eb20 <__ieee754_atan2>

0800e250 <pow>:
 800e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e252:	ed2d 8b02 	vpush	{d8}
 800e256:	eeb0 8a40 	vmov.f32	s16, s0
 800e25a:	eef0 8a60 	vmov.f32	s17, s1
 800e25e:	ec55 4b11 	vmov	r4, r5, d1
 800e262:	f000 fd25 	bl	800ecb0 <__ieee754_pow>
 800e266:	4622      	mov	r2, r4
 800e268:	462b      	mov	r3, r5
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	ec57 6b10 	vmov	r6, r7, d0
 800e272:	f7f2 fc5b 	bl	8000b2c <__aeabi_dcmpun>
 800e276:	2800      	cmp	r0, #0
 800e278:	d13b      	bne.n	800e2f2 <pow+0xa2>
 800e27a:	ec51 0b18 	vmov	r0, r1, d8
 800e27e:	2200      	movs	r2, #0
 800e280:	2300      	movs	r3, #0
 800e282:	f7f2 fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 800e286:	b1b8      	cbz	r0, 800e2b8 <pow+0x68>
 800e288:	2200      	movs	r2, #0
 800e28a:	2300      	movs	r3, #0
 800e28c:	4620      	mov	r0, r4
 800e28e:	4629      	mov	r1, r5
 800e290:	f7f2 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e294:	2800      	cmp	r0, #0
 800e296:	d146      	bne.n	800e326 <pow+0xd6>
 800e298:	ec45 4b10 	vmov	d0, r4, r5
 800e29c:	f000 f944 	bl	800e528 <finite>
 800e2a0:	b338      	cbz	r0, 800e2f2 <pow+0xa2>
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	f7f2 fc17 	bl	8000adc <__aeabi_dcmplt>
 800e2ae:	b300      	cbz	r0, 800e2f2 <pow+0xa2>
 800e2b0:	f7fd ff12 	bl	800c0d8 <__errno>
 800e2b4:	2322      	movs	r3, #34	@ 0x22
 800e2b6:	e01b      	b.n	800e2f0 <pow+0xa0>
 800e2b8:	ec47 6b10 	vmov	d0, r6, r7
 800e2bc:	f000 f934 	bl	800e528 <finite>
 800e2c0:	b9e0      	cbnz	r0, 800e2fc <pow+0xac>
 800e2c2:	eeb0 0a48 	vmov.f32	s0, s16
 800e2c6:	eef0 0a68 	vmov.f32	s1, s17
 800e2ca:	f000 f92d 	bl	800e528 <finite>
 800e2ce:	b1a8      	cbz	r0, 800e2fc <pow+0xac>
 800e2d0:	ec45 4b10 	vmov	d0, r4, r5
 800e2d4:	f000 f928 	bl	800e528 <finite>
 800e2d8:	b180      	cbz	r0, 800e2fc <pow+0xac>
 800e2da:	4632      	mov	r2, r6
 800e2dc:	463b      	mov	r3, r7
 800e2de:	4630      	mov	r0, r6
 800e2e0:	4639      	mov	r1, r7
 800e2e2:	f7f2 fc23 	bl	8000b2c <__aeabi_dcmpun>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d0e2      	beq.n	800e2b0 <pow+0x60>
 800e2ea:	f7fd fef5 	bl	800c0d8 <__errno>
 800e2ee:	2321      	movs	r3, #33	@ 0x21
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	ecbd 8b02 	vpop	{d8}
 800e2f6:	ec47 6b10 	vmov	d0, r6, r7
 800e2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	2300      	movs	r3, #0
 800e300:	4630      	mov	r0, r6
 800e302:	4639      	mov	r1, r7
 800e304:	f7f2 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e308:	2800      	cmp	r0, #0
 800e30a:	d0f2      	beq.n	800e2f2 <pow+0xa2>
 800e30c:	eeb0 0a48 	vmov.f32	s0, s16
 800e310:	eef0 0a68 	vmov.f32	s1, s17
 800e314:	f000 f908 	bl	800e528 <finite>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d0ea      	beq.n	800e2f2 <pow+0xa2>
 800e31c:	ec45 4b10 	vmov	d0, r4, r5
 800e320:	f000 f902 	bl	800e528 <finite>
 800e324:	e7c3      	b.n	800e2ae <pow+0x5e>
 800e326:	4f01      	ldr	r7, [pc, #4]	@ (800e32c <pow+0xdc>)
 800e328:	2600      	movs	r6, #0
 800e32a:	e7e2      	b.n	800e2f2 <pow+0xa2>
 800e32c:	3ff00000 	.word	0x3ff00000

0800e330 <sqrt>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	ed2d 8b02 	vpush	{d8}
 800e336:	ec55 4b10 	vmov	r4, r5, d0
 800e33a:	f000 f913 	bl	800e564 <__ieee754_sqrt>
 800e33e:	4622      	mov	r2, r4
 800e340:	462b      	mov	r3, r5
 800e342:	4620      	mov	r0, r4
 800e344:	4629      	mov	r1, r5
 800e346:	eeb0 8a40 	vmov.f32	s16, s0
 800e34a:	eef0 8a60 	vmov.f32	s17, s1
 800e34e:	f7f2 fbed 	bl	8000b2c <__aeabi_dcmpun>
 800e352:	b990      	cbnz	r0, 800e37a <sqrt+0x4a>
 800e354:	2200      	movs	r2, #0
 800e356:	2300      	movs	r3, #0
 800e358:	4620      	mov	r0, r4
 800e35a:	4629      	mov	r1, r5
 800e35c:	f7f2 fbbe 	bl	8000adc <__aeabi_dcmplt>
 800e360:	b158      	cbz	r0, 800e37a <sqrt+0x4a>
 800e362:	f7fd feb9 	bl	800c0d8 <__errno>
 800e366:	2321      	movs	r3, #33	@ 0x21
 800e368:	6003      	str	r3, [r0, #0]
 800e36a:	2200      	movs	r2, #0
 800e36c:	2300      	movs	r3, #0
 800e36e:	4610      	mov	r0, r2
 800e370:	4619      	mov	r1, r3
 800e372:	f7f2 fa6b 	bl	800084c <__aeabi_ddiv>
 800e376:	ec41 0b18 	vmov	d8, r0, r1
 800e37a:	eeb0 0a48 	vmov.f32	s0, s16
 800e37e:	eef0 0a68 	vmov.f32	s1, s17
 800e382:	ecbd 8b02 	vpop	{d8}
 800e386:	bd38      	pop	{r3, r4, r5, pc}

0800e388 <fabs>:
 800e388:	ec51 0b10 	vmov	r0, r1, d0
 800e38c:	4602      	mov	r2, r0
 800e38e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e392:	ec43 2b10 	vmov	d0, r2, r3
 800e396:	4770      	bx	lr

0800e398 <expf>:
 800e398:	b508      	push	{r3, lr}
 800e39a:	ed2d 8b02 	vpush	{d8}
 800e39e:	eef0 8a40 	vmov.f32	s17, s0
 800e3a2:	f001 fc01 	bl	800fba8 <__ieee754_expf>
 800e3a6:	eeb0 8a40 	vmov.f32	s16, s0
 800e3aa:	eeb0 0a68 	vmov.f32	s0, s17
 800e3ae:	f000 f8cf 	bl	800e550 <finitef>
 800e3b2:	b160      	cbz	r0, 800e3ce <expf+0x36>
 800e3b4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800e3f4 <expf+0x5c>
 800e3b8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c0:	dd0a      	ble.n	800e3d8 <expf+0x40>
 800e3c2:	f7fd fe89 	bl	800c0d8 <__errno>
 800e3c6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800e3f8 <expf+0x60>
 800e3ca:	2322      	movs	r3, #34	@ 0x22
 800e3cc:	6003      	str	r3, [r0, #0]
 800e3ce:	eeb0 0a48 	vmov.f32	s0, s16
 800e3d2:	ecbd 8b02 	vpop	{d8}
 800e3d6:	bd08      	pop	{r3, pc}
 800e3d8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e3fc <expf+0x64>
 800e3dc:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e4:	d5f3      	bpl.n	800e3ce <expf+0x36>
 800e3e6:	f7fd fe77 	bl	800c0d8 <__errno>
 800e3ea:	2322      	movs	r3, #34	@ 0x22
 800e3ec:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800e400 <expf+0x68>
 800e3f0:	6003      	str	r3, [r0, #0]
 800e3f2:	e7ec      	b.n	800e3ce <expf+0x36>
 800e3f4:	42b17217 	.word	0x42b17217
 800e3f8:	7f800000 	.word	0x7f800000
 800e3fc:	c2cff1b5 	.word	0xc2cff1b5
 800e400:	00000000 	.word	0x00000000

0800e404 <cosf>:
 800e404:	ee10 3a10 	vmov	r3, s0
 800e408:	b507      	push	{r0, r1, r2, lr}
 800e40a:	4a1e      	ldr	r2, [pc, #120]	@ (800e484 <cosf+0x80>)
 800e40c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e410:	4293      	cmp	r3, r2
 800e412:	d806      	bhi.n	800e422 <cosf+0x1e>
 800e414:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800e488 <cosf+0x84>
 800e418:	b003      	add	sp, #12
 800e41a:	f85d eb04 	ldr.w	lr, [sp], #4
 800e41e:	f001 bb23 	b.w	800fa68 <__kernel_cosf>
 800e422:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e426:	d304      	bcc.n	800e432 <cosf+0x2e>
 800e428:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e42c:	b003      	add	sp, #12
 800e42e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e432:	4668      	mov	r0, sp
 800e434:	f001 fc86 	bl	800fd44 <__ieee754_rem_pio2f>
 800e438:	f000 0003 	and.w	r0, r0, #3
 800e43c:	2801      	cmp	r0, #1
 800e43e:	d009      	beq.n	800e454 <cosf+0x50>
 800e440:	2802      	cmp	r0, #2
 800e442:	d010      	beq.n	800e466 <cosf+0x62>
 800e444:	b9b0      	cbnz	r0, 800e474 <cosf+0x70>
 800e446:	eddd 0a01 	vldr	s1, [sp, #4]
 800e44a:	ed9d 0a00 	vldr	s0, [sp]
 800e44e:	f001 fb0b 	bl	800fa68 <__kernel_cosf>
 800e452:	e7eb      	b.n	800e42c <cosf+0x28>
 800e454:	eddd 0a01 	vldr	s1, [sp, #4]
 800e458:	ed9d 0a00 	vldr	s0, [sp]
 800e45c:	f001 fb5c 	bl	800fb18 <__kernel_sinf>
 800e460:	eeb1 0a40 	vneg.f32	s0, s0
 800e464:	e7e2      	b.n	800e42c <cosf+0x28>
 800e466:	eddd 0a01 	vldr	s1, [sp, #4]
 800e46a:	ed9d 0a00 	vldr	s0, [sp]
 800e46e:	f001 fafb 	bl	800fa68 <__kernel_cosf>
 800e472:	e7f5      	b.n	800e460 <cosf+0x5c>
 800e474:	eddd 0a01 	vldr	s1, [sp, #4]
 800e478:	ed9d 0a00 	vldr	s0, [sp]
 800e47c:	2001      	movs	r0, #1
 800e47e:	f001 fb4b 	bl	800fb18 <__kernel_sinf>
 800e482:	e7d3      	b.n	800e42c <cosf+0x28>
 800e484:	3f490fd8 	.word	0x3f490fd8
 800e488:	00000000 	.word	0x00000000

0800e48c <fabsf>:
 800e48c:	ee10 3a10 	vmov	r3, s0
 800e490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e494:	ee00 3a10 	vmov	s0, r3
 800e498:	4770      	bx	lr
	...

0800e49c <sinf>:
 800e49c:	ee10 3a10 	vmov	r3, s0
 800e4a0:	b507      	push	{r0, r1, r2, lr}
 800e4a2:	4a1f      	ldr	r2, [pc, #124]	@ (800e520 <sinf+0x84>)
 800e4a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d807      	bhi.n	800e4bc <sinf+0x20>
 800e4ac:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e524 <sinf+0x88>
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	b003      	add	sp, #12
 800e4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4b8:	f001 bb2e 	b.w	800fb18 <__kernel_sinf>
 800e4bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e4c0:	d304      	bcc.n	800e4cc <sinf+0x30>
 800e4c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e4c6:	b003      	add	sp, #12
 800e4c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4cc:	4668      	mov	r0, sp
 800e4ce:	f001 fc39 	bl	800fd44 <__ieee754_rem_pio2f>
 800e4d2:	f000 0003 	and.w	r0, r0, #3
 800e4d6:	2801      	cmp	r0, #1
 800e4d8:	d00a      	beq.n	800e4f0 <sinf+0x54>
 800e4da:	2802      	cmp	r0, #2
 800e4dc:	d00f      	beq.n	800e4fe <sinf+0x62>
 800e4de:	b9c0      	cbnz	r0, 800e512 <sinf+0x76>
 800e4e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4e4:	ed9d 0a00 	vldr	s0, [sp]
 800e4e8:	2001      	movs	r0, #1
 800e4ea:	f001 fb15 	bl	800fb18 <__kernel_sinf>
 800e4ee:	e7ea      	b.n	800e4c6 <sinf+0x2a>
 800e4f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4f4:	ed9d 0a00 	vldr	s0, [sp]
 800e4f8:	f001 fab6 	bl	800fa68 <__kernel_cosf>
 800e4fc:	e7e3      	b.n	800e4c6 <sinf+0x2a>
 800e4fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800e502:	ed9d 0a00 	vldr	s0, [sp]
 800e506:	2001      	movs	r0, #1
 800e508:	f001 fb06 	bl	800fb18 <__kernel_sinf>
 800e50c:	eeb1 0a40 	vneg.f32	s0, s0
 800e510:	e7d9      	b.n	800e4c6 <sinf+0x2a>
 800e512:	eddd 0a01 	vldr	s1, [sp, #4]
 800e516:	ed9d 0a00 	vldr	s0, [sp]
 800e51a:	f001 faa5 	bl	800fa68 <__kernel_cosf>
 800e51e:	e7f5      	b.n	800e50c <sinf+0x70>
 800e520:	3f490fd8 	.word	0x3f490fd8
 800e524:	00000000 	.word	0x00000000

0800e528 <finite>:
 800e528:	b082      	sub	sp, #8
 800e52a:	ed8d 0b00 	vstr	d0, [sp]
 800e52e:	9801      	ldr	r0, [sp, #4]
 800e530:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800e534:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800e538:	0fc0      	lsrs	r0, r0, #31
 800e53a:	b002      	add	sp, #8
 800e53c:	4770      	bx	lr
	...

0800e540 <nan>:
 800e540:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e548 <nan+0x8>
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	00000000 	.word	0x00000000
 800e54c:	7ff80000 	.word	0x7ff80000

0800e550 <finitef>:
 800e550:	ee10 3a10 	vmov	r3, s0
 800e554:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e558:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e55c:	bfac      	ite	ge
 800e55e:	2000      	movge	r0, #0
 800e560:	2001      	movlt	r0, #1
 800e562:	4770      	bx	lr

0800e564 <__ieee754_sqrt>:
 800e564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e568:	4a68      	ldr	r2, [pc, #416]	@ (800e70c <__ieee754_sqrt+0x1a8>)
 800e56a:	ec55 4b10 	vmov	r4, r5, d0
 800e56e:	43aa      	bics	r2, r5
 800e570:	462b      	mov	r3, r5
 800e572:	4621      	mov	r1, r4
 800e574:	d110      	bne.n	800e598 <__ieee754_sqrt+0x34>
 800e576:	4622      	mov	r2, r4
 800e578:	4620      	mov	r0, r4
 800e57a:	4629      	mov	r1, r5
 800e57c:	f7f2 f83c 	bl	80005f8 <__aeabi_dmul>
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	4620      	mov	r0, r4
 800e586:	4629      	mov	r1, r5
 800e588:	f7f1 fe80 	bl	800028c <__adddf3>
 800e58c:	4604      	mov	r4, r0
 800e58e:	460d      	mov	r5, r1
 800e590:	ec45 4b10 	vmov	d0, r4, r5
 800e594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e598:	2d00      	cmp	r5, #0
 800e59a:	dc0e      	bgt.n	800e5ba <__ieee754_sqrt+0x56>
 800e59c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e5a0:	4322      	orrs	r2, r4
 800e5a2:	d0f5      	beq.n	800e590 <__ieee754_sqrt+0x2c>
 800e5a4:	b19d      	cbz	r5, 800e5ce <__ieee754_sqrt+0x6a>
 800e5a6:	4622      	mov	r2, r4
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	f7f1 fe6c 	bl	8000288 <__aeabi_dsub>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	f7f2 f94a 	bl	800084c <__aeabi_ddiv>
 800e5b8:	e7e8      	b.n	800e58c <__ieee754_sqrt+0x28>
 800e5ba:	152a      	asrs	r2, r5, #20
 800e5bc:	d115      	bne.n	800e5ea <__ieee754_sqrt+0x86>
 800e5be:	2000      	movs	r0, #0
 800e5c0:	e009      	b.n	800e5d6 <__ieee754_sqrt+0x72>
 800e5c2:	0acb      	lsrs	r3, r1, #11
 800e5c4:	3a15      	subs	r2, #21
 800e5c6:	0549      	lsls	r1, r1, #21
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d0fa      	beq.n	800e5c2 <__ieee754_sqrt+0x5e>
 800e5cc:	e7f7      	b.n	800e5be <__ieee754_sqrt+0x5a>
 800e5ce:	462a      	mov	r2, r5
 800e5d0:	e7fa      	b.n	800e5c8 <__ieee754_sqrt+0x64>
 800e5d2:	005b      	lsls	r3, r3, #1
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	02dc      	lsls	r4, r3, #11
 800e5d8:	d5fb      	bpl.n	800e5d2 <__ieee754_sqrt+0x6e>
 800e5da:	1e44      	subs	r4, r0, #1
 800e5dc:	1b12      	subs	r2, r2, r4
 800e5de:	f1c0 0420 	rsb	r4, r0, #32
 800e5e2:	fa21 f404 	lsr.w	r4, r1, r4
 800e5e6:	4323      	orrs	r3, r4
 800e5e8:	4081      	lsls	r1, r0
 800e5ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5ee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e5f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5f6:	07d2      	lsls	r2, r2, #31
 800e5f8:	bf5c      	itt	pl
 800e5fa:	005b      	lslpl	r3, r3, #1
 800e5fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e600:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e604:	bf58      	it	pl
 800e606:	0049      	lslpl	r1, r1, #1
 800e608:	2600      	movs	r6, #0
 800e60a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e60e:	106d      	asrs	r5, r5, #1
 800e610:	0049      	lsls	r1, r1, #1
 800e612:	2016      	movs	r0, #22
 800e614:	4632      	mov	r2, r6
 800e616:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e61a:	1917      	adds	r7, r2, r4
 800e61c:	429f      	cmp	r7, r3
 800e61e:	bfde      	ittt	le
 800e620:	193a      	addle	r2, r7, r4
 800e622:	1bdb      	suble	r3, r3, r7
 800e624:	1936      	addle	r6, r6, r4
 800e626:	0fcf      	lsrs	r7, r1, #31
 800e628:	3801      	subs	r0, #1
 800e62a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e62e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e632:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e636:	d1f0      	bne.n	800e61a <__ieee754_sqrt+0xb6>
 800e638:	4604      	mov	r4, r0
 800e63a:	2720      	movs	r7, #32
 800e63c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e640:	429a      	cmp	r2, r3
 800e642:	eb00 0e0c 	add.w	lr, r0, ip
 800e646:	db02      	blt.n	800e64e <__ieee754_sqrt+0xea>
 800e648:	d113      	bne.n	800e672 <__ieee754_sqrt+0x10e>
 800e64a:	458e      	cmp	lr, r1
 800e64c:	d811      	bhi.n	800e672 <__ieee754_sqrt+0x10e>
 800e64e:	f1be 0f00 	cmp.w	lr, #0
 800e652:	eb0e 000c 	add.w	r0, lr, ip
 800e656:	da42      	bge.n	800e6de <__ieee754_sqrt+0x17a>
 800e658:	2800      	cmp	r0, #0
 800e65a:	db40      	blt.n	800e6de <__ieee754_sqrt+0x17a>
 800e65c:	f102 0801 	add.w	r8, r2, #1
 800e660:	1a9b      	subs	r3, r3, r2
 800e662:	458e      	cmp	lr, r1
 800e664:	bf88      	it	hi
 800e666:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e66a:	eba1 010e 	sub.w	r1, r1, lr
 800e66e:	4464      	add	r4, ip
 800e670:	4642      	mov	r2, r8
 800e672:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e676:	3f01      	subs	r7, #1
 800e678:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e67c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e680:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e684:	d1dc      	bne.n	800e640 <__ieee754_sqrt+0xdc>
 800e686:	4319      	orrs	r1, r3
 800e688:	d01b      	beq.n	800e6c2 <__ieee754_sqrt+0x15e>
 800e68a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e710 <__ieee754_sqrt+0x1ac>
 800e68e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e714 <__ieee754_sqrt+0x1b0>
 800e692:	e9da 0100 	ldrd	r0, r1, [sl]
 800e696:	e9db 2300 	ldrd	r2, r3, [fp]
 800e69a:	f7f1 fdf5 	bl	8000288 <__aeabi_dsub>
 800e69e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	f7f2 fa21 	bl	8000af0 <__aeabi_dcmple>
 800e6ae:	b140      	cbz	r0, 800e6c2 <__ieee754_sqrt+0x15e>
 800e6b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e6b4:	e9da 0100 	ldrd	r0, r1, [sl]
 800e6b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800e6bc:	d111      	bne.n	800e6e2 <__ieee754_sqrt+0x17e>
 800e6be:	3601      	adds	r6, #1
 800e6c0:	463c      	mov	r4, r7
 800e6c2:	1072      	asrs	r2, r6, #1
 800e6c4:	0863      	lsrs	r3, r4, #1
 800e6c6:	07f1      	lsls	r1, r6, #31
 800e6c8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e6cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e6d0:	bf48      	it	mi
 800e6d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e6d6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e6da:	4618      	mov	r0, r3
 800e6dc:	e756      	b.n	800e58c <__ieee754_sqrt+0x28>
 800e6de:	4690      	mov	r8, r2
 800e6e0:	e7be      	b.n	800e660 <__ieee754_sqrt+0xfc>
 800e6e2:	f7f1 fdd3 	bl	800028c <__adddf3>
 800e6e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	4649      	mov	r1, r9
 800e6f2:	f7f2 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800e6f6:	b120      	cbz	r0, 800e702 <__ieee754_sqrt+0x19e>
 800e6f8:	1ca0      	adds	r0, r4, #2
 800e6fa:	bf08      	it	eq
 800e6fc:	3601      	addeq	r6, #1
 800e6fe:	3402      	adds	r4, #2
 800e700:	e7df      	b.n	800e6c2 <__ieee754_sqrt+0x15e>
 800e702:	1c63      	adds	r3, r4, #1
 800e704:	f023 0401 	bic.w	r4, r3, #1
 800e708:	e7db      	b.n	800e6c2 <__ieee754_sqrt+0x15e>
 800e70a:	bf00      	nop
 800e70c:	7ff00000 	.word	0x7ff00000
 800e710:	200002f0 	.word	0x200002f0
 800e714:	200002e8 	.word	0x200002e8

0800e718 <__ieee754_asin>:
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	ec55 4b10 	vmov	r4, r5, d0
 800e720:	4bc7      	ldr	r3, [pc, #796]	@ (800ea40 <__ieee754_asin+0x328>)
 800e722:	b087      	sub	sp, #28
 800e724:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e728:	429e      	cmp	r6, r3
 800e72a:	9501      	str	r5, [sp, #4]
 800e72c:	d92d      	bls.n	800e78a <__ieee754_asin+0x72>
 800e72e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800e732:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800e736:	4326      	orrs	r6, r4
 800e738:	d116      	bne.n	800e768 <__ieee754_asin+0x50>
 800e73a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800e9d8 <__ieee754_asin+0x2c0>)
 800e73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e740:	4620      	mov	r0, r4
 800e742:	4629      	mov	r1, r5
 800e744:	f7f1 ff58 	bl	80005f8 <__aeabi_dmul>
 800e748:	a3a5      	add	r3, pc, #660	@ (adr r3, 800e9e0 <__ieee754_asin+0x2c8>)
 800e74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74e:	4606      	mov	r6, r0
 800e750:	460f      	mov	r7, r1
 800e752:	4620      	mov	r0, r4
 800e754:	4629      	mov	r1, r5
 800e756:	f7f1 ff4f 	bl	80005f8 <__aeabi_dmul>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f1 fd93 	bl	800028c <__adddf3>
 800e766:	e009      	b.n	800e77c <__ieee754_asin+0x64>
 800e768:	4622      	mov	r2, r4
 800e76a:	462b      	mov	r3, r5
 800e76c:	4620      	mov	r0, r4
 800e76e:	4629      	mov	r1, r5
 800e770:	f7f1 fd8a 	bl	8000288 <__aeabi_dsub>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	f7f2 f868 	bl	800084c <__aeabi_ddiv>
 800e77c:	4604      	mov	r4, r0
 800e77e:	460d      	mov	r5, r1
 800e780:	ec45 4b10 	vmov	d0, r4, r5
 800e784:	b007      	add	sp, #28
 800e786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78a:	4bae      	ldr	r3, [pc, #696]	@ (800ea44 <__ieee754_asin+0x32c>)
 800e78c:	429e      	cmp	r6, r3
 800e78e:	d810      	bhi.n	800e7b2 <__ieee754_asin+0x9a>
 800e790:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800e794:	f080 80ad 	bcs.w	800e8f2 <__ieee754_asin+0x1da>
 800e798:	a393      	add	r3, pc, #588	@ (adr r3, 800e9e8 <__ieee754_asin+0x2d0>)
 800e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79e:	4620      	mov	r0, r4
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	f7f1 fd73 	bl	800028c <__adddf3>
 800e7a6:	4ba8      	ldr	r3, [pc, #672]	@ (800ea48 <__ieee754_asin+0x330>)
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f7f2 f9b5 	bl	8000b18 <__aeabi_dcmpgt>
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d1e6      	bne.n	800e780 <__ieee754_asin+0x68>
 800e7b2:	ec45 4b10 	vmov	d0, r4, r5
 800e7b6:	f7ff fde7 	bl	800e388 <fabs>
 800e7ba:	49a3      	ldr	r1, [pc, #652]	@ (800ea48 <__ieee754_asin+0x330>)
 800e7bc:	ec53 2b10 	vmov	r2, r3, d0
 800e7c0:	2000      	movs	r0, #0
 800e7c2:	f7f1 fd61 	bl	8000288 <__aeabi_dsub>
 800e7c6:	4ba1      	ldr	r3, [pc, #644]	@ (800ea4c <__ieee754_asin+0x334>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f7f1 ff15 	bl	80005f8 <__aeabi_dmul>
 800e7ce:	a388      	add	r3, pc, #544	@ (adr r3, 800e9f0 <__ieee754_asin+0x2d8>)
 800e7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	460d      	mov	r5, r1
 800e7d8:	f7f1 ff0e 	bl	80005f8 <__aeabi_dmul>
 800e7dc:	a386      	add	r3, pc, #536	@ (adr r3, 800e9f8 <__ieee754_asin+0x2e0>)
 800e7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e2:	f7f1 fd53 	bl	800028c <__adddf3>
 800e7e6:	4622      	mov	r2, r4
 800e7e8:	462b      	mov	r3, r5
 800e7ea:	f7f1 ff05 	bl	80005f8 <__aeabi_dmul>
 800e7ee:	a384      	add	r3, pc, #528	@ (adr r3, 800ea00 <__ieee754_asin+0x2e8>)
 800e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f4:	f7f1 fd48 	bl	8000288 <__aeabi_dsub>
 800e7f8:	4622      	mov	r2, r4
 800e7fa:	462b      	mov	r3, r5
 800e7fc:	f7f1 fefc 	bl	80005f8 <__aeabi_dmul>
 800e800:	a381      	add	r3, pc, #516	@ (adr r3, 800ea08 <__ieee754_asin+0x2f0>)
 800e802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e806:	f7f1 fd41 	bl	800028c <__adddf3>
 800e80a:	4622      	mov	r2, r4
 800e80c:	462b      	mov	r3, r5
 800e80e:	f7f1 fef3 	bl	80005f8 <__aeabi_dmul>
 800e812:	a37f      	add	r3, pc, #508	@ (adr r3, 800ea10 <__ieee754_asin+0x2f8>)
 800e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e818:	f7f1 fd36 	bl	8000288 <__aeabi_dsub>
 800e81c:	4622      	mov	r2, r4
 800e81e:	462b      	mov	r3, r5
 800e820:	f7f1 feea 	bl	80005f8 <__aeabi_dmul>
 800e824:	a37c      	add	r3, pc, #496	@ (adr r3, 800ea18 <__ieee754_asin+0x300>)
 800e826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82a:	f7f1 fd2f 	bl	800028c <__adddf3>
 800e82e:	4622      	mov	r2, r4
 800e830:	462b      	mov	r3, r5
 800e832:	f7f1 fee1 	bl	80005f8 <__aeabi_dmul>
 800e836:	a37a      	add	r3, pc, #488	@ (adr r3, 800ea20 <__ieee754_asin+0x308>)
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e840:	4620      	mov	r0, r4
 800e842:	4629      	mov	r1, r5
 800e844:	f7f1 fed8 	bl	80005f8 <__aeabi_dmul>
 800e848:	a377      	add	r3, pc, #476	@ (adr r3, 800ea28 <__ieee754_asin+0x310>)
 800e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84e:	f7f1 fd1b 	bl	8000288 <__aeabi_dsub>
 800e852:	4622      	mov	r2, r4
 800e854:	462b      	mov	r3, r5
 800e856:	f7f1 fecf 	bl	80005f8 <__aeabi_dmul>
 800e85a:	a375      	add	r3, pc, #468	@ (adr r3, 800ea30 <__ieee754_asin+0x318>)
 800e85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e860:	f7f1 fd14 	bl	800028c <__adddf3>
 800e864:	4622      	mov	r2, r4
 800e866:	462b      	mov	r3, r5
 800e868:	f7f1 fec6 	bl	80005f8 <__aeabi_dmul>
 800e86c:	a372      	add	r3, pc, #456	@ (adr r3, 800ea38 <__ieee754_asin+0x320>)
 800e86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e872:	f7f1 fd09 	bl	8000288 <__aeabi_dsub>
 800e876:	4622      	mov	r2, r4
 800e878:	462b      	mov	r3, r5
 800e87a:	f7f1 febd 	bl	80005f8 <__aeabi_dmul>
 800e87e:	4b72      	ldr	r3, [pc, #456]	@ (800ea48 <__ieee754_asin+0x330>)
 800e880:	2200      	movs	r2, #0
 800e882:	f7f1 fd03 	bl	800028c <__adddf3>
 800e886:	ec45 4b10 	vmov	d0, r4, r5
 800e88a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e88e:	f7ff fe69 	bl	800e564 <__ieee754_sqrt>
 800e892:	4b6f      	ldr	r3, [pc, #444]	@ (800ea50 <__ieee754_asin+0x338>)
 800e894:	429e      	cmp	r6, r3
 800e896:	ec5b ab10 	vmov	sl, fp, d0
 800e89a:	f240 80db 	bls.w	800ea54 <__ieee754_asin+0x33c>
 800e89e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8a6:	f7f1 ffd1 	bl	800084c <__aeabi_ddiv>
 800e8aa:	4652      	mov	r2, sl
 800e8ac:	465b      	mov	r3, fp
 800e8ae:	f7f1 fea3 	bl	80005f8 <__aeabi_dmul>
 800e8b2:	4652      	mov	r2, sl
 800e8b4:	465b      	mov	r3, fp
 800e8b6:	f7f1 fce9 	bl	800028c <__adddf3>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	460b      	mov	r3, r1
 800e8be:	f7f1 fce5 	bl	800028c <__adddf3>
 800e8c2:	a347      	add	r3, pc, #284	@ (adr r3, 800e9e0 <__ieee754_asin+0x2c8>)
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	f7f1 fcde 	bl	8000288 <__aeabi_dsub>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	a141      	add	r1, pc, #260	@ (adr r1, 800e9d8 <__ieee754_asin+0x2c0>)
 800e8d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8d6:	f7f1 fcd7 	bl	8000288 <__aeabi_dsub>
 800e8da:	9b01      	ldr	r3, [sp, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bfdc      	itt	le
 800e8e0:	4602      	movle	r2, r0
 800e8e2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	460d      	mov	r5, r1
 800e8ea:	bfdc      	itt	le
 800e8ec:	4614      	movle	r4, r2
 800e8ee:	461d      	movle	r5, r3
 800e8f0:	e746      	b.n	800e780 <__ieee754_asin+0x68>
 800e8f2:	4622      	mov	r2, r4
 800e8f4:	462b      	mov	r3, r5
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	f7f1 fe7d 	bl	80005f8 <__aeabi_dmul>
 800e8fe:	a33c      	add	r3, pc, #240	@ (adr r3, 800e9f0 <__ieee754_asin+0x2d8>)
 800e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e904:	4606      	mov	r6, r0
 800e906:	460f      	mov	r7, r1
 800e908:	f7f1 fe76 	bl	80005f8 <__aeabi_dmul>
 800e90c:	a33a      	add	r3, pc, #232	@ (adr r3, 800e9f8 <__ieee754_asin+0x2e0>)
 800e90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e912:	f7f1 fcbb 	bl	800028c <__adddf3>
 800e916:	4632      	mov	r2, r6
 800e918:	463b      	mov	r3, r7
 800e91a:	f7f1 fe6d 	bl	80005f8 <__aeabi_dmul>
 800e91e:	a338      	add	r3, pc, #224	@ (adr r3, 800ea00 <__ieee754_asin+0x2e8>)
 800e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e924:	f7f1 fcb0 	bl	8000288 <__aeabi_dsub>
 800e928:	4632      	mov	r2, r6
 800e92a:	463b      	mov	r3, r7
 800e92c:	f7f1 fe64 	bl	80005f8 <__aeabi_dmul>
 800e930:	a335      	add	r3, pc, #212	@ (adr r3, 800ea08 <__ieee754_asin+0x2f0>)
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	f7f1 fca9 	bl	800028c <__adddf3>
 800e93a:	4632      	mov	r2, r6
 800e93c:	463b      	mov	r3, r7
 800e93e:	f7f1 fe5b 	bl	80005f8 <__aeabi_dmul>
 800e942:	a333      	add	r3, pc, #204	@ (adr r3, 800ea10 <__ieee754_asin+0x2f8>)
 800e944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e948:	f7f1 fc9e 	bl	8000288 <__aeabi_dsub>
 800e94c:	4632      	mov	r2, r6
 800e94e:	463b      	mov	r3, r7
 800e950:	f7f1 fe52 	bl	80005f8 <__aeabi_dmul>
 800e954:	a330      	add	r3, pc, #192	@ (adr r3, 800ea18 <__ieee754_asin+0x300>)
 800e956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95a:	f7f1 fc97 	bl	800028c <__adddf3>
 800e95e:	4632      	mov	r2, r6
 800e960:	463b      	mov	r3, r7
 800e962:	f7f1 fe49 	bl	80005f8 <__aeabi_dmul>
 800e966:	a32e      	add	r3, pc, #184	@ (adr r3, 800ea20 <__ieee754_asin+0x308>)
 800e968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96c:	4680      	mov	r8, r0
 800e96e:	4689      	mov	r9, r1
 800e970:	4630      	mov	r0, r6
 800e972:	4639      	mov	r1, r7
 800e974:	f7f1 fe40 	bl	80005f8 <__aeabi_dmul>
 800e978:	a32b      	add	r3, pc, #172	@ (adr r3, 800ea28 <__ieee754_asin+0x310>)
 800e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97e:	f7f1 fc83 	bl	8000288 <__aeabi_dsub>
 800e982:	4632      	mov	r2, r6
 800e984:	463b      	mov	r3, r7
 800e986:	f7f1 fe37 	bl	80005f8 <__aeabi_dmul>
 800e98a:	a329      	add	r3, pc, #164	@ (adr r3, 800ea30 <__ieee754_asin+0x318>)
 800e98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e990:	f7f1 fc7c 	bl	800028c <__adddf3>
 800e994:	4632      	mov	r2, r6
 800e996:	463b      	mov	r3, r7
 800e998:	f7f1 fe2e 	bl	80005f8 <__aeabi_dmul>
 800e99c:	a326      	add	r3, pc, #152	@ (adr r3, 800ea38 <__ieee754_asin+0x320>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	f7f1 fc71 	bl	8000288 <__aeabi_dsub>
 800e9a6:	4632      	mov	r2, r6
 800e9a8:	463b      	mov	r3, r7
 800e9aa:	f7f1 fe25 	bl	80005f8 <__aeabi_dmul>
 800e9ae:	4b26      	ldr	r3, [pc, #152]	@ (800ea48 <__ieee754_asin+0x330>)
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f7f1 fc6b 	bl	800028c <__adddf3>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	4640      	mov	r0, r8
 800e9bc:	4649      	mov	r1, r9
 800e9be:	f7f1 ff45 	bl	800084c <__aeabi_ddiv>
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	f7f1 fe17 	bl	80005f8 <__aeabi_dmul>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	4629      	mov	r1, r5
 800e9d2:	e6c6      	b.n	800e762 <__ieee754_asin+0x4a>
 800e9d4:	f3af 8000 	nop.w
 800e9d8:	54442d18 	.word	0x54442d18
 800e9dc:	3ff921fb 	.word	0x3ff921fb
 800e9e0:	33145c07 	.word	0x33145c07
 800e9e4:	3c91a626 	.word	0x3c91a626
 800e9e8:	8800759c 	.word	0x8800759c
 800e9ec:	7e37e43c 	.word	0x7e37e43c
 800e9f0:	0dfdf709 	.word	0x0dfdf709
 800e9f4:	3f023de1 	.word	0x3f023de1
 800e9f8:	7501b288 	.word	0x7501b288
 800e9fc:	3f49efe0 	.word	0x3f49efe0
 800ea00:	b5688f3b 	.word	0xb5688f3b
 800ea04:	3fa48228 	.word	0x3fa48228
 800ea08:	0e884455 	.word	0x0e884455
 800ea0c:	3fc9c155 	.word	0x3fc9c155
 800ea10:	03eb6f7d 	.word	0x03eb6f7d
 800ea14:	3fd4d612 	.word	0x3fd4d612
 800ea18:	55555555 	.word	0x55555555
 800ea1c:	3fc55555 	.word	0x3fc55555
 800ea20:	b12e9282 	.word	0xb12e9282
 800ea24:	3fb3b8c5 	.word	0x3fb3b8c5
 800ea28:	1b8d0159 	.word	0x1b8d0159
 800ea2c:	3fe6066c 	.word	0x3fe6066c
 800ea30:	9c598ac8 	.word	0x9c598ac8
 800ea34:	40002ae5 	.word	0x40002ae5
 800ea38:	1c8a2d4b 	.word	0x1c8a2d4b
 800ea3c:	40033a27 	.word	0x40033a27
 800ea40:	3fefffff 	.word	0x3fefffff
 800ea44:	3fdfffff 	.word	0x3fdfffff
 800ea48:	3ff00000 	.word	0x3ff00000
 800ea4c:	3fe00000 	.word	0x3fe00000
 800ea50:	3fef3332 	.word	0x3fef3332
 800ea54:	4652      	mov	r2, sl
 800ea56:	465b      	mov	r3, fp
 800ea58:	4650      	mov	r0, sl
 800ea5a:	4659      	mov	r1, fp
 800ea5c:	f7f1 fc16 	bl	800028c <__adddf3>
 800ea60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea64:	4606      	mov	r6, r0
 800ea66:	460f      	mov	r7, r1
 800ea68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea6c:	f7f1 feee 	bl	800084c <__aeabi_ddiv>
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4630      	mov	r0, r6
 800ea76:	4639      	mov	r1, r7
 800ea78:	f7f1 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ea7c:	f04f 0800 	mov.w	r8, #0
 800ea80:	4606      	mov	r6, r0
 800ea82:	460f      	mov	r7, r1
 800ea84:	4642      	mov	r2, r8
 800ea86:	465b      	mov	r3, fp
 800ea88:	4640      	mov	r0, r8
 800ea8a:	4659      	mov	r1, fp
 800ea8c:	f7f1 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ea90:	4602      	mov	r2, r0
 800ea92:	460b      	mov	r3, r1
 800ea94:	4620      	mov	r0, r4
 800ea96:	4629      	mov	r1, r5
 800ea98:	f7f1 fbf6 	bl	8000288 <__aeabi_dsub>
 800ea9c:	4642      	mov	r2, r8
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	460d      	mov	r5, r1
 800eaa2:	465b      	mov	r3, fp
 800eaa4:	4650      	mov	r0, sl
 800eaa6:	4659      	mov	r1, fp
 800eaa8:	f7f1 fbf0 	bl	800028c <__adddf3>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	4620      	mov	r0, r4
 800eab2:	4629      	mov	r1, r5
 800eab4:	f7f1 feca 	bl	800084c <__aeabi_ddiv>
 800eab8:	4602      	mov	r2, r0
 800eaba:	460b      	mov	r3, r1
 800eabc:	f7f1 fbe6 	bl	800028c <__adddf3>
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	a112      	add	r1, pc, #72	@ (adr r1, 800eb10 <__ieee754_asin+0x3f8>)
 800eac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaca:	f7f1 fbdd 	bl	8000288 <__aeabi_dsub>
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	4630      	mov	r0, r6
 800ead4:	4639      	mov	r1, r7
 800ead6:	f7f1 fbd7 	bl	8000288 <__aeabi_dsub>
 800eada:	4642      	mov	r2, r8
 800eadc:	4604      	mov	r4, r0
 800eade:	460d      	mov	r5, r1
 800eae0:	465b      	mov	r3, fp
 800eae2:	4640      	mov	r0, r8
 800eae4:	4659      	mov	r1, fp
 800eae6:	f7f1 fbd1 	bl	800028c <__adddf3>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	a10a      	add	r1, pc, #40	@ (adr r1, 800eb18 <__ieee754_asin+0x400>)
 800eaf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaf4:	f7f1 fbc8 	bl	8000288 <__aeabi_dsub>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	4620      	mov	r0, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	f7f1 fbc2 	bl	8000288 <__aeabi_dsub>
 800eb04:	4602      	mov	r2, r0
 800eb06:	460b      	mov	r3, r1
 800eb08:	a103      	add	r1, pc, #12	@ (adr r1, 800eb18 <__ieee754_asin+0x400>)
 800eb0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb0e:	e6e2      	b.n	800e8d6 <__ieee754_asin+0x1be>
 800eb10:	33145c07 	.word	0x33145c07
 800eb14:	3c91a626 	.word	0x3c91a626
 800eb18:	54442d18 	.word	0x54442d18
 800eb1c:	3fe921fb 	.word	0x3fe921fb

0800eb20 <__ieee754_atan2>:
 800eb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb24:	ec57 6b11 	vmov	r6, r7, d1
 800eb28:	4273      	negs	r3, r6
 800eb2a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800eca8 <__ieee754_atan2+0x188>
 800eb2e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800eb32:	4333      	orrs	r3, r6
 800eb34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800eb38:	4543      	cmp	r3, r8
 800eb3a:	ec51 0b10 	vmov	r0, r1, d0
 800eb3e:	4635      	mov	r5, r6
 800eb40:	d809      	bhi.n	800eb56 <__ieee754_atan2+0x36>
 800eb42:	4244      	negs	r4, r0
 800eb44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eb48:	4304      	orrs	r4, r0
 800eb4a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800eb4e:	4544      	cmp	r4, r8
 800eb50:	468e      	mov	lr, r1
 800eb52:	4681      	mov	r9, r0
 800eb54:	d907      	bls.n	800eb66 <__ieee754_atan2+0x46>
 800eb56:	4632      	mov	r2, r6
 800eb58:	463b      	mov	r3, r7
 800eb5a:	f7f1 fb97 	bl	800028c <__adddf3>
 800eb5e:	ec41 0b10 	vmov	d0, r0, r1
 800eb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb66:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800eb6a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800eb6e:	4334      	orrs	r4, r6
 800eb70:	d103      	bne.n	800eb7a <__ieee754_atan2+0x5a>
 800eb72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb76:	f000 bddf 	b.w	800f738 <atan>
 800eb7a:	17bc      	asrs	r4, r7, #30
 800eb7c:	f004 0402 	and.w	r4, r4, #2
 800eb80:	ea53 0909 	orrs.w	r9, r3, r9
 800eb84:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800eb88:	d107      	bne.n	800eb9a <__ieee754_atan2+0x7a>
 800eb8a:	2c02      	cmp	r4, #2
 800eb8c:	d05f      	beq.n	800ec4e <__ieee754_atan2+0x12e>
 800eb8e:	2c03      	cmp	r4, #3
 800eb90:	d1e5      	bne.n	800eb5e <__ieee754_atan2+0x3e>
 800eb92:	a141      	add	r1, pc, #260	@ (adr r1, 800ec98 <__ieee754_atan2+0x178>)
 800eb94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb98:	e7e1      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800eb9a:	4315      	orrs	r5, r2
 800eb9c:	d106      	bne.n	800ebac <__ieee754_atan2+0x8c>
 800eb9e:	f1be 0f00 	cmp.w	lr, #0
 800eba2:	da5f      	bge.n	800ec64 <__ieee754_atan2+0x144>
 800eba4:	a13e      	add	r1, pc, #248	@ (adr r1, 800eca0 <__ieee754_atan2+0x180>)
 800eba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebaa:	e7d8      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800ebac:	4542      	cmp	r2, r8
 800ebae:	d10f      	bne.n	800ebd0 <__ieee754_atan2+0xb0>
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	f104 34ff 	add.w	r4, r4, #4294967295
 800ebb6:	d107      	bne.n	800ebc8 <__ieee754_atan2+0xa8>
 800ebb8:	2c02      	cmp	r4, #2
 800ebba:	d84c      	bhi.n	800ec56 <__ieee754_atan2+0x136>
 800ebbc:	4b34      	ldr	r3, [pc, #208]	@ (800ec90 <__ieee754_atan2+0x170>)
 800ebbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ebc6:	e7ca      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800ebc8:	2c02      	cmp	r4, #2
 800ebca:	d848      	bhi.n	800ec5e <__ieee754_atan2+0x13e>
 800ebcc:	4b31      	ldr	r3, [pc, #196]	@ (800ec94 <__ieee754_atan2+0x174>)
 800ebce:	e7f6      	b.n	800ebbe <__ieee754_atan2+0x9e>
 800ebd0:	4543      	cmp	r3, r8
 800ebd2:	d0e4      	beq.n	800eb9e <__ieee754_atan2+0x7e>
 800ebd4:	1a9b      	subs	r3, r3, r2
 800ebd6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ebda:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ebde:	da1e      	bge.n	800ec1e <__ieee754_atan2+0xfe>
 800ebe0:	2f00      	cmp	r7, #0
 800ebe2:	da01      	bge.n	800ebe8 <__ieee754_atan2+0xc8>
 800ebe4:	323c      	adds	r2, #60	@ 0x3c
 800ebe6:	db1e      	blt.n	800ec26 <__ieee754_atan2+0x106>
 800ebe8:	4632      	mov	r2, r6
 800ebea:	463b      	mov	r3, r7
 800ebec:	f7f1 fe2e 	bl	800084c <__aeabi_ddiv>
 800ebf0:	ec41 0b10 	vmov	d0, r0, r1
 800ebf4:	f7ff fbc8 	bl	800e388 <fabs>
 800ebf8:	f000 fd9e 	bl	800f738 <atan>
 800ebfc:	ec51 0b10 	vmov	r0, r1, d0
 800ec00:	2c01      	cmp	r4, #1
 800ec02:	d013      	beq.n	800ec2c <__ieee754_atan2+0x10c>
 800ec04:	2c02      	cmp	r4, #2
 800ec06:	d015      	beq.n	800ec34 <__ieee754_atan2+0x114>
 800ec08:	2c00      	cmp	r4, #0
 800ec0a:	d0a8      	beq.n	800eb5e <__ieee754_atan2+0x3e>
 800ec0c:	a318      	add	r3, pc, #96	@ (adr r3, 800ec70 <__ieee754_atan2+0x150>)
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	f7f1 fb39 	bl	8000288 <__aeabi_dsub>
 800ec16:	a318      	add	r3, pc, #96	@ (adr r3, 800ec78 <__ieee754_atan2+0x158>)
 800ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1c:	e014      	b.n	800ec48 <__ieee754_atan2+0x128>
 800ec1e:	a118      	add	r1, pc, #96	@ (adr r1, 800ec80 <__ieee754_atan2+0x160>)
 800ec20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec24:	e7ec      	b.n	800ec00 <__ieee754_atan2+0xe0>
 800ec26:	2000      	movs	r0, #0
 800ec28:	2100      	movs	r1, #0
 800ec2a:	e7e9      	b.n	800ec00 <__ieee754_atan2+0xe0>
 800ec2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec30:	4619      	mov	r1, r3
 800ec32:	e794      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800ec34:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec70 <__ieee754_atan2+0x150>)
 800ec36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3a:	f7f1 fb25 	bl	8000288 <__aeabi_dsub>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	a10d      	add	r1, pc, #52	@ (adr r1, 800ec78 <__ieee754_atan2+0x158>)
 800ec44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec48:	f7f1 fb1e 	bl	8000288 <__aeabi_dsub>
 800ec4c:	e787      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800ec4e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ec78 <__ieee754_atan2+0x158>)
 800ec50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec54:	e783      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800ec56:	a10c      	add	r1, pc, #48	@ (adr r1, 800ec88 <__ieee754_atan2+0x168>)
 800ec58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec5c:	e77f      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800ec5e:	2000      	movs	r0, #0
 800ec60:	2100      	movs	r1, #0
 800ec62:	e77c      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800ec64:	a106      	add	r1, pc, #24	@ (adr r1, 800ec80 <__ieee754_atan2+0x160>)
 800ec66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec6a:	e778      	b.n	800eb5e <__ieee754_atan2+0x3e>
 800ec6c:	f3af 8000 	nop.w
 800ec70:	33145c07 	.word	0x33145c07
 800ec74:	3ca1a626 	.word	0x3ca1a626
 800ec78:	54442d18 	.word	0x54442d18
 800ec7c:	400921fb 	.word	0x400921fb
 800ec80:	54442d18 	.word	0x54442d18
 800ec84:	3ff921fb 	.word	0x3ff921fb
 800ec88:	54442d18 	.word	0x54442d18
 800ec8c:	3fe921fb 	.word	0x3fe921fb
 800ec90:	08010c08 	.word	0x08010c08
 800ec94:	08010bf0 	.word	0x08010bf0
 800ec98:	54442d18 	.word	0x54442d18
 800ec9c:	c00921fb 	.word	0xc00921fb
 800eca0:	54442d18 	.word	0x54442d18
 800eca4:	bff921fb 	.word	0xbff921fb
 800eca8:	7ff00000 	.word	0x7ff00000
 800ecac:	00000000 	.word	0x00000000

0800ecb0 <__ieee754_pow>:
 800ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb4:	b091      	sub	sp, #68	@ 0x44
 800ecb6:	ed8d 1b00 	vstr	d1, [sp]
 800ecba:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ecbe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ecc2:	ea5a 0001 	orrs.w	r0, sl, r1
 800ecc6:	ec57 6b10 	vmov	r6, r7, d0
 800ecca:	d113      	bne.n	800ecf4 <__ieee754_pow+0x44>
 800eccc:	19b3      	adds	r3, r6, r6
 800ecce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ecd2:	4152      	adcs	r2, r2
 800ecd4:	4298      	cmp	r0, r3
 800ecd6:	4b98      	ldr	r3, [pc, #608]	@ (800ef38 <__ieee754_pow+0x288>)
 800ecd8:	4193      	sbcs	r3, r2
 800ecda:	f080 84ea 	bcs.w	800f6b2 <__ieee754_pow+0xa02>
 800ecde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ece2:	4630      	mov	r0, r6
 800ece4:	4639      	mov	r1, r7
 800ece6:	f7f1 fad1 	bl	800028c <__adddf3>
 800ecea:	ec41 0b10 	vmov	d0, r0, r1
 800ecee:	b011      	add	sp, #68	@ 0x44
 800ecf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf4:	4a91      	ldr	r2, [pc, #580]	@ (800ef3c <__ieee754_pow+0x28c>)
 800ecf6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ecfa:	4590      	cmp	r8, r2
 800ecfc:	463d      	mov	r5, r7
 800ecfe:	4633      	mov	r3, r6
 800ed00:	d806      	bhi.n	800ed10 <__ieee754_pow+0x60>
 800ed02:	d101      	bne.n	800ed08 <__ieee754_pow+0x58>
 800ed04:	2e00      	cmp	r6, #0
 800ed06:	d1ea      	bne.n	800ecde <__ieee754_pow+0x2e>
 800ed08:	4592      	cmp	sl, r2
 800ed0a:	d801      	bhi.n	800ed10 <__ieee754_pow+0x60>
 800ed0c:	d10e      	bne.n	800ed2c <__ieee754_pow+0x7c>
 800ed0e:	b169      	cbz	r1, 800ed2c <__ieee754_pow+0x7c>
 800ed10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ed14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ed18:	431d      	orrs	r5, r3
 800ed1a:	d1e0      	bne.n	800ecde <__ieee754_pow+0x2e>
 800ed1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ed20:	18db      	adds	r3, r3, r3
 800ed22:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ed26:	4152      	adcs	r2, r2
 800ed28:	429d      	cmp	r5, r3
 800ed2a:	e7d4      	b.n	800ecd6 <__ieee754_pow+0x26>
 800ed2c:	2d00      	cmp	r5, #0
 800ed2e:	46c3      	mov	fp, r8
 800ed30:	da3a      	bge.n	800eda8 <__ieee754_pow+0xf8>
 800ed32:	4a83      	ldr	r2, [pc, #524]	@ (800ef40 <__ieee754_pow+0x290>)
 800ed34:	4592      	cmp	sl, r2
 800ed36:	d84d      	bhi.n	800edd4 <__ieee754_pow+0x124>
 800ed38:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ed3c:	4592      	cmp	sl, r2
 800ed3e:	f240 84c7 	bls.w	800f6d0 <__ieee754_pow+0xa20>
 800ed42:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ed46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ed4a:	2a14      	cmp	r2, #20
 800ed4c:	dd0f      	ble.n	800ed6e <__ieee754_pow+0xbe>
 800ed4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ed52:	fa21 f402 	lsr.w	r4, r1, r2
 800ed56:	fa04 f202 	lsl.w	r2, r4, r2
 800ed5a:	428a      	cmp	r2, r1
 800ed5c:	f040 84b8 	bne.w	800f6d0 <__ieee754_pow+0xa20>
 800ed60:	f004 0401 	and.w	r4, r4, #1
 800ed64:	f1c4 0402 	rsb	r4, r4, #2
 800ed68:	2900      	cmp	r1, #0
 800ed6a:	d158      	bne.n	800ee1e <__ieee754_pow+0x16e>
 800ed6c:	e00e      	b.n	800ed8c <__ieee754_pow+0xdc>
 800ed6e:	2900      	cmp	r1, #0
 800ed70:	d154      	bne.n	800ee1c <__ieee754_pow+0x16c>
 800ed72:	f1c2 0214 	rsb	r2, r2, #20
 800ed76:	fa4a f402 	asr.w	r4, sl, r2
 800ed7a:	fa04 f202 	lsl.w	r2, r4, r2
 800ed7e:	4552      	cmp	r2, sl
 800ed80:	f040 84a3 	bne.w	800f6ca <__ieee754_pow+0xa1a>
 800ed84:	f004 0401 	and.w	r4, r4, #1
 800ed88:	f1c4 0402 	rsb	r4, r4, #2
 800ed8c:	4a6d      	ldr	r2, [pc, #436]	@ (800ef44 <__ieee754_pow+0x294>)
 800ed8e:	4592      	cmp	sl, r2
 800ed90:	d12e      	bne.n	800edf0 <__ieee754_pow+0x140>
 800ed92:	f1b9 0f00 	cmp.w	r9, #0
 800ed96:	f280 8494 	bge.w	800f6c2 <__ieee754_pow+0xa12>
 800ed9a:	496a      	ldr	r1, [pc, #424]	@ (800ef44 <__ieee754_pow+0x294>)
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	463b      	mov	r3, r7
 800eda0:	2000      	movs	r0, #0
 800eda2:	f7f1 fd53 	bl	800084c <__aeabi_ddiv>
 800eda6:	e7a0      	b.n	800ecea <__ieee754_pow+0x3a>
 800eda8:	2400      	movs	r4, #0
 800edaa:	bbc1      	cbnz	r1, 800ee1e <__ieee754_pow+0x16e>
 800edac:	4a63      	ldr	r2, [pc, #396]	@ (800ef3c <__ieee754_pow+0x28c>)
 800edae:	4592      	cmp	sl, r2
 800edb0:	d1ec      	bne.n	800ed8c <__ieee754_pow+0xdc>
 800edb2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800edb6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800edba:	431a      	orrs	r2, r3
 800edbc:	f000 8479 	beq.w	800f6b2 <__ieee754_pow+0xa02>
 800edc0:	4b61      	ldr	r3, [pc, #388]	@ (800ef48 <__ieee754_pow+0x298>)
 800edc2:	4598      	cmp	r8, r3
 800edc4:	d908      	bls.n	800edd8 <__ieee754_pow+0x128>
 800edc6:	f1b9 0f00 	cmp.w	r9, #0
 800edca:	f2c0 8476 	blt.w	800f6ba <__ieee754_pow+0xa0a>
 800edce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edd2:	e78a      	b.n	800ecea <__ieee754_pow+0x3a>
 800edd4:	2402      	movs	r4, #2
 800edd6:	e7e8      	b.n	800edaa <__ieee754_pow+0xfa>
 800edd8:	f1b9 0f00 	cmp.w	r9, #0
 800eddc:	f04f 0000 	mov.w	r0, #0
 800ede0:	f04f 0100 	mov.w	r1, #0
 800ede4:	da81      	bge.n	800ecea <__ieee754_pow+0x3a>
 800ede6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800edea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800edee:	e77c      	b.n	800ecea <__ieee754_pow+0x3a>
 800edf0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800edf4:	d106      	bne.n	800ee04 <__ieee754_pow+0x154>
 800edf6:	4632      	mov	r2, r6
 800edf8:	463b      	mov	r3, r7
 800edfa:	4630      	mov	r0, r6
 800edfc:	4639      	mov	r1, r7
 800edfe:	f7f1 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ee02:	e772      	b.n	800ecea <__ieee754_pow+0x3a>
 800ee04:	4a51      	ldr	r2, [pc, #324]	@ (800ef4c <__ieee754_pow+0x29c>)
 800ee06:	4591      	cmp	r9, r2
 800ee08:	d109      	bne.n	800ee1e <__ieee754_pow+0x16e>
 800ee0a:	2d00      	cmp	r5, #0
 800ee0c:	db07      	blt.n	800ee1e <__ieee754_pow+0x16e>
 800ee0e:	ec47 6b10 	vmov	d0, r6, r7
 800ee12:	b011      	add	sp, #68	@ 0x44
 800ee14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	f7ff bba4 	b.w	800e564 <__ieee754_sqrt>
 800ee1c:	2400      	movs	r4, #0
 800ee1e:	ec47 6b10 	vmov	d0, r6, r7
 800ee22:	9302      	str	r3, [sp, #8]
 800ee24:	f7ff fab0 	bl	800e388 <fabs>
 800ee28:	9b02      	ldr	r3, [sp, #8]
 800ee2a:	ec51 0b10 	vmov	r0, r1, d0
 800ee2e:	bb53      	cbnz	r3, 800ee86 <__ieee754_pow+0x1d6>
 800ee30:	4b44      	ldr	r3, [pc, #272]	@ (800ef44 <__ieee754_pow+0x294>)
 800ee32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d002      	beq.n	800ee40 <__ieee754_pow+0x190>
 800ee3a:	f1b8 0f00 	cmp.w	r8, #0
 800ee3e:	d122      	bne.n	800ee86 <__ieee754_pow+0x1d6>
 800ee40:	f1b9 0f00 	cmp.w	r9, #0
 800ee44:	da05      	bge.n	800ee52 <__ieee754_pow+0x1a2>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	493d      	ldr	r1, [pc, #244]	@ (800ef44 <__ieee754_pow+0x294>)
 800ee4e:	f7f1 fcfd 	bl	800084c <__aeabi_ddiv>
 800ee52:	2d00      	cmp	r5, #0
 800ee54:	f6bf af49 	bge.w	800ecea <__ieee754_pow+0x3a>
 800ee58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ee5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ee60:	ea58 0804 	orrs.w	r8, r8, r4
 800ee64:	d108      	bne.n	800ee78 <__ieee754_pow+0x1c8>
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	4610      	mov	r0, r2
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	f7f1 fa0b 	bl	8000288 <__aeabi_dsub>
 800ee72:	4602      	mov	r2, r0
 800ee74:	460b      	mov	r3, r1
 800ee76:	e794      	b.n	800eda2 <__ieee754_pow+0xf2>
 800ee78:	2c01      	cmp	r4, #1
 800ee7a:	f47f af36 	bne.w	800ecea <__ieee754_pow+0x3a>
 800ee7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ee82:	4619      	mov	r1, r3
 800ee84:	e731      	b.n	800ecea <__ieee754_pow+0x3a>
 800ee86:	0feb      	lsrs	r3, r5, #31
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	ea53 0204 	orrs.w	r2, r3, r4
 800ee8e:	d102      	bne.n	800ee96 <__ieee754_pow+0x1e6>
 800ee90:	4632      	mov	r2, r6
 800ee92:	463b      	mov	r3, r7
 800ee94:	e7e9      	b.n	800ee6a <__ieee754_pow+0x1ba>
 800ee96:	3c01      	subs	r4, #1
 800ee98:	431c      	orrs	r4, r3
 800ee9a:	d016      	beq.n	800eeca <__ieee754_pow+0x21a>
 800ee9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ef28 <__ieee754_pow+0x278>
 800eea0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800eea4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eea8:	f240 8112 	bls.w	800f0d0 <__ieee754_pow+0x420>
 800eeac:	4b28      	ldr	r3, [pc, #160]	@ (800ef50 <__ieee754_pow+0x2a0>)
 800eeae:	459a      	cmp	sl, r3
 800eeb0:	4b25      	ldr	r3, [pc, #148]	@ (800ef48 <__ieee754_pow+0x298>)
 800eeb2:	d916      	bls.n	800eee2 <__ieee754_pow+0x232>
 800eeb4:	4598      	cmp	r8, r3
 800eeb6:	d80b      	bhi.n	800eed0 <__ieee754_pow+0x220>
 800eeb8:	f1b9 0f00 	cmp.w	r9, #0
 800eebc:	da0b      	bge.n	800eed6 <__ieee754_pow+0x226>
 800eebe:	2000      	movs	r0, #0
 800eec0:	b011      	add	sp, #68	@ 0x44
 800eec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec6:	f001 b923 	b.w	8010110 <__math_oflow>
 800eeca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ef30 <__ieee754_pow+0x280>
 800eece:	e7e7      	b.n	800eea0 <__ieee754_pow+0x1f0>
 800eed0:	f1b9 0f00 	cmp.w	r9, #0
 800eed4:	dcf3      	bgt.n	800eebe <__ieee754_pow+0x20e>
 800eed6:	2000      	movs	r0, #0
 800eed8:	b011      	add	sp, #68	@ 0x44
 800eeda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eede:	f001 b90f 	b.w	8010100 <__math_uflow>
 800eee2:	4598      	cmp	r8, r3
 800eee4:	d20c      	bcs.n	800ef00 <__ieee754_pow+0x250>
 800eee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eeea:	2200      	movs	r2, #0
 800eeec:	2300      	movs	r3, #0
 800eeee:	f7f1 fdf5 	bl	8000adc <__aeabi_dcmplt>
 800eef2:	3800      	subs	r0, #0
 800eef4:	bf18      	it	ne
 800eef6:	2001      	movne	r0, #1
 800eef8:	f1b9 0f00 	cmp.w	r9, #0
 800eefc:	daec      	bge.n	800eed8 <__ieee754_pow+0x228>
 800eefe:	e7df      	b.n	800eec0 <__ieee754_pow+0x210>
 800ef00:	4b10      	ldr	r3, [pc, #64]	@ (800ef44 <__ieee754_pow+0x294>)
 800ef02:	4598      	cmp	r8, r3
 800ef04:	f04f 0200 	mov.w	r2, #0
 800ef08:	d924      	bls.n	800ef54 <__ieee754_pow+0x2a4>
 800ef0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f7f1 fde4 	bl	8000adc <__aeabi_dcmplt>
 800ef14:	3800      	subs	r0, #0
 800ef16:	bf18      	it	ne
 800ef18:	2001      	movne	r0, #1
 800ef1a:	f1b9 0f00 	cmp.w	r9, #0
 800ef1e:	dccf      	bgt.n	800eec0 <__ieee754_pow+0x210>
 800ef20:	e7da      	b.n	800eed8 <__ieee754_pow+0x228>
 800ef22:	bf00      	nop
 800ef24:	f3af 8000 	nop.w
 800ef28:	00000000 	.word	0x00000000
 800ef2c:	3ff00000 	.word	0x3ff00000
 800ef30:	00000000 	.word	0x00000000
 800ef34:	bff00000 	.word	0xbff00000
 800ef38:	fff00000 	.word	0xfff00000
 800ef3c:	7ff00000 	.word	0x7ff00000
 800ef40:	433fffff 	.word	0x433fffff
 800ef44:	3ff00000 	.word	0x3ff00000
 800ef48:	3fefffff 	.word	0x3fefffff
 800ef4c:	3fe00000 	.word	0x3fe00000
 800ef50:	43f00000 	.word	0x43f00000
 800ef54:	4b5a      	ldr	r3, [pc, #360]	@ (800f0c0 <__ieee754_pow+0x410>)
 800ef56:	f7f1 f997 	bl	8000288 <__aeabi_dsub>
 800ef5a:	a351      	add	r3, pc, #324	@ (adr r3, 800f0a0 <__ieee754_pow+0x3f0>)
 800ef5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef60:	4604      	mov	r4, r0
 800ef62:	460d      	mov	r5, r1
 800ef64:	f7f1 fb48 	bl	80005f8 <__aeabi_dmul>
 800ef68:	a34f      	add	r3, pc, #316	@ (adr r3, 800f0a8 <__ieee754_pow+0x3f8>)
 800ef6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6e:	4606      	mov	r6, r0
 800ef70:	460f      	mov	r7, r1
 800ef72:	4620      	mov	r0, r4
 800ef74:	4629      	mov	r1, r5
 800ef76:	f7f1 fb3f 	bl	80005f8 <__aeabi_dmul>
 800ef7a:	4b52      	ldr	r3, [pc, #328]	@ (800f0c4 <__ieee754_pow+0x414>)
 800ef7c:	4682      	mov	sl, r0
 800ef7e:	468b      	mov	fp, r1
 800ef80:	2200      	movs	r2, #0
 800ef82:	4620      	mov	r0, r4
 800ef84:	4629      	mov	r1, r5
 800ef86:	f7f1 fb37 	bl	80005f8 <__aeabi_dmul>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	a148      	add	r1, pc, #288	@ (adr r1, 800f0b0 <__ieee754_pow+0x400>)
 800ef90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef94:	f7f1 f978 	bl	8000288 <__aeabi_dsub>
 800ef98:	4622      	mov	r2, r4
 800ef9a:	462b      	mov	r3, r5
 800ef9c:	f7f1 fb2c 	bl	80005f8 <__aeabi_dmul>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	2000      	movs	r0, #0
 800efa6:	4948      	ldr	r1, [pc, #288]	@ (800f0c8 <__ieee754_pow+0x418>)
 800efa8:	f7f1 f96e 	bl	8000288 <__aeabi_dsub>
 800efac:	4622      	mov	r2, r4
 800efae:	4680      	mov	r8, r0
 800efb0:	4689      	mov	r9, r1
 800efb2:	462b      	mov	r3, r5
 800efb4:	4620      	mov	r0, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7f1 fb1e 	bl	80005f8 <__aeabi_dmul>
 800efbc:	4602      	mov	r2, r0
 800efbe:	460b      	mov	r3, r1
 800efc0:	4640      	mov	r0, r8
 800efc2:	4649      	mov	r1, r9
 800efc4:	f7f1 fb18 	bl	80005f8 <__aeabi_dmul>
 800efc8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f0b8 <__ieee754_pow+0x408>)
 800efca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efce:	f7f1 fb13 	bl	80005f8 <__aeabi_dmul>
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	4650      	mov	r0, sl
 800efd8:	4659      	mov	r1, fp
 800efda:	f7f1 f955 	bl	8000288 <__aeabi_dsub>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4680      	mov	r8, r0
 800efe4:	4689      	mov	r9, r1
 800efe6:	4630      	mov	r0, r6
 800efe8:	4639      	mov	r1, r7
 800efea:	f7f1 f94f 	bl	800028c <__adddf3>
 800efee:	2400      	movs	r4, #0
 800eff0:	4632      	mov	r2, r6
 800eff2:	463b      	mov	r3, r7
 800eff4:	4620      	mov	r0, r4
 800eff6:	460d      	mov	r5, r1
 800eff8:	f7f1 f946 	bl	8000288 <__aeabi_dsub>
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	4640      	mov	r0, r8
 800f002:	4649      	mov	r1, r9
 800f004:	f7f1 f940 	bl	8000288 <__aeabi_dsub>
 800f008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f00c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f010:	2300      	movs	r3, #0
 800f012:	9304      	str	r3, [sp, #16]
 800f014:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f018:	4606      	mov	r6, r0
 800f01a:	460f      	mov	r7, r1
 800f01c:	4652      	mov	r2, sl
 800f01e:	465b      	mov	r3, fp
 800f020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f024:	f7f1 f930 	bl	8000288 <__aeabi_dsub>
 800f028:	4622      	mov	r2, r4
 800f02a:	462b      	mov	r3, r5
 800f02c:	f7f1 fae4 	bl	80005f8 <__aeabi_dmul>
 800f030:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f034:	4680      	mov	r8, r0
 800f036:	4689      	mov	r9, r1
 800f038:	4630      	mov	r0, r6
 800f03a:	4639      	mov	r1, r7
 800f03c:	f7f1 fadc 	bl	80005f8 <__aeabi_dmul>
 800f040:	4602      	mov	r2, r0
 800f042:	460b      	mov	r3, r1
 800f044:	4640      	mov	r0, r8
 800f046:	4649      	mov	r1, r9
 800f048:	f7f1 f920 	bl	800028c <__adddf3>
 800f04c:	4652      	mov	r2, sl
 800f04e:	465b      	mov	r3, fp
 800f050:	4606      	mov	r6, r0
 800f052:	460f      	mov	r7, r1
 800f054:	4620      	mov	r0, r4
 800f056:	4629      	mov	r1, r5
 800f058:	f7f1 face 	bl	80005f8 <__aeabi_dmul>
 800f05c:	460b      	mov	r3, r1
 800f05e:	4602      	mov	r2, r0
 800f060:	4680      	mov	r8, r0
 800f062:	4689      	mov	r9, r1
 800f064:	4630      	mov	r0, r6
 800f066:	4639      	mov	r1, r7
 800f068:	f7f1 f910 	bl	800028c <__adddf3>
 800f06c:	4b17      	ldr	r3, [pc, #92]	@ (800f0cc <__ieee754_pow+0x41c>)
 800f06e:	4299      	cmp	r1, r3
 800f070:	4604      	mov	r4, r0
 800f072:	460d      	mov	r5, r1
 800f074:	468a      	mov	sl, r1
 800f076:	468b      	mov	fp, r1
 800f078:	f340 82ef 	ble.w	800f65a <__ieee754_pow+0x9aa>
 800f07c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f080:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f084:	4303      	orrs	r3, r0
 800f086:	f000 81e8 	beq.w	800f45a <__ieee754_pow+0x7aa>
 800f08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f08e:	2200      	movs	r2, #0
 800f090:	2300      	movs	r3, #0
 800f092:	f7f1 fd23 	bl	8000adc <__aeabi_dcmplt>
 800f096:	3800      	subs	r0, #0
 800f098:	bf18      	it	ne
 800f09a:	2001      	movne	r0, #1
 800f09c:	e710      	b.n	800eec0 <__ieee754_pow+0x210>
 800f09e:	bf00      	nop
 800f0a0:	60000000 	.word	0x60000000
 800f0a4:	3ff71547 	.word	0x3ff71547
 800f0a8:	f85ddf44 	.word	0xf85ddf44
 800f0ac:	3e54ae0b 	.word	0x3e54ae0b
 800f0b0:	55555555 	.word	0x55555555
 800f0b4:	3fd55555 	.word	0x3fd55555
 800f0b8:	652b82fe 	.word	0x652b82fe
 800f0bc:	3ff71547 	.word	0x3ff71547
 800f0c0:	3ff00000 	.word	0x3ff00000
 800f0c4:	3fd00000 	.word	0x3fd00000
 800f0c8:	3fe00000 	.word	0x3fe00000
 800f0cc:	408fffff 	.word	0x408fffff
 800f0d0:	4bd5      	ldr	r3, [pc, #852]	@ (800f428 <__ieee754_pow+0x778>)
 800f0d2:	402b      	ands	r3, r5
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	b92b      	cbnz	r3, 800f0e4 <__ieee754_pow+0x434>
 800f0d8:	4bd4      	ldr	r3, [pc, #848]	@ (800f42c <__ieee754_pow+0x77c>)
 800f0da:	f7f1 fa8d 	bl	80005f8 <__aeabi_dmul>
 800f0de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f0e2:	468b      	mov	fp, r1
 800f0e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f0e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f0ec:	4413      	add	r3, r2
 800f0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0f0:	4bcf      	ldr	r3, [pc, #828]	@ (800f430 <__ieee754_pow+0x780>)
 800f0f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f0f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f0fa:	459b      	cmp	fp, r3
 800f0fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f100:	dd08      	ble.n	800f114 <__ieee754_pow+0x464>
 800f102:	4bcc      	ldr	r3, [pc, #816]	@ (800f434 <__ieee754_pow+0x784>)
 800f104:	459b      	cmp	fp, r3
 800f106:	f340 81a5 	ble.w	800f454 <__ieee754_pow+0x7a4>
 800f10a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f10c:	3301      	adds	r3, #1
 800f10e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f110:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f114:	f04f 0a00 	mov.w	sl, #0
 800f118:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f11c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f11e:	4bc6      	ldr	r3, [pc, #792]	@ (800f438 <__ieee754_pow+0x788>)
 800f120:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f124:	ed93 7b00 	vldr	d7, [r3]
 800f128:	4629      	mov	r1, r5
 800f12a:	ec53 2b17 	vmov	r2, r3, d7
 800f12e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f132:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f136:	f7f1 f8a7 	bl	8000288 <__aeabi_dsub>
 800f13a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f13e:	4606      	mov	r6, r0
 800f140:	460f      	mov	r7, r1
 800f142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f146:	f7f1 f8a1 	bl	800028c <__adddf3>
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	2000      	movs	r0, #0
 800f150:	49ba      	ldr	r1, [pc, #744]	@ (800f43c <__ieee754_pow+0x78c>)
 800f152:	f7f1 fb7b 	bl	800084c <__aeabi_ddiv>
 800f156:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f15a:	4602      	mov	r2, r0
 800f15c:	460b      	mov	r3, r1
 800f15e:	4630      	mov	r0, r6
 800f160:	4639      	mov	r1, r7
 800f162:	f7f1 fa49 	bl	80005f8 <__aeabi_dmul>
 800f166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f16a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f16e:	106d      	asrs	r5, r5, #1
 800f170:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f174:	f04f 0b00 	mov.w	fp, #0
 800f178:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f17c:	4661      	mov	r1, ip
 800f17e:	2200      	movs	r2, #0
 800f180:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f184:	4658      	mov	r0, fp
 800f186:	46e1      	mov	r9, ip
 800f188:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f18c:	4614      	mov	r4, r2
 800f18e:	461d      	mov	r5, r3
 800f190:	f7f1 fa32 	bl	80005f8 <__aeabi_dmul>
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	4630      	mov	r0, r6
 800f19a:	4639      	mov	r1, r7
 800f19c:	f7f1 f874 	bl	8000288 <__aeabi_dsub>
 800f1a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	460f      	mov	r7, r1
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	f7f1 f86c 	bl	8000288 <__aeabi_dsub>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f1b8:	f7f1 f866 	bl	8000288 <__aeabi_dsub>
 800f1bc:	465a      	mov	r2, fp
 800f1be:	464b      	mov	r3, r9
 800f1c0:	f7f1 fa1a 	bl	80005f8 <__aeabi_dmul>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	4639      	mov	r1, r7
 800f1cc:	f7f1 f85c 	bl	8000288 <__aeabi_dsub>
 800f1d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f1d4:	f7f1 fa10 	bl	80005f8 <__aeabi_dmul>
 800f1d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f1e0:	4610      	mov	r0, r2
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	f7f1 fa08 	bl	80005f8 <__aeabi_dmul>
 800f1e8:	a37d      	add	r3, pc, #500	@ (adr r3, 800f3e0 <__ieee754_pow+0x730>)
 800f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	460d      	mov	r5, r1
 800f1f2:	f7f1 fa01 	bl	80005f8 <__aeabi_dmul>
 800f1f6:	a37c      	add	r3, pc, #496	@ (adr r3, 800f3e8 <__ieee754_pow+0x738>)
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	f7f1 f846 	bl	800028c <__adddf3>
 800f200:	4622      	mov	r2, r4
 800f202:	462b      	mov	r3, r5
 800f204:	f7f1 f9f8 	bl	80005f8 <__aeabi_dmul>
 800f208:	a379      	add	r3, pc, #484	@ (adr r3, 800f3f0 <__ieee754_pow+0x740>)
 800f20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20e:	f7f1 f83d 	bl	800028c <__adddf3>
 800f212:	4622      	mov	r2, r4
 800f214:	462b      	mov	r3, r5
 800f216:	f7f1 f9ef 	bl	80005f8 <__aeabi_dmul>
 800f21a:	a377      	add	r3, pc, #476	@ (adr r3, 800f3f8 <__ieee754_pow+0x748>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	f7f1 f834 	bl	800028c <__adddf3>
 800f224:	4622      	mov	r2, r4
 800f226:	462b      	mov	r3, r5
 800f228:	f7f1 f9e6 	bl	80005f8 <__aeabi_dmul>
 800f22c:	a374      	add	r3, pc, #464	@ (adr r3, 800f400 <__ieee754_pow+0x750>)
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	f7f1 f82b 	bl	800028c <__adddf3>
 800f236:	4622      	mov	r2, r4
 800f238:	462b      	mov	r3, r5
 800f23a:	f7f1 f9dd 	bl	80005f8 <__aeabi_dmul>
 800f23e:	a372      	add	r3, pc, #456	@ (adr r3, 800f408 <__ieee754_pow+0x758>)
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f7f1 f822 	bl	800028c <__adddf3>
 800f248:	4622      	mov	r2, r4
 800f24a:	4606      	mov	r6, r0
 800f24c:	460f      	mov	r7, r1
 800f24e:	462b      	mov	r3, r5
 800f250:	4620      	mov	r0, r4
 800f252:	4629      	mov	r1, r5
 800f254:	f7f1 f9d0 	bl	80005f8 <__aeabi_dmul>
 800f258:	4602      	mov	r2, r0
 800f25a:	460b      	mov	r3, r1
 800f25c:	4630      	mov	r0, r6
 800f25e:	4639      	mov	r1, r7
 800f260:	f7f1 f9ca 	bl	80005f8 <__aeabi_dmul>
 800f264:	465a      	mov	r2, fp
 800f266:	4604      	mov	r4, r0
 800f268:	460d      	mov	r5, r1
 800f26a:	464b      	mov	r3, r9
 800f26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f270:	f7f1 f80c 	bl	800028c <__adddf3>
 800f274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f278:	f7f1 f9be 	bl	80005f8 <__aeabi_dmul>
 800f27c:	4622      	mov	r2, r4
 800f27e:	462b      	mov	r3, r5
 800f280:	f7f1 f804 	bl	800028c <__adddf3>
 800f284:	465a      	mov	r2, fp
 800f286:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f28a:	464b      	mov	r3, r9
 800f28c:	4658      	mov	r0, fp
 800f28e:	4649      	mov	r1, r9
 800f290:	f7f1 f9b2 	bl	80005f8 <__aeabi_dmul>
 800f294:	4b6a      	ldr	r3, [pc, #424]	@ (800f440 <__ieee754_pow+0x790>)
 800f296:	2200      	movs	r2, #0
 800f298:	4606      	mov	r6, r0
 800f29a:	460f      	mov	r7, r1
 800f29c:	f7f0 fff6 	bl	800028c <__adddf3>
 800f2a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f2a4:	f7f0 fff2 	bl	800028c <__adddf3>
 800f2a8:	46d8      	mov	r8, fp
 800f2aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f2ae:	460d      	mov	r5, r1
 800f2b0:	465a      	mov	r2, fp
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	4640      	mov	r0, r8
 800f2b6:	4649      	mov	r1, r9
 800f2b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f2bc:	f7f1 f99c 	bl	80005f8 <__aeabi_dmul>
 800f2c0:	465c      	mov	r4, fp
 800f2c2:	4680      	mov	r8, r0
 800f2c4:	4689      	mov	r9, r1
 800f2c6:	4b5e      	ldr	r3, [pc, #376]	@ (800f440 <__ieee754_pow+0x790>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	f7f0 ffdb 	bl	8000288 <__aeabi_dsub>
 800f2d2:	4632      	mov	r2, r6
 800f2d4:	463b      	mov	r3, r7
 800f2d6:	f7f0 ffd7 	bl	8000288 <__aeabi_dsub>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	460b      	mov	r3, r1
 800f2de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f2e2:	f7f0 ffd1 	bl	8000288 <__aeabi_dsub>
 800f2e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2ea:	f7f1 f985 	bl	80005f8 <__aeabi_dmul>
 800f2ee:	4622      	mov	r2, r4
 800f2f0:	4606      	mov	r6, r0
 800f2f2:	460f      	mov	r7, r1
 800f2f4:	462b      	mov	r3, r5
 800f2f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2fa:	f7f1 f97d 	bl	80005f8 <__aeabi_dmul>
 800f2fe:	4602      	mov	r2, r0
 800f300:	460b      	mov	r3, r1
 800f302:	4630      	mov	r0, r6
 800f304:	4639      	mov	r1, r7
 800f306:	f7f0 ffc1 	bl	800028c <__adddf3>
 800f30a:	4606      	mov	r6, r0
 800f30c:	460f      	mov	r7, r1
 800f30e:	4602      	mov	r2, r0
 800f310:	460b      	mov	r3, r1
 800f312:	4640      	mov	r0, r8
 800f314:	4649      	mov	r1, r9
 800f316:	f7f0 ffb9 	bl	800028c <__adddf3>
 800f31a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f31e:	a33c      	add	r3, pc, #240	@ (adr r3, 800f410 <__ieee754_pow+0x760>)
 800f320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f324:	4658      	mov	r0, fp
 800f326:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f32a:	460d      	mov	r5, r1
 800f32c:	f7f1 f964 	bl	80005f8 <__aeabi_dmul>
 800f330:	465c      	mov	r4, fp
 800f332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f336:	4642      	mov	r2, r8
 800f338:	464b      	mov	r3, r9
 800f33a:	4620      	mov	r0, r4
 800f33c:	4629      	mov	r1, r5
 800f33e:	f7f0 ffa3 	bl	8000288 <__aeabi_dsub>
 800f342:	4602      	mov	r2, r0
 800f344:	460b      	mov	r3, r1
 800f346:	4630      	mov	r0, r6
 800f348:	4639      	mov	r1, r7
 800f34a:	f7f0 ff9d 	bl	8000288 <__aeabi_dsub>
 800f34e:	a332      	add	r3, pc, #200	@ (adr r3, 800f418 <__ieee754_pow+0x768>)
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	f7f1 f950 	bl	80005f8 <__aeabi_dmul>
 800f358:	a331      	add	r3, pc, #196	@ (adr r3, 800f420 <__ieee754_pow+0x770>)
 800f35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35e:	4606      	mov	r6, r0
 800f360:	460f      	mov	r7, r1
 800f362:	4620      	mov	r0, r4
 800f364:	4629      	mov	r1, r5
 800f366:	f7f1 f947 	bl	80005f8 <__aeabi_dmul>
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	4630      	mov	r0, r6
 800f370:	4639      	mov	r1, r7
 800f372:	f7f0 ff8b 	bl	800028c <__adddf3>
 800f376:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f378:	4b32      	ldr	r3, [pc, #200]	@ (800f444 <__ieee754_pow+0x794>)
 800f37a:	4413      	add	r3, r2
 800f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f380:	f7f0 ff84 	bl	800028c <__adddf3>
 800f384:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f388:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f38a:	f7f1 f8cb 	bl	8000524 <__aeabi_i2d>
 800f38e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f390:	4b2d      	ldr	r3, [pc, #180]	@ (800f448 <__ieee754_pow+0x798>)
 800f392:	4413      	add	r3, r2
 800f394:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f398:	4606      	mov	r6, r0
 800f39a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f39e:	460f      	mov	r7, r1
 800f3a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3a4:	f7f0 ff72 	bl	800028c <__adddf3>
 800f3a8:	4642      	mov	r2, r8
 800f3aa:	464b      	mov	r3, r9
 800f3ac:	f7f0 ff6e 	bl	800028c <__adddf3>
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	463b      	mov	r3, r7
 800f3b4:	f7f0 ff6a 	bl	800028c <__adddf3>
 800f3b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f3bc:	4632      	mov	r2, r6
 800f3be:	463b      	mov	r3, r7
 800f3c0:	4658      	mov	r0, fp
 800f3c2:	460d      	mov	r5, r1
 800f3c4:	f7f0 ff60 	bl	8000288 <__aeabi_dsub>
 800f3c8:	4642      	mov	r2, r8
 800f3ca:	464b      	mov	r3, r9
 800f3cc:	f7f0 ff5c 	bl	8000288 <__aeabi_dsub>
 800f3d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3d4:	f7f0 ff58 	bl	8000288 <__aeabi_dsub>
 800f3d8:	465c      	mov	r4, fp
 800f3da:	4602      	mov	r2, r0
 800f3dc:	e036      	b.n	800f44c <__ieee754_pow+0x79c>
 800f3de:	bf00      	nop
 800f3e0:	4a454eef 	.word	0x4a454eef
 800f3e4:	3fca7e28 	.word	0x3fca7e28
 800f3e8:	93c9db65 	.word	0x93c9db65
 800f3ec:	3fcd864a 	.word	0x3fcd864a
 800f3f0:	a91d4101 	.word	0xa91d4101
 800f3f4:	3fd17460 	.word	0x3fd17460
 800f3f8:	518f264d 	.word	0x518f264d
 800f3fc:	3fd55555 	.word	0x3fd55555
 800f400:	db6fabff 	.word	0xdb6fabff
 800f404:	3fdb6db6 	.word	0x3fdb6db6
 800f408:	33333303 	.word	0x33333303
 800f40c:	3fe33333 	.word	0x3fe33333
 800f410:	e0000000 	.word	0xe0000000
 800f414:	3feec709 	.word	0x3feec709
 800f418:	dc3a03fd 	.word	0xdc3a03fd
 800f41c:	3feec709 	.word	0x3feec709
 800f420:	145b01f5 	.word	0x145b01f5
 800f424:	be3e2fe0 	.word	0xbe3e2fe0
 800f428:	7ff00000 	.word	0x7ff00000
 800f42c:	43400000 	.word	0x43400000
 800f430:	0003988e 	.word	0x0003988e
 800f434:	000bb679 	.word	0x000bb679
 800f438:	08010c40 	.word	0x08010c40
 800f43c:	3ff00000 	.word	0x3ff00000
 800f440:	40080000 	.word	0x40080000
 800f444:	08010c20 	.word	0x08010c20
 800f448:	08010c30 	.word	0x08010c30
 800f44c:	460b      	mov	r3, r1
 800f44e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f452:	e5d7      	b.n	800f004 <__ieee754_pow+0x354>
 800f454:	f04f 0a01 	mov.w	sl, #1
 800f458:	e65e      	b.n	800f118 <__ieee754_pow+0x468>
 800f45a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f72c <__ieee754_pow+0xa7c>)
 800f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f460:	4630      	mov	r0, r6
 800f462:	4639      	mov	r1, r7
 800f464:	f7f0 ff12 	bl	800028c <__adddf3>
 800f468:	4642      	mov	r2, r8
 800f46a:	e9cd 0100 	strd	r0, r1, [sp]
 800f46e:	464b      	mov	r3, r9
 800f470:	4620      	mov	r0, r4
 800f472:	4629      	mov	r1, r5
 800f474:	f7f0 ff08 	bl	8000288 <__aeabi_dsub>
 800f478:	4602      	mov	r2, r0
 800f47a:	460b      	mov	r3, r1
 800f47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f480:	f7f1 fb4a 	bl	8000b18 <__aeabi_dcmpgt>
 800f484:	2800      	cmp	r0, #0
 800f486:	f47f ae00 	bne.w	800f08a <__ieee754_pow+0x3da>
 800f48a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f48e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f492:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f496:	fa43 fa0a 	asr.w	sl, r3, sl
 800f49a:	44da      	add	sl, fp
 800f49c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f4a0:	489d      	ldr	r0, [pc, #628]	@ (800f718 <__ieee754_pow+0xa68>)
 800f4a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f4a6:	4108      	asrs	r0, r1
 800f4a8:	ea00 030a 	and.w	r3, r0, sl
 800f4ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f4b0:	f1c1 0114 	rsb	r1, r1, #20
 800f4b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f4b8:	fa4a fa01 	asr.w	sl, sl, r1
 800f4bc:	f1bb 0f00 	cmp.w	fp, #0
 800f4c0:	4640      	mov	r0, r8
 800f4c2:	4649      	mov	r1, r9
 800f4c4:	f04f 0200 	mov.w	r2, #0
 800f4c8:	bfb8      	it	lt
 800f4ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800f4ce:	f7f0 fedb 	bl	8000288 <__aeabi_dsub>
 800f4d2:	4680      	mov	r8, r0
 800f4d4:	4689      	mov	r9, r1
 800f4d6:	4632      	mov	r2, r6
 800f4d8:	463b      	mov	r3, r7
 800f4da:	4640      	mov	r0, r8
 800f4dc:	4649      	mov	r1, r9
 800f4de:	f7f0 fed5 	bl	800028c <__adddf3>
 800f4e2:	2400      	movs	r4, #0
 800f4e4:	a37c      	add	r3, pc, #496	@ (adr r3, 800f6d8 <__ieee754_pow+0xa28>)
 800f4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	460d      	mov	r5, r1
 800f4ee:	f7f1 f883 	bl	80005f8 <__aeabi_dmul>
 800f4f2:	4642      	mov	r2, r8
 800f4f4:	e9cd 0100 	strd	r0, r1, [sp]
 800f4f8:	464b      	mov	r3, r9
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	4629      	mov	r1, r5
 800f4fe:	f7f0 fec3 	bl	8000288 <__aeabi_dsub>
 800f502:	4602      	mov	r2, r0
 800f504:	460b      	mov	r3, r1
 800f506:	4630      	mov	r0, r6
 800f508:	4639      	mov	r1, r7
 800f50a:	f7f0 febd 	bl	8000288 <__aeabi_dsub>
 800f50e:	a374      	add	r3, pc, #464	@ (adr r3, 800f6e0 <__ieee754_pow+0xa30>)
 800f510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f514:	f7f1 f870 	bl	80005f8 <__aeabi_dmul>
 800f518:	a373      	add	r3, pc, #460	@ (adr r3, 800f6e8 <__ieee754_pow+0xa38>)
 800f51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51e:	4680      	mov	r8, r0
 800f520:	4689      	mov	r9, r1
 800f522:	4620      	mov	r0, r4
 800f524:	4629      	mov	r1, r5
 800f526:	f7f1 f867 	bl	80005f8 <__aeabi_dmul>
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	4640      	mov	r0, r8
 800f530:	4649      	mov	r1, r9
 800f532:	f7f0 feab 	bl	800028c <__adddf3>
 800f536:	4604      	mov	r4, r0
 800f538:	460d      	mov	r5, r1
 800f53a:	4602      	mov	r2, r0
 800f53c:	460b      	mov	r3, r1
 800f53e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f542:	f7f0 fea3 	bl	800028c <__adddf3>
 800f546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f54a:	4680      	mov	r8, r0
 800f54c:	4689      	mov	r9, r1
 800f54e:	f7f0 fe9b 	bl	8000288 <__aeabi_dsub>
 800f552:	4602      	mov	r2, r0
 800f554:	460b      	mov	r3, r1
 800f556:	4620      	mov	r0, r4
 800f558:	4629      	mov	r1, r5
 800f55a:	f7f0 fe95 	bl	8000288 <__aeabi_dsub>
 800f55e:	4642      	mov	r2, r8
 800f560:	4606      	mov	r6, r0
 800f562:	460f      	mov	r7, r1
 800f564:	464b      	mov	r3, r9
 800f566:	4640      	mov	r0, r8
 800f568:	4649      	mov	r1, r9
 800f56a:	f7f1 f845 	bl	80005f8 <__aeabi_dmul>
 800f56e:	a360      	add	r3, pc, #384	@ (adr r3, 800f6f0 <__ieee754_pow+0xa40>)
 800f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	f7f1 f83e 	bl	80005f8 <__aeabi_dmul>
 800f57c:	a35e      	add	r3, pc, #376	@ (adr r3, 800f6f8 <__ieee754_pow+0xa48>)
 800f57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f582:	f7f0 fe81 	bl	8000288 <__aeabi_dsub>
 800f586:	4622      	mov	r2, r4
 800f588:	462b      	mov	r3, r5
 800f58a:	f7f1 f835 	bl	80005f8 <__aeabi_dmul>
 800f58e:	a35c      	add	r3, pc, #368	@ (adr r3, 800f700 <__ieee754_pow+0xa50>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	f7f0 fe7a 	bl	800028c <__adddf3>
 800f598:	4622      	mov	r2, r4
 800f59a:	462b      	mov	r3, r5
 800f59c:	f7f1 f82c 	bl	80005f8 <__aeabi_dmul>
 800f5a0:	a359      	add	r3, pc, #356	@ (adr r3, 800f708 <__ieee754_pow+0xa58>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f7f0 fe6f 	bl	8000288 <__aeabi_dsub>
 800f5aa:	4622      	mov	r2, r4
 800f5ac:	462b      	mov	r3, r5
 800f5ae:	f7f1 f823 	bl	80005f8 <__aeabi_dmul>
 800f5b2:	a357      	add	r3, pc, #348	@ (adr r3, 800f710 <__ieee754_pow+0xa60>)
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	f7f0 fe68 	bl	800028c <__adddf3>
 800f5bc:	4622      	mov	r2, r4
 800f5be:	462b      	mov	r3, r5
 800f5c0:	f7f1 f81a 	bl	80005f8 <__aeabi_dmul>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	4649      	mov	r1, r9
 800f5cc:	f7f0 fe5c 	bl	8000288 <__aeabi_dsub>
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	460d      	mov	r5, r1
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	4640      	mov	r0, r8
 800f5da:	4649      	mov	r1, r9
 800f5dc:	f7f1 f80c 	bl	80005f8 <__aeabi_dmul>
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	e9cd 0100 	strd	r0, r1, [sp]
 800f5e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	f7f0 fe4b 	bl	8000288 <__aeabi_dsub>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5fa:	f7f1 f927 	bl	800084c <__aeabi_ddiv>
 800f5fe:	4632      	mov	r2, r6
 800f600:	4604      	mov	r4, r0
 800f602:	460d      	mov	r5, r1
 800f604:	463b      	mov	r3, r7
 800f606:	4640      	mov	r0, r8
 800f608:	4649      	mov	r1, r9
 800f60a:	f7f0 fff5 	bl	80005f8 <__aeabi_dmul>
 800f60e:	4632      	mov	r2, r6
 800f610:	463b      	mov	r3, r7
 800f612:	f7f0 fe3b 	bl	800028c <__adddf3>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	4620      	mov	r0, r4
 800f61c:	4629      	mov	r1, r5
 800f61e:	f7f0 fe33 	bl	8000288 <__aeabi_dsub>
 800f622:	4642      	mov	r2, r8
 800f624:	464b      	mov	r3, r9
 800f626:	f7f0 fe2f 	bl	8000288 <__aeabi_dsub>
 800f62a:	460b      	mov	r3, r1
 800f62c:	4602      	mov	r2, r0
 800f62e:	493b      	ldr	r1, [pc, #236]	@ (800f71c <__ieee754_pow+0xa6c>)
 800f630:	2000      	movs	r0, #0
 800f632:	f7f0 fe29 	bl	8000288 <__aeabi_dsub>
 800f636:	ec41 0b10 	vmov	d0, r0, r1
 800f63a:	ee10 3a90 	vmov	r3, s1
 800f63e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f646:	da30      	bge.n	800f6aa <__ieee754_pow+0x9fa>
 800f648:	4650      	mov	r0, sl
 800f64a:	f000 fcad 	bl	800ffa8 <scalbn>
 800f64e:	ec51 0b10 	vmov	r0, r1, d0
 800f652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f656:	f7ff bbd2 	b.w	800edfe <__ieee754_pow+0x14e>
 800f65a:	4c31      	ldr	r4, [pc, #196]	@ (800f720 <__ieee754_pow+0xa70>)
 800f65c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f660:	42a3      	cmp	r3, r4
 800f662:	d91a      	bls.n	800f69a <__ieee754_pow+0x9ea>
 800f664:	4b2f      	ldr	r3, [pc, #188]	@ (800f724 <__ieee754_pow+0xa74>)
 800f666:	440b      	add	r3, r1
 800f668:	4303      	orrs	r3, r0
 800f66a:	d009      	beq.n	800f680 <__ieee754_pow+0x9d0>
 800f66c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f670:	2200      	movs	r2, #0
 800f672:	2300      	movs	r3, #0
 800f674:	f7f1 fa32 	bl	8000adc <__aeabi_dcmplt>
 800f678:	3800      	subs	r0, #0
 800f67a:	bf18      	it	ne
 800f67c:	2001      	movne	r0, #1
 800f67e:	e42b      	b.n	800eed8 <__ieee754_pow+0x228>
 800f680:	4642      	mov	r2, r8
 800f682:	464b      	mov	r3, r9
 800f684:	f7f0 fe00 	bl	8000288 <__aeabi_dsub>
 800f688:	4632      	mov	r2, r6
 800f68a:	463b      	mov	r3, r7
 800f68c:	f7f1 fa3a 	bl	8000b04 <__aeabi_dcmpge>
 800f690:	2800      	cmp	r0, #0
 800f692:	d1eb      	bne.n	800f66c <__ieee754_pow+0x9bc>
 800f694:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f734 <__ieee754_pow+0xa84>
 800f698:	e6f7      	b.n	800f48a <__ieee754_pow+0x7da>
 800f69a:	469a      	mov	sl, r3
 800f69c:	4b22      	ldr	r3, [pc, #136]	@ (800f728 <__ieee754_pow+0xa78>)
 800f69e:	459a      	cmp	sl, r3
 800f6a0:	f63f aef3 	bhi.w	800f48a <__ieee754_pow+0x7da>
 800f6a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f6a8:	e715      	b.n	800f4d6 <__ieee754_pow+0x826>
 800f6aa:	ec51 0b10 	vmov	r0, r1, d0
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	e7cf      	b.n	800f652 <__ieee754_pow+0x9a2>
 800f6b2:	491a      	ldr	r1, [pc, #104]	@ (800f71c <__ieee754_pow+0xa6c>)
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	f7ff bb18 	b.w	800ecea <__ieee754_pow+0x3a>
 800f6ba:	2000      	movs	r0, #0
 800f6bc:	2100      	movs	r1, #0
 800f6be:	f7ff bb14 	b.w	800ecea <__ieee754_pow+0x3a>
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	4639      	mov	r1, r7
 800f6c6:	f7ff bb10 	b.w	800ecea <__ieee754_pow+0x3a>
 800f6ca:	460c      	mov	r4, r1
 800f6cc:	f7ff bb5e 	b.w	800ed8c <__ieee754_pow+0xdc>
 800f6d0:	2400      	movs	r4, #0
 800f6d2:	f7ff bb49 	b.w	800ed68 <__ieee754_pow+0xb8>
 800f6d6:	bf00      	nop
 800f6d8:	00000000 	.word	0x00000000
 800f6dc:	3fe62e43 	.word	0x3fe62e43
 800f6e0:	fefa39ef 	.word	0xfefa39ef
 800f6e4:	3fe62e42 	.word	0x3fe62e42
 800f6e8:	0ca86c39 	.word	0x0ca86c39
 800f6ec:	be205c61 	.word	0xbe205c61
 800f6f0:	72bea4d0 	.word	0x72bea4d0
 800f6f4:	3e663769 	.word	0x3e663769
 800f6f8:	c5d26bf1 	.word	0xc5d26bf1
 800f6fc:	3ebbbd41 	.word	0x3ebbbd41
 800f700:	af25de2c 	.word	0xaf25de2c
 800f704:	3f11566a 	.word	0x3f11566a
 800f708:	16bebd93 	.word	0x16bebd93
 800f70c:	3f66c16c 	.word	0x3f66c16c
 800f710:	5555553e 	.word	0x5555553e
 800f714:	3fc55555 	.word	0x3fc55555
 800f718:	fff00000 	.word	0xfff00000
 800f71c:	3ff00000 	.word	0x3ff00000
 800f720:	4090cbff 	.word	0x4090cbff
 800f724:	3f6f3400 	.word	0x3f6f3400
 800f728:	3fe00000 	.word	0x3fe00000
 800f72c:	652b82fe 	.word	0x652b82fe
 800f730:	3c971547 	.word	0x3c971547
 800f734:	4090cc00 	.word	0x4090cc00

0800f738 <atan>:
 800f738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73c:	ec55 4b10 	vmov	r4, r5, d0
 800f740:	4bbf      	ldr	r3, [pc, #764]	@ (800fa40 <atan+0x308>)
 800f742:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f746:	429e      	cmp	r6, r3
 800f748:	46ab      	mov	fp, r5
 800f74a:	d918      	bls.n	800f77e <atan+0x46>
 800f74c:	4bbd      	ldr	r3, [pc, #756]	@ (800fa44 <atan+0x30c>)
 800f74e:	429e      	cmp	r6, r3
 800f750:	d801      	bhi.n	800f756 <atan+0x1e>
 800f752:	d109      	bne.n	800f768 <atan+0x30>
 800f754:	b144      	cbz	r4, 800f768 <atan+0x30>
 800f756:	4622      	mov	r2, r4
 800f758:	462b      	mov	r3, r5
 800f75a:	4620      	mov	r0, r4
 800f75c:	4629      	mov	r1, r5
 800f75e:	f7f0 fd95 	bl	800028c <__adddf3>
 800f762:	4604      	mov	r4, r0
 800f764:	460d      	mov	r5, r1
 800f766:	e006      	b.n	800f776 <atan+0x3e>
 800f768:	f1bb 0f00 	cmp.w	fp, #0
 800f76c:	f340 812b 	ble.w	800f9c6 <atan+0x28e>
 800f770:	a597      	add	r5, pc, #604	@ (adr r5, 800f9d0 <atan+0x298>)
 800f772:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f776:	ec45 4b10 	vmov	d0, r4, r5
 800f77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f77e:	4bb2      	ldr	r3, [pc, #712]	@ (800fa48 <atan+0x310>)
 800f780:	429e      	cmp	r6, r3
 800f782:	d813      	bhi.n	800f7ac <atan+0x74>
 800f784:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f788:	429e      	cmp	r6, r3
 800f78a:	d80c      	bhi.n	800f7a6 <atan+0x6e>
 800f78c:	a392      	add	r3, pc, #584	@ (adr r3, 800f9d8 <atan+0x2a0>)
 800f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f792:	4620      	mov	r0, r4
 800f794:	4629      	mov	r1, r5
 800f796:	f7f0 fd79 	bl	800028c <__adddf3>
 800f79a:	4bac      	ldr	r3, [pc, #688]	@ (800fa4c <atan+0x314>)
 800f79c:	2200      	movs	r2, #0
 800f79e:	f7f1 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 800f7a2:	2800      	cmp	r0, #0
 800f7a4:	d1e7      	bne.n	800f776 <atan+0x3e>
 800f7a6:	f04f 3aff 	mov.w	sl, #4294967295
 800f7aa:	e029      	b.n	800f800 <atan+0xc8>
 800f7ac:	f7fe fdec 	bl	800e388 <fabs>
 800f7b0:	4ba7      	ldr	r3, [pc, #668]	@ (800fa50 <atan+0x318>)
 800f7b2:	429e      	cmp	r6, r3
 800f7b4:	ec55 4b10 	vmov	r4, r5, d0
 800f7b8:	f200 80bc 	bhi.w	800f934 <atan+0x1fc>
 800f7bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f7c0:	429e      	cmp	r6, r3
 800f7c2:	f200 809e 	bhi.w	800f902 <atan+0x1ca>
 800f7c6:	4622      	mov	r2, r4
 800f7c8:	462b      	mov	r3, r5
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	f7f0 fd5d 	bl	800028c <__adddf3>
 800f7d2:	4b9e      	ldr	r3, [pc, #632]	@ (800fa4c <atan+0x314>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f7f0 fd57 	bl	8000288 <__aeabi_dsub>
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4606      	mov	r6, r0
 800f7de:	460f      	mov	r7, r1
 800f7e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	4629      	mov	r1, r5
 800f7e8:	f7f0 fd50 	bl	800028c <__adddf3>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	f7f1 f82a 	bl	800084c <__aeabi_ddiv>
 800f7f8:	f04f 0a00 	mov.w	sl, #0
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	460d      	mov	r5, r1
 800f800:	4622      	mov	r2, r4
 800f802:	462b      	mov	r3, r5
 800f804:	4620      	mov	r0, r4
 800f806:	4629      	mov	r1, r5
 800f808:	f7f0 fef6 	bl	80005f8 <__aeabi_dmul>
 800f80c:	4602      	mov	r2, r0
 800f80e:	460b      	mov	r3, r1
 800f810:	4680      	mov	r8, r0
 800f812:	4689      	mov	r9, r1
 800f814:	f7f0 fef0 	bl	80005f8 <__aeabi_dmul>
 800f818:	a371      	add	r3, pc, #452	@ (adr r3, 800f9e0 <atan+0x2a8>)
 800f81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81e:	4606      	mov	r6, r0
 800f820:	460f      	mov	r7, r1
 800f822:	f7f0 fee9 	bl	80005f8 <__aeabi_dmul>
 800f826:	a370      	add	r3, pc, #448	@ (adr r3, 800f9e8 <atan+0x2b0>)
 800f828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82c:	f7f0 fd2e 	bl	800028c <__adddf3>
 800f830:	4632      	mov	r2, r6
 800f832:	463b      	mov	r3, r7
 800f834:	f7f0 fee0 	bl	80005f8 <__aeabi_dmul>
 800f838:	a36d      	add	r3, pc, #436	@ (adr r3, 800f9f0 <atan+0x2b8>)
 800f83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83e:	f7f0 fd25 	bl	800028c <__adddf3>
 800f842:	4632      	mov	r2, r6
 800f844:	463b      	mov	r3, r7
 800f846:	f7f0 fed7 	bl	80005f8 <__aeabi_dmul>
 800f84a:	a36b      	add	r3, pc, #428	@ (adr r3, 800f9f8 <atan+0x2c0>)
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	f7f0 fd1c 	bl	800028c <__adddf3>
 800f854:	4632      	mov	r2, r6
 800f856:	463b      	mov	r3, r7
 800f858:	f7f0 fece 	bl	80005f8 <__aeabi_dmul>
 800f85c:	a368      	add	r3, pc, #416	@ (adr r3, 800fa00 <atan+0x2c8>)
 800f85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f862:	f7f0 fd13 	bl	800028c <__adddf3>
 800f866:	4632      	mov	r2, r6
 800f868:	463b      	mov	r3, r7
 800f86a:	f7f0 fec5 	bl	80005f8 <__aeabi_dmul>
 800f86e:	a366      	add	r3, pc, #408	@ (adr r3, 800fa08 <atan+0x2d0>)
 800f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f874:	f7f0 fd0a 	bl	800028c <__adddf3>
 800f878:	4642      	mov	r2, r8
 800f87a:	464b      	mov	r3, r9
 800f87c:	f7f0 febc 	bl	80005f8 <__aeabi_dmul>
 800f880:	a363      	add	r3, pc, #396	@ (adr r3, 800fa10 <atan+0x2d8>)
 800f882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f886:	4680      	mov	r8, r0
 800f888:	4689      	mov	r9, r1
 800f88a:	4630      	mov	r0, r6
 800f88c:	4639      	mov	r1, r7
 800f88e:	f7f0 feb3 	bl	80005f8 <__aeabi_dmul>
 800f892:	a361      	add	r3, pc, #388	@ (adr r3, 800fa18 <atan+0x2e0>)
 800f894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f898:	f7f0 fcf6 	bl	8000288 <__aeabi_dsub>
 800f89c:	4632      	mov	r2, r6
 800f89e:	463b      	mov	r3, r7
 800f8a0:	f7f0 feaa 	bl	80005f8 <__aeabi_dmul>
 800f8a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800fa20 <atan+0x2e8>)
 800f8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8aa:	f7f0 fced 	bl	8000288 <__aeabi_dsub>
 800f8ae:	4632      	mov	r2, r6
 800f8b0:	463b      	mov	r3, r7
 800f8b2:	f7f0 fea1 	bl	80005f8 <__aeabi_dmul>
 800f8b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800fa28 <atan+0x2f0>)
 800f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8bc:	f7f0 fce4 	bl	8000288 <__aeabi_dsub>
 800f8c0:	4632      	mov	r2, r6
 800f8c2:	463b      	mov	r3, r7
 800f8c4:	f7f0 fe98 	bl	80005f8 <__aeabi_dmul>
 800f8c8:	a359      	add	r3, pc, #356	@ (adr r3, 800fa30 <atan+0x2f8>)
 800f8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ce:	f7f0 fcdb 	bl	8000288 <__aeabi_dsub>
 800f8d2:	4632      	mov	r2, r6
 800f8d4:	463b      	mov	r3, r7
 800f8d6:	f7f0 fe8f 	bl	80005f8 <__aeabi_dmul>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	4640      	mov	r0, r8
 800f8e0:	4649      	mov	r1, r9
 800f8e2:	f7f0 fcd3 	bl	800028c <__adddf3>
 800f8e6:	4622      	mov	r2, r4
 800f8e8:	462b      	mov	r3, r5
 800f8ea:	f7f0 fe85 	bl	80005f8 <__aeabi_dmul>
 800f8ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	d148      	bne.n	800f98a <atan+0x252>
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	f7f0 fcc4 	bl	8000288 <__aeabi_dsub>
 800f900:	e72f      	b.n	800f762 <atan+0x2a>
 800f902:	4b52      	ldr	r3, [pc, #328]	@ (800fa4c <atan+0x314>)
 800f904:	2200      	movs	r2, #0
 800f906:	4620      	mov	r0, r4
 800f908:	4629      	mov	r1, r5
 800f90a:	f7f0 fcbd 	bl	8000288 <__aeabi_dsub>
 800f90e:	4b4f      	ldr	r3, [pc, #316]	@ (800fa4c <atan+0x314>)
 800f910:	4606      	mov	r6, r0
 800f912:	460f      	mov	r7, r1
 800f914:	2200      	movs	r2, #0
 800f916:	4620      	mov	r0, r4
 800f918:	4629      	mov	r1, r5
 800f91a:	f7f0 fcb7 	bl	800028c <__adddf3>
 800f91e:	4602      	mov	r2, r0
 800f920:	460b      	mov	r3, r1
 800f922:	4630      	mov	r0, r6
 800f924:	4639      	mov	r1, r7
 800f926:	f7f0 ff91 	bl	800084c <__aeabi_ddiv>
 800f92a:	f04f 0a01 	mov.w	sl, #1
 800f92e:	4604      	mov	r4, r0
 800f930:	460d      	mov	r5, r1
 800f932:	e765      	b.n	800f800 <atan+0xc8>
 800f934:	4b47      	ldr	r3, [pc, #284]	@ (800fa54 <atan+0x31c>)
 800f936:	429e      	cmp	r6, r3
 800f938:	d21c      	bcs.n	800f974 <atan+0x23c>
 800f93a:	4b47      	ldr	r3, [pc, #284]	@ (800fa58 <atan+0x320>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	4620      	mov	r0, r4
 800f940:	4629      	mov	r1, r5
 800f942:	f7f0 fca1 	bl	8000288 <__aeabi_dsub>
 800f946:	4b44      	ldr	r3, [pc, #272]	@ (800fa58 <atan+0x320>)
 800f948:	4606      	mov	r6, r0
 800f94a:	460f      	mov	r7, r1
 800f94c:	2200      	movs	r2, #0
 800f94e:	4620      	mov	r0, r4
 800f950:	4629      	mov	r1, r5
 800f952:	f7f0 fe51 	bl	80005f8 <__aeabi_dmul>
 800f956:	4b3d      	ldr	r3, [pc, #244]	@ (800fa4c <atan+0x314>)
 800f958:	2200      	movs	r2, #0
 800f95a:	f7f0 fc97 	bl	800028c <__adddf3>
 800f95e:	4602      	mov	r2, r0
 800f960:	460b      	mov	r3, r1
 800f962:	4630      	mov	r0, r6
 800f964:	4639      	mov	r1, r7
 800f966:	f7f0 ff71 	bl	800084c <__aeabi_ddiv>
 800f96a:	f04f 0a02 	mov.w	sl, #2
 800f96e:	4604      	mov	r4, r0
 800f970:	460d      	mov	r5, r1
 800f972:	e745      	b.n	800f800 <atan+0xc8>
 800f974:	4622      	mov	r2, r4
 800f976:	462b      	mov	r3, r5
 800f978:	4938      	ldr	r1, [pc, #224]	@ (800fa5c <atan+0x324>)
 800f97a:	2000      	movs	r0, #0
 800f97c:	f7f0 ff66 	bl	800084c <__aeabi_ddiv>
 800f980:	f04f 0a03 	mov.w	sl, #3
 800f984:	4604      	mov	r4, r0
 800f986:	460d      	mov	r5, r1
 800f988:	e73a      	b.n	800f800 <atan+0xc8>
 800f98a:	4b35      	ldr	r3, [pc, #212]	@ (800fa60 <atan+0x328>)
 800f98c:	4e35      	ldr	r6, [pc, #212]	@ (800fa64 <atan+0x32c>)
 800f98e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	f7f0 fc77 	bl	8000288 <__aeabi_dsub>
 800f99a:	4622      	mov	r2, r4
 800f99c:	462b      	mov	r3, r5
 800f99e:	f7f0 fc73 	bl	8000288 <__aeabi_dsub>
 800f9a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f9ae:	f7f0 fc6b 	bl	8000288 <__aeabi_dsub>
 800f9b2:	f1bb 0f00 	cmp.w	fp, #0
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	460d      	mov	r5, r1
 800f9ba:	f6bf aedc 	bge.w	800f776 <atan+0x3e>
 800f9be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f9c2:	461d      	mov	r5, r3
 800f9c4:	e6d7      	b.n	800f776 <atan+0x3e>
 800f9c6:	a51c      	add	r5, pc, #112	@ (adr r5, 800fa38 <atan+0x300>)
 800f9c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f9cc:	e6d3      	b.n	800f776 <atan+0x3e>
 800f9ce:	bf00      	nop
 800f9d0:	54442d18 	.word	0x54442d18
 800f9d4:	3ff921fb 	.word	0x3ff921fb
 800f9d8:	8800759c 	.word	0x8800759c
 800f9dc:	7e37e43c 	.word	0x7e37e43c
 800f9e0:	e322da11 	.word	0xe322da11
 800f9e4:	3f90ad3a 	.word	0x3f90ad3a
 800f9e8:	24760deb 	.word	0x24760deb
 800f9ec:	3fa97b4b 	.word	0x3fa97b4b
 800f9f0:	a0d03d51 	.word	0xa0d03d51
 800f9f4:	3fb10d66 	.word	0x3fb10d66
 800f9f8:	c54c206e 	.word	0xc54c206e
 800f9fc:	3fb745cd 	.word	0x3fb745cd
 800fa00:	920083ff 	.word	0x920083ff
 800fa04:	3fc24924 	.word	0x3fc24924
 800fa08:	5555550d 	.word	0x5555550d
 800fa0c:	3fd55555 	.word	0x3fd55555
 800fa10:	2c6a6c2f 	.word	0x2c6a6c2f
 800fa14:	bfa2b444 	.word	0xbfa2b444
 800fa18:	52defd9a 	.word	0x52defd9a
 800fa1c:	3fadde2d 	.word	0x3fadde2d
 800fa20:	af749a6d 	.word	0xaf749a6d
 800fa24:	3fb3b0f2 	.word	0x3fb3b0f2
 800fa28:	fe231671 	.word	0xfe231671
 800fa2c:	3fbc71c6 	.word	0x3fbc71c6
 800fa30:	9998ebc4 	.word	0x9998ebc4
 800fa34:	3fc99999 	.word	0x3fc99999
 800fa38:	54442d18 	.word	0x54442d18
 800fa3c:	bff921fb 	.word	0xbff921fb
 800fa40:	440fffff 	.word	0x440fffff
 800fa44:	7ff00000 	.word	0x7ff00000
 800fa48:	3fdbffff 	.word	0x3fdbffff
 800fa4c:	3ff00000 	.word	0x3ff00000
 800fa50:	3ff2ffff 	.word	0x3ff2ffff
 800fa54:	40038000 	.word	0x40038000
 800fa58:	3ff80000 	.word	0x3ff80000
 800fa5c:	bff00000 	.word	0xbff00000
 800fa60:	08010c50 	.word	0x08010c50
 800fa64:	08010c70 	.word	0x08010c70

0800fa68 <__kernel_cosf>:
 800fa68:	ee10 3a10 	vmov	r3, s0
 800fa6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa70:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fa74:	eef0 6a40 	vmov.f32	s13, s0
 800fa78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fa7c:	d204      	bcs.n	800fa88 <__kernel_cosf+0x20>
 800fa7e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fa82:	ee17 2a90 	vmov	r2, s15
 800fa86:	b342      	cbz	r2, 800fada <__kernel_cosf+0x72>
 800fa88:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fa8c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800faf8 <__kernel_cosf+0x90>
 800fa90:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800fafc <__kernel_cosf+0x94>
 800fa94:	4a1a      	ldr	r2, [pc, #104]	@ (800fb00 <__kernel_cosf+0x98>)
 800fa96:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fb04 <__kernel_cosf+0x9c>
 800faa0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800faa4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800fb08 <__kernel_cosf+0xa0>
 800faa8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800faac:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800fb0c <__kernel_cosf+0xa4>
 800fab0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fab4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800fb10 <__kernel_cosf+0xa8>
 800fab8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fabc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800fac0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800fac4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fac8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800facc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fad0:	d804      	bhi.n	800fadc <__kernel_cosf+0x74>
 800fad2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fad6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fada:	4770      	bx	lr
 800fadc:	4a0d      	ldr	r2, [pc, #52]	@ (800fb14 <__kernel_cosf+0xac>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	bf9a      	itte	ls
 800fae2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800fae6:	ee07 3a10 	vmovls	s14, r3
 800faea:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800faee:	ee30 0a47 	vsub.f32	s0, s0, s14
 800faf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faf6:	e7ec      	b.n	800fad2 <__kernel_cosf+0x6a>
 800faf8:	ad47d74e 	.word	0xad47d74e
 800fafc:	310f74f6 	.word	0x310f74f6
 800fb00:	3e999999 	.word	0x3e999999
 800fb04:	b493f27c 	.word	0xb493f27c
 800fb08:	37d00d01 	.word	0x37d00d01
 800fb0c:	bab60b61 	.word	0xbab60b61
 800fb10:	3d2aaaab 	.word	0x3d2aaaab
 800fb14:	3f480000 	.word	0x3f480000

0800fb18 <__kernel_sinf>:
 800fb18:	ee10 3a10 	vmov	r3, s0
 800fb1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fb20:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fb24:	d204      	bcs.n	800fb30 <__kernel_sinf+0x18>
 800fb26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fb2a:	ee17 3a90 	vmov	r3, s15
 800fb2e:	b35b      	cbz	r3, 800fb88 <__kernel_sinf+0x70>
 800fb30:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fb34:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fb8c <__kernel_sinf+0x74>
 800fb38:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800fb90 <__kernel_sinf+0x78>
 800fb3c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fb40:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800fb94 <__kernel_sinf+0x7c>
 800fb44:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb48:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800fb98 <__kernel_sinf+0x80>
 800fb4c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fb50:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800fb9c <__kernel_sinf+0x84>
 800fb54:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fb58:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb5c:	b930      	cbnz	r0, 800fb6c <__kernel_sinf+0x54>
 800fb5e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800fba0 <__kernel_sinf+0x88>
 800fb62:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fb66:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fb6a:	4770      	bx	lr
 800fb6c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fb70:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fb74:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fb78:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fb7c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800fba4 <__kernel_sinf+0x8c>
 800fb80:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fb84:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop
 800fb8c:	2f2ec9d3 	.word	0x2f2ec9d3
 800fb90:	b2d72f34 	.word	0xb2d72f34
 800fb94:	3638ef1b 	.word	0x3638ef1b
 800fb98:	b9500d01 	.word	0xb9500d01
 800fb9c:	3c088889 	.word	0x3c088889
 800fba0:	be2aaaab 	.word	0xbe2aaaab
 800fba4:	3e2aaaab 	.word	0x3e2aaaab

0800fba8 <__ieee754_expf>:
 800fba8:	ee10 2a10 	vmov	r2, s0
 800fbac:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800fbb0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fbb4:	d902      	bls.n	800fbbc <__ieee754_expf+0x14>
 800fbb6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fbba:	4770      	bx	lr
 800fbbc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800fbc0:	d106      	bne.n	800fbd0 <__ieee754_expf+0x28>
 800fbc2:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800fcfc <__ieee754_expf+0x154>
 800fbc6:	2900      	cmp	r1, #0
 800fbc8:	bf18      	it	ne
 800fbca:	eeb0 0a67 	vmovne.f32	s0, s15
 800fbce:	4770      	bx	lr
 800fbd0:	484b      	ldr	r0, [pc, #300]	@ (800fd00 <__ieee754_expf+0x158>)
 800fbd2:	4282      	cmp	r2, r0
 800fbd4:	dd02      	ble.n	800fbdc <__ieee754_expf+0x34>
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	f000 bb28 	b.w	801022c <__math_oflowf>
 800fbdc:	2a00      	cmp	r2, #0
 800fbde:	da05      	bge.n	800fbec <__ieee754_expf+0x44>
 800fbe0:	4a48      	ldr	r2, [pc, #288]	@ (800fd04 <__ieee754_expf+0x15c>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d902      	bls.n	800fbec <__ieee754_expf+0x44>
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	f000 bb1a 	b.w	8010220 <__math_uflowf>
 800fbec:	4a46      	ldr	r2, [pc, #280]	@ (800fd08 <__ieee754_expf+0x160>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800fbf4:	d952      	bls.n	800fc9c <__ieee754_expf+0xf4>
 800fbf6:	4a45      	ldr	r2, [pc, #276]	@ (800fd0c <__ieee754_expf+0x164>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800fbfe:	d834      	bhi.n	800fc6a <__ieee754_expf+0xc2>
 800fc00:	4b43      	ldr	r3, [pc, #268]	@ (800fd10 <__ieee754_expf+0x168>)
 800fc02:	4413      	add	r3, r2
 800fc04:	ed93 7a00 	vldr	s14, [r3]
 800fc08:	4b42      	ldr	r3, [pc, #264]	@ (800fd14 <__ieee754_expf+0x16c>)
 800fc0a:	4413      	add	r3, r2
 800fc0c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800fc10:	f1c1 0201 	rsb	r2, r1, #1
 800fc14:	edd3 7a00 	vldr	s15, [r3]
 800fc18:	1a52      	subs	r2, r2, r1
 800fc1a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800fc1e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800fc22:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800fd18 <__ieee754_expf+0x170>
 800fc26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fd1c <__ieee754_expf+0x174>
 800fc2a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800fc2e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800fd20 <__ieee754_expf+0x178>
 800fc32:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fc36:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fd24 <__ieee754_expf+0x17c>
 800fc3a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800fc3e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800fd28 <__ieee754_expf+0x180>
 800fc42:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fc46:	eef0 6a40 	vmov.f32	s13, s0
 800fc4a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800fc4e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800fc52:	ee20 5a26 	vmul.f32	s10, s0, s13
 800fc56:	bb92      	cbnz	r2, 800fcbe <__ieee754_expf+0x116>
 800fc58:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800fc5c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800fc60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fc64:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800fc68:	4770      	bx	lr
 800fc6a:	4b30      	ldr	r3, [pc, #192]	@ (800fd2c <__ieee754_expf+0x184>)
 800fc6c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800fd30 <__ieee754_expf+0x188>
 800fc70:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800fd34 <__ieee754_expf+0x18c>
 800fc74:	4413      	add	r3, r2
 800fc76:	edd3 7a00 	vldr	s15, [r3]
 800fc7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fc7e:	eeb0 7a40 	vmov.f32	s14, s0
 800fc82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc86:	ee17 2a90 	vmov	r2, s15
 800fc8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc8e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800fc92:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800fd38 <__ieee754_expf+0x190>
 800fc96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fc9a:	e7be      	b.n	800fc1a <__ieee754_expf+0x72>
 800fc9c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800fca0:	d20b      	bcs.n	800fcba <__ieee754_expf+0x112>
 800fca2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800fd3c <__ieee754_expf+0x194>
 800fca6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800fcaa:	eef4 6ae5 	vcmpe.f32	s13, s11
 800fcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb2:	dd02      	ble.n	800fcba <__ieee754_expf+0x112>
 800fcb4:	ee30 0a25 	vadd.f32	s0, s0, s11
 800fcb8:	4770      	bx	lr
 800fcba:	2200      	movs	r2, #0
 800fcbc:	e7af      	b.n	800fc1e <__ieee754_expf+0x76>
 800fcbe:	ee36 6a66 	vsub.f32	s12, s12, s13
 800fcc2:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800fcc6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800fcca:	bfb8      	it	lt
 800fccc:	3264      	addlt	r2, #100	@ 0x64
 800fcce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fcd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcd6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fcda:	ee17 3a90 	vmov	r3, s15
 800fcde:	bfab      	itete	ge
 800fce0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800fce4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800fce8:	ee00 3a10 	vmovge	s0, r3
 800fcec:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800fd40 <__ieee754_expf+0x198>
 800fcf0:	bfbc      	itt	lt
 800fcf2:	ee00 3a10 	vmovlt	s0, r3
 800fcf6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800fcfa:	4770      	bx	lr
 800fcfc:	00000000 	.word	0x00000000
 800fd00:	42b17217 	.word	0x42b17217
 800fd04:	42cff1b5 	.word	0x42cff1b5
 800fd08:	3eb17218 	.word	0x3eb17218
 800fd0c:	3f851591 	.word	0x3f851591
 800fd10:	08010c98 	.word	0x08010c98
 800fd14:	08010c90 	.word	0x08010c90
 800fd18:	3331bb4c 	.word	0x3331bb4c
 800fd1c:	b5ddea0e 	.word	0xb5ddea0e
 800fd20:	388ab355 	.word	0x388ab355
 800fd24:	bb360b61 	.word	0xbb360b61
 800fd28:	3e2aaaab 	.word	0x3e2aaaab
 800fd2c:	08010ca0 	.word	0x08010ca0
 800fd30:	3fb8aa3b 	.word	0x3fb8aa3b
 800fd34:	3f317180 	.word	0x3f317180
 800fd38:	3717f7d1 	.word	0x3717f7d1
 800fd3c:	7149f2ca 	.word	0x7149f2ca
 800fd40:	0d800000 	.word	0x0d800000

0800fd44 <__ieee754_rem_pio2f>:
 800fd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd46:	ee10 6a10 	vmov	r6, s0
 800fd4a:	4b88      	ldr	r3, [pc, #544]	@ (800ff6c <__ieee754_rem_pio2f+0x228>)
 800fd4c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800fd50:	429d      	cmp	r5, r3
 800fd52:	b087      	sub	sp, #28
 800fd54:	4604      	mov	r4, r0
 800fd56:	d805      	bhi.n	800fd64 <__ieee754_rem_pio2f+0x20>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	ed80 0a00 	vstr	s0, [r0]
 800fd5e:	6043      	str	r3, [r0, #4]
 800fd60:	2000      	movs	r0, #0
 800fd62:	e022      	b.n	800fdaa <__ieee754_rem_pio2f+0x66>
 800fd64:	4b82      	ldr	r3, [pc, #520]	@ (800ff70 <__ieee754_rem_pio2f+0x22c>)
 800fd66:	429d      	cmp	r5, r3
 800fd68:	d83a      	bhi.n	800fde0 <__ieee754_rem_pio2f+0x9c>
 800fd6a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fd6e:	2e00      	cmp	r6, #0
 800fd70:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ff74 <__ieee754_rem_pio2f+0x230>
 800fd74:	4a80      	ldr	r2, [pc, #512]	@ (800ff78 <__ieee754_rem_pio2f+0x234>)
 800fd76:	f023 030f 	bic.w	r3, r3, #15
 800fd7a:	dd18      	ble.n	800fdae <__ieee754_rem_pio2f+0x6a>
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800fd82:	bf09      	itett	eq
 800fd84:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800ff7c <__ieee754_rem_pio2f+0x238>
 800fd88:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800ff80 <__ieee754_rem_pio2f+0x23c>
 800fd8c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ff84 <__ieee754_rem_pio2f+0x240>
 800fd90:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800fd94:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800fd98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd9c:	ed80 7a00 	vstr	s14, [r0]
 800fda0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fda4:	edc0 7a01 	vstr	s15, [r0, #4]
 800fda8:	2001      	movs	r0, #1
 800fdaa:	b007      	add	sp, #28
 800fdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800fdb4:	bf09      	itett	eq
 800fdb6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800ff7c <__ieee754_rem_pio2f+0x238>
 800fdba:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800ff80 <__ieee754_rem_pio2f+0x23c>
 800fdbe:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ff84 <__ieee754_rem_pio2f+0x240>
 800fdc2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800fdc6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fdca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdce:	ed80 7a00 	vstr	s14, [r0]
 800fdd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdd6:	edc0 7a01 	vstr	s15, [r0, #4]
 800fdda:	f04f 30ff 	mov.w	r0, #4294967295
 800fdde:	e7e4      	b.n	800fdaa <__ieee754_rem_pio2f+0x66>
 800fde0:	4b69      	ldr	r3, [pc, #420]	@ (800ff88 <__ieee754_rem_pio2f+0x244>)
 800fde2:	429d      	cmp	r5, r3
 800fde4:	d873      	bhi.n	800fece <__ieee754_rem_pio2f+0x18a>
 800fde6:	f7fe fb51 	bl	800e48c <fabsf>
 800fdea:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ff8c <__ieee754_rem_pio2f+0x248>
 800fdee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fdf2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fdf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fdfe:	ee17 0a90 	vmov	r0, s15
 800fe02:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ff74 <__ieee754_rem_pio2f+0x230>
 800fe06:	eea7 0a67 	vfms.f32	s0, s14, s15
 800fe0a:	281f      	cmp	r0, #31
 800fe0c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ff80 <__ieee754_rem_pio2f+0x23c>
 800fe10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe14:	eeb1 6a47 	vneg.f32	s12, s14
 800fe18:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fe1c:	ee16 1a90 	vmov	r1, s13
 800fe20:	dc09      	bgt.n	800fe36 <__ieee754_rem_pio2f+0xf2>
 800fe22:	4a5b      	ldr	r2, [pc, #364]	@ (800ff90 <__ieee754_rem_pio2f+0x24c>)
 800fe24:	1e47      	subs	r7, r0, #1
 800fe26:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fe2a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800fe2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d107      	bne.n	800fe46 <__ieee754_rem_pio2f+0x102>
 800fe36:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800fe3a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800fe3e:	2a08      	cmp	r2, #8
 800fe40:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800fe44:	dc14      	bgt.n	800fe70 <__ieee754_rem_pio2f+0x12c>
 800fe46:	6021      	str	r1, [r4, #0]
 800fe48:	ed94 7a00 	vldr	s14, [r4]
 800fe4c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fe50:	2e00      	cmp	r6, #0
 800fe52:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fe56:	ed84 0a01 	vstr	s0, [r4, #4]
 800fe5a:	daa6      	bge.n	800fdaa <__ieee754_rem_pio2f+0x66>
 800fe5c:	eeb1 7a47 	vneg.f32	s14, s14
 800fe60:	eeb1 0a40 	vneg.f32	s0, s0
 800fe64:	ed84 7a00 	vstr	s14, [r4]
 800fe68:	ed84 0a01 	vstr	s0, [r4, #4]
 800fe6c:	4240      	negs	r0, r0
 800fe6e:	e79c      	b.n	800fdaa <__ieee754_rem_pio2f+0x66>
 800fe70:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800ff7c <__ieee754_rem_pio2f+0x238>
 800fe74:	eef0 6a40 	vmov.f32	s13, s0
 800fe78:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fe7c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800fe80:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fe84:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ff84 <__ieee754_rem_pio2f+0x240>
 800fe88:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fe8c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fe90:	ee15 2a90 	vmov	r2, s11
 800fe94:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fe98:	1a5b      	subs	r3, r3, r1
 800fe9a:	2b19      	cmp	r3, #25
 800fe9c:	dc04      	bgt.n	800fea8 <__ieee754_rem_pio2f+0x164>
 800fe9e:	edc4 5a00 	vstr	s11, [r4]
 800fea2:	eeb0 0a66 	vmov.f32	s0, s13
 800fea6:	e7cf      	b.n	800fe48 <__ieee754_rem_pio2f+0x104>
 800fea8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ff94 <__ieee754_rem_pio2f+0x250>
 800feac:	eeb0 0a66 	vmov.f32	s0, s13
 800feb0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800feb4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800feb8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ff98 <__ieee754_rem_pio2f+0x254>
 800febc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fec0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fec4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fec8:	ed84 7a00 	vstr	s14, [r4]
 800fecc:	e7bc      	b.n	800fe48 <__ieee754_rem_pio2f+0x104>
 800fece:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800fed2:	d306      	bcc.n	800fee2 <__ieee754_rem_pio2f+0x19e>
 800fed4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fed8:	edc0 7a01 	vstr	s15, [r0, #4]
 800fedc:	edc0 7a00 	vstr	s15, [r0]
 800fee0:	e73e      	b.n	800fd60 <__ieee754_rem_pio2f+0x1c>
 800fee2:	15ea      	asrs	r2, r5, #23
 800fee4:	3a86      	subs	r2, #134	@ 0x86
 800fee6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800feea:	ee07 3a90 	vmov	s15, r3
 800feee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fef2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ff9c <__ieee754_rem_pio2f+0x258>
 800fef6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fefa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fefe:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ff02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ff06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ff0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff12:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ff16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ff1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ff1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff22:	edcd 7a05 	vstr	s15, [sp, #20]
 800ff26:	d11e      	bne.n	800ff66 <__ieee754_rem_pio2f+0x222>
 800ff28:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ff2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff30:	bf0c      	ite	eq
 800ff32:	2301      	moveq	r3, #1
 800ff34:	2302      	movne	r3, #2
 800ff36:	491a      	ldr	r1, [pc, #104]	@ (800ffa0 <__ieee754_rem_pio2f+0x25c>)
 800ff38:	9101      	str	r1, [sp, #4]
 800ff3a:	2102      	movs	r1, #2
 800ff3c:	9100      	str	r1, [sp, #0]
 800ff3e:	a803      	add	r0, sp, #12
 800ff40:	4621      	mov	r1, r4
 800ff42:	f000 f979 	bl	8010238 <__kernel_rem_pio2f>
 800ff46:	2e00      	cmp	r6, #0
 800ff48:	f6bf af2f 	bge.w	800fdaa <__ieee754_rem_pio2f+0x66>
 800ff4c:	edd4 7a00 	vldr	s15, [r4]
 800ff50:	eef1 7a67 	vneg.f32	s15, s15
 800ff54:	edc4 7a00 	vstr	s15, [r4]
 800ff58:	edd4 7a01 	vldr	s15, [r4, #4]
 800ff5c:	eef1 7a67 	vneg.f32	s15, s15
 800ff60:	edc4 7a01 	vstr	s15, [r4, #4]
 800ff64:	e782      	b.n	800fe6c <__ieee754_rem_pio2f+0x128>
 800ff66:	2303      	movs	r3, #3
 800ff68:	e7e5      	b.n	800ff36 <__ieee754_rem_pio2f+0x1f2>
 800ff6a:	bf00      	nop
 800ff6c:	3f490fd8 	.word	0x3f490fd8
 800ff70:	4016cbe3 	.word	0x4016cbe3
 800ff74:	3fc90f80 	.word	0x3fc90f80
 800ff78:	3fc90fd0 	.word	0x3fc90fd0
 800ff7c:	37354400 	.word	0x37354400
 800ff80:	37354443 	.word	0x37354443
 800ff84:	2e85a308 	.word	0x2e85a308
 800ff88:	43490f80 	.word	0x43490f80
 800ff8c:	3f22f984 	.word	0x3f22f984
 800ff90:	08010ca8 	.word	0x08010ca8
 800ff94:	2e85a300 	.word	0x2e85a300
 800ff98:	248d3132 	.word	0x248d3132
 800ff9c:	43800000 	.word	0x43800000
 800ffa0:	08010d28 	.word	0x08010d28
 800ffa4:	00000000 	.word	0x00000000

0800ffa8 <scalbn>:
 800ffa8:	b570      	push	{r4, r5, r6, lr}
 800ffaa:	ec55 4b10 	vmov	r4, r5, d0
 800ffae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ffb2:	4606      	mov	r6, r0
 800ffb4:	462b      	mov	r3, r5
 800ffb6:	b991      	cbnz	r1, 800ffde <scalbn+0x36>
 800ffb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ffbc:	4323      	orrs	r3, r4
 800ffbe:	d03d      	beq.n	801003c <scalbn+0x94>
 800ffc0:	4b35      	ldr	r3, [pc, #212]	@ (8010098 <scalbn+0xf0>)
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f7f0 fb16 	bl	80005f8 <__aeabi_dmul>
 800ffcc:	4b33      	ldr	r3, [pc, #204]	@ (801009c <scalbn+0xf4>)
 800ffce:	429e      	cmp	r6, r3
 800ffd0:	4604      	mov	r4, r0
 800ffd2:	460d      	mov	r5, r1
 800ffd4:	da0f      	bge.n	800fff6 <scalbn+0x4e>
 800ffd6:	a328      	add	r3, pc, #160	@ (adr r3, 8010078 <scalbn+0xd0>)
 800ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffdc:	e01e      	b.n	801001c <scalbn+0x74>
 800ffde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ffe2:	4291      	cmp	r1, r2
 800ffe4:	d10b      	bne.n	800fffe <scalbn+0x56>
 800ffe6:	4622      	mov	r2, r4
 800ffe8:	4620      	mov	r0, r4
 800ffea:	4629      	mov	r1, r5
 800ffec:	f7f0 f94e 	bl	800028c <__adddf3>
 800fff0:	4604      	mov	r4, r0
 800fff2:	460d      	mov	r5, r1
 800fff4:	e022      	b.n	801003c <scalbn+0x94>
 800fff6:	460b      	mov	r3, r1
 800fff8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fffc:	3936      	subs	r1, #54	@ 0x36
 800fffe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010002:	4296      	cmp	r6, r2
 8010004:	dd0d      	ble.n	8010022 <scalbn+0x7a>
 8010006:	2d00      	cmp	r5, #0
 8010008:	a11d      	add	r1, pc, #116	@ (adr r1, 8010080 <scalbn+0xd8>)
 801000a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801000e:	da02      	bge.n	8010016 <scalbn+0x6e>
 8010010:	a11d      	add	r1, pc, #116	@ (adr r1, 8010088 <scalbn+0xe0>)
 8010012:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010016:	a31a      	add	r3, pc, #104	@ (adr r3, 8010080 <scalbn+0xd8>)
 8010018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001c:	f7f0 faec 	bl	80005f8 <__aeabi_dmul>
 8010020:	e7e6      	b.n	800fff0 <scalbn+0x48>
 8010022:	1872      	adds	r2, r6, r1
 8010024:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010028:	428a      	cmp	r2, r1
 801002a:	dcec      	bgt.n	8010006 <scalbn+0x5e>
 801002c:	2a00      	cmp	r2, #0
 801002e:	dd08      	ble.n	8010042 <scalbn+0x9a>
 8010030:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010034:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010038:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801003c:	ec45 4b10 	vmov	d0, r4, r5
 8010040:	bd70      	pop	{r4, r5, r6, pc}
 8010042:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010046:	da08      	bge.n	801005a <scalbn+0xb2>
 8010048:	2d00      	cmp	r5, #0
 801004a:	a10b      	add	r1, pc, #44	@ (adr r1, 8010078 <scalbn+0xd0>)
 801004c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010050:	dac1      	bge.n	800ffd6 <scalbn+0x2e>
 8010052:	a10f      	add	r1, pc, #60	@ (adr r1, 8010090 <scalbn+0xe8>)
 8010054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010058:	e7bd      	b.n	800ffd6 <scalbn+0x2e>
 801005a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801005e:	3236      	adds	r2, #54	@ 0x36
 8010060:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010068:	4620      	mov	r0, r4
 801006a:	4b0d      	ldr	r3, [pc, #52]	@ (80100a0 <scalbn+0xf8>)
 801006c:	4629      	mov	r1, r5
 801006e:	2200      	movs	r2, #0
 8010070:	e7d4      	b.n	801001c <scalbn+0x74>
 8010072:	bf00      	nop
 8010074:	f3af 8000 	nop.w
 8010078:	c2f8f359 	.word	0xc2f8f359
 801007c:	01a56e1f 	.word	0x01a56e1f
 8010080:	8800759c 	.word	0x8800759c
 8010084:	7e37e43c 	.word	0x7e37e43c
 8010088:	8800759c 	.word	0x8800759c
 801008c:	fe37e43c 	.word	0xfe37e43c
 8010090:	c2f8f359 	.word	0xc2f8f359
 8010094:	81a56e1f 	.word	0x81a56e1f
 8010098:	43500000 	.word	0x43500000
 801009c:	ffff3cb0 	.word	0xffff3cb0
 80100a0:	3c900000 	.word	0x3c900000

080100a4 <with_errno>:
 80100a4:	b510      	push	{r4, lr}
 80100a6:	ed2d 8b02 	vpush	{d8}
 80100aa:	eeb0 8a40 	vmov.f32	s16, s0
 80100ae:	eef0 8a60 	vmov.f32	s17, s1
 80100b2:	4604      	mov	r4, r0
 80100b4:	f7fc f810 	bl	800c0d8 <__errno>
 80100b8:	eeb0 0a48 	vmov.f32	s0, s16
 80100bc:	eef0 0a68 	vmov.f32	s1, s17
 80100c0:	ecbd 8b02 	vpop	{d8}
 80100c4:	6004      	str	r4, [r0, #0]
 80100c6:	bd10      	pop	{r4, pc}

080100c8 <xflow>:
 80100c8:	4603      	mov	r3, r0
 80100ca:	b507      	push	{r0, r1, r2, lr}
 80100cc:	ec51 0b10 	vmov	r0, r1, d0
 80100d0:	b183      	cbz	r3, 80100f4 <xflow+0x2c>
 80100d2:	4602      	mov	r2, r0
 80100d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100d8:	e9cd 2300 	strd	r2, r3, [sp]
 80100dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100e0:	f7f0 fa8a 	bl	80005f8 <__aeabi_dmul>
 80100e4:	ec41 0b10 	vmov	d0, r0, r1
 80100e8:	2022      	movs	r0, #34	@ 0x22
 80100ea:	b003      	add	sp, #12
 80100ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80100f0:	f7ff bfd8 	b.w	80100a4 <with_errno>
 80100f4:	4602      	mov	r2, r0
 80100f6:	460b      	mov	r3, r1
 80100f8:	e7ee      	b.n	80100d8 <xflow+0x10>
 80100fa:	0000      	movs	r0, r0
 80100fc:	0000      	movs	r0, r0
	...

08010100 <__math_uflow>:
 8010100:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010108 <__math_uflow+0x8>
 8010104:	f7ff bfe0 	b.w	80100c8 <xflow>
 8010108:	00000000 	.word	0x00000000
 801010c:	10000000 	.word	0x10000000

08010110 <__math_oflow>:
 8010110:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010118 <__math_oflow+0x8>
 8010114:	f7ff bfd8 	b.w	80100c8 <xflow>
 8010118:	00000000 	.word	0x00000000
 801011c:	70000000 	.word	0x70000000

08010120 <scalbnf>:
 8010120:	ee10 3a10 	vmov	r3, s0
 8010124:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010128:	d02b      	beq.n	8010182 <scalbnf+0x62>
 801012a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801012e:	d302      	bcc.n	8010136 <scalbnf+0x16>
 8010130:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010134:	4770      	bx	lr
 8010136:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801013a:	d123      	bne.n	8010184 <scalbnf+0x64>
 801013c:	4b24      	ldr	r3, [pc, #144]	@ (80101d0 <scalbnf+0xb0>)
 801013e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80101d4 <scalbnf+0xb4>
 8010142:	4298      	cmp	r0, r3
 8010144:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010148:	db17      	blt.n	801017a <scalbnf+0x5a>
 801014a:	ee10 3a10 	vmov	r3, s0
 801014e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010152:	3a19      	subs	r2, #25
 8010154:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010158:	4288      	cmp	r0, r1
 801015a:	dd15      	ble.n	8010188 <scalbnf+0x68>
 801015c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80101d8 <scalbnf+0xb8>
 8010160:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80101dc <scalbnf+0xbc>
 8010164:	ee10 3a10 	vmov	r3, s0
 8010168:	eeb0 7a67 	vmov.f32	s14, s15
 801016c:	2b00      	cmp	r3, #0
 801016e:	bfb8      	it	lt
 8010170:	eef0 7a66 	vmovlt.f32	s15, s13
 8010174:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010178:	4770      	bx	lr
 801017a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80101e0 <scalbnf+0xc0>
 801017e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010182:	4770      	bx	lr
 8010184:	0dd2      	lsrs	r2, r2, #23
 8010186:	e7e5      	b.n	8010154 <scalbnf+0x34>
 8010188:	4410      	add	r0, r2
 801018a:	28fe      	cmp	r0, #254	@ 0xfe
 801018c:	dce6      	bgt.n	801015c <scalbnf+0x3c>
 801018e:	2800      	cmp	r0, #0
 8010190:	dd06      	ble.n	80101a0 <scalbnf+0x80>
 8010192:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010196:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801019a:	ee00 3a10 	vmov	s0, r3
 801019e:	4770      	bx	lr
 80101a0:	f110 0f16 	cmn.w	r0, #22
 80101a4:	da09      	bge.n	80101ba <scalbnf+0x9a>
 80101a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80101e0 <scalbnf+0xc0>
 80101aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80101e4 <scalbnf+0xc4>
 80101ae:	ee10 3a10 	vmov	r3, s0
 80101b2:	eeb0 7a67 	vmov.f32	s14, s15
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	e7d9      	b.n	801016e <scalbnf+0x4e>
 80101ba:	3019      	adds	r0, #25
 80101bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80101c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80101c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80101e8 <scalbnf+0xc8>
 80101c8:	ee07 3a90 	vmov	s15, r3
 80101cc:	e7d7      	b.n	801017e <scalbnf+0x5e>
 80101ce:	bf00      	nop
 80101d0:	ffff3cb0 	.word	0xffff3cb0
 80101d4:	4c000000 	.word	0x4c000000
 80101d8:	7149f2ca 	.word	0x7149f2ca
 80101dc:	f149f2ca 	.word	0xf149f2ca
 80101e0:	0da24260 	.word	0x0da24260
 80101e4:	8da24260 	.word	0x8da24260
 80101e8:	33000000 	.word	0x33000000

080101ec <with_errnof>:
 80101ec:	b510      	push	{r4, lr}
 80101ee:	ed2d 8b02 	vpush	{d8}
 80101f2:	eeb0 8a40 	vmov.f32	s16, s0
 80101f6:	4604      	mov	r4, r0
 80101f8:	f7fb ff6e 	bl	800c0d8 <__errno>
 80101fc:	eeb0 0a48 	vmov.f32	s0, s16
 8010200:	ecbd 8b02 	vpop	{d8}
 8010204:	6004      	str	r4, [r0, #0]
 8010206:	bd10      	pop	{r4, pc}

08010208 <xflowf>:
 8010208:	b130      	cbz	r0, 8010218 <xflowf+0x10>
 801020a:	eef1 7a40 	vneg.f32	s15, s0
 801020e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010212:	2022      	movs	r0, #34	@ 0x22
 8010214:	f7ff bfea 	b.w	80101ec <with_errnof>
 8010218:	eef0 7a40 	vmov.f32	s15, s0
 801021c:	e7f7      	b.n	801020e <xflowf+0x6>
	...

08010220 <__math_uflowf>:
 8010220:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010228 <__math_uflowf+0x8>
 8010224:	f7ff bff0 	b.w	8010208 <xflowf>
 8010228:	10000000 	.word	0x10000000

0801022c <__math_oflowf>:
 801022c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010234 <__math_oflowf+0x8>
 8010230:	f7ff bfea 	b.w	8010208 <xflowf>
 8010234:	70000000 	.word	0x70000000

08010238 <__kernel_rem_pio2f>:
 8010238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801023c:	ed2d 8b04 	vpush	{d8-d9}
 8010240:	b0d9      	sub	sp, #356	@ 0x164
 8010242:	4690      	mov	r8, r2
 8010244:	9001      	str	r0, [sp, #4]
 8010246:	4ab9      	ldr	r2, [pc, #740]	@ (801052c <__kernel_rem_pio2f+0x2f4>)
 8010248:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801024a:	f118 0f04 	cmn.w	r8, #4
 801024e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010252:	460f      	mov	r7, r1
 8010254:	f103 3bff 	add.w	fp, r3, #4294967295
 8010258:	db27      	blt.n	80102aa <__kernel_rem_pio2f+0x72>
 801025a:	f1b8 0203 	subs.w	r2, r8, #3
 801025e:	bf48      	it	mi
 8010260:	f108 0204 	addmi.w	r2, r8, #4
 8010264:	10d2      	asrs	r2, r2, #3
 8010266:	1c55      	adds	r5, r2, #1
 8010268:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801026a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801053c <__kernel_rem_pio2f+0x304>
 801026e:	00e8      	lsls	r0, r5, #3
 8010270:	eba2 060b 	sub.w	r6, r2, fp
 8010274:	9002      	str	r0, [sp, #8]
 8010276:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801027a:	eb0a 0c0b 	add.w	ip, sl, fp
 801027e:	ac1c      	add	r4, sp, #112	@ 0x70
 8010280:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010284:	2000      	movs	r0, #0
 8010286:	4560      	cmp	r0, ip
 8010288:	dd11      	ble.n	80102ae <__kernel_rem_pio2f+0x76>
 801028a:	a91c      	add	r1, sp, #112	@ 0x70
 801028c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010290:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010294:	f04f 0c00 	mov.w	ip, #0
 8010298:	45d4      	cmp	ip, sl
 801029a:	dc27      	bgt.n	80102ec <__kernel_rem_pio2f+0xb4>
 801029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80102a0:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801053c <__kernel_rem_pio2f+0x304>
 80102a4:	4606      	mov	r6, r0
 80102a6:	2400      	movs	r4, #0
 80102a8:	e016      	b.n	80102d8 <__kernel_rem_pio2f+0xa0>
 80102aa:	2200      	movs	r2, #0
 80102ac:	e7db      	b.n	8010266 <__kernel_rem_pio2f+0x2e>
 80102ae:	42c6      	cmn	r6, r0
 80102b0:	bf5d      	ittte	pl
 80102b2:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80102b6:	ee07 1a90 	vmovpl	s15, r1
 80102ba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80102be:	eef0 7a47 	vmovmi.f32	s15, s14
 80102c2:	ece4 7a01 	vstmia	r4!, {s15}
 80102c6:	3001      	adds	r0, #1
 80102c8:	e7dd      	b.n	8010286 <__kernel_rem_pio2f+0x4e>
 80102ca:	ecfe 6a01 	vldmia	lr!, {s13}
 80102ce:	ed96 7a00 	vldr	s14, [r6]
 80102d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80102d6:	3401      	adds	r4, #1
 80102d8:	455c      	cmp	r4, fp
 80102da:	f1a6 0604 	sub.w	r6, r6, #4
 80102de:	ddf4      	ble.n	80102ca <__kernel_rem_pio2f+0x92>
 80102e0:	ece9 7a01 	vstmia	r9!, {s15}
 80102e4:	f10c 0c01 	add.w	ip, ip, #1
 80102e8:	3004      	adds	r0, #4
 80102ea:	e7d5      	b.n	8010298 <__kernel_rem_pio2f+0x60>
 80102ec:	a908      	add	r1, sp, #32
 80102ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102f2:	9104      	str	r1, [sp, #16]
 80102f4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80102f6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8010538 <__kernel_rem_pio2f+0x300>
 80102fa:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8010534 <__kernel_rem_pio2f+0x2fc>
 80102fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010302:	9203      	str	r2, [sp, #12]
 8010304:	4654      	mov	r4, sl
 8010306:	00a2      	lsls	r2, r4, #2
 8010308:	9205      	str	r2, [sp, #20]
 801030a:	aa58      	add	r2, sp, #352	@ 0x160
 801030c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010310:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010314:	a944      	add	r1, sp, #272	@ 0x110
 8010316:	aa08      	add	r2, sp, #32
 8010318:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801031c:	4694      	mov	ip, r2
 801031e:	4626      	mov	r6, r4
 8010320:	2e00      	cmp	r6, #0
 8010322:	f1a0 0004 	sub.w	r0, r0, #4
 8010326:	dc4c      	bgt.n	80103c2 <__kernel_rem_pio2f+0x18a>
 8010328:	4628      	mov	r0, r5
 801032a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801032e:	f7ff fef7 	bl	8010120 <scalbnf>
 8010332:	eeb0 8a40 	vmov.f32	s16, s0
 8010336:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801033a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801033e:	f000 f9ed 	bl	801071c <floorf>
 8010342:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010346:	eea0 8a67 	vfms.f32	s16, s0, s15
 801034a:	2d00      	cmp	r5, #0
 801034c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010350:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010354:	ee17 9a90 	vmov	r9, s15
 8010358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801035c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010360:	dd41      	ble.n	80103e6 <__kernel_rem_pio2f+0x1ae>
 8010362:	f104 3cff 	add.w	ip, r4, #4294967295
 8010366:	a908      	add	r1, sp, #32
 8010368:	f1c5 0e08 	rsb	lr, r5, #8
 801036c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010370:	fa46 f00e 	asr.w	r0, r6, lr
 8010374:	4481      	add	r9, r0
 8010376:	fa00 f00e 	lsl.w	r0, r0, lr
 801037a:	1a36      	subs	r6, r6, r0
 801037c:	f1c5 0007 	rsb	r0, r5, #7
 8010380:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010384:	4106      	asrs	r6, r0
 8010386:	2e00      	cmp	r6, #0
 8010388:	dd3c      	ble.n	8010404 <__kernel_rem_pio2f+0x1cc>
 801038a:	f04f 0e00 	mov.w	lr, #0
 801038e:	f109 0901 	add.w	r9, r9, #1
 8010392:	4670      	mov	r0, lr
 8010394:	4574      	cmp	r4, lr
 8010396:	dc68      	bgt.n	801046a <__kernel_rem_pio2f+0x232>
 8010398:	2d00      	cmp	r5, #0
 801039a:	dd03      	ble.n	80103a4 <__kernel_rem_pio2f+0x16c>
 801039c:	2d01      	cmp	r5, #1
 801039e:	d074      	beq.n	801048a <__kernel_rem_pio2f+0x252>
 80103a0:	2d02      	cmp	r5, #2
 80103a2:	d07d      	beq.n	80104a0 <__kernel_rem_pio2f+0x268>
 80103a4:	2e02      	cmp	r6, #2
 80103a6:	d12d      	bne.n	8010404 <__kernel_rem_pio2f+0x1cc>
 80103a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80103ac:	ee30 8a48 	vsub.f32	s16, s0, s16
 80103b0:	b340      	cbz	r0, 8010404 <__kernel_rem_pio2f+0x1cc>
 80103b2:	4628      	mov	r0, r5
 80103b4:	9306      	str	r3, [sp, #24]
 80103b6:	f7ff feb3 	bl	8010120 <scalbnf>
 80103ba:	9b06      	ldr	r3, [sp, #24]
 80103bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80103c0:	e020      	b.n	8010404 <__kernel_rem_pio2f+0x1cc>
 80103c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80103c6:	3e01      	subs	r6, #1
 80103c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103d0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80103d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80103d8:	ecac 0a01 	vstmia	ip!, {s0}
 80103dc:	ed90 0a00 	vldr	s0, [r0]
 80103e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80103e4:	e79c      	b.n	8010320 <__kernel_rem_pio2f+0xe8>
 80103e6:	d105      	bne.n	80103f4 <__kernel_rem_pio2f+0x1bc>
 80103e8:	1e60      	subs	r0, r4, #1
 80103ea:	a908      	add	r1, sp, #32
 80103ec:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80103f0:	11f6      	asrs	r6, r6, #7
 80103f2:	e7c8      	b.n	8010386 <__kernel_rem_pio2f+0x14e>
 80103f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80103f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80103fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010400:	da31      	bge.n	8010466 <__kernel_rem_pio2f+0x22e>
 8010402:	2600      	movs	r6, #0
 8010404:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040c:	f040 8098 	bne.w	8010540 <__kernel_rem_pio2f+0x308>
 8010410:	1e60      	subs	r0, r4, #1
 8010412:	2200      	movs	r2, #0
 8010414:	4550      	cmp	r0, sl
 8010416:	da4b      	bge.n	80104b0 <__kernel_rem_pio2f+0x278>
 8010418:	2a00      	cmp	r2, #0
 801041a:	d065      	beq.n	80104e8 <__kernel_rem_pio2f+0x2b0>
 801041c:	3c01      	subs	r4, #1
 801041e:	ab08      	add	r3, sp, #32
 8010420:	3d08      	subs	r5, #8
 8010422:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d0f8      	beq.n	801041c <__kernel_rem_pio2f+0x1e4>
 801042a:	4628      	mov	r0, r5
 801042c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010430:	f7ff fe76 	bl	8010120 <scalbnf>
 8010434:	1c63      	adds	r3, r4, #1
 8010436:	aa44      	add	r2, sp, #272	@ 0x110
 8010438:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010538 <__kernel_rem_pio2f+0x300>
 801043c:	0099      	lsls	r1, r3, #2
 801043e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010442:	4623      	mov	r3, r4
 8010444:	2b00      	cmp	r3, #0
 8010446:	f280 80a9 	bge.w	801059c <__kernel_rem_pio2f+0x364>
 801044a:	4623      	mov	r3, r4
 801044c:	2b00      	cmp	r3, #0
 801044e:	f2c0 80c7 	blt.w	80105e0 <__kernel_rem_pio2f+0x3a8>
 8010452:	aa44      	add	r2, sp, #272	@ 0x110
 8010454:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010458:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010530 <__kernel_rem_pio2f+0x2f8>
 801045c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801053c <__kernel_rem_pio2f+0x304>
 8010460:	2000      	movs	r0, #0
 8010462:	1ae2      	subs	r2, r4, r3
 8010464:	e0b1      	b.n	80105ca <__kernel_rem_pio2f+0x392>
 8010466:	2602      	movs	r6, #2
 8010468:	e78f      	b.n	801038a <__kernel_rem_pio2f+0x152>
 801046a:	f852 1b04 	ldr.w	r1, [r2], #4
 801046e:	b948      	cbnz	r0, 8010484 <__kernel_rem_pio2f+0x24c>
 8010470:	b121      	cbz	r1, 801047c <__kernel_rem_pio2f+0x244>
 8010472:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010476:	f842 1c04 	str.w	r1, [r2, #-4]
 801047a:	2101      	movs	r1, #1
 801047c:	f10e 0e01 	add.w	lr, lr, #1
 8010480:	4608      	mov	r0, r1
 8010482:	e787      	b.n	8010394 <__kernel_rem_pio2f+0x15c>
 8010484:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010488:	e7f5      	b.n	8010476 <__kernel_rem_pio2f+0x23e>
 801048a:	f104 3cff 	add.w	ip, r4, #4294967295
 801048e:	aa08      	add	r2, sp, #32
 8010490:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010494:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010498:	a908      	add	r1, sp, #32
 801049a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801049e:	e781      	b.n	80103a4 <__kernel_rem_pio2f+0x16c>
 80104a0:	f104 3cff 	add.w	ip, r4, #4294967295
 80104a4:	aa08      	add	r2, sp, #32
 80104a6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80104aa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80104ae:	e7f3      	b.n	8010498 <__kernel_rem_pio2f+0x260>
 80104b0:	a908      	add	r1, sp, #32
 80104b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80104b6:	3801      	subs	r0, #1
 80104b8:	430a      	orrs	r2, r1
 80104ba:	e7ab      	b.n	8010414 <__kernel_rem_pio2f+0x1dc>
 80104bc:	3201      	adds	r2, #1
 80104be:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80104c2:	2e00      	cmp	r6, #0
 80104c4:	d0fa      	beq.n	80104bc <__kernel_rem_pio2f+0x284>
 80104c6:	9905      	ldr	r1, [sp, #20]
 80104c8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80104cc:	eb0d 0001 	add.w	r0, sp, r1
 80104d0:	18e6      	adds	r6, r4, r3
 80104d2:	a91c      	add	r1, sp, #112	@ 0x70
 80104d4:	f104 0c01 	add.w	ip, r4, #1
 80104d8:	384c      	subs	r0, #76	@ 0x4c
 80104da:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80104de:	4422      	add	r2, r4
 80104e0:	4562      	cmp	r2, ip
 80104e2:	da04      	bge.n	80104ee <__kernel_rem_pio2f+0x2b6>
 80104e4:	4614      	mov	r4, r2
 80104e6:	e70e      	b.n	8010306 <__kernel_rem_pio2f+0xce>
 80104e8:	9804      	ldr	r0, [sp, #16]
 80104ea:	2201      	movs	r2, #1
 80104ec:	e7e7      	b.n	80104be <__kernel_rem_pio2f+0x286>
 80104ee:	9903      	ldr	r1, [sp, #12]
 80104f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80104f4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80104f8:	9105      	str	r1, [sp, #20]
 80104fa:	ee07 1a90 	vmov	s15, r1
 80104fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010502:	2400      	movs	r4, #0
 8010504:	ece6 7a01 	vstmia	r6!, {s15}
 8010508:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801053c <__kernel_rem_pio2f+0x304>
 801050c:	46b1      	mov	r9, r6
 801050e:	455c      	cmp	r4, fp
 8010510:	dd04      	ble.n	801051c <__kernel_rem_pio2f+0x2e4>
 8010512:	ece0 7a01 	vstmia	r0!, {s15}
 8010516:	f10c 0c01 	add.w	ip, ip, #1
 801051a:	e7e1      	b.n	80104e0 <__kernel_rem_pio2f+0x2a8>
 801051c:	ecfe 6a01 	vldmia	lr!, {s13}
 8010520:	ed39 7a01 	vldmdb	r9!, {s14}
 8010524:	3401      	adds	r4, #1
 8010526:	eee6 7a87 	vfma.f32	s15, s13, s14
 801052a:	e7f0      	b.n	801050e <__kernel_rem_pio2f+0x2d6>
 801052c:	0801106c 	.word	0x0801106c
 8010530:	08011040 	.word	0x08011040
 8010534:	43800000 	.word	0x43800000
 8010538:	3b800000 	.word	0x3b800000
 801053c:	00000000 	.word	0x00000000
 8010540:	9b02      	ldr	r3, [sp, #8]
 8010542:	eeb0 0a48 	vmov.f32	s0, s16
 8010546:	eba3 0008 	sub.w	r0, r3, r8
 801054a:	f7ff fde9 	bl	8010120 <scalbnf>
 801054e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010534 <__kernel_rem_pio2f+0x2fc>
 8010552:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055a:	db19      	blt.n	8010590 <__kernel_rem_pio2f+0x358>
 801055c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010538 <__kernel_rem_pio2f+0x300>
 8010560:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010564:	aa08      	add	r2, sp, #32
 8010566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801056a:	3508      	adds	r5, #8
 801056c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010570:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010578:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801057c:	ee10 3a10 	vmov	r3, s0
 8010580:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010584:	ee17 3a90 	vmov	r3, s15
 8010588:	3401      	adds	r4, #1
 801058a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801058e:	e74c      	b.n	801042a <__kernel_rem_pio2f+0x1f2>
 8010590:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010594:	aa08      	add	r2, sp, #32
 8010596:	ee10 3a10 	vmov	r3, s0
 801059a:	e7f6      	b.n	801058a <__kernel_rem_pio2f+0x352>
 801059c:	a808      	add	r0, sp, #32
 801059e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80105a2:	9001      	str	r0, [sp, #4]
 80105a4:	ee07 0a90 	vmov	s15, r0
 80105a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105ac:	3b01      	subs	r3, #1
 80105ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80105b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80105b6:	ed62 7a01 	vstmdb	r2!, {s15}
 80105ba:	e743      	b.n	8010444 <__kernel_rem_pio2f+0x20c>
 80105bc:	ecfc 6a01 	vldmia	ip!, {s13}
 80105c0:	ecb5 7a01 	vldmia	r5!, {s14}
 80105c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80105c8:	3001      	adds	r0, #1
 80105ca:	4550      	cmp	r0, sl
 80105cc:	dc01      	bgt.n	80105d2 <__kernel_rem_pio2f+0x39a>
 80105ce:	4282      	cmp	r2, r0
 80105d0:	daf4      	bge.n	80105bc <__kernel_rem_pio2f+0x384>
 80105d2:	a858      	add	r0, sp, #352	@ 0x160
 80105d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80105d8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80105dc:	3b01      	subs	r3, #1
 80105de:	e735      	b.n	801044c <__kernel_rem_pio2f+0x214>
 80105e0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80105e2:	2b02      	cmp	r3, #2
 80105e4:	dc09      	bgt.n	80105fa <__kernel_rem_pio2f+0x3c2>
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	dc2b      	bgt.n	8010642 <__kernel_rem_pio2f+0x40a>
 80105ea:	d044      	beq.n	8010676 <__kernel_rem_pio2f+0x43e>
 80105ec:	f009 0007 	and.w	r0, r9, #7
 80105f0:	b059      	add	sp, #356	@ 0x164
 80105f2:	ecbd 8b04 	vpop	{d8-d9}
 80105f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105fa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80105fc:	2b03      	cmp	r3, #3
 80105fe:	d1f5      	bne.n	80105ec <__kernel_rem_pio2f+0x3b4>
 8010600:	aa30      	add	r2, sp, #192	@ 0xc0
 8010602:	1f0b      	subs	r3, r1, #4
 8010604:	4413      	add	r3, r2
 8010606:	461a      	mov	r2, r3
 8010608:	4620      	mov	r0, r4
 801060a:	2800      	cmp	r0, #0
 801060c:	f1a2 0204 	sub.w	r2, r2, #4
 8010610:	dc52      	bgt.n	80106b8 <__kernel_rem_pio2f+0x480>
 8010612:	4622      	mov	r2, r4
 8010614:	2a01      	cmp	r2, #1
 8010616:	f1a3 0304 	sub.w	r3, r3, #4
 801061a:	dc5d      	bgt.n	80106d8 <__kernel_rem_pio2f+0x4a0>
 801061c:	ab30      	add	r3, sp, #192	@ 0xc0
 801061e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801053c <__kernel_rem_pio2f+0x304>
 8010622:	440b      	add	r3, r1
 8010624:	2c01      	cmp	r4, #1
 8010626:	dc67      	bgt.n	80106f8 <__kernel_rem_pio2f+0x4c0>
 8010628:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801062c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8010630:	2e00      	cmp	r6, #0
 8010632:	d167      	bne.n	8010704 <__kernel_rem_pio2f+0x4cc>
 8010634:	edc7 6a00 	vstr	s13, [r7]
 8010638:	ed87 7a01 	vstr	s14, [r7, #4]
 801063c:	edc7 7a02 	vstr	s15, [r7, #8]
 8010640:	e7d4      	b.n	80105ec <__kernel_rem_pio2f+0x3b4>
 8010642:	ab30      	add	r3, sp, #192	@ 0xc0
 8010644:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801053c <__kernel_rem_pio2f+0x304>
 8010648:	440b      	add	r3, r1
 801064a:	4622      	mov	r2, r4
 801064c:	2a00      	cmp	r2, #0
 801064e:	da24      	bge.n	801069a <__kernel_rem_pio2f+0x462>
 8010650:	b34e      	cbz	r6, 80106a6 <__kernel_rem_pio2f+0x46e>
 8010652:	eef1 7a47 	vneg.f32	s15, s14
 8010656:	edc7 7a00 	vstr	s15, [r7]
 801065a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801065e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010662:	aa31      	add	r2, sp, #196	@ 0xc4
 8010664:	2301      	movs	r3, #1
 8010666:	429c      	cmp	r4, r3
 8010668:	da20      	bge.n	80106ac <__kernel_rem_pio2f+0x474>
 801066a:	b10e      	cbz	r6, 8010670 <__kernel_rem_pio2f+0x438>
 801066c:	eef1 7a67 	vneg.f32	s15, s15
 8010670:	edc7 7a01 	vstr	s15, [r7, #4]
 8010674:	e7ba      	b.n	80105ec <__kernel_rem_pio2f+0x3b4>
 8010676:	ab30      	add	r3, sp, #192	@ 0xc0
 8010678:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801053c <__kernel_rem_pio2f+0x304>
 801067c:	440b      	add	r3, r1
 801067e:	2c00      	cmp	r4, #0
 8010680:	da05      	bge.n	801068e <__kernel_rem_pio2f+0x456>
 8010682:	b10e      	cbz	r6, 8010688 <__kernel_rem_pio2f+0x450>
 8010684:	eef1 7a67 	vneg.f32	s15, s15
 8010688:	edc7 7a00 	vstr	s15, [r7]
 801068c:	e7ae      	b.n	80105ec <__kernel_rem_pio2f+0x3b4>
 801068e:	ed33 7a01 	vldmdb	r3!, {s14}
 8010692:	3c01      	subs	r4, #1
 8010694:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010698:	e7f1      	b.n	801067e <__kernel_rem_pio2f+0x446>
 801069a:	ed73 7a01 	vldmdb	r3!, {s15}
 801069e:	3a01      	subs	r2, #1
 80106a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106a4:	e7d2      	b.n	801064c <__kernel_rem_pio2f+0x414>
 80106a6:	eef0 7a47 	vmov.f32	s15, s14
 80106aa:	e7d4      	b.n	8010656 <__kernel_rem_pio2f+0x41e>
 80106ac:	ecb2 7a01 	vldmia	r2!, {s14}
 80106b0:	3301      	adds	r3, #1
 80106b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106b6:	e7d6      	b.n	8010666 <__kernel_rem_pio2f+0x42e>
 80106b8:	edd2 7a00 	vldr	s15, [r2]
 80106bc:	edd2 6a01 	vldr	s13, [r2, #4]
 80106c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80106c4:	3801      	subs	r0, #1
 80106c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106ca:	ed82 7a00 	vstr	s14, [r2]
 80106ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106d2:	edc2 7a01 	vstr	s15, [r2, #4]
 80106d6:	e798      	b.n	801060a <__kernel_rem_pio2f+0x3d2>
 80106d8:	edd3 7a00 	vldr	s15, [r3]
 80106dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80106e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80106e4:	3a01      	subs	r2, #1
 80106e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106ea:	ed83 7a00 	vstr	s14, [r3]
 80106ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80106f6:	e78d      	b.n	8010614 <__kernel_rem_pio2f+0x3dc>
 80106f8:	ed33 7a01 	vldmdb	r3!, {s14}
 80106fc:	3c01      	subs	r4, #1
 80106fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010702:	e78f      	b.n	8010624 <__kernel_rem_pio2f+0x3ec>
 8010704:	eef1 6a66 	vneg.f32	s13, s13
 8010708:	eeb1 7a47 	vneg.f32	s14, s14
 801070c:	edc7 6a00 	vstr	s13, [r7]
 8010710:	ed87 7a01 	vstr	s14, [r7, #4]
 8010714:	eef1 7a67 	vneg.f32	s15, s15
 8010718:	e790      	b.n	801063c <__kernel_rem_pio2f+0x404>
 801071a:	bf00      	nop

0801071c <floorf>:
 801071c:	ee10 3a10 	vmov	r3, s0
 8010720:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010724:	3a7f      	subs	r2, #127	@ 0x7f
 8010726:	2a16      	cmp	r2, #22
 8010728:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801072c:	dc2b      	bgt.n	8010786 <floorf+0x6a>
 801072e:	2a00      	cmp	r2, #0
 8010730:	da12      	bge.n	8010758 <floorf+0x3c>
 8010732:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010798 <floorf+0x7c>
 8010736:	ee30 0a27 	vadd.f32	s0, s0, s15
 801073a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010742:	dd06      	ble.n	8010752 <floorf+0x36>
 8010744:	2b00      	cmp	r3, #0
 8010746:	da24      	bge.n	8010792 <floorf+0x76>
 8010748:	2900      	cmp	r1, #0
 801074a:	4b14      	ldr	r3, [pc, #80]	@ (801079c <floorf+0x80>)
 801074c:	bf08      	it	eq
 801074e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010752:	ee00 3a10 	vmov	s0, r3
 8010756:	4770      	bx	lr
 8010758:	4911      	ldr	r1, [pc, #68]	@ (80107a0 <floorf+0x84>)
 801075a:	4111      	asrs	r1, r2
 801075c:	420b      	tst	r3, r1
 801075e:	d0fa      	beq.n	8010756 <floorf+0x3a>
 8010760:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010798 <floorf+0x7c>
 8010764:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010768:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010770:	ddef      	ble.n	8010752 <floorf+0x36>
 8010772:	2b00      	cmp	r3, #0
 8010774:	bfbe      	ittt	lt
 8010776:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801077a:	fa40 f202 	asrlt.w	r2, r0, r2
 801077e:	189b      	addlt	r3, r3, r2
 8010780:	ea23 0301 	bic.w	r3, r3, r1
 8010784:	e7e5      	b.n	8010752 <floorf+0x36>
 8010786:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801078a:	d3e4      	bcc.n	8010756 <floorf+0x3a>
 801078c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010790:	4770      	bx	lr
 8010792:	2300      	movs	r3, #0
 8010794:	e7dd      	b.n	8010752 <floorf+0x36>
 8010796:	bf00      	nop
 8010798:	7149f2ca 	.word	0x7149f2ca
 801079c:	bf800000 	.word	0xbf800000
 80107a0:	007fffff 	.word	0x007fffff

080107a4 <_init>:
 80107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a6:	bf00      	nop
 80107a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107aa:	bc08      	pop	{r3}
 80107ac:	469e      	mov	lr, r3
 80107ae:	4770      	bx	lr

080107b0 <_fini>:
 80107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b2:	bf00      	nop
 80107b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107b6:	bc08      	pop	{r3}
 80107b8:	469e      	mov	lr, r3
 80107ba:	4770      	bx	lr
