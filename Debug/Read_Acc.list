
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800fa68  0800fa68  00010a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010298  08010298  000122c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010298  08010298  00011298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102a0  080102a0  000122c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102a0  080102a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080102a4  080102a4  000112a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  080102a8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122c4  2**0
                  CONTENTS
 10 .bss          00001f84  200002c4  200002c4  000122c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002248  20002248  000122c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001340a  00000000  00000000  000122f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038b3  00000000  00000000  000256fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00028fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c74  00000000  00000000  0002a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229d6  00000000  00000000  0002accc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154bb  00000000  00000000  0004d6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf169  00000000  00000000  00062b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121cc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005950  00000000  00000000  00121d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0012765c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa50 	.word	0x0800fa50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800fa50 	.word	0x0800fa50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6a3a      	ldr	r2, [r7, #32]
 8000ebc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000ec2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6858      	ldr	r0, [r3, #4]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	899b      	ldrh	r3, [r3, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f003 fd18 	bl	8004914 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f002 feb1 	bl	8003c4c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6858      	ldr	r0, [r3, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	899b      	ldrh	r3, [r3, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f003 fd0d 	bl	8004914 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000efa:	2032      	movs	r0, #50	@ 0x32
 8000efc:	f002 fea6 	bl	8003c4c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000f00:	22b6      	movs	r2, #182	@ 0xb6
 8000f02:	217e      	movs	r1, #126	@ 0x7e
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 f959 	bl	80011bc <BMI088_WriteAccRegister>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	4413      	add	r3, r2
 8000f12:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000f14:	2032      	movs	r0, #50	@ 0x32
 8000f16:	f002 fe99 	bl	8003c4c <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000f1a:	f107 0316 	add.w	r3, r7, #22
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f8d0 	bl	80010c8 <BMI088_ReadAccRegister>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	4413      	add	r3, r2
 8000f30:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000f32:	200a      	movs	r0, #10
 8000f34:	f002 fe8a 	bl	8003c4c <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000f38:	22a8      	movs	r2, #168	@ 0xa8
 8000f3a:	2140      	movs	r1, #64	@ 0x40
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f93d 	bl	80011bc <BMI088_WriteAccRegister>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	4413      	add	r3, r2
 8000f4a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f002 fe7d 	bl	8003c4c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000f52:	2200      	movs	r2, #0
 8000f54:	2141      	movs	r1, #65	@ 0x41
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f930 	bl	80011bc <BMI088_WriteAccRegister>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	4413      	add	r3, r2
 8000f64:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f002 fe70 	bl	8003c4c <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	2153      	movs	r1, #83	@ 0x53
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 f923 	bl	80011bc <BMI088_WriteAccRegister>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f002 fe63 	bl	8003c4c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000f86:	2204      	movs	r2, #4
 8000f88:	2158      	movs	r1, #88	@ 0x58
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f916 	bl	80011bc <BMI088_WriteAccRegister>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	4413      	add	r3, r2
 8000f98:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f002 fe56 	bl	8003c4c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	217c      	movs	r1, #124	@ 0x7c
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f909 	bl	80011bc <BMI088_WriteAccRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f002 fe49 	bl	8003c4c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000fba:	2204      	movs	r2, #4
 8000fbc:	217d      	movs	r1, #125	@ 0x7d
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f8fc 	bl	80011bc <BMI088_WriteAccRegister>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	4413      	add	r3, r2
 8000fcc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f002 fe3c 	bl	8003c4c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80010c0 <BMI088_Init+0x228>)
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2292      	movs	r2, #146	@ 0x92
 8000fde:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6898      	ldr	r0, [r3, #8]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	89db      	ldrh	r3, [r3, #14]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	f003 fc92 	bl	8004914 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000ff0:	22b6      	movs	r2, #182	@ 0xb6
 8000ff2:	2114      	movs	r1, #20
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f91b 	bl	8001230 <BMI088_WriteGyrRegister>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	4413      	add	r3, r2
 8001002:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001004:	20fa      	movs	r0, #250	@ 0xfa
 8001006:	f002 fe21 	bl	8003c4c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800100a:	f107 0316 	add.w	r3, r7, #22
 800100e:	461a      	mov	r2, r3
 8001010:	2100      	movs	r1, #0
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 f896 	bl	8001144 <BMI088_ReadGyrRegister>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	4413      	add	r3, r2
 8001020:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f002 fe12 	bl	8003c4c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001028:	2201      	movs	r2, #1
 800102a:	210f      	movs	r1, #15
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f8ff 	bl	8001230 <BMI088_WriteGyrRegister>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	4413      	add	r3, r2
 800103a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800103c:	200a      	movs	r0, #10
 800103e:	f002 fe05 	bl	8003c4c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 8001042:	2207      	movs	r2, #7
 8001044:	2110      	movs	r1, #16
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f8f2 	bl	8001230 <BMI088_WriteGyrRegister>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	4413      	add	r3, r2
 8001054:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001056:	200a      	movs	r0, #10
 8001058:	f002 fdf8 	bl	8003c4c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	2115      	movs	r1, #21
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f8e5 	bl	8001230 <BMI088_WriteGyrRegister>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	4413      	add	r3, r2
 800106e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f002 fdeb 	bl	8003c4c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001076:	2201      	movs	r2, #1
 8001078:	2116      	movs	r1, #22
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f8d8 	bl	8001230 <BMI088_WriteGyrRegister>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	4413      	add	r3, r2
 8001088:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800108a:	200a      	movs	r0, #10
 800108c:	f002 fdde 	bl	8003c4c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001090:	2201      	movs	r2, #1
 8001092:	2118      	movs	r1, #24
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f8cb 	bl	8001230 <BMI088_WriteGyrRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4413      	add	r3, r2
 80010a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f002 fdd1 	bl	8003c4c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <BMI088_Init+0x22c>)
 80010ae:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2282      	movs	r2, #130	@ 0x82
 80010b4:	769a      	strb	r2, [r3, #26]

	return status;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]

}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	3a6b70a4 	.word	0x3a6b70a4
 80010c4:	3a0ba058 	.word	0x3a0ba058

080010c8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	460b      	mov	r3, r1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	753b      	strb	r3, [r7, #20]
 80010e0:	2300      	movs	r3, #0
 80010e2:	757b      	strb	r3, [r7, #21]
 80010e4:	2300      	movs	r3, #0
 80010e6:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6858      	ldr	r0, [r3, #4]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	899b      	ldrh	r3, [r3, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	f003 fc0e 	bl	8004914 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	f107 0210 	add.w	r2, r7, #16
 8001100:	f107 0114 	add.w	r1, r7, #20
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2303      	movs	r3, #3
 800110c:	f005 fcc1 	bl	8006a92 <HAL_SPI_TransmitReceive>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6858      	ldr	r0, [r3, #4]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	899b      	ldrh	r3, [r3, #12]
 8001126:	2201      	movs	r2, #1
 8001128:	4619      	mov	r1, r3
 800112a:	f003 fbf3 	bl	8004914 <HAL_GPIO_WritePin>

	if (status == 1) {
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001134:	7cba      	ldrb	r2, [r7, #18]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800113a:	7dfb      	ldrb	r3, [r7, #23]

}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	460b      	mov	r3, r1
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001158:	b2db      	uxtb	r3, r3
 800115a:	753b      	strb	r3, [r7, #20]
 800115c:	2300      	movs	r3, #0
 800115e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	89db      	ldrh	r3, [r3, #14]
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	f003 fbd2 	bl	8004914 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 0210 	add.w	r2, r7, #16
 8001178:	f107 0114 	add.w	r1, r7, #20
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2302      	movs	r3, #2
 8001184:	f005 fc85 	bl	8006a92 <HAL_SPI_TransmitReceive>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6898      	ldr	r0, [r3, #8]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	89db      	ldrh	r3, [r3, #14]
 800119e:	2201      	movs	r2, #1
 80011a0:	4619      	mov	r1, r3
 80011a2:	f003 fbb7 	bl	8004914 <HAL_GPIO_WritePin>

	if (status == 1) {
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d102      	bne.n	80011b2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80011ac:	7c7a      	ldrb	r2, [r7, #17]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80011b2:	7dfb      	ldrb	r3, [r7, #23]

}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
 80011c8:	4613      	mov	r3, r2
 80011ca:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	733b      	strb	r3, [r7, #12]
 80011d0:	78bb      	ldrb	r3, [r7, #2]
 80011d2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6858      	ldr	r0, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	899b      	ldrh	r3, [r3, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	f003 fb98 	bl	8004914 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f107 010c 	add.w	r1, r7, #12
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	2202      	movs	r2, #2
 80011f2:	f005 fb0a 	bl	800680a <HAL_SPI_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001204:	bf00      	nop
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f006 f802 	bl	8007214 <HAL_SPI_GetState>
 8001210:	4603      	mov	r3, r0
 8001212:	2b01      	cmp	r3, #1
 8001214:	d1f7      	bne.n	8001206 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6858      	ldr	r0, [r3, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	899b      	ldrh	r3, [r3, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	f003 fb77 	bl	8004914 <HAL_GPIO_WritePin>

	return status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]

}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	733b      	strb	r3, [r7, #12]
 8001244:	78bb      	ldrb	r3, [r7, #2]
 8001246:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6898      	ldr	r0, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	89db      	ldrh	r3, [r3, #14]
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	f003 fb5e 	bl	8004914 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f107 010c 	add.w	r1, r7, #12
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	2202      	movs	r2, #2
 8001266:	f005 fad0 	bl	800680a <HAL_SPI_Transmit>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001278:	bf00      	nop
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f005 ffc8 	bl	8007214 <HAL_SPI_GetState>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d1f7      	bne.n	800127a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6898      	ldr	r0, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	89db      	ldrh	r3, [r3, #14]
 8001292:	2201      	movs	r2, #1
 8001294:	4619      	mov	r1, r3
 8001296:	f003 fb3d 	bl	8004914 <HAL_GPIO_WritePin>

	return status;
 800129a:	7bfb      	ldrb	r3, [r7, #15]

}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6858      	ldr	r0, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	899b      	ldrh	r3, [r3, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	f003 fb2c 	bl	8004914 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f103 0112 	add.w	r1, r3, #18
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80012cc:	2308      	movs	r3, #8
 80012ce:	f005 fd89 	bl	8006de4 <HAL_SPI_TransmitReceive_DMA>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <BMI088_ReadAccelerometerDMA+0x3e>

		imu->readingAcc = 1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	741a      	strb	r2, [r3, #16]
		return 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	e008      	b.n	80012f4 <BMI088_ReadAccelerometerDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6858      	ldr	r0, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	899b      	ldrh	r3, [r3, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	f003 fb11 	bl	8004914 <HAL_GPIO_WritePin>
		return 0;
 80012f2:	2300      	movs	r3, #0

	}

}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6858      	ldr	r0, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	899b      	ldrh	r3, [r3, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f003 fb00 	bl	8004914 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001320:	b2db      	uxtb	r3, r3
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800133a:	b2db      	uxtb	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001346:	b2db      	uxtb	r3, r3
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001354:	b2db      	uxtb	r3, r3
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001360:	b2db      	uxtb	r3, r3
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800136e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800138a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80013a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6898      	ldr	r0, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	89db      	ldrh	r3, [r3, #14]
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	f003 fa9c 	bl	8004914 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f103 011a 	add.w	r1, r3, #26
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80013ec:	2307      	movs	r3, #7
 80013ee:	f005 fcf9 	bl	8006de4 <HAL_SPI_TransmitReceive_DMA>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d104      	bne.n	8001402 <BMI088_ReadGyroscopeDMA+0x3e>

		imu->readingGyr = 1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	745a      	strb	r2, [r3, #17]
		return 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	e008      	b.n	8001414 <BMI088_ReadGyroscopeDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6898      	ldr	r0, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	89db      	ldrh	r3, [r3, #14]
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	f003 fa81 	bl	8004914 <HAL_GPIO_WritePin>
		return 0;
 8001412:	2300      	movs	r3, #0

	}

}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6898      	ldr	r0, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	89db      	ldrh	r3, [r3, #14]
 800142c:	2201      	movs	r2, #1
 800142e:	4619      	mov	r1, r3
 8001430:	f003 fa70 	bl	8004914 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001440:	b2db      	uxtb	r3, r3
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800144c:	b2db      	uxtb	r3, r3
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800145a:	b2db      	uxtb	r3, r3
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001466:	b2db      	uxtb	r3, r3
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001474:	b2db      	uxtb	r3, r3
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21a      	sxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001480:	b2db      	uxtb	r3, r3
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800148e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80014ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001508 <FusionDegreesToRadians+0x24>
 80014f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	3c8efa35 	.word	0x3c8efa35

0800150c <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	105a      	asrs	r2, r3, #1
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <FusionFastInverseSqrt+0x54>)
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8001524:	ed97 7a03 	vldr	s14, [r7, #12]
 8001528:	edd7 7a01 	vldr	s15, [r7, #4]
 800152c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001564 <FusionFastInverseSqrt+0x58>
 8001530:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800153c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001544:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001568 <FusionFastInverseSqrt+0x5c>
 8001548:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800154c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	5f1f1412 	.word	0x5f1f1412
 8001564:	3f36d312 	.word	0x3f36d312
 8001568:	3fd851ff 	.word	0x3fd851ff

0800156c <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	eef0 6a40 	vmov.f32	s13, s0
 8001576:	eeb0 7a60 	vmov.f32	s14, s1
 800157a:	eef0 7a41 	vmov.f32	s15, s2
 800157e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001582:	ed87 7a02 	vstr	s14, [r7, #8]
 8001586:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800158a:	edd7 7a01 	vldr	s15, [r7, #4]
 800158e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d10f      	bne.n	80015b8 <FusionVectorIsZero+0x4c>
 8001598:	edd7 7a02 	vldr	s15, [r7, #8]
 800159c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	d108      	bne.n	80015b8 <FusionVectorIsZero+0x4c>
 80015a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	d101      	bne.n	80015b8 <FusionVectorIsZero+0x4c>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <FusionVectorIsZero+0x4e>
 80015b8:	2300      	movs	r3, #0
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 80015cc:	b480      	push	{r7}
 80015ce:	b091      	sub	sp, #68	@ 0x44
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	eeb0 5a40 	vmov.f32	s10, s0
 80015d6:	eef0 5a60 	vmov.f32	s11, s1
 80015da:	eeb0 6a41 	vmov.f32	s12, s2
 80015de:	eef0 6a61 	vmov.f32	s13, s3
 80015e2:	eeb0 7a42 	vmov.f32	s14, s4
 80015e6:	eef0 7a62 	vmov.f32	s15, s5
 80015ea:	ed87 5a07 	vstr	s10, [r7, #28]
 80015ee:	edc7 5a08 	vstr	s11, [r7, #32]
 80015f2:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80015f6:	edc7 6a04 	vstr	s13, [r7, #16]
 80015fa:	ed87 7a05 	vstr	s14, [r7, #20]
 80015fe:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 8001602:	ed97 7a07 	vldr	s14, [r7, #28]
 8001606:	edd7 7a04 	vldr	s15, [r7, #16]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800160e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8001612:	ed97 7a08 	vldr	s14, [r7, #32]
 8001616:	edd7 7a05 	vldr	s15, [r7, #20]
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800161e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8001622:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800162e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 8001632:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001636:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800163a:	ca07      	ldmia	r2, {r0, r1, r2}
 800163c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001640:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001642:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001646:	ee06 1a90 	vmov	s13, r1
 800164a:	ee07 2a10 	vmov	s14, r2
 800164e:	ee07 3a90 	vmov	s15, r3
}
 8001652:	eeb0 0a66 	vmov.f32	s0, s13
 8001656:	eef0 0a47 	vmov.f32	s1, s14
 800165a:	eeb0 1a67 	vmov.f32	s2, s15
 800165e:	3744      	adds	r7, #68	@ 0x44
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	eef0 6a40 	vmov.f32	s13, s0
 8001672:	eeb0 7a60 	vmov.f32	s14, s1
 8001676:	eef0 7a41 	vmov.f32	s15, s2
 800167a:	edc7 6a01 	vstr	s13, [r7, #4]
 800167e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001682:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001686:	ed97 7a01 	vldr	s14, [r7, #4]
 800168a:	edd7 7a02 	vldr	s15, [r7, #8]
 800168e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001692:	edd7 7a03 	vldr	s15, [r7, #12]
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80016a8:	b480      	push	{r7}
 80016aa:	b08f      	sub	sp, #60	@ 0x3c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	eef0 6a40 	vmov.f32	s13, s0
 80016b2:	eeb0 7a60 	vmov.f32	s14, s1
 80016b6:	eef0 7a41 	vmov.f32	s15, s2
 80016ba:	edc7 1a04 	vstr	s3, [r7, #16]
 80016be:	edc7 6a05 	vstr	s13, [r7, #20]
 80016c2:	ed87 7a06 	vstr	s14, [r7, #24]
 80016c6:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80016ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80016ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80016d6:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80016da:	ed97 7a06 	vldr	s14, [r7, #24]
 80016de:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80016e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .z = vector.axis.z * scalar,
 80016ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80016ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80016f6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }};
    return result;
 80016fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016fe:	f107 0220 	add.w	r2, r7, #32
 8001702:	ca07      	ldmia	r2, {r0, r1, r2}
 8001704:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001708:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800170a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800170c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170e:	ee06 1a90 	vmov	s13, r1
 8001712:	ee07 2a10 	vmov	s14, r2
 8001716:	ee07 3a90 	vmov	s15, r3
}
 800171a:	eeb0 0a66 	vmov.f32	s0, s13
 800171e:	eef0 0a47 	vmov.f32	s1, s14
 8001722:	eeb0 1a67 	vmov.f32	s2, s15
 8001726:	373c      	adds	r7, #60	@ 0x3c
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001730:	b480      	push	{r7}
 8001732:	b091      	sub	sp, #68	@ 0x44
 8001734:	af00      	add	r7, sp, #0
 8001736:	eeb0 5a40 	vmov.f32	s10, s0
 800173a:	eef0 5a60 	vmov.f32	s11, s1
 800173e:	eeb0 6a41 	vmov.f32	s12, s2
 8001742:	eef0 6a61 	vmov.f32	s13, s3
 8001746:	eeb0 7a42 	vmov.f32	s14, s4
 800174a:	eef0 7a62 	vmov.f32	s15, s5
 800174e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001752:	edc7 5a08 	vstr	s11, [r7, #32]
 8001756:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800175a:	edc7 6a04 	vstr	s13, [r7, #16]
 800175e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001762:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 8001766:	ed97 7a07 	vldr	s14, [r7, #28]
 800176a:	edd7 7a04 	vldr	s15, [r7, #16]
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001772:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001776:	ed97 7a08 	vldr	s14, [r7, #32]
 800177a:	edd7 7a05 	vldr	s15, [r7, #20]
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001782:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001786:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800178a:	edd7 7a06 	vldr	s15, [r7, #24]
 800178e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001792:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 8001796:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800179a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800179e:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80017a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017aa:	ee06 1a90 	vmov	s13, r1
 80017ae:	ee07 2a10 	vmov	s14, r2
 80017b2:	ee07 3a90 	vmov	s15, r3
}
 80017b6:	eeb0 0a66 	vmov.f32	s0, s13
 80017ba:	eef0 0a47 	vmov.f32	s1, s14
 80017be:	eeb0 1a67 	vmov.f32	s2, s15
 80017c2:	3744      	adds	r7, #68	@ 0x44
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80017cc:	b480      	push	{r7}
 80017ce:	b091      	sub	sp, #68	@ 0x44
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	eeb0 5a40 	vmov.f32	s10, s0
 80017d6:	eef0 5a60 	vmov.f32	s11, s1
 80017da:	eeb0 6a41 	vmov.f32	s12, s2
 80017de:	eef0 6a61 	vmov.f32	s13, s3
 80017e2:	eeb0 7a42 	vmov.f32	s14, s4
 80017e6:	eef0 7a62 	vmov.f32	s15, s5
 80017ea:	ed87 5a07 	vstr	s10, [r7, #28]
 80017ee:	edc7 5a08 	vstr	s11, [r7, #32]
 80017f2:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80017f6:	edc7 6a04 	vstr	s13, [r7, #16]
 80017fa:	ed87 7a05 	vstr	s14, [r7, #20]
 80017fe:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 8001802:	ed97 7a08 	vldr	s14, [r7, #32]
 8001806:	edd7 7a06 	vldr	s15, [r7, #24]
 800180a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001812:	edd7 7a05 	vldr	s15, [r7, #20]
 8001816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800181e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = A.z * B.x - A.x * B.z,
 8001822:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001826:	edd7 7a04 	vldr	s15, [r7, #16]
 800182a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800182e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001832:	edd7 7a06 	vldr	s15, [r7, #24]
 8001836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800183e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001842:	ed97 7a07 	vldr	s14, [r7, #28]
 8001846:	edd7 7a05 	vldr	s15, [r7, #20]
 800184a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800184e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001852:	edd7 7a04 	vldr	s15, [r7, #16]
 8001856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800185e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 8001862:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001866:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800186a:	ca07      	ldmia	r2, {r0, r1, r2}
 800186c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001870:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001876:	ee06 1a90 	vmov	s13, r1
 800187a:	ee07 2a10 	vmov	s14, r2
 800187e:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 8001882:	eeb0 0a66 	vmov.f32	s0, s13
 8001886:	eef0 0a47 	vmov.f32	s1, s14
 800188a:	eeb0 1a67 	vmov.f32	s2, s15
 800188e:	3744      	adds	r7, #68	@ 0x44
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	eeb0 5a40 	vmov.f32	s10, s0
 80018a2:	eef0 5a60 	vmov.f32	s11, s1
 80018a6:	eeb0 6a41 	vmov.f32	s12, s2
 80018aa:	eef0 6a61 	vmov.f32	s13, s3
 80018ae:	eeb0 7a42 	vmov.f32	s14, s4
 80018b2:	eef0 7a62 	vmov.f32	s15, s5
 80018b6:	ed87 5a03 	vstr	s10, [r7, #12]
 80018ba:	edc7 5a04 	vstr	s11, [r7, #16]
 80018be:	ed87 6a05 	vstr	s12, [r7, #20]
 80018c2:	edc7 6a00 	vstr	s13, [r7]
 80018c6:	ed87 7a01 	vstr	s14, [r7, #4]
 80018ca:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 80018ce:	ed97 5a00 	vldr	s10, [r7]
 80018d2:	edd7 5a01 	vldr	s11, [r7, #4]
 80018d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80018da:	edd7 6a03 	vldr	s13, [r7, #12]
 80018de:	ed97 7a04 	vldr	s14, [r7, #16]
 80018e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e6:	eef0 1a45 	vmov.f32	s3, s10
 80018ea:	eeb0 2a65 	vmov.f32	s4, s11
 80018ee:	eef0 2a46 	vmov.f32	s5, s12
 80018f2:	eeb0 0a66 	vmov.f32	s0, s13
 80018f6:	eef0 0a47 	vmov.f32	s1, s14
 80018fa:	eeb0 1a67 	vmov.f32	s2, s15
 80018fe:	f7ff ff17 	bl	8001730 <FusionVectorHadamardProduct>
 8001902:	eef0 6a40 	vmov.f32	s13, s0
 8001906:	eeb0 7a60 	vmov.f32	s14, s1
 800190a:	eef0 7a41 	vmov.f32	s15, s2
 800190e:	edc7 6a07 	vstr	s13, [r7, #28]
 8001912:	ed87 7a08 	vstr	s14, [r7, #32]
 8001916:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800191a:	edd7 6a07 	vldr	s13, [r7, #28]
 800191e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001922:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001926:	eeb0 0a66 	vmov.f32	s0, s13
 800192a:	eef0 0a47 	vmov.f32	s1, s14
 800192e:	eeb0 1a67 	vmov.f32	s2, s15
 8001932:	f7ff fe99 	bl	8001668 <FusionVectorSum>
 8001936:	eef0 7a40 	vmov.f32	s15, s0
}
 800193a:	eeb0 0a67 	vmov.f32	s0, s15
 800193e:	3728      	adds	r7, #40	@ 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	eef0 6a40 	vmov.f32	s13, s0
 800194e:	eeb0 7a60 	vmov.f32	s14, s1
 8001952:	eef0 7a41 	vmov.f32	s15, s2
 8001956:	edc7 6a01 	vstr	s13, [r7, #4]
 800195a:	ed87 7a02 	vstr	s14, [r7, #8]
 800195e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001962:	ed97 5a01 	vldr	s10, [r7, #4]
 8001966:	edd7 5a02 	vldr	s11, [r7, #8]
 800196a:	ed97 6a03 	vldr	s12, [r7, #12]
 800196e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001972:	ed97 7a02 	vldr	s14, [r7, #8]
 8001976:	edd7 7a03 	vldr	s15, [r7, #12]
 800197a:	eef0 1a45 	vmov.f32	s3, s10
 800197e:	eeb0 2a65 	vmov.f32	s4, s11
 8001982:	eef0 2a46 	vmov.f32	s5, s12
 8001986:	eeb0 0a66 	vmov.f32	s0, s13
 800198a:	eef0 0a47 	vmov.f32	s1, s14
 800198e:	eeb0 1a67 	vmov.f32	s2, s15
 8001992:	f7ff fecd 	bl	8001730 <FusionVectorHadamardProduct>
 8001996:	eef0 6a40 	vmov.f32	s13, s0
 800199a:	eeb0 7a60 	vmov.f32	s14, s1
 800199e:	eef0 7a41 	vmov.f32	s15, s2
 80019a2:	edc7 6a05 	vstr	s13, [r7, #20]
 80019a6:	ed87 7a06 	vstr	s14, [r7, #24]
 80019aa:	edc7 7a07 	vstr	s15, [r7, #28]
 80019ae:	edd7 6a05 	vldr	s13, [r7, #20]
 80019b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80019b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019ba:	eeb0 0a66 	vmov.f32	s0, s13
 80019be:	eef0 0a47 	vmov.f32	s1, s14
 80019c2:	eeb0 1a67 	vmov.f32	s2, s15
 80019c6:	f7ff fe4f 	bl	8001668 <FusionVectorSum>
 80019ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	@ 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	eef0 6a40 	vmov.f32	s13, s0
 80019e2:	eeb0 7a60 	vmov.f32	s14, s1
 80019e6:	eef0 7a41 	vmov.f32	s15, s2
 80019ea:	edc7 6a05 	vstr	s13, [r7, #20]
 80019ee:	ed87 7a06 	vstr	s14, [r7, #24]
 80019f2:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80019f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80019fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80019fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a02:	eeb0 0a66 	vmov.f32	s0, s13
 8001a06:	eef0 0a47 	vmov.f32	s1, s14
 8001a0a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a0e:	f7ff ff99 	bl	8001944 <FusionVectorMagnitudeSquared>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	f7ff fd77 	bl	800150c <FusionFastInverseSqrt>
 8001a1e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001a22:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a26:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a2e:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 8001a32:	eeb0 0a66 	vmov.f32	s0, s13
 8001a36:	eef0 0a47 	vmov.f32	s1, s14
 8001a3a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a3e:	f7ff fe33 	bl	80016a8 <FusionVectorMultiplyScalar>
 8001a42:	eef0 6a40 	vmov.f32	s13, s0
 8001a46:	eeb0 7a60 	vmov.f32	s14, s1
 8001a4a:	eef0 7a41 	vmov.f32	s15, s2
 8001a4e:	edc7 6a08 	vstr	s13, [r7, #32]
 8001a52:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001a56:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8001a5a:	6a39      	ldr	r1, [r7, #32]
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a60:	ee06 1a90 	vmov	s13, r1
 8001a64:	ee07 2a10 	vmov	s14, r2
 8001a68:	ee07 3a90 	vmov	s15, r3
}
 8001a6c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a70:	eef0 0a47 	vmov.f32	s1, s14
 8001a74:	eeb0 1a67 	vmov.f32	s2, s15
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001a7e:	b490      	push	{r4, r7}
 8001a80:	b094      	sub	sp, #80	@ 0x50
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	eeb0 4a40 	vmov.f32	s8, s0
 8001a88:	eef0 4a60 	vmov.f32	s9, s1
 8001a8c:	eeb0 5a41 	vmov.f32	s10, s2
 8001a90:	eef0 5a61 	vmov.f32	s11, s3
 8001a94:	eeb0 6a42 	vmov.f32	s12, s4
 8001a98:	eef0 6a62 	vmov.f32	s13, s5
 8001a9c:	eeb0 7a43 	vmov.f32	s14, s6
 8001aa0:	eef0 7a63 	vmov.f32	s15, s7
 8001aa4:	ed87 4a08 	vstr	s8, [r7, #32]
 8001aa8:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 8001aac:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8001ab0:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8001ab4:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ab8:	edc7 6a05 	vstr	s13, [r7, #20]
 8001abc:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ac0:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 8001ac4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ac8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ad0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001ad4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ae0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001ae4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001ae8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aec:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001af0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001af4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001af8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b00:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 8001b04:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001b08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b12:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001b16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b1a:	ee06 0a10 	vmov	s12, r0
 8001b1e:	ee06 1a90 	vmov	s13, r1
 8001b22:	ee07 2a10 	vmov	s14, r2
 8001b26:	ee07 3a90 	vmov	s15, r3
}
 8001b2a:	eeb0 0a46 	vmov.f32	s0, s12
 8001b2e:	eef0 0a66 	vmov.f32	s1, s13
 8001b32:	eeb0 1a47 	vmov.f32	s2, s14
 8001b36:	eef0 1a67 	vmov.f32	s3, s15
 8001b3a:	3750      	adds	r7, #80	@ 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc90      	pop	{r4, r7}
 8001b40:	4770      	bx	lr

08001b42 <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001b42:	b490      	push	{r4, r7}
 8001b44:	b094      	sub	sp, #80	@ 0x50
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	eeb0 4a40 	vmov.f32	s8, s0
 8001b4c:	eef0 4a60 	vmov.f32	s9, s1
 8001b50:	eeb0 5a41 	vmov.f32	s10, s2
 8001b54:	eef0 5a61 	vmov.f32	s11, s3
 8001b58:	eeb0 6a42 	vmov.f32	s12, s4
 8001b5c:	eef0 6a62 	vmov.f32	s13, s5
 8001b60:	eeb0 7a43 	vmov.f32	s14, s6
 8001b64:	eef0 7a63 	vmov.f32	s15, s7
 8001b68:	ed87 4a08 	vstr	s8, [r7, #32]
 8001b6c:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 8001b70:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8001b74:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8001b78:	ed87 6a04 	vstr	s12, [r7, #16]
 8001b7c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b80:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b84:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001b88:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b94:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ba4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001ba8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb4:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001bb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001bc4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001bc8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001be8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf4:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c00:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c04:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001c08:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c14:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c24:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c34:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c44:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001c48:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c54:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c64:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c74:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001c78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c84:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 8001c88:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001c8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c96:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c9e:	ee06 0a10 	vmov	s12, r0
 8001ca2:	ee06 1a90 	vmov	s13, r1
 8001ca6:	ee07 2a10 	vmov	s14, r2
 8001caa:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 8001cae:	eeb0 0a46 	vmov.f32	s0, s12
 8001cb2:	eef0 0a66 	vmov.f32	s1, s13
 8001cb6:	eeb0 1a47 	vmov.f32	s2, s14
 8001cba:	eef0 1a67 	vmov.f32	s3, s15
 8001cbe:	3750      	adds	r7, #80	@ 0x50
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc90      	pop	{r4, r7}
 8001cc4:	4770      	bx	lr

08001cc6 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001cc6:	b490      	push	{r4, r7}
 8001cc8:	b094      	sub	sp, #80	@ 0x50
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	eef0 4a40 	vmov.f32	s9, s0
 8001cd0:	eeb0 5a60 	vmov.f32	s10, s1
 8001cd4:	eef0 5a41 	vmov.f32	s11, s2
 8001cd8:	eeb0 6a61 	vmov.f32	s12, s3
 8001cdc:	eef0 6a42 	vmov.f32	s13, s4
 8001ce0:	eeb0 7a62 	vmov.f32	s14, s5
 8001ce4:	eef0 7a43 	vmov.f32	s15, s6
 8001ce8:	edc7 4a08 	vstr	s9, [r7, #32]
 8001cec:	ed87 5a09 	vstr	s10, [r7, #36]	@ 0x24
 8001cf0:	edc7 5a0a 	vstr	s11, [r7, #40]	@ 0x28
 8001cf4:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 8001cf8:	edc7 6a05 	vstr	s13, [r7, #20]
 8001cfc:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d00:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8001d04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d08:	eeb1 7a67 	vneg.f32	s14, s15
 8001d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d14:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001d18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d24:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001d28:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d30:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d34:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8001d38:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d54:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001d58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d64:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8001d68:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d74:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001d78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d84:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d94:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8001d98:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001dc4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 8001dc8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001dcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dd6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001dd8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dde:	ee06 0a10 	vmov	s12, r0
 8001de2:	ee06 1a90 	vmov	s13, r1
 8001de6:	ee07 2a10 	vmov	s14, r2
 8001dea:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 8001dee:	eeb0 0a46 	vmov.f32	s0, s12
 8001df2:	eef0 0a66 	vmov.f32	s1, s13
 8001df6:	eeb0 1a47 	vmov.f32	s2, s14
 8001dfa:	eef0 1a67 	vmov.f32	s3, s15
 8001dfe:	3750      	adds	r7, #80	@ 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr

08001e06 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001e06:	b590      	push	{r4, r7, lr}
 8001e08:	b093      	sub	sp, #76	@ 0x4c
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	eeb0 6a40 	vmov.f32	s12, s0
 8001e10:	eef0 6a60 	vmov.f32	s13, s1
 8001e14:	eeb0 7a41 	vmov.f32	s14, s2
 8001e18:	eef0 7a61 	vmov.f32	s15, s3
 8001e1c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001e20:	edc7 6a05 	vstr	s13, [r7, #20]
 8001e24:	ed87 7a06 	vstr	s14, [r7, #24]
 8001e28:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001e2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e38:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e48:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e68:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6c:	f7ff fb4e 	bl	800150c <FusionFastInverseSqrt>
 8001e70:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 8001e74:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e78:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .x = Q.x * magnitudeReciprocal,
 8001e84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e88:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e90:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = Q.y * magnitudeReciprocal,
 8001e94:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e98:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ea0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = Q.z * magnitudeReciprocal,
 8001ea4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ea8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001eb0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 8001eb4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ec2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001ec4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ec6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eca:	ee06 0a10 	vmov	s12, r0
 8001ece:	ee06 1a90 	vmov	s13, r1
 8001ed2:	ee07 2a10 	vmov	s14, r2
 8001ed6:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001eda:	eeb0 0a46 	vmov.f32	s0, s12
 8001ede:	eef0 0a66 	vmov.f32	s1, s13
 8001ee2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ee6:	eef0 1a67 	vmov.f32	s3, s15
 8001eea:	374c      	adds	r7, #76	@ 0x4c
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <FusionAhrsInitialise+0x38>)
 8001efa:	f107 0408 	add.w	r4, r7, #8
 8001efe:	461d      	mov	r5, r3
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f08:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8001f0c:	f107 0308 	add.w	r3, r7, #8
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f86e 	bl	8001ff4 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f807 	bl	8001f2c <FusionAhrsReset>
}
 8001f1e:	bf00      	nop
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	0800fa68 	.word	0x0800fa68

08001f2c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b091      	sub	sp, #68	@ 0x44
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f3a:	619a      	str	r2, [r3, #24]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	@ 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	@ 0x30
    ahrs->initialising = true;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <FusionAhrsReset+0xc4>)
 8001f78:	639a      	str	r2, [r3, #56]	@ 0x38
    ahrs->angularRateRecovery = false;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	649a      	str	r2, [r3, #72]	@ 0x48
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	64da      	str	r2, [r3, #76]	@ 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	659a      	str	r2, [r3, #88]	@ 0x58
    ahrs->accelerometerIgnored = false;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	661a      	str	r2, [r3, #96]	@ 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	665a      	str	r2, [r3, #100]	@ 0x64
    ahrs->magnetometerIgnored = false;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    ahrs->magneticRecoveryTrigger = 0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	66da      	str	r2, [r3, #108]	@ 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001fe2:	bf00      	nop
 8001fe4:	3744      	adds	r7, #68	@ 0x44
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	41200000 	.word	0x41200000

08001ff4 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	edd3 7a02 	vldr	s15, [r3, #8]
 8002014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	d007      	beq.n	800202e <FusionAhrsSetSettings+0x3a>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	edd3 7a02 	vldr	s15, [r3, #8]
 8002024:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002158 <FusionAhrsSetSettings+0x164>
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	e001      	b.n	8002032 <FusionAhrsSetSettings+0x3e>
 800202e:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800215c <FusionAhrsSetSettings+0x168>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	edd3 7a03 	vldr	s15, [r3, #12]
 800203e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	d01b      	beq.n	8002080 <FusionAhrsSetSettings+0x8c>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	edd3 7a03 	vldr	s15, [r3, #12]
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	f7ff fa47 	bl	80014e4 <FusionDegreesToRadians>
 8002056:	eef0 7a40 	vmov.f32	s15, s0
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	f00c fa61 	bl	800e524 <sinf>
 8002062:	eef0 7a40 	vmov.f32	s15, s0
 8002066:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800206a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800206e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002072:	eeb0 0a67 	vmov.f32	s0, s15
 8002076:	f00c f9b1 	bl	800e3dc <powf>
 800207a:	eef0 7a40 	vmov.f32	s15, s0
 800207e:	e001      	b.n	8002084 <FusionAhrsSetSettings+0x90>
 8002080:	eddf 7a36 	vldr	s15, [pc, #216]	@ 800215c <FusionAhrsSetSettings+0x168>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002090:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	d01b      	beq.n	80020d2 <FusionAhrsSetSettings+0xde>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	edd3 7a04 	vldr	s15, [r3, #16]
 80020a0:	eeb0 0a67 	vmov.f32	s0, s15
 80020a4:	f7ff fa1e 	bl	80014e4 <FusionDegreesToRadians>
 80020a8:	eef0 7a40 	vmov.f32	s15, s0
 80020ac:	eeb0 0a67 	vmov.f32	s0, s15
 80020b0:	f00c fa38 	bl	800e524 <sinf>
 80020b4:	eef0 7a40 	vmov.f32	s15, s0
 80020b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80020c4:	eeb0 0a67 	vmov.f32	s0, s15
 80020c8:	f00c f988 	bl	800e3dc <powf>
 80020cc:	eef0 7a40 	vmov.f32	s15, s0
 80020d0:	e001      	b.n	80020d6 <FusionAhrsSetSettings+0xe2>
 80020d2:	eddf 7a22 	vldr	s15, [pc, #136]	@ 800215c <FusionAhrsSetSettings+0x168>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	461a      	mov	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	665a      	str	r2, [r3, #100]	@ 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	461a      	mov	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80020fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d003      	beq.n	8002110 <FusionAhrsSetSettings+0x11c>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <FusionAhrsSetSettings+0x16c>)
 8002114:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <FusionAhrsSetSettings+0x16c>)
 800211a:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002122:	f083 0301 	eor.w	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	edd3 7a01 	vldr	s15, [r3, #4]
 800213a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800213e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002142:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	3f7ae148 	.word	0x3f7ae148
 800215c:	7f7fffff 	.word	0x7f7fffff
 8002160:	7f7fffff 	.word	0x7f7fffff

08002164 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b0bf      	sub	sp, #252	@ 0xfc
 8002168:	af00      	add	r7, sp, #0
 800216a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800216c:	eeb0 5a61 	vmov.f32	s10, s3
 8002170:	eef0 5a42 	vmov.f32	s11, s4
 8002174:	eeb0 6a62 	vmov.f32	s12, s5
 8002178:	eef0 6a43 	vmov.f32	s13, s6
 800217c:	eeb0 7a63 	vmov.f32	s14, s7
 8002180:	eef0 7a44 	vmov.f32	s15, s8
 8002184:	edc7 4a01 	vstr	s9, [r7, #4]
 8002188:	ed87 0a08 	vstr	s0, [r7, #32]
 800218c:	edc7 0a09 	vstr	s1, [r7, #36]	@ 0x24
 8002190:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8002194:	ed87 5a05 	vstr	s10, [r7, #20]
 8002198:	edc7 5a06 	vstr	s11, [r7, #24]
 800219c:	ed87 6a07 	vstr	s12, [r7, #28]
 80021a0:	edc7 6a02 	vstr	s13, [r7, #8]
 80021a4:	ed87 7a03 	vstr	s14, [r7, #12]
 80021a8:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ae:	3328      	adds	r3, #40	@ 0x28
 80021b0:	f107 0214 	add.w	r2, r7, #20
 80021b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80021b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabsf(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabsf(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabsf(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 80021ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80021be:	eeb0 7ae7 	vabs.f32	s14, s15
 80021c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d0:	dc17      	bgt.n	8002202 <FusionAhrsUpdate+0x9e>
 80021d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80021d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80021da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	dc0b      	bgt.n	8002202 <FusionAhrsUpdate+0x9e>
 80021ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021ee:	eeb0 7ae7 	vabs.f32	s14, s15
 80021f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	dd15      	ble.n	800222e <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 8002202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002204:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002208:	3318      	adds	r3, #24
 800220a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 8002210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002212:	f7ff fe8b 	bl	8001f2c <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 8002216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002218:	f103 0418 	add.w	r4, r3, #24
 800221c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 8002226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising) {
 800222e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002230:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002234:	2b00      	cmp	r3, #0
 8002236:	d02d      	beq.n	8002294 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8002244:	edd7 7a01 	vldr	s15, [r7, #4]
 8002248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002252:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 8002256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002258:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800225c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	d407      	bmi.n	800227c <FusionAhrsUpdate+0x118>
 800226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002272:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	d10b      	bne.n	8002294 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800227c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	639a      	str	r2, [r3, #56]	@ 0x38
            ahrs->initialising = false;
 8002284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            ahrs->angularRateRecovery = false;
 800228c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8002294:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002296:	f000 faf4 	bl	8002882 <HalfGravity>
 800229a:	eef0 6a40 	vmov.f32	s13, s0
 800229e:	eeb0 7a60 	vmov.f32	s14, s1
 80022a2:	eef0 7a41 	vmov.f32	s15, s2
 80022a6:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 80022aa:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 80022ae:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    ahrs->accelerometerIgnored = true;
 80022ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 80022d2:	edd7 6a05 	vldr	s13, [r7, #20]
 80022d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80022da:	edd7 7a07 	vldr	s15, [r7, #28]
 80022de:	eeb0 0a66 	vmov.f32	s0, s13
 80022e2:	eef0 0a47 	vmov.f32	s1, s14
 80022e6:	eeb0 1a67 	vmov.f32	s2, s15
 80022ea:	f7ff f93f 	bl	800156c <FusionVectorIsZero>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 809c 	beq.w	8002434 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 80022fc:	edd7 6a05 	vldr	s13, [r7, #20]
 8002300:	ed97 7a06 	vldr	s14, [r7, #24]
 8002304:	edd7 7a07 	vldr	s15, [r7, #28]
 8002308:	eeb0 0a66 	vmov.f32	s0, s13
 800230c:	eef0 0a47 	vmov.f32	s1, s14
 8002310:	eeb0 1a67 	vmov.f32	s2, s15
 8002314:	f7ff fb60 	bl	80019d8 <FusionVectorNormalise>
 8002318:	eef0 6a40 	vmov.f32	s13, s0
 800231c:	eeb0 7a60 	vmov.f32	s14, s1
 8002320:	eef0 7a41 	vmov.f32	s15, s2
 8002324:	edc7 6a28 	vstr	s13, [r7, #160]	@ 0xa0
 8002328:	ed87 7a29 	vstr	s14, [r7, #164]	@ 0xa4
 800232c:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 8002330:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002332:	ed97 5a25 	vldr	s10, [r7, #148]	@ 0x94
 8002336:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 800233a:	ed97 6a27 	vldr	s12, [r7, #156]	@ 0x9c
 800233e:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 8002342:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002346:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800234a:	eef0 1a45 	vmov.f32	s3, s10
 800234e:	eeb0 2a65 	vmov.f32	s4, s11
 8002352:	eef0 2a46 	vmov.f32	s5, s12
 8002356:	eeb0 0a66 	vmov.f32	s0, s13
 800235a:	eef0 0a47 	vmov.f32	s1, s14
 800235e:	eeb0 1a67 	vmov.f32	s2, s15
 8002362:	f000 fc55 	bl	8002c10 <Feedback>
 8002366:	eef0 6a40 	vmov.f32	s13, s0
 800236a:	eeb0 7a60 	vmov.f32	s14, s1
 800236e:	eef0 7a41 	vmov.f32	s15, s2
 8002372:	edc4 6a11 	vstr	s13, [r4, #68]	@ 0x44
 8002376:	ed84 7a12 	vstr	s14, [r4, #72]	@ 0x48
 800237a:	edc4 7a13 	vstr	s15, [r4, #76]	@ 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if (ahrs->initialising || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800237e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002380:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002384:	2b00      	cmp	r3, #0
 8002386:	d118      	bne.n	80023ba <FusionAhrsUpdate+0x256>
 8002388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238a:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800238e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002392:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002396:	eeb0 0a66 	vmov.f32	s0, s13
 800239a:	eef0 0a47 	vmov.f32	s1, s14
 800239e:	eeb0 1a67 	vmov.f32	s2, s15
 80023a2:	f7ff facf 	bl	8001944 <FusionVectorMagnitudeSquared>
 80023a6:	eeb0 7a40 	vmov.f32	s14, s0
 80023aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80023b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	d80a      	bhi.n	80023d0 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 80023c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	f1a3 0209 	sub.w	r2, r3, #9
 80023ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80023ce:	e004      	b.n	80023da <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 80023d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 80023da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dd07      	ble.n	80023f6 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	2200      	movs	r2, #0
 80023ea:	665a      	str	r2, [r3, #100]	@ 0x64
            ahrs->accelerometerIgnored = false;
 80023ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80023f4:	e004      	b.n	8002400 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80023f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	461a      	mov	r2, r3
 80023fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fe:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8002400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002402:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8002404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	461a      	mov	r2, r3
 800240a:	2100      	movs	r1, #0
 800240c:	f000 fcb5 	bl	8002d7a <Clamp>
 8002410:	4602      	mov	r2, r0
 8002412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002414:	661a      	str	r2, [r3, #96]	@ 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 8002416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002418:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800241c:	f083 0301 	eor.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8002426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002428:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800242c:	3244      	adds	r2, #68	@ 0x44
 800242e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002430:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	673b      	str	r3, [r7, #112]	@ 0x70
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	67bb      	str	r3, [r7, #120]	@ 0x78
    ahrs->magnetometerIgnored = true;
 8002446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800244e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002452:	ed97 7a03 	vldr	s14, [r7, #12]
 8002456:	edd7 7a04 	vldr	s15, [r7, #16]
 800245a:	eeb0 0a66 	vmov.f32	s0, s13
 800245e:	eef0 0a47 	vmov.f32	s1, s14
 8002462:	eeb0 1a67 	vmov.f32	s2, s15
 8002466:	f7ff f881 	bl	800156c <FusionVectorIsZero>
 800246a:	4603      	mov	r3, r0
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80d1 	beq.w	800261a <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8002478:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800247a:	f000 fabf 	bl	80029fc <HalfMagnetic>
 800247e:	eef0 6a40 	vmov.f32	s13, s0
 8002482:	eeb0 7a60 	vmov.f32	s14, s1
 8002486:	eef0 7a41 	vmov.f32	s15, s2
 800248a:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 800248e:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 8002492:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8002496:	ed97 5a02 	vldr	s10, [r7, #8]
 800249a:	edd7 5a03 	vldr	s11, [r7, #12]
 800249e:	ed97 6a04 	vldr	s12, [r7, #16]
 80024a2:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80024a6:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80024aa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80024ae:	eef0 1a45 	vmov.f32	s3, s10
 80024b2:	eeb0 2a65 	vmov.f32	s4, s11
 80024b6:	eef0 2a46 	vmov.f32	s5, s12
 80024ba:	eeb0 0a66 	vmov.f32	s0, s13
 80024be:	eef0 0a47 	vmov.f32	s1, s14
 80024c2:	eeb0 1a67 	vmov.f32	s2, s15
 80024c6:	f7ff f981 	bl	80017cc <FusionVectorCrossProduct>
 80024ca:	eef0 6a40 	vmov.f32	s13, s0
 80024ce:	eeb0 7a60 	vmov.f32	s14, s1
 80024d2:	eef0 7a41 	vmov.f32	s15, s2
 80024d6:	edc7 6a2b 	vstr	s13, [r7, #172]	@ 0xac
 80024da:	ed87 7a2c 	vstr	s14, [r7, #176]	@ 0xb0
 80024de:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
 80024e2:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 80024e6:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80024ea:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80024ee:	eeb0 0a66 	vmov.f32	s0, s13
 80024f2:	eef0 0a47 	vmov.f32	s1, s14
 80024f6:	eeb0 1a67 	vmov.f32	s2, s15
 80024fa:	f7ff fa6d 	bl	80019d8 <FusionVectorNormalise>
 80024fe:	eef0 6a40 	vmov.f32	s13, s0
 8002502:	eeb0 7a60 	vmov.f32	s14, s1
 8002506:	eef0 7a41 	vmov.f32	s15, s2
 800250a:	edc7 6a2e 	vstr	s13, [r7, #184]	@ 0xb8
 800250e:	ed87 7a2f 	vstr	s14, [r7, #188]	@ 0xbc
 8002512:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
 8002516:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002518:	ed97 5a0c 	vldr	s10, [r7, #48]	@ 0x30
 800251c:	edd7 5a0d 	vldr	s11, [r7, #52]	@ 0x34
 8002520:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 8002524:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8002528:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 800252c:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8002530:	eef0 1a45 	vmov.f32	s3, s10
 8002534:	eeb0 2a65 	vmov.f32	s4, s11
 8002538:	eef0 2a46 	vmov.f32	s5, s12
 800253c:	eeb0 0a66 	vmov.f32	s0, s13
 8002540:	eef0 0a47 	vmov.f32	s1, s14
 8002544:	eeb0 1a67 	vmov.f32	s2, s15
 8002548:	f000 fb62 	bl	8002c10 <Feedback>
 800254c:	eef0 6a40 	vmov.f32	s13, s0
 8002550:	eeb0 7a60 	vmov.f32	s14, s1
 8002554:	eef0 7a41 	vmov.f32	s15, s2
 8002558:	edc4 6a14 	vstr	s13, [r4, #80]	@ 0x50
 800255c:	ed84 7a15 	vstr	s14, [r4, #84]	@ 0x54
 8002560:	edc4 7a16 	vstr	s15, [r4, #88]	@ 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if (ahrs->initialising || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 8002564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002566:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <FusionAhrsUpdate+0x43c>
 800256e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002570:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8002574:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8002578:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800257c:	eeb0 0a66 	vmov.f32	s0, s13
 8002580:	eef0 0a47 	vmov.f32	s1, s14
 8002584:	eeb0 1a67 	vmov.f32	s2, s15
 8002588:	f7ff f9dc 	bl	8001944 <FusionVectorMagnitudeSquared>
 800258c:	eeb0 7a40 	vmov.f32	s14, s0
 8002590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002592:	edd3 7a04 	vldr	s15, [r3, #16]
 8002596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259e:	d80a      	bhi.n	80025b6 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 80025a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ac:	f1a3 0209 	sub.w	r2, r3, #9
 80025b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80025b4:	e004      	b.n	80025c0 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 80025b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025be:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 80025c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dd07      	ble.n	80025dc <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 80025cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ce:	2200      	movs	r2, #0
 80025d0:	671a      	str	r2, [r3, #112]	@ 0x70
            ahrs->magnetometerIgnored = false;
 80025d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 80025da:	e004      	b.n	80025e6 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80025dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	461a      	mov	r2, r3
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 80025e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80025ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	461a      	mov	r2, r3
 80025f0:	2100      	movs	r1, #0
 80025f2:	f000 fbc2 	bl	8002d7a <Clamp>
 80025f6:	4602      	mov	r2, r0
 80025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 80025fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800260c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800260e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002612:	3250      	adds	r2, #80	@ 0x50
 8002614:	ca07      	ldmia	r2, {r0, r1, r2}
 8002616:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800261a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800261e:	f7fe ff61 	bl	80014e4 <FusionDegreesToRadians>
 8002622:	eeb0 6a40 	vmov.f32	s12, s0
 8002626:	edd7 6a08 	vldr	s13, [r7, #32]
 800262a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800262e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002632:	eef0 1a46 	vmov.f32	s3, s12
 8002636:	eeb0 0a66 	vmov.f32	s0, s13
 800263a:	eef0 0a47 	vmov.f32	s1, s14
 800263e:	eeb0 1a67 	vmov.f32	s2, s15
 8002642:	f7ff f831 	bl	80016a8 <FusionVectorMultiplyScalar>
 8002646:	eef0 6a40 	vmov.f32	s13, s0
 800264a:	eeb0 7a60 	vmov.f32	s14, s1
 800264e:	eef0 7a41 	vmov.f32	s15, s2
 8002652:	edc7 6a16 	vstr	s13, [r7, #88]	@ 0x58
 8002656:	ed87 7a17 	vstr	s14, [r7, #92]	@ 0x5c
 800265a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800265e:	ed97 5a1c 	vldr	s10, [r7, #112]	@ 0x70
 8002662:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8002666:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 800266a:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 800266e:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002672:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002676:	eef0 1a45 	vmov.f32	s3, s10
 800267a:	eeb0 2a65 	vmov.f32	s4, s11
 800267e:	eef0 2a46 	vmov.f32	s5, s12
 8002682:	eeb0 0a66 	vmov.f32	s0, s13
 8002686:	eef0 0a47 	vmov.f32	s1, s14
 800268a:	eeb0 1a67 	vmov.f32	s2, s15
 800268e:	f7fe ff9d 	bl	80015cc <FusionVectorAdd>
 8002692:	eef0 6a40 	vmov.f32	s13, s0
 8002696:	eeb0 7a60 	vmov.f32	s14, s1
 800269a:	eef0 7a41 	vmov.f32	s15, s2
 800269e:	edc7 6a31 	vstr	s13, [r7, #196]	@ 0xc4
 80026a2:	ed87 7a32 	vstr	s14, [r7, #200]	@ 0xc8
 80026a6:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
 80026aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ac:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 80026b0:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80026b4:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 80026b8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 80026bc:	eef0 1a46 	vmov.f32	s3, s12
 80026c0:	eeb0 0a66 	vmov.f32	s0, s13
 80026c4:	eef0 0a47 	vmov.f32	s1, s14
 80026c8:	eeb0 1a67 	vmov.f32	s2, s15
 80026cc:	f7fe ffec 	bl	80016a8 <FusionVectorMultiplyScalar>
 80026d0:	eef0 6a40 	vmov.f32	s13, s0
 80026d4:	eeb0 7a60 	vmov.f32	s14, s1
 80026d8:	eef0 7a41 	vmov.f32	s15, s2
 80026dc:	edc7 6a34 	vstr	s13, [r7, #208]	@ 0xd0
 80026e0:	ed87 7a35 	vstr	s14, [r7, #212]	@ 0xd4
 80026e4:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
 80026e8:	ed97 5a34 	vldr	s10, [r7, #208]	@ 0xd0
 80026ec:	edd7 5a35 	vldr	s11, [r7, #212]	@ 0xd4
 80026f0:	ed97 6a36 	vldr	s12, [r7, #216]	@ 0xd8
 80026f4:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80026f8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80026fc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002700:	eef0 1a45 	vmov.f32	s3, s10
 8002704:	eeb0 2a65 	vmov.f32	s4, s11
 8002708:	eef0 2a46 	vmov.f32	s5, s12
 800270c:	eeb0 0a66 	vmov.f32	s0, s13
 8002710:	eef0 0a47 	vmov.f32	s1, s14
 8002714:	eeb0 1a67 	vmov.f32	s2, s15
 8002718:	f7fe ff58 	bl	80015cc <FusionVectorAdd>
 800271c:	eef0 6a40 	vmov.f32	s13, s0
 8002720:	eeb0 7a60 	vmov.f32	s14, s1
 8002724:	eef0 7a41 	vmov.f32	s15, s2
 8002728:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 800272c:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8002730:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002734:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002738:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800273c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002740:	edd7 1a01 	vldr	s3, [r7, #4]
 8002744:	eeb0 0a66 	vmov.f32	s0, s13
 8002748:	eef0 0a47 	vmov.f32	s1, s14
 800274c:	eeb0 1a67 	vmov.f32	s2, s15
 8002750:	f7fe ffaa 	bl	80016a8 <FusionVectorMultiplyScalar>
 8002754:	eef0 6a40 	vmov.f32	s13, s0
 8002758:	eeb0 7a60 	vmov.f32	s14, s1
 800275c:	eef0 7a41 	vmov.f32	s15, s2
 8002760:	edc7 6a37 	vstr	s13, [r7, #220]	@ 0xdc
 8002764:	ed87 7a38 	vstr	s14, [r7, #224]	@ 0xe0
 8002768:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
 800276c:	edd7 4a37 	vldr	s9, [r7, #220]	@ 0xdc
 8002770:	ed97 5a38 	vldr	s10, [r7, #224]	@ 0xe0
 8002774:	edd7 5a39 	vldr	s11, [r7, #228]	@ 0xe4
 8002778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277a:	ed93 6a06 	vldr	s12, [r3, #24]
 800277e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002782:	ed93 7a08 	vldr	s14, [r3, #32]
 8002786:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800278a:	eeb0 2a64 	vmov.f32	s4, s9
 800278e:	eef0 2a45 	vmov.f32	s5, s10
 8002792:	eeb0 3a65 	vmov.f32	s6, s11
 8002796:	eeb0 0a46 	vmov.f32	s0, s12
 800279a:	eef0 0a66 	vmov.f32	s1, s13
 800279e:	eeb0 1a47 	vmov.f32	s2, s14
 80027a2:	eef0 1a67 	vmov.f32	s3, s15
 80027a6:	f7ff fa8e 	bl	8001cc6 <FusionQuaternionMultiplyVector>
 80027aa:	eeb0 6a40 	vmov.f32	s12, s0
 80027ae:	eef0 6a60 	vmov.f32	s13, s1
 80027b2:	eeb0 7a41 	vmov.f32	s14, s2
 80027b6:	eef0 7a61 	vmov.f32	s15, s3
 80027ba:	ed87 6a3a 	vstr	s12, [r7, #232]	@ 0xe8
 80027be:	edc7 6a3b 	vstr	s13, [r7, #236]	@ 0xec
 80027c2:	ed87 7a3c 	vstr	s14, [r7, #240]	@ 0xf0
 80027c6:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
 80027ca:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80027cc:	ed97 4a3a 	vldr	s8, [r7, #232]	@ 0xe8
 80027d0:	edd7 4a3b 	vldr	s9, [r7, #236]	@ 0xec
 80027d4:	ed97 5a3c 	vldr	s10, [r7, #240]	@ 0xf0
 80027d8:	edd7 5a3d 	vldr	s11, [r7, #244]	@ 0xf4
 80027dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027de:	ed93 6a06 	vldr	s12, [r3, #24]
 80027e2:	edd3 6a07 	vldr	s13, [r3, #28]
 80027e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80027ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80027ee:	eeb0 2a44 	vmov.f32	s4, s8
 80027f2:	eef0 2a64 	vmov.f32	s5, s9
 80027f6:	eeb0 3a45 	vmov.f32	s6, s10
 80027fa:	eef0 3a65 	vmov.f32	s7, s11
 80027fe:	eeb0 0a46 	vmov.f32	s0, s12
 8002802:	eef0 0a66 	vmov.f32	s1, s13
 8002806:	eeb0 1a47 	vmov.f32	s2, s14
 800280a:	eef0 1a67 	vmov.f32	s3, s15
 800280e:	f7ff f936 	bl	8001a7e <FusionQuaternionAdd>
 8002812:	eeb0 6a40 	vmov.f32	s12, s0
 8002816:	eef0 6a60 	vmov.f32	s13, s1
 800281a:	eeb0 7a41 	vmov.f32	s14, s2
 800281e:	eef0 7a61 	vmov.f32	s15, s3
 8002822:	ed84 6a06 	vstr	s12, [r4, #24]
 8002826:	edc4 6a07 	vstr	s13, [r4, #28]
 800282a:	ed84 7a08 	vstr	s14, [r4, #32]
 800282e:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002832:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002836:	ed93 6a06 	vldr	s12, [r3, #24]
 800283a:	edd3 6a07 	vldr	s13, [r3, #28]
 800283e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002842:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002846:	eeb0 0a46 	vmov.f32	s0, s12
 800284a:	eef0 0a66 	vmov.f32	s1, s13
 800284e:	eeb0 1a47 	vmov.f32	s2, s14
 8002852:	eef0 1a67 	vmov.f32	s3, s15
 8002856:	f7ff fad6 	bl	8001e06 <FusionQuaternionNormalise>
 800285a:	eeb0 6a40 	vmov.f32	s12, s0
 800285e:	eef0 6a60 	vmov.f32	s13, s1
 8002862:	eeb0 7a41 	vmov.f32	s14, s2
 8002866:	eef0 7a61 	vmov.f32	s15, s3
 800286a:	ed84 6a06 	vstr	s12, [r4, #24]
 800286e:	edc4 6a07 	vstr	s13, [r4, #28]
 8002872:	ed84 7a08 	vstr	s14, [r4, #32]
 8002876:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
#undef Q
}
 800287a:	bf00      	nop
 800287c:	37fc      	adds	r7, #252	@ 0xfc
 800287e:	46bd      	mov	sp, r7
 8002880:	bd90      	pop	{r4, r7, pc}

08002882 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002882:	b480      	push	{r7}
 8002884:	b093      	sub	sp, #76	@ 0x4c
 8002886:	af00      	add	r7, sp, #0
 8002888:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	dc02      	bgt.n	8002898 <HalfGravity+0x16>
 8002892:	2b00      	cmp	r3, #0
 8002894:	da03      	bge.n	800289e <HalfGravity+0x1c>
 8002896:	e094      	b.n	80029c2 <HalfGravity+0x140>
 8002898:	2b02      	cmp	r3, #2
 800289a:	d048      	beq.n	800292e <HalfGravity+0xac>
 800289c:	e091      	b.n	80029c2 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	ed93 7a07 	vldr	s14, [r3, #28]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80028aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	edd3 6a06 	vldr	s13, [r3, #24]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80028ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028be:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80028c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80028d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	edd3 6a06 	vldr	s13, [r3, #24]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	edd3 7a07 	vldr	s15, [r3, #28]
 80028e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80028ea:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002902:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800291a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800291e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002922:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002926:	ca07      	ldmia	r2, {r0, r1, r2}
 8002928:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800292c:	e052      	b.n	80029d4 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	ed93 7a06 	vldr	s14, [r3, #24]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	edd3 7a08 	vldr	s15, [r3, #32]
 800293a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	edd3 6a07 	vldr	s13, [r3, #28]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800294a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002952:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	ed93 7a08 	vldr	s14, [r3, #32]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	edd3 6a06 	vldr	s13, [r3, #24]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800297e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	ed93 7a06 	vldr	s14, [r3, #24]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	edd3 7a06 	vldr	s15, [r3, #24]
 800298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002992:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002996:	ee37 7a67 	vsub.f32	s14, s14, s15
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80029a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029aa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80029ae:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 80029b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80029b6:	f107 0218 	add.w	r2, r7, #24
 80029ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80029bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029c0:	e008      	b.n	80029d4 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	647b      	str	r3, [r7, #68]	@ 0x44
#undef Q
}
 80029d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029da:	ee06 1a90 	vmov	s13, r1
 80029de:	ee07 2a10 	vmov	s14, r2
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eeb0 0a66 	vmov.f32	s0, s13
 80029ea:	eef0 0a47 	vmov.f32	s1, s14
 80029ee:	eeb0 1a67 	vmov.f32	s2, s15
 80029f2:	374c      	adds	r7, #76	@ 0x4c
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 80029fc:	b480      	push	{r7}
 80029fe:	b097      	sub	sp, #92	@ 0x5c
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	f000 809a 	beq.w	8002b42 <HalfMagnetic+0x146>
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	f300 80e1 	bgt.w	8002bd6 <HalfMagnetic+0x1da>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HalfMagnetic+0x22>
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d048      	beq.n	8002aae <HalfMagnetic+0xb2>
 8002a1c:	e0db      	b.n	8002bd6 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a42:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a5a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a72:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a96:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a9a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002a9e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002aa2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002aac:	e09c      	b.n	8002be8 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	edd3 6a07 	vldr	s13, [r3, #28]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ada:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	edd3 6a07 	vldr	s13, [r3, #28]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afe:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b02:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b2e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002b32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b36:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002b3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b40:	e052      	b.n	8002be8 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b6a:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b96:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b9a:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	edd3 6a08 	vldr	s13, [r3, #32]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002bc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002bc6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bca:	f107 021c 	add.w	r2, r7, #28
 8002bce:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bd4:	e008      	b.n	8002be8 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	657b      	str	r3, [r7, #84]	@ 0x54
#undef Q
}
 8002be8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002bea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bee:	ee06 1a90 	vmov	s13, r1
 8002bf2:	ee07 2a10 	vmov	s14, r2
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eeb0 0a66 	vmov.f32	s0, s13
 8002bfe:	eef0 0a47 	vmov.f32	s1, s14
 8002c02:	eeb0 1a67 	vmov.f32	s2, s15
 8002c06:	375c      	adds	r7, #92	@ 0x5c
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b090      	sub	sp, #64	@ 0x40
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	eeb0 5a40 	vmov.f32	s10, s0
 8002c1a:	eef0 5a60 	vmov.f32	s11, s1
 8002c1e:	eeb0 6a41 	vmov.f32	s12, s2
 8002c22:	eef0 6a61 	vmov.f32	s13, s3
 8002c26:	eeb0 7a42 	vmov.f32	s14, s4
 8002c2a:	eef0 7a62 	vmov.f32	s15, s5
 8002c2e:	ed87 5a07 	vstr	s10, [r7, #28]
 8002c32:	edc7 5a08 	vstr	s11, [r7, #32]
 8002c36:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8002c3a:	edc7 6a04 	vstr	s13, [r7, #16]
 8002c3e:	ed87 7a05 	vstr	s14, [r7, #20]
 8002c42:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 8002c46:	ed97 5a04 	vldr	s10, [r7, #16]
 8002c4a:	edd7 5a05 	vldr	s11, [r7, #20]
 8002c4e:	ed97 6a06 	vldr	s12, [r7, #24]
 8002c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c56:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c5a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c5e:	eef0 1a45 	vmov.f32	s3, s10
 8002c62:	eeb0 2a65 	vmov.f32	s4, s11
 8002c66:	eef0 2a46 	vmov.f32	s5, s12
 8002c6a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c6e:	eef0 0a47 	vmov.f32	s1, s14
 8002c72:	eeb0 1a67 	vmov.f32	s2, s15
 8002c76:	f7fe fe0f 	bl	8001898 <FusionVectorDotProduct>
 8002c7a:	eef0 7a40 	vmov.f32	s15, s0
 8002c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c86:	d540      	bpl.n	8002d0a <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 8002c88:	ed97 5a04 	vldr	s10, [r7, #16]
 8002c8c:	edd7 5a05 	vldr	s11, [r7, #20]
 8002c90:	ed97 6a06 	vldr	s12, [r7, #24]
 8002c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c98:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c9c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ca0:	eef0 1a45 	vmov.f32	s3, s10
 8002ca4:	eeb0 2a65 	vmov.f32	s4, s11
 8002ca8:	eef0 2a46 	vmov.f32	s5, s12
 8002cac:	eeb0 0a66 	vmov.f32	s0, s13
 8002cb0:	eef0 0a47 	vmov.f32	s1, s14
 8002cb4:	eeb0 1a67 	vmov.f32	s2, s15
 8002cb8:	f7fe fd88 	bl	80017cc <FusionVectorCrossProduct>
 8002cbc:	eef0 6a40 	vmov.f32	s13, s0
 8002cc0:	eeb0 7a60 	vmov.f32	s14, s1
 8002cc4:	eef0 7a41 	vmov.f32	s15, s2
 8002cc8:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8002ccc:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8002cd0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8002cd4:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8002cd8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002cdc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002ce0:	eeb0 0a66 	vmov.f32	s0, s13
 8002ce4:	eef0 0a47 	vmov.f32	s1, s14
 8002ce8:	eeb0 1a67 	vmov.f32	s2, s15
 8002cec:	f7fe fe74 	bl	80019d8 <FusionVectorNormalise>
 8002cf0:	eef0 6a40 	vmov.f32	s13, s0
 8002cf4:	eeb0 7a60 	vmov.f32	s14, s1
 8002cf8:	eef0 7a41 	vmov.f32	s15, s2
 8002cfc:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8002d00:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8002d04:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8002d08:	e025      	b.n	8002d56 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 8002d0a:	ed97 5a04 	vldr	s10, [r7, #16]
 8002d0e:	edd7 5a05 	vldr	s11, [r7, #20]
 8002d12:	ed97 6a06 	vldr	s12, [r7, #24]
 8002d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d1e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d22:	eef0 1a45 	vmov.f32	s3, s10
 8002d26:	eeb0 2a65 	vmov.f32	s4, s11
 8002d2a:	eef0 2a46 	vmov.f32	s5, s12
 8002d2e:	eeb0 0a66 	vmov.f32	s0, s13
 8002d32:	eef0 0a47 	vmov.f32	s1, s14
 8002d36:	eeb0 1a67 	vmov.f32	s2, s15
 8002d3a:	f7fe fd47 	bl	80017cc <FusionVectorCrossProduct>
 8002d3e:	eef0 6a40 	vmov.f32	s13, s0
 8002d42:	eeb0 7a60 	vmov.f32	s14, s1
 8002d46:	eef0 7a41 	vmov.f32	s15, s2
 8002d4a:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8002d4e:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8002d52:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
}
 8002d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	ee06 1a90 	vmov	s13, r1
 8002d60:	ee07 2a10 	vmov	s14, r2
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eeb0 0a66 	vmov.f32	s0, s13
 8002d6c:	eef0 0a47 	vmov.f32	s1, s14
 8002d70:	eeb0 1a67 	vmov.f32	s2, s15
 8002d74:	3740      	adds	r7, #64	@ 0x40
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
    if (value < min) {
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	da01      	bge.n	8002d92 <Clamp+0x18>
        return min;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	e006      	b.n	8002da0 <Clamp+0x26>
    }
    if (value > max) {
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dd01      	ble.n	8002d9e <Clamp+0x24>
        return max;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e000      	b.n	8002da0 <Clamp+0x26>
    }
    return value;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	@ 0x30
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	61f8      	str	r0, [r7, #28]
 8002db4:	eeb0 5a40 	vmov.f32	s10, s0
 8002db8:	eef0 5a60 	vmov.f32	s11, s1
 8002dbc:	eeb0 6a41 	vmov.f32	s12, s2
 8002dc0:	eef0 6a61 	vmov.f32	s13, s3
 8002dc4:	eeb0 7a42 	vmov.f32	s14, s4
 8002dc8:	eef0 7a62 	vmov.f32	s15, s5
 8002dcc:	ed87 3a00 	vstr	s6, [r7]
 8002dd0:	ed87 5a04 	vstr	s10, [r7, #16]
 8002dd4:	edc7 5a05 	vstr	s11, [r7, #20]
 8002dd8:	ed87 6a06 	vstr	s12, [r7, #24]
 8002ddc:	edc7 6a01 	vstr	s13, [r7, #4]
 8002de0:	ed87 7a02 	vstr	s14, [r7, #8]
 8002de4:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfa:	ed97 3a09 	vldr	s6, [r7, #36]	@ 0x24
 8002dfe:	edd7 3a0a 	vldr	s7, [r7, #40]	@ 0x28
 8002e02:	ed97 4a0b 	vldr	s8, [r7, #44]	@ 0x2c
 8002e06:	ed97 5a01 	vldr	s10, [r7, #4]
 8002e0a:	edd7 5a02 	vldr	s11, [r7, #8]
 8002e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e12:	edd7 6a04 	vldr	s13, [r7, #16]
 8002e16:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e1e:	edd7 4a00 	vldr	s9, [r7]
 8002e22:	eef0 1a45 	vmov.f32	s3, s10
 8002e26:	eeb0 2a65 	vmov.f32	s4, s11
 8002e2a:	eef0 2a46 	vmov.f32	s5, s12
 8002e2e:	eeb0 0a66 	vmov.f32	s0, s13
 8002e32:	eef0 0a47 	vmov.f32	s1, s14
 8002e36:	eeb0 1a67 	vmov.f32	s2, s15
 8002e3a:	69f8      	ldr	r0, [r7, #28]
 8002e3c:	f7ff f992 	bl	8002164 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising) {
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 8002e4a:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8002e5c <FusionAhrsUpdateNoMagnetometer+0xb0>
 8002e4e:	69f8      	ldr	r0, [r7, #28]
 8002e50:	f000 f829 	bl	8002ea6 <FusionAhrsSetHeading>
    }
}
 8002e54:	bf00      	nop
 8002e56:	3730      	adds	r7, #48	@ 0x30
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	00000000 	.word	0x00000000

08002e60 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002e60:	b490      	push	{r4, r7}
 8002e62:	b08a      	sub	sp, #40	@ 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f107 0418 	add.w	r4, r7, #24
 8002e6e:	3318      	adds	r3, #24
 8002e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e76:	69b8      	ldr	r0, [r7, #24]
 8002e78:	69f9      	ldr	r1, [r7, #28]
 8002e7a:	6a3a      	ldr	r2, [r7, #32]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	ee06 0a10 	vmov	s12, r0
 8002e82:	ee06 1a90 	vmov	s13, r1
 8002e86:	ee07 2a10 	vmov	s14, r2
 8002e8a:	ee07 3a90 	vmov	s15, r3
}
 8002e8e:	eeb0 0a46 	vmov.f32	s0, s12
 8002e92:	eef0 0a66 	vmov.f32	s1, s13
 8002e96:	eeb0 1a47 	vmov.f32	s2, s14
 8002e9a:	eef0 1a67 	vmov.f32	s3, s15
 8002e9e:	3728      	adds	r7, #40	@ 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc90      	pop	{r4, r7}
 8002ea4:	4770      	bx	lr

08002ea6 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002ea6:	b590      	push	{r4, r7, lr}
 8002ea8:	b089      	sub	sp, #36	@ 0x24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	ed93 7a06 	vldr	s14, [r3, #24]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	ed93 7a08 	vldr	s14, [r3, #32]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002eea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f02:	eef0 0a67 	vmov.f32	s1, s15
 8002f06:	eeb0 0a46 	vmov.f32	s0, s12
 8002f0a:	f00b fa65 	bl	800e3d8 <atan2f>
 8002f0e:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002f12:	ed97 0a00 	vldr	s0, [r7]
 8002f16:	f7fe fae5 	bl	80014e4 <FusionDegreesToRadians>
 8002f1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f2e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002f32:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f36:	f00b faa9 	bl	800e48c <cosf>
 8002f3a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002f3e:	edc7 7a02 	vstr	s15, [r7, #8]
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002f4e:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f52:	f00b fae7 	bl	800e524 <sinf>
 8002f56:	eef0 7a40 	vmov.f32	s15, s0
 8002f5a:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002f5e:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002f62:	687c      	ldr	r4, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	ed93 4a06 	vldr	s8, [r3, #24]
 8002f6a:	edd3 4a07 	vldr	s9, [r3, #28]
 8002f6e:	ed93 5a08 	vldr	s10, [r3, #32]
 8002f72:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 8002f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f7a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002f7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f86:	eeb0 2a44 	vmov.f32	s4, s8
 8002f8a:	eef0 2a64 	vmov.f32	s5, s9
 8002f8e:	eeb0 3a45 	vmov.f32	s6, s10
 8002f92:	eef0 3a65 	vmov.f32	s7, s11
 8002f96:	eeb0 0a46 	vmov.f32	s0, s12
 8002f9a:	eef0 0a66 	vmov.f32	s1, s13
 8002f9e:	eeb0 1a47 	vmov.f32	s2, s14
 8002fa2:	eef0 1a67 	vmov.f32	s3, s15
 8002fa6:	f7fe fdcc 	bl	8001b42 <FusionQuaternionMultiply>
 8002faa:	eeb0 6a40 	vmov.f32	s12, s0
 8002fae:	eef0 6a60 	vmov.f32	s13, s1
 8002fb2:	eeb0 7a41 	vmov.f32	s14, s2
 8002fb6:	eef0 7a61 	vmov.f32	s15, s3
 8002fba:	ed84 6a06 	vstr	s12, [r4, #24]
 8002fbe:	edc4 6a07 	vstr	s13, [r4, #28]
 8002fc2:	ed84 7a08 	vstr	s14, [r4, #32]
 8002fc6:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
#undef Q
}
 8002fca:	bf00      	nop
 8002fcc:	3724      	adds	r7, #36	@ 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd90      	pop	{r4, r7, pc}
	...

08002fd4 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fe2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ff8 <FusionRadiansToDegrees+0x24>
 8002fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002fea:	eeb0 0a67 	vmov.f32	s0, s15
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	42652ee0 	.word	0x42652ee0

08002ffc <FusionAsin>:
static inline float FusionAsin(const float value) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8003006:	edd7 7a01 	vldr	s15, [r7, #4]
 800300a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800300e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	d802      	bhi.n	800301e <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8003018:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800304c <FusionAsin+0x50>
 800301c:	e011      	b.n	8003042 <FusionAsin+0x46>
    if (value >= 1.0f) {
 800301e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302e:	db02      	blt.n	8003036 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8003030:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8003050 <FusionAsin+0x54>
 8003034:	e005      	b.n	8003042 <FusionAsin+0x46>
    return asinf(value);
 8003036:	ed97 0a01 	vldr	s0, [r7, #4]
 800303a:	f00b f9a1 	bl	800e380 <asinf>
 800303e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003042:	eeb0 0a67 	vmov.f32	s0, s15
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	bfc90fdb 	.word	0xbfc90fdb
 8003050:	3fc90fdb 	.word	0x3fc90fdb

08003054 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b090      	sub	sp, #64	@ 0x40
 8003058:	af00      	add	r7, sp, #0
 800305a:	eeb0 6a40 	vmov.f32	s12, s0
 800305e:	eef0 6a60 	vmov.f32	s13, s1
 8003062:	eeb0 7a41 	vmov.f32	s14, s2
 8003066:	eef0 7a61 	vmov.f32	s15, s3
 800306a:	ed87 6a04 	vstr	s12, [r7, #16]
 800306e:	edc7 6a05 	vstr	s13, [r7, #20]
 8003072:	ed87 7a06 	vstr	s14, [r7, #24]
 8003076:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 800307a:	ed97 7a06 	vldr	s14, [r7, #24]
 800307e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003086:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800308a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 8003092:	ed97 7a04 	vldr	s14, [r7, #16]
 8003096:	edd7 7a05 	vldr	s15, [r7, #20]
 800309a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800309e:	edd7 6a06 	vldr	s13, [r7, #24]
 80030a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80030a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030aa:	ee77 6a27 	vadd.f32	s13, s14, s15
 80030ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80030b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80030be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c2:	eef0 0a67 	vmov.f32	s1, s15
 80030c6:	eeb0 0a66 	vmov.f32	s0, s13
 80030ca:	f00b f985 	bl	800e3d8 <atan2f>
 80030ce:	eef0 7a40 	vmov.f32	s15, s0
 80030d2:	eeb0 0a67 	vmov.f32	s0, s15
 80030d6:	f7ff ff7d 	bl	8002fd4 <FusionRadiansToDegrees>
 80030da:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80030de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 80030e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80030e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80030ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80030f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003102:	eeb0 0a67 	vmov.f32	s0, s15
 8003106:	f7ff ff79 	bl	8002ffc <FusionAsin>
 800310a:	eef0 7a40 	vmov.f32	s15, s0
 800310e:	eeb0 0a67 	vmov.f32	s0, s15
 8003112:	f7ff ff5f 	bl	8002fd4 <FusionRadiansToDegrees>
 8003116:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800311a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800311e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003122:	edd7 7a07 	vldr	s15, [r7, #28]
 8003126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312a:	edd7 6a05 	vldr	s13, [r7, #20]
 800312e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003136:	ee77 6a27 	vadd.f32	s13, s14, s15
 800313a:	ed97 7a07 	vldr	s14, [r7, #28]
 800313e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800314a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314e:	eef0 0a67 	vmov.f32	s1, s15
 8003152:	eeb0 0a66 	vmov.f32	s0, s13
 8003156:	f00b f93f 	bl	800e3d8 <atan2f>
 800315a:	eef0 7a40 	vmov.f32	s15, s0
 800315e:	eeb0 0a67 	vmov.f32	s0, s15
 8003162:	f7ff ff37 	bl	8002fd4 <FusionRadiansToDegrees>
 8003166:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800316a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }};
    return euler;
 800316e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003172:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003176:	ca07      	ldmia	r2, {r0, r1, r2}
 8003178:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800317c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800317e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003182:	ee06 1a90 	vmov	s13, r1
 8003186:	ee07 2a10 	vmov	s14, r2
 800318a:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800318e:	eeb0 0a66 	vmov.f32	s0, s13
 8003192:	eef0 0a47 	vmov.f32	s1, s14
 8003196:	eeb0 1a67 	vmov.f32	s2, s15
 800319a:	3740      	adds	r7, #64	@ 0x40
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_GPIO_EXTI_Callback>:
////////////////////////////////////////////////////////////////////////////////////////////



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d103      	bne.n	80031b8 <HAL_GPIO_EXTI_Callback+0x18>
	{
		// we check if the interrupt pin is the accelerometer one
		BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 80031b0:	4806      	ldr	r0, [pc, #24]	@ (80031cc <HAL_GPIO_EXTI_Callback+0x2c>)
 80031b2:	f7fe f877 	bl	80012a4 <BMI088_ReadAccelerometerDMA>
	else if(GPIO_Pin == INT_GYR_Pin)
	{
		// we check if the interrupt pin is the gyroscope one
		BMI088_ReadGyroscopeDMA(&imu);
	}
}
 80031b6:	e005      	b.n	80031c4 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == INT_GYR_Pin)
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d102      	bne.n	80031c4 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 80031be:	4803      	ldr	r0, [pc, #12]	@ (80031cc <HAL_GPIO_EXTI_Callback+0x2c>)
 80031c0:	f7fe f900 	bl	80013c4 <BMI088_ReadGyroscopeDMA>
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	200003f8 	.word	0x200003f8

080031d0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003208 <HAL_SPI_TxRxCpltCallback+0x38>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10d      	bne.n	80031fe <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 80031e2:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <HAL_SPI_TxRxCpltCallback+0x3c>)
 80031e4:	7c1b      	ldrb	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 80031ea:	4808      	ldr	r0, [pc, #32]	@ (800320c <HAL_SPI_TxRxCpltCallback+0x3c>)
 80031ec:	f7fe f886 	bl	80012fc <BMI088_ReadAccelerometerDMA_Complete>
		}

		if (imu.readingGyr)
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_SPI_TxRxCpltCallback+0x3c>)
 80031f2:	7c5b      	ldrb	r3, [r3, #17]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 80031f8:	4804      	ldr	r0, [pc, #16]	@ (800320c <HAL_SPI_TxRxCpltCallback+0x3c>)
 80031fa:	f7fe f90f 	bl	800141c <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40013000 	.word	0x40013000
 800320c:	200003f8 	.word	0x200003f8

08003210 <Init_AccGyro_Reg>:

void Init_AccGyro_Reg(BMI088 *imu)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	BMI088_WriteAccRegister(imu, BMI_ACC_CONF, VAL_BMI_ACC_CONF);
 8003218:	2247      	movs	r2, #71	@ 0x47
 800321a:	2140      	movs	r1, #64	@ 0x40
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7fd ffcd 	bl	80011bc <BMI088_WriteAccRegister>
	BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, VAL_BMI_ACC_RANGE);
 8003222:	2201      	movs	r2, #1
 8003224:	2141      	movs	r1, #65	@ 0x41
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd ffc8 	bl	80011bc <BMI088_WriteAccRegister>
	BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, VAL_BMI_ACC_PWC_CONF);
 800322c:	2200      	movs	r2, #0
 800322e:	217c      	movs	r1, #124	@ 0x7c
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd ffc3 	bl	80011bc <BMI088_WriteAccRegister>
	BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, VAL_BMI_ACC_PWC_CTRL);
 8003236:	2204      	movs	r2, #4
 8003238:	210f      	movs	r1, #15
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fff8 	bl	8001230 <BMI088_WriteGyrRegister>
	BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, VAL_BMI_GYR_RANGE);
 8003240:	2202      	movs	r2, #2
 8003242:	210f      	movs	r1, #15
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7fd fff3 	bl	8001230 <BMI088_WriteGyrRegister>
	BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, VAL_BMI_GYR_BANDWIDTH);
 800324a:	2207      	movs	r2, #7
 800324c:	2110      	movs	r1, #16
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd ffee 	bl	8001230 <BMI088_WriteGyrRegister>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800325c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003260:	b0b0      	sub	sp, #192	@ 0xc0
 8003262:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003264:	f000 fc80 	bl	8003b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003268:	f000 f8c4 	bl	80033f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800326c:	f000 f98a 	bl	8003584 <MX_GPIO_Init>
  MX_DMA_Init();
 8003270:	f000 f960 	bl	8003534 <MX_DMA_Init>
  MX_SPI1_Init();
 8003274:	f000 f928 	bl	80034c8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8003278:	f007 fd22 	bl	800acc0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  	  // Sample rate
  	  float SAMPLE_PERIOD = 1 / (1000 * SAMPLE_TIME_MS_USB);
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	  // BMI088
	  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8003284:	2310      	movs	r3, #16
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	4b54      	ldr	r3, [pc, #336]	@ (80033dc <main+0x180>)
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2310      	movs	r3, #16
 800328e:	4a54      	ldr	r2, [pc, #336]	@ (80033e0 <main+0x184>)
 8003290:	4954      	ldr	r1, [pc, #336]	@ (80033e4 <main+0x188>)
 8003292:	4855      	ldr	r0, [pc, #340]	@ (80033e8 <main+0x18c>)
 8003294:	f7fd fe00 	bl	8000e98 <BMI088_Init>

	  // Fusion algorithms & object definition
	  FusionAhrs ahrs;
	  FusionAhrsInitialise(&ahrs);
 8003298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fe27 	bl	8001ef0 <FusionAhrsInitialise>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Timers:
  uint32_t timerUSB = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  // Registers setup
  Init_AccGyro_Reg(&imu);
 80032a8:	484f      	ldr	r0, [pc, #316]	@ (80033e8 <main+0x18c>)
 80032aa:	f7ff ffb1 	bl	8003210 <Init_AccGyro_Reg>
  while (1)
  {


  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 80032ae:	f000 fcc1 	bl	8003c34 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d9f7      	bls.n	80032ae <main+0x52>

		  // Passing measured data to structs gyroscope and accelerometer. This is done to compute the angles
	      FusionVector gyroscope = {imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]};
 80032be:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <main+0x18c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	61bb      	str	r3, [r7, #24]
 80032c4:	4b48      	ldr	r3, [pc, #288]	@ (80033e8 <main+0x18c>)
 80032c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <main+0x18c>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ce:	623b      	str	r3, [r7, #32]
	      FusionVector accelerometer = {imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2]};
 80032d0:	4b45      	ldr	r3, [pc, #276]	@ (80033e8 <main+0x18c>)
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b44      	ldr	r3, [pc, #272]	@ (80033e8 <main+0x18c>)
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	4b42      	ldr	r3, [pc, #264]	@ (80033e8 <main+0x18c>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	617b      	str	r3, [r7, #20]


		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_TIME_MS_USB);
 80032e2:	ed97 5a03 	vldr	s10, [r7, #12]
 80032e6:	edd7 5a04 	vldr	s11, [r7, #16]
 80032ea:	ed97 6a05 	vldr	s12, [r7, #20]
 80032ee:	edd7 6a06 	vldr	s13, [r7, #24]
 80032f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80032f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80032fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032fe:	eeb0 3a00 	vmov.f32	s6, #0	@ 0x40000000  2.0
 8003302:	eef0 1a45 	vmov.f32	s3, s10
 8003306:	eeb0 2a65 	vmov.f32	s4, s11
 800330a:	eef0 2a46 	vmov.f32	s5, s12
 800330e:	eeb0 0a66 	vmov.f32	s0, s13
 8003312:	eef0 0a47 	vmov.f32	s1, s14
 8003316:	eeb0 1a67 	vmov.f32	s2, s15
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fd46 	bl	8002dac <FusionAhrsUpdateNoMagnetometer>
		  FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8003320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fd9b 	bl	8002e60 <FusionAhrsGetQuaternion>
 800332a:	eeb0 6a40 	vmov.f32	s12, s0
 800332e:	eef0 6a60 	vmov.f32	s13, s1
 8003332:	eeb0 7a41 	vmov.f32	s14, s2
 8003336:	eef0 7a61 	vmov.f32	s15, s3
 800333a:	ed87 6a26 	vstr	s12, [r7, #152]	@ 0x98
 800333e:	edc7 6a27 	vstr	s13, [r7, #156]	@ 0x9c
 8003342:	ed87 7a28 	vstr	s14, [r7, #160]	@ 0xa0
 8003346:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
 800334a:	ed97 6a26 	vldr	s12, [r7, #152]	@ 0x98
 800334e:	edd7 6a27 	vldr	s13, [r7, #156]	@ 0x9c
 8003352:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8003356:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800335a:	eeb0 0a46 	vmov.f32	s0, s12
 800335e:	eef0 0a66 	vmov.f32	s1, s13
 8003362:	eeb0 1a47 	vmov.f32	s2, s14
 8003366:	eef0 1a67 	vmov.f32	s3, s15
 800336a:	f7ff fe73 	bl	8003054 <FusionQuaternionToEuler>
 800336e:	eef0 6a40 	vmov.f32	s13, s0
 8003372:	eeb0 7a60 	vmov.f32	s14, s1
 8003376:	eef0 7a41 	vmov.f32	s15, s2
 800337a:	edc7 6a00 	vstr	s13, [r7]
 800337e:	ed87 7a01 	vstr	s14, [r7, #4]
 8003382:	edc7 7a02 	vstr	s15, [r7, #8]
		  /*sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", gyroscope.array[0], gyroscope.array[1], gyroscope.array[2],
				  accelerometer.array[0], accelerometer.array[1], accelerometer.array[2]);
		  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));*/


		  sprintf(logBuf, "roll=%.3f,\tpitch=%.3f,\tyaw=%.3f\r\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f8dd 	bl	8000548 <__aeabi_f2d>
 800338e:	4680      	mov	r8, r0
 8003390:	4689      	mov	r9, r1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8d7 	bl	8000548 <__aeabi_f2d>
 800339a:	4604      	mov	r4, r0
 800339c:	460d      	mov	r5, r1
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd f8d1 	bl	8000548 <__aeabi_f2d>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033ae:	e9cd 4500 	strd	r4, r5, [sp]
 80033b2:	4642      	mov	r2, r8
 80033b4:	464b      	mov	r3, r9
 80033b6:	490d      	ldr	r1, [pc, #52]	@ (80033ec <main+0x190>)
 80033b8:	480d      	ldr	r0, [pc, #52]	@ (80033f0 <main+0x194>)
 80033ba:	f008 feb5 	bl	800c128 <siprintf>
		  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 80033be:	480c      	ldr	r0, [pc, #48]	@ (80033f0 <main+0x194>)
 80033c0:	f7fc ff56 	bl	8000270 <strlen>
 80033c4:	4603      	mov	r3, r0
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4619      	mov	r1, r3
 80033ca:	4809      	ldr	r0, [pc, #36]	@ (80033f0 <main+0x194>)
 80033cc:	f007 fd36 	bl	800ae3c <CDC_Transmit_FS>
//------------------------------------------------------------------------------------------------------------------

		  // Since timers for sampling are not used, here the real frequency rate is calculated empirically
		  //real_Ts_USB = HAL_GetTick() - timerUSB;	//mseconds
		  //real_Fs_USB = 1000 / real_Ts_USB;
		  timerUSB = HAL_GetTick();
 80033d0:	f000 fc30 	bl	8003c34 <HAL_GetTick>
 80033d4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 80033d8:	e769      	b.n	80032ae <main+0x52>
 80033da:	bf00      	nop
 80033dc:	40020800 	.word	0x40020800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	200002e0 	.word	0x200002e0
 80033e8:	200003f8 	.word	0x200003f8
 80033ec:	0800fa80 	.word	0x0800fa80
 80033f0:	20000448 	.word	0x20000448

080033f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b094      	sub	sp, #80	@ 0x50
 80033f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033fa:	f107 0320 	add.w	r3, r7, #32
 80033fe:	2230      	movs	r2, #48	@ 0x30
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f008 fef3 	bl	800c1ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	4b28      	ldr	r3, [pc, #160]	@ (80034c0 <SystemClock_Config+0xcc>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	4a27      	ldr	r2, [pc, #156]	@ (80034c0 <SystemClock_Config+0xcc>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003426:	6413      	str	r3, [r2, #64]	@ 0x40
 8003428:	4b25      	ldr	r3, [pc, #148]	@ (80034c0 <SystemClock_Config+0xcc>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003434:	2300      	movs	r3, #0
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	4b22      	ldr	r3, [pc, #136]	@ (80034c4 <SystemClock_Config+0xd0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a21      	ldr	r2, [pc, #132]	@ (80034c4 <SystemClock_Config+0xd0>)
 800343e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b1f      	ldr	r3, [pc, #124]	@ (80034c4 <SystemClock_Config+0xd0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003450:	2301      	movs	r3, #1
 8003452:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800345a:	2302      	movs	r3, #2
 800345c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800345e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003464:	2308      	movs	r3, #8
 8003466:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003468:	23a8      	movs	r3, #168	@ 0xa8
 800346a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800346c:	2302      	movs	r3, #2
 800346e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003470:	2307      	movs	r3, #7
 8003472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003474:	f107 0320 	add.w	r3, r7, #32
 8003478:	4618      	mov	r0, r3
 800347a:	f002 fccf 	bl	8005e1c <HAL_RCC_OscConfig>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003484:	f000 f924 	bl	80036d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003488:	230f      	movs	r3, #15
 800348a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800348c:	2302      	movs	r3, #2
 800348e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003494:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003498:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800349a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800349e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	2105      	movs	r1, #5
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 ff30 	bl	800630c <HAL_RCC_ClockConfig>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034b2:	f000 f90d 	bl	80036d0 <Error_Handler>
  }
}
 80034b6:	bf00      	nop
 80034b8:	3750      	adds	r7, #80	@ 0x50
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000

080034c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80034cc:	4b17      	ldr	r3, [pc, #92]	@ (800352c <MX_SPI1_Init+0x64>)
 80034ce:	4a18      	ldr	r2, [pc, #96]	@ (8003530 <MX_SPI1_Init+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034d2:	4b16      	ldr	r3, [pc, #88]	@ (800352c <MX_SPI1_Init+0x64>)
 80034d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034da:	4b14      	ldr	r3, [pc, #80]	@ (800352c <MX_SPI1_Init+0x64>)
 80034dc:	2200      	movs	r2, #0
 80034de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034e0:	4b12      	ldr	r3, [pc, #72]	@ (800352c <MX_SPI1_Init+0x64>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034e6:	4b11      	ldr	r3, [pc, #68]	@ (800352c <MX_SPI1_Init+0x64>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034ec:	4b0f      	ldr	r3, [pc, #60]	@ (800352c <MX_SPI1_Init+0x64>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034f2:	4b0e      	ldr	r3, [pc, #56]	@ (800352c <MX_SPI1_Init+0x64>)
 80034f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80034fa:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <MX_SPI1_Init+0x64>)
 80034fc:	2210      	movs	r2, #16
 80034fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003500:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <MX_SPI1_Init+0x64>)
 8003502:	2200      	movs	r2, #0
 8003504:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003506:	4b09      	ldr	r3, [pc, #36]	@ (800352c <MX_SPI1_Init+0x64>)
 8003508:	2200      	movs	r2, #0
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350c:	4b07      	ldr	r3, [pc, #28]	@ (800352c <MX_SPI1_Init+0x64>)
 800350e:	2200      	movs	r2, #0
 8003510:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <MX_SPI1_Init+0x64>)
 8003514:	220a      	movs	r2, #10
 8003516:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003518:	4804      	ldr	r0, [pc, #16]	@ (800352c <MX_SPI1_Init+0x64>)
 800351a:	f003 f8ed 	bl	80066f8 <HAL_SPI_Init>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003524:	f000 f8d4 	bl	80036d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003528:	bf00      	nop
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200002e0 	.word	0x200002e0
 8003530:	40013000 	.word	0x40013000

08003534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <MX_DMA_Init+0x4c>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	4a0f      	ldr	r2, [pc, #60]	@ (8003580 <MX_DMA_Init+0x4c>)
 8003544:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003548:	6313      	str	r3, [r2, #48]	@ 0x30
 800354a:	4b0d      	ldr	r3, [pc, #52]	@ (8003580 <MX_DMA_Init+0x4c>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003556:	2200      	movs	r2, #0
 8003558:	2100      	movs	r1, #0
 800355a:	2038      	movs	r0, #56	@ 0x38
 800355c:	f000 fc75 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003560:	2038      	movs	r0, #56	@ 0x38
 8003562:	f000 fc8e 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	203b      	movs	r0, #59	@ 0x3b
 800356c:	f000 fc6d 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003570:	203b      	movs	r0, #59	@ 0x3b
 8003572:	f000 fc86 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800

08003584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	4b48      	ldr	r3, [pc, #288]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	4a47      	ldr	r2, [pc, #284]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035aa:	4b45      	ldr	r3, [pc, #276]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	4a40      	ldr	r2, [pc, #256]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c6:	4b3e      	ldr	r3, [pc, #248]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	4b3a      	ldr	r3, [pc, #232]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	4a39      	ldr	r2, [pc, #228]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e2:	4b37      	ldr	r3, [pc, #220]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	4b33      	ldr	r3, [pc, #204]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	4a32      	ldr	r2, [pc, #200]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035fe:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <MX_GPIO_Init+0x13c>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 800360a:	2200      	movs	r2, #0
 800360c:	2110      	movs	r1, #16
 800360e:	482d      	ldr	r0, [pc, #180]	@ (80036c4 <MX_GPIO_Init+0x140>)
 8003610:	f001 f980 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8003614:	2200      	movs	r2, #0
 8003616:	2110      	movs	r1, #16
 8003618:	482b      	ldr	r0, [pc, #172]	@ (80036c8 <MX_GPIO_Init+0x144>)
 800361a:	f001 f97b 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800361e:	2200      	movs	r2, #0
 8003620:	2110      	movs	r1, #16
 8003622:	482a      	ldr	r0, [pc, #168]	@ (80036cc <MX_GPIO_Init+0x148>)
 8003624:	f001 f976 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8003628:	230c      	movs	r3, #12
 800362a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800362c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4619      	mov	r1, r3
 800363c:	4822      	ldr	r0, [pc, #136]	@ (80036c8 <MX_GPIO_Init+0x144>)
 800363e:	f000 ffcd 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8003642:	2310      	movs	r3, #16
 8003644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003646:	2301      	movs	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	4619      	mov	r1, r3
 8003658:	481a      	ldr	r0, [pc, #104]	@ (80036c4 <MX_GPIO_Init+0x140>)
 800365a:	f000 ffbf 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 800365e:	2310      	movs	r3, #16
 8003660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003662:	2301      	movs	r3, #1
 8003664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	4814      	ldr	r0, [pc, #80]	@ (80036c8 <MX_GPIO_Init+0x144>)
 8003676:	f000 ffb1 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800367a:	2310      	movs	r3, #16
 800367c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	2301      	movs	r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368a:	f107 0314 	add.w	r3, r7, #20
 800368e:	4619      	mov	r1, r3
 8003690:	480e      	ldr	r0, [pc, #56]	@ (80036cc <MX_GPIO_Init+0x148>)
 8003692:	f000 ffa3 	bl	80045dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	2008      	movs	r0, #8
 800369c:	f000 fbd5 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80036a0:	2008      	movs	r0, #8
 80036a2:	f000 fbee 	bl	8003e82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2100      	movs	r1, #0
 80036aa:	2009      	movs	r0, #9
 80036ac:	f000 fbcd 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80036b0:	2009      	movs	r0, #9
 80036b2:	f000 fbe6 	bl	8003e82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036b6:	bf00      	nop
 80036b8:	3728      	adds	r7, #40	@ 0x28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020800 	.word	0x40020800
 80036cc:	40020400 	.word	0x40020400

080036d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036d4:	b672      	cpsid	i
}
 80036d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <Error_Handler+0x8>

080036dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <HAL_MspInit+0x4c>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003728 <HAL_MspInit+0x4c>)
 80036ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <HAL_MspInit+0x4c>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <HAL_MspInit+0x4c>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	4a08      	ldr	r2, [pc, #32]	@ (8003728 <HAL_MspInit+0x4c>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370c:	6413      	str	r3, [r2, #64]	@ 0x40
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_MspInit+0x4c>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800

0800372c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	@ 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a4c      	ldr	r2, [pc, #304]	@ (800387c <HAL_SPI_MspInit+0x150>)
 800374a:	4293      	cmp	r3, r2
 800374c:	f040 8092 	bne.w	8003874 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <HAL_SPI_MspInit+0x154>)
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	4a49      	ldr	r2, [pc, #292]	@ (8003880 <HAL_SPI_MspInit+0x154>)
 800375a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800375e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003760:	4b47      	ldr	r3, [pc, #284]	@ (8003880 <HAL_SPI_MspInit+0x154>)
 8003762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	4b43      	ldr	r3, [pc, #268]	@ (8003880 <HAL_SPI_MspInit+0x154>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003774:	4a42      	ldr	r2, [pc, #264]	@ (8003880 <HAL_SPI_MspInit+0x154>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6313      	str	r3, [r2, #48]	@ 0x30
 800377c:	4b40      	ldr	r3, [pc, #256]	@ (8003880 <HAL_SPI_MspInit+0x154>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003788:	23e0      	movs	r3, #224	@ 0xe0
 800378a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378c:	2302      	movs	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003794:	2303      	movs	r3, #3
 8003796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003798:	2305      	movs	r3, #5
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4619      	mov	r1, r3
 80037a2:	4838      	ldr	r0, [pc, #224]	@ (8003884 <HAL_SPI_MspInit+0x158>)
 80037a4:	f000 ff1a 	bl	80045dc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80037a8:	4b37      	ldr	r3, [pc, #220]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037aa:	4a38      	ldr	r2, [pc, #224]	@ (800388c <HAL_SPI_MspInit+0x160>)
 80037ac:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80037ae:	4b36      	ldr	r3, [pc, #216]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037b0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80037b4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b6:	4b34      	ldr	r3, [pc, #208]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037bc:	4b32      	ldr	r3, [pc, #200]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037c2:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037c8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80037d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80037dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037e2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e4:	4b28      	ldr	r3, [pc, #160]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80037ea:	4827      	ldr	r0, [pc, #156]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037ec:	f000 fb64 	bl	8003eb8 <HAL_DMA_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80037f6:	f7ff ff6b 	bl	80036d0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a22      	ldr	r2, [pc, #136]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 80037fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003800:	4a21      	ldr	r2, [pc, #132]	@ (8003888 <HAL_SPI_MspInit+0x15c>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003806:	4b22      	ldr	r3, [pc, #136]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 8003808:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <HAL_SPI_MspInit+0x168>)
 800380a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800380c:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 800380e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003812:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003814:	4b1e      	ldr	r3, [pc, #120]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 8003816:	2240      	movs	r2, #64	@ 0x40
 8003818:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800381a:	4b1d      	ldr	r3, [pc, #116]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003820:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 8003822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003826:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003828:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 800382a:	2200      	movs	r2, #0
 800382c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800382e:	4b18      	ldr	r3, [pc, #96]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003834:	4b16      	ldr	r3, [pc, #88]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800383a:	4b15      	ldr	r3, [pc, #84]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 800383c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003840:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003842:	4b13      	ldr	r3, [pc, #76]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 8003844:	2200      	movs	r2, #0
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003848:	4811      	ldr	r0, [pc, #68]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 800384a:	f000 fb35 	bl	8003eb8 <HAL_DMA_Init>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003854:	f7ff ff3c 	bl	80036d0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a0d      	ldr	r2, [pc, #52]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 800385c:	649a      	str	r2, [r3, #72]	@ 0x48
 800385e:	4a0c      	ldr	r2, [pc, #48]	@ (8003890 <HAL_SPI_MspInit+0x164>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003864:	2200      	movs	r2, #0
 8003866:	2100      	movs	r1, #0
 8003868:	2023      	movs	r0, #35	@ 0x23
 800386a:	f000 faee 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800386e:	2023      	movs	r0, #35	@ 0x23
 8003870:	f000 fb07 	bl	8003e82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003874:	bf00      	nop
 8003876:	3728      	adds	r7, #40	@ 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40013000 	.word	0x40013000
 8003880:	40023800 	.word	0x40023800
 8003884:	40020000 	.word	0x40020000
 8003888:	20000338 	.word	0x20000338
 800388c:	40026410 	.word	0x40026410
 8003890:	20000398 	.word	0x20000398
 8003894:	40026458 	.word	0x40026458

08003898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <NMI_Handler+0x4>

080038a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <HardFault_Handler+0x4>

080038a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <MemManage_Handler+0x4>

080038b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <BusFault_Handler+0x4>

080038b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <UsageFault_Handler+0x4>

080038c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ee:	f000 f98d 	bl	8003c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80038fa:	2004      	movs	r0, #4
 80038fc:	f001 f824 	bl	8004948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}

08003904 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8003908:	2008      	movs	r0, #8
 800390a:	f001 f81d 	bl	8004948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003918:	4802      	ldr	r0, [pc, #8]	@ (8003924 <SPI1_IRQHandler+0x10>)
 800391a:	f003 fb5f 	bl	8006fdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200002e0 	.word	0x200002e0

08003928 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800392c:	4802      	ldr	r0, [pc, #8]	@ (8003938 <DMA2_Stream0_IRQHandler+0x10>)
 800392e:	f000 fbeb 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000338 	.word	0x20000338

0800393c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003940:	4802      	ldr	r0, [pc, #8]	@ (800394c <DMA2_Stream3_IRQHandler+0x10>)
 8003942:	f000 fbe1 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000398 	.word	0x20000398

08003950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003954:	4802      	ldr	r0, [pc, #8]	@ (8003960 <OTG_FS_IRQHandler+0x10>)
 8003956:	f001 f953 	bl	8004c00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200019f8 	.word	0x200019f8

08003964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return 1;
 8003968:	2301      	movs	r3, #1
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_kill>:

int _kill(int pid, int sig)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800397e:	f008 fc89 	bl	800c294 <__errno>
 8003982:	4603      	mov	r3, r0
 8003984:	2216      	movs	r2, #22
 8003986:	601a      	str	r2, [r3, #0]
  return -1;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_exit>:

void _exit (int status)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800399c:	f04f 31ff 	mov.w	r1, #4294967295
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ffe7 	bl	8003974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039a6:	bf00      	nop
 80039a8:	e7fd      	b.n	80039a6 <_exit+0x12>

080039aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e00a      	b.n	80039d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039bc:	f3af 8000 	nop.w
 80039c0:	4601      	mov	r1, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	60ba      	str	r2, [r7, #8]
 80039c8:	b2ca      	uxtb	r2, r1
 80039ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3301      	adds	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	dbf0      	blt.n	80039bc <_read+0x12>
  }

  return len;
 80039da:	687b      	ldr	r3, [r7, #4]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e009      	b.n	8003a0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	60ba      	str	r2, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	3301      	adds	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	dbf1      	blt.n	80039f6 <_write+0x12>
  }
  return len;
 8003a12:	687b      	ldr	r3, [r7, #4]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_close>:

int _close(int file)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a44:	605a      	str	r2, [r3, #4]
  return 0;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <_isatty>:

int _isatty(int file)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a5c:	2301      	movs	r3, #1
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ae0 <_sbrk+0x5c>)
 8003a8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ae4 <_sbrk+0x60>)
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a98:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	@ (8003ae8 <_sbrk+0x64>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <_sbrk+0x68>)
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d207      	bcs.n	8003ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ab4:	f008 fbee 	bl	800c294 <__errno>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	220c      	movs	r2, #12
 8003abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	e009      	b.n	8003ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aca:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4a05      	ldr	r2, [pc, #20]	@ (8003ae8 <_sbrk+0x64>)
 8003ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20020000 	.word	0x20020000
 8003ae4:	00000400 	.word	0x00000400
 8003ae8:	20000510 	.word	0x20000510
 8003aec:	20002248 	.word	0x20002248

08003af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003af4:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <SystemInit+0x20>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	4a05      	ldr	r2, [pc, #20]	@ (8003b10 <SystemInit+0x20>)
 8003afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b18:	f7ff ffea 	bl	8003af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b1c:	480c      	ldr	r0, [pc, #48]	@ (8003b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b1e:	490d      	ldr	r1, [pc, #52]	@ (8003b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b20:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b24:	e002      	b.n	8003b2c <LoopCopyDataInit>

08003b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b2a:	3304      	adds	r3, #4

08003b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b30:	d3f9      	bcc.n	8003b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b32:	4a0a      	ldr	r2, [pc, #40]	@ (8003b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b34:	4c0a      	ldr	r4, [pc, #40]	@ (8003b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b38:	e001      	b.n	8003b3e <LoopFillZerobss>

08003b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b3c:	3204      	adds	r2, #4

08003b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b40:	d3fb      	bcc.n	8003b3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003b42:	f008 fbad 	bl	800c2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b46:	f7ff fb89 	bl	800325c <main>
  bx  lr    
 8003b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b54:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8003b58:	080102a8 	.word	0x080102a8
  ldr r2, =_sbss
 8003b5c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8003b60:	20002248 	.word	0x20002248

08003b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b64:	e7fe      	b.n	8003b64 <ADC_IRQHandler>
	...

08003b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba8 <HAL_Init+0x40>)
 8003b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <HAL_Init+0x40>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba8 <HAL_Init+0x40>)
 8003b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b84:	4b08      	ldr	r3, [pc, #32]	@ (8003ba8 <HAL_Init+0x40>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a07      	ldr	r2, [pc, #28]	@ (8003ba8 <HAL_Init+0x40>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b90:	2003      	movs	r0, #3
 8003b92:	f000 f94f 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b96:	200f      	movs	r0, #15
 8003b98:	f000 f808 	bl	8003bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b9c:	f7ff fd9e 	bl	80036dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023c00 	.word	0x40023c00

08003bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bb4:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <HAL_InitTick+0x54>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <HAL_InitTick+0x58>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f967 	bl	8003e9e <HAL_SYSTICK_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e00e      	b.n	8003bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b0f      	cmp	r3, #15
 8003bde:	d80a      	bhi.n	8003bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003be0:	2200      	movs	r2, #0
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	f000 f92f 	bl	8003e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bec:	4a06      	ldr	r2, [pc, #24]	@ (8003c08 <HAL_InitTick+0x5c>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000008 	.word	0x20000008
 8003c08:	20000004 	.word	0x20000004

08003c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c10:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <HAL_IncTick+0x20>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_IncTick+0x24>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <HAL_IncTick+0x24>)
 8003c1e:	6013      	str	r3, [r2, #0]
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000008 	.word	0x20000008
 8003c30:	20000514 	.word	0x20000514

08003c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return uwTick;
 8003c38:	4b03      	ldr	r3, [pc, #12]	@ (8003c48 <HAL_GetTick+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000514 	.word	0x20000514

08003c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7ff ffee 	bl	8003c34 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d005      	beq.n	8003c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c66:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <HAL_Delay+0x44>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c72:	bf00      	nop
 8003c74:	f7ff ffde 	bl	8003c34 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d8f7      	bhi.n	8003c74 <HAL_Delay+0x28>
  {
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000008 	.word	0x20000008

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4907      	ldr	r1, [pc, #28]	@ (8003d30 <__NVIC_EnableIRQ+0x38>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	@ (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	@ (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	@ 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
         );
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	@ 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e00:	d301      	bcc.n	8003e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e02:	2301      	movs	r3, #1
 8003e04:	e00f      	b.n	8003e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e06:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <SysTick_Config+0x40>)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0e:	210f      	movs	r1, #15
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	f7ff ff8e 	bl	8003d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <SysTick_Config+0x40>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1e:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <SysTick_Config+0x40>)
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000e010 	.word	0xe000e010

08003e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff29 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff3e 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff8e 	bl	8003d88 <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff5d 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff31 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffa2 	bl	8003df0 <SysTick_Config>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7ff feb6 	bl	8003c34 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e099      	b.n	8004008 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef4:	e00f      	b.n	8003f16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ef6:	f7ff fe9d 	bl	8003c34 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d908      	bls.n	8003f16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e078      	b.n	8004008 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e8      	bne.n	8003ef6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4b38      	ldr	r3, [pc, #224]	@ (8004010 <HAL_DMA_Init+0x158>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d107      	bne.n	8003f80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d117      	bne.n	8003fda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa91 	bl	80044e4 <DMA_CheckFifoParam>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2240      	movs	r2, #64	@ 0x40
 8003fcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e016      	b.n	8004008 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa48 	bl	8004478 <DMA_CalcBaseAndBitshift>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff0:	223f      	movs	r2, #63	@ 0x3f
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	f010803f 	.word	0xf010803f

08004014 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_DMA_Start_IT+0x26>
 8004036:	2302      	movs	r3, #2
 8004038:	e040      	b.n	80040bc <HAL_DMA_Start_IT+0xa8>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d12f      	bne.n	80040ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f9da 	bl	800441c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	223f      	movs	r2, #63	@ 0x3f
 800406e:	409a      	lsls	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0216 	orr.w	r2, r2, #22
 8004082:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e005      	b.n	80040ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
 80040b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d004      	beq.n	80040e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2280      	movs	r2, #128	@ 0x80
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e00c      	b.n	80040fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2205      	movs	r2, #5
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004114:	4b8e      	ldr	r3, [pc, #568]	@ (8004350 <HAL_DMA_IRQHandler+0x248>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a8e      	ldr	r2, [pc, #568]	@ (8004354 <HAL_DMA_IRQHandler+0x24c>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0a9b      	lsrs	r3, r3, #10
 8004120:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004132:	2208      	movs	r2, #8
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01a      	beq.n	8004174 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	2208      	movs	r2, #8
 8004162:	409a      	lsls	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416c:	f043 0201 	orr.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d012      	beq.n	80041aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	2201      	movs	r2, #1
 8004198:	409a      	lsls	r2, r3
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	f043 0202 	orr.w	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ae:	2204      	movs	r2, #4
 80041b0:	409a      	lsls	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d012      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	2204      	movs	r2, #4
 80041ce:	409a      	lsls	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d8:	f043 0204 	orr.w	r2, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e4:	2210      	movs	r2, #16
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d043      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d03c      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	2210      	movs	r2, #16
 8004204:	409a      	lsls	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d024      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
 8004236:	e01f      	b.n	8004278 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
 8004248:	e016      	b.n	8004278 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0208 	bic.w	r2, r2, #8
 8004266:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	2220      	movs	r2, #32
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 808f 	beq.w	80043a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8087 	beq.w	80043a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429e:	2220      	movs	r2, #32
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d136      	bne.n	8004320 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0216 	bic.w	r2, r2, #22
 80042c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <HAL_DMA_IRQHandler+0x1da>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0208 	bic.w	r2, r2, #8
 80042f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	223f      	movs	r2, #63	@ 0x3f
 80042f8:	409a      	lsls	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004312:	2b00      	cmp	r3, #0
 8004314:	d07e      	beq.n	8004414 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
        }
        return;
 800431e:	e079      	b.n	8004414 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01d      	beq.n	800436a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10d      	bne.n	8004358 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	2b00      	cmp	r3, #0
 8004342:	d031      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
 800434c:	e02c      	b.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
 800434e:	bf00      	nop
 8004350:	20000000 	.word	0x20000000
 8004354:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d023      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
 8004368:	e01e      	b.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10f      	bne.n	8004398 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0210 	bic.w	r2, r2, #16
 8004386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d032      	beq.n	8004416 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2205      	movs	r2, #5
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3301      	adds	r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d307      	bcc.n	80043f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f2      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x2cc>
 80043ee:	e000      	b.n	80043f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
 8004412:	e000      	b.n	8004416 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004414:	bf00      	nop
    }
  }
}
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004438:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b40      	cmp	r3, #64	@ 0x40
 8004448:	d108      	bne.n	800445c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800445a:	e007      	b.n	800446c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	3b10      	subs	r3, #16
 8004488:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <DMA_CalcBaseAndBitshift+0x64>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004492:	4a13      	ldr	r2, [pc, #76]	@ (80044e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d909      	bls.n	80044ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80044b8:	e007      	b.n	80044ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	aaaaaaab 	.word	0xaaaaaaab
 80044e0:	0800fafc 	.word	0x0800fafc

080044e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11f      	bne.n	800453e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d856      	bhi.n	80045b2 <DMA_CheckFifoParam+0xce>
 8004504:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <DMA_CheckFifoParam+0x28>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	0800452f 	.word	0x0800452f
 8004514:	0800451d 	.word	0x0800451d
 8004518:	080045b3 	.word	0x080045b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d046      	beq.n	80045b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452c:	e043      	b.n	80045b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004536:	d140      	bne.n	80045ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453c:	e03d      	b.n	80045ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004546:	d121      	bne.n	800458c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d837      	bhi.n	80045be <DMA_CheckFifoParam+0xda>
 800454e:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <DMA_CheckFifoParam+0x70>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004565 	.word	0x08004565
 8004558:	0800456b 	.word	0x0800456b
 800455c:	08004565 	.word	0x08004565
 8004560:	0800457d 	.word	0x0800457d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e030      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d025      	beq.n	80045c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457a:	e022      	b.n	80045c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004584:	d11f      	bne.n	80045c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800458a:	e01c      	b.n	80045c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d903      	bls.n	800459a <DMA_CheckFifoParam+0xb6>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d003      	beq.n	80045a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004598:	e018      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
      break;
 800459e:	e015      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      break;
 80045b0:	e00b      	b.n	80045ca <DMA_CheckFifoParam+0xe6>
      break;
 80045b2:	bf00      	nop
 80045b4:	e00a      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045b6:	bf00      	nop
 80045b8:	e008      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045ba:	bf00      	nop
 80045bc:	e006      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e004      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;   
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045ca:	bf00      	nop
    }
  } 
  
  return status; 
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop

080045dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	@ 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	e16b      	b.n	80048d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045f8:	2201      	movs	r2, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	f040 815a 	bne.w	80048ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d005      	beq.n	800462e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800462a:	2b02      	cmp	r3, #2
 800462c:	d130      	bne.n	8004690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004664:	2201      	movs	r2, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 0201 	and.w	r2, r3, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b03      	cmp	r3, #3
 800469a:	d017      	beq.n	80046cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d123      	bne.n	8004720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	08da      	lsrs	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3208      	adds	r2, #8
 80046e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	220f      	movs	r2, #15
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	08da      	lsrs	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3208      	adds	r2, #8
 800471a:	69b9      	ldr	r1, [r7, #24]
 800471c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0203 	and.w	r2, r3, #3
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80b4 	beq.w	80048ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	4b60      	ldr	r3, [pc, #384]	@ (80048e8 <HAL_GPIO_Init+0x30c>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	4a5f      	ldr	r2, [pc, #380]	@ (80048e8 <HAL_GPIO_Init+0x30c>)
 800476c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004770:	6453      	str	r3, [r2, #68]	@ 0x44
 8004772:	4b5d      	ldr	r3, [pc, #372]	@ (80048e8 <HAL_GPIO_Init+0x30c>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800477e:	4a5b      	ldr	r2, [pc, #364]	@ (80048ec <HAL_GPIO_Init+0x310>)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	3302      	adds	r3, #2
 8004786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	220f      	movs	r2, #15
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a52      	ldr	r2, [pc, #328]	@ (80048f0 <HAL_GPIO_Init+0x314>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02b      	beq.n	8004802 <HAL_GPIO_Init+0x226>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a51      	ldr	r2, [pc, #324]	@ (80048f4 <HAL_GPIO_Init+0x318>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d025      	beq.n	80047fe <HAL_GPIO_Init+0x222>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a50      	ldr	r2, [pc, #320]	@ (80048f8 <HAL_GPIO_Init+0x31c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01f      	beq.n	80047fa <HAL_GPIO_Init+0x21e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a4f      	ldr	r2, [pc, #316]	@ (80048fc <HAL_GPIO_Init+0x320>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d019      	beq.n	80047f6 <HAL_GPIO_Init+0x21a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004900 <HAL_GPIO_Init+0x324>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_GPIO_Init+0x216>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4d      	ldr	r2, [pc, #308]	@ (8004904 <HAL_GPIO_Init+0x328>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00d      	beq.n	80047ee <HAL_GPIO_Init+0x212>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4c      	ldr	r2, [pc, #304]	@ (8004908 <HAL_GPIO_Init+0x32c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <HAL_GPIO_Init+0x20e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a4b      	ldr	r2, [pc, #300]	@ (800490c <HAL_GPIO_Init+0x330>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_GPIO_Init+0x20a>
 80047e2:	2307      	movs	r3, #7
 80047e4:	e00e      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047e6:	2308      	movs	r3, #8
 80047e8:	e00c      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047ea:	2306      	movs	r3, #6
 80047ec:	e00a      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047ee:	2305      	movs	r3, #5
 80047f0:	e008      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047f2:	2304      	movs	r3, #4
 80047f4:	e006      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047f6:	2303      	movs	r3, #3
 80047f8:	e004      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e002      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_GPIO_Init+0x228>
 8004802:	2300      	movs	r3, #0
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	f002 0203 	and.w	r2, r2, #3
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	4093      	lsls	r3, r2
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004814:	4935      	ldr	r1, [pc, #212]	@ (80048ec <HAL_GPIO_Init+0x310>)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	3302      	adds	r3, #2
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004822:	4b3b      	ldr	r3, [pc, #236]	@ (8004910 <HAL_GPIO_Init+0x334>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004846:	4a32      	ldr	r2, [pc, #200]	@ (8004910 <HAL_GPIO_Init+0x334>)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800484c:	4b30      	ldr	r3, [pc, #192]	@ (8004910 <HAL_GPIO_Init+0x334>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004870:	4a27      	ldr	r2, [pc, #156]	@ (8004910 <HAL_GPIO_Init+0x334>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004876:	4b26      	ldr	r3, [pc, #152]	@ (8004910 <HAL_GPIO_Init+0x334>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800489a:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <HAL_GPIO_Init+0x334>)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <HAL_GPIO_Init+0x334>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048c4:	4a12      	ldr	r2, [pc, #72]	@ (8004910 <HAL_GPIO_Init+0x334>)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	f67f ae90 	bls.w	80045f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	3724      	adds	r7, #36	@ 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40013800 	.word	0x40013800
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40020400 	.word	0x40020400
 80048f8:	40020800 	.word	0x40020800
 80048fc:	40020c00 	.word	0x40020c00
 8004900:	40021000 	.word	0x40021000
 8004904:	40021400 	.word	0x40021400
 8004908:	40021800 	.word	0x40021800
 800490c:	40021c00 	.word	0x40021c00
 8004910:	40013c00 	.word	0x40013c00

08004914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
 8004920:	4613      	mov	r3, r2
 8004922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004924:	787b      	ldrb	r3, [r7, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492a:	887a      	ldrh	r2, [r7, #2]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004930:	e003      	b.n	800493a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004932:	887b      	ldrh	r3, [r7, #2]
 8004934:	041a      	lsls	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	619a      	str	r2, [r3, #24]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004952:	4b08      	ldr	r3, [pc, #32]	@ (8004974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d006      	beq.n	800496c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800495e:	4a05      	ldr	r2, [pc, #20]	@ (8004974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fc1a 	bl	80031a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40013c00 	.word	0x40013c00

08004978 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e101      	b.n	8004b8e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f006 fb91 	bl	800b0cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2203      	movs	r2, #3
 80049ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b8:	d102      	bne.n	80049c0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f002 ff78 	bl	80078ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7c1a      	ldrb	r2, [r3, #16]
 80049d2:	f88d 2000 	strb.w	r2, [sp]
 80049d6:	3304      	adds	r3, #4
 80049d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049da:	f002 fe57 	bl	800768c <USB_CoreInit>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0ce      	b.n	8004b8e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f002 ff70 	bl	80078dc <USB_SetCurrentMode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e0bf      	b.n	8004b8e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	e04a      	b.n	8004aaa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	3315      	adds	r3, #21
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3314      	adds	r3, #20
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a3c:	7bfa      	ldrb	r2, [r7, #15]
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	b298      	uxth	r0, r3
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	332e      	adds	r3, #46	@ 0x2e
 8004a50:	4602      	mov	r2, r0
 8004a52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	3318      	adds	r3, #24
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a68:	7bfa      	ldrb	r2, [r7, #15]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	331c      	adds	r3, #28
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a7c:	7bfa      	ldrb	r2, [r7, #15]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	3320      	adds	r3, #32
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a90:	7bfa      	ldrb	r2, [r7, #15]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	3324      	adds	r3, #36	@ 0x24
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	791b      	ldrb	r3, [r3, #4]
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d3af      	bcc.n	8004a14 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e044      	b.n	8004b44 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aba:	7bfa      	ldrb	r2, [r7, #15]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ad0:	7bfa      	ldrb	r2, [r7, #15]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ae2:	7bfa      	ldrb	r2, [r7, #15]
 8004ae4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ae6:	7bfa      	ldrb	r2, [r7, #15]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004afc:	7bfa      	ldrb	r2, [r7, #15]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b12:	7bfa      	ldrb	r2, [r7, #15]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	3301      	adds	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	791b      	ldrb	r3, [r3, #4]
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3b5      	bcc.n	8004aba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7c1a      	ldrb	r2, [r3, #16]
 8004b56:	f88d 2000 	strb.w	r2, [sp]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b5e:	f002 ff09 	bl	8007974 <USB_DevInit>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e00c      	b.n	8004b8e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f003 ff53 	bl	8008a32 <USB_DevDisconnect>

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_PCD_Start+0x1c>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e022      	b.n	8004bf8 <HAL_PCD_Start+0x62>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d105      	bne.n	8004bda <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f002 fe5a 	bl	8007898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f003 ff01 	bl	80089f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b08d      	sub	sp, #52	@ 0x34
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f003 ffbf 	bl	8008b9a <USB_GetMode>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 848c 	bne.w	800553c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f003 ff23 	bl	8008a74 <USB_ReadInterrupts>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8482 	beq.w	800553a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f003 ff10 	bl	8008a74 <USB_ReadInterrupts>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d107      	bne.n	8004c6e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f002 0202 	and.w	r2, r2, #2
 8004c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f003 fefe 	bl	8008a74 <USB_ReadInterrupts>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d161      	bne.n	8004d46 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0210 	bic.w	r2, r2, #16
 8004c90:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f003 020f 	and.w	r2, r3, #15
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	3304      	adds	r3, #4
 8004cb0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	0c5b      	lsrs	r3, r3, #17
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d124      	bne.n	8004d08 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d035      	beq.n	8004d36 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	6a38      	ldr	r0, [r7, #32]
 8004cde:	f003 fd35 	bl	800874c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cee:	441a      	add	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d00:	441a      	add	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	615a      	str	r2, [r3, #20]
 8004d06:	e016      	b.n	8004d36 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	0c5b      	lsrs	r3, r3, #17
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d110      	bne.n	8004d36 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6a38      	ldr	r0, [r7, #32]
 8004d20:	f003 fd14 	bl	800874c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d30:	441a      	add	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0210 	orr.w	r2, r2, #16
 8004d44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f003 fe92 	bl	8008a74 <USB_ReadInterrupts>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d56:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d5a:	f040 80a7 	bne.w	8004eac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f003 fe97 	bl	8008a9a <USB_ReadDevAllOutEpInterrupt>
 8004d6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004d6e:	e099      	b.n	8004ea4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 808e 	beq.w	8004e98 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f003 febb 	bl	8008b02 <USB_ReadDevOutEPInterrupt>
 8004d8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00c      	beq.n	8004db2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da4:	461a      	mov	r2, r3
 8004da6:	2301      	movs	r3, #1
 8004da8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004daa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fea3 	bl	8005af8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00c      	beq.n	8004dd6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2308      	movs	r3, #8
 8004dcc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004dce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 ff79 	bl	8005cc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	2310      	movs	r3, #16
 8004df0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d030      	beq.n	8004e5e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e04:	2b80      	cmp	r3, #128	@ 0x80
 8004e06:	d109      	bne.n	8004e1c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e1a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1e:	4613      	mov	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3304      	adds	r3, #4
 8004e30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	78db      	ldrb	r3, [r3, #3]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d108      	bne.n	8004e4c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f006 fa46 	bl	800b2d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e74:	461a      	mov	r2, r3
 8004e76:	2320      	movs	r3, #32
 8004e78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e90:	461a      	mov	r2, r3
 8004e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e96:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	085b      	lsrs	r3, r3, #1
 8004ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f47f af62 	bne.w	8004d70 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f003 fddf 	bl	8008a74 <USB_ReadInterrupts>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ebc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ec0:	f040 80db 	bne.w	800507a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f003 fe00 	bl	8008ace <USB_ReadDevAllInEpInterrupt>
 8004ece:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004ed4:	e0cd      	b.n	8005072 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80c2 	beq.w	8005066 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	4611      	mov	r1, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f003 fe26 	bl	8008b3e <USB_ReadDevInEPInterrupt>
 8004ef2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d057      	beq.n	8004fae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	2201      	movs	r2, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	43db      	mvns	r3, r3
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f1e:	4013      	ands	r3, r2
 8004f20:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2301      	movs	r3, #1
 8004f32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	799b      	ldrb	r3, [r3, #6]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d132      	bne.n	8004fa2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	6819      	ldr	r1, [r3, #0]
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4403      	add	r3, r0
 8004f5c:	331c      	adds	r3, #28
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4419      	add	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f66:	4613      	mov	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4403      	add	r3, r0
 8004f70:	3320      	adds	r3, #32
 8004f72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d113      	bne.n	8004fa2 <HAL_PCD_IRQHandler+0x3a2>
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3324      	adds	r3, #36	@ 0x24
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d108      	bne.n	8004fa2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	f003 fe2d 	bl	8008bfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f006 f910 	bl	800b1ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2340      	movs	r3, #64	@ 0x40
 8005000:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d023      	beq.n	8005054 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800500c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800500e:	6a38      	ldr	r0, [r7, #32]
 8005010:	f002 fe14 	bl	8007c3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005016:	4613      	mov	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	3310      	adds	r3, #16
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4413      	add	r3, r2
 8005024:	3304      	adds	r3, #4
 8005026:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	78db      	ldrb	r3, [r3, #3]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2200      	movs	r2, #0
 8005034:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	b2db      	uxtb	r3, r3
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f006 f95d 	bl	800b2fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800504e:	461a      	mov	r2, r3
 8005050:	2302      	movs	r3, #2
 8005052:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800505e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fcbd 	bl	80059e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	3301      	adds	r3, #1
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f af2e 	bne.w	8004ed6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f003 fcf8 	bl	8008a74 <USB_ReadInterrupts>
 8005084:	4603      	mov	r3, r0
 8005086:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800508a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800508e:	d122      	bne.n	80050d6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d108      	bne.n	80050c0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050b6:	2100      	movs	r1, #0
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fea3 	bl	8005e04 <HAL_PCDEx_LPM_Callback>
 80050be:	e002      	b.n	80050c6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f006 f8fb 	bl	800b2bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80050d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f003 fcca 	bl	8008a74 <USB_ReadInterrupts>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ea:	d112      	bne.n	8005112 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d102      	bne.n	8005102 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f006 f8b7 	bl	800b270 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005110:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f003 fcac 	bl	8008a74 <USB_ReadInterrupts>
 800511c:	4603      	mov	r3, r0
 800511e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005126:	f040 80b7 	bne.w	8005298 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2110      	movs	r1, #16
 8005144:	4618      	mov	r0, r3
 8005146:	f002 fd79 	bl	8007c3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800514a:	2300      	movs	r3, #0
 800514c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800514e:	e046      	b.n	80051de <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515c:	461a      	mov	r2, r3
 800515e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005162:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800517e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005182:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005190:	461a      	mov	r2, r3
 8005192:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005196:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051da:	3301      	adds	r3, #1
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	791b      	ldrb	r3, [r3, #4]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d3b2      	bcc.n	8005150 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051f8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80051fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7bdb      	ldrb	r3, [r3, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800520c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005216:	f043 030b 	orr.w	r3, r3, #11
 800521a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800522c:	f043 030b 	orr.w	r3, r3, #11
 8005230:	6453      	str	r3, [r2, #68]	@ 0x44
 8005232:	e015      	b.n	8005260 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005242:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005246:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800524a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800525a:	f043 030b 	orr.w	r3, r3, #11
 800525e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800526e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005272:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005282:	461a      	mov	r2, r3
 8005284:	f003 fcba 	bl	8008bfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695a      	ldr	r2, [r3, #20]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005296:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f003 fbe9 	bl	8008a74 <USB_ReadInterrupts>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ac:	d123      	bne.n	80052f6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f003 fc7f 	bl	8008bb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f002 fd36 	bl	8007d2e <USB_GetDevSpeed>
 80052c2:	4603      	mov	r3, r0
 80052c4:	461a      	mov	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681c      	ldr	r4, [r3, #0]
 80052ce:	f001 fa07 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 80052d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052d8:	461a      	mov	r2, r3
 80052da:	4620      	mov	r0, r4
 80052dc:	f002 fa3a 	bl	8007754 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f005 ff9c 	bl	800b21e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80052f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f003 fbba 	bl	8008a74 <USB_ReadInterrupts>
 8005300:	4603      	mov	r3, r0
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b08      	cmp	r3, #8
 8005308:	d10a      	bne.n	8005320 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f005 ff79 	bl	800b202 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f002 0208 	and.w	r2, r2, #8
 800531e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f003 fba5 	bl	8008a74 <USB_ReadInterrupts>
 800532a:	4603      	mov	r3, r0
 800532c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005330:	2b80      	cmp	r3, #128	@ 0x80
 8005332:	d123      	bne.n	800537c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005340:	2301      	movs	r3, #1
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
 8005344:	e014      	b.n	8005370 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534a:	4613      	mov	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	b2db      	uxtb	r3, r3
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fb0a 	bl	800597e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	3301      	adds	r3, #1
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	791b      	ldrb	r3, [r3, #4]
 8005374:	461a      	mov	r2, r3
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	4293      	cmp	r3, r2
 800537a:	d3e4      	bcc.n	8005346 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f003 fb77 	bl	8008a74 <USB_ReadInterrupts>
 8005386:	4603      	mov	r3, r0
 8005388:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800538c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005390:	d13c      	bne.n	800540c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005392:	2301      	movs	r3, #1
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24
 8005396:	e02b      	b.n	80053f0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ac:	4613      	mov	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3318      	adds	r3, #24
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d115      	bne.n	80053ea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80053be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da12      	bge.n	80053ea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c8:	4613      	mov	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	3317      	adds	r3, #23
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 faca 	bl	800597e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	3301      	adds	r3, #1
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	791b      	ldrb	r3, [r3, #4]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d3cd      	bcc.n	8005398 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800540a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f003 fb2f 	bl	8008a74 <USB_ReadInterrupts>
 8005416:	4603      	mov	r3, r0
 8005418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800541c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005420:	d156      	bne.n	80054d0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005422:	2301      	movs	r3, #1
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
 8005426:	e045      	b.n	80054b4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543c:	4613      	mov	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d12e      	bne.n	80054ae <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005450:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005452:	2b00      	cmp	r3, #0
 8005454:	da2b      	bge.n	80054ae <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005462:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005466:	429a      	cmp	r2, r3
 8005468:	d121      	bne.n	80054ae <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054aa:	6053      	str	r3, [r2, #4]
            break;
 80054ac:	e008      	b.n	80054c0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	3301      	adds	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	791b      	ldrb	r3, [r3, #4]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	4293      	cmp	r3, r2
 80054be:	d3b3      	bcc.n	8005428 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80054ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f003 facd 	bl	8008a74 <USB_ReadInterrupts>
 80054da:	4603      	mov	r3, r0
 80054dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e4:	d10a      	bne.n	80054fc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f005 ff1a 	bl	800b320 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695a      	ldr	r2, [r3, #20]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80054fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f003 fab7 	bl	8008a74 <USB_ReadInterrupts>
 8005506:	4603      	mov	r3, r0
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b04      	cmp	r3, #4
 800550e:	d115      	bne.n	800553c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f005 ff0a 	bl	800b33c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6859      	ldr	r1, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
 8005538:	e000      	b.n	800553c <HAL_PCD_IRQHandler+0x93c>
      return;
 800553a:	bf00      	nop
    }
  }
}
 800553c:	3734      	adds	r7, #52	@ 0x34
 800553e:	46bd      	mov	sp, r7
 8005540:	bd90      	pop	{r4, r7, pc}

08005542 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	460b      	mov	r3, r1
 800554c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_PCD_SetAddress+0x1a>
 8005558:	2302      	movs	r3, #2
 800555a:	e012      	b.n	8005582 <HAL_PCD_SetAddress+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	4611      	mov	r1, r2
 8005572:	4618      	mov	r0, r3
 8005574:	f003 fa16 	bl	80089a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	4608      	mov	r0, r1
 8005594:	4611      	mov	r1, r2
 8005596:	461a      	mov	r2, r3
 8005598:	4603      	mov	r3, r0
 800559a:	70fb      	strb	r3, [r7, #3]
 800559c:	460b      	mov	r3, r1
 800559e:	803b      	strh	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	da0f      	bge.n	80055d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	f003 020f 	and.w	r2, r3, #15
 80055b6:	4613      	mov	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	3310      	adds	r3, #16
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	3304      	adds	r3, #4
 80055c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	705a      	strb	r2, [r3, #1]
 80055ce:	e00f      	b.n	80055f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	f003 020f 	and.w	r2, r3, #15
 80055d6:	4613      	mov	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	3304      	adds	r3, #4
 80055e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80055fc:	883b      	ldrh	r3, [r7, #0]
 80055fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	78ba      	ldrb	r2, [r7, #2]
 800560a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800561e:	78bb      	ldrb	r3, [r7, #2]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d102      	bne.n	800562a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_PCD_EP_Open+0xae>
 8005634:	2302      	movs	r3, #2
 8005636:	e00e      	b.n	8005656 <HAL_PCD_EP_Open+0xcc>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68f9      	ldr	r1, [r7, #12]
 8005646:	4618      	mov	r0, r3
 8005648:	f002 fb96 	bl	8007d78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005654:	7afb      	ldrb	r3, [r7, #11]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800566a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800566e:	2b00      	cmp	r3, #0
 8005670:	da0f      	bge.n	8005692 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	f003 020f 	and.w	r2, r3, #15
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	3310      	adds	r3, #16
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	3304      	adds	r3, #4
 8005688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	705a      	strb	r2, [r3, #1]
 8005690:	e00f      	b.n	80056b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	f003 020f 	and.w	r2, r3, #15
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4413      	add	r3, r2
 80056a8:	3304      	adds	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_PCD_EP_Close+0x6e>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e00e      	b.n	80056ea <HAL_PCD_EP_Close+0x8c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68f9      	ldr	r1, [r7, #12]
 80056da:	4618      	mov	r0, r3
 80056dc:	f002 fbd4 	bl	8007e88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b086      	sub	sp, #24
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	460b      	mov	r3, r1
 8005700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005702:	7afb      	ldrb	r3, [r7, #11]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	3304      	adds	r3, #4
 800571a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2200      	movs	r2, #0
 800572c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2200      	movs	r2, #0
 8005732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005734:	7afb      	ldrb	r3, [r7, #11]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	b2da      	uxtb	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	799b      	ldrb	r3, [r3, #6]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d102      	bne.n	800574e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	799b      	ldrb	r3, [r3, #6]
 8005756:	461a      	mov	r2, r3
 8005758:	6979      	ldr	r1, [r7, #20]
 800575a:	f002 fc71 	bl	8008040 <USB_EPStartXfer>

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800578a:	681b      	ldr	r3, [r3, #0]
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	607a      	str	r2, [r7, #4]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	460b      	mov	r3, r1
 80057a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a8:	7afb      	ldrb	r3, [r7, #11]
 80057aa:	f003 020f 	and.w	r2, r3, #15
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	3310      	adds	r3, #16
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	3304      	adds	r3, #4
 80057be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2201      	movs	r2, #1
 80057d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	799b      	ldrb	r3, [r3, #6]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d102      	bne.n	80057f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	799b      	ldrb	r3, [r3, #6]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	f002 fc1f 	bl	8008040 <USB_EPStartXfer>

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	7912      	ldrb	r2, [r2, #4]
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e04f      	b.n	80058ca <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800582a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800582e:	2b00      	cmp	r3, #0
 8005830:	da0f      	bge.n	8005852 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	f003 020f 	and.w	r2, r3, #15
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	3310      	adds	r3, #16
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	3304      	adds	r3, #4
 8005848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	705a      	strb	r2, [r3, #1]
 8005850:	e00d      	b.n	800586e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005852:	78fa      	ldrb	r2, [r7, #3]
 8005854:	4613      	mov	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	3304      	adds	r3, #4
 8005866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	b2da      	uxtb	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_PCD_EP_SetStall+0x82>
 800588a:	2302      	movs	r3, #2
 800588c:	e01d      	b.n	80058ca <HAL_PCD_EP_SetStall+0xbe>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	4618      	mov	r0, r3
 800589e:	f002 ffad 	bl	80087fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7999      	ldrb	r1, [r3, #6]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058ba:	461a      	mov	r2, r3
 80058bc:	f003 f99e 	bl	8008bfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	460b      	mov	r3, r1
 80058dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	7912      	ldrb	r2, [r2, #4]
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e042      	b.n	8005976 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da0f      	bge.n	8005918 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	4613      	mov	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	3310      	adds	r3, #16
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	4413      	add	r3, r2
 800590c:	3304      	adds	r3, #4
 800590e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	705a      	strb	r2, [r3, #1]
 8005916:	e00f      	b.n	8005938 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 020f 	and.w	r2, r3, #15
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_PCD_EP_ClrStall+0x86>
 8005954:	2302      	movs	r3, #2
 8005956:	e00e      	b.n	8005976 <HAL_PCD_EP_ClrStall+0xa4>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68f9      	ldr	r1, [r7, #12]
 8005966:	4618      	mov	r0, r3
 8005968:	f002 ffb6 	bl	80088d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800598a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800598e:	2b00      	cmp	r3, #0
 8005990:	da0c      	bge.n	80059ac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	3310      	adds	r3, #16
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	4413      	add	r3, r2
 80059a6:	3304      	adds	r3, #4
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e00c      	b.n	80059c6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	f003 020f 	and.w	r2, r3, #15
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	3304      	adds	r3, #4
 80059c4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68f9      	ldr	r1, [r7, #12]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f002 fdd5 	bl	800857c <USB_EPStopXfer>
 80059d2:	4603      	mov	r3, r0
 80059d4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059d6:	7afb      	ldrb	r3, [r7, #11]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	@ 0x28
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	3310      	adds	r3, #16
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	4413      	add	r3, r2
 8005a04:	3304      	adds	r3, #4
 8005a06:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d901      	bls.n	8005a18 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e06b      	b.n	8005af0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d902      	bls.n	8005a34 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	3303      	adds	r3, #3
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a3c:	e02a      	b.n	8005a94 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d902      	bls.n	8005a5a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3303      	adds	r3, #3
 8005a5e:	089b      	lsrs	r3, r3, #2
 8005a60:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	68d9      	ldr	r1, [r3, #12]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	4603      	mov	r3, r0
 8005a76:	6978      	ldr	r0, [r7, #20]
 8005a78:	f002 fe2a 	bl	80086d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	441a      	add	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	441a      	add	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d809      	bhi.n	8005abe <PCD_WriteEmptyTxFifo+0xde>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d203      	bcs.n	8005abe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1bf      	bne.n	8005a3e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d811      	bhi.n	8005aee <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	6939      	ldr	r1, [r7, #16]
 8005ae6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005aea:	4013      	ands	r3, r2
 8005aec:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	333c      	adds	r3, #60	@ 0x3c
 8005b10:	3304      	adds	r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	799b      	ldrb	r3, [r3, #6]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d17b      	bne.n	8005c26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4a61      	ldr	r2, [pc, #388]	@ (8005cc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	f240 80b9 	bls.w	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80b3 	beq.w	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b60:	6093      	str	r3, [r2, #8]
 8005b62:	e0a7      	b.n	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2320      	movs	r3, #32
 8005b7e:	6093      	str	r3, [r2, #8]
 8005b80:	e098      	b.n	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 8093 	bne.w	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4a4b      	ldr	r2, [pc, #300]	@ (8005cc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d90f      	bls.n	8005bb6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	461a      	mov	r2, r3
 8005bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb2:	6093      	str	r3, [r2, #8]
 8005bb4:	e07e      	b.n	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3304      	adds	r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a1a      	ldr	r2, [r3, #32]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	0159      	lsls	r1, r3, #5
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d114      	bne.n	8005c18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c00:	461a      	mov	r2, r3
 8005c02:	2101      	movs	r1, #1
 8005c04:	f002 fffa 	bl	8008bfc <USB_EP0_OutStart>
 8005c08:	e006      	b.n	8005c18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f005 faba 	bl	800b198 <HAL_PCD_DataOutStageCallback>
 8005c24:	e046      	b.n	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4a26      	ldr	r2, [pc, #152]	@ (8005cc4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d124      	bne.n	8005c78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c44:	461a      	mov	r2, r3
 8005c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c4a:	6093      	str	r3, [r2, #8]
 8005c4c:	e032      	b.n	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c64:	461a      	mov	r2, r3
 8005c66:	2320      	movs	r3, #32
 8005c68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f005 fa91 	bl	800b198 <HAL_PCD_DataOutStageCallback>
 8005c76:	e01d      	b.n	8005cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d114      	bne.n	8005ca8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	f002 ffaa 	bl	8008bfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f005 fa72 	bl	800b198 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	4f54300a 	.word	0x4f54300a
 8005cc4:	4f54310a 	.word	0x4f54310a

08005cc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	333c      	adds	r3, #60	@ 0x3c
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d90e      	bls.n	8005d1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d009      	beq.n	8005d1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d14:	461a      	mov	r2, r3
 8005d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f005 fa29 	bl	800b174 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	@ (8005d50 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d90c      	bls.n	8005d44 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	799b      	ldrb	r3, [r3, #6]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d108      	bne.n	8005d44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2101      	movs	r1, #1
 8005d40:	f002 ff5c 	bl	8008bfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	4f54300a 	.word	0x4f54300a

08005d54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
 8005d60:	4613      	mov	r3, r2
 8005d62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d107      	bne.n	8005d82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d72:	883b      	ldrh	r3, [r7, #0]
 8005d74:	0419      	lsls	r1, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d80:	e028      	b.n	8005dd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	0c1b      	lsrs	r3, r3, #16
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	e00d      	b.n	8005db2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	3340      	adds	r3, #64	@ 0x40
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	0c1b      	lsrs	r3, r3, #16
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	3301      	adds	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
 8005db2:	7bfa      	ldrb	r2, [r7, #15]
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d3ec      	bcc.n	8005d96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005dbc:	883b      	ldrh	r3, [r7, #0]
 8005dbe:	0418      	lsls	r0, r3, #16
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	4302      	orrs	r2, r0
 8005dcc:	3340      	adds	r3, #64	@ 0x40
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	460b      	mov	r3, r1
 8005dec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	887a      	ldrh	r2, [r7, #2]
 8005df4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e267      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d075      	beq.n	8005f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e3a:	4b88      	ldr	r3, [pc, #544]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d00c      	beq.n	8005e60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e46:	4b85      	ldr	r3, [pc, #532]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d112      	bne.n	8005e78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e52:	4b82      	ldr	r3, [pc, #520]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e5e:	d10b      	bne.n	8005e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e60:	4b7e      	ldr	r3, [pc, #504]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d05b      	beq.n	8005f24 <HAL_RCC_OscConfig+0x108>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d157      	bne.n	8005f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e242      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e80:	d106      	bne.n	8005e90 <HAL_RCC_OscConfig+0x74>
 8005e82:	4b76      	ldr	r3, [pc, #472]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a75      	ldr	r2, [pc, #468]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e01d      	b.n	8005ecc <HAL_RCC_OscConfig+0xb0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e98:	d10c      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x98>
 8005e9a:	4b70      	ldr	r3, [pc, #448]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a6f      	ldr	r2, [pc, #444]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6c      	ldr	r2, [pc, #432]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e00b      	b.n	8005ecc <HAL_RCC_OscConfig+0xb0>
 8005eb4:	4b69      	ldr	r3, [pc, #420]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a68      	ldr	r2, [pc, #416]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	4b66      	ldr	r3, [pc, #408]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a65      	ldr	r2, [pc, #404]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d013      	beq.n	8005efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fd feae 	bl	8003c34 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005edc:	f7fd feaa 	bl	8003c34 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b64      	cmp	r3, #100	@ 0x64
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e207      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	4b5b      	ldr	r3, [pc, #364]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0xc0>
 8005efa:	e014      	b.n	8005f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7fd fe9a 	bl	8003c34 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f04:	f7fd fe96 	bl	8003c34 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b64      	cmp	r3, #100	@ 0x64
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e1f3      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f16:	4b51      	ldr	r3, [pc, #324]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0xe8>
 8005f22:	e000      	b.n	8005f26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d063      	beq.n	8005ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f32:	4b4a      	ldr	r3, [pc, #296]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3e:	4b47      	ldr	r3, [pc, #284]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d11c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4a:	4b44      	ldr	r3, [pc, #272]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d116      	bne.n	8005f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f56:	4b41      	ldr	r3, [pc, #260]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_RCC_OscConfig+0x152>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d001      	beq.n	8005f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e1c7      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4937      	ldr	r1, [pc, #220]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f82:	e03a      	b.n	8005ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d020      	beq.n	8005fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f8c:	4b34      	ldr	r3, [pc, #208]	@ (8006060 <HAL_RCC_OscConfig+0x244>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f92:	f7fd fe4f 	bl	8003c34 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9a:	f7fd fe4b 	bl	8003c34 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e1a8      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fac:	4b2b      	ldr	r3, [pc, #172]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb8:	4b28      	ldr	r3, [pc, #160]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4925      	ldr	r1, [pc, #148]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]
 8005fcc:	e015      	b.n	8005ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fce:	4b24      	ldr	r3, [pc, #144]	@ (8006060 <HAL_RCC_OscConfig+0x244>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd4:	f7fd fe2e 	bl	8003c34 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fdc:	f7fd fe2a 	bl	8003c34 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e187      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fee:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f0      	bne.n	8005fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d036      	beq.n	8006074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d016      	beq.n	800603c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800600e:	4b15      	ldr	r3, [pc, #84]	@ (8006064 <HAL_RCC_OscConfig+0x248>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006014:	f7fd fe0e 	bl	8003c34 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800601c:	f7fd fe0a 	bl	8003c34 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e167      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602e:	4b0b      	ldr	r3, [pc, #44]	@ (800605c <HAL_RCC_OscConfig+0x240>)
 8006030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0x200>
 800603a:	e01b      	b.n	8006074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800603c:	4b09      	ldr	r3, [pc, #36]	@ (8006064 <HAL_RCC_OscConfig+0x248>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006042:	f7fd fdf7 	bl	8003c34 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006048:	e00e      	b.n	8006068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800604a:	f7fd fdf3 	bl	8003c34 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d907      	bls.n	8006068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e150      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
 800605c:	40023800 	.word	0x40023800
 8006060:	42470000 	.word	0x42470000
 8006064:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006068:	4b88      	ldr	r3, [pc, #544]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 800606a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1ea      	bne.n	800604a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8097 	beq.w	80061b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006086:	4b81      	ldr	r3, [pc, #516]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10f      	bne.n	80060b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	4b7d      	ldr	r3, [pc, #500]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	4a7c      	ldr	r2, [pc, #496]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80060a2:	4b7a      	ldr	r3, [pc, #488]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b2:	4b77      	ldr	r3, [pc, #476]	@ (8006290 <HAL_RCC_OscConfig+0x474>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d118      	bne.n	80060f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060be:	4b74      	ldr	r3, [pc, #464]	@ (8006290 <HAL_RCC_OscConfig+0x474>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a73      	ldr	r2, [pc, #460]	@ (8006290 <HAL_RCC_OscConfig+0x474>)
 80060c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ca:	f7fd fdb3 	bl	8003c34 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d2:	f7fd fdaf 	bl	8003c34 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e10c      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006290 <HAL_RCC_OscConfig+0x474>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0f0      	beq.n	80060d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d106      	bne.n	8006106 <HAL_RCC_OscConfig+0x2ea>
 80060f8:	4b64      	ldr	r3, [pc, #400]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fc:	4a63      	ldr	r2, [pc, #396]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	6713      	str	r3, [r2, #112]	@ 0x70
 8006104:	e01c      	b.n	8006140 <HAL_RCC_OscConfig+0x324>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b05      	cmp	r3, #5
 800610c:	d10c      	bne.n	8006128 <HAL_RCC_OscConfig+0x30c>
 800610e:	4b5f      	ldr	r3, [pc, #380]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006112:	4a5e      	ldr	r2, [pc, #376]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006114:	f043 0304 	orr.w	r3, r3, #4
 8006118:	6713      	str	r3, [r2, #112]	@ 0x70
 800611a:	4b5c      	ldr	r3, [pc, #368]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611e:	4a5b      	ldr	r2, [pc, #364]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	6713      	str	r3, [r2, #112]	@ 0x70
 8006126:	e00b      	b.n	8006140 <HAL_RCC_OscConfig+0x324>
 8006128:	4b58      	ldr	r3, [pc, #352]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 800612a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612c:	4a57      	ldr	r2, [pc, #348]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	6713      	str	r3, [r2, #112]	@ 0x70
 8006134:	4b55      	ldr	r3, [pc, #340]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006138:	4a54      	ldr	r2, [pc, #336]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 800613a:	f023 0304 	bic.w	r3, r3, #4
 800613e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006148:	f7fd fd74 	bl	8003c34 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614e:	e00a      	b.n	8006166 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006150:	f7fd fd70 	bl	8003c34 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e0cb      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006166:	4b49      	ldr	r3, [pc, #292]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0ee      	beq.n	8006150 <HAL_RCC_OscConfig+0x334>
 8006172:	e014      	b.n	800619e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006174:	f7fd fd5e 	bl	8003c34 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800617a:	e00a      	b.n	8006192 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617c:	f7fd fd5a 	bl	8003c34 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e0b5      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006192:	4b3e      	ldr	r3, [pc, #248]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1ee      	bne.n	800617c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d105      	bne.n	80061b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061a4:	4b39      	ldr	r3, [pc, #228]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	4a38      	ldr	r2, [pc, #224]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 80061aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80a1 	beq.w	80062fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ba:	4b34      	ldr	r3, [pc, #208]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d05c      	beq.n	8006280 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d141      	bne.n	8006252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ce:	4b31      	ldr	r3, [pc, #196]	@ (8006294 <HAL_RCC_OscConfig+0x478>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d4:	f7fd fd2e 	bl	8003c34 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061dc:	f7fd fd2a 	bl	8003c34 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e087      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ee:	4b27      	ldr	r3, [pc, #156]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	019b      	lsls	r3, r3, #6
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	3b01      	subs	r3, #1
 8006214:	041b      	lsls	r3, r3, #16
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	061b      	lsls	r3, r3, #24
 800621e:	491b      	ldr	r1, [pc, #108]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006220:	4313      	orrs	r3, r2
 8006222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006224:	4b1b      	ldr	r3, [pc, #108]	@ (8006294 <HAL_RCC_OscConfig+0x478>)
 8006226:	2201      	movs	r2, #1
 8006228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622a:	f7fd fd03 	bl	8003c34 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006232:	f7fd fcff 	bl	8003c34 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e05c      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006244:	4b11      	ldr	r3, [pc, #68]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0f0      	beq.n	8006232 <HAL_RCC_OscConfig+0x416>
 8006250:	e054      	b.n	80062fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006252:	4b10      	ldr	r3, [pc, #64]	@ (8006294 <HAL_RCC_OscConfig+0x478>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006258:	f7fd fcec 	bl	8003c34 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006260:	f7fd fce8 	bl	8003c34 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e045      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006272:	4b06      	ldr	r3, [pc, #24]	@ (800628c <HAL_RCC_OscConfig+0x470>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f0      	bne.n	8006260 <HAL_RCC_OscConfig+0x444>
 800627e:	e03d      	b.n	80062fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d107      	bne.n	8006298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e038      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
 800628c:	40023800 	.word	0x40023800
 8006290:	40007000 	.word	0x40007000
 8006294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006298:	4b1b      	ldr	r3, [pc, #108]	@ (8006308 <HAL_RCC_OscConfig+0x4ec>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d028      	beq.n	80062f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d121      	bne.n	80062f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062be:	429a      	cmp	r2, r3
 80062c0:	d11a      	bne.n	80062f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062c8:	4013      	ands	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d111      	bne.n	80062f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	3b01      	subs	r3, #1
 80062e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d107      	bne.n	80062f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40023800 	.word	0x40023800

0800630c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0cc      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006320:	4b68      	ldr	r3, [pc, #416]	@ (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d90c      	bls.n	8006348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632e:	4b65      	ldr	r3, [pc, #404]	@ (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006336:	4b63      	ldr	r3, [pc, #396]	@ (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d001      	beq.n	8006348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0b8      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d020      	beq.n	8006396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006360:	4b59      	ldr	r3, [pc, #356]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4a58      	ldr	r2, [pc, #352]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800636a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006378:	4b53      	ldr	r3, [pc, #332]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	4a52      	ldr	r2, [pc, #328]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006384:	4b50      	ldr	r3, [pc, #320]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	494d      	ldr	r1, [pc, #308]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d044      	beq.n	800642c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d107      	bne.n	80063ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063aa:	4b47      	ldr	r3, [pc, #284]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d119      	bne.n	80063ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e07f      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d003      	beq.n	80063ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d107      	bne.n	80063da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ca:	4b3f      	ldr	r3, [pc, #252]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e06f      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063da:	4b3b      	ldr	r3, [pc, #236]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e067      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ea:	4b37      	ldr	r3, [pc, #220]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f023 0203 	bic.w	r2, r3, #3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4934      	ldr	r1, [pc, #208]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063fc:	f7fd fc1a 	bl	8003c34 <HAL_GetTick>
 8006400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006402:	e00a      	b.n	800641a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006404:	f7fd fc16 	bl	8003c34 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006412:	4293      	cmp	r3, r2
 8006414:	d901      	bls.n	800641a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e04f      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641a:	4b2b      	ldr	r3, [pc, #172]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 020c 	and.w	r2, r3, #12
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	429a      	cmp	r2, r3
 800642a:	d1eb      	bne.n	8006404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800642c:	4b25      	ldr	r3, [pc, #148]	@ (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d20c      	bcs.n	8006454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b22      	ldr	r3, [pc, #136]	@ (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006442:	4b20      	ldr	r3, [pc, #128]	@ (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d001      	beq.n	8006454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e032      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006460:	4b19      	ldr	r3, [pc, #100]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4916      	ldr	r1, [pc, #88]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800647e:	4b12      	ldr	r3, [pc, #72]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	490e      	ldr	r1, [pc, #56]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	4313      	orrs	r3, r2
 8006490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006492:	f000 f821 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 8006496:	4602      	mov	r2, r0
 8006498:	4b0b      	ldr	r3, [pc, #44]	@ (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	490a      	ldr	r1, [pc, #40]	@ (80064cc <HAL_RCC_ClockConfig+0x1c0>)
 80064a4:	5ccb      	ldrb	r3, [r1, r3]
 80064a6:	fa22 f303 	lsr.w	r3, r2, r3
 80064aa:	4a09      	ldr	r2, [pc, #36]	@ (80064d0 <HAL_RCC_ClockConfig+0x1c4>)
 80064ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80064ae:	4b09      	ldr	r3, [pc, #36]	@ (80064d4 <HAL_RCC_ClockConfig+0x1c8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd fb7a 	bl	8003bac <HAL_InitTick>

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40023c00 	.word	0x40023c00
 80064c8:	40023800 	.word	0x40023800
 80064cc:	0800faec 	.word	0x0800faec
 80064d0:	20000000 	.word	0x20000000
 80064d4:	20000004 	.word	0x20000004

080064d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064dc:	b094      	sub	sp, #80	@ 0x50
 80064de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064f0:	4b79      	ldr	r3, [pc, #484]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 030c 	and.w	r3, r3, #12
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d00d      	beq.n	8006518 <HAL_RCC_GetSysClockFreq+0x40>
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	f200 80e1 	bhi.w	80066c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_RCC_GetSysClockFreq+0x34>
 8006506:	2b04      	cmp	r3, #4
 8006508:	d003      	beq.n	8006512 <HAL_RCC_GetSysClockFreq+0x3a>
 800650a:	e0db      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800650c:	4b73      	ldr	r3, [pc, #460]	@ (80066dc <HAL_RCC_GetSysClockFreq+0x204>)
 800650e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006510:	e0db      	b.n	80066ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006512:	4b72      	ldr	r3, [pc, #456]	@ (80066dc <HAL_RCC_GetSysClockFreq+0x204>)
 8006514:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006516:	e0d8      	b.n	80066ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006518:	4b6f      	ldr	r3, [pc, #444]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006520:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006522:	4b6d      	ldr	r3, [pc, #436]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d063      	beq.n	80065f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800652e:	4b6a      	ldr	r3, [pc, #424]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	099b      	lsrs	r3, r3, #6
 8006534:	2200      	movs	r2, #0
 8006536:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006538:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006540:	633b      	str	r3, [r7, #48]	@ 0x30
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
 8006546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800654a:	4622      	mov	r2, r4
 800654c:	462b      	mov	r3, r5
 800654e:	f04f 0000 	mov.w	r0, #0
 8006552:	f04f 0100 	mov.w	r1, #0
 8006556:	0159      	lsls	r1, r3, #5
 8006558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800655c:	0150      	lsls	r0, r2, #5
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4621      	mov	r1, r4
 8006564:	1a51      	subs	r1, r2, r1
 8006566:	6139      	str	r1, [r7, #16]
 8006568:	4629      	mov	r1, r5
 800656a:	eb63 0301 	sbc.w	r3, r3, r1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800657c:	4659      	mov	r1, fp
 800657e:	018b      	lsls	r3, r1, #6
 8006580:	4651      	mov	r1, sl
 8006582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006586:	4651      	mov	r1, sl
 8006588:	018a      	lsls	r2, r1, #6
 800658a:	4651      	mov	r1, sl
 800658c:	ebb2 0801 	subs.w	r8, r2, r1
 8006590:	4659      	mov	r1, fp
 8006592:	eb63 0901 	sbc.w	r9, r3, r1
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065aa:	4690      	mov	r8, r2
 80065ac:	4699      	mov	r9, r3
 80065ae:	4623      	mov	r3, r4
 80065b0:	eb18 0303 	adds.w	r3, r8, r3
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	462b      	mov	r3, r5
 80065b8:	eb49 0303 	adc.w	r3, r9, r3
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065ca:	4629      	mov	r1, r5
 80065cc:	028b      	lsls	r3, r1, #10
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d4:	4621      	mov	r1, r4
 80065d6:	028a      	lsls	r2, r1, #10
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065de:	2200      	movs	r2, #0
 80065e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065e8:	f7fa fade 	bl	8000ba8 <__aeabi_uldivmod>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4613      	mov	r3, r2
 80065f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f4:	e058      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065f6:	4b38      	ldr	r3, [pc, #224]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	099b      	lsrs	r3, r3, #6
 80065fc:	2200      	movs	r2, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	4611      	mov	r1, r2
 8006602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006606:	623b      	str	r3, [r7, #32]
 8006608:	2300      	movs	r3, #0
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
 800660c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006610:	4642      	mov	r2, r8
 8006612:	464b      	mov	r3, r9
 8006614:	f04f 0000 	mov.w	r0, #0
 8006618:	f04f 0100 	mov.w	r1, #0
 800661c:	0159      	lsls	r1, r3, #5
 800661e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006622:	0150      	lsls	r0, r2, #5
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4641      	mov	r1, r8
 800662a:	ebb2 0a01 	subs.w	sl, r2, r1
 800662e:	4649      	mov	r1, r9
 8006630:	eb63 0b01 	sbc.w	fp, r3, r1
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006648:	ebb2 040a 	subs.w	r4, r2, sl
 800664c:	eb63 050b 	sbc.w	r5, r3, fp
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	00eb      	lsls	r3, r5, #3
 800665a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800665e:	00e2      	lsls	r2, r4, #3
 8006660:	4614      	mov	r4, r2
 8006662:	461d      	mov	r5, r3
 8006664:	4643      	mov	r3, r8
 8006666:	18e3      	adds	r3, r4, r3
 8006668:	603b      	str	r3, [r7, #0]
 800666a:	464b      	mov	r3, r9
 800666c:	eb45 0303 	adc.w	r3, r5, r3
 8006670:	607b      	str	r3, [r7, #4]
 8006672:	f04f 0200 	mov.w	r2, #0
 8006676:	f04f 0300 	mov.w	r3, #0
 800667a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800667e:	4629      	mov	r1, r5
 8006680:	028b      	lsls	r3, r1, #10
 8006682:	4621      	mov	r1, r4
 8006684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006688:	4621      	mov	r1, r4
 800668a:	028a      	lsls	r2, r1, #10
 800668c:	4610      	mov	r0, r2
 800668e:	4619      	mov	r1, r3
 8006690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006692:	2200      	movs	r2, #0
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	61fa      	str	r2, [r7, #28]
 8006698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800669c:	f7fa fa84 	bl	8000ba8 <__aeabi_uldivmod>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4613      	mov	r3, r2
 80066a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066a8:	4b0b      	ldr	r3, [pc, #44]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	3301      	adds	r3, #1
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80066b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066c2:	e002      	b.n	80066ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066c4:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <HAL_RCC_GetSysClockFreq+0x204>)
 80066c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3750      	adds	r7, #80	@ 0x50
 80066d0:	46bd      	mov	sp, r7
 80066d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d6:	bf00      	nop
 80066d8:	40023800 	.word	0x40023800
 80066dc:	00f42400 	.word	0x00f42400

080066e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066e4:	4b03      	ldr	r3, [pc, #12]	@ (80066f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066e6:	681b      	ldr	r3, [r3, #0]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000000 	.word	0x20000000

080066f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e07b      	b.n	8006802 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	2b00      	cmp	r3, #0
 8006710:	d108      	bne.n	8006724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800671a:	d009      	beq.n	8006730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	61da      	str	r2, [r3, #28]
 8006722:	e005      	b.n	8006730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fc ffee 	bl	800372c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b4:	ea42 0103 	orr.w	r1, r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	f003 0104 	and.w	r1, r3, #4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	f003 0210 	and.w	r2, r3, #16
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b088      	sub	sp, #32
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800681a:	f7fd fa0b 	bl	8003c34 <HAL_GetTick>
 800681e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d001      	beq.n	8006834 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
 8006832:	e12a      	b.n	8006a8a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <HAL_SPI_Transmit+0x36>
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e122      	b.n	8006a8a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_SPI_Transmit+0x48>
 800684e:	2302      	movs	r3, #2
 8006850:	e11b      	b.n	8006a8a <HAL_SPI_Transmit+0x280>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2203      	movs	r2, #3
 800685e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	88fa      	ldrh	r2, [r7, #6]
 8006878:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068a0:	d10f      	bne.n	80068c2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068cc:	2b40      	cmp	r3, #64	@ 0x40
 80068ce:	d007      	beq.n	80068e0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e8:	d152      	bne.n	8006990 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_Transmit+0xee>
 80068f2:	8b7b      	ldrh	r3, [r7, #26]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d145      	bne.n	8006984 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800691c:	e032      	b.n	8006984 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b02      	cmp	r3, #2
 800692a:	d112      	bne.n	8006952 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	881a      	ldrh	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	1c9a      	adds	r2, r3, #2
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006950:	e018      	b.n	8006984 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006952:	f7fd f96f 	bl	8003c34 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d803      	bhi.n	800696a <HAL_SPI_Transmit+0x160>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d102      	bne.n	8006970 <HAL_SPI_Transmit+0x166>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d109      	bne.n	8006984 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e082      	b.n	8006a8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1c7      	bne.n	800691e <HAL_SPI_Transmit+0x114>
 800698e:	e053      	b.n	8006a38 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_SPI_Transmit+0x194>
 8006998:	8b7b      	ldrh	r3, [r7, #26]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d147      	bne.n	8006a2e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069c4:	e033      	b.n	8006a2e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d113      	bne.n	80069fc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	330c      	adds	r3, #12
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069fa:	e018      	b.n	8006a2e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069fc:	f7fd f91a 	bl	8003c34 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d803      	bhi.n	8006a14 <HAL_SPI_Transmit+0x20a>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d102      	bne.n	8006a1a <HAL_SPI_Transmit+0x210>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d109      	bne.n	8006a2e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e02d      	b.n	8006a8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1c6      	bne.n	80069c6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fdd1 	bl	80075e4 <SPI_EndRxTxTransaction>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b08a      	sub	sp, #40	@ 0x28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aa4:	f7fd f8c6 	bl	8003c34 <HAL_GetTick>
 8006aa8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ab0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006ab8:	887b      	ldrh	r3, [r7, #2]
 8006aba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006abc:	7ffb      	ldrb	r3, [r7, #31]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d00c      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x4a>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ac8:	d106      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x46>
 8006ad2:	7ffb      	ldrb	r3, [r7, #31]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d001      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e17f      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_SPI_TransmitReceive+0x5c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_SPI_TransmitReceive+0x5c>
 8006ae8:	887b      	ldrh	r3, [r7, #2]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e174      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x6e>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e16d      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x34a>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d003      	beq.n	8006b1c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2205      	movs	r2, #5
 8006b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	887a      	ldrh	r2, [r7, #2]
 8006b2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	887a      	ldrh	r2, [r7, #2]
 8006b32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	887a      	ldrh	r2, [r7, #2]
 8006b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	887a      	ldrh	r2, [r7, #2]
 8006b44:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5c:	2b40      	cmp	r3, #64	@ 0x40
 8006b5e:	d007      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b78:	d17e      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <HAL_SPI_TransmitReceive+0xf6>
 8006b82:	8afb      	ldrh	r3, [r7, #22]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d16c      	bne.n	8006c62 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8c:	881a      	ldrh	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b98:	1c9a      	adds	r2, r3, #2
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bac:	e059      	b.n	8006c62 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d11b      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x162>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <HAL_SPI_TransmitReceive+0x162>
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d113      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd0:	881a      	ldrh	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bdc:	1c9a      	adds	r2, r3, #2
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d119      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x1a4>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d014      	beq.n	8006c36 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c16:	b292      	uxth	r2, r2
 8006c18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1e:	1c9a      	adds	r2, r3, #2
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c32:	2301      	movs	r3, #1
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c36:	f7fc fffd 	bl	8003c34 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d80d      	bhi.n	8006c62 <HAL_SPI_TransmitReceive+0x1d0>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d009      	beq.n	8006c62 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e0bc      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1a0      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x11c>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d19b      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x11c>
 8006c76:	e082      	b.n	8006d7e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x1f4>
 8006c80:	8afb      	ldrh	r3, [r7, #22]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d171      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	7812      	ldrb	r2, [r2, #0]
 8006c92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cac:	e05d      	b.n	8006d6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d11c      	bne.n	8006cf6 <HAL_SPI_TransmitReceive+0x264>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <HAL_SPI_TransmitReceive+0x264>
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d114      	bne.n	8006cf6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	7812      	ldrb	r2, [r2, #0]
 8006cd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d119      	bne.n	8006d38 <HAL_SPI_TransmitReceive+0x2a6>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d014      	beq.n	8006d38 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d34:	2301      	movs	r3, #1
 8006d36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d38:	f7fc ff7c 	bl	8003c34 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d803      	bhi.n	8006d50 <HAL_SPI_TransmitReceive+0x2be>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d102      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x2c4>
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e038      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d19c      	bne.n	8006cae <HAL_SPI_TransmitReceive+0x21c>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d197      	bne.n	8006cae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 fc2e 	bl	80075e4 <SPI_EndRxTxTransaction>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d008      	beq.n	8006da0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e01d      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006dda:	2300      	movs	r3, #0
  }
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3728      	adds	r7, #40	@ 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006df8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d00c      	beq.n	8006e20 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e0c:	d106      	bne.n	8006e1c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d102      	bne.n	8006e1c <HAL_SPI_TransmitReceive_DMA+0x38>
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d001      	beq.n	8006e20 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e0cf      	b.n	8006fc0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006e2c:	887b      	ldrh	r3, [r7, #2]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e0c4      	b.n	8006fc0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_SPI_TransmitReceive_DMA+0x60>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e0bd      	b.n	8006fc0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d003      	beq.n	8006e60 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2205      	movs	r2, #5
 8006e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	887a      	ldrh	r2, [r7, #2]
 8006e70:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	887a      	ldrh	r2, [r7, #2]
 8006e76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	887a      	ldrh	r2, [r7, #2]
 8006e82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	887a      	ldrh	r2, [r7, #2]
 8006e88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d108      	bne.n	8006eb4 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea6:	4a48      	ldr	r2, [pc, #288]	@ (8006fc8 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006ea8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eae:	4a47      	ldr	r2, [pc, #284]	@ (8006fcc <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006eb2:	e007      	b.n	8006ec4 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eb8:	4a45      	ldr	r2, [pc, #276]	@ (8006fd0 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006eba:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec0:	4a44      	ldr	r2, [pc, #272]	@ (8006fd4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec8:	4a43      	ldr	r2, [pc, #268]	@ (8006fd8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006eca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006eec:	f7fd f892 	bl	8004014 <HAL_DMA_Start_IT>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00b      	beq.n	8006f0e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efa:	f043 0210 	orr.w	r2, r3, #16
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e058      	b.n	8006fc0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0201 	orr.w	r2, r2, #1
 8006f1c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f32:	2200      	movs	r2, #0
 8006f34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f46:	4619      	mov	r1, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f54:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006f56:	f7fd f85d 	bl	8004014 <HAL_DMA_Start_IT>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f64:	f043 0210 	orr.w	r2, r3, #16
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e023      	b.n	8006fc0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d007      	beq.n	8006f96 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f94:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0220 	orr.w	r2, r2, #32
 8006fac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0202 	orr.w	r2, r2, #2
 8006fbc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	08007369 	.word	0x08007369
 8006fcc:	08007231 	.word	0x08007231
 8006fd0:	08007385 	.word	0x08007385
 8006fd4:	080072d9 	.word	0x080072d9
 8006fd8:	080073a1 	.word	0x080073a1

08006fdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10e      	bne.n	800701c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	4798      	blx	r3
    return;
 800701a:	e0ce      	b.n	80071ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d009      	beq.n	800703a <HAL_SPI_IRQHandler+0x5e>
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
    return;
 8007038:	e0bf      	b.n	80071ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <HAL_SPI_IRQHandler+0x7e>
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80b0 	beq.w	80071ba <HAL_SPI_IRQHandler+0x1de>
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80aa 	beq.w	80071ba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	d023      	beq.n	80070b8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b03      	cmp	r3, #3
 800707a:	d011      	beq.n	80070a0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007080:	f043 0204 	orr.w	r2, r3, #4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007088:	2300      	movs	r3, #0
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	e00b      	b.n	80070b8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	693b      	ldr	r3, [r7, #16]
        return;
 80070b6:	e080      	b.n	80071ba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d014      	beq.n	80070ec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c6:	f043 0201 	orr.w	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fa:	f043 0208 	orr.w	r2, r3, #8
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007102:	2300      	movs	r3, #0
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007114:	2b00      	cmp	r3, #0
 8007116:	d04f      	beq.n	80071b8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007126:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <HAL_SPI_IRQHandler+0x168>
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d034      	beq.n	80071ae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0203 	bic.w	r2, r2, #3
 8007152:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d011      	beq.n	8007180 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007160:	4a17      	ldr	r2, [pc, #92]	@ (80071c0 <HAL_SPI_IRQHandler+0x1e4>)
 8007162:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007168:	4618      	mov	r0, r3
 800716a:	f7fc ffab 	bl	80040c4 <HAL_DMA_Abort_IT>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007178:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007184:	2b00      	cmp	r3, #0
 8007186:	d016      	beq.n	80071b6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800718c:	4a0c      	ldr	r2, [pc, #48]	@ (80071c0 <HAL_SPI_IRQHandler+0x1e4>)
 800718e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007194:	4618      	mov	r0, r3
 8007196:	f7fc ff95 	bl	80040c4 <HAL_DMA_Abort_IT>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80071ac:	e003      	b.n	80071b6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f826 	bl	8007200 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80071b4:	e000      	b.n	80071b8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80071b6:	bf00      	nop
    return;
 80071b8:	bf00      	nop
  }
}
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	080073e1 	.word	0x080073e1

080071c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007222:	b2db      	uxtb	r3, r3
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800723e:	f7fc fcf9 	bl	8003c34 <HAL_GetTick>
 8007242:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007252:	d03b      	beq.n	80072cc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0220 	bic.w	r2, r2, #32
 8007262:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10d      	bne.n	8007288 <SPI_DMAReceiveCplt+0x58>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007274:	d108      	bne.n	8007288 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0203 	bic.w	r2, r2, #3
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	e007      	b.n	8007298 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	2164      	movs	r1, #100	@ 0x64
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f93b 	bl	8007518 <SPI_EndRxTransaction>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7ff ff9b 	bl	8007200 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80072ca:	e002      	b.n	80072d2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff ff79 	bl	80071c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072e6:	f7fc fca5 	bl	8003c34 <HAL_GetTick>
 80072ea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072fa:	d02f      	beq.n	800735c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0220 	bic.w	r2, r2, #32
 800730a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	2164      	movs	r1, #100	@ 0x64
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f967 	bl	80075e4 <SPI_EndRxTxTransaction>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007320:	f043 0220 	orr.w	r2, r3, #32
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0203 	bic.w	r2, r2, #3
 8007336:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff ff53 	bl	8007200 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800735a:	e002      	b.n	8007362 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7fb ff37 	bl	80031d0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff ff2e 	bl	80071d8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7ff ff2a 	bl	80071ec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0203 	bic.w	r2, r2, #3
 80073bc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c2:	f043 0210 	orr.w	r2, r3, #16
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff ff14 	bl	8007200 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff ff00 	bl	8007200 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007400:	bf00      	nop
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	4613      	mov	r3, r2
 8007416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007418:	f7fc fc0c 	bl	8003c34 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4413      	add	r3, r2
 8007426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007428:	f7fc fc04 	bl	8003c34 <HAL_GetTick>
 800742c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800742e:	4b39      	ldr	r3, [pc, #228]	@ (8007514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	015b      	lsls	r3, r3, #5
 8007434:	0d1b      	lsrs	r3, r3, #20
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	fb02 f303 	mul.w	r3, r2, r3
 800743c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800743e:	e054      	b.n	80074ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007446:	d050      	beq.n	80074ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007448:	f7fc fbf4 	bl	8003c34 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	429a      	cmp	r2, r3
 8007456:	d902      	bls.n	800745e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d13d      	bne.n	80074da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800746c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007476:	d111      	bne.n	800749c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007480:	d004      	beq.n	800748c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800748a:	d107      	bne.n	800749c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800749a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a4:	d10f      	bne.n	80074c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e017      	b.n	800750a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4013      	ands	r3, r2
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	429a      	cmp	r2, r3
 8007506:	d19b      	bne.n	8007440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000000 	.word	0x20000000

08007518 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800752c:	d111      	bne.n	8007552 <SPI_EndRxTransaction+0x3a>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007536:	d004      	beq.n	8007542 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007540:	d107      	bne.n	8007552 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007550:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800755a:	d12a      	bne.n	80075b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007564:	d012      	beq.n	800758c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	2180      	movs	r1, #128	@ 0x80
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff ff49 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02d      	beq.n	80075d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007580:	f043 0220 	orr.w	r2, r3, #32
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e026      	b.n	80075da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	2101      	movs	r1, #1
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff ff36 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01a      	beq.n	80075d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a6:	f043 0220 	orr.w	r2, r3, #32
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e013      	b.n	80075da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	2101      	movs	r1, #1
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ff23 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d007      	beq.n	80075d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075cc:	f043 0220 	orr.w	r2, r3, #32
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e000      	b.n	80075da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2201      	movs	r2, #1
 80075f8:	2102      	movs	r1, #2
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff ff04 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760a:	f043 0220 	orr.w	r2, r3, #32
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e032      	b.n	800767c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007616:	4b1b      	ldr	r3, [pc, #108]	@ (8007684 <SPI_EndRxTxTransaction+0xa0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1b      	ldr	r2, [pc, #108]	@ (8007688 <SPI_EndRxTxTransaction+0xa4>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	0d5b      	lsrs	r3, r3, #21
 8007622:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007634:	d112      	bne.n	800765c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2200      	movs	r2, #0
 800763e:	2180      	movs	r1, #128	@ 0x80
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fee1 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d016      	beq.n	800767a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007650:	f043 0220 	orr.w	r2, r3, #32
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e00f      	b.n	800767c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	3b01      	subs	r3, #1
 8007666:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007672:	2b80      	cmp	r3, #128	@ 0x80
 8007674:	d0f2      	beq.n	800765c <SPI_EndRxTxTransaction+0x78>
 8007676:	e000      	b.n	800767a <SPI_EndRxTxTransaction+0x96>
        break;
 8007678:	bf00      	nop
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000000 	.word	0x20000000
 8007688:	165e9f81 	.word	0x165e9f81

0800768c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800768c:	b084      	sub	sp, #16
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	f107 001c 	add.w	r0, r7, #28
 800769a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800769e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d123      	bne.n	80076ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80076ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d105      	bne.n	80076e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 fae8 	bl	8008cb8 <USB_CoreReset>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	e01b      	b.n	8007726 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fadc 	bl	8008cb8 <USB_CoreReset>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007704:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007710:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	639a      	str	r2, [r3, #56]	@ 0x38
 8007718:	e005      	b.n	8007726 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007726:	7fbb      	ldrb	r3, [r7, #30]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d10b      	bne.n	8007744 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f043 0206 	orr.w	r2, r3, #6
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f043 0220 	orr.w	r2, r3, #32
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007750:	b004      	add	sp, #16
 8007752:	4770      	bx	lr

08007754 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d165      	bne.n	8007834 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4a41      	ldr	r2, [pc, #260]	@ (8007870 <USB_SetTurnaroundTime+0x11c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d906      	bls.n	800777e <USB_SetTurnaroundTime+0x2a>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4a40      	ldr	r2, [pc, #256]	@ (8007874 <USB_SetTurnaroundTime+0x120>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d202      	bcs.n	800777e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007778:	230f      	movs	r3, #15
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e062      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a3c      	ldr	r2, [pc, #240]	@ (8007874 <USB_SetTurnaroundTime+0x120>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d306      	bcc.n	8007794 <USB_SetTurnaroundTime+0x40>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4a3b      	ldr	r2, [pc, #236]	@ (8007878 <USB_SetTurnaroundTime+0x124>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d202      	bcs.n	8007794 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800778e:	230e      	movs	r3, #14
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e057      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4a38      	ldr	r2, [pc, #224]	@ (8007878 <USB_SetTurnaroundTime+0x124>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d306      	bcc.n	80077aa <USB_SetTurnaroundTime+0x56>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4a37      	ldr	r2, [pc, #220]	@ (800787c <USB_SetTurnaroundTime+0x128>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d202      	bcs.n	80077aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80077a4:	230d      	movs	r3, #13
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e04c      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a33      	ldr	r2, [pc, #204]	@ (800787c <USB_SetTurnaroundTime+0x128>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d306      	bcc.n	80077c0 <USB_SetTurnaroundTime+0x6c>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4a32      	ldr	r2, [pc, #200]	@ (8007880 <USB_SetTurnaroundTime+0x12c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d802      	bhi.n	80077c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80077ba:	230c      	movs	r3, #12
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	e041      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a2f      	ldr	r2, [pc, #188]	@ (8007880 <USB_SetTurnaroundTime+0x12c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d906      	bls.n	80077d6 <USB_SetTurnaroundTime+0x82>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007884 <USB_SetTurnaroundTime+0x130>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d802      	bhi.n	80077d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80077d0:	230b      	movs	r3, #11
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	e036      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	4a2a      	ldr	r2, [pc, #168]	@ (8007884 <USB_SetTurnaroundTime+0x130>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d906      	bls.n	80077ec <USB_SetTurnaroundTime+0x98>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	4a29      	ldr	r2, [pc, #164]	@ (8007888 <USB_SetTurnaroundTime+0x134>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d802      	bhi.n	80077ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80077e6:	230a      	movs	r3, #10
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	e02b      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4a26      	ldr	r2, [pc, #152]	@ (8007888 <USB_SetTurnaroundTime+0x134>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d906      	bls.n	8007802 <USB_SetTurnaroundTime+0xae>
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4a25      	ldr	r2, [pc, #148]	@ (800788c <USB_SetTurnaroundTime+0x138>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d202      	bcs.n	8007802 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077fc:	2309      	movs	r3, #9
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e020      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	4a21      	ldr	r2, [pc, #132]	@ (800788c <USB_SetTurnaroundTime+0x138>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d306      	bcc.n	8007818 <USB_SetTurnaroundTime+0xc4>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <USB_SetTurnaroundTime+0x13c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d802      	bhi.n	8007818 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007812:	2308      	movs	r3, #8
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	e015      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4a1d      	ldr	r2, [pc, #116]	@ (8007890 <USB_SetTurnaroundTime+0x13c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d906      	bls.n	800782e <USB_SetTurnaroundTime+0xda>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4a1c      	ldr	r2, [pc, #112]	@ (8007894 <USB_SetTurnaroundTime+0x140>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d202      	bcs.n	800782e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007828:	2307      	movs	r3, #7
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	e00a      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800782e:	2306      	movs	r3, #6
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	e007      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800783a:	2309      	movs	r3, #9
 800783c:	617b      	str	r3, [r7, #20]
 800783e:	e001      	b.n	8007844 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007840:	2309      	movs	r3, #9
 8007842:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	029b      	lsls	r3, r3, #10
 8007858:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800785c:	431a      	orrs	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	00d8acbf 	.word	0x00d8acbf
 8007874:	00e4e1c0 	.word	0x00e4e1c0
 8007878:	00f42400 	.word	0x00f42400
 800787c:	01067380 	.word	0x01067380
 8007880:	011a499f 	.word	0x011a499f
 8007884:	01312cff 	.word	0x01312cff
 8007888:	014ca43f 	.word	0x014ca43f
 800788c:	016e3600 	.word	0x016e3600
 8007890:	01a6ab1f 	.word	0x01a6ab1f
 8007894:	01e84800 	.word	0x01e84800

08007898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f043 0201 	orr.w	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f023 0201 	bic.w	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d115      	bne.n	800792a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800790a:	200a      	movs	r0, #10
 800790c:	f7fc f99e 	bl	8003c4c <HAL_Delay>
      ms += 10U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	330a      	adds	r3, #10
 8007914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 f93f 	bl	8008b9a <USB_GetMode>
 800791c:	4603      	mov	r3, r0
 800791e:	2b01      	cmp	r3, #1
 8007920:	d01e      	beq.n	8007960 <USB_SetCurrentMode+0x84>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2bc7      	cmp	r3, #199	@ 0xc7
 8007926:	d9f0      	bls.n	800790a <USB_SetCurrentMode+0x2e>
 8007928:	e01a      	b.n	8007960 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d115      	bne.n	800795c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800793c:	200a      	movs	r0, #10
 800793e:	f7fc f985 	bl	8003c4c <HAL_Delay>
      ms += 10U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	330a      	adds	r3, #10
 8007946:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f926 	bl	8008b9a <USB_GetMode>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <USB_SetCurrentMode+0x84>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2bc7      	cmp	r3, #199	@ 0xc7
 8007958:	d9f0      	bls.n	800793c <USB_SetCurrentMode+0x60>
 800795a:	e001      	b.n	8007960 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e005      	b.n	800796c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2bc8      	cmp	r3, #200	@ 0xc8
 8007964:	d101      	bne.n	800796a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007974:	b084      	sub	sp, #16
 8007976:	b580      	push	{r7, lr}
 8007978:	b086      	sub	sp, #24
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800798e:	2300      	movs	r3, #0
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	e009      	b.n	80079a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	3340      	adds	r3, #64	@ 0x40
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	3301      	adds	r3, #1
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b0e      	cmp	r3, #14
 80079ac:	d9f2      	bls.n	8007994 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80079ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d11c      	bne.n	80079f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079c4:	f043 0302 	orr.w	r3, r3, #2
 80079c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80079ee:	e00b      	b.n	8007a08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a0e:	461a      	mov	r2, r3
 8007a10:	2300      	movs	r3, #0
 8007a12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d10d      	bne.n	8007a38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d104      	bne.n	8007a2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a24:	2100      	movs	r1, #0
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f968 	bl	8007cfc <USB_SetDevSpeed>
 8007a2c:	e008      	b.n	8007a40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a2e:	2101      	movs	r1, #1
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f963 	bl	8007cfc <USB_SetDevSpeed>
 8007a36:	e003      	b.n	8007a40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a38:	2103      	movs	r1, #3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f95e 	bl	8007cfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a40:	2110      	movs	r1, #16
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f8fa 	bl	8007c3c <USB_FlushTxFifo>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f924 	bl	8007ca0 <USB_FlushRxFifo>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a68:	461a      	mov	r2, r3
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a74:	461a      	mov	r2, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a80:	461a      	mov	r2, r3
 8007a82:	2300      	movs	r3, #0
 8007a84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a86:	2300      	movs	r3, #0
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	e043      	b.n	8007b14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aa2:	d118      	bne.n	8007ad6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e013      	b.n	8007ae8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007acc:	461a      	mov	r2, r3
 8007ace:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	e008      	b.n	8007ae8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af4:	461a      	mov	r2, r3
 8007af6:	2300      	movs	r3, #0
 8007af8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b06:	461a      	mov	r2, r3
 8007b08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	3301      	adds	r3, #1
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b18:	461a      	mov	r2, r3
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d3b5      	bcc.n	8007a8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b20:	2300      	movs	r3, #0
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	e043      	b.n	8007bae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b3c:	d118      	bne.n	8007b70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b50:	461a      	mov	r2, r3
 8007b52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	e013      	b.n	8007b82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b66:	461a      	mov	r2, r3
 8007b68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	e008      	b.n	8007b82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2300      	movs	r3, #0
 8007b80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8e:	461a      	mov	r2, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ba6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	3301      	adds	r3, #1
 8007bac:	613b      	str	r3, [r7, #16]
 8007bae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d3b5      	bcc.n	8007b26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bcc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007bda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d105      	bne.n	8007bf0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f043 0210 	orr.w	r2, r3, #16
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	4b10      	ldr	r3, [pc, #64]	@ (8007c38 <USB_DevInit+0x2c4>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	f043 0208 	orr.w	r2, r3, #8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d107      	bne.n	8007c28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c20:	f043 0304 	orr.w	r3, r3, #4
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c34:	b004      	add	sp, #16
 8007c36:	4770      	bx	lr
 8007c38:	803c3800 	.word	0x803c3800

08007c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c56:	d901      	bls.n	8007c5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e01b      	b.n	8007c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	daf2      	bge.n	8007c4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	019b      	lsls	r3, r3, #6
 8007c6c:	f043 0220 	orr.w	r2, r3, #32
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c80:	d901      	bls.n	8007c86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e006      	b.n	8007c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d0f0      	beq.n	8007c74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cb8:	d901      	bls.n	8007cbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e018      	b.n	8007cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	daf2      	bge.n	8007cac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2210      	movs	r2, #16
 8007cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cdc:	d901      	bls.n	8007ce2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e006      	b.n	8007cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	2b10      	cmp	r3, #16
 8007cec:	d0f0      	beq.n	8007cd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b087      	sub	sp, #28
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f003 0306 	and.w	r3, r3, #6
 8007d46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d102      	bne.n	8007d54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	75fb      	strb	r3, [r7, #23]
 8007d52:	e00a      	b.n	8007d6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d002      	beq.n	8007d60 <USB_GetDevSpeed+0x32>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b06      	cmp	r3, #6
 8007d5e:	d102      	bne.n	8007d66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d60:	2302      	movs	r3, #2
 8007d62:	75fb      	strb	r3, [r7, #23]
 8007d64:	e001      	b.n	8007d6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d66:	230f      	movs	r3, #15
 8007d68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	371c      	adds	r7, #28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d13a      	bne.n	8007e0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d9a:	69da      	ldr	r2, [r3, #28]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	2101      	movs	r1, #1
 8007da6:	fa01 f303 	lsl.w	r3, r1, r3
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	68f9      	ldr	r1, [r7, #12]
 8007dae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d155      	bne.n	8007e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	791b      	ldrb	r3, [r3, #4]
 8007de6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007de8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	059b      	lsls	r3, r3, #22
 8007dee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007df0:	4313      	orrs	r3, r2
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e036      	b.n	8007e78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e10:	69da      	ldr	r2, [r3, #28]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e20:	041b      	lsls	r3, r3, #16
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11a      	bne.n	8007e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	791b      	ldrb	r3, [r3, #4]
 8007e5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d161      	bne.n	8007f68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007eba:	d11f      	bne.n	8007efc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	0151      	lsls	r1, r2, #5
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	440a      	add	r2, r1
 8007ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ed6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007eda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ef6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	43db      	mvns	r3, r3
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	2101      	movs	r1, #1
 8007f32:	fa01 f303 	lsl.w	r3, r1, r3
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	43db      	mvns	r3, r3
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f40:	4013      	ands	r3, r2
 8007f42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	0159      	lsls	r1, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	440b      	add	r3, r1
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5e:	4619      	mov	r1, r3
 8007f60:	4b35      	ldr	r3, [pc, #212]	@ (8008038 <USB_DeactivateEndpoint+0x1b0>)
 8007f62:	4013      	ands	r3, r2
 8007f64:	600b      	str	r3, [r1, #0]
 8007f66:	e060      	b.n	800802a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f7e:	d11f      	bne.n	8007fc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	0151      	lsls	r1, r2, #5
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffa:	041b      	lsls	r3, r3, #16
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	68f9      	ldr	r1, [r7, #12]
 8008000:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008004:	4013      	ands	r3, r2
 8008006:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	0159      	lsls	r1, r3, #5
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	440b      	add	r3, r1
 800801e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008022:	4619      	mov	r1, r3
 8008024:	4b05      	ldr	r3, [pc, #20]	@ (800803c <USB_DeactivateEndpoint+0x1b4>)
 8008026:	4013      	ands	r3, r2
 8008028:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	ec337800 	.word	0xec337800
 800803c:	eff37800 	.word	0xeff37800

08008040 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	@ 0x28
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b01      	cmp	r3, #1
 800805e:	f040 817f 	bne.w	8008360 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d132      	bne.n	80080d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	0151      	lsls	r1, r2, #5
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	440a      	add	r2, r1
 8008080:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008084:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008088:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800808c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	0151      	lsls	r1, r2, #5
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	440a      	add	r2, r1
 80080a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080c8:	0cdb      	lsrs	r3, r3, #19
 80080ca:	04db      	lsls	r3, r3, #19
 80080cc:	6113      	str	r3, [r2, #16]
 80080ce:	e097      	b.n	8008200 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ea:	0cdb      	lsrs	r3, r3, #19
 80080ec:	04db      	lsls	r3, r3, #19
 80080ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	440a      	add	r2, r1
 8008106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800810a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800810e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008112:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d11a      	bne.n	8008150 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	429a      	cmp	r2, r3
 8008124:	d903      	bls.n	800812e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008148:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800814c:	6113      	str	r3, [r2, #16]
 800814e:	e044      	b.n	80081da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	4413      	add	r3, r2
 800815a:	1e5a      	subs	r2, r3, #1
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	fbb2 f3f3 	udiv	r3, r2, r3
 8008164:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008172:	691a      	ldr	r2, [r3, #16]
 8008174:	8afb      	ldrh	r3, [r7, #22]
 8008176:	04d9      	lsls	r1, r3, #19
 8008178:	4ba4      	ldr	r3, [pc, #656]	@ (800840c <USB_EPStartXfer+0x3cc>)
 800817a:	400b      	ands	r3, r1
 800817c:	69b9      	ldr	r1, [r7, #24]
 800817e:	0148      	lsls	r0, r1, #5
 8008180:	69f9      	ldr	r1, [r7, #28]
 8008182:	4401      	add	r1, r0
 8008184:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008188:	4313      	orrs	r3, r2
 800818a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	791b      	ldrb	r3, [r3, #4]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d122      	bne.n	80081da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80081b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	8afb      	ldrh	r3, [r7, #22]
 80081c4:	075b      	lsls	r3, r3, #29
 80081c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80081ca:	69b9      	ldr	r1, [r7, #24]
 80081cc:	0148      	lsls	r0, r1, #5
 80081ce:	69f9      	ldr	r1, [r7, #28]
 80081d0:	4401      	add	r1, r0
 80081d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80081d6:	4313      	orrs	r3, r2
 80081d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081f0:	69b9      	ldr	r1, [r7, #24]
 80081f2:	0148      	lsls	r0, r1, #5
 80081f4:	69f9      	ldr	r1, [r7, #28]
 80081f6:	4401      	add	r1, r0
 80081f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80081fc:	4313      	orrs	r3, r2
 80081fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d14b      	bne.n	800829e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d009      	beq.n	8008222 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821a:	461a      	mov	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	791b      	ldrb	r3, [r3, #4]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d128      	bne.n	800827c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008236:	2b00      	cmp	r3, #0
 8008238:	d110      	bne.n	800825c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	0151      	lsls	r1, r2, #5
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	440a      	add	r2, r1
 8008250:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008254:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	e00f      	b.n	800827c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	0151      	lsls	r1, r2, #5
 800826e:	69fa      	ldr	r2, [r7, #28]
 8008270:	440a      	add	r2, r1
 8008272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800827a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	4413      	add	r3, r2
 8008284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	0151      	lsls	r1, r2, #5
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	440a      	add	r2, r1
 8008292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008296:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	e166      	b.n	800856c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80082bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	791b      	ldrb	r3, [r3, #4]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d015      	beq.n	80082f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 814e 	beq.w	800856c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	2101      	movs	r1, #1
 80082e2:	fa01 f303 	lsl.w	r3, r1, r3
 80082e6:	69f9      	ldr	r1, [r7, #28]
 80082e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082ec:	4313      	orrs	r3, r2
 80082ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80082f0:	e13c      	b.n	800856c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d110      	bne.n	8008324 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	440a      	add	r2, r1
 8008318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800831c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	e00f      	b.n	8008344 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800833e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008342:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	68d9      	ldr	r1, [r3, #12]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	b298      	uxth	r0, r3
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	4603      	mov	r3, r0
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f9b9 	bl	80086d0 <USB_WritePacket>
 800835e:	e105      	b.n	800856c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	440a      	add	r2, r1
 8008376:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800837a:	0cdb      	lsrs	r3, r3, #19
 800837c:	04db      	lsls	r3, r3, #19
 800837e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	0151      	lsls	r1, r2, #5
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	440a      	add	r2, r1
 8008396:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800839a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800839e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80083a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d132      	bne.n	8008410 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	689a      	ldr	r2, [r3, #8]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	0148      	lsls	r0, r1, #5
 80083dc:	69f9      	ldr	r1, [r7, #28]
 80083de:	4401      	add	r1, r0
 80083e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083e4:	4313      	orrs	r3, r2
 80083e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008402:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008406:	6113      	str	r3, [r2, #16]
 8008408:	e062      	b.n	80084d0 <USB_EPStartXfer+0x490>
 800840a:	bf00      	nop
 800840c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d123      	bne.n	8008460 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800842e:	69b9      	ldr	r1, [r7, #24]
 8008430:	0148      	lsls	r0, r1, #5
 8008432:	69f9      	ldr	r1, [r7, #28]
 8008434:	4401      	add	r1, r0
 8008436:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800843a:	4313      	orrs	r3, r2
 800843c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	0151      	lsls	r1, r2, #5
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	440a      	add	r2, r1
 8008454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008458:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800845c:	6113      	str	r3, [r2, #16]
 800845e:	e037      	b.n	80084d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	691a      	ldr	r2, [r3, #16]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	4413      	add	r3, r2
 800846a:	1e5a      	subs	r2, r3, #1
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	fbb2 f3f3 	udiv	r3, r2, r3
 8008474:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	8afa      	ldrh	r2, [r7, #22]
 800847c:	fb03 f202 	mul.w	r2, r3, r2
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	8afb      	ldrh	r3, [r7, #22]
 8008494:	04d9      	lsls	r1, r3, #19
 8008496:	4b38      	ldr	r3, [pc, #224]	@ (8008578 <USB_EPStartXfer+0x538>)
 8008498:	400b      	ands	r3, r1
 800849a:	69b9      	ldr	r1, [r7, #24]
 800849c:	0148      	lsls	r0, r1, #5
 800849e:	69f9      	ldr	r1, [r7, #28]
 80084a0:	4401      	add	r1, r0
 80084a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084a6:	4313      	orrs	r3, r2
 80084a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084c0:	69b9      	ldr	r1, [r7, #24]
 80084c2:	0148      	lsls	r0, r1, #5
 80084c4:	69f9      	ldr	r1, [r7, #28]
 80084c6:	4401      	add	r1, r0
 80084c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084cc:	4313      	orrs	r3, r2
 80084ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d10d      	bne.n	80084f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	68d9      	ldr	r1, [r3, #12]
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ee:	460a      	mov	r2, r1
 80084f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	791b      	ldrb	r3, [r3, #4]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d128      	bne.n	800854c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008506:	2b00      	cmp	r3, #0
 8008508:	d110      	bne.n	800852c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	4413      	add	r3, r2
 8008512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	0151      	lsls	r1, r2, #5
 800851c:	69fa      	ldr	r2, [r7, #28]
 800851e:	440a      	add	r2, r1
 8008520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008524:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	e00f      	b.n	800854c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	0151      	lsls	r1, r2, #5
 800853e:	69fa      	ldr	r2, [r7, #28]
 8008540:	440a      	add	r2, r1
 8008542:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800854a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	0151      	lsls	r1, r2, #5
 800855e:	69fa      	ldr	r2, [r7, #28]
 8008560:	440a      	add	r2, r1
 8008562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008566:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800856a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	1ff80000 	.word	0x1ff80000

0800857c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d14a      	bne.n	8008630 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085b2:	f040 8086 	bne.w	80086c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	7812      	ldrb	r2, [r2, #0]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	7812      	ldrb	r2, [r2, #0]
 80085ee:	0151      	lsls	r1, r2, #5
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	440a      	add	r2, r1
 80085f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f242 7210 	movw	r2, #10000	@ 0x2710
 800860a:	4293      	cmp	r3, r2
 800860c:	d902      	bls.n	8008614 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	75fb      	strb	r3, [r7, #23]
          break;
 8008612:	e056      	b.n	80086c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800862c:	d0e7      	beq.n	80085fe <USB_EPStopXfer+0x82>
 800862e:	e048      	b.n	80086c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008648:	d13b      	bne.n	80086c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	7812      	ldrb	r2, [r2, #0]
 800865e:	0151      	lsls	r1, r2, #5
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	440a      	add	r2, r1
 8008664:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008668:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800866c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	4413      	add	r3, r2
 8008678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800868c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008690:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3301      	adds	r3, #1
 8008696:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800869e:	4293      	cmp	r3, r2
 80086a0:	d902      	bls.n	80086a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	75fb      	strb	r3, [r7, #23]
          break;
 80086a6:	e00c      	b.n	80086c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086c0:	d0e7      	beq.n	8008692 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b089      	sub	sp, #36	@ 0x24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4611      	mov	r1, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	460b      	mov	r3, r1
 80086e0:	71fb      	strb	r3, [r7, #7]
 80086e2:	4613      	mov	r3, r2
 80086e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d123      	bne.n	800873e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086f6:	88bb      	ldrh	r3, [r7, #4]
 80086f8:	3303      	adds	r3, #3
 80086fa:	089b      	lsrs	r3, r3, #2
 80086fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086fe:	2300      	movs	r3, #0
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	e018      	b.n	8008736 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	031a      	lsls	r2, r3, #12
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	4413      	add	r3, r2
 800870c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008710:	461a      	mov	r2, r3
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	3301      	adds	r3, #1
 800871c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	3301      	adds	r3, #1
 8008722:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3301      	adds	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	3301      	adds	r3, #1
 800872e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	3301      	adds	r3, #1
 8008734:	61bb      	str	r3, [r7, #24]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	429a      	cmp	r2, r3
 800873c:	d3e2      	bcc.n	8008704 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3724      	adds	r7, #36	@ 0x24
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800874c:	b480      	push	{r7}
 800874e:	b08b      	sub	sp, #44	@ 0x2c
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008762:	88fb      	ldrh	r3, [r7, #6]
 8008764:	089b      	lsrs	r3, r3, #2
 8008766:	b29b      	uxth	r3, r3
 8008768:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800876a:	88fb      	ldrh	r3, [r7, #6]
 800876c:	f003 0303 	and.w	r3, r3, #3
 8008770:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008772:	2300      	movs	r3, #0
 8008774:	623b      	str	r3, [r7, #32]
 8008776:	e014      	b.n	80087a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008782:	601a      	str	r2, [r3, #0]
    pDest++;
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	3301      	adds	r3, #1
 8008788:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	3301      	adds	r3, #1
 800878e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	3301      	adds	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	3301      	adds	r3, #1
 800879a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	3301      	adds	r3, #1
 80087a0:	623b      	str	r3, [r7, #32]
 80087a2:	6a3a      	ldr	r2, [r7, #32]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d3e6      	bcc.n	8008778 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087aa:	8bfb      	ldrh	r3, [r7, #30]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d01e      	beq.n	80087ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087ba:	461a      	mov	r2, r3
 80087bc:	f107 0310 	add.w	r3, r7, #16
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	00db      	lsls	r3, r3, #3
 80087cc:	fa22 f303 	lsr.w	r3, r2, r3
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	701a      	strb	r2, [r3, #0]
      i++;
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	3301      	adds	r3, #1
 80087da:	623b      	str	r3, [r7, #32]
      pDest++;
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	3301      	adds	r3, #1
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80087e2:	8bfb      	ldrh	r3, [r7, #30]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087e8:	8bfb      	ldrh	r3, [r7, #30]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1ea      	bne.n	80087c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	372c      	adds	r7, #44	@ 0x2c
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d12c      	bne.n	8008872 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	db12      	blt.n	8008850 <USB_EPSetStall+0x54>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00f      	beq.n	8008850 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	440a      	add	r2, r1
 8008846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800884a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800884e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	440a      	add	r2, r1
 8008866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800886a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	e02b      	b.n	80088ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	db12      	blt.n	80088aa <USB_EPSetStall+0xae>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00f      	beq.n	80088aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	0151      	lsls	r1, r2, #5
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	440a      	add	r2, r1
 80088a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80088a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d128      	bne.n	8008946 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	440a      	add	r2, r1
 800890a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800890e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008912:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	791b      	ldrb	r3, [r3, #4]
 8008918:	2b03      	cmp	r3, #3
 800891a:	d003      	beq.n	8008924 <USB_EPClearStall+0x4c>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	791b      	ldrb	r3, [r3, #4]
 8008920:	2b02      	cmp	r3, #2
 8008922:	d138      	bne.n	8008996 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	440a      	add	r2, r1
 800893a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800893e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	e027      	b.n	8008996 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	0151      	lsls	r1, r2, #5
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	440a      	add	r2, r1
 800895c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008960:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008964:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	791b      	ldrb	r3, [r3, #4]
 800896a:	2b03      	cmp	r3, #3
 800896c:	d003      	beq.n	8008976 <USB_EPClearStall+0x9e>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	791b      	ldrb	r3, [r3, #4]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d10f      	bne.n	8008996 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008994:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80089c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80089d8:	68f9      	ldr	r1, [r7, #12]
 80089da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089de:	4313      	orrs	r3, r2
 80089e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a0a:	f023 0303 	bic.w	r3, r3, #3
 8008a0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a1e:	f023 0302 	bic.w	r3, r3, #2
 8008a22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a4c:	f023 0303 	bic.w	r3, r3, #3
 8008a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a60:	f043 0302 	orr.w	r3, r3, #2
 8008a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	4013      	ands	r3, r2
 8008abc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	0c1b      	lsrs	r3, r3, #16
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	4013      	ands	r3, r2
 8008af0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	b29b      	uxth	r3, r3
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b30:	68bb      	ldr	r3, [r7, #8]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b087      	sub	sp, #28
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	f003 030f 	and.w	r3, r3, #15
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6e:	01db      	lsls	r3, r3, #7
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	4013      	ands	r3, r2
 8008b8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008bd4:	f023 0307 	bic.w	r3, r3, #7
 8008bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	460b      	mov	r3, r1
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	333c      	adds	r3, #60	@ 0x3c
 8008c12:	3304      	adds	r3, #4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	4a26      	ldr	r2, [pc, #152]	@ (8008cb4 <USB_EP0_OutStart+0xb8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d90a      	bls.n	8008c36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c30:	d101      	bne.n	8008c36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	e037      	b.n	8008ca6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c64:	f043 0318 	orr.w	r3, r3, #24
 8008c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008c7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c7e:	7afb      	ldrb	r3, [r7, #11]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d10f      	bne.n	8008ca4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008ca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	4f54300a 	.word	0x4f54300a

08008cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cd0:	d901      	bls.n	8008cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e01b      	b.n	8008d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	daf2      	bge.n	8008cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f043 0201 	orr.w	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cfa:	d901      	bls.n	8008d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e006      	b.n	8008d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d0f0      	beq.n	8008cee <USB_CoreReset+0x36>

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
	...

08008d1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d28:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008d2c:	f002 fc9e 	bl	800b66c <USBD_static_malloc>
 8008d30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d109      	bne.n	8008d4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	32b0      	adds	r2, #176	@ 0xb0
 8008d42:	2100      	movs	r1, #0
 8008d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e0d4      	b.n	8008ef6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008d4c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008d50:	2100      	movs	r1, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f003 fa4b 	bl	800c1ee <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	32b0      	adds	r2, #176	@ 0xb0
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	32b0      	adds	r2, #176	@ 0xb0
 8008d72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	7c1b      	ldrb	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d138      	bne.n	8008df6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d84:	4b5e      	ldr	r3, [pc, #376]	@ (8008f00 <USBD_CDC_Init+0x1e4>)
 8008d86:	7819      	ldrb	r1, [r3, #0]
 8008d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f002 fb49 	bl	800b426 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d94:	4b5a      	ldr	r3, [pc, #360]	@ (8008f00 <USBD_CDC_Init+0x1e4>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f003 020f 	and.w	r2, r3, #15
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	440b      	add	r3, r1
 8008da8:	3324      	adds	r3, #36	@ 0x24
 8008daa:	2201      	movs	r2, #1
 8008dac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008dae:	4b55      	ldr	r3, [pc, #340]	@ (8008f04 <USBD_CDC_Init+0x1e8>)
 8008db0:	7819      	ldrb	r1, [r3, #0]
 8008db2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008db6:	2202      	movs	r2, #2
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f002 fb34 	bl	800b426 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008dbe:	4b51      	ldr	r3, [pc, #324]	@ (8008f04 <USBD_CDC_Init+0x1e8>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	f003 020f 	and.w	r2, r3, #15
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008dda:	4b4b      	ldr	r3, [pc, #300]	@ (8008f08 <USBD_CDC_Init+0x1ec>)
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	f003 020f 	and.w	r2, r3, #15
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	3326      	adds	r3, #38	@ 0x26
 8008df0:	2210      	movs	r2, #16
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	e035      	b.n	8008e62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008df6:	4b42      	ldr	r3, [pc, #264]	@ (8008f00 <USBD_CDC_Init+0x1e4>)
 8008df8:	7819      	ldrb	r1, [r3, #0]
 8008dfa:	2340      	movs	r3, #64	@ 0x40
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f002 fb11 	bl	800b426 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e04:	4b3e      	ldr	r3, [pc, #248]	@ (8008f00 <USBD_CDC_Init+0x1e4>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	f003 020f 	and.w	r2, r3, #15
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	3324      	adds	r3, #36	@ 0x24
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e1e:	4b39      	ldr	r3, [pc, #228]	@ (8008f04 <USBD_CDC_Init+0x1e8>)
 8008e20:	7819      	ldrb	r1, [r3, #0]
 8008e22:	2340      	movs	r3, #64	@ 0x40
 8008e24:	2202      	movs	r2, #2
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f002 fafd 	bl	800b426 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008e2c:	4b35      	ldr	r3, [pc, #212]	@ (8008f04 <USBD_CDC_Init+0x1e8>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e44:	2201      	movs	r2, #1
 8008e46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e48:	4b2f      	ldr	r3, [pc, #188]	@ (8008f08 <USBD_CDC_Init+0x1ec>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 020f 	and.w	r2, r3, #15
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	440b      	add	r3, r1
 8008e5c:	3326      	adds	r3, #38	@ 0x26
 8008e5e:	2210      	movs	r2, #16
 8008e60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e62:	4b29      	ldr	r3, [pc, #164]	@ (8008f08 <USBD_CDC_Init+0x1ec>)
 8008e64:	7819      	ldrb	r1, [r3, #0]
 8008e66:	2308      	movs	r3, #8
 8008e68:	2203      	movs	r2, #3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f002 fadb 	bl	800b426 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008e70:	4b25      	ldr	r3, [pc, #148]	@ (8008f08 <USBD_CDC_Init+0x1ec>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	f003 020f 	and.w	r2, r3, #15
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	440b      	add	r3, r1
 8008e84:	3324      	adds	r3, #36	@ 0x24
 8008e86:	2201      	movs	r2, #1
 8008e88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	33b0      	adds	r3, #176	@ 0xb0
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	e018      	b.n	8008ef6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	7c1b      	ldrb	r3, [r3, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f04 <USBD_CDC_Init+0x1e8>)
 8008ece:	7819      	ldrb	r1, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f002 fb92 	bl	800b604 <USBD_LL_PrepareReceive>
 8008ee0:	e008      	b.n	8008ef4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ee2:	4b08      	ldr	r3, [pc, #32]	@ (8008f04 <USBD_CDC_Init+0x1e8>)
 8008ee4:	7819      	ldrb	r1, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008eec:	2340      	movs	r3, #64	@ 0x40
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f002 fb88 	bl	800b604 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000093 	.word	0x20000093
 8008f04:	20000094 	.word	0x20000094
 8008f08:	20000095 	.word	0x20000095

08008f0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008f18:	4b3a      	ldr	r3, [pc, #232]	@ (8009004 <USBD_CDC_DeInit+0xf8>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f002 faa7 	bl	800b472 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008f24:	4b37      	ldr	r3, [pc, #220]	@ (8009004 <USBD_CDC_DeInit+0xf8>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f003 020f 	and.w	r2, r3, #15
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	3324      	adds	r3, #36	@ 0x24
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008f3e:	4b32      	ldr	r3, [pc, #200]	@ (8009008 <USBD_CDC_DeInit+0xfc>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f002 fa94 	bl	800b472 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009008 <USBD_CDC_DeInit+0xfc>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	f003 020f 	and.w	r2, r3, #15
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	440b      	add	r3, r1
 8008f5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f62:	2200      	movs	r2, #0
 8008f64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008f66:	4b29      	ldr	r3, [pc, #164]	@ (800900c <USBD_CDC_DeInit+0x100>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f002 fa80 	bl	800b472 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008f72:	4b26      	ldr	r3, [pc, #152]	@ (800900c <USBD_CDC_DeInit+0x100>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f003 020f 	and.w	r2, r3, #15
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	440b      	add	r3, r1
 8008f86:	3324      	adds	r3, #36	@ 0x24
 8008f88:	2200      	movs	r2, #0
 8008f8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800900c <USBD_CDC_DeInit+0x100>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	3326      	adds	r3, #38	@ 0x26
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	32b0      	adds	r2, #176	@ 0xb0
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01f      	beq.n	8008ff8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	33b0      	adds	r3, #176	@ 0xb0
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	32b0      	adds	r2, #176	@ 0xb0
 8008fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f002 fb54 	bl	800b688 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	32b0      	adds	r2, #176	@ 0xb0
 8008fea:	2100      	movs	r1, #0
 8008fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000093 	.word	0x20000093
 8009008:	20000094 	.word	0x20000094
 800900c:	20000095 	.word	0x20000095

08009010 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	32b0      	adds	r2, #176	@ 0xb0
 8009024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009028:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	e0bf      	b.n	80091c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009048:	2b00      	cmp	r3, #0
 800904a:	d050      	beq.n	80090ee <USBD_CDC_Setup+0xde>
 800904c:	2b20      	cmp	r3, #32
 800904e:	f040 80af 	bne.w	80091b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	88db      	ldrh	r3, [r3, #6]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d03a      	beq.n	80090d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b25b      	sxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	da1b      	bge.n	800909c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	33b0      	adds	r3, #176	@ 0xb0
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800907a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	88d2      	ldrh	r2, [r2, #6]
 8009080:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88db      	ldrh	r3, [r3, #6]
 8009086:	2b07      	cmp	r3, #7
 8009088:	bf28      	it	cs
 800908a:	2307      	movcs	r3, #7
 800908c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	89fa      	ldrh	r2, [r7, #14]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 fd93 	bl	800abc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800909a:	e090      	b.n	80091be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	785a      	ldrb	r2, [r3, #1]
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80090ac:	d803      	bhi.n	80090b6 <USBD_CDC_Setup+0xa6>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	88db      	ldrh	r3, [r3, #6]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	e000      	b.n	80090b8 <USBD_CDC_Setup+0xa8>
 80090b6:	2240      	movs	r2, #64	@ 0x40
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80090be:	6939      	ldr	r1, [r7, #16]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80090c6:	461a      	mov	r2, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 fda5 	bl	800ac18 <USBD_CtlPrepareRx>
      break;
 80090ce:	e076      	b.n	80091be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	33b0      	adds	r3, #176	@ 0xb0
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	7850      	ldrb	r0, [r2, #1]
 80090e6:	2200      	movs	r2, #0
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	4798      	blx	r3
      break;
 80090ec:	e067      	b.n	80091be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	2b0b      	cmp	r3, #11
 80090f4:	d851      	bhi.n	800919a <USBD_CDC_Setup+0x18a>
 80090f6:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <USBD_CDC_Setup+0xec>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	0800912d 	.word	0x0800912d
 8009100:	080091a9 	.word	0x080091a9
 8009104:	0800919b 	.word	0x0800919b
 8009108:	0800919b 	.word	0x0800919b
 800910c:	0800919b 	.word	0x0800919b
 8009110:	0800919b 	.word	0x0800919b
 8009114:	0800919b 	.word	0x0800919b
 8009118:	0800919b 	.word	0x0800919b
 800911c:	0800919b 	.word	0x0800919b
 8009120:	0800919b 	.word	0x0800919b
 8009124:	08009157 	.word	0x08009157
 8009128:	08009181 	.word	0x08009181
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b03      	cmp	r3, #3
 8009136:	d107      	bne.n	8009148 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009138:	f107 030a 	add.w	r3, r7, #10
 800913c:	2202      	movs	r2, #2
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fd3d 	bl	800abc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009146:	e032      	b.n	80091ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 fcbb 	bl	800aac6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009150:	2303      	movs	r3, #3
 8009152:	75fb      	strb	r3, [r7, #23]
          break;
 8009154:	e02b      	b.n	80091ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b03      	cmp	r3, #3
 8009160:	d107      	bne.n	8009172 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009162:	f107 030d 	add.w	r3, r7, #13
 8009166:	2201      	movs	r2, #1
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fd28 	bl	800abc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009170:	e01d      	b.n	80091ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fca6 	bl	800aac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800917a:	2303      	movs	r3, #3
 800917c:	75fb      	strb	r3, [r7, #23]
          break;
 800917e:	e016      	b.n	80091ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b03      	cmp	r3, #3
 800918a:	d00f      	beq.n	80091ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 fc99 	bl	800aac6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009194:	2303      	movs	r3, #3
 8009196:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009198:	e008      	b.n	80091ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 fc92 	bl	800aac6 <USBD_CtlError>
          ret = USBD_FAIL;
 80091a2:	2303      	movs	r3, #3
 80091a4:	75fb      	strb	r3, [r7, #23]
          break;
 80091a6:	e002      	b.n	80091ae <USBD_CDC_Setup+0x19e>
          break;
 80091a8:	bf00      	nop
 80091aa:	e008      	b.n	80091be <USBD_CDC_Setup+0x1ae>
          break;
 80091ac:	bf00      	nop
      }
      break;
 80091ae:	e006      	b.n	80091be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 fc87 	bl	800aac6 <USBD_CtlError>
      ret = USBD_FAIL;
 80091b8:	2303      	movs	r3, #3
 80091ba:	75fb      	strb	r3, [r7, #23]
      break;
 80091bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	32b0      	adds	r2, #176	@ 0xb0
 80091e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e065      	b.n	80092be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	32b0      	adds	r2, #176	@ 0xb0
 80091fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009200:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009202:	78fb      	ldrb	r3, [r7, #3]
 8009204:	f003 020f 	and.w	r2, r3, #15
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	3318      	adds	r3, #24
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d02f      	beq.n	800927c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 020f 	and.w	r2, r3, #15
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	3318      	adds	r3, #24
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	f003 010f 	and.w	r1, r3, #15
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	460b      	mov	r3, r1
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	440b      	add	r3, r1
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4403      	add	r3, r0
 8009244:	331c      	adds	r3, #28
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	fbb2 f1f3 	udiv	r1, r2, r3
 800924c:	fb01 f303 	mul.w	r3, r1, r3
 8009250:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009252:	2b00      	cmp	r3, #0
 8009254:	d112      	bne.n	800927c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	f003 020f 	and.w	r2, r3, #15
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	3318      	adds	r3, #24
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800926e:	78f9      	ldrb	r1, [r7, #3]
 8009270:	2300      	movs	r3, #0
 8009272:	2200      	movs	r2, #0
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f002 f9a4 	bl	800b5c2 <USBD_LL_Transmit>
 800927a:	e01f      	b.n	80092bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	33b0      	adds	r3, #176	@ 0xb0
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d010      	beq.n	80092bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	33b0      	adds	r3, #176	@ 0xb0
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	32b0      	adds	r2, #176	@ 0xb0
 80092dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	32b0      	adds	r2, #176	@ 0xb0
 80092ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e01a      	b.n	800932e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f002 f9a2 	bl	800b646 <USBD_LL_GetRxDataSize>
 8009302:	4602      	mov	r2, r0
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	33b0      	adds	r3, #176	@ 0xb0
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009328:	4611      	mov	r1, r2
 800932a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	32b0      	adds	r2, #176	@ 0xb0
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	e024      	b.n	80093a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	33b0      	adds	r3, #176	@ 0xb0
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d019      	beq.n	80093a0 <USBD_CDC_EP0_RxReady+0x6a>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009372:	2bff      	cmp	r3, #255	@ 0xff
 8009374:	d014      	beq.n	80093a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	33b0      	adds	r3, #176	@ 0xb0
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800938e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009396:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	22ff      	movs	r2, #255	@ 0xff
 800939c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093b4:	2182      	movs	r1, #130	@ 0x82
 80093b6:	4818      	ldr	r0, [pc, #96]	@ (8009418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093b8:	f000 fd4f 	bl	8009e5a <USBD_GetEpDesc>
 80093bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093be:	2101      	movs	r1, #1
 80093c0:	4815      	ldr	r0, [pc, #84]	@ (8009418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093c2:	f000 fd4a 	bl	8009e5a <USBD_GetEpDesc>
 80093c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093c8:	2181      	movs	r1, #129	@ 0x81
 80093ca:	4813      	ldr	r0, [pc, #76]	@ (8009418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093cc:	f000 fd45 	bl	8009e5a <USBD_GetEpDesc>
 80093d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2210      	movs	r2, #16
 80093dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d006      	beq.n	80093f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093ec:	711a      	strb	r2, [r3, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d006      	beq.n	8009406 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009400:	711a      	strb	r2, [r3, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2243      	movs	r2, #67	@ 0x43
 800940a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800940c:	4b02      	ldr	r3, [pc, #8]	@ (8009418 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20000050 	.word	0x20000050

0800941c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009424:	2182      	movs	r1, #130	@ 0x82
 8009426:	4818      	ldr	r0, [pc, #96]	@ (8009488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009428:	f000 fd17 	bl	8009e5a <USBD_GetEpDesc>
 800942c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800942e:	2101      	movs	r1, #1
 8009430:	4815      	ldr	r0, [pc, #84]	@ (8009488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009432:	f000 fd12 	bl	8009e5a <USBD_GetEpDesc>
 8009436:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009438:	2181      	movs	r1, #129	@ 0x81
 800943a:	4813      	ldr	r0, [pc, #76]	@ (8009488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800943c:	f000 fd0d 	bl	8009e5a <USBD_GetEpDesc>
 8009440:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2210      	movs	r2, #16
 800944c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2200      	movs	r2, #0
 8009458:	711a      	strb	r2, [r3, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f042 0202 	orr.w	r2, r2, #2
 8009460:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d006      	beq.n	8009476 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	711a      	strb	r2, [r3, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f042 0202 	orr.w	r2, r2, #2
 8009474:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2243      	movs	r2, #67	@ 0x43
 800947a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800947c:	4b02      	ldr	r3, [pc, #8]	@ (8009488 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000050 	.word	0x20000050

0800948c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009494:	2182      	movs	r1, #130	@ 0x82
 8009496:	4818      	ldr	r0, [pc, #96]	@ (80094f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009498:	f000 fcdf 	bl	8009e5a <USBD_GetEpDesc>
 800949c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800949e:	2101      	movs	r1, #1
 80094a0:	4815      	ldr	r0, [pc, #84]	@ (80094f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094a2:	f000 fcda 	bl	8009e5a <USBD_GetEpDesc>
 80094a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094a8:	2181      	movs	r1, #129	@ 0x81
 80094aa:	4813      	ldr	r0, [pc, #76]	@ (80094f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094ac:	f000 fcd5 	bl	8009e5a <USBD_GetEpDesc>
 80094b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2210      	movs	r2, #16
 80094bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d006      	beq.n	80094d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094cc:	711a      	strb	r2, [r3, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d006      	beq.n	80094e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094e0:	711a      	strb	r2, [r3, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2243      	movs	r2, #67	@ 0x43
 80094ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094ec:	4b02      	ldr	r3, [pc, #8]	@ (80094f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000050 	.word	0x20000050

080094fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	220a      	movs	r2, #10
 8009508:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800950a:	4b03      	ldr	r3, [pc, #12]	@ (8009518 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	2000000c 	.word	0x2000000c

0800951c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	e009      	b.n	8009544 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	33b0      	adds	r3, #176	@ 0xb0
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	32b0      	adds	r2, #176	@ 0xb0
 8009566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009572:	2303      	movs	r3, #3
 8009574:	e008      	b.n	8009588 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	32b0      	adds	r2, #176	@ 0xb0
 80095a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e004      	b.n	80095c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	32b0      	adds	r2, #176	@ 0xb0
 80095e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80095e8:	2301      	movs	r3, #1
 80095ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e025      	b.n	8009642 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d11f      	bne.n	8009640 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2201      	movs	r2, #1
 8009604:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009608:	4b10      	ldr	r3, [pc, #64]	@ (800964c <USBD_CDC_TransmitPacket+0x7c>)
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 020f 	and.w	r2, r3, #15
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4403      	add	r3, r0
 8009622:	3318      	adds	r3, #24
 8009624:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009626:	4b09      	ldr	r3, [pc, #36]	@ (800964c <USBD_CDC_TransmitPacket+0x7c>)
 8009628:	7819      	ldrb	r1, [r3, #0]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 ffc3 	bl	800b5c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000093 	.word	0x20000093

08009650 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32b0      	adds	r2, #176	@ 0xb0
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	32b0      	adds	r2, #176	@ 0xb0
 8009672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800967a:	2303      	movs	r3, #3
 800967c:	e018      	b.n	80096b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	7c1b      	ldrb	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009686:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <USBD_CDC_ReceivePacket+0x68>)
 8009688:	7819      	ldrb	r1, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 ffb5 	bl	800b604 <USBD_LL_PrepareReceive>
 800969a:	e008      	b.n	80096ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800969c:	4b06      	ldr	r3, [pc, #24]	@ (80096b8 <USBD_CDC_ReceivePacket+0x68>)
 800969e:	7819      	ldrb	r1, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80096a6:	2340      	movs	r3, #64	@ 0x40
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 ffab 	bl	800b604 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20000094 	.word	0x20000094

080096bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e01f      	b.n	8009714 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	79fa      	ldrb	r2, [r7, #7]
 8009706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f001 fe25 	bl	800b358 <USBD_LL_Init>
 800970e:	4603      	mov	r3, r0
 8009710:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009712:	7dfb      	ldrb	r3, [r7, #23]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009730:	2303      	movs	r3, #3
 8009732:	e025      	b.n	8009780 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	32ae      	adds	r2, #174	@ 0xae
 8009746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00f      	beq.n	8009770 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	32ae      	adds	r2, #174	@ 0xae
 800975a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009760:	f107 020e 	add.w	r2, r7, #14
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	4602      	mov	r2, r0
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f001 fe2d 	bl	800b3f0 <USBD_LL_Start>
 8009796:	4603      	mov	r3, r0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	78fa      	ldrb	r2, [r7, #3]
 80097da:	4611      	mov	r1, r2
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	4611      	mov	r1, r2
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009814:	2303      	movs	r3, #3
 8009816:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	4618      	mov	r0, r3
 8009836:	f001 f90c 	bl	800aa52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009848:	461a      	mov	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009856:	f003 031f 	and.w	r3, r3, #31
 800985a:	2b02      	cmp	r3, #2
 800985c:	d01a      	beq.n	8009894 <USBD_LL_SetupStage+0x72>
 800985e:	2b02      	cmp	r3, #2
 8009860:	d822      	bhi.n	80098a8 <USBD_LL_SetupStage+0x86>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <USBD_LL_SetupStage+0x4a>
 8009866:	2b01      	cmp	r3, #1
 8009868:	d00a      	beq.n	8009880 <USBD_LL_SetupStage+0x5e>
 800986a:	e01d      	b.n	80098a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fb63 	bl	8009f40 <USBD_StdDevReq>
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]
      break;
 800987e:	e020      	b.n	80098c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fbcb 	bl	800a024 <USBD_StdItfReq>
 800988e:	4603      	mov	r3, r0
 8009890:	73fb      	strb	r3, [r7, #15]
      break;
 8009892:	e016      	b.n	80098c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fc2d 	bl	800a0fc <USBD_StdEPReq>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
      break;
 80098a6:	e00c      	b.n	80098c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 fdfa 	bl	800b4b0 <USBD_LL_StallEP>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]
      break;
 80098c0:	bf00      	nop
  }

  return ret;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	460b      	mov	r3, r1
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80098de:	7afb      	ldrb	r3, [r7, #11]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d16e      	bne.n	80099c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80098ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	f040 8098 	bne.w	8009a28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	429a      	cmp	r2, r3
 8009902:	d913      	bls.n	800992c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	1ad2      	subs	r2, r2, r3
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	4293      	cmp	r3, r2
 800991c:	bf28      	it	cs
 800991e:	4613      	movcs	r3, r2
 8009920:	461a      	mov	r2, r3
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f001 f994 	bl	800ac52 <USBD_CtlContinueRx>
 800992a:	e07d      	b.n	8009a28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	2b02      	cmp	r3, #2
 8009938:	d014      	beq.n	8009964 <USBD_LL_DataOutStage+0x98>
 800993a:	2b02      	cmp	r3, #2
 800993c:	d81d      	bhi.n	800997a <USBD_LL_DataOutStage+0xae>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <USBD_LL_DataOutStage+0x7c>
 8009942:	2b01      	cmp	r3, #1
 8009944:	d003      	beq.n	800994e <USBD_LL_DataOutStage+0x82>
 8009946:	e018      	b.n	800997a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	75bb      	strb	r3, [r7, #22]
            break;
 800994c:	e018      	b.n	8009980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009954:	b2db      	uxtb	r3, r3
 8009956:	4619      	mov	r1, r3
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fa64 	bl	8009e26 <USBD_CoreFindIF>
 800995e:	4603      	mov	r3, r0
 8009960:	75bb      	strb	r3, [r7, #22]
            break;
 8009962:	e00d      	b.n	8009980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800996a:	b2db      	uxtb	r3, r3
 800996c:	4619      	mov	r1, r3
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fa66 	bl	8009e40 <USBD_CoreFindEP>
 8009974:	4603      	mov	r3, r0
 8009976:	75bb      	strb	r3, [r7, #22]
            break;
 8009978:	e002      	b.n	8009980 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	75bb      	strb	r3, [r7, #22]
            break;
 800997e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009980:	7dbb      	ldrb	r3, [r7, #22]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d119      	bne.n	80099ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b03      	cmp	r3, #3
 8009990:	d113      	bne.n	80099ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009992:	7dba      	ldrb	r2, [r7, #22]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	32ae      	adds	r2, #174	@ 0xae
 8009998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00b      	beq.n	80099ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80099a2:	7dba      	ldrb	r2, [r7, #22]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80099aa:	7dba      	ldrb	r2, [r7, #22]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	32ae      	adds	r2, #174	@ 0xae
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f001 f95a 	bl	800ac74 <USBD_CtlSendStatus>
 80099c0:	e032      	b.n	8009a28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	4619      	mov	r1, r3
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fa37 	bl	8009e40 <USBD_CoreFindEP>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099d6:	7dbb      	ldrb	r3, [r7, #22]
 80099d8:	2bff      	cmp	r3, #255	@ 0xff
 80099da:	d025      	beq.n	8009a28 <USBD_LL_DataOutStage+0x15c>
 80099dc:	7dbb      	ldrb	r3, [r7, #22]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d122      	bne.n	8009a28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d117      	bne.n	8009a1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80099ee:	7dba      	ldrb	r2, [r7, #22]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	32ae      	adds	r2, #174	@ 0xae
 80099f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00f      	beq.n	8009a1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80099fe:	7dba      	ldrb	r2, [r7, #22]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009a06:	7dba      	ldrb	r2, [r7, #22]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	32ae      	adds	r2, #174	@ 0xae
 8009a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	7afa      	ldrb	r2, [r7, #11]
 8009a14:	4611      	mov	r1, r2
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	4798      	blx	r3
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	e000      	b.n	8009a2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b086      	sub	sp, #24
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d16f      	bne.n	8009b26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3314      	adds	r3, #20
 8009a4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d15a      	bne.n	8009b0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d914      	bls.n	8009a8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	1ad2      	subs	r2, r2, r3
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	461a      	mov	r2, r3
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f001 f8bc 	bl	800abf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a7e:	2300      	movs	r3, #0
 8009a80:	2200      	movs	r2, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f001 fdbd 	bl	800b604 <USBD_LL_PrepareReceive>
 8009a8a:	e03f      	b.n	8009b0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d11c      	bne.n	8009ad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d316      	bcc.n	8009ad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d20f      	bcs.n	8009ad2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f001 f89d 	bl	800abf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2100      	movs	r1, #0
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f001 fd9a 	bl	800b604 <USBD_LL_PrepareReceive>
 8009ad0:	e01c      	b.n	8009b0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d10f      	bne.n	8009afe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d009      	beq.n	8009afe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009afe:	2180      	movs	r1, #128	@ 0x80
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f001 fcd5 	bl	800b4b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f001 f8c7 	bl	800ac9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d03a      	beq.n	8009b8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fe42 	bl	80097a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009b24:	e032      	b.n	8009b8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009b26:	7afb      	ldrb	r3, [r7, #11]
 8009b28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 f985 	bl	8009e40 <USBD_CoreFindEP>
 8009b36:	4603      	mov	r3, r0
 8009b38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	2bff      	cmp	r3, #255	@ 0xff
 8009b3e:	d025      	beq.n	8009b8c <USBD_LL_DataInStage+0x15a>
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d122      	bne.n	8009b8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d11c      	bne.n	8009b8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009b52:	7dfa      	ldrb	r2, [r7, #23]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	32ae      	adds	r2, #174	@ 0xae
 8009b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d014      	beq.n	8009b8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009b62:	7dfa      	ldrb	r2, [r7, #23]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009b6a:	7dfa      	ldrb	r2, [r7, #23]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	32ae      	adds	r2, #174	@ 0xae
 8009b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	7afa      	ldrb	r2, [r7, #11]
 8009b78:	4611      	mov	r1, r2
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	4798      	blx	r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009b82:	7dbb      	ldrb	r3, [r7, #22]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009b88:	7dbb      	ldrb	r3, [r7, #22]
 8009b8a:	e000      	b.n	8009b8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d014      	beq.n	8009bfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00e      	beq.n	8009bfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	6852      	ldr	r2, [r2, #4]
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	4611      	mov	r1, r2
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	4798      	blx	r3
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bfc:	2340      	movs	r3, #64	@ 0x40
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2100      	movs	r1, #0
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 fc0f 	bl	800b426 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2240      	movs	r2, #64	@ 0x40
 8009c14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c18:	2340      	movs	r3, #64	@ 0x40
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2180      	movs	r1, #128	@ 0x80
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 fc01 	bl	800b426 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2240      	movs	r2, #64	@ 0x40
 8009c2e:	621a      	str	r2, [r3, #32]

  return ret;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	78fa      	ldrb	r2, [r7, #3]
 8009c4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d006      	beq.n	8009c7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2204      	movs	r2, #4
 8009c80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d106      	bne.n	8009cb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d110      	bne.n	8009cf8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	32ae      	adds	r2, #174	@ 0xae
 8009d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e01c      	b.n	8009d5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d115      	bne.n	8009d5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	32ae      	adds	r2, #174	@ 0xae
 8009d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00b      	beq.n	8009d5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	32ae      	adds	r2, #174	@ 0xae
 8009d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	78fa      	ldrb	r2, [r7, #3]
 8009d56:	4611      	mov	r1, r2
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	32ae      	adds	r2, #174	@ 0xae
 8009d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e01c      	b.n	8009dc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d115      	bne.n	8009dc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	32ae      	adds	r2, #174	@ 0xae
 8009d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	32ae      	adds	r2, #174	@ 0xae
 8009db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00e      	beq.n	8009e1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6852      	ldr	r2, [r2, #4]
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	4798      	blx	r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009e32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009e4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b086      	sub	sp, #24
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	885b      	ldrh	r3, [r3, #2]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	7812      	ldrb	r2, [r2, #0]
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d91f      	bls.n	8009ec0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e86:	e013      	b.n	8009eb0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e88:	f107 030a 	add.w	r3, r7, #10
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6978      	ldr	r0, [r7, #20]
 8009e90:	f000 f81b 	bl	8009eca <USBD_GetNextDesc>
 8009e94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d108      	bne.n	8009eb0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	789b      	ldrb	r3, [r3, #2]
 8009ea6:	78fa      	ldrb	r2, [r7, #3]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d008      	beq.n	8009ebe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009eac:	2300      	movs	r3, #0
 8009eae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	885b      	ldrh	r3, [r3, #2]
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	897b      	ldrh	r3, [r7, #10]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d8e5      	bhi.n	8009e88 <USBD_GetEpDesc+0x2e>
 8009ebc:	e000      	b.n	8009ec0 <USBD_GetEpDesc+0x66>
          break;
 8009ebe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009ec0:	693b      	ldr	r3, [r7, #16]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b085      	sub	sp, #20
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	461a      	mov	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b087      	sub	sp, #28
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	3301      	adds	r3, #1
 8009f18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f20:	8a3b      	ldrh	r3, [r7, #16]
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	b21a      	sxth	r2, r3
 8009f26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	b21b      	sxth	r3, r3
 8009f2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009f30:	89fb      	ldrh	r3, [r7, #14]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f56:	2b40      	cmp	r3, #64	@ 0x40
 8009f58:	d005      	beq.n	8009f66 <USBD_StdDevReq+0x26>
 8009f5a:	2b40      	cmp	r3, #64	@ 0x40
 8009f5c:	d857      	bhi.n	800a00e <USBD_StdDevReq+0xce>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00f      	beq.n	8009f82 <USBD_StdDevReq+0x42>
 8009f62:	2b20      	cmp	r3, #32
 8009f64:	d153      	bne.n	800a00e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	32ae      	adds	r2, #174	@ 0xae
 8009f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	4798      	blx	r3
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f80:	e04a      	b.n	800a018 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	d83b      	bhi.n	800a002 <USBD_StdDevReq+0xc2>
 8009f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f90 <USBD_StdDevReq+0x50>)
 8009f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f90:	08009fe5 	.word	0x08009fe5
 8009f94:	08009ff9 	.word	0x08009ff9
 8009f98:	0800a003 	.word	0x0800a003
 8009f9c:	08009fef 	.word	0x08009fef
 8009fa0:	0800a003 	.word	0x0800a003
 8009fa4:	08009fc3 	.word	0x08009fc3
 8009fa8:	08009fb9 	.word	0x08009fb9
 8009fac:	0800a003 	.word	0x0800a003
 8009fb0:	08009fdb 	.word	0x08009fdb
 8009fb4:	08009fcd 	.word	0x08009fcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa3c 	bl	800a438 <USBD_GetDescriptor>
          break;
 8009fc0:	e024      	b.n	800a00c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fba1 	bl	800a70c <USBD_SetAddress>
          break;
 8009fca:	e01f      	b.n	800a00c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fbe0 	bl	800a794 <USBD_SetConfig>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
          break;
 8009fd8:	e018      	b.n	800a00c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fc83 	bl	800a8e8 <USBD_GetConfig>
          break;
 8009fe2:	e013      	b.n	800a00c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fcb4 	bl	800a954 <USBD_GetStatus>
          break;
 8009fec:	e00e      	b.n	800a00c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fce3 	bl	800a9bc <USBD_SetFeature>
          break;
 8009ff6:	e009      	b.n	800a00c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fd07 	bl	800aa0e <USBD_ClrFeature>
          break;
 800a000:	e004      	b.n	800a00c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fd5e 	bl	800aac6 <USBD_CtlError>
          break;
 800a00a:	bf00      	nop
      }
      break;
 800a00c:	e004      	b.n	800a018 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fd58 	bl	800aac6 <USBD_CtlError>
      break;
 800a016:	bf00      	nop
  }

  return ret;
 800a018:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop

0800a024 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a03a:	2b40      	cmp	r3, #64	@ 0x40
 800a03c:	d005      	beq.n	800a04a <USBD_StdItfReq+0x26>
 800a03e:	2b40      	cmp	r3, #64	@ 0x40
 800a040:	d852      	bhi.n	800a0e8 <USBD_StdItfReq+0xc4>
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <USBD_StdItfReq+0x26>
 800a046:	2b20      	cmp	r3, #32
 800a048:	d14e      	bne.n	800a0e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a050:	b2db      	uxtb	r3, r3
 800a052:	3b01      	subs	r3, #1
 800a054:	2b02      	cmp	r3, #2
 800a056:	d840      	bhi.n	800a0da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	889b      	ldrh	r3, [r3, #4]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d836      	bhi.n	800a0d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	889b      	ldrh	r3, [r3, #4]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fedb 	bl	8009e26 <USBD_CoreFindIF>
 800a070:	4603      	mov	r3, r0
 800a072:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	2bff      	cmp	r3, #255	@ 0xff
 800a078:	d01d      	beq.n	800a0b6 <USBD_StdItfReq+0x92>
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d11a      	bne.n	800a0b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a080:	7bba      	ldrb	r2, [r7, #14]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	32ae      	adds	r2, #174	@ 0xae
 800a086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00f      	beq.n	800a0b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a090:	7bba      	ldrb	r2, [r7, #14]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a098:	7bba      	ldrb	r2, [r7, #14]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	32ae      	adds	r2, #174	@ 0xae
 800a09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	4798      	blx	r3
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a0ae:	e004      	b.n	800a0ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a0b4:	e001      	b.n	800a0ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	88db      	ldrh	r3, [r3, #6]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d110      	bne.n	800a0e4 <USBD_StdItfReq+0xc0>
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10d      	bne.n	800a0e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fdd3 	bl	800ac74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a0ce:	e009      	b.n	800a0e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fcf7 	bl	800aac6 <USBD_CtlError>
          break;
 800a0d8:	e004      	b.n	800a0e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fcf2 	bl	800aac6 <USBD_CtlError>
          break;
 800a0e2:	e000      	b.n	800a0e6 <USBD_StdItfReq+0xc2>
          break;
 800a0e4:	bf00      	nop
      }
      break;
 800a0e6:	e004      	b.n	800a0f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fceb 	bl	800aac6 <USBD_CtlError>
      break;
 800a0f0:	bf00      	nop
  }

  return ret;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	889b      	ldrh	r3, [r3, #4]
 800a10e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a118:	2b40      	cmp	r3, #64	@ 0x40
 800a11a:	d007      	beq.n	800a12c <USBD_StdEPReq+0x30>
 800a11c:	2b40      	cmp	r3, #64	@ 0x40
 800a11e:	f200 817f 	bhi.w	800a420 <USBD_StdEPReq+0x324>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d02a      	beq.n	800a17c <USBD_StdEPReq+0x80>
 800a126:	2b20      	cmp	r3, #32
 800a128:	f040 817a 	bne.w	800a420 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7ff fe85 	bl	8009e40 <USBD_CoreFindEP>
 800a136:	4603      	mov	r3, r0
 800a138:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a13a:	7b7b      	ldrb	r3, [r7, #13]
 800a13c:	2bff      	cmp	r3, #255	@ 0xff
 800a13e:	f000 8174 	beq.w	800a42a <USBD_StdEPReq+0x32e>
 800a142:	7b7b      	ldrb	r3, [r7, #13]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f040 8170 	bne.w	800a42a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a14a:	7b7a      	ldrb	r2, [r7, #13]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a152:	7b7a      	ldrb	r2, [r7, #13]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	32ae      	adds	r2, #174	@ 0xae
 800a158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 8163 	beq.w	800a42a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a164:	7b7a      	ldrb	r2, [r7, #13]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	32ae      	adds	r2, #174	@ 0xae
 800a16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a17a:	e156      	b.n	800a42a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	2b03      	cmp	r3, #3
 800a182:	d008      	beq.n	800a196 <USBD_StdEPReq+0x9a>
 800a184:	2b03      	cmp	r3, #3
 800a186:	f300 8145 	bgt.w	800a414 <USBD_StdEPReq+0x318>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f000 809b 	beq.w	800a2c6 <USBD_StdEPReq+0x1ca>
 800a190:	2b01      	cmp	r3, #1
 800a192:	d03c      	beq.n	800a20e <USBD_StdEPReq+0x112>
 800a194:	e13e      	b.n	800a414 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d002      	beq.n	800a1a8 <USBD_StdEPReq+0xac>
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d016      	beq.n	800a1d4 <USBD_StdEPReq+0xd8>
 800a1a6:	e02c      	b.n	800a202 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00d      	beq.n	800a1ca <USBD_StdEPReq+0xce>
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	2b80      	cmp	r3, #128	@ 0x80
 800a1b2:	d00a      	beq.n	800a1ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 f979 	bl	800b4b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1be:	2180      	movs	r1, #128	@ 0x80
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 f975 	bl	800b4b0 <USBD_LL_StallEP>
 800a1c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1c8:	e020      	b.n	800a20c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fc7a 	bl	800aac6 <USBD_CtlError>
              break;
 800a1d2:	e01b      	b.n	800a20c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	885b      	ldrh	r3, [r3, #2]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10e      	bne.n	800a1fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00b      	beq.n	800a1fa <USBD_StdEPReq+0xfe>
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	2b80      	cmp	r3, #128	@ 0x80
 800a1e6:	d008      	beq.n	800a1fa <USBD_StdEPReq+0xfe>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	88db      	ldrh	r3, [r3, #6]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d104      	bne.n	800a1fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f001 f95b 	bl	800b4b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fd3a 	bl	800ac74 <USBD_CtlSendStatus>

              break;
 800a200:	e004      	b.n	800a20c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fc5e 	bl	800aac6 <USBD_CtlError>
              break;
 800a20a:	bf00      	nop
          }
          break;
 800a20c:	e107      	b.n	800a41e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b02      	cmp	r3, #2
 800a218:	d002      	beq.n	800a220 <USBD_StdEPReq+0x124>
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d016      	beq.n	800a24c <USBD_StdEPReq+0x150>
 800a21e:	e04b      	b.n	800a2b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00d      	beq.n	800a242 <USBD_StdEPReq+0x146>
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	2b80      	cmp	r3, #128	@ 0x80
 800a22a:	d00a      	beq.n	800a242 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f001 f93d 	bl	800b4b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a236:	2180      	movs	r1, #128	@ 0x80
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f001 f939 	bl	800b4b0 <USBD_LL_StallEP>
 800a23e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a240:	e040      	b.n	800a2c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fc3e 	bl	800aac6 <USBD_CtlError>
              break;
 800a24a:	e03b      	b.n	800a2c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	885b      	ldrh	r3, [r3, #2]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d136      	bne.n	800a2c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 f943 	bl	800b4ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fd03 	bl	800ac74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff fde4 	bl	8009e40 <USBD_CoreFindEP>
 800a278:	4603      	mov	r3, r0
 800a27a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a27c:	7b7b      	ldrb	r3, [r7, #13]
 800a27e:	2bff      	cmp	r3, #255	@ 0xff
 800a280:	d01f      	beq.n	800a2c2 <USBD_StdEPReq+0x1c6>
 800a282:	7b7b      	ldrb	r3, [r7, #13]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d11c      	bne.n	800a2c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a288:	7b7a      	ldrb	r2, [r7, #13]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a290:	7b7a      	ldrb	r2, [r7, #13]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	32ae      	adds	r2, #174	@ 0xae
 800a296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d010      	beq.n	800a2c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a2a0:	7b7a      	ldrb	r2, [r7, #13]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	32ae      	adds	r2, #174	@ 0xae
 800a2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	4798      	blx	r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a2b6:	e004      	b.n	800a2c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fc03 	bl	800aac6 <USBD_CtlError>
              break;
 800a2c0:	e000      	b.n	800a2c4 <USBD_StdEPReq+0x1c8>
              break;
 800a2c2:	bf00      	nop
          }
          break;
 800a2c4:	e0ab      	b.n	800a41e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d002      	beq.n	800a2d8 <USBD_StdEPReq+0x1dc>
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d032      	beq.n	800a33c <USBD_StdEPReq+0x240>
 800a2d6:	e097      	b.n	800a408 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d007      	beq.n	800a2ee <USBD_StdEPReq+0x1f2>
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b80      	cmp	r3, #128	@ 0x80
 800a2e2:	d004      	beq.n	800a2ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fbed 	bl	800aac6 <USBD_CtlError>
                break;
 800a2ec:	e091      	b.n	800a412 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	da0b      	bge.n	800a30e <USBD_StdEPReq+0x212>
 800a2f6:	7bbb      	ldrb	r3, [r7, #14]
 800a2f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	3310      	adds	r3, #16
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	4413      	add	r3, r2
 800a30a:	3304      	adds	r3, #4
 800a30c:	e00b      	b.n	800a326 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a314:	4613      	mov	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	4413      	add	r3, r2
 800a324:	3304      	adds	r3, #4
 800a326:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2202      	movs	r2, #2
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fc43 	bl	800abc0 <USBD_CtlSendData>
              break;
 800a33a:	e06a      	b.n	800a412 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a33c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a340:	2b00      	cmp	r3, #0
 800a342:	da11      	bge.n	800a368 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	f003 020f 	and.w	r2, r3, #15
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	440b      	add	r3, r1
 800a356:	3324      	adds	r3, #36	@ 0x24
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d117      	bne.n	800a38e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fbb0 	bl	800aac6 <USBD_CtlError>
                  break;
 800a366:	e054      	b.n	800a412 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a368:	7bbb      	ldrb	r3, [r7, #14]
 800a36a:	f003 020f 	and.w	r2, r3, #15
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	440b      	add	r3, r1
 800a37a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d104      	bne.n	800a38e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fb9d 	bl	800aac6 <USBD_CtlError>
                  break;
 800a38c:	e041      	b.n	800a412 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a38e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a392:	2b00      	cmp	r3, #0
 800a394:	da0b      	bge.n	800a3ae <USBD_StdEPReq+0x2b2>
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	3310      	adds	r3, #16
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	e00b      	b.n	800a3c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <USBD_StdEPReq+0x2d8>
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	2b80      	cmp	r3, #128	@ 0x80
 800a3d2:	d103      	bne.n	800a3dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	e00e      	b.n	800a3fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a3dc:	7bbb      	ldrb	r3, [r7, #14]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f001 f8a3 	bl	800b52c <USBD_LL_IsStallEP>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d003      	beq.n	800a3f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	e002      	b.n	800a3fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fbdd 	bl	800abc0 <USBD_CtlSendData>
              break;
 800a406:	e004      	b.n	800a412 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fb5b 	bl	800aac6 <USBD_CtlError>
              break;
 800a410:	bf00      	nop
          }
          break;
 800a412:	e004      	b.n	800a41e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fb55 	bl	800aac6 <USBD_CtlError>
          break;
 800a41c:	bf00      	nop
      }
      break;
 800a41e:	e005      	b.n	800a42c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fb4f 	bl	800aac6 <USBD_CtlError>
      break;
 800a428:	e000      	b.n	800a42c <USBD_StdEPReq+0x330>
      break;
 800a42a:	bf00      	nop
  }

  return ret;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	885b      	ldrh	r3, [r3, #2]
 800a452:	0a1b      	lsrs	r3, r3, #8
 800a454:	b29b      	uxth	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	2b06      	cmp	r3, #6
 800a45a:	f200 8128 	bhi.w	800a6ae <USBD_GetDescriptor+0x276>
 800a45e:	a201      	add	r2, pc, #4	@ (adr r2, 800a464 <USBD_GetDescriptor+0x2c>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a481 	.word	0x0800a481
 800a468:	0800a499 	.word	0x0800a499
 800a46c:	0800a4d9 	.word	0x0800a4d9
 800a470:	0800a6af 	.word	0x0800a6af
 800a474:	0800a6af 	.word	0x0800a6af
 800a478:	0800a64f 	.word	0x0800a64f
 800a47c:	0800a67b 	.word	0x0800a67b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	7c12      	ldrb	r2, [r2, #16]
 800a48c:	f107 0108 	add.w	r1, r7, #8
 800a490:	4610      	mov	r0, r2
 800a492:	4798      	blx	r3
 800a494:	60f8      	str	r0, [r7, #12]
      break;
 800a496:	e112      	b.n	800a6be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	7c1b      	ldrb	r3, [r3, #16]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10d      	bne.n	800a4bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a8:	f107 0208 	add.w	r2, r7, #8
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	4798      	blx	r3
 800a4b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a4ba:	e100      	b.n	800a6be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c4:	f107 0208 	add.w	r2, r7, #8
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	4798      	blx	r3
 800a4cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	701a      	strb	r2, [r3, #0]
      break;
 800a4d6:	e0f2      	b.n	800a6be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	885b      	ldrh	r3, [r3, #2]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b05      	cmp	r3, #5
 800a4e0:	f200 80ac 	bhi.w	800a63c <USBD_GetDescriptor+0x204>
 800a4e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ec <USBD_GetDescriptor+0xb4>)
 800a4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ea:	bf00      	nop
 800a4ec:	0800a505 	.word	0x0800a505
 800a4f0:	0800a539 	.word	0x0800a539
 800a4f4:	0800a56d 	.word	0x0800a56d
 800a4f8:	0800a5a1 	.word	0x0800a5a1
 800a4fc:	0800a5d5 	.word	0x0800a5d5
 800a500:	0800a609 	.word	0x0800a609
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	7c12      	ldrb	r2, [r2, #16]
 800a51c:	f107 0108 	add.w	r1, r7, #8
 800a520:	4610      	mov	r0, r2
 800a522:	4798      	blx	r3
 800a524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a526:	e091      	b.n	800a64c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 facb 	bl	800aac6 <USBD_CtlError>
            err++;
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	3301      	adds	r3, #1
 800a534:	72fb      	strb	r3, [r7, #11]
          break;
 800a536:	e089      	b.n	800a64c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	7c12      	ldrb	r2, [r2, #16]
 800a550:	f107 0108 	add.w	r1, r7, #8
 800a554:	4610      	mov	r0, r2
 800a556:	4798      	blx	r3
 800a558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a55a:	e077      	b.n	800a64c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fab1 	bl	800aac6 <USBD_CtlError>
            err++;
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	3301      	adds	r3, #1
 800a568:	72fb      	strb	r3, [r7, #11]
          break;
 800a56a:	e06f      	b.n	800a64c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	7c12      	ldrb	r2, [r2, #16]
 800a584:	f107 0108 	add.w	r1, r7, #8
 800a588:	4610      	mov	r0, r2
 800a58a:	4798      	blx	r3
 800a58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a58e:	e05d      	b.n	800a64c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa97 	bl	800aac6 <USBD_CtlError>
            err++;
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	3301      	adds	r3, #1
 800a59c:	72fb      	strb	r3, [r7, #11]
          break;
 800a59e:	e055      	b.n	800a64c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7c12      	ldrb	r2, [r2, #16]
 800a5b8:	f107 0108 	add.w	r1, r7, #8
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c2:	e043      	b.n	800a64c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa7d 	bl	800aac6 <USBD_CtlError>
            err++;
 800a5cc:	7afb      	ldrb	r3, [r7, #11]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d2:	e03b      	b.n	800a64c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	7c12      	ldrb	r2, [r2, #16]
 800a5ec:	f107 0108 	add.w	r1, r7, #8
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4798      	blx	r3
 800a5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5f6:	e029      	b.n	800a64c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fa63 	bl	800aac6 <USBD_CtlError>
            err++;
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	3301      	adds	r3, #1
 800a604:	72fb      	strb	r3, [r7, #11]
          break;
 800a606:	e021      	b.n	800a64c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00b      	beq.n	800a62c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	7c12      	ldrb	r2, [r2, #16]
 800a620:	f107 0108 	add.w	r1, r7, #8
 800a624:	4610      	mov	r0, r2
 800a626:	4798      	blx	r3
 800a628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62a:	e00f      	b.n	800a64c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fa49 	bl	800aac6 <USBD_CtlError>
            err++;
 800a634:	7afb      	ldrb	r3, [r7, #11]
 800a636:	3301      	adds	r3, #1
 800a638:	72fb      	strb	r3, [r7, #11]
          break;
 800a63a:	e007      	b.n	800a64c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fa41 	bl	800aac6 <USBD_CtlError>
          err++;
 800a644:	7afb      	ldrb	r3, [r7, #11]
 800a646:	3301      	adds	r3, #1
 800a648:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a64a:	bf00      	nop
      }
      break;
 800a64c:	e037      	b.n	800a6be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	7c1b      	ldrb	r3, [r3, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d109      	bne.n	800a66a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65e:	f107 0208 	add.w	r2, r7, #8
 800a662:	4610      	mov	r0, r2
 800a664:	4798      	blx	r3
 800a666:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a668:	e029      	b.n	800a6be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fa2a 	bl	800aac6 <USBD_CtlError>
        err++;
 800a672:	7afb      	ldrb	r3, [r7, #11]
 800a674:	3301      	adds	r3, #1
 800a676:	72fb      	strb	r3, [r7, #11]
      break;
 800a678:	e021      	b.n	800a6be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	7c1b      	ldrb	r3, [r3, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10d      	bne.n	800a69e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a68a:	f107 0208 	add.w	r2, r7, #8
 800a68e:	4610      	mov	r0, r2
 800a690:	4798      	blx	r3
 800a692:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3301      	adds	r3, #1
 800a698:	2207      	movs	r2, #7
 800a69a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a69c:	e00f      	b.n	800a6be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fa10 	bl	800aac6 <USBD_CtlError>
        err++;
 800a6a6:	7afb      	ldrb	r3, [r7, #11]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a6ac:	e007      	b.n	800a6be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fa08 	bl	800aac6 <USBD_CtlError>
      err++;
 800a6b6:	7afb      	ldrb	r3, [r7, #11]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a6bc:	bf00      	nop
  }

  if (err != 0U)
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d11e      	bne.n	800a702 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	88db      	ldrh	r3, [r3, #6]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d016      	beq.n	800a6fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a6cc:	893b      	ldrh	r3, [r7, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00e      	beq.n	800a6f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	88da      	ldrh	r2, [r3, #6]
 800a6d6:	893b      	ldrh	r3, [r7, #8]
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	bf28      	it	cs
 800a6dc:	4613      	movcs	r3, r2
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6e2:	893b      	ldrh	r3, [r7, #8]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fa69 	bl	800abc0 <USBD_CtlSendData>
 800a6ee:	e009      	b.n	800a704 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f9e7 	bl	800aac6 <USBD_CtlError>
 800a6f8:	e004      	b.n	800a704 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 faba 	bl	800ac74 <USBD_CtlSendStatus>
 800a700:	e000      	b.n	800a704 <USBD_GetDescriptor+0x2cc>
    return;
 800a702:	bf00      	nop
  }
}
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop

0800a70c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	889b      	ldrh	r3, [r3, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d131      	bne.n	800a782 <USBD_SetAddress+0x76>
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	88db      	ldrh	r3, [r3, #6]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d12d      	bne.n	800a782 <USBD_SetAddress+0x76>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	885b      	ldrh	r3, [r3, #2]
 800a72a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a72c:	d829      	bhi.n	800a782 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	885b      	ldrh	r3, [r3, #2]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b03      	cmp	r3, #3
 800a744:	d104      	bne.n	800a750 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f9bc 	bl	800aac6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74e:	e01d      	b.n	800a78c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7bfa      	ldrb	r2, [r7, #15]
 800a754:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 ff11 	bl	800b584 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fa86 	bl	800ac74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d004      	beq.n	800a778 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2202      	movs	r2, #2
 800a772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a776:	e009      	b.n	800a78c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a780:	e004      	b.n	800a78c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f99e 	bl	800aac6 <USBD_CtlError>
  }
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	885b      	ldrh	r3, [r3, #2]
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	4b4e      	ldr	r3, [pc, #312]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a7aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d905      	bls.n	800a7c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f985 	bl	800aac6 <USBD_CtlError>
    return USBD_FAIL;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e08c      	b.n	800a8da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d002      	beq.n	800a7d2 <USBD_SetConfig+0x3e>
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d029      	beq.n	800a824 <USBD_SetConfig+0x90>
 800a7d0:	e075      	b.n	800a8be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7d2:	4b44      	ldr	r3, [pc, #272]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d020      	beq.n	800a81c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a7da:	4b42      	ldr	r3, [pc, #264]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7e4:	4b3f      	ldr	r3, [pc, #252]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7fe ffe3 	bl	80097b6 <USBD_SetClassConfig>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d008      	beq.n	800a80c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f962 	bl	800aac6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a80a:	e065      	b.n	800a8d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fa31 	bl	800ac74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2203      	movs	r2, #3
 800a816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a81a:	e05d      	b.n	800a8d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fa29 	bl	800ac74 <USBD_CtlSendStatus>
      break;
 800a822:	e059      	b.n	800a8d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a824:	4b2f      	ldr	r3, [pc, #188]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d112      	bne.n	800a852 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a834:	4b2b      	ldr	r3, [pc, #172]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a83e:	4b29      	ldr	r3, [pc, #164]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7fe ffd2 	bl	80097ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fa12 	bl	800ac74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a850:	e042      	b.n	800a8d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a852:	4b24      	ldr	r3, [pc, #144]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d02a      	beq.n	800a8b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7fe ffc0 	bl	80097ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a86e:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a878:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7fe ff99 	bl	80097b6 <USBD_SetClassConfig>
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00f      	beq.n	800a8ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f918 	bl	800aac6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7fe ffa5 	bl	80097ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a8ac:	e014      	b.n	800a8d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f9e0 	bl	800ac74 <USBD_CtlSendStatus>
      break;
 800a8b4:	e010      	b.n	800a8d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f9dc 	bl	800ac74 <USBD_CtlSendStatus>
      break;
 800a8bc:	e00c      	b.n	800a8d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f900 	bl	800aac6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8c6:	4b07      	ldr	r3, [pc, #28]	@ (800a8e4 <USBD_SetConfig+0x150>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7fe ff8e 	bl	80097ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d6:	bf00      	nop
  }

  return ret;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000518 	.word	0x20000518

0800a8e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	88db      	ldrh	r3, [r3, #6]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d004      	beq.n	800a904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f8e2 	bl	800aac6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a902:	e023      	b.n	800a94c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	dc02      	bgt.n	800a916 <USBD_GetConfig+0x2e>
 800a910:	2b00      	cmp	r3, #0
 800a912:	dc03      	bgt.n	800a91c <USBD_GetConfig+0x34>
 800a914:	e015      	b.n	800a942 <USBD_GetConfig+0x5a>
 800a916:	2b03      	cmp	r3, #3
 800a918:	d00b      	beq.n	800a932 <USBD_GetConfig+0x4a>
 800a91a:	e012      	b.n	800a942 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3308      	adds	r3, #8
 800a926:	2201      	movs	r2, #1
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f948 	bl	800abc0 <USBD_CtlSendData>
        break;
 800a930:	e00c      	b.n	800a94c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	3304      	adds	r3, #4
 800a936:	2201      	movs	r2, #1
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f940 	bl	800abc0 <USBD_CtlSendData>
        break;
 800a940:	e004      	b.n	800a94c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f8be 	bl	800aac6 <USBD_CtlError>
        break;
 800a94a:	bf00      	nop
}
 800a94c:	bf00      	nop
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a964:	b2db      	uxtb	r3, r3
 800a966:	3b01      	subs	r3, #1
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d81e      	bhi.n	800a9aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	88db      	ldrh	r3, [r3, #6]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d004      	beq.n	800a97e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f8a5 	bl	800aac6 <USBD_CtlError>
        break;
 800a97c:	e01a      	b.n	800a9b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d005      	beq.n	800a99a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	f043 0202 	orr.w	r2, r3, #2
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	330c      	adds	r3, #12
 800a99e:	2202      	movs	r2, #2
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f90c 	bl	800abc0 <USBD_CtlSendData>
      break;
 800a9a8:	e004      	b.n	800a9b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f88a 	bl	800aac6 <USBD_CtlError>
      break;
 800a9b2:	bf00      	nop
  }
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	885b      	ldrh	r3, [r3, #2]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d107      	bne.n	800a9de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f94c 	bl	800ac74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a9dc:	e013      	b.n	800aa06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	885b      	ldrh	r3, [r3, #2]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d10b      	bne.n	800a9fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	889b      	ldrh	r3, [r3, #4]
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f93c 	bl	800ac74 <USBD_CtlSendStatus>
}
 800a9fc:	e003      	b.n	800aa06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f860 	bl	800aac6 <USBD_CtlError>
}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	3b01      	subs	r3, #1
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d80b      	bhi.n	800aa3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	885b      	ldrh	r3, [r3, #2]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d10c      	bne.n	800aa48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f91c 	bl	800ac74 <USBD_CtlSendStatus>
      }
      break;
 800aa3c:	e004      	b.n	800aa48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f840 	bl	800aac6 <USBD_CtlError>
      break;
 800aa46:	e000      	b.n	800aa4a <USBD_ClrFeature+0x3c>
      break;
 800aa48:	bf00      	nop
  }
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	781a      	ldrb	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	781a      	ldrb	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fa40 	bl	8009f02 <SWAPBYTE>
 800aa82:	4603      	mov	r3, r0
 800aa84:	461a      	mov	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3301      	adds	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f7ff fa33 	bl	8009f02 <SWAPBYTE>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3301      	adds	r3, #1
 800aaae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff fa26 	bl	8009f02 <SWAPBYTE>
 800aab6:	4603      	mov	r3, r0
 800aab8:	461a      	mov	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	80da      	strh	r2, [r3, #6]
}
 800aabe:	bf00      	nop
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aad0:	2180      	movs	r1, #128	@ 0x80
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fcec 	bl	800b4b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aad8:	2100      	movs	r1, #0
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fce8 	bl	800b4b0 <USBD_LL_StallEP>
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d042      	beq.n	800ab84 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ab02:	6938      	ldr	r0, [r7, #16]
 800ab04:	f000 f842 	bl	800ab8c <USBD_GetLen>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab12:	d808      	bhi.n	800ab26 <USBD_GetString+0x3e>
 800ab14:	6938      	ldr	r0, [r7, #16]
 800ab16:	f000 f839 	bl	800ab8c <USBD_GetLen>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	e001      	b.n	800ab2a <USBD_GetString+0x42>
 800ab26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ab2e:	7dfb      	ldrb	r3, [r7, #23]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	4413      	add	r3, r2
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	7812      	ldrb	r2, [r2, #0]
 800ab38:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	4413      	add	r3, r2
 800ab46:	2203      	movs	r2, #3
 800ab48:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab50:	e013      	b.n	800ab7a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	4413      	add	r3, r2
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	7812      	ldrb	r2, [r2, #0]
 800ab5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	3301      	adds	r3, #1
 800ab62:	613b      	str	r3, [r7, #16]
    idx++;
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	3301      	adds	r3, #1
 800ab68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	4413      	add	r3, r2
 800ab70:	2200      	movs	r2, #0
 800ab72:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
 800ab76:	3301      	adds	r3, #1
 800ab78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e7      	bne.n	800ab52 <USBD_GetString+0x6a>
 800ab82:	e000      	b.n	800ab86 <USBD_GetString+0x9e>
    return;
 800ab84:	bf00      	nop
  }
}
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab9c:	e005      	b.n	800abaa <USBD_GetLen+0x1e>
  {
    len++;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	3301      	adds	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	3301      	adds	r3, #1
 800aba8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f5      	bne.n	800ab9e <USBD_GetLen+0x12>
  }

  return len;
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2202      	movs	r2, #2
 800abd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	2100      	movs	r1, #0
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 fceb 	bl	800b5c2 <USBD_LL_Transmit>

  return USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	2100      	movs	r1, #0
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 fcda 	bl	800b5c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2203      	movs	r2, #3
 800ac28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	2100      	movs	r1, #0
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 fcde 	bl	800b604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	2100      	movs	r1, #0
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 fccd 	bl	800b604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2204      	movs	r2, #4
 800ac80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac84:	2300      	movs	r3, #0
 800ac86:	2200      	movs	r2, #0
 800ac88:	2100      	movs	r1, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fc99 	bl	800b5c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2205      	movs	r2, #5
 800aca6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acaa:	2300      	movs	r3, #0
 800acac:	2200      	movs	r2, #0
 800acae:	2100      	movs	r1, #0
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fca7 	bl	800b604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800acc4:	2200      	movs	r2, #0
 800acc6:	4912      	ldr	r1, [pc, #72]	@ (800ad10 <MX_USB_DEVICE_Init+0x50>)
 800acc8:	4812      	ldr	r0, [pc, #72]	@ (800ad14 <MX_USB_DEVICE_Init+0x54>)
 800acca:	f7fe fcf7 	bl	80096bc <USBD_Init>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800acd4:	f7f8 fcfc 	bl	80036d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800acd8:	490f      	ldr	r1, [pc, #60]	@ (800ad18 <MX_USB_DEVICE_Init+0x58>)
 800acda:	480e      	ldr	r0, [pc, #56]	@ (800ad14 <MX_USB_DEVICE_Init+0x54>)
 800acdc:	f7fe fd1e 	bl	800971c <USBD_RegisterClass>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ace6:	f7f8 fcf3 	bl	80036d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800acea:	490c      	ldr	r1, [pc, #48]	@ (800ad1c <MX_USB_DEVICE_Init+0x5c>)
 800acec:	4809      	ldr	r0, [pc, #36]	@ (800ad14 <MX_USB_DEVICE_Init+0x54>)
 800acee:	f7fe fc15 	bl	800951c <USBD_CDC_RegisterInterface>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800acf8:	f7f8 fcea 	bl	80036d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800acfc:	4805      	ldr	r0, [pc, #20]	@ (800ad14 <MX_USB_DEVICE_Init+0x54>)
 800acfe:	f7fe fd43 	bl	8009788 <USBD_Start>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad08:	f7f8 fce2 	bl	80036d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad0c:	bf00      	nop
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	200000ac 	.word	0x200000ac
 800ad14:	2000051c 	.word	0x2000051c
 800ad18:	20000018 	.word	0x20000018
 800ad1c:	20000098 	.word	0x20000098

0800ad20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad24:	2200      	movs	r2, #0
 800ad26:	4905      	ldr	r1, [pc, #20]	@ (800ad3c <CDC_Init_FS+0x1c>)
 800ad28:	4805      	ldr	r0, [pc, #20]	@ (800ad40 <CDC_Init_FS+0x20>)
 800ad2a:	f7fe fc11 	bl	8009550 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad2e:	4905      	ldr	r1, [pc, #20]	@ (800ad44 <CDC_Init_FS+0x24>)
 800ad30:	4803      	ldr	r0, [pc, #12]	@ (800ad40 <CDC_Init_FS+0x20>)
 800ad32:	f7fe fc2f 	bl	8009594 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	20000ff8 	.word	0x20000ff8
 800ad40:	2000051c 	.word	0x2000051c
 800ad44:	200007f8 	.word	0x200007f8

0800ad48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	6039      	str	r1, [r7, #0]
 800ad62:	71fb      	strb	r3, [r7, #7]
 800ad64:	4613      	mov	r3, r2
 800ad66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	2b23      	cmp	r3, #35	@ 0x23
 800ad6c:	d84a      	bhi.n	800ae04 <CDC_Control_FS+0xac>
 800ad6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad74 <CDC_Control_FS+0x1c>)
 800ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad74:	0800ae05 	.word	0x0800ae05
 800ad78:	0800ae05 	.word	0x0800ae05
 800ad7c:	0800ae05 	.word	0x0800ae05
 800ad80:	0800ae05 	.word	0x0800ae05
 800ad84:	0800ae05 	.word	0x0800ae05
 800ad88:	0800ae05 	.word	0x0800ae05
 800ad8c:	0800ae05 	.word	0x0800ae05
 800ad90:	0800ae05 	.word	0x0800ae05
 800ad94:	0800ae05 	.word	0x0800ae05
 800ad98:	0800ae05 	.word	0x0800ae05
 800ad9c:	0800ae05 	.word	0x0800ae05
 800ada0:	0800ae05 	.word	0x0800ae05
 800ada4:	0800ae05 	.word	0x0800ae05
 800ada8:	0800ae05 	.word	0x0800ae05
 800adac:	0800ae05 	.word	0x0800ae05
 800adb0:	0800ae05 	.word	0x0800ae05
 800adb4:	0800ae05 	.word	0x0800ae05
 800adb8:	0800ae05 	.word	0x0800ae05
 800adbc:	0800ae05 	.word	0x0800ae05
 800adc0:	0800ae05 	.word	0x0800ae05
 800adc4:	0800ae05 	.word	0x0800ae05
 800adc8:	0800ae05 	.word	0x0800ae05
 800adcc:	0800ae05 	.word	0x0800ae05
 800add0:	0800ae05 	.word	0x0800ae05
 800add4:	0800ae05 	.word	0x0800ae05
 800add8:	0800ae05 	.word	0x0800ae05
 800addc:	0800ae05 	.word	0x0800ae05
 800ade0:	0800ae05 	.word	0x0800ae05
 800ade4:	0800ae05 	.word	0x0800ae05
 800ade8:	0800ae05 	.word	0x0800ae05
 800adec:	0800ae05 	.word	0x0800ae05
 800adf0:	0800ae05 	.word	0x0800ae05
 800adf4:	0800ae05 	.word	0x0800ae05
 800adf8:	0800ae05 	.word	0x0800ae05
 800adfc:	0800ae05 	.word	0x0800ae05
 800ae00:	0800ae05 	.word	0x0800ae05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae04:	bf00      	nop
  }

  return (USBD_OK);
 800ae06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	4805      	ldr	r0, [pc, #20]	@ (800ae38 <CDC_Receive_FS+0x24>)
 800ae22:	f7fe fbb7 	bl	8009594 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae26:	4804      	ldr	r0, [pc, #16]	@ (800ae38 <CDC_Receive_FS+0x24>)
 800ae28:	f7fe fc12 	bl	8009650 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ae2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	2000051c 	.word	0x2000051c

0800ae3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ae84 <CDC_Transmit_FS+0x48>)
 800ae4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e00b      	b.n	800ae7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae62:	887b      	ldrh	r3, [r7, #2]
 800ae64:	461a      	mov	r2, r3
 800ae66:	6879      	ldr	r1, [r7, #4]
 800ae68:	4806      	ldr	r0, [pc, #24]	@ (800ae84 <CDC_Transmit_FS+0x48>)
 800ae6a:	f7fe fb71 	bl	8009550 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae6e:	4805      	ldr	r0, [pc, #20]	@ (800ae84 <CDC_Transmit_FS+0x48>)
 800ae70:	f7fe fbae 	bl	80095d0 <USBD_CDC_TransmitPacket>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	2000051c 	.word	0x2000051c

0800ae88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	4613      	mov	r3, r2
 800ae94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ae9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	371c      	adds	r7, #28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
	...

0800aeac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	6039      	str	r1, [r7, #0]
 800aeb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2212      	movs	r2, #18
 800aebc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aebe:	4b03      	ldr	r3, [pc, #12]	@ (800aecc <USBD_FS_DeviceDescriptor+0x20>)
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	200000c8 	.word	0x200000c8

0800aed0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	6039      	str	r1, [r7, #0]
 800aeda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2204      	movs	r2, #4
 800aee0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aee2:	4b03      	ldr	r3, [pc, #12]	@ (800aef0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	200000dc 	.word	0x200000dc

0800aef4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	6039      	str	r1, [r7, #0]
 800aefe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d105      	bne.n	800af12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	4907      	ldr	r1, [pc, #28]	@ (800af28 <USBD_FS_ProductStrDescriptor+0x34>)
 800af0a:	4808      	ldr	r0, [pc, #32]	@ (800af2c <USBD_FS_ProductStrDescriptor+0x38>)
 800af0c:	f7ff fdec 	bl	800aae8 <USBD_GetString>
 800af10:	e004      	b.n	800af1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	4904      	ldr	r1, [pc, #16]	@ (800af28 <USBD_FS_ProductStrDescriptor+0x34>)
 800af16:	4805      	ldr	r0, [pc, #20]	@ (800af2c <USBD_FS_ProductStrDescriptor+0x38>)
 800af18:	f7ff fde6 	bl	800aae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af1c:	4b02      	ldr	r3, [pc, #8]	@ (800af28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	200017f8 	.word	0x200017f8
 800af2c:	0800faa4 	.word	0x0800faa4

0800af30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	6039      	str	r1, [r7, #0]
 800af3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	4904      	ldr	r1, [pc, #16]	@ (800af50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af40:	4804      	ldr	r0, [pc, #16]	@ (800af54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af42:	f7ff fdd1 	bl	800aae8 <USBD_GetString>
  return USBD_StrDesc;
 800af46:	4b02      	ldr	r3, [pc, #8]	@ (800af50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	200017f8 	.word	0x200017f8
 800af54:	0800fabc 	.word	0x0800fabc

0800af58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	6039      	str	r1, [r7, #0]
 800af62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	221a      	movs	r2, #26
 800af68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af6a:	f000 f843 	bl	800aff4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af6e:	4b02      	ldr	r3, [pc, #8]	@ (800af78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	200000e0 	.word	0x200000e0

0800af7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	6039      	str	r1, [r7, #0]
 800af86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af88:	79fb      	ldrb	r3, [r7, #7]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d105      	bne.n	800af9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	4907      	ldr	r1, [pc, #28]	@ (800afb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af92:	4808      	ldr	r0, [pc, #32]	@ (800afb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800af94:	f7ff fda8 	bl	800aae8 <USBD_GetString>
 800af98:	e004      	b.n	800afa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	4904      	ldr	r1, [pc, #16]	@ (800afb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af9e:	4805      	ldr	r0, [pc, #20]	@ (800afb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afa0:	f7ff fda2 	bl	800aae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afa4:	4b02      	ldr	r3, [pc, #8]	@ (800afb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	200017f8 	.word	0x200017f8
 800afb4:	0800fad0 	.word	0x0800fad0

0800afb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	6039      	str	r1, [r7, #0]
 800afc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d105      	bne.n	800afd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	4907      	ldr	r1, [pc, #28]	@ (800afec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afce:	4808      	ldr	r0, [pc, #32]	@ (800aff0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afd0:	f7ff fd8a 	bl	800aae8 <USBD_GetString>
 800afd4:	e004      	b.n	800afe0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	4904      	ldr	r1, [pc, #16]	@ (800afec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afda:	4805      	ldr	r0, [pc, #20]	@ (800aff0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afdc:	f7ff fd84 	bl	800aae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afe0:	4b02      	ldr	r3, [pc, #8]	@ (800afec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	200017f8 	.word	0x200017f8
 800aff0:	0800fadc 	.word	0x0800fadc

0800aff4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800affa:	4b0f      	ldr	r3, [pc, #60]	@ (800b038 <Get_SerialNum+0x44>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b000:	4b0e      	ldr	r3, [pc, #56]	@ (800b03c <Get_SerialNum+0x48>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b006:	4b0e      	ldr	r3, [pc, #56]	@ (800b040 <Get_SerialNum+0x4c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4413      	add	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d009      	beq.n	800b02e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b01a:	2208      	movs	r2, #8
 800b01c:	4909      	ldr	r1, [pc, #36]	@ (800b044 <Get_SerialNum+0x50>)
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 f814 	bl	800b04c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b024:	2204      	movs	r2, #4
 800b026:	4908      	ldr	r1, [pc, #32]	@ (800b048 <Get_SerialNum+0x54>)
 800b028:	68b8      	ldr	r0, [r7, #8]
 800b02a:	f000 f80f 	bl	800b04c <IntToUnicode>
  }
}
 800b02e:	bf00      	nop
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	1fff7a10 	.word	0x1fff7a10
 800b03c:	1fff7a14 	.word	0x1fff7a14
 800b040:	1fff7a18 	.word	0x1fff7a18
 800b044:	200000e2 	.word	0x200000e2
 800b048:	200000f2 	.word	0x200000f2

0800b04c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b05e:	2300      	movs	r3, #0
 800b060:	75fb      	strb	r3, [r7, #23]
 800b062:	e027      	b.n	800b0b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	0f1b      	lsrs	r3, r3, #28
 800b068:	2b09      	cmp	r3, #9
 800b06a:	d80b      	bhi.n	800b084 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	0f1b      	lsrs	r3, r3, #28
 800b070:	b2da      	uxtb	r2, r3
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	005b      	lsls	r3, r3, #1
 800b076:	4619      	mov	r1, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	440b      	add	r3, r1
 800b07c:	3230      	adds	r2, #48	@ 0x30
 800b07e:	b2d2      	uxtb	r2, r2
 800b080:	701a      	strb	r2, [r3, #0]
 800b082:	e00a      	b.n	800b09a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	0f1b      	lsrs	r3, r3, #28
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	4619      	mov	r1, r3
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	440b      	add	r3, r1
 800b094:	3237      	adds	r2, #55	@ 0x37
 800b096:	b2d2      	uxtb	r2, r2
 800b098:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	75fb      	strb	r3, [r7, #23]
 800b0b4:	7dfa      	ldrb	r2, [r7, #23]
 800b0b6:	79fb      	ldrb	r3, [r7, #7]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d3d3      	bcc.n	800b064 <IntToUnicode+0x18>
  }
}
 800b0bc:	bf00      	nop
 800b0be:	bf00      	nop
 800b0c0:	371c      	adds	r7, #28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
	...

0800b0cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08a      	sub	sp, #40	@ 0x28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d4:	f107 0314 	add.w	r3, r7, #20
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	605a      	str	r2, [r3, #4]
 800b0de:	609a      	str	r2, [r3, #8]
 800b0e0:	60da      	str	r2, [r3, #12]
 800b0e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0ec:	d13a      	bne.n	800b164 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	613b      	str	r3, [r7, #16]
 800b0f2:	4b1e      	ldr	r3, [pc, #120]	@ (800b16c <HAL_PCD_MspInit+0xa0>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f6:	4a1d      	ldr	r2, [pc, #116]	@ (800b16c <HAL_PCD_MspInit+0xa0>)
 800b0f8:	f043 0301 	orr.w	r3, r3, #1
 800b0fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0fe:	4b1b      	ldr	r3, [pc, #108]	@ (800b16c <HAL_PCD_MspInit+0xa0>)
 800b100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	613b      	str	r3, [r7, #16]
 800b108:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b10a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b10e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b110:	2302      	movs	r3, #2
 800b112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b114:	2300      	movs	r3, #0
 800b116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b118:	2303      	movs	r3, #3
 800b11a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b11c:	230a      	movs	r3, #10
 800b11e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b120:	f107 0314 	add.w	r3, r7, #20
 800b124:	4619      	mov	r1, r3
 800b126:	4812      	ldr	r0, [pc, #72]	@ (800b170 <HAL_PCD_MspInit+0xa4>)
 800b128:	f7f9 fa58 	bl	80045dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b12c:	4b0f      	ldr	r3, [pc, #60]	@ (800b16c <HAL_PCD_MspInit+0xa0>)
 800b12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b130:	4a0e      	ldr	r2, [pc, #56]	@ (800b16c <HAL_PCD_MspInit+0xa0>)
 800b132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b136:	6353      	str	r3, [r2, #52]	@ 0x34
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	4b0b      	ldr	r3, [pc, #44]	@ (800b16c <HAL_PCD_MspInit+0xa0>)
 800b13e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b140:	4a0a      	ldr	r2, [pc, #40]	@ (800b16c <HAL_PCD_MspInit+0xa0>)
 800b142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b146:	6453      	str	r3, [r2, #68]	@ 0x44
 800b148:	4b08      	ldr	r3, [pc, #32]	@ (800b16c <HAL_PCD_MspInit+0xa0>)
 800b14a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b14c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b154:	2200      	movs	r2, #0
 800b156:	2100      	movs	r1, #0
 800b158:	2043      	movs	r0, #67	@ 0x43
 800b15a:	f7f8 fe76 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b15e:	2043      	movs	r0, #67	@ 0x43
 800b160:	f7f8 fe8f 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b164:	bf00      	nop
 800b166:	3728      	adds	r7, #40	@ 0x28
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	40023800 	.word	0x40023800
 800b170:	40020000 	.word	0x40020000

0800b174 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f7fe fb49 	bl	8009822 <USBD_LL_SetupStage>
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b1aa:	78fa      	ldrb	r2, [r7, #3]
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	4413      	add	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	440b      	add	r3, r1
 800b1b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	78fb      	ldrb	r3, [r7, #3]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f7fe fb83 	bl	80098cc <USBD_LL_DataOutStage>
}
 800b1c6:	bf00      	nop
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b1e0:	78fa      	ldrb	r2, [r7, #3]
 800b1e2:	6879      	ldr	r1, [r7, #4]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	00db      	lsls	r3, r3, #3
 800b1e8:	4413      	add	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	440b      	add	r3, r1
 800b1ee:	3320      	adds	r3, #32
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	78fb      	ldrb	r3, [r7, #3]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	f7fe fc1c 	bl	8009a32 <USBD_LL_DataInStage>
}
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe fd56 	bl	8009cc2 <USBD_LL_SOF>
}
 800b216:	bf00      	nop
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b226:	2301      	movs	r3, #1
 800b228:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	79db      	ldrb	r3, [r3, #7]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d102      	bne.n	800b238 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]
 800b236:	e008      	b.n	800b24a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	79db      	ldrb	r3, [r3, #7]
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d102      	bne.n	800b246 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b240:	2301      	movs	r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
 800b244:	e001      	b.n	800b24a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b246:	f7f8 fa43 	bl	80036d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b250:	7bfa      	ldrb	r2, [r7, #15]
 800b252:	4611      	mov	r1, r2
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe fcf0 	bl	8009c3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b260:	4618      	mov	r0, r3
 800b262:	f7fe fc98 	bl	8009b96 <USBD_LL_Reset>
}
 800b266:	bf00      	nop
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe fceb 	bl	8009c5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b296:	f043 0301 	orr.w	r3, r3, #1
 800b29a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	7adb      	ldrb	r3, [r3, #11]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d005      	beq.n	800b2b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2a4:	4b04      	ldr	r3, [pc, #16]	@ (800b2b8 <HAL_PCD_SuspendCallback+0x48>)
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	4a03      	ldr	r2, [pc, #12]	@ (800b2b8 <HAL_PCD_SuspendCallback+0x48>)
 800b2aa:	f043 0306 	orr.w	r3, r3, #6
 800b2ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	e000ed00 	.word	0xe000ed00

0800b2bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe fce1 	bl	8009c92 <USBD_LL_Resume>
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2ea:	78fa      	ldrb	r2, [r7, #3]
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fd39 	bl	8009d66 <USBD_LL_IsoOUTIncomplete>
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	4611      	mov	r1, r2
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fcf5 	bl	8009d02 <USBD_LL_IsoINIncomplete>
}
 800b318:	bf00      	nop
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fe fd4b 	bl	8009dca <USBD_LL_DevConnected>
}
 800b334:	bf00      	nop
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe fd48 	bl	8009de0 <USBD_LL_DevDisconnected>
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d13c      	bne.n	800b3e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b368:	4a20      	ldr	r2, [pc, #128]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a1e      	ldr	r2, [pc, #120]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b374:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b378:	4b1c      	ldr	r3, [pc, #112]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b37a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b37e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b380:	4b1a      	ldr	r3, [pc, #104]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b382:	2204      	movs	r2, #4
 800b384:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b386:	4b19      	ldr	r3, [pc, #100]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b388:	2202      	movs	r2, #2
 800b38a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b38c:	4b17      	ldr	r3, [pc, #92]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b38e:	2200      	movs	r2, #0
 800b390:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b392:	4b16      	ldr	r3, [pc, #88]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b394:	2202      	movs	r2, #2
 800b396:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b398:	4b14      	ldr	r3, [pc, #80]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b39e:	4b13      	ldr	r3, [pc, #76]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b3a4:	4b11      	ldr	r3, [pc, #68]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b3aa:	4b10      	ldr	r3, [pc, #64]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b3b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b3b6:	480d      	ldr	r0, [pc, #52]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b3b8:	f7f9 fade 	bl	8004978 <HAL_PCD_Init>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b3c2:	f7f8 f985 	bl	80036d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b3c6:	2180      	movs	r1, #128	@ 0x80
 800b3c8:	4808      	ldr	r0, [pc, #32]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b3ca:	f7fa fd0a 	bl	8005de2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b3ce:	2240      	movs	r2, #64	@ 0x40
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	4806      	ldr	r0, [pc, #24]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b3d4:	f7fa fcbe 	bl	8005d54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b3d8:	2280      	movs	r2, #128	@ 0x80
 800b3da:	2101      	movs	r1, #1
 800b3dc:	4803      	ldr	r0, [pc, #12]	@ (800b3ec <USBD_LL_Init+0x94>)
 800b3de:	f7fa fcb9 	bl	8005d54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	200019f8 	.word	0x200019f8

0800b3f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b406:	4618      	mov	r0, r3
 800b408:	f7f9 fbc5 	bl	8004b96 <HAL_PCD_Start>
 800b40c:	4603      	mov	r3, r0
 800b40e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	4618      	mov	r0, r3
 800b414:	f000 f942 	bl	800b69c <USBD_Get_USB_Status>
 800b418:	4603      	mov	r3, r0
 800b41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	4608      	mov	r0, r1
 800b430:	4611      	mov	r1, r2
 800b432:	461a      	mov	r2, r3
 800b434:	4603      	mov	r3, r0
 800b436:	70fb      	strb	r3, [r7, #3]
 800b438:	460b      	mov	r3, r1
 800b43a:	70bb      	strb	r3, [r7, #2]
 800b43c:	4613      	mov	r3, r2
 800b43e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b44e:	78bb      	ldrb	r3, [r7, #2]
 800b450:	883a      	ldrh	r2, [r7, #0]
 800b452:	78f9      	ldrb	r1, [r7, #3]
 800b454:	f7fa f899 	bl	800558a <HAL_PCD_EP_Open>
 800b458:	4603      	mov	r3, r0
 800b45a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 f91c 	bl	800b69c <USBD_Get_USB_Status>
 800b464:	4603      	mov	r3, r0
 800b466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b468:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b084      	sub	sp, #16
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	460b      	mov	r3, r1
 800b47c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b482:	2300      	movs	r3, #0
 800b484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b48c:	78fa      	ldrb	r2, [r7, #3]
 800b48e:	4611      	mov	r1, r2
 800b490:	4618      	mov	r0, r3
 800b492:	f7fa f8e4 	bl	800565e <HAL_PCD_EP_Close>
 800b496:	4603      	mov	r3, r0
 800b498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 f8fd 	bl	800b69c <USBD_Get_USB_Status>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4ca:	78fa      	ldrb	r2, [r7, #3]
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fa f99c 	bl	800580c <HAL_PCD_EP_SetStall>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 f8de 	bl	800b69c <USBD_Get_USB_Status>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b508:	78fa      	ldrb	r2, [r7, #3]
 800b50a:	4611      	mov	r1, r2
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fa f9e0 	bl	80058d2 <HAL_PCD_EP_ClrStall>
 800b512:	4603      	mov	r3, r0
 800b514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 f8bf 	bl	800b69c <USBD_Get_USB_Status>
 800b51e:	4603      	mov	r3, r0
 800b520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b522:	7bbb      	ldrb	r3, [r7, #14]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b53e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b544:	2b00      	cmp	r3, #0
 800b546:	da0b      	bge.n	800b560 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b54e:	68f9      	ldr	r1, [r7, #12]
 800b550:	4613      	mov	r3, r2
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	4413      	add	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	440b      	add	r3, r1
 800b55a:	3316      	adds	r3, #22
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	e00b      	b.n	800b578 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b566:	68f9      	ldr	r1, [r7, #12]
 800b568:	4613      	mov	r3, r2
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	440b      	add	r3, r1
 800b572:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b576:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3714      	adds	r7, #20
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b590:	2300      	movs	r3, #0
 800b592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b59e:	78fa      	ldrb	r2, [r7, #3]
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7f9 ffcd 	bl	8005542 <HAL_PCD_SetAddress>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 f874 	bl	800b69c <USBD_Get_USB_Status>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b086      	sub	sp, #24
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	60f8      	str	r0, [r7, #12]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b5e0:	7af9      	ldrb	r1, [r7, #11]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	f7fa f8d7 	bl	8005798 <HAL_PCD_EP_Transmit>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f000 f853 	bl	800b69c <USBD_Get_USB_Status>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	607a      	str	r2, [r7, #4]
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	460b      	mov	r3, r1
 800b612:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b622:	7af9      	ldrb	r1, [r7, #11]
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	f7fa f863 	bl	80056f2 <HAL_PCD_EP_Receive>
 800b62c:	4603      	mov	r3, r0
 800b62e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b630:	7dfb      	ldrb	r3, [r7, #23]
 800b632:	4618      	mov	r0, r3
 800b634:	f000 f832 	bl	800b69c <USBD_Get_USB_Status>
 800b638:	4603      	mov	r3, r0
 800b63a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b63c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b658:	78fa      	ldrb	r2, [r7, #3]
 800b65a:	4611      	mov	r1, r2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fa f883 	bl	8005768 <HAL_PCD_EP_GetRxCount>
 800b662:	4603      	mov	r3, r0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b674:	4b03      	ldr	r3, [pc, #12]	@ (800b684 <USBD_static_malloc+0x18>)
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	20001edc 	.word	0x20001edc

0800b688 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]

}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	d817      	bhi.n	800b6e0 <USBD_Get_USB_Status+0x44>
 800b6b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b8 <USBD_Get_USB_Status+0x1c>)
 800b6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b6:	bf00      	nop
 800b6b8:	0800b6c9 	.word	0x0800b6c9
 800b6bc:	0800b6cf 	.word	0x0800b6cf
 800b6c0:	0800b6d5 	.word	0x0800b6d5
 800b6c4:	0800b6db 	.word	0x0800b6db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b6cc:	e00b      	b.n	800b6e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d2:	e008      	b.n	800b6e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d8:	e005      	b.n	800b6e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b6de:	e002      	b.n	800b6e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e4:	bf00      	nop
  }
  return usb_status;
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <__cvt>:
 800b6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f8:	ec57 6b10 	vmov	r6, r7, d0
 800b6fc:	2f00      	cmp	r7, #0
 800b6fe:	460c      	mov	r4, r1
 800b700:	4619      	mov	r1, r3
 800b702:	463b      	mov	r3, r7
 800b704:	bfbb      	ittet	lt
 800b706:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b70a:	461f      	movlt	r7, r3
 800b70c:	2300      	movge	r3, #0
 800b70e:	232d      	movlt	r3, #45	@ 0x2d
 800b710:	700b      	strb	r3, [r1, #0]
 800b712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b714:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b718:	4691      	mov	r9, r2
 800b71a:	f023 0820 	bic.w	r8, r3, #32
 800b71e:	bfbc      	itt	lt
 800b720:	4632      	movlt	r2, r6
 800b722:	4616      	movlt	r6, r2
 800b724:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b728:	d005      	beq.n	800b736 <__cvt+0x42>
 800b72a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b72e:	d100      	bne.n	800b732 <__cvt+0x3e>
 800b730:	3401      	adds	r4, #1
 800b732:	2102      	movs	r1, #2
 800b734:	e000      	b.n	800b738 <__cvt+0x44>
 800b736:	2103      	movs	r1, #3
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	ab02      	add	r3, sp, #8
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	ec47 6b10 	vmov	d0, r6, r7
 800b744:	4653      	mov	r3, sl
 800b746:	4622      	mov	r2, r4
 800b748:	f000 fe5a 	bl	800c400 <_dtoa_r>
 800b74c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b750:	4605      	mov	r5, r0
 800b752:	d119      	bne.n	800b788 <__cvt+0x94>
 800b754:	f019 0f01 	tst.w	r9, #1
 800b758:	d00e      	beq.n	800b778 <__cvt+0x84>
 800b75a:	eb00 0904 	add.w	r9, r0, r4
 800b75e:	2200      	movs	r2, #0
 800b760:	2300      	movs	r3, #0
 800b762:	4630      	mov	r0, r6
 800b764:	4639      	mov	r1, r7
 800b766:	f7f5 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800b76a:	b108      	cbz	r0, 800b770 <__cvt+0x7c>
 800b76c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b770:	2230      	movs	r2, #48	@ 0x30
 800b772:	9b03      	ldr	r3, [sp, #12]
 800b774:	454b      	cmp	r3, r9
 800b776:	d31e      	bcc.n	800b7b6 <__cvt+0xc2>
 800b778:	9b03      	ldr	r3, [sp, #12]
 800b77a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b77c:	1b5b      	subs	r3, r3, r5
 800b77e:	4628      	mov	r0, r5
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	b004      	add	sp, #16
 800b784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b788:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b78c:	eb00 0904 	add.w	r9, r0, r4
 800b790:	d1e5      	bne.n	800b75e <__cvt+0x6a>
 800b792:	7803      	ldrb	r3, [r0, #0]
 800b794:	2b30      	cmp	r3, #48	@ 0x30
 800b796:	d10a      	bne.n	800b7ae <__cvt+0xba>
 800b798:	2200      	movs	r2, #0
 800b79a:	2300      	movs	r3, #0
 800b79c:	4630      	mov	r0, r6
 800b79e:	4639      	mov	r1, r7
 800b7a0:	f7f5 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7a4:	b918      	cbnz	r0, 800b7ae <__cvt+0xba>
 800b7a6:	f1c4 0401 	rsb	r4, r4, #1
 800b7aa:	f8ca 4000 	str.w	r4, [sl]
 800b7ae:	f8da 3000 	ldr.w	r3, [sl]
 800b7b2:	4499      	add	r9, r3
 800b7b4:	e7d3      	b.n	800b75e <__cvt+0x6a>
 800b7b6:	1c59      	adds	r1, r3, #1
 800b7b8:	9103      	str	r1, [sp, #12]
 800b7ba:	701a      	strb	r2, [r3, #0]
 800b7bc:	e7d9      	b.n	800b772 <__cvt+0x7e>

0800b7be <__exponent>:
 800b7be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7c0:	2900      	cmp	r1, #0
 800b7c2:	bfba      	itte	lt
 800b7c4:	4249      	neglt	r1, r1
 800b7c6:	232d      	movlt	r3, #45	@ 0x2d
 800b7c8:	232b      	movge	r3, #43	@ 0x2b
 800b7ca:	2909      	cmp	r1, #9
 800b7cc:	7002      	strb	r2, [r0, #0]
 800b7ce:	7043      	strb	r3, [r0, #1]
 800b7d0:	dd29      	ble.n	800b826 <__exponent+0x68>
 800b7d2:	f10d 0307 	add.w	r3, sp, #7
 800b7d6:	461d      	mov	r5, r3
 800b7d8:	270a      	movs	r7, #10
 800b7da:	461a      	mov	r2, r3
 800b7dc:	fbb1 f6f7 	udiv	r6, r1, r7
 800b7e0:	fb07 1416 	mls	r4, r7, r6, r1
 800b7e4:	3430      	adds	r4, #48	@ 0x30
 800b7e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	2c63      	cmp	r4, #99	@ 0x63
 800b7ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7f2:	4631      	mov	r1, r6
 800b7f4:	dcf1      	bgt.n	800b7da <__exponent+0x1c>
 800b7f6:	3130      	adds	r1, #48	@ 0x30
 800b7f8:	1e94      	subs	r4, r2, #2
 800b7fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7fe:	1c41      	adds	r1, r0, #1
 800b800:	4623      	mov	r3, r4
 800b802:	42ab      	cmp	r3, r5
 800b804:	d30a      	bcc.n	800b81c <__exponent+0x5e>
 800b806:	f10d 0309 	add.w	r3, sp, #9
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	42ac      	cmp	r4, r5
 800b80e:	bf88      	it	hi
 800b810:	2300      	movhi	r3, #0
 800b812:	3302      	adds	r3, #2
 800b814:	4403      	add	r3, r0
 800b816:	1a18      	subs	r0, r3, r0
 800b818:	b003      	add	sp, #12
 800b81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b81c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b820:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b824:	e7ed      	b.n	800b802 <__exponent+0x44>
 800b826:	2330      	movs	r3, #48	@ 0x30
 800b828:	3130      	adds	r1, #48	@ 0x30
 800b82a:	7083      	strb	r3, [r0, #2]
 800b82c:	70c1      	strb	r1, [r0, #3]
 800b82e:	1d03      	adds	r3, r0, #4
 800b830:	e7f1      	b.n	800b816 <__exponent+0x58>
	...

0800b834 <_printf_float>:
 800b834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b838:	b08d      	sub	sp, #52	@ 0x34
 800b83a:	460c      	mov	r4, r1
 800b83c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b840:	4616      	mov	r6, r2
 800b842:	461f      	mov	r7, r3
 800b844:	4605      	mov	r5, r0
 800b846:	f000 fcdb 	bl	800c200 <_localeconv_r>
 800b84a:	6803      	ldr	r3, [r0, #0]
 800b84c:	9304      	str	r3, [sp, #16]
 800b84e:	4618      	mov	r0, r3
 800b850:	f7f4 fd0e 	bl	8000270 <strlen>
 800b854:	2300      	movs	r3, #0
 800b856:	930a      	str	r3, [sp, #40]	@ 0x28
 800b858:	f8d8 3000 	ldr.w	r3, [r8]
 800b85c:	9005      	str	r0, [sp, #20]
 800b85e:	3307      	adds	r3, #7
 800b860:	f023 0307 	bic.w	r3, r3, #7
 800b864:	f103 0208 	add.w	r2, r3, #8
 800b868:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b86c:	f8d4 b000 	ldr.w	fp, [r4]
 800b870:	f8c8 2000 	str.w	r2, [r8]
 800b874:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b878:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b87c:	9307      	str	r3, [sp, #28]
 800b87e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b882:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b88a:	4b9c      	ldr	r3, [pc, #624]	@ (800bafc <_printf_float+0x2c8>)
 800b88c:	f04f 32ff 	mov.w	r2, #4294967295
 800b890:	f7f5 f94c 	bl	8000b2c <__aeabi_dcmpun>
 800b894:	bb70      	cbnz	r0, 800b8f4 <_printf_float+0xc0>
 800b896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b89a:	4b98      	ldr	r3, [pc, #608]	@ (800bafc <_printf_float+0x2c8>)
 800b89c:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a0:	f7f5 f926 	bl	8000af0 <__aeabi_dcmple>
 800b8a4:	bb30      	cbnz	r0, 800b8f4 <_printf_float+0xc0>
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	f7f5 f915 	bl	8000adc <__aeabi_dcmplt>
 800b8b2:	b110      	cbz	r0, 800b8ba <_printf_float+0x86>
 800b8b4:	232d      	movs	r3, #45	@ 0x2d
 800b8b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8ba:	4a91      	ldr	r2, [pc, #580]	@ (800bb00 <_printf_float+0x2cc>)
 800b8bc:	4b91      	ldr	r3, [pc, #580]	@ (800bb04 <_printf_float+0x2d0>)
 800b8be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b8c2:	bf94      	ite	ls
 800b8c4:	4690      	movls	r8, r2
 800b8c6:	4698      	movhi	r8, r3
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	f02b 0304 	bic.w	r3, fp, #4
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	f04f 0900 	mov.w	r9, #0
 800b8d6:	9700      	str	r7, [sp, #0]
 800b8d8:	4633      	mov	r3, r6
 800b8da:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b8dc:	4621      	mov	r1, r4
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f000 f9d2 	bl	800bc88 <_printf_common>
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	f040 808d 	bne.w	800ba04 <_printf_float+0x1d0>
 800b8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ee:	b00d      	add	sp, #52	@ 0x34
 800b8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	464b      	mov	r3, r9
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	f7f5 f916 	bl	8000b2c <__aeabi_dcmpun>
 800b900:	b140      	cbz	r0, 800b914 <_printf_float+0xe0>
 800b902:	464b      	mov	r3, r9
 800b904:	2b00      	cmp	r3, #0
 800b906:	bfbc      	itt	lt
 800b908:	232d      	movlt	r3, #45	@ 0x2d
 800b90a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b90e:	4a7e      	ldr	r2, [pc, #504]	@ (800bb08 <_printf_float+0x2d4>)
 800b910:	4b7e      	ldr	r3, [pc, #504]	@ (800bb0c <_printf_float+0x2d8>)
 800b912:	e7d4      	b.n	800b8be <_printf_float+0x8a>
 800b914:	6863      	ldr	r3, [r4, #4]
 800b916:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b91a:	9206      	str	r2, [sp, #24]
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	d13b      	bne.n	800b998 <_printf_float+0x164>
 800b920:	2306      	movs	r3, #6
 800b922:	6063      	str	r3, [r4, #4]
 800b924:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b928:	2300      	movs	r3, #0
 800b92a:	6022      	str	r2, [r4, #0]
 800b92c:	9303      	str	r3, [sp, #12]
 800b92e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b930:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b934:	ab09      	add	r3, sp, #36	@ 0x24
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	6861      	ldr	r1, [r4, #4]
 800b93a:	ec49 8b10 	vmov	d0, r8, r9
 800b93e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b942:	4628      	mov	r0, r5
 800b944:	f7ff fed6 	bl	800b6f4 <__cvt>
 800b948:	9b06      	ldr	r3, [sp, #24]
 800b94a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b94c:	2b47      	cmp	r3, #71	@ 0x47
 800b94e:	4680      	mov	r8, r0
 800b950:	d129      	bne.n	800b9a6 <_printf_float+0x172>
 800b952:	1cc8      	adds	r0, r1, #3
 800b954:	db02      	blt.n	800b95c <_printf_float+0x128>
 800b956:	6863      	ldr	r3, [r4, #4]
 800b958:	4299      	cmp	r1, r3
 800b95a:	dd41      	ble.n	800b9e0 <_printf_float+0x1ac>
 800b95c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b960:	fa5f fa8a 	uxtb.w	sl, sl
 800b964:	3901      	subs	r1, #1
 800b966:	4652      	mov	r2, sl
 800b968:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b96c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b96e:	f7ff ff26 	bl	800b7be <__exponent>
 800b972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b974:	1813      	adds	r3, r2, r0
 800b976:	2a01      	cmp	r2, #1
 800b978:	4681      	mov	r9, r0
 800b97a:	6123      	str	r3, [r4, #16]
 800b97c:	dc02      	bgt.n	800b984 <_printf_float+0x150>
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	07d2      	lsls	r2, r2, #31
 800b982:	d501      	bpl.n	800b988 <_printf_float+0x154>
 800b984:	3301      	adds	r3, #1
 800b986:	6123      	str	r3, [r4, #16]
 800b988:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0a2      	beq.n	800b8d6 <_printf_float+0xa2>
 800b990:	232d      	movs	r3, #45	@ 0x2d
 800b992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b996:	e79e      	b.n	800b8d6 <_printf_float+0xa2>
 800b998:	9a06      	ldr	r2, [sp, #24]
 800b99a:	2a47      	cmp	r2, #71	@ 0x47
 800b99c:	d1c2      	bne.n	800b924 <_printf_float+0xf0>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1c0      	bne.n	800b924 <_printf_float+0xf0>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e7bd      	b.n	800b922 <_printf_float+0xee>
 800b9a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b9aa:	d9db      	bls.n	800b964 <_printf_float+0x130>
 800b9ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b9b0:	d118      	bne.n	800b9e4 <_printf_float+0x1b0>
 800b9b2:	2900      	cmp	r1, #0
 800b9b4:	6863      	ldr	r3, [r4, #4]
 800b9b6:	dd0b      	ble.n	800b9d0 <_printf_float+0x19c>
 800b9b8:	6121      	str	r1, [r4, #16]
 800b9ba:	b913      	cbnz	r3, 800b9c2 <_printf_float+0x18e>
 800b9bc:	6822      	ldr	r2, [r4, #0]
 800b9be:	07d0      	lsls	r0, r2, #31
 800b9c0:	d502      	bpl.n	800b9c8 <_printf_float+0x194>
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	440b      	add	r3, r1
 800b9c6:	6123      	str	r3, [r4, #16]
 800b9c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b9ca:	f04f 0900 	mov.w	r9, #0
 800b9ce:	e7db      	b.n	800b988 <_printf_float+0x154>
 800b9d0:	b913      	cbnz	r3, 800b9d8 <_printf_float+0x1a4>
 800b9d2:	6822      	ldr	r2, [r4, #0]
 800b9d4:	07d2      	lsls	r2, r2, #31
 800b9d6:	d501      	bpl.n	800b9dc <_printf_float+0x1a8>
 800b9d8:	3302      	adds	r3, #2
 800b9da:	e7f4      	b.n	800b9c6 <_printf_float+0x192>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e7f2      	b.n	800b9c6 <_printf_float+0x192>
 800b9e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9e6:	4299      	cmp	r1, r3
 800b9e8:	db05      	blt.n	800b9f6 <_printf_float+0x1c2>
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	6121      	str	r1, [r4, #16]
 800b9ee:	07d8      	lsls	r0, r3, #31
 800b9f0:	d5ea      	bpl.n	800b9c8 <_printf_float+0x194>
 800b9f2:	1c4b      	adds	r3, r1, #1
 800b9f4:	e7e7      	b.n	800b9c6 <_printf_float+0x192>
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	bfd4      	ite	le
 800b9fa:	f1c1 0202 	rsble	r2, r1, #2
 800b9fe:	2201      	movgt	r2, #1
 800ba00:	4413      	add	r3, r2
 800ba02:	e7e0      	b.n	800b9c6 <_printf_float+0x192>
 800ba04:	6823      	ldr	r3, [r4, #0]
 800ba06:	055a      	lsls	r2, r3, #21
 800ba08:	d407      	bmi.n	800ba1a <_printf_float+0x1e6>
 800ba0a:	6923      	ldr	r3, [r4, #16]
 800ba0c:	4642      	mov	r2, r8
 800ba0e:	4631      	mov	r1, r6
 800ba10:	4628      	mov	r0, r5
 800ba12:	47b8      	blx	r7
 800ba14:	3001      	adds	r0, #1
 800ba16:	d12b      	bne.n	800ba70 <_printf_float+0x23c>
 800ba18:	e767      	b.n	800b8ea <_printf_float+0xb6>
 800ba1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba1e:	f240 80dd 	bls.w	800bbdc <_printf_float+0x3a8>
 800ba22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ba26:	2200      	movs	r2, #0
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f7f5 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d033      	beq.n	800ba9a <_printf_float+0x266>
 800ba32:	4a37      	ldr	r2, [pc, #220]	@ (800bb10 <_printf_float+0x2dc>)
 800ba34:	2301      	movs	r3, #1
 800ba36:	4631      	mov	r1, r6
 800ba38:	4628      	mov	r0, r5
 800ba3a:	47b8      	blx	r7
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	f43f af54 	beq.w	800b8ea <_printf_float+0xb6>
 800ba42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ba46:	4543      	cmp	r3, r8
 800ba48:	db02      	blt.n	800ba50 <_printf_float+0x21c>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	07d8      	lsls	r0, r3, #31
 800ba4e:	d50f      	bpl.n	800ba70 <_printf_float+0x23c>
 800ba50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba54:	4631      	mov	r1, r6
 800ba56:	4628      	mov	r0, r5
 800ba58:	47b8      	blx	r7
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	f43f af45 	beq.w	800b8ea <_printf_float+0xb6>
 800ba60:	f04f 0900 	mov.w	r9, #0
 800ba64:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba68:	f104 0a1a 	add.w	sl, r4, #26
 800ba6c:	45c8      	cmp	r8, r9
 800ba6e:	dc09      	bgt.n	800ba84 <_printf_float+0x250>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	079b      	lsls	r3, r3, #30
 800ba74:	f100 8103 	bmi.w	800bc7e <_printf_float+0x44a>
 800ba78:	68e0      	ldr	r0, [r4, #12]
 800ba7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba7c:	4298      	cmp	r0, r3
 800ba7e:	bfb8      	it	lt
 800ba80:	4618      	movlt	r0, r3
 800ba82:	e734      	b.n	800b8ee <_printf_float+0xba>
 800ba84:	2301      	movs	r3, #1
 800ba86:	4652      	mov	r2, sl
 800ba88:	4631      	mov	r1, r6
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	47b8      	blx	r7
 800ba8e:	3001      	adds	r0, #1
 800ba90:	f43f af2b 	beq.w	800b8ea <_printf_float+0xb6>
 800ba94:	f109 0901 	add.w	r9, r9, #1
 800ba98:	e7e8      	b.n	800ba6c <_printf_float+0x238>
 800ba9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	dc39      	bgt.n	800bb14 <_printf_float+0x2e0>
 800baa0:	4a1b      	ldr	r2, [pc, #108]	@ (800bb10 <_printf_float+0x2dc>)
 800baa2:	2301      	movs	r3, #1
 800baa4:	4631      	mov	r1, r6
 800baa6:	4628      	mov	r0, r5
 800baa8:	47b8      	blx	r7
 800baaa:	3001      	adds	r0, #1
 800baac:	f43f af1d 	beq.w	800b8ea <_printf_float+0xb6>
 800bab0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bab4:	ea59 0303 	orrs.w	r3, r9, r3
 800bab8:	d102      	bne.n	800bac0 <_printf_float+0x28c>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	07d9      	lsls	r1, r3, #31
 800babe:	d5d7      	bpl.n	800ba70 <_printf_float+0x23c>
 800bac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bac4:	4631      	mov	r1, r6
 800bac6:	4628      	mov	r0, r5
 800bac8:	47b8      	blx	r7
 800baca:	3001      	adds	r0, #1
 800bacc:	f43f af0d 	beq.w	800b8ea <_printf_float+0xb6>
 800bad0:	f04f 0a00 	mov.w	sl, #0
 800bad4:	f104 0b1a 	add.w	fp, r4, #26
 800bad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bada:	425b      	negs	r3, r3
 800badc:	4553      	cmp	r3, sl
 800bade:	dc01      	bgt.n	800bae4 <_printf_float+0x2b0>
 800bae0:	464b      	mov	r3, r9
 800bae2:	e793      	b.n	800ba0c <_printf_float+0x1d8>
 800bae4:	2301      	movs	r3, #1
 800bae6:	465a      	mov	r2, fp
 800bae8:	4631      	mov	r1, r6
 800baea:	4628      	mov	r0, r5
 800baec:	47b8      	blx	r7
 800baee:	3001      	adds	r0, #1
 800baf0:	f43f aefb 	beq.w	800b8ea <_printf_float+0xb6>
 800baf4:	f10a 0a01 	add.w	sl, sl, #1
 800baf8:	e7ee      	b.n	800bad8 <_printf_float+0x2a4>
 800bafa:	bf00      	nop
 800bafc:	7fefffff 	.word	0x7fefffff
 800bb00:	0800fb04 	.word	0x0800fb04
 800bb04:	0800fb08 	.word	0x0800fb08
 800bb08:	0800fb0c 	.word	0x0800fb0c
 800bb0c:	0800fb10 	.word	0x0800fb10
 800bb10:	0800fb14 	.word	0x0800fb14
 800bb14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb1a:	4553      	cmp	r3, sl
 800bb1c:	bfa8      	it	ge
 800bb1e:	4653      	movge	r3, sl
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	4699      	mov	r9, r3
 800bb24:	dc36      	bgt.n	800bb94 <_printf_float+0x360>
 800bb26:	f04f 0b00 	mov.w	fp, #0
 800bb2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb2e:	f104 021a 	add.w	r2, r4, #26
 800bb32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb34:	9306      	str	r3, [sp, #24]
 800bb36:	eba3 0309 	sub.w	r3, r3, r9
 800bb3a:	455b      	cmp	r3, fp
 800bb3c:	dc31      	bgt.n	800bba2 <_printf_float+0x36e>
 800bb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb40:	459a      	cmp	sl, r3
 800bb42:	dc3a      	bgt.n	800bbba <_printf_float+0x386>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	07da      	lsls	r2, r3, #31
 800bb48:	d437      	bmi.n	800bbba <_printf_float+0x386>
 800bb4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb4c:	ebaa 0903 	sub.w	r9, sl, r3
 800bb50:	9b06      	ldr	r3, [sp, #24]
 800bb52:	ebaa 0303 	sub.w	r3, sl, r3
 800bb56:	4599      	cmp	r9, r3
 800bb58:	bfa8      	it	ge
 800bb5a:	4699      	movge	r9, r3
 800bb5c:	f1b9 0f00 	cmp.w	r9, #0
 800bb60:	dc33      	bgt.n	800bbca <_printf_float+0x396>
 800bb62:	f04f 0800 	mov.w	r8, #0
 800bb66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb6a:	f104 0b1a 	add.w	fp, r4, #26
 800bb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb70:	ebaa 0303 	sub.w	r3, sl, r3
 800bb74:	eba3 0309 	sub.w	r3, r3, r9
 800bb78:	4543      	cmp	r3, r8
 800bb7a:	f77f af79 	ble.w	800ba70 <_printf_float+0x23c>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	465a      	mov	r2, fp
 800bb82:	4631      	mov	r1, r6
 800bb84:	4628      	mov	r0, r5
 800bb86:	47b8      	blx	r7
 800bb88:	3001      	adds	r0, #1
 800bb8a:	f43f aeae 	beq.w	800b8ea <_printf_float+0xb6>
 800bb8e:	f108 0801 	add.w	r8, r8, #1
 800bb92:	e7ec      	b.n	800bb6e <_printf_float+0x33a>
 800bb94:	4642      	mov	r2, r8
 800bb96:	4631      	mov	r1, r6
 800bb98:	4628      	mov	r0, r5
 800bb9a:	47b8      	blx	r7
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d1c2      	bne.n	800bb26 <_printf_float+0x2f2>
 800bba0:	e6a3      	b.n	800b8ea <_printf_float+0xb6>
 800bba2:	2301      	movs	r3, #1
 800bba4:	4631      	mov	r1, r6
 800bba6:	4628      	mov	r0, r5
 800bba8:	9206      	str	r2, [sp, #24]
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	f43f ae9c 	beq.w	800b8ea <_printf_float+0xb6>
 800bbb2:	9a06      	ldr	r2, [sp, #24]
 800bbb4:	f10b 0b01 	add.w	fp, fp, #1
 800bbb8:	e7bb      	b.n	800bb32 <_printf_float+0x2fe>
 800bbba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	47b8      	blx	r7
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d1c0      	bne.n	800bb4a <_printf_float+0x316>
 800bbc8:	e68f      	b.n	800b8ea <_printf_float+0xb6>
 800bbca:	9a06      	ldr	r2, [sp, #24]
 800bbcc:	464b      	mov	r3, r9
 800bbce:	4442      	add	r2, r8
 800bbd0:	4631      	mov	r1, r6
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	47b8      	blx	r7
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	d1c3      	bne.n	800bb62 <_printf_float+0x32e>
 800bbda:	e686      	b.n	800b8ea <_printf_float+0xb6>
 800bbdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbe0:	f1ba 0f01 	cmp.w	sl, #1
 800bbe4:	dc01      	bgt.n	800bbea <_printf_float+0x3b6>
 800bbe6:	07db      	lsls	r3, r3, #31
 800bbe8:	d536      	bpl.n	800bc58 <_printf_float+0x424>
 800bbea:	2301      	movs	r3, #1
 800bbec:	4642      	mov	r2, r8
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	47b8      	blx	r7
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f43f ae78 	beq.w	800b8ea <_printf_float+0xb6>
 800bbfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbfe:	4631      	mov	r1, r6
 800bc00:	4628      	mov	r0, r5
 800bc02:	47b8      	blx	r7
 800bc04:	3001      	adds	r0, #1
 800bc06:	f43f ae70 	beq.w	800b8ea <_printf_float+0xb6>
 800bc0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2300      	movs	r3, #0
 800bc12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc16:	f7f4 ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc1a:	b9c0      	cbnz	r0, 800bc4e <_printf_float+0x41a>
 800bc1c:	4653      	mov	r3, sl
 800bc1e:	f108 0201 	add.w	r2, r8, #1
 800bc22:	4631      	mov	r1, r6
 800bc24:	4628      	mov	r0, r5
 800bc26:	47b8      	blx	r7
 800bc28:	3001      	adds	r0, #1
 800bc2a:	d10c      	bne.n	800bc46 <_printf_float+0x412>
 800bc2c:	e65d      	b.n	800b8ea <_printf_float+0xb6>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	465a      	mov	r2, fp
 800bc32:	4631      	mov	r1, r6
 800bc34:	4628      	mov	r0, r5
 800bc36:	47b8      	blx	r7
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f43f ae56 	beq.w	800b8ea <_printf_float+0xb6>
 800bc3e:	f108 0801 	add.w	r8, r8, #1
 800bc42:	45d0      	cmp	r8, sl
 800bc44:	dbf3      	blt.n	800bc2e <_printf_float+0x3fa>
 800bc46:	464b      	mov	r3, r9
 800bc48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bc4c:	e6df      	b.n	800ba0e <_printf_float+0x1da>
 800bc4e:	f04f 0800 	mov.w	r8, #0
 800bc52:	f104 0b1a 	add.w	fp, r4, #26
 800bc56:	e7f4      	b.n	800bc42 <_printf_float+0x40e>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	4642      	mov	r2, r8
 800bc5c:	e7e1      	b.n	800bc22 <_printf_float+0x3ee>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	464a      	mov	r2, r9
 800bc62:	4631      	mov	r1, r6
 800bc64:	4628      	mov	r0, r5
 800bc66:	47b8      	blx	r7
 800bc68:	3001      	adds	r0, #1
 800bc6a:	f43f ae3e 	beq.w	800b8ea <_printf_float+0xb6>
 800bc6e:	f108 0801 	add.w	r8, r8, #1
 800bc72:	68e3      	ldr	r3, [r4, #12]
 800bc74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc76:	1a5b      	subs	r3, r3, r1
 800bc78:	4543      	cmp	r3, r8
 800bc7a:	dcf0      	bgt.n	800bc5e <_printf_float+0x42a>
 800bc7c:	e6fc      	b.n	800ba78 <_printf_float+0x244>
 800bc7e:	f04f 0800 	mov.w	r8, #0
 800bc82:	f104 0919 	add.w	r9, r4, #25
 800bc86:	e7f4      	b.n	800bc72 <_printf_float+0x43e>

0800bc88 <_printf_common>:
 800bc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc8c:	4616      	mov	r6, r2
 800bc8e:	4698      	mov	r8, r3
 800bc90:	688a      	ldr	r2, [r1, #8]
 800bc92:	690b      	ldr	r3, [r1, #16]
 800bc94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	bfb8      	it	lt
 800bc9c:	4613      	movlt	r3, r2
 800bc9e:	6033      	str	r3, [r6, #0]
 800bca0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bca4:	4607      	mov	r7, r0
 800bca6:	460c      	mov	r4, r1
 800bca8:	b10a      	cbz	r2, 800bcae <_printf_common+0x26>
 800bcaa:	3301      	adds	r3, #1
 800bcac:	6033      	str	r3, [r6, #0]
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	0699      	lsls	r1, r3, #26
 800bcb2:	bf42      	ittt	mi
 800bcb4:	6833      	ldrmi	r3, [r6, #0]
 800bcb6:	3302      	addmi	r3, #2
 800bcb8:	6033      	strmi	r3, [r6, #0]
 800bcba:	6825      	ldr	r5, [r4, #0]
 800bcbc:	f015 0506 	ands.w	r5, r5, #6
 800bcc0:	d106      	bne.n	800bcd0 <_printf_common+0x48>
 800bcc2:	f104 0a19 	add.w	sl, r4, #25
 800bcc6:	68e3      	ldr	r3, [r4, #12]
 800bcc8:	6832      	ldr	r2, [r6, #0]
 800bcca:	1a9b      	subs	r3, r3, r2
 800bccc:	42ab      	cmp	r3, r5
 800bcce:	dc26      	bgt.n	800bd1e <_printf_common+0x96>
 800bcd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcd4:	6822      	ldr	r2, [r4, #0]
 800bcd6:	3b00      	subs	r3, #0
 800bcd8:	bf18      	it	ne
 800bcda:	2301      	movne	r3, #1
 800bcdc:	0692      	lsls	r2, r2, #26
 800bcde:	d42b      	bmi.n	800bd38 <_printf_common+0xb0>
 800bce0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bce4:	4641      	mov	r1, r8
 800bce6:	4638      	mov	r0, r7
 800bce8:	47c8      	blx	r9
 800bcea:	3001      	adds	r0, #1
 800bcec:	d01e      	beq.n	800bd2c <_printf_common+0xa4>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	6922      	ldr	r2, [r4, #16]
 800bcf2:	f003 0306 	and.w	r3, r3, #6
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	bf02      	ittt	eq
 800bcfa:	68e5      	ldreq	r5, [r4, #12]
 800bcfc:	6833      	ldreq	r3, [r6, #0]
 800bcfe:	1aed      	subeq	r5, r5, r3
 800bd00:	68a3      	ldr	r3, [r4, #8]
 800bd02:	bf0c      	ite	eq
 800bd04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd08:	2500      	movne	r5, #0
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	bfc4      	itt	gt
 800bd0e:	1a9b      	subgt	r3, r3, r2
 800bd10:	18ed      	addgt	r5, r5, r3
 800bd12:	2600      	movs	r6, #0
 800bd14:	341a      	adds	r4, #26
 800bd16:	42b5      	cmp	r5, r6
 800bd18:	d11a      	bne.n	800bd50 <_printf_common+0xc8>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e008      	b.n	800bd30 <_printf_common+0xa8>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4652      	mov	r2, sl
 800bd22:	4641      	mov	r1, r8
 800bd24:	4638      	mov	r0, r7
 800bd26:	47c8      	blx	r9
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d103      	bne.n	800bd34 <_printf_common+0xac>
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd34:	3501      	adds	r5, #1
 800bd36:	e7c6      	b.n	800bcc6 <_printf_common+0x3e>
 800bd38:	18e1      	adds	r1, r4, r3
 800bd3a:	1c5a      	adds	r2, r3, #1
 800bd3c:	2030      	movs	r0, #48	@ 0x30
 800bd3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd42:	4422      	add	r2, r4
 800bd44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd4c:	3302      	adds	r3, #2
 800bd4e:	e7c7      	b.n	800bce0 <_printf_common+0x58>
 800bd50:	2301      	movs	r3, #1
 800bd52:	4622      	mov	r2, r4
 800bd54:	4641      	mov	r1, r8
 800bd56:	4638      	mov	r0, r7
 800bd58:	47c8      	blx	r9
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	d0e6      	beq.n	800bd2c <_printf_common+0xa4>
 800bd5e:	3601      	adds	r6, #1
 800bd60:	e7d9      	b.n	800bd16 <_printf_common+0x8e>
	...

0800bd64 <_printf_i>:
 800bd64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd68:	7e0f      	ldrb	r7, [r1, #24]
 800bd6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd6c:	2f78      	cmp	r7, #120	@ 0x78
 800bd6e:	4691      	mov	r9, r2
 800bd70:	4680      	mov	r8, r0
 800bd72:	460c      	mov	r4, r1
 800bd74:	469a      	mov	sl, r3
 800bd76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd7a:	d807      	bhi.n	800bd8c <_printf_i+0x28>
 800bd7c:	2f62      	cmp	r7, #98	@ 0x62
 800bd7e:	d80a      	bhi.n	800bd96 <_printf_i+0x32>
 800bd80:	2f00      	cmp	r7, #0
 800bd82:	f000 80d2 	beq.w	800bf2a <_printf_i+0x1c6>
 800bd86:	2f58      	cmp	r7, #88	@ 0x58
 800bd88:	f000 80b9 	beq.w	800befe <_printf_i+0x19a>
 800bd8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd94:	e03a      	b.n	800be0c <_printf_i+0xa8>
 800bd96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd9a:	2b15      	cmp	r3, #21
 800bd9c:	d8f6      	bhi.n	800bd8c <_printf_i+0x28>
 800bd9e:	a101      	add	r1, pc, #4	@ (adr r1, 800bda4 <_printf_i+0x40>)
 800bda0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bda4:	0800bdfd 	.word	0x0800bdfd
 800bda8:	0800be11 	.word	0x0800be11
 800bdac:	0800bd8d 	.word	0x0800bd8d
 800bdb0:	0800bd8d 	.word	0x0800bd8d
 800bdb4:	0800bd8d 	.word	0x0800bd8d
 800bdb8:	0800bd8d 	.word	0x0800bd8d
 800bdbc:	0800be11 	.word	0x0800be11
 800bdc0:	0800bd8d 	.word	0x0800bd8d
 800bdc4:	0800bd8d 	.word	0x0800bd8d
 800bdc8:	0800bd8d 	.word	0x0800bd8d
 800bdcc:	0800bd8d 	.word	0x0800bd8d
 800bdd0:	0800bf11 	.word	0x0800bf11
 800bdd4:	0800be3b 	.word	0x0800be3b
 800bdd8:	0800becb 	.word	0x0800becb
 800bddc:	0800bd8d 	.word	0x0800bd8d
 800bde0:	0800bd8d 	.word	0x0800bd8d
 800bde4:	0800bf33 	.word	0x0800bf33
 800bde8:	0800bd8d 	.word	0x0800bd8d
 800bdec:	0800be3b 	.word	0x0800be3b
 800bdf0:	0800bd8d 	.word	0x0800bd8d
 800bdf4:	0800bd8d 	.word	0x0800bd8d
 800bdf8:	0800bed3 	.word	0x0800bed3
 800bdfc:	6833      	ldr	r3, [r6, #0]
 800bdfe:	1d1a      	adds	r2, r3, #4
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6032      	str	r2, [r6, #0]
 800be04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be0c:	2301      	movs	r3, #1
 800be0e:	e09d      	b.n	800bf4c <_printf_i+0x1e8>
 800be10:	6833      	ldr	r3, [r6, #0]
 800be12:	6820      	ldr	r0, [r4, #0]
 800be14:	1d19      	adds	r1, r3, #4
 800be16:	6031      	str	r1, [r6, #0]
 800be18:	0606      	lsls	r6, r0, #24
 800be1a:	d501      	bpl.n	800be20 <_printf_i+0xbc>
 800be1c:	681d      	ldr	r5, [r3, #0]
 800be1e:	e003      	b.n	800be28 <_printf_i+0xc4>
 800be20:	0645      	lsls	r5, r0, #25
 800be22:	d5fb      	bpl.n	800be1c <_printf_i+0xb8>
 800be24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be28:	2d00      	cmp	r5, #0
 800be2a:	da03      	bge.n	800be34 <_printf_i+0xd0>
 800be2c:	232d      	movs	r3, #45	@ 0x2d
 800be2e:	426d      	negs	r5, r5
 800be30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be34:	4859      	ldr	r0, [pc, #356]	@ (800bf9c <_printf_i+0x238>)
 800be36:	230a      	movs	r3, #10
 800be38:	e011      	b.n	800be5e <_printf_i+0xfa>
 800be3a:	6821      	ldr	r1, [r4, #0]
 800be3c:	6833      	ldr	r3, [r6, #0]
 800be3e:	0608      	lsls	r0, r1, #24
 800be40:	f853 5b04 	ldr.w	r5, [r3], #4
 800be44:	d402      	bmi.n	800be4c <_printf_i+0xe8>
 800be46:	0649      	lsls	r1, r1, #25
 800be48:	bf48      	it	mi
 800be4a:	b2ad      	uxthmi	r5, r5
 800be4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800be4e:	4853      	ldr	r0, [pc, #332]	@ (800bf9c <_printf_i+0x238>)
 800be50:	6033      	str	r3, [r6, #0]
 800be52:	bf14      	ite	ne
 800be54:	230a      	movne	r3, #10
 800be56:	2308      	moveq	r3, #8
 800be58:	2100      	movs	r1, #0
 800be5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be5e:	6866      	ldr	r6, [r4, #4]
 800be60:	60a6      	str	r6, [r4, #8]
 800be62:	2e00      	cmp	r6, #0
 800be64:	bfa2      	ittt	ge
 800be66:	6821      	ldrge	r1, [r4, #0]
 800be68:	f021 0104 	bicge.w	r1, r1, #4
 800be6c:	6021      	strge	r1, [r4, #0]
 800be6e:	b90d      	cbnz	r5, 800be74 <_printf_i+0x110>
 800be70:	2e00      	cmp	r6, #0
 800be72:	d04b      	beq.n	800bf0c <_printf_i+0x1a8>
 800be74:	4616      	mov	r6, r2
 800be76:	fbb5 f1f3 	udiv	r1, r5, r3
 800be7a:	fb03 5711 	mls	r7, r3, r1, r5
 800be7e:	5dc7      	ldrb	r7, [r0, r7]
 800be80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be84:	462f      	mov	r7, r5
 800be86:	42bb      	cmp	r3, r7
 800be88:	460d      	mov	r5, r1
 800be8a:	d9f4      	bls.n	800be76 <_printf_i+0x112>
 800be8c:	2b08      	cmp	r3, #8
 800be8e:	d10b      	bne.n	800bea8 <_printf_i+0x144>
 800be90:	6823      	ldr	r3, [r4, #0]
 800be92:	07df      	lsls	r7, r3, #31
 800be94:	d508      	bpl.n	800bea8 <_printf_i+0x144>
 800be96:	6923      	ldr	r3, [r4, #16]
 800be98:	6861      	ldr	r1, [r4, #4]
 800be9a:	4299      	cmp	r1, r3
 800be9c:	bfde      	ittt	le
 800be9e:	2330      	movle	r3, #48	@ 0x30
 800bea0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bea4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bea8:	1b92      	subs	r2, r2, r6
 800beaa:	6122      	str	r2, [r4, #16]
 800beac:	f8cd a000 	str.w	sl, [sp]
 800beb0:	464b      	mov	r3, r9
 800beb2:	aa03      	add	r2, sp, #12
 800beb4:	4621      	mov	r1, r4
 800beb6:	4640      	mov	r0, r8
 800beb8:	f7ff fee6 	bl	800bc88 <_printf_common>
 800bebc:	3001      	adds	r0, #1
 800bebe:	d14a      	bne.n	800bf56 <_printf_i+0x1f2>
 800bec0:	f04f 30ff 	mov.w	r0, #4294967295
 800bec4:	b004      	add	sp, #16
 800bec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	f043 0320 	orr.w	r3, r3, #32
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	4833      	ldr	r0, [pc, #204]	@ (800bfa0 <_printf_i+0x23c>)
 800bed4:	2778      	movs	r7, #120	@ 0x78
 800bed6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	6831      	ldr	r1, [r6, #0]
 800bede:	061f      	lsls	r7, r3, #24
 800bee0:	f851 5b04 	ldr.w	r5, [r1], #4
 800bee4:	d402      	bmi.n	800beec <_printf_i+0x188>
 800bee6:	065f      	lsls	r7, r3, #25
 800bee8:	bf48      	it	mi
 800beea:	b2ad      	uxthmi	r5, r5
 800beec:	6031      	str	r1, [r6, #0]
 800beee:	07d9      	lsls	r1, r3, #31
 800bef0:	bf44      	itt	mi
 800bef2:	f043 0320 	orrmi.w	r3, r3, #32
 800bef6:	6023      	strmi	r3, [r4, #0]
 800bef8:	b11d      	cbz	r5, 800bf02 <_printf_i+0x19e>
 800befa:	2310      	movs	r3, #16
 800befc:	e7ac      	b.n	800be58 <_printf_i+0xf4>
 800befe:	4827      	ldr	r0, [pc, #156]	@ (800bf9c <_printf_i+0x238>)
 800bf00:	e7e9      	b.n	800bed6 <_printf_i+0x172>
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	f023 0320 	bic.w	r3, r3, #32
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	e7f6      	b.n	800befa <_printf_i+0x196>
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	e7bd      	b.n	800be8c <_printf_i+0x128>
 800bf10:	6833      	ldr	r3, [r6, #0]
 800bf12:	6825      	ldr	r5, [r4, #0]
 800bf14:	6961      	ldr	r1, [r4, #20]
 800bf16:	1d18      	adds	r0, r3, #4
 800bf18:	6030      	str	r0, [r6, #0]
 800bf1a:	062e      	lsls	r6, r5, #24
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	d501      	bpl.n	800bf24 <_printf_i+0x1c0>
 800bf20:	6019      	str	r1, [r3, #0]
 800bf22:	e002      	b.n	800bf2a <_printf_i+0x1c6>
 800bf24:	0668      	lsls	r0, r5, #25
 800bf26:	d5fb      	bpl.n	800bf20 <_printf_i+0x1bc>
 800bf28:	8019      	strh	r1, [r3, #0]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	6123      	str	r3, [r4, #16]
 800bf2e:	4616      	mov	r6, r2
 800bf30:	e7bc      	b.n	800beac <_printf_i+0x148>
 800bf32:	6833      	ldr	r3, [r6, #0]
 800bf34:	1d1a      	adds	r2, r3, #4
 800bf36:	6032      	str	r2, [r6, #0]
 800bf38:	681e      	ldr	r6, [r3, #0]
 800bf3a:	6862      	ldr	r2, [r4, #4]
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7f4 f946 	bl	80001d0 <memchr>
 800bf44:	b108      	cbz	r0, 800bf4a <_printf_i+0x1e6>
 800bf46:	1b80      	subs	r0, r0, r6
 800bf48:	6060      	str	r0, [r4, #4]
 800bf4a:	6863      	ldr	r3, [r4, #4]
 800bf4c:	6123      	str	r3, [r4, #16]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf54:	e7aa      	b.n	800beac <_printf_i+0x148>
 800bf56:	6923      	ldr	r3, [r4, #16]
 800bf58:	4632      	mov	r2, r6
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	47d0      	blx	sl
 800bf60:	3001      	adds	r0, #1
 800bf62:	d0ad      	beq.n	800bec0 <_printf_i+0x15c>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	079b      	lsls	r3, r3, #30
 800bf68:	d413      	bmi.n	800bf92 <_printf_i+0x22e>
 800bf6a:	68e0      	ldr	r0, [r4, #12]
 800bf6c:	9b03      	ldr	r3, [sp, #12]
 800bf6e:	4298      	cmp	r0, r3
 800bf70:	bfb8      	it	lt
 800bf72:	4618      	movlt	r0, r3
 800bf74:	e7a6      	b.n	800bec4 <_printf_i+0x160>
 800bf76:	2301      	movs	r3, #1
 800bf78:	4632      	mov	r2, r6
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	4640      	mov	r0, r8
 800bf7e:	47d0      	blx	sl
 800bf80:	3001      	adds	r0, #1
 800bf82:	d09d      	beq.n	800bec0 <_printf_i+0x15c>
 800bf84:	3501      	adds	r5, #1
 800bf86:	68e3      	ldr	r3, [r4, #12]
 800bf88:	9903      	ldr	r1, [sp, #12]
 800bf8a:	1a5b      	subs	r3, r3, r1
 800bf8c:	42ab      	cmp	r3, r5
 800bf8e:	dcf2      	bgt.n	800bf76 <_printf_i+0x212>
 800bf90:	e7eb      	b.n	800bf6a <_printf_i+0x206>
 800bf92:	2500      	movs	r5, #0
 800bf94:	f104 0619 	add.w	r6, r4, #25
 800bf98:	e7f5      	b.n	800bf86 <_printf_i+0x222>
 800bf9a:	bf00      	nop
 800bf9c:	0800fb16 	.word	0x0800fb16
 800bfa0:	0800fb27 	.word	0x0800fb27

0800bfa4 <std>:
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	b510      	push	{r4, lr}
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	e9c0 3300 	strd	r3, r3, [r0]
 800bfae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfb2:	6083      	str	r3, [r0, #8]
 800bfb4:	8181      	strh	r1, [r0, #12]
 800bfb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bfb8:	81c2      	strh	r2, [r0, #14]
 800bfba:	6183      	str	r3, [r0, #24]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	2208      	movs	r2, #8
 800bfc0:	305c      	adds	r0, #92	@ 0x5c
 800bfc2:	f000 f914 	bl	800c1ee <memset>
 800bfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bffc <std+0x58>)
 800bfc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bfca:	4b0d      	ldr	r3, [pc, #52]	@ (800c000 <std+0x5c>)
 800bfcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bfce:	4b0d      	ldr	r3, [pc, #52]	@ (800c004 <std+0x60>)
 800bfd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bfd2:	4b0d      	ldr	r3, [pc, #52]	@ (800c008 <std+0x64>)
 800bfd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bfd6:	4b0d      	ldr	r3, [pc, #52]	@ (800c00c <std+0x68>)
 800bfd8:	6224      	str	r4, [r4, #32]
 800bfda:	429c      	cmp	r4, r3
 800bfdc:	d006      	beq.n	800bfec <std+0x48>
 800bfde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bfe2:	4294      	cmp	r4, r2
 800bfe4:	d002      	beq.n	800bfec <std+0x48>
 800bfe6:	33d0      	adds	r3, #208	@ 0xd0
 800bfe8:	429c      	cmp	r4, r3
 800bfea:	d105      	bne.n	800bff8 <std+0x54>
 800bfec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bff4:	f000 b978 	b.w	800c2e8 <__retarget_lock_init_recursive>
 800bff8:	bd10      	pop	{r4, pc}
 800bffa:	bf00      	nop
 800bffc:	0800c169 	.word	0x0800c169
 800c000:	0800c18b 	.word	0x0800c18b
 800c004:	0800c1c3 	.word	0x0800c1c3
 800c008:	0800c1e7 	.word	0x0800c1e7
 800c00c:	200020fc 	.word	0x200020fc

0800c010 <stdio_exit_handler>:
 800c010:	4a02      	ldr	r2, [pc, #8]	@ (800c01c <stdio_exit_handler+0xc>)
 800c012:	4903      	ldr	r1, [pc, #12]	@ (800c020 <stdio_exit_handler+0x10>)
 800c014:	4803      	ldr	r0, [pc, #12]	@ (800c024 <stdio_exit_handler+0x14>)
 800c016:	f000 b869 	b.w	800c0ec <_fwalk_sglue>
 800c01a:	bf00      	nop
 800c01c:	200000fc 	.word	0x200000fc
 800c020:	0800dc45 	.word	0x0800dc45
 800c024:	2000010c 	.word	0x2000010c

0800c028 <cleanup_stdio>:
 800c028:	6841      	ldr	r1, [r0, #4]
 800c02a:	4b0c      	ldr	r3, [pc, #48]	@ (800c05c <cleanup_stdio+0x34>)
 800c02c:	4299      	cmp	r1, r3
 800c02e:	b510      	push	{r4, lr}
 800c030:	4604      	mov	r4, r0
 800c032:	d001      	beq.n	800c038 <cleanup_stdio+0x10>
 800c034:	f001 fe06 	bl	800dc44 <_fflush_r>
 800c038:	68a1      	ldr	r1, [r4, #8]
 800c03a:	4b09      	ldr	r3, [pc, #36]	@ (800c060 <cleanup_stdio+0x38>)
 800c03c:	4299      	cmp	r1, r3
 800c03e:	d002      	beq.n	800c046 <cleanup_stdio+0x1e>
 800c040:	4620      	mov	r0, r4
 800c042:	f001 fdff 	bl	800dc44 <_fflush_r>
 800c046:	68e1      	ldr	r1, [r4, #12]
 800c048:	4b06      	ldr	r3, [pc, #24]	@ (800c064 <cleanup_stdio+0x3c>)
 800c04a:	4299      	cmp	r1, r3
 800c04c:	d004      	beq.n	800c058 <cleanup_stdio+0x30>
 800c04e:	4620      	mov	r0, r4
 800c050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c054:	f001 bdf6 	b.w	800dc44 <_fflush_r>
 800c058:	bd10      	pop	{r4, pc}
 800c05a:	bf00      	nop
 800c05c:	200020fc 	.word	0x200020fc
 800c060:	20002164 	.word	0x20002164
 800c064:	200021cc 	.word	0x200021cc

0800c068 <global_stdio_init.part.0>:
 800c068:	b510      	push	{r4, lr}
 800c06a:	4b0b      	ldr	r3, [pc, #44]	@ (800c098 <global_stdio_init.part.0+0x30>)
 800c06c:	4c0b      	ldr	r4, [pc, #44]	@ (800c09c <global_stdio_init.part.0+0x34>)
 800c06e:	4a0c      	ldr	r2, [pc, #48]	@ (800c0a0 <global_stdio_init.part.0+0x38>)
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	4620      	mov	r0, r4
 800c074:	2200      	movs	r2, #0
 800c076:	2104      	movs	r1, #4
 800c078:	f7ff ff94 	bl	800bfa4 <std>
 800c07c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c080:	2201      	movs	r2, #1
 800c082:	2109      	movs	r1, #9
 800c084:	f7ff ff8e 	bl	800bfa4 <std>
 800c088:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c08c:	2202      	movs	r2, #2
 800c08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c092:	2112      	movs	r1, #18
 800c094:	f7ff bf86 	b.w	800bfa4 <std>
 800c098:	20002234 	.word	0x20002234
 800c09c:	200020fc 	.word	0x200020fc
 800c0a0:	0800c011 	.word	0x0800c011

0800c0a4 <__sfp_lock_acquire>:
 800c0a4:	4801      	ldr	r0, [pc, #4]	@ (800c0ac <__sfp_lock_acquire+0x8>)
 800c0a6:	f000 b920 	b.w	800c2ea <__retarget_lock_acquire_recursive>
 800c0aa:	bf00      	nop
 800c0ac:	2000223d 	.word	0x2000223d

0800c0b0 <__sfp_lock_release>:
 800c0b0:	4801      	ldr	r0, [pc, #4]	@ (800c0b8 <__sfp_lock_release+0x8>)
 800c0b2:	f000 b91b 	b.w	800c2ec <__retarget_lock_release_recursive>
 800c0b6:	bf00      	nop
 800c0b8:	2000223d 	.word	0x2000223d

0800c0bc <__sinit>:
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	4604      	mov	r4, r0
 800c0c0:	f7ff fff0 	bl	800c0a4 <__sfp_lock_acquire>
 800c0c4:	6a23      	ldr	r3, [r4, #32]
 800c0c6:	b11b      	cbz	r3, 800c0d0 <__sinit+0x14>
 800c0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0cc:	f7ff bff0 	b.w	800c0b0 <__sfp_lock_release>
 800c0d0:	4b04      	ldr	r3, [pc, #16]	@ (800c0e4 <__sinit+0x28>)
 800c0d2:	6223      	str	r3, [r4, #32]
 800c0d4:	4b04      	ldr	r3, [pc, #16]	@ (800c0e8 <__sinit+0x2c>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1f5      	bne.n	800c0c8 <__sinit+0xc>
 800c0dc:	f7ff ffc4 	bl	800c068 <global_stdio_init.part.0>
 800c0e0:	e7f2      	b.n	800c0c8 <__sinit+0xc>
 800c0e2:	bf00      	nop
 800c0e4:	0800c029 	.word	0x0800c029
 800c0e8:	20002234 	.word	0x20002234

0800c0ec <_fwalk_sglue>:
 800c0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	4688      	mov	r8, r1
 800c0f4:	4614      	mov	r4, r2
 800c0f6:	2600      	movs	r6, #0
 800c0f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0fc:	f1b9 0901 	subs.w	r9, r9, #1
 800c100:	d505      	bpl.n	800c10e <_fwalk_sglue+0x22>
 800c102:	6824      	ldr	r4, [r4, #0]
 800c104:	2c00      	cmp	r4, #0
 800c106:	d1f7      	bne.n	800c0f8 <_fwalk_sglue+0xc>
 800c108:	4630      	mov	r0, r6
 800c10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c10e:	89ab      	ldrh	r3, [r5, #12]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d907      	bls.n	800c124 <_fwalk_sglue+0x38>
 800c114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c118:	3301      	adds	r3, #1
 800c11a:	d003      	beq.n	800c124 <_fwalk_sglue+0x38>
 800c11c:	4629      	mov	r1, r5
 800c11e:	4638      	mov	r0, r7
 800c120:	47c0      	blx	r8
 800c122:	4306      	orrs	r6, r0
 800c124:	3568      	adds	r5, #104	@ 0x68
 800c126:	e7e9      	b.n	800c0fc <_fwalk_sglue+0x10>

0800c128 <siprintf>:
 800c128:	b40e      	push	{r1, r2, r3}
 800c12a:	b500      	push	{lr}
 800c12c:	b09c      	sub	sp, #112	@ 0x70
 800c12e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c130:	9002      	str	r0, [sp, #8]
 800c132:	9006      	str	r0, [sp, #24]
 800c134:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c138:	4809      	ldr	r0, [pc, #36]	@ (800c160 <siprintf+0x38>)
 800c13a:	9107      	str	r1, [sp, #28]
 800c13c:	9104      	str	r1, [sp, #16]
 800c13e:	4909      	ldr	r1, [pc, #36]	@ (800c164 <siprintf+0x3c>)
 800c140:	f853 2b04 	ldr.w	r2, [r3], #4
 800c144:	9105      	str	r1, [sp, #20]
 800c146:	6800      	ldr	r0, [r0, #0]
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	a902      	add	r1, sp, #8
 800c14c:	f001 fbfa 	bl	800d944 <_svfiprintf_r>
 800c150:	9b02      	ldr	r3, [sp, #8]
 800c152:	2200      	movs	r2, #0
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	b01c      	add	sp, #112	@ 0x70
 800c158:	f85d eb04 	ldr.w	lr, [sp], #4
 800c15c:	b003      	add	sp, #12
 800c15e:	4770      	bx	lr
 800c160:	20000108 	.word	0x20000108
 800c164:	ffff0208 	.word	0xffff0208

0800c168 <__sread>:
 800c168:	b510      	push	{r4, lr}
 800c16a:	460c      	mov	r4, r1
 800c16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c170:	f000 f86c 	bl	800c24c <_read_r>
 800c174:	2800      	cmp	r0, #0
 800c176:	bfab      	itete	ge
 800c178:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c17a:	89a3      	ldrhlt	r3, [r4, #12]
 800c17c:	181b      	addge	r3, r3, r0
 800c17e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c182:	bfac      	ite	ge
 800c184:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c186:	81a3      	strhlt	r3, [r4, #12]
 800c188:	bd10      	pop	{r4, pc}

0800c18a <__swrite>:
 800c18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c18e:	461f      	mov	r7, r3
 800c190:	898b      	ldrh	r3, [r1, #12]
 800c192:	05db      	lsls	r3, r3, #23
 800c194:	4605      	mov	r5, r0
 800c196:	460c      	mov	r4, r1
 800c198:	4616      	mov	r6, r2
 800c19a:	d505      	bpl.n	800c1a8 <__swrite+0x1e>
 800c19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f000 f840 	bl	800c228 <_lseek_r>
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	463b      	mov	r3, r7
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1be:	f000 b857 	b.w	800c270 <_write_r>

0800c1c2 <__sseek>:
 800c1c2:	b510      	push	{r4, lr}
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ca:	f000 f82d 	bl	800c228 <_lseek_r>
 800c1ce:	1c43      	adds	r3, r0, #1
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	bf15      	itete	ne
 800c1d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1de:	81a3      	strheq	r3, [r4, #12]
 800c1e0:	bf18      	it	ne
 800c1e2:	81a3      	strhne	r3, [r4, #12]
 800c1e4:	bd10      	pop	{r4, pc}

0800c1e6 <__sclose>:
 800c1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ea:	f000 b80d 	b.w	800c208 <_close_r>

0800c1ee <memset>:
 800c1ee:	4402      	add	r2, r0
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d100      	bne.n	800c1f8 <memset+0xa>
 800c1f6:	4770      	bx	lr
 800c1f8:	f803 1b01 	strb.w	r1, [r3], #1
 800c1fc:	e7f9      	b.n	800c1f2 <memset+0x4>
	...

0800c200 <_localeconv_r>:
 800c200:	4800      	ldr	r0, [pc, #0]	@ (800c204 <_localeconv_r+0x4>)
 800c202:	4770      	bx	lr
 800c204:	20000248 	.word	0x20000248

0800c208 <_close_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4d06      	ldr	r5, [pc, #24]	@ (800c224 <_close_r+0x1c>)
 800c20c:	2300      	movs	r3, #0
 800c20e:	4604      	mov	r4, r0
 800c210:	4608      	mov	r0, r1
 800c212:	602b      	str	r3, [r5, #0]
 800c214:	f7f7 fc02 	bl	8003a1c <_close>
 800c218:	1c43      	adds	r3, r0, #1
 800c21a:	d102      	bne.n	800c222 <_close_r+0x1a>
 800c21c:	682b      	ldr	r3, [r5, #0]
 800c21e:	b103      	cbz	r3, 800c222 <_close_r+0x1a>
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	20002238 	.word	0x20002238

0800c228 <_lseek_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4d07      	ldr	r5, [pc, #28]	@ (800c248 <_lseek_r+0x20>)
 800c22c:	4604      	mov	r4, r0
 800c22e:	4608      	mov	r0, r1
 800c230:	4611      	mov	r1, r2
 800c232:	2200      	movs	r2, #0
 800c234:	602a      	str	r2, [r5, #0]
 800c236:	461a      	mov	r2, r3
 800c238:	f7f7 fc17 	bl	8003a6a <_lseek>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d102      	bne.n	800c246 <_lseek_r+0x1e>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	b103      	cbz	r3, 800c246 <_lseek_r+0x1e>
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	20002238 	.word	0x20002238

0800c24c <_read_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4d07      	ldr	r5, [pc, #28]	@ (800c26c <_read_r+0x20>)
 800c250:	4604      	mov	r4, r0
 800c252:	4608      	mov	r0, r1
 800c254:	4611      	mov	r1, r2
 800c256:	2200      	movs	r2, #0
 800c258:	602a      	str	r2, [r5, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	f7f7 fba5 	bl	80039aa <_read>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_read_r+0x1e>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_read_r+0x1e>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	20002238 	.word	0x20002238

0800c270 <_write_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4d07      	ldr	r5, [pc, #28]	@ (800c290 <_write_r+0x20>)
 800c274:	4604      	mov	r4, r0
 800c276:	4608      	mov	r0, r1
 800c278:	4611      	mov	r1, r2
 800c27a:	2200      	movs	r2, #0
 800c27c:	602a      	str	r2, [r5, #0]
 800c27e:	461a      	mov	r2, r3
 800c280:	f7f7 fbb0 	bl	80039e4 <_write>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d102      	bne.n	800c28e <_write_r+0x1e>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	b103      	cbz	r3, 800c28e <_write_r+0x1e>
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	20002238 	.word	0x20002238

0800c294 <__errno>:
 800c294:	4b01      	ldr	r3, [pc, #4]	@ (800c29c <__errno+0x8>)
 800c296:	6818      	ldr	r0, [r3, #0]
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	20000108 	.word	0x20000108

0800c2a0 <__libc_init_array>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	4d0d      	ldr	r5, [pc, #52]	@ (800c2d8 <__libc_init_array+0x38>)
 800c2a4:	4c0d      	ldr	r4, [pc, #52]	@ (800c2dc <__libc_init_array+0x3c>)
 800c2a6:	1b64      	subs	r4, r4, r5
 800c2a8:	10a4      	asrs	r4, r4, #2
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	42a6      	cmp	r6, r4
 800c2ae:	d109      	bne.n	800c2c4 <__libc_init_array+0x24>
 800c2b0:	4d0b      	ldr	r5, [pc, #44]	@ (800c2e0 <__libc_init_array+0x40>)
 800c2b2:	4c0c      	ldr	r4, [pc, #48]	@ (800c2e4 <__libc_init_array+0x44>)
 800c2b4:	f003 fbcc 	bl	800fa50 <_init>
 800c2b8:	1b64      	subs	r4, r4, r5
 800c2ba:	10a4      	asrs	r4, r4, #2
 800c2bc:	2600      	movs	r6, #0
 800c2be:	42a6      	cmp	r6, r4
 800c2c0:	d105      	bne.n	800c2ce <__libc_init_array+0x2e>
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c8:	4798      	blx	r3
 800c2ca:	3601      	adds	r6, #1
 800c2cc:	e7ee      	b.n	800c2ac <__libc_init_array+0xc>
 800c2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2d2:	4798      	blx	r3
 800c2d4:	3601      	adds	r6, #1
 800c2d6:	e7f2      	b.n	800c2be <__libc_init_array+0x1e>
 800c2d8:	080102a0 	.word	0x080102a0
 800c2dc:	080102a0 	.word	0x080102a0
 800c2e0:	080102a0 	.word	0x080102a0
 800c2e4:	080102a4 	.word	0x080102a4

0800c2e8 <__retarget_lock_init_recursive>:
 800c2e8:	4770      	bx	lr

0800c2ea <__retarget_lock_acquire_recursive>:
 800c2ea:	4770      	bx	lr

0800c2ec <__retarget_lock_release_recursive>:
 800c2ec:	4770      	bx	lr

0800c2ee <quorem>:
 800c2ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f2:	6903      	ldr	r3, [r0, #16]
 800c2f4:	690c      	ldr	r4, [r1, #16]
 800c2f6:	42a3      	cmp	r3, r4
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	db7e      	blt.n	800c3fa <quorem+0x10c>
 800c2fc:	3c01      	subs	r4, #1
 800c2fe:	f101 0814 	add.w	r8, r1, #20
 800c302:	00a3      	lsls	r3, r4, #2
 800c304:	f100 0514 	add.w	r5, r0, #20
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c30e:	9301      	str	r3, [sp, #4]
 800c310:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c314:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c318:	3301      	adds	r3, #1
 800c31a:	429a      	cmp	r2, r3
 800c31c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c320:	fbb2 f6f3 	udiv	r6, r2, r3
 800c324:	d32e      	bcc.n	800c384 <quorem+0x96>
 800c326:	f04f 0a00 	mov.w	sl, #0
 800c32a:	46c4      	mov	ip, r8
 800c32c:	46ae      	mov	lr, r5
 800c32e:	46d3      	mov	fp, sl
 800c330:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c334:	b298      	uxth	r0, r3
 800c336:	fb06 a000 	mla	r0, r6, r0, sl
 800c33a:	0c02      	lsrs	r2, r0, #16
 800c33c:	0c1b      	lsrs	r3, r3, #16
 800c33e:	fb06 2303 	mla	r3, r6, r3, r2
 800c342:	f8de 2000 	ldr.w	r2, [lr]
 800c346:	b280      	uxth	r0, r0
 800c348:	b292      	uxth	r2, r2
 800c34a:	1a12      	subs	r2, r2, r0
 800c34c:	445a      	add	r2, fp
 800c34e:	f8de 0000 	ldr.w	r0, [lr]
 800c352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c356:	b29b      	uxth	r3, r3
 800c358:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c35c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c360:	b292      	uxth	r2, r2
 800c362:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c366:	45e1      	cmp	r9, ip
 800c368:	f84e 2b04 	str.w	r2, [lr], #4
 800c36c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c370:	d2de      	bcs.n	800c330 <quorem+0x42>
 800c372:	9b00      	ldr	r3, [sp, #0]
 800c374:	58eb      	ldr	r3, [r5, r3]
 800c376:	b92b      	cbnz	r3, 800c384 <quorem+0x96>
 800c378:	9b01      	ldr	r3, [sp, #4]
 800c37a:	3b04      	subs	r3, #4
 800c37c:	429d      	cmp	r5, r3
 800c37e:	461a      	mov	r2, r3
 800c380:	d32f      	bcc.n	800c3e2 <quorem+0xf4>
 800c382:	613c      	str	r4, [r7, #16]
 800c384:	4638      	mov	r0, r7
 800c386:	f001 f979 	bl	800d67c <__mcmp>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	db25      	blt.n	800c3da <quorem+0xec>
 800c38e:	4629      	mov	r1, r5
 800c390:	2000      	movs	r0, #0
 800c392:	f858 2b04 	ldr.w	r2, [r8], #4
 800c396:	f8d1 c000 	ldr.w	ip, [r1]
 800c39a:	fa1f fe82 	uxth.w	lr, r2
 800c39e:	fa1f f38c 	uxth.w	r3, ip
 800c3a2:	eba3 030e 	sub.w	r3, r3, lr
 800c3a6:	4403      	add	r3, r0
 800c3a8:	0c12      	lsrs	r2, r2, #16
 800c3aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c3ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3b8:	45c1      	cmp	r9, r8
 800c3ba:	f841 3b04 	str.w	r3, [r1], #4
 800c3be:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c3c2:	d2e6      	bcs.n	800c392 <quorem+0xa4>
 800c3c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3cc:	b922      	cbnz	r2, 800c3d8 <quorem+0xea>
 800c3ce:	3b04      	subs	r3, #4
 800c3d0:	429d      	cmp	r5, r3
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	d30b      	bcc.n	800c3ee <quorem+0x100>
 800c3d6:	613c      	str	r4, [r7, #16]
 800c3d8:	3601      	adds	r6, #1
 800c3da:	4630      	mov	r0, r6
 800c3dc:	b003      	add	sp, #12
 800c3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e2:	6812      	ldr	r2, [r2, #0]
 800c3e4:	3b04      	subs	r3, #4
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	d1cb      	bne.n	800c382 <quorem+0x94>
 800c3ea:	3c01      	subs	r4, #1
 800c3ec:	e7c6      	b.n	800c37c <quorem+0x8e>
 800c3ee:	6812      	ldr	r2, [r2, #0]
 800c3f0:	3b04      	subs	r3, #4
 800c3f2:	2a00      	cmp	r2, #0
 800c3f4:	d1ef      	bne.n	800c3d6 <quorem+0xe8>
 800c3f6:	3c01      	subs	r4, #1
 800c3f8:	e7ea      	b.n	800c3d0 <quorem+0xe2>
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	e7ee      	b.n	800c3dc <quorem+0xee>
	...

0800c400 <_dtoa_r>:
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	69c7      	ldr	r7, [r0, #28]
 800c406:	b099      	sub	sp, #100	@ 0x64
 800c408:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c40c:	ec55 4b10 	vmov	r4, r5, d0
 800c410:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c412:	9109      	str	r1, [sp, #36]	@ 0x24
 800c414:	4683      	mov	fp, r0
 800c416:	920e      	str	r2, [sp, #56]	@ 0x38
 800c418:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c41a:	b97f      	cbnz	r7, 800c43c <_dtoa_r+0x3c>
 800c41c:	2010      	movs	r0, #16
 800c41e:	f000 fdfd 	bl	800d01c <malloc>
 800c422:	4602      	mov	r2, r0
 800c424:	f8cb 001c 	str.w	r0, [fp, #28]
 800c428:	b920      	cbnz	r0, 800c434 <_dtoa_r+0x34>
 800c42a:	4ba7      	ldr	r3, [pc, #668]	@ (800c6c8 <_dtoa_r+0x2c8>)
 800c42c:	21ef      	movs	r1, #239	@ 0xef
 800c42e:	48a7      	ldr	r0, [pc, #668]	@ (800c6cc <_dtoa_r+0x2cc>)
 800c430:	f001 fc68 	bl	800dd04 <__assert_func>
 800c434:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c438:	6007      	str	r7, [r0, #0]
 800c43a:	60c7      	str	r7, [r0, #12]
 800c43c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c440:	6819      	ldr	r1, [r3, #0]
 800c442:	b159      	cbz	r1, 800c45c <_dtoa_r+0x5c>
 800c444:	685a      	ldr	r2, [r3, #4]
 800c446:	604a      	str	r2, [r1, #4]
 800c448:	2301      	movs	r3, #1
 800c44a:	4093      	lsls	r3, r2
 800c44c:	608b      	str	r3, [r1, #8]
 800c44e:	4658      	mov	r0, fp
 800c450:	f000 feda 	bl	800d208 <_Bfree>
 800c454:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	1e2b      	subs	r3, r5, #0
 800c45e:	bfb9      	ittee	lt
 800c460:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c464:	9303      	strlt	r3, [sp, #12]
 800c466:	2300      	movge	r3, #0
 800c468:	6033      	strge	r3, [r6, #0]
 800c46a:	9f03      	ldr	r7, [sp, #12]
 800c46c:	4b98      	ldr	r3, [pc, #608]	@ (800c6d0 <_dtoa_r+0x2d0>)
 800c46e:	bfbc      	itt	lt
 800c470:	2201      	movlt	r2, #1
 800c472:	6032      	strlt	r2, [r6, #0]
 800c474:	43bb      	bics	r3, r7
 800c476:	d112      	bne.n	800c49e <_dtoa_r+0x9e>
 800c478:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c47a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c484:	4323      	orrs	r3, r4
 800c486:	f000 854d 	beq.w	800cf24 <_dtoa_r+0xb24>
 800c48a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c48c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c6e4 <_dtoa_r+0x2e4>
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 854f 	beq.w	800cf34 <_dtoa_r+0xb34>
 800c496:	f10a 0303 	add.w	r3, sl, #3
 800c49a:	f000 bd49 	b.w	800cf30 <_dtoa_r+0xb30>
 800c49e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	ec51 0b17 	vmov	r0, r1, d7
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c4ae:	f7f4 fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4b2:	4680      	mov	r8, r0
 800c4b4:	b158      	cbz	r0, 800c4ce <_dtoa_r+0xce>
 800c4b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4be:	b113      	cbz	r3, 800c4c6 <_dtoa_r+0xc6>
 800c4c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c4c2:	4b84      	ldr	r3, [pc, #528]	@ (800c6d4 <_dtoa_r+0x2d4>)
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c6e8 <_dtoa_r+0x2e8>
 800c4ca:	f000 bd33 	b.w	800cf34 <_dtoa_r+0xb34>
 800c4ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c4d2:	aa16      	add	r2, sp, #88	@ 0x58
 800c4d4:	a917      	add	r1, sp, #92	@ 0x5c
 800c4d6:	4658      	mov	r0, fp
 800c4d8:	f001 f980 	bl	800d7dc <__d2b>
 800c4dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c4e0:	4681      	mov	r9, r0
 800c4e2:	2e00      	cmp	r6, #0
 800c4e4:	d077      	beq.n	800c5d6 <_dtoa_r+0x1d6>
 800c4e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c4ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c4f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c4fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c500:	4619      	mov	r1, r3
 800c502:	2200      	movs	r2, #0
 800c504:	4b74      	ldr	r3, [pc, #464]	@ (800c6d8 <_dtoa_r+0x2d8>)
 800c506:	f7f3 febf 	bl	8000288 <__aeabi_dsub>
 800c50a:	a369      	add	r3, pc, #420	@ (adr r3, 800c6b0 <_dtoa_r+0x2b0>)
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f7f4 f872 	bl	80005f8 <__aeabi_dmul>
 800c514:	a368      	add	r3, pc, #416	@ (adr r3, 800c6b8 <_dtoa_r+0x2b8>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f3 feb7 	bl	800028c <__adddf3>
 800c51e:	4604      	mov	r4, r0
 800c520:	4630      	mov	r0, r6
 800c522:	460d      	mov	r5, r1
 800c524:	f7f3 fffe 	bl	8000524 <__aeabi_i2d>
 800c528:	a365      	add	r3, pc, #404	@ (adr r3, 800c6c0 <_dtoa_r+0x2c0>)
 800c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52e:	f7f4 f863 	bl	80005f8 <__aeabi_dmul>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4620      	mov	r0, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f3 fea7 	bl	800028c <__adddf3>
 800c53e:	4604      	mov	r4, r0
 800c540:	460d      	mov	r5, r1
 800c542:	f7f4 fb09 	bl	8000b58 <__aeabi_d2iz>
 800c546:	2200      	movs	r2, #0
 800c548:	4607      	mov	r7, r0
 800c54a:	2300      	movs	r3, #0
 800c54c:	4620      	mov	r0, r4
 800c54e:	4629      	mov	r1, r5
 800c550:	f7f4 fac4 	bl	8000adc <__aeabi_dcmplt>
 800c554:	b140      	cbz	r0, 800c568 <_dtoa_r+0x168>
 800c556:	4638      	mov	r0, r7
 800c558:	f7f3 ffe4 	bl	8000524 <__aeabi_i2d>
 800c55c:	4622      	mov	r2, r4
 800c55e:	462b      	mov	r3, r5
 800c560:	f7f4 fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c564:	b900      	cbnz	r0, 800c568 <_dtoa_r+0x168>
 800c566:	3f01      	subs	r7, #1
 800c568:	2f16      	cmp	r7, #22
 800c56a:	d851      	bhi.n	800c610 <_dtoa_r+0x210>
 800c56c:	4b5b      	ldr	r3, [pc, #364]	@ (800c6dc <_dtoa_r+0x2dc>)
 800c56e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c57a:	f7f4 faaf 	bl	8000adc <__aeabi_dcmplt>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d048      	beq.n	800c614 <_dtoa_r+0x214>
 800c582:	3f01      	subs	r7, #1
 800c584:	2300      	movs	r3, #0
 800c586:	9312      	str	r3, [sp, #72]	@ 0x48
 800c588:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c58a:	1b9b      	subs	r3, r3, r6
 800c58c:	1e5a      	subs	r2, r3, #1
 800c58e:	bf44      	itt	mi
 800c590:	f1c3 0801 	rsbmi	r8, r3, #1
 800c594:	2300      	movmi	r3, #0
 800c596:	9208      	str	r2, [sp, #32]
 800c598:	bf54      	ite	pl
 800c59a:	f04f 0800 	movpl.w	r8, #0
 800c59e:	9308      	strmi	r3, [sp, #32]
 800c5a0:	2f00      	cmp	r7, #0
 800c5a2:	db39      	blt.n	800c618 <_dtoa_r+0x218>
 800c5a4:	9b08      	ldr	r3, [sp, #32]
 800c5a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c5a8:	443b      	add	r3, r7
 800c5aa:	9308      	str	r3, [sp, #32]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b2:	2b09      	cmp	r3, #9
 800c5b4:	d864      	bhi.n	800c680 <_dtoa_r+0x280>
 800c5b6:	2b05      	cmp	r3, #5
 800c5b8:	bfc4      	itt	gt
 800c5ba:	3b04      	subgt	r3, #4
 800c5bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c0:	f1a3 0302 	sub.w	r3, r3, #2
 800c5c4:	bfcc      	ite	gt
 800c5c6:	2400      	movgt	r4, #0
 800c5c8:	2401      	movle	r4, #1
 800c5ca:	2b03      	cmp	r3, #3
 800c5cc:	d863      	bhi.n	800c696 <_dtoa_r+0x296>
 800c5ce:	e8df f003 	tbb	[pc, r3]
 800c5d2:	372a      	.short	0x372a
 800c5d4:	5535      	.short	0x5535
 800c5d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c5da:	441e      	add	r6, r3
 800c5dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c5e0:	2b20      	cmp	r3, #32
 800c5e2:	bfc1      	itttt	gt
 800c5e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c5e8:	409f      	lslgt	r7, r3
 800c5ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c5ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c5f2:	bfd6      	itet	le
 800c5f4:	f1c3 0320 	rsble	r3, r3, #32
 800c5f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c5fc:	fa04 f003 	lslle.w	r0, r4, r3
 800c600:	f7f3 ff80 	bl	8000504 <__aeabi_ui2d>
 800c604:	2201      	movs	r2, #1
 800c606:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c60a:	3e01      	subs	r6, #1
 800c60c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c60e:	e777      	b.n	800c500 <_dtoa_r+0x100>
 800c610:	2301      	movs	r3, #1
 800c612:	e7b8      	b.n	800c586 <_dtoa_r+0x186>
 800c614:	9012      	str	r0, [sp, #72]	@ 0x48
 800c616:	e7b7      	b.n	800c588 <_dtoa_r+0x188>
 800c618:	427b      	negs	r3, r7
 800c61a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c61c:	2300      	movs	r3, #0
 800c61e:	eba8 0807 	sub.w	r8, r8, r7
 800c622:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c624:	e7c4      	b.n	800c5b0 <_dtoa_r+0x1b0>
 800c626:	2300      	movs	r3, #0
 800c628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c62a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	dc35      	bgt.n	800c69c <_dtoa_r+0x29c>
 800c630:	2301      	movs	r3, #1
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	9307      	str	r3, [sp, #28]
 800c636:	461a      	mov	r2, r3
 800c638:	920e      	str	r2, [sp, #56]	@ 0x38
 800c63a:	e00b      	b.n	800c654 <_dtoa_r+0x254>
 800c63c:	2301      	movs	r3, #1
 800c63e:	e7f3      	b.n	800c628 <_dtoa_r+0x228>
 800c640:	2300      	movs	r3, #0
 800c642:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c646:	18fb      	adds	r3, r7, r3
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	3301      	adds	r3, #1
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	9307      	str	r3, [sp, #28]
 800c650:	bfb8      	it	lt
 800c652:	2301      	movlt	r3, #1
 800c654:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c658:	2100      	movs	r1, #0
 800c65a:	2204      	movs	r2, #4
 800c65c:	f102 0514 	add.w	r5, r2, #20
 800c660:	429d      	cmp	r5, r3
 800c662:	d91f      	bls.n	800c6a4 <_dtoa_r+0x2a4>
 800c664:	6041      	str	r1, [r0, #4]
 800c666:	4658      	mov	r0, fp
 800c668:	f000 fd8e 	bl	800d188 <_Balloc>
 800c66c:	4682      	mov	sl, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	d13c      	bne.n	800c6ec <_dtoa_r+0x2ec>
 800c672:	4b1b      	ldr	r3, [pc, #108]	@ (800c6e0 <_dtoa_r+0x2e0>)
 800c674:	4602      	mov	r2, r0
 800c676:	f240 11af 	movw	r1, #431	@ 0x1af
 800c67a:	e6d8      	b.n	800c42e <_dtoa_r+0x2e>
 800c67c:	2301      	movs	r3, #1
 800c67e:	e7e0      	b.n	800c642 <_dtoa_r+0x242>
 800c680:	2401      	movs	r4, #1
 800c682:	2300      	movs	r3, #0
 800c684:	9309      	str	r3, [sp, #36]	@ 0x24
 800c686:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c688:	f04f 33ff 	mov.w	r3, #4294967295
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	9307      	str	r3, [sp, #28]
 800c690:	2200      	movs	r2, #0
 800c692:	2312      	movs	r3, #18
 800c694:	e7d0      	b.n	800c638 <_dtoa_r+0x238>
 800c696:	2301      	movs	r3, #1
 800c698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c69a:	e7f5      	b.n	800c688 <_dtoa_r+0x288>
 800c69c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	9307      	str	r3, [sp, #28]
 800c6a2:	e7d7      	b.n	800c654 <_dtoa_r+0x254>
 800c6a4:	3101      	adds	r1, #1
 800c6a6:	0052      	lsls	r2, r2, #1
 800c6a8:	e7d8      	b.n	800c65c <_dtoa_r+0x25c>
 800c6aa:	bf00      	nop
 800c6ac:	f3af 8000 	nop.w
 800c6b0:	636f4361 	.word	0x636f4361
 800c6b4:	3fd287a7 	.word	0x3fd287a7
 800c6b8:	8b60c8b3 	.word	0x8b60c8b3
 800c6bc:	3fc68a28 	.word	0x3fc68a28
 800c6c0:	509f79fb 	.word	0x509f79fb
 800c6c4:	3fd34413 	.word	0x3fd34413
 800c6c8:	0800fb45 	.word	0x0800fb45
 800c6cc:	0800fb5c 	.word	0x0800fb5c
 800c6d0:	7ff00000 	.word	0x7ff00000
 800c6d4:	0800fb15 	.word	0x0800fb15
 800c6d8:	3ff80000 	.word	0x3ff80000
 800c6dc:	0800fc58 	.word	0x0800fc58
 800c6e0:	0800fbb4 	.word	0x0800fbb4
 800c6e4:	0800fb41 	.word	0x0800fb41
 800c6e8:	0800fb14 	.word	0x0800fb14
 800c6ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6f0:	6018      	str	r0, [r3, #0]
 800c6f2:	9b07      	ldr	r3, [sp, #28]
 800c6f4:	2b0e      	cmp	r3, #14
 800c6f6:	f200 80a4 	bhi.w	800c842 <_dtoa_r+0x442>
 800c6fa:	2c00      	cmp	r4, #0
 800c6fc:	f000 80a1 	beq.w	800c842 <_dtoa_r+0x442>
 800c700:	2f00      	cmp	r7, #0
 800c702:	dd33      	ble.n	800c76c <_dtoa_r+0x36c>
 800c704:	4bad      	ldr	r3, [pc, #692]	@ (800c9bc <_dtoa_r+0x5bc>)
 800c706:	f007 020f 	and.w	r2, r7, #15
 800c70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c70e:	ed93 7b00 	vldr	d7, [r3]
 800c712:	05f8      	lsls	r0, r7, #23
 800c714:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c718:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c71c:	d516      	bpl.n	800c74c <_dtoa_r+0x34c>
 800c71e:	4ba8      	ldr	r3, [pc, #672]	@ (800c9c0 <_dtoa_r+0x5c0>)
 800c720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c728:	f7f4 f890 	bl	800084c <__aeabi_ddiv>
 800c72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c730:	f004 040f 	and.w	r4, r4, #15
 800c734:	2603      	movs	r6, #3
 800c736:	4da2      	ldr	r5, [pc, #648]	@ (800c9c0 <_dtoa_r+0x5c0>)
 800c738:	b954      	cbnz	r4, 800c750 <_dtoa_r+0x350>
 800c73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c742:	f7f4 f883 	bl	800084c <__aeabi_ddiv>
 800c746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c74a:	e028      	b.n	800c79e <_dtoa_r+0x39e>
 800c74c:	2602      	movs	r6, #2
 800c74e:	e7f2      	b.n	800c736 <_dtoa_r+0x336>
 800c750:	07e1      	lsls	r1, r4, #31
 800c752:	d508      	bpl.n	800c766 <_dtoa_r+0x366>
 800c754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c75c:	f7f3 ff4c 	bl	80005f8 <__aeabi_dmul>
 800c760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c764:	3601      	adds	r6, #1
 800c766:	1064      	asrs	r4, r4, #1
 800c768:	3508      	adds	r5, #8
 800c76a:	e7e5      	b.n	800c738 <_dtoa_r+0x338>
 800c76c:	f000 80d2 	beq.w	800c914 <_dtoa_r+0x514>
 800c770:	427c      	negs	r4, r7
 800c772:	4b92      	ldr	r3, [pc, #584]	@ (800c9bc <_dtoa_r+0x5bc>)
 800c774:	4d92      	ldr	r5, [pc, #584]	@ (800c9c0 <_dtoa_r+0x5c0>)
 800c776:	f004 020f 	and.w	r2, r4, #15
 800c77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c786:	f7f3 ff37 	bl	80005f8 <__aeabi_dmul>
 800c78a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c78e:	1124      	asrs	r4, r4, #4
 800c790:	2300      	movs	r3, #0
 800c792:	2602      	movs	r6, #2
 800c794:	2c00      	cmp	r4, #0
 800c796:	f040 80b2 	bne.w	800c8fe <_dtoa_r+0x4fe>
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1d3      	bne.n	800c746 <_dtoa_r+0x346>
 800c79e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f000 80b7 	beq.w	800c918 <_dtoa_r+0x518>
 800c7aa:	4b86      	ldr	r3, [pc, #536]	@ (800c9c4 <_dtoa_r+0x5c4>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	f7f4 f993 	bl	8000adc <__aeabi_dcmplt>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f000 80ae 	beq.w	800c918 <_dtoa_r+0x518>
 800c7bc:	9b07      	ldr	r3, [sp, #28]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f000 80aa 	beq.w	800c918 <_dtoa_r+0x518>
 800c7c4:	9b00      	ldr	r3, [sp, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	dd37      	ble.n	800c83a <_dtoa_r+0x43a>
 800c7ca:	1e7b      	subs	r3, r7, #1
 800c7cc:	9304      	str	r3, [sp, #16]
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	4b7d      	ldr	r3, [pc, #500]	@ (800c9c8 <_dtoa_r+0x5c8>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7de:	9c00      	ldr	r4, [sp, #0]
 800c7e0:	3601      	adds	r6, #1
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7f3 fe9e 	bl	8000524 <__aeabi_i2d>
 800c7e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7ec:	f7f3 ff04 	bl	80005f8 <__aeabi_dmul>
 800c7f0:	4b76      	ldr	r3, [pc, #472]	@ (800c9cc <_dtoa_r+0x5cc>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f7f3 fd4a 	bl	800028c <__adddf3>
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c7fe:	2c00      	cmp	r4, #0
 800c800:	f040 808d 	bne.w	800c91e <_dtoa_r+0x51e>
 800c804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c808:	4b71      	ldr	r3, [pc, #452]	@ (800c9d0 <_dtoa_r+0x5d0>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	f7f3 fd3c 	bl	8000288 <__aeabi_dsub>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c818:	462a      	mov	r2, r5
 800c81a:	4633      	mov	r3, r6
 800c81c:	f7f4 f97c 	bl	8000b18 <__aeabi_dcmpgt>
 800c820:	2800      	cmp	r0, #0
 800c822:	f040 828b 	bne.w	800cd3c <_dtoa_r+0x93c>
 800c826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c82a:	462a      	mov	r2, r5
 800c82c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c830:	f7f4 f954 	bl	8000adc <__aeabi_dcmplt>
 800c834:	2800      	cmp	r0, #0
 800c836:	f040 8128 	bne.w	800ca8a <_dtoa_r+0x68a>
 800c83a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c83e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c844:	2b00      	cmp	r3, #0
 800c846:	f2c0 815a 	blt.w	800cafe <_dtoa_r+0x6fe>
 800c84a:	2f0e      	cmp	r7, #14
 800c84c:	f300 8157 	bgt.w	800cafe <_dtoa_r+0x6fe>
 800c850:	4b5a      	ldr	r3, [pc, #360]	@ (800c9bc <_dtoa_r+0x5bc>)
 800c852:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c856:	ed93 7b00 	vldr	d7, [r3]
 800c85a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	ed8d 7b00 	vstr	d7, [sp]
 800c862:	da03      	bge.n	800c86c <_dtoa_r+0x46c>
 800c864:	9b07      	ldr	r3, [sp, #28]
 800c866:	2b00      	cmp	r3, #0
 800c868:	f340 8101 	ble.w	800ca6e <_dtoa_r+0x66e>
 800c86c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c870:	4656      	mov	r6, sl
 800c872:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c876:	4620      	mov	r0, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f3 ffe7 	bl	800084c <__aeabi_ddiv>
 800c87e:	f7f4 f96b 	bl	8000b58 <__aeabi_d2iz>
 800c882:	4680      	mov	r8, r0
 800c884:	f7f3 fe4e 	bl	8000524 <__aeabi_i2d>
 800c888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c88c:	f7f3 feb4 	bl	80005f8 <__aeabi_dmul>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4620      	mov	r0, r4
 800c896:	4629      	mov	r1, r5
 800c898:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c89c:	f7f3 fcf4 	bl	8000288 <__aeabi_dsub>
 800c8a0:	f806 4b01 	strb.w	r4, [r6], #1
 800c8a4:	9d07      	ldr	r5, [sp, #28]
 800c8a6:	eba6 040a 	sub.w	r4, r6, sl
 800c8aa:	42a5      	cmp	r5, r4
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	f040 8117 	bne.w	800cae2 <_dtoa_r+0x6e2>
 800c8b4:	f7f3 fcea 	bl	800028c <__adddf3>
 800c8b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8bc:	4604      	mov	r4, r0
 800c8be:	460d      	mov	r5, r1
 800c8c0:	f7f4 f92a 	bl	8000b18 <__aeabi_dcmpgt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f040 80f9 	bne.w	800cabc <_dtoa_r+0x6bc>
 800c8ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7f4 f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8d6:	b118      	cbz	r0, 800c8e0 <_dtoa_r+0x4e0>
 800c8d8:	f018 0f01 	tst.w	r8, #1
 800c8dc:	f040 80ee 	bne.w	800cabc <_dtoa_r+0x6bc>
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	4658      	mov	r0, fp
 800c8e4:	f000 fc90 	bl	800d208 <_Bfree>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	7033      	strb	r3, [r6, #0]
 800c8ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c8ee:	3701      	adds	r7, #1
 800c8f0:	601f      	str	r7, [r3, #0]
 800c8f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f000 831d 	beq.w	800cf34 <_dtoa_r+0xb34>
 800c8fa:	601e      	str	r6, [r3, #0]
 800c8fc:	e31a      	b.n	800cf34 <_dtoa_r+0xb34>
 800c8fe:	07e2      	lsls	r2, r4, #31
 800c900:	d505      	bpl.n	800c90e <_dtoa_r+0x50e>
 800c902:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c906:	f7f3 fe77 	bl	80005f8 <__aeabi_dmul>
 800c90a:	3601      	adds	r6, #1
 800c90c:	2301      	movs	r3, #1
 800c90e:	1064      	asrs	r4, r4, #1
 800c910:	3508      	adds	r5, #8
 800c912:	e73f      	b.n	800c794 <_dtoa_r+0x394>
 800c914:	2602      	movs	r6, #2
 800c916:	e742      	b.n	800c79e <_dtoa_r+0x39e>
 800c918:	9c07      	ldr	r4, [sp, #28]
 800c91a:	9704      	str	r7, [sp, #16]
 800c91c:	e761      	b.n	800c7e2 <_dtoa_r+0x3e2>
 800c91e:	4b27      	ldr	r3, [pc, #156]	@ (800c9bc <_dtoa_r+0x5bc>)
 800c920:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c926:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c92a:	4454      	add	r4, sl
 800c92c:	2900      	cmp	r1, #0
 800c92e:	d053      	beq.n	800c9d8 <_dtoa_r+0x5d8>
 800c930:	4928      	ldr	r1, [pc, #160]	@ (800c9d4 <_dtoa_r+0x5d4>)
 800c932:	2000      	movs	r0, #0
 800c934:	f7f3 ff8a 	bl	800084c <__aeabi_ddiv>
 800c938:	4633      	mov	r3, r6
 800c93a:	462a      	mov	r2, r5
 800c93c:	f7f3 fca4 	bl	8000288 <__aeabi_dsub>
 800c940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c944:	4656      	mov	r6, sl
 800c946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c94a:	f7f4 f905 	bl	8000b58 <__aeabi_d2iz>
 800c94e:	4605      	mov	r5, r0
 800c950:	f7f3 fde8 	bl	8000524 <__aeabi_i2d>
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c95c:	f7f3 fc94 	bl	8000288 <__aeabi_dsub>
 800c960:	3530      	adds	r5, #48	@ 0x30
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c96a:	f806 5b01 	strb.w	r5, [r6], #1
 800c96e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c972:	f7f4 f8b3 	bl	8000adc <__aeabi_dcmplt>
 800c976:	2800      	cmp	r0, #0
 800c978:	d171      	bne.n	800ca5e <_dtoa_r+0x65e>
 800c97a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c97e:	4911      	ldr	r1, [pc, #68]	@ (800c9c4 <_dtoa_r+0x5c4>)
 800c980:	2000      	movs	r0, #0
 800c982:	f7f3 fc81 	bl	8000288 <__aeabi_dsub>
 800c986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c98a:	f7f4 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800c98e:	2800      	cmp	r0, #0
 800c990:	f040 8095 	bne.w	800cabe <_dtoa_r+0x6be>
 800c994:	42a6      	cmp	r6, r4
 800c996:	f43f af50 	beq.w	800c83a <_dtoa_r+0x43a>
 800c99a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c99e:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c8 <_dtoa_r+0x5c8>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f7f3 fe29 	bl	80005f8 <__aeabi_dmul>
 800c9a6:	4b08      	ldr	r3, [pc, #32]	@ (800c9c8 <_dtoa_r+0x5c8>)
 800c9a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9b2:	f7f3 fe21 	bl	80005f8 <__aeabi_dmul>
 800c9b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9ba:	e7c4      	b.n	800c946 <_dtoa_r+0x546>
 800c9bc:	0800fc58 	.word	0x0800fc58
 800c9c0:	0800fc30 	.word	0x0800fc30
 800c9c4:	3ff00000 	.word	0x3ff00000
 800c9c8:	40240000 	.word	0x40240000
 800c9cc:	401c0000 	.word	0x401c0000
 800c9d0:	40140000 	.word	0x40140000
 800c9d4:	3fe00000 	.word	0x3fe00000
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f7f3 fe0c 	bl	80005f8 <__aeabi_dmul>
 800c9e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c9e6:	4656      	mov	r6, sl
 800c9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ec:	f7f4 f8b4 	bl	8000b58 <__aeabi_d2iz>
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	f7f3 fd97 	bl	8000524 <__aeabi_i2d>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9fe:	f7f3 fc43 	bl	8000288 <__aeabi_dsub>
 800ca02:	3530      	adds	r5, #48	@ 0x30
 800ca04:	f806 5b01 	strb.w	r5, [r6], #1
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	42a6      	cmp	r6, r4
 800ca0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca12:	f04f 0200 	mov.w	r2, #0
 800ca16:	d124      	bne.n	800ca62 <_dtoa_r+0x662>
 800ca18:	4bac      	ldr	r3, [pc, #688]	@ (800cccc <_dtoa_r+0x8cc>)
 800ca1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca1e:	f7f3 fc35 	bl	800028c <__adddf3>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca2a:	f7f4 f875 	bl	8000b18 <__aeabi_dcmpgt>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d145      	bne.n	800cabe <_dtoa_r+0x6be>
 800ca32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca36:	49a5      	ldr	r1, [pc, #660]	@ (800cccc <_dtoa_r+0x8cc>)
 800ca38:	2000      	movs	r0, #0
 800ca3a:	f7f3 fc25 	bl	8000288 <__aeabi_dsub>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca46:	f7f4 f849 	bl	8000adc <__aeabi_dcmplt>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	f43f aef5 	beq.w	800c83a <_dtoa_r+0x43a>
 800ca50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ca52:	1e73      	subs	r3, r6, #1
 800ca54:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca5a:	2b30      	cmp	r3, #48	@ 0x30
 800ca5c:	d0f8      	beq.n	800ca50 <_dtoa_r+0x650>
 800ca5e:	9f04      	ldr	r7, [sp, #16]
 800ca60:	e73e      	b.n	800c8e0 <_dtoa_r+0x4e0>
 800ca62:	4b9b      	ldr	r3, [pc, #620]	@ (800ccd0 <_dtoa_r+0x8d0>)
 800ca64:	f7f3 fdc8 	bl	80005f8 <__aeabi_dmul>
 800ca68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca6c:	e7bc      	b.n	800c9e8 <_dtoa_r+0x5e8>
 800ca6e:	d10c      	bne.n	800ca8a <_dtoa_r+0x68a>
 800ca70:	4b98      	ldr	r3, [pc, #608]	@ (800ccd4 <_dtoa_r+0x8d4>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca78:	f7f3 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ca7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca80:	f7f4 f840 	bl	8000b04 <__aeabi_dcmpge>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	f000 8157 	beq.w	800cd38 <_dtoa_r+0x938>
 800ca8a:	2400      	movs	r4, #0
 800ca8c:	4625      	mov	r5, r4
 800ca8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca90:	43db      	mvns	r3, r3
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	4656      	mov	r6, sl
 800ca96:	2700      	movs	r7, #0
 800ca98:	4621      	mov	r1, r4
 800ca9a:	4658      	mov	r0, fp
 800ca9c:	f000 fbb4 	bl	800d208 <_Bfree>
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	d0dc      	beq.n	800ca5e <_dtoa_r+0x65e>
 800caa4:	b12f      	cbz	r7, 800cab2 <_dtoa_r+0x6b2>
 800caa6:	42af      	cmp	r7, r5
 800caa8:	d003      	beq.n	800cab2 <_dtoa_r+0x6b2>
 800caaa:	4639      	mov	r1, r7
 800caac:	4658      	mov	r0, fp
 800caae:	f000 fbab 	bl	800d208 <_Bfree>
 800cab2:	4629      	mov	r1, r5
 800cab4:	4658      	mov	r0, fp
 800cab6:	f000 fba7 	bl	800d208 <_Bfree>
 800caba:	e7d0      	b.n	800ca5e <_dtoa_r+0x65e>
 800cabc:	9704      	str	r7, [sp, #16]
 800cabe:	4633      	mov	r3, r6
 800cac0:	461e      	mov	r6, r3
 800cac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cac6:	2a39      	cmp	r2, #57	@ 0x39
 800cac8:	d107      	bne.n	800cada <_dtoa_r+0x6da>
 800caca:	459a      	cmp	sl, r3
 800cacc:	d1f8      	bne.n	800cac0 <_dtoa_r+0x6c0>
 800cace:	9a04      	ldr	r2, [sp, #16]
 800cad0:	3201      	adds	r2, #1
 800cad2:	9204      	str	r2, [sp, #16]
 800cad4:	2230      	movs	r2, #48	@ 0x30
 800cad6:	f88a 2000 	strb.w	r2, [sl]
 800cada:	781a      	ldrb	r2, [r3, #0]
 800cadc:	3201      	adds	r2, #1
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	e7bd      	b.n	800ca5e <_dtoa_r+0x65e>
 800cae2:	4b7b      	ldr	r3, [pc, #492]	@ (800ccd0 <_dtoa_r+0x8d0>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	f7f3 fd87 	bl	80005f8 <__aeabi_dmul>
 800caea:	2200      	movs	r2, #0
 800caec:	2300      	movs	r3, #0
 800caee:	4604      	mov	r4, r0
 800caf0:	460d      	mov	r5, r1
 800caf2:	f7f3 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	f43f aebb 	beq.w	800c872 <_dtoa_r+0x472>
 800cafc:	e6f0      	b.n	800c8e0 <_dtoa_r+0x4e0>
 800cafe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cb00:	2a00      	cmp	r2, #0
 800cb02:	f000 80db 	beq.w	800ccbc <_dtoa_r+0x8bc>
 800cb06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb08:	2a01      	cmp	r2, #1
 800cb0a:	f300 80bf 	bgt.w	800cc8c <_dtoa_r+0x88c>
 800cb0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cb10:	2a00      	cmp	r2, #0
 800cb12:	f000 80b7 	beq.w	800cc84 <_dtoa_r+0x884>
 800cb16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cb1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb1c:	4646      	mov	r6, r8
 800cb1e:	9a08      	ldr	r2, [sp, #32]
 800cb20:	2101      	movs	r1, #1
 800cb22:	441a      	add	r2, r3
 800cb24:	4658      	mov	r0, fp
 800cb26:	4498      	add	r8, r3
 800cb28:	9208      	str	r2, [sp, #32]
 800cb2a:	f000 fc21 	bl	800d370 <__i2b>
 800cb2e:	4605      	mov	r5, r0
 800cb30:	b15e      	cbz	r6, 800cb4a <_dtoa_r+0x74a>
 800cb32:	9b08      	ldr	r3, [sp, #32]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	dd08      	ble.n	800cb4a <_dtoa_r+0x74a>
 800cb38:	42b3      	cmp	r3, r6
 800cb3a:	9a08      	ldr	r2, [sp, #32]
 800cb3c:	bfa8      	it	ge
 800cb3e:	4633      	movge	r3, r6
 800cb40:	eba8 0803 	sub.w	r8, r8, r3
 800cb44:	1af6      	subs	r6, r6, r3
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	9308      	str	r3, [sp, #32]
 800cb4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb4c:	b1f3      	cbz	r3, 800cb8c <_dtoa_r+0x78c>
 800cb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 80b7 	beq.w	800ccc4 <_dtoa_r+0x8c4>
 800cb56:	b18c      	cbz	r4, 800cb7c <_dtoa_r+0x77c>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	4658      	mov	r0, fp
 800cb5e:	f000 fcc7 	bl	800d4f0 <__pow5mult>
 800cb62:	464a      	mov	r2, r9
 800cb64:	4601      	mov	r1, r0
 800cb66:	4605      	mov	r5, r0
 800cb68:	4658      	mov	r0, fp
 800cb6a:	f000 fc17 	bl	800d39c <__multiply>
 800cb6e:	4649      	mov	r1, r9
 800cb70:	9004      	str	r0, [sp, #16]
 800cb72:	4658      	mov	r0, fp
 800cb74:	f000 fb48 	bl	800d208 <_Bfree>
 800cb78:	9b04      	ldr	r3, [sp, #16]
 800cb7a:	4699      	mov	r9, r3
 800cb7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb7e:	1b1a      	subs	r2, r3, r4
 800cb80:	d004      	beq.n	800cb8c <_dtoa_r+0x78c>
 800cb82:	4649      	mov	r1, r9
 800cb84:	4658      	mov	r0, fp
 800cb86:	f000 fcb3 	bl	800d4f0 <__pow5mult>
 800cb8a:	4681      	mov	r9, r0
 800cb8c:	2101      	movs	r1, #1
 800cb8e:	4658      	mov	r0, fp
 800cb90:	f000 fbee 	bl	800d370 <__i2b>
 800cb94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb96:	4604      	mov	r4, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f000 81cf 	beq.w	800cf3c <_dtoa_r+0xb3c>
 800cb9e:	461a      	mov	r2, r3
 800cba0:	4601      	mov	r1, r0
 800cba2:	4658      	mov	r0, fp
 800cba4:	f000 fca4 	bl	800d4f0 <__pow5mult>
 800cba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	4604      	mov	r4, r0
 800cbae:	f300 8095 	bgt.w	800ccdc <_dtoa_r+0x8dc>
 800cbb2:	9b02      	ldr	r3, [sp, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f040 8087 	bne.w	800ccc8 <_dtoa_r+0x8c8>
 800cbba:	9b03      	ldr	r3, [sp, #12]
 800cbbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f040 8089 	bne.w	800ccd8 <_dtoa_r+0x8d8>
 800cbc6:	9b03      	ldr	r3, [sp, #12]
 800cbc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cbcc:	0d1b      	lsrs	r3, r3, #20
 800cbce:	051b      	lsls	r3, r3, #20
 800cbd0:	b12b      	cbz	r3, 800cbde <_dtoa_r+0x7de>
 800cbd2:	9b08      	ldr	r3, [sp, #32]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	9308      	str	r3, [sp, #32]
 800cbd8:	f108 0801 	add.w	r8, r8, #1
 800cbdc:	2301      	movs	r3, #1
 800cbde:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 81b0 	beq.w	800cf48 <_dtoa_r+0xb48>
 800cbe8:	6923      	ldr	r3, [r4, #16]
 800cbea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbee:	6918      	ldr	r0, [r3, #16]
 800cbf0:	f000 fb72 	bl	800d2d8 <__hi0bits>
 800cbf4:	f1c0 0020 	rsb	r0, r0, #32
 800cbf8:	9b08      	ldr	r3, [sp, #32]
 800cbfa:	4418      	add	r0, r3
 800cbfc:	f010 001f 	ands.w	r0, r0, #31
 800cc00:	d077      	beq.n	800ccf2 <_dtoa_r+0x8f2>
 800cc02:	f1c0 0320 	rsb	r3, r0, #32
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	dd6b      	ble.n	800cce2 <_dtoa_r+0x8e2>
 800cc0a:	9b08      	ldr	r3, [sp, #32]
 800cc0c:	f1c0 001c 	rsb	r0, r0, #28
 800cc10:	4403      	add	r3, r0
 800cc12:	4480      	add	r8, r0
 800cc14:	4406      	add	r6, r0
 800cc16:	9308      	str	r3, [sp, #32]
 800cc18:	f1b8 0f00 	cmp.w	r8, #0
 800cc1c:	dd05      	ble.n	800cc2a <_dtoa_r+0x82a>
 800cc1e:	4649      	mov	r1, r9
 800cc20:	4642      	mov	r2, r8
 800cc22:	4658      	mov	r0, fp
 800cc24:	f000 fcbe 	bl	800d5a4 <__lshift>
 800cc28:	4681      	mov	r9, r0
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dd05      	ble.n	800cc3c <_dtoa_r+0x83c>
 800cc30:	4621      	mov	r1, r4
 800cc32:	461a      	mov	r2, r3
 800cc34:	4658      	mov	r0, fp
 800cc36:	f000 fcb5 	bl	800d5a4 <__lshift>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d059      	beq.n	800ccf6 <_dtoa_r+0x8f6>
 800cc42:	4621      	mov	r1, r4
 800cc44:	4648      	mov	r0, r9
 800cc46:	f000 fd19 	bl	800d67c <__mcmp>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	da53      	bge.n	800ccf6 <_dtoa_r+0x8f6>
 800cc4e:	1e7b      	subs	r3, r7, #1
 800cc50:	9304      	str	r3, [sp, #16]
 800cc52:	4649      	mov	r1, r9
 800cc54:	2300      	movs	r3, #0
 800cc56:	220a      	movs	r2, #10
 800cc58:	4658      	mov	r0, fp
 800cc5a:	f000 faf7 	bl	800d24c <__multadd>
 800cc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc60:	4681      	mov	r9, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 8172 	beq.w	800cf4c <_dtoa_r+0xb4c>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	220a      	movs	r2, #10
 800cc6e:	4658      	mov	r0, fp
 800cc70:	f000 faec 	bl	800d24c <__multadd>
 800cc74:	9b00      	ldr	r3, [sp, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	4605      	mov	r5, r0
 800cc7a:	dc67      	bgt.n	800cd4c <_dtoa_r+0x94c>
 800cc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	dc41      	bgt.n	800cd06 <_dtoa_r+0x906>
 800cc82:	e063      	b.n	800cd4c <_dtoa_r+0x94c>
 800cc84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cc8a:	e746      	b.n	800cb1a <_dtoa_r+0x71a>
 800cc8c:	9b07      	ldr	r3, [sp, #28]
 800cc8e:	1e5c      	subs	r4, r3, #1
 800cc90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc92:	42a3      	cmp	r3, r4
 800cc94:	bfbf      	itttt	lt
 800cc96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cc98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cc9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cc9c:	1ae3      	sublt	r3, r4, r3
 800cc9e:	bfb4      	ite	lt
 800cca0:	18d2      	addlt	r2, r2, r3
 800cca2:	1b1c      	subge	r4, r3, r4
 800cca4:	9b07      	ldr	r3, [sp, #28]
 800cca6:	bfbc      	itt	lt
 800cca8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ccaa:	2400      	movlt	r4, #0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	bfb5      	itete	lt
 800ccb0:	eba8 0603 	sublt.w	r6, r8, r3
 800ccb4:	9b07      	ldrge	r3, [sp, #28]
 800ccb6:	2300      	movlt	r3, #0
 800ccb8:	4646      	movge	r6, r8
 800ccba:	e730      	b.n	800cb1e <_dtoa_r+0x71e>
 800ccbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ccbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ccc0:	4646      	mov	r6, r8
 800ccc2:	e735      	b.n	800cb30 <_dtoa_r+0x730>
 800ccc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccc6:	e75c      	b.n	800cb82 <_dtoa_r+0x782>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e788      	b.n	800cbde <_dtoa_r+0x7de>
 800cccc:	3fe00000 	.word	0x3fe00000
 800ccd0:	40240000 	.word	0x40240000
 800ccd4:	40140000 	.word	0x40140000
 800ccd8:	9b02      	ldr	r3, [sp, #8]
 800ccda:	e780      	b.n	800cbde <_dtoa_r+0x7de>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	930a      	str	r3, [sp, #40]	@ 0x28
 800cce0:	e782      	b.n	800cbe8 <_dtoa_r+0x7e8>
 800cce2:	d099      	beq.n	800cc18 <_dtoa_r+0x818>
 800cce4:	9a08      	ldr	r2, [sp, #32]
 800cce6:	331c      	adds	r3, #28
 800cce8:	441a      	add	r2, r3
 800ccea:	4498      	add	r8, r3
 800ccec:	441e      	add	r6, r3
 800ccee:	9208      	str	r2, [sp, #32]
 800ccf0:	e792      	b.n	800cc18 <_dtoa_r+0x818>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	e7f6      	b.n	800cce4 <_dtoa_r+0x8e4>
 800ccf6:	9b07      	ldr	r3, [sp, #28]
 800ccf8:	9704      	str	r7, [sp, #16]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	dc20      	bgt.n	800cd40 <_dtoa_r+0x940>
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	dd1e      	ble.n	800cd44 <_dtoa_r+0x944>
 800cd06:	9b00      	ldr	r3, [sp, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f47f aec0 	bne.w	800ca8e <_dtoa_r+0x68e>
 800cd0e:	4621      	mov	r1, r4
 800cd10:	2205      	movs	r2, #5
 800cd12:	4658      	mov	r0, fp
 800cd14:	f000 fa9a 	bl	800d24c <__multadd>
 800cd18:	4601      	mov	r1, r0
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	4648      	mov	r0, r9
 800cd1e:	f000 fcad 	bl	800d67c <__mcmp>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	f77f aeb3 	ble.w	800ca8e <_dtoa_r+0x68e>
 800cd28:	4656      	mov	r6, sl
 800cd2a:	2331      	movs	r3, #49	@ 0x31
 800cd2c:	f806 3b01 	strb.w	r3, [r6], #1
 800cd30:	9b04      	ldr	r3, [sp, #16]
 800cd32:	3301      	adds	r3, #1
 800cd34:	9304      	str	r3, [sp, #16]
 800cd36:	e6ae      	b.n	800ca96 <_dtoa_r+0x696>
 800cd38:	9c07      	ldr	r4, [sp, #28]
 800cd3a:	9704      	str	r7, [sp, #16]
 800cd3c:	4625      	mov	r5, r4
 800cd3e:	e7f3      	b.n	800cd28 <_dtoa_r+0x928>
 800cd40:	9b07      	ldr	r3, [sp, #28]
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f000 8104 	beq.w	800cf54 <_dtoa_r+0xb54>
 800cd4c:	2e00      	cmp	r6, #0
 800cd4e:	dd05      	ble.n	800cd5c <_dtoa_r+0x95c>
 800cd50:	4629      	mov	r1, r5
 800cd52:	4632      	mov	r2, r6
 800cd54:	4658      	mov	r0, fp
 800cd56:	f000 fc25 	bl	800d5a4 <__lshift>
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d05a      	beq.n	800ce18 <_dtoa_r+0xa18>
 800cd62:	6869      	ldr	r1, [r5, #4]
 800cd64:	4658      	mov	r0, fp
 800cd66:	f000 fa0f 	bl	800d188 <_Balloc>
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	b928      	cbnz	r0, 800cd7a <_dtoa_r+0x97a>
 800cd6e:	4b84      	ldr	r3, [pc, #528]	@ (800cf80 <_dtoa_r+0xb80>)
 800cd70:	4602      	mov	r2, r0
 800cd72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cd76:	f7ff bb5a 	b.w	800c42e <_dtoa_r+0x2e>
 800cd7a:	692a      	ldr	r2, [r5, #16]
 800cd7c:	3202      	adds	r2, #2
 800cd7e:	0092      	lsls	r2, r2, #2
 800cd80:	f105 010c 	add.w	r1, r5, #12
 800cd84:	300c      	adds	r0, #12
 800cd86:	f000 ffaf 	bl	800dce8 <memcpy>
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4658      	mov	r0, fp
 800cd90:	f000 fc08 	bl	800d5a4 <__lshift>
 800cd94:	f10a 0301 	add.w	r3, sl, #1
 800cd98:	9307      	str	r3, [sp, #28]
 800cd9a:	9b00      	ldr	r3, [sp, #0]
 800cd9c:	4453      	add	r3, sl
 800cd9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cda0:	9b02      	ldr	r3, [sp, #8]
 800cda2:	f003 0301 	and.w	r3, r3, #1
 800cda6:	462f      	mov	r7, r5
 800cda8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdaa:	4605      	mov	r5, r0
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	4621      	mov	r1, r4
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	4648      	mov	r0, r9
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	f7ff fa9a 	bl	800c2ee <quorem>
 800cdba:	4639      	mov	r1, r7
 800cdbc:	9002      	str	r0, [sp, #8]
 800cdbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cdc2:	4648      	mov	r0, r9
 800cdc4:	f000 fc5a 	bl	800d67c <__mcmp>
 800cdc8:	462a      	mov	r2, r5
 800cdca:	9008      	str	r0, [sp, #32]
 800cdcc:	4621      	mov	r1, r4
 800cdce:	4658      	mov	r0, fp
 800cdd0:	f000 fc70 	bl	800d6b4 <__mdiff>
 800cdd4:	68c2      	ldr	r2, [r0, #12]
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	bb02      	cbnz	r2, 800ce1c <_dtoa_r+0xa1c>
 800cdda:	4601      	mov	r1, r0
 800cddc:	4648      	mov	r0, r9
 800cdde:	f000 fc4d 	bl	800d67c <__mcmp>
 800cde2:	4602      	mov	r2, r0
 800cde4:	4631      	mov	r1, r6
 800cde6:	4658      	mov	r0, fp
 800cde8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdea:	f000 fa0d 	bl	800d208 <_Bfree>
 800cdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdf2:	9e07      	ldr	r6, [sp, #28]
 800cdf4:	ea43 0102 	orr.w	r1, r3, r2
 800cdf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdfa:	4319      	orrs	r1, r3
 800cdfc:	d110      	bne.n	800ce20 <_dtoa_r+0xa20>
 800cdfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce02:	d029      	beq.n	800ce58 <_dtoa_r+0xa58>
 800ce04:	9b08      	ldr	r3, [sp, #32]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	dd02      	ble.n	800ce10 <_dtoa_r+0xa10>
 800ce0a:	9b02      	ldr	r3, [sp, #8]
 800ce0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ce10:	9b00      	ldr	r3, [sp, #0]
 800ce12:	f883 8000 	strb.w	r8, [r3]
 800ce16:	e63f      	b.n	800ca98 <_dtoa_r+0x698>
 800ce18:	4628      	mov	r0, r5
 800ce1a:	e7bb      	b.n	800cd94 <_dtoa_r+0x994>
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	e7e1      	b.n	800cde4 <_dtoa_r+0x9e4>
 800ce20:	9b08      	ldr	r3, [sp, #32]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	db04      	blt.n	800ce30 <_dtoa_r+0xa30>
 800ce26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce28:	430b      	orrs	r3, r1
 800ce2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce2c:	430b      	orrs	r3, r1
 800ce2e:	d120      	bne.n	800ce72 <_dtoa_r+0xa72>
 800ce30:	2a00      	cmp	r2, #0
 800ce32:	dded      	ble.n	800ce10 <_dtoa_r+0xa10>
 800ce34:	4649      	mov	r1, r9
 800ce36:	2201      	movs	r2, #1
 800ce38:	4658      	mov	r0, fp
 800ce3a:	f000 fbb3 	bl	800d5a4 <__lshift>
 800ce3e:	4621      	mov	r1, r4
 800ce40:	4681      	mov	r9, r0
 800ce42:	f000 fc1b 	bl	800d67c <__mcmp>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	dc03      	bgt.n	800ce52 <_dtoa_r+0xa52>
 800ce4a:	d1e1      	bne.n	800ce10 <_dtoa_r+0xa10>
 800ce4c:	f018 0f01 	tst.w	r8, #1
 800ce50:	d0de      	beq.n	800ce10 <_dtoa_r+0xa10>
 800ce52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce56:	d1d8      	bne.n	800ce0a <_dtoa_r+0xa0a>
 800ce58:	9a00      	ldr	r2, [sp, #0]
 800ce5a:	2339      	movs	r3, #57	@ 0x39
 800ce5c:	7013      	strb	r3, [r2, #0]
 800ce5e:	4633      	mov	r3, r6
 800ce60:	461e      	mov	r6, r3
 800ce62:	3b01      	subs	r3, #1
 800ce64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ce68:	2a39      	cmp	r2, #57	@ 0x39
 800ce6a:	d052      	beq.n	800cf12 <_dtoa_r+0xb12>
 800ce6c:	3201      	adds	r2, #1
 800ce6e:	701a      	strb	r2, [r3, #0]
 800ce70:	e612      	b.n	800ca98 <_dtoa_r+0x698>
 800ce72:	2a00      	cmp	r2, #0
 800ce74:	dd07      	ble.n	800ce86 <_dtoa_r+0xa86>
 800ce76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce7a:	d0ed      	beq.n	800ce58 <_dtoa_r+0xa58>
 800ce7c:	9a00      	ldr	r2, [sp, #0]
 800ce7e:	f108 0301 	add.w	r3, r8, #1
 800ce82:	7013      	strb	r3, [r2, #0]
 800ce84:	e608      	b.n	800ca98 <_dtoa_r+0x698>
 800ce86:	9b07      	ldr	r3, [sp, #28]
 800ce88:	9a07      	ldr	r2, [sp, #28]
 800ce8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ce8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d028      	beq.n	800cee6 <_dtoa_r+0xae6>
 800ce94:	4649      	mov	r1, r9
 800ce96:	2300      	movs	r3, #0
 800ce98:	220a      	movs	r2, #10
 800ce9a:	4658      	mov	r0, fp
 800ce9c:	f000 f9d6 	bl	800d24c <__multadd>
 800cea0:	42af      	cmp	r7, r5
 800cea2:	4681      	mov	r9, r0
 800cea4:	f04f 0300 	mov.w	r3, #0
 800cea8:	f04f 020a 	mov.w	r2, #10
 800ceac:	4639      	mov	r1, r7
 800ceae:	4658      	mov	r0, fp
 800ceb0:	d107      	bne.n	800cec2 <_dtoa_r+0xac2>
 800ceb2:	f000 f9cb 	bl	800d24c <__multadd>
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	4605      	mov	r5, r0
 800ceba:	9b07      	ldr	r3, [sp, #28]
 800cebc:	3301      	adds	r3, #1
 800cebe:	9307      	str	r3, [sp, #28]
 800cec0:	e774      	b.n	800cdac <_dtoa_r+0x9ac>
 800cec2:	f000 f9c3 	bl	800d24c <__multadd>
 800cec6:	4629      	mov	r1, r5
 800cec8:	4607      	mov	r7, r0
 800ceca:	2300      	movs	r3, #0
 800cecc:	220a      	movs	r2, #10
 800cece:	4658      	mov	r0, fp
 800ced0:	f000 f9bc 	bl	800d24c <__multadd>
 800ced4:	4605      	mov	r5, r0
 800ced6:	e7f0      	b.n	800ceba <_dtoa_r+0xaba>
 800ced8:	9b00      	ldr	r3, [sp, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bfcc      	ite	gt
 800cede:	461e      	movgt	r6, r3
 800cee0:	2601      	movle	r6, #1
 800cee2:	4456      	add	r6, sl
 800cee4:	2700      	movs	r7, #0
 800cee6:	4649      	mov	r1, r9
 800cee8:	2201      	movs	r2, #1
 800ceea:	4658      	mov	r0, fp
 800ceec:	f000 fb5a 	bl	800d5a4 <__lshift>
 800cef0:	4621      	mov	r1, r4
 800cef2:	4681      	mov	r9, r0
 800cef4:	f000 fbc2 	bl	800d67c <__mcmp>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	dcb0      	bgt.n	800ce5e <_dtoa_r+0xa5e>
 800cefc:	d102      	bne.n	800cf04 <_dtoa_r+0xb04>
 800cefe:	f018 0f01 	tst.w	r8, #1
 800cf02:	d1ac      	bne.n	800ce5e <_dtoa_r+0xa5e>
 800cf04:	4633      	mov	r3, r6
 800cf06:	461e      	mov	r6, r3
 800cf08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf0c:	2a30      	cmp	r2, #48	@ 0x30
 800cf0e:	d0fa      	beq.n	800cf06 <_dtoa_r+0xb06>
 800cf10:	e5c2      	b.n	800ca98 <_dtoa_r+0x698>
 800cf12:	459a      	cmp	sl, r3
 800cf14:	d1a4      	bne.n	800ce60 <_dtoa_r+0xa60>
 800cf16:	9b04      	ldr	r3, [sp, #16]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	9304      	str	r3, [sp, #16]
 800cf1c:	2331      	movs	r3, #49	@ 0x31
 800cf1e:	f88a 3000 	strb.w	r3, [sl]
 800cf22:	e5b9      	b.n	800ca98 <_dtoa_r+0x698>
 800cf24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cf84 <_dtoa_r+0xb84>
 800cf2a:	b11b      	cbz	r3, 800cf34 <_dtoa_r+0xb34>
 800cf2c:	f10a 0308 	add.w	r3, sl, #8
 800cf30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	4650      	mov	r0, sl
 800cf36:	b019      	add	sp, #100	@ 0x64
 800cf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	f77f ae37 	ble.w	800cbb2 <_dtoa_r+0x7b2>
 800cf44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf46:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf48:	2001      	movs	r0, #1
 800cf4a:	e655      	b.n	800cbf8 <_dtoa_r+0x7f8>
 800cf4c:	9b00      	ldr	r3, [sp, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f77f aed6 	ble.w	800cd00 <_dtoa_r+0x900>
 800cf54:	4656      	mov	r6, sl
 800cf56:	4621      	mov	r1, r4
 800cf58:	4648      	mov	r0, r9
 800cf5a:	f7ff f9c8 	bl	800c2ee <quorem>
 800cf5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf62:	f806 8b01 	strb.w	r8, [r6], #1
 800cf66:	9b00      	ldr	r3, [sp, #0]
 800cf68:	eba6 020a 	sub.w	r2, r6, sl
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	ddb3      	ble.n	800ced8 <_dtoa_r+0xad8>
 800cf70:	4649      	mov	r1, r9
 800cf72:	2300      	movs	r3, #0
 800cf74:	220a      	movs	r2, #10
 800cf76:	4658      	mov	r0, fp
 800cf78:	f000 f968 	bl	800d24c <__multadd>
 800cf7c:	4681      	mov	r9, r0
 800cf7e:	e7ea      	b.n	800cf56 <_dtoa_r+0xb56>
 800cf80:	0800fbb4 	.word	0x0800fbb4
 800cf84:	0800fb38 	.word	0x0800fb38

0800cf88 <_free_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4605      	mov	r5, r0
 800cf8c:	2900      	cmp	r1, #0
 800cf8e:	d041      	beq.n	800d014 <_free_r+0x8c>
 800cf90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf94:	1f0c      	subs	r4, r1, #4
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	bfb8      	it	lt
 800cf9a:	18e4      	addlt	r4, r4, r3
 800cf9c:	f000 f8e8 	bl	800d170 <__malloc_lock>
 800cfa0:	4a1d      	ldr	r2, [pc, #116]	@ (800d018 <_free_r+0x90>)
 800cfa2:	6813      	ldr	r3, [r2, #0]
 800cfa4:	b933      	cbnz	r3, 800cfb4 <_free_r+0x2c>
 800cfa6:	6063      	str	r3, [r4, #4]
 800cfa8:	6014      	str	r4, [r2, #0]
 800cfaa:	4628      	mov	r0, r5
 800cfac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfb0:	f000 b8e4 	b.w	800d17c <__malloc_unlock>
 800cfb4:	42a3      	cmp	r3, r4
 800cfb6:	d908      	bls.n	800cfca <_free_r+0x42>
 800cfb8:	6820      	ldr	r0, [r4, #0]
 800cfba:	1821      	adds	r1, r4, r0
 800cfbc:	428b      	cmp	r3, r1
 800cfbe:	bf01      	itttt	eq
 800cfc0:	6819      	ldreq	r1, [r3, #0]
 800cfc2:	685b      	ldreq	r3, [r3, #4]
 800cfc4:	1809      	addeq	r1, r1, r0
 800cfc6:	6021      	streq	r1, [r4, #0]
 800cfc8:	e7ed      	b.n	800cfa6 <_free_r+0x1e>
 800cfca:	461a      	mov	r2, r3
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	b10b      	cbz	r3, 800cfd4 <_free_r+0x4c>
 800cfd0:	42a3      	cmp	r3, r4
 800cfd2:	d9fa      	bls.n	800cfca <_free_r+0x42>
 800cfd4:	6811      	ldr	r1, [r2, #0]
 800cfd6:	1850      	adds	r0, r2, r1
 800cfd8:	42a0      	cmp	r0, r4
 800cfda:	d10b      	bne.n	800cff4 <_free_r+0x6c>
 800cfdc:	6820      	ldr	r0, [r4, #0]
 800cfde:	4401      	add	r1, r0
 800cfe0:	1850      	adds	r0, r2, r1
 800cfe2:	4283      	cmp	r3, r0
 800cfe4:	6011      	str	r1, [r2, #0]
 800cfe6:	d1e0      	bne.n	800cfaa <_free_r+0x22>
 800cfe8:	6818      	ldr	r0, [r3, #0]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	6053      	str	r3, [r2, #4]
 800cfee:	4408      	add	r0, r1
 800cff0:	6010      	str	r0, [r2, #0]
 800cff2:	e7da      	b.n	800cfaa <_free_r+0x22>
 800cff4:	d902      	bls.n	800cffc <_free_r+0x74>
 800cff6:	230c      	movs	r3, #12
 800cff8:	602b      	str	r3, [r5, #0]
 800cffa:	e7d6      	b.n	800cfaa <_free_r+0x22>
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	1821      	adds	r1, r4, r0
 800d000:	428b      	cmp	r3, r1
 800d002:	bf04      	itt	eq
 800d004:	6819      	ldreq	r1, [r3, #0]
 800d006:	685b      	ldreq	r3, [r3, #4]
 800d008:	6063      	str	r3, [r4, #4]
 800d00a:	bf04      	itt	eq
 800d00c:	1809      	addeq	r1, r1, r0
 800d00e:	6021      	streq	r1, [r4, #0]
 800d010:	6054      	str	r4, [r2, #4]
 800d012:	e7ca      	b.n	800cfaa <_free_r+0x22>
 800d014:	bd38      	pop	{r3, r4, r5, pc}
 800d016:	bf00      	nop
 800d018:	20002244 	.word	0x20002244

0800d01c <malloc>:
 800d01c:	4b02      	ldr	r3, [pc, #8]	@ (800d028 <malloc+0xc>)
 800d01e:	4601      	mov	r1, r0
 800d020:	6818      	ldr	r0, [r3, #0]
 800d022:	f000 b825 	b.w	800d070 <_malloc_r>
 800d026:	bf00      	nop
 800d028:	20000108 	.word	0x20000108

0800d02c <sbrk_aligned>:
 800d02c:	b570      	push	{r4, r5, r6, lr}
 800d02e:	4e0f      	ldr	r6, [pc, #60]	@ (800d06c <sbrk_aligned+0x40>)
 800d030:	460c      	mov	r4, r1
 800d032:	6831      	ldr	r1, [r6, #0]
 800d034:	4605      	mov	r5, r0
 800d036:	b911      	cbnz	r1, 800d03e <sbrk_aligned+0x12>
 800d038:	f000 fe46 	bl	800dcc8 <_sbrk_r>
 800d03c:	6030      	str	r0, [r6, #0]
 800d03e:	4621      	mov	r1, r4
 800d040:	4628      	mov	r0, r5
 800d042:	f000 fe41 	bl	800dcc8 <_sbrk_r>
 800d046:	1c43      	adds	r3, r0, #1
 800d048:	d103      	bne.n	800d052 <sbrk_aligned+0x26>
 800d04a:	f04f 34ff 	mov.w	r4, #4294967295
 800d04e:	4620      	mov	r0, r4
 800d050:	bd70      	pop	{r4, r5, r6, pc}
 800d052:	1cc4      	adds	r4, r0, #3
 800d054:	f024 0403 	bic.w	r4, r4, #3
 800d058:	42a0      	cmp	r0, r4
 800d05a:	d0f8      	beq.n	800d04e <sbrk_aligned+0x22>
 800d05c:	1a21      	subs	r1, r4, r0
 800d05e:	4628      	mov	r0, r5
 800d060:	f000 fe32 	bl	800dcc8 <_sbrk_r>
 800d064:	3001      	adds	r0, #1
 800d066:	d1f2      	bne.n	800d04e <sbrk_aligned+0x22>
 800d068:	e7ef      	b.n	800d04a <sbrk_aligned+0x1e>
 800d06a:	bf00      	nop
 800d06c:	20002240 	.word	0x20002240

0800d070 <_malloc_r>:
 800d070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d074:	1ccd      	adds	r5, r1, #3
 800d076:	f025 0503 	bic.w	r5, r5, #3
 800d07a:	3508      	adds	r5, #8
 800d07c:	2d0c      	cmp	r5, #12
 800d07e:	bf38      	it	cc
 800d080:	250c      	movcc	r5, #12
 800d082:	2d00      	cmp	r5, #0
 800d084:	4606      	mov	r6, r0
 800d086:	db01      	blt.n	800d08c <_malloc_r+0x1c>
 800d088:	42a9      	cmp	r1, r5
 800d08a:	d904      	bls.n	800d096 <_malloc_r+0x26>
 800d08c:	230c      	movs	r3, #12
 800d08e:	6033      	str	r3, [r6, #0]
 800d090:	2000      	movs	r0, #0
 800d092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d16c <_malloc_r+0xfc>
 800d09a:	f000 f869 	bl	800d170 <__malloc_lock>
 800d09e:	f8d8 3000 	ldr.w	r3, [r8]
 800d0a2:	461c      	mov	r4, r3
 800d0a4:	bb44      	cbnz	r4, 800d0f8 <_malloc_r+0x88>
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f7ff ffbf 	bl	800d02c <sbrk_aligned>
 800d0ae:	1c43      	adds	r3, r0, #1
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	d158      	bne.n	800d166 <_malloc_r+0xf6>
 800d0b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d0b8:	4627      	mov	r7, r4
 800d0ba:	2f00      	cmp	r7, #0
 800d0bc:	d143      	bne.n	800d146 <_malloc_r+0xd6>
 800d0be:	2c00      	cmp	r4, #0
 800d0c0:	d04b      	beq.n	800d15a <_malloc_r+0xea>
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	4639      	mov	r1, r7
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	eb04 0903 	add.w	r9, r4, r3
 800d0cc:	f000 fdfc 	bl	800dcc8 <_sbrk_r>
 800d0d0:	4581      	cmp	r9, r0
 800d0d2:	d142      	bne.n	800d15a <_malloc_r+0xea>
 800d0d4:	6821      	ldr	r1, [r4, #0]
 800d0d6:	1a6d      	subs	r5, r5, r1
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f7ff ffa6 	bl	800d02c <sbrk_aligned>
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	d03a      	beq.n	800d15a <_malloc_r+0xea>
 800d0e4:	6823      	ldr	r3, [r4, #0]
 800d0e6:	442b      	add	r3, r5
 800d0e8:	6023      	str	r3, [r4, #0]
 800d0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	bb62      	cbnz	r2, 800d14c <_malloc_r+0xdc>
 800d0f2:	f8c8 7000 	str.w	r7, [r8]
 800d0f6:	e00f      	b.n	800d118 <_malloc_r+0xa8>
 800d0f8:	6822      	ldr	r2, [r4, #0]
 800d0fa:	1b52      	subs	r2, r2, r5
 800d0fc:	d420      	bmi.n	800d140 <_malloc_r+0xd0>
 800d0fe:	2a0b      	cmp	r2, #11
 800d100:	d917      	bls.n	800d132 <_malloc_r+0xc2>
 800d102:	1961      	adds	r1, r4, r5
 800d104:	42a3      	cmp	r3, r4
 800d106:	6025      	str	r5, [r4, #0]
 800d108:	bf18      	it	ne
 800d10a:	6059      	strne	r1, [r3, #4]
 800d10c:	6863      	ldr	r3, [r4, #4]
 800d10e:	bf08      	it	eq
 800d110:	f8c8 1000 	streq.w	r1, [r8]
 800d114:	5162      	str	r2, [r4, r5]
 800d116:	604b      	str	r3, [r1, #4]
 800d118:	4630      	mov	r0, r6
 800d11a:	f000 f82f 	bl	800d17c <__malloc_unlock>
 800d11e:	f104 000b 	add.w	r0, r4, #11
 800d122:	1d23      	adds	r3, r4, #4
 800d124:	f020 0007 	bic.w	r0, r0, #7
 800d128:	1ac2      	subs	r2, r0, r3
 800d12a:	bf1c      	itt	ne
 800d12c:	1a1b      	subne	r3, r3, r0
 800d12e:	50a3      	strne	r3, [r4, r2]
 800d130:	e7af      	b.n	800d092 <_malloc_r+0x22>
 800d132:	6862      	ldr	r2, [r4, #4]
 800d134:	42a3      	cmp	r3, r4
 800d136:	bf0c      	ite	eq
 800d138:	f8c8 2000 	streq.w	r2, [r8]
 800d13c:	605a      	strne	r2, [r3, #4]
 800d13e:	e7eb      	b.n	800d118 <_malloc_r+0xa8>
 800d140:	4623      	mov	r3, r4
 800d142:	6864      	ldr	r4, [r4, #4]
 800d144:	e7ae      	b.n	800d0a4 <_malloc_r+0x34>
 800d146:	463c      	mov	r4, r7
 800d148:	687f      	ldr	r7, [r7, #4]
 800d14a:	e7b6      	b.n	800d0ba <_malloc_r+0x4a>
 800d14c:	461a      	mov	r2, r3
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	42a3      	cmp	r3, r4
 800d152:	d1fb      	bne.n	800d14c <_malloc_r+0xdc>
 800d154:	2300      	movs	r3, #0
 800d156:	6053      	str	r3, [r2, #4]
 800d158:	e7de      	b.n	800d118 <_malloc_r+0xa8>
 800d15a:	230c      	movs	r3, #12
 800d15c:	6033      	str	r3, [r6, #0]
 800d15e:	4630      	mov	r0, r6
 800d160:	f000 f80c 	bl	800d17c <__malloc_unlock>
 800d164:	e794      	b.n	800d090 <_malloc_r+0x20>
 800d166:	6005      	str	r5, [r0, #0]
 800d168:	e7d6      	b.n	800d118 <_malloc_r+0xa8>
 800d16a:	bf00      	nop
 800d16c:	20002244 	.word	0x20002244

0800d170 <__malloc_lock>:
 800d170:	4801      	ldr	r0, [pc, #4]	@ (800d178 <__malloc_lock+0x8>)
 800d172:	f7ff b8ba 	b.w	800c2ea <__retarget_lock_acquire_recursive>
 800d176:	bf00      	nop
 800d178:	2000223c 	.word	0x2000223c

0800d17c <__malloc_unlock>:
 800d17c:	4801      	ldr	r0, [pc, #4]	@ (800d184 <__malloc_unlock+0x8>)
 800d17e:	f7ff b8b5 	b.w	800c2ec <__retarget_lock_release_recursive>
 800d182:	bf00      	nop
 800d184:	2000223c 	.word	0x2000223c

0800d188 <_Balloc>:
 800d188:	b570      	push	{r4, r5, r6, lr}
 800d18a:	69c6      	ldr	r6, [r0, #28]
 800d18c:	4604      	mov	r4, r0
 800d18e:	460d      	mov	r5, r1
 800d190:	b976      	cbnz	r6, 800d1b0 <_Balloc+0x28>
 800d192:	2010      	movs	r0, #16
 800d194:	f7ff ff42 	bl	800d01c <malloc>
 800d198:	4602      	mov	r2, r0
 800d19a:	61e0      	str	r0, [r4, #28]
 800d19c:	b920      	cbnz	r0, 800d1a8 <_Balloc+0x20>
 800d19e:	4b18      	ldr	r3, [pc, #96]	@ (800d200 <_Balloc+0x78>)
 800d1a0:	4818      	ldr	r0, [pc, #96]	@ (800d204 <_Balloc+0x7c>)
 800d1a2:	216b      	movs	r1, #107	@ 0x6b
 800d1a4:	f000 fdae 	bl	800dd04 <__assert_func>
 800d1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1ac:	6006      	str	r6, [r0, #0]
 800d1ae:	60c6      	str	r6, [r0, #12]
 800d1b0:	69e6      	ldr	r6, [r4, #28]
 800d1b2:	68f3      	ldr	r3, [r6, #12]
 800d1b4:	b183      	cbz	r3, 800d1d8 <_Balloc+0x50>
 800d1b6:	69e3      	ldr	r3, [r4, #28]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1be:	b9b8      	cbnz	r0, 800d1f0 <_Balloc+0x68>
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	fa01 f605 	lsl.w	r6, r1, r5
 800d1c6:	1d72      	adds	r2, r6, #5
 800d1c8:	0092      	lsls	r2, r2, #2
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 fdb8 	bl	800dd40 <_calloc_r>
 800d1d0:	b160      	cbz	r0, 800d1ec <_Balloc+0x64>
 800d1d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1d6:	e00e      	b.n	800d1f6 <_Balloc+0x6e>
 800d1d8:	2221      	movs	r2, #33	@ 0x21
 800d1da:	2104      	movs	r1, #4
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f000 fdaf 	bl	800dd40 <_calloc_r>
 800d1e2:	69e3      	ldr	r3, [r4, #28]
 800d1e4:	60f0      	str	r0, [r6, #12]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1e4      	bne.n	800d1b6 <_Balloc+0x2e>
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
 800d1f0:	6802      	ldr	r2, [r0, #0]
 800d1f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1fc:	e7f7      	b.n	800d1ee <_Balloc+0x66>
 800d1fe:	bf00      	nop
 800d200:	0800fb45 	.word	0x0800fb45
 800d204:	0800fbc5 	.word	0x0800fbc5

0800d208 <_Bfree>:
 800d208:	b570      	push	{r4, r5, r6, lr}
 800d20a:	69c6      	ldr	r6, [r0, #28]
 800d20c:	4605      	mov	r5, r0
 800d20e:	460c      	mov	r4, r1
 800d210:	b976      	cbnz	r6, 800d230 <_Bfree+0x28>
 800d212:	2010      	movs	r0, #16
 800d214:	f7ff ff02 	bl	800d01c <malloc>
 800d218:	4602      	mov	r2, r0
 800d21a:	61e8      	str	r0, [r5, #28]
 800d21c:	b920      	cbnz	r0, 800d228 <_Bfree+0x20>
 800d21e:	4b09      	ldr	r3, [pc, #36]	@ (800d244 <_Bfree+0x3c>)
 800d220:	4809      	ldr	r0, [pc, #36]	@ (800d248 <_Bfree+0x40>)
 800d222:	218f      	movs	r1, #143	@ 0x8f
 800d224:	f000 fd6e 	bl	800dd04 <__assert_func>
 800d228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d22c:	6006      	str	r6, [r0, #0]
 800d22e:	60c6      	str	r6, [r0, #12]
 800d230:	b13c      	cbz	r4, 800d242 <_Bfree+0x3a>
 800d232:	69eb      	ldr	r3, [r5, #28]
 800d234:	6862      	ldr	r2, [r4, #4]
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d23c:	6021      	str	r1, [r4, #0]
 800d23e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d242:	bd70      	pop	{r4, r5, r6, pc}
 800d244:	0800fb45 	.word	0x0800fb45
 800d248:	0800fbc5 	.word	0x0800fbc5

0800d24c <__multadd>:
 800d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	690d      	ldr	r5, [r1, #16]
 800d252:	4607      	mov	r7, r0
 800d254:	460c      	mov	r4, r1
 800d256:	461e      	mov	r6, r3
 800d258:	f101 0c14 	add.w	ip, r1, #20
 800d25c:	2000      	movs	r0, #0
 800d25e:	f8dc 3000 	ldr.w	r3, [ip]
 800d262:	b299      	uxth	r1, r3
 800d264:	fb02 6101 	mla	r1, r2, r1, r6
 800d268:	0c1e      	lsrs	r6, r3, #16
 800d26a:	0c0b      	lsrs	r3, r1, #16
 800d26c:	fb02 3306 	mla	r3, r2, r6, r3
 800d270:	b289      	uxth	r1, r1
 800d272:	3001      	adds	r0, #1
 800d274:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d278:	4285      	cmp	r5, r0
 800d27a:	f84c 1b04 	str.w	r1, [ip], #4
 800d27e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d282:	dcec      	bgt.n	800d25e <__multadd+0x12>
 800d284:	b30e      	cbz	r6, 800d2ca <__multadd+0x7e>
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	42ab      	cmp	r3, r5
 800d28a:	dc19      	bgt.n	800d2c0 <__multadd+0x74>
 800d28c:	6861      	ldr	r1, [r4, #4]
 800d28e:	4638      	mov	r0, r7
 800d290:	3101      	adds	r1, #1
 800d292:	f7ff ff79 	bl	800d188 <_Balloc>
 800d296:	4680      	mov	r8, r0
 800d298:	b928      	cbnz	r0, 800d2a6 <__multadd+0x5a>
 800d29a:	4602      	mov	r2, r0
 800d29c:	4b0c      	ldr	r3, [pc, #48]	@ (800d2d0 <__multadd+0x84>)
 800d29e:	480d      	ldr	r0, [pc, #52]	@ (800d2d4 <__multadd+0x88>)
 800d2a0:	21ba      	movs	r1, #186	@ 0xba
 800d2a2:	f000 fd2f 	bl	800dd04 <__assert_func>
 800d2a6:	6922      	ldr	r2, [r4, #16]
 800d2a8:	3202      	adds	r2, #2
 800d2aa:	f104 010c 	add.w	r1, r4, #12
 800d2ae:	0092      	lsls	r2, r2, #2
 800d2b0:	300c      	adds	r0, #12
 800d2b2:	f000 fd19 	bl	800dce8 <memcpy>
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f7ff ffa5 	bl	800d208 <_Bfree>
 800d2be:	4644      	mov	r4, r8
 800d2c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2c4:	3501      	adds	r5, #1
 800d2c6:	615e      	str	r6, [r3, #20]
 800d2c8:	6125      	str	r5, [r4, #16]
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d0:	0800fbb4 	.word	0x0800fbb4
 800d2d4:	0800fbc5 	.word	0x0800fbc5

0800d2d8 <__hi0bits>:
 800d2d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2dc:	4603      	mov	r3, r0
 800d2de:	bf36      	itet	cc
 800d2e0:	0403      	lslcc	r3, r0, #16
 800d2e2:	2000      	movcs	r0, #0
 800d2e4:	2010      	movcc	r0, #16
 800d2e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2ea:	bf3c      	itt	cc
 800d2ec:	021b      	lslcc	r3, r3, #8
 800d2ee:	3008      	addcc	r0, #8
 800d2f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2f4:	bf3c      	itt	cc
 800d2f6:	011b      	lslcc	r3, r3, #4
 800d2f8:	3004      	addcc	r0, #4
 800d2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2fe:	bf3c      	itt	cc
 800d300:	009b      	lslcc	r3, r3, #2
 800d302:	3002      	addcc	r0, #2
 800d304:	2b00      	cmp	r3, #0
 800d306:	db05      	blt.n	800d314 <__hi0bits+0x3c>
 800d308:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d30c:	f100 0001 	add.w	r0, r0, #1
 800d310:	bf08      	it	eq
 800d312:	2020      	moveq	r0, #32
 800d314:	4770      	bx	lr

0800d316 <__lo0bits>:
 800d316:	6803      	ldr	r3, [r0, #0]
 800d318:	4602      	mov	r2, r0
 800d31a:	f013 0007 	ands.w	r0, r3, #7
 800d31e:	d00b      	beq.n	800d338 <__lo0bits+0x22>
 800d320:	07d9      	lsls	r1, r3, #31
 800d322:	d421      	bmi.n	800d368 <__lo0bits+0x52>
 800d324:	0798      	lsls	r0, r3, #30
 800d326:	bf49      	itett	mi
 800d328:	085b      	lsrmi	r3, r3, #1
 800d32a:	089b      	lsrpl	r3, r3, #2
 800d32c:	2001      	movmi	r0, #1
 800d32e:	6013      	strmi	r3, [r2, #0]
 800d330:	bf5c      	itt	pl
 800d332:	6013      	strpl	r3, [r2, #0]
 800d334:	2002      	movpl	r0, #2
 800d336:	4770      	bx	lr
 800d338:	b299      	uxth	r1, r3
 800d33a:	b909      	cbnz	r1, 800d340 <__lo0bits+0x2a>
 800d33c:	0c1b      	lsrs	r3, r3, #16
 800d33e:	2010      	movs	r0, #16
 800d340:	b2d9      	uxtb	r1, r3
 800d342:	b909      	cbnz	r1, 800d348 <__lo0bits+0x32>
 800d344:	3008      	adds	r0, #8
 800d346:	0a1b      	lsrs	r3, r3, #8
 800d348:	0719      	lsls	r1, r3, #28
 800d34a:	bf04      	itt	eq
 800d34c:	091b      	lsreq	r3, r3, #4
 800d34e:	3004      	addeq	r0, #4
 800d350:	0799      	lsls	r1, r3, #30
 800d352:	bf04      	itt	eq
 800d354:	089b      	lsreq	r3, r3, #2
 800d356:	3002      	addeq	r0, #2
 800d358:	07d9      	lsls	r1, r3, #31
 800d35a:	d403      	bmi.n	800d364 <__lo0bits+0x4e>
 800d35c:	085b      	lsrs	r3, r3, #1
 800d35e:	f100 0001 	add.w	r0, r0, #1
 800d362:	d003      	beq.n	800d36c <__lo0bits+0x56>
 800d364:	6013      	str	r3, [r2, #0]
 800d366:	4770      	bx	lr
 800d368:	2000      	movs	r0, #0
 800d36a:	4770      	bx	lr
 800d36c:	2020      	movs	r0, #32
 800d36e:	4770      	bx	lr

0800d370 <__i2b>:
 800d370:	b510      	push	{r4, lr}
 800d372:	460c      	mov	r4, r1
 800d374:	2101      	movs	r1, #1
 800d376:	f7ff ff07 	bl	800d188 <_Balloc>
 800d37a:	4602      	mov	r2, r0
 800d37c:	b928      	cbnz	r0, 800d38a <__i2b+0x1a>
 800d37e:	4b05      	ldr	r3, [pc, #20]	@ (800d394 <__i2b+0x24>)
 800d380:	4805      	ldr	r0, [pc, #20]	@ (800d398 <__i2b+0x28>)
 800d382:	f240 1145 	movw	r1, #325	@ 0x145
 800d386:	f000 fcbd 	bl	800dd04 <__assert_func>
 800d38a:	2301      	movs	r3, #1
 800d38c:	6144      	str	r4, [r0, #20]
 800d38e:	6103      	str	r3, [r0, #16]
 800d390:	bd10      	pop	{r4, pc}
 800d392:	bf00      	nop
 800d394:	0800fbb4 	.word	0x0800fbb4
 800d398:	0800fbc5 	.word	0x0800fbc5

0800d39c <__multiply>:
 800d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	4614      	mov	r4, r2
 800d3a2:	690a      	ldr	r2, [r1, #16]
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	bfa8      	it	ge
 800d3aa:	4623      	movge	r3, r4
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	bfa4      	itt	ge
 800d3b0:	460c      	movge	r4, r1
 800d3b2:	461f      	movge	r7, r3
 800d3b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d3b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d3bc:	68a3      	ldr	r3, [r4, #8]
 800d3be:	6861      	ldr	r1, [r4, #4]
 800d3c0:	eb0a 0609 	add.w	r6, sl, r9
 800d3c4:	42b3      	cmp	r3, r6
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	bfb8      	it	lt
 800d3ca:	3101      	addlt	r1, #1
 800d3cc:	f7ff fedc 	bl	800d188 <_Balloc>
 800d3d0:	b930      	cbnz	r0, 800d3e0 <__multiply+0x44>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	4b44      	ldr	r3, [pc, #272]	@ (800d4e8 <__multiply+0x14c>)
 800d3d6:	4845      	ldr	r0, [pc, #276]	@ (800d4ec <__multiply+0x150>)
 800d3d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3dc:	f000 fc92 	bl	800dd04 <__assert_func>
 800d3e0:	f100 0514 	add.w	r5, r0, #20
 800d3e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3e8:	462b      	mov	r3, r5
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	4543      	cmp	r3, r8
 800d3ee:	d321      	bcc.n	800d434 <__multiply+0x98>
 800d3f0:	f107 0114 	add.w	r1, r7, #20
 800d3f4:	f104 0214 	add.w	r2, r4, #20
 800d3f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d3fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d400:	9302      	str	r3, [sp, #8]
 800d402:	1b13      	subs	r3, r2, r4
 800d404:	3b15      	subs	r3, #21
 800d406:	f023 0303 	bic.w	r3, r3, #3
 800d40a:	3304      	adds	r3, #4
 800d40c:	f104 0715 	add.w	r7, r4, #21
 800d410:	42ba      	cmp	r2, r7
 800d412:	bf38      	it	cc
 800d414:	2304      	movcc	r3, #4
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	9b02      	ldr	r3, [sp, #8]
 800d41a:	9103      	str	r1, [sp, #12]
 800d41c:	428b      	cmp	r3, r1
 800d41e:	d80c      	bhi.n	800d43a <__multiply+0x9e>
 800d420:	2e00      	cmp	r6, #0
 800d422:	dd03      	ble.n	800d42c <__multiply+0x90>
 800d424:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d05b      	beq.n	800d4e4 <__multiply+0x148>
 800d42c:	6106      	str	r6, [r0, #16]
 800d42e:	b005      	add	sp, #20
 800d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d434:	f843 2b04 	str.w	r2, [r3], #4
 800d438:	e7d8      	b.n	800d3ec <__multiply+0x50>
 800d43a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d43e:	f1ba 0f00 	cmp.w	sl, #0
 800d442:	d024      	beq.n	800d48e <__multiply+0xf2>
 800d444:	f104 0e14 	add.w	lr, r4, #20
 800d448:	46a9      	mov	r9, r5
 800d44a:	f04f 0c00 	mov.w	ip, #0
 800d44e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d452:	f8d9 3000 	ldr.w	r3, [r9]
 800d456:	fa1f fb87 	uxth.w	fp, r7
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d460:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d464:	f8d9 7000 	ldr.w	r7, [r9]
 800d468:	4463      	add	r3, ip
 800d46a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d46e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d472:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d476:	b29b      	uxth	r3, r3
 800d478:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d47c:	4572      	cmp	r2, lr
 800d47e:	f849 3b04 	str.w	r3, [r9], #4
 800d482:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d486:	d8e2      	bhi.n	800d44e <__multiply+0xb2>
 800d488:	9b01      	ldr	r3, [sp, #4]
 800d48a:	f845 c003 	str.w	ip, [r5, r3]
 800d48e:	9b03      	ldr	r3, [sp, #12]
 800d490:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d494:	3104      	adds	r1, #4
 800d496:	f1b9 0f00 	cmp.w	r9, #0
 800d49a:	d021      	beq.n	800d4e0 <__multiply+0x144>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	f104 0c14 	add.w	ip, r4, #20
 800d4a2:	46ae      	mov	lr, r5
 800d4a4:	f04f 0a00 	mov.w	sl, #0
 800d4a8:	f8bc b000 	ldrh.w	fp, [ip]
 800d4ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d4b0:	fb09 770b 	mla	r7, r9, fp, r7
 800d4b4:	4457      	add	r7, sl
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d4bc:	f84e 3b04 	str.w	r3, [lr], #4
 800d4c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d4c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4c8:	f8be 3000 	ldrh.w	r3, [lr]
 800d4cc:	fb09 330a 	mla	r3, r9, sl, r3
 800d4d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d4d4:	4562      	cmp	r2, ip
 800d4d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4da:	d8e5      	bhi.n	800d4a8 <__multiply+0x10c>
 800d4dc:	9f01      	ldr	r7, [sp, #4]
 800d4de:	51eb      	str	r3, [r5, r7]
 800d4e0:	3504      	adds	r5, #4
 800d4e2:	e799      	b.n	800d418 <__multiply+0x7c>
 800d4e4:	3e01      	subs	r6, #1
 800d4e6:	e79b      	b.n	800d420 <__multiply+0x84>
 800d4e8:	0800fbb4 	.word	0x0800fbb4
 800d4ec:	0800fbc5 	.word	0x0800fbc5

0800d4f0 <__pow5mult>:
 800d4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f4:	4615      	mov	r5, r2
 800d4f6:	f012 0203 	ands.w	r2, r2, #3
 800d4fa:	4607      	mov	r7, r0
 800d4fc:	460e      	mov	r6, r1
 800d4fe:	d007      	beq.n	800d510 <__pow5mult+0x20>
 800d500:	4c25      	ldr	r4, [pc, #148]	@ (800d598 <__pow5mult+0xa8>)
 800d502:	3a01      	subs	r2, #1
 800d504:	2300      	movs	r3, #0
 800d506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d50a:	f7ff fe9f 	bl	800d24c <__multadd>
 800d50e:	4606      	mov	r6, r0
 800d510:	10ad      	asrs	r5, r5, #2
 800d512:	d03d      	beq.n	800d590 <__pow5mult+0xa0>
 800d514:	69fc      	ldr	r4, [r7, #28]
 800d516:	b97c      	cbnz	r4, 800d538 <__pow5mult+0x48>
 800d518:	2010      	movs	r0, #16
 800d51a:	f7ff fd7f 	bl	800d01c <malloc>
 800d51e:	4602      	mov	r2, r0
 800d520:	61f8      	str	r0, [r7, #28]
 800d522:	b928      	cbnz	r0, 800d530 <__pow5mult+0x40>
 800d524:	4b1d      	ldr	r3, [pc, #116]	@ (800d59c <__pow5mult+0xac>)
 800d526:	481e      	ldr	r0, [pc, #120]	@ (800d5a0 <__pow5mult+0xb0>)
 800d528:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d52c:	f000 fbea 	bl	800dd04 <__assert_func>
 800d530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d534:	6004      	str	r4, [r0, #0]
 800d536:	60c4      	str	r4, [r0, #12]
 800d538:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d53c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d540:	b94c      	cbnz	r4, 800d556 <__pow5mult+0x66>
 800d542:	f240 2171 	movw	r1, #625	@ 0x271
 800d546:	4638      	mov	r0, r7
 800d548:	f7ff ff12 	bl	800d370 <__i2b>
 800d54c:	2300      	movs	r3, #0
 800d54e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d552:	4604      	mov	r4, r0
 800d554:	6003      	str	r3, [r0, #0]
 800d556:	f04f 0900 	mov.w	r9, #0
 800d55a:	07eb      	lsls	r3, r5, #31
 800d55c:	d50a      	bpl.n	800d574 <__pow5mult+0x84>
 800d55e:	4631      	mov	r1, r6
 800d560:	4622      	mov	r2, r4
 800d562:	4638      	mov	r0, r7
 800d564:	f7ff ff1a 	bl	800d39c <__multiply>
 800d568:	4631      	mov	r1, r6
 800d56a:	4680      	mov	r8, r0
 800d56c:	4638      	mov	r0, r7
 800d56e:	f7ff fe4b 	bl	800d208 <_Bfree>
 800d572:	4646      	mov	r6, r8
 800d574:	106d      	asrs	r5, r5, #1
 800d576:	d00b      	beq.n	800d590 <__pow5mult+0xa0>
 800d578:	6820      	ldr	r0, [r4, #0]
 800d57a:	b938      	cbnz	r0, 800d58c <__pow5mult+0x9c>
 800d57c:	4622      	mov	r2, r4
 800d57e:	4621      	mov	r1, r4
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff ff0b 	bl	800d39c <__multiply>
 800d586:	6020      	str	r0, [r4, #0]
 800d588:	f8c0 9000 	str.w	r9, [r0]
 800d58c:	4604      	mov	r4, r0
 800d58e:	e7e4      	b.n	800d55a <__pow5mult+0x6a>
 800d590:	4630      	mov	r0, r6
 800d592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d596:	bf00      	nop
 800d598:	0800fc20 	.word	0x0800fc20
 800d59c:	0800fb45 	.word	0x0800fb45
 800d5a0:	0800fbc5 	.word	0x0800fbc5

0800d5a4 <__lshift>:
 800d5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	6849      	ldr	r1, [r1, #4]
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5b2:	68a3      	ldr	r3, [r4, #8]
 800d5b4:	4607      	mov	r7, r0
 800d5b6:	4691      	mov	r9, r2
 800d5b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5bc:	f108 0601 	add.w	r6, r8, #1
 800d5c0:	42b3      	cmp	r3, r6
 800d5c2:	db0b      	blt.n	800d5dc <__lshift+0x38>
 800d5c4:	4638      	mov	r0, r7
 800d5c6:	f7ff fddf 	bl	800d188 <_Balloc>
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	b948      	cbnz	r0, 800d5e2 <__lshift+0x3e>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	4b28      	ldr	r3, [pc, #160]	@ (800d674 <__lshift+0xd0>)
 800d5d2:	4829      	ldr	r0, [pc, #164]	@ (800d678 <__lshift+0xd4>)
 800d5d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d5d8:	f000 fb94 	bl	800dd04 <__assert_func>
 800d5dc:	3101      	adds	r1, #1
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	e7ee      	b.n	800d5c0 <__lshift+0x1c>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	f100 0114 	add.w	r1, r0, #20
 800d5e8:	f100 0210 	add.w	r2, r0, #16
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	4553      	cmp	r3, sl
 800d5f0:	db33      	blt.n	800d65a <__lshift+0xb6>
 800d5f2:	6920      	ldr	r0, [r4, #16]
 800d5f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5f8:	f104 0314 	add.w	r3, r4, #20
 800d5fc:	f019 091f 	ands.w	r9, r9, #31
 800d600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d608:	d02b      	beq.n	800d662 <__lshift+0xbe>
 800d60a:	f1c9 0e20 	rsb	lr, r9, #32
 800d60e:	468a      	mov	sl, r1
 800d610:	2200      	movs	r2, #0
 800d612:	6818      	ldr	r0, [r3, #0]
 800d614:	fa00 f009 	lsl.w	r0, r0, r9
 800d618:	4310      	orrs	r0, r2
 800d61a:	f84a 0b04 	str.w	r0, [sl], #4
 800d61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d622:	459c      	cmp	ip, r3
 800d624:	fa22 f20e 	lsr.w	r2, r2, lr
 800d628:	d8f3      	bhi.n	800d612 <__lshift+0x6e>
 800d62a:	ebac 0304 	sub.w	r3, ip, r4
 800d62e:	3b15      	subs	r3, #21
 800d630:	f023 0303 	bic.w	r3, r3, #3
 800d634:	3304      	adds	r3, #4
 800d636:	f104 0015 	add.w	r0, r4, #21
 800d63a:	4584      	cmp	ip, r0
 800d63c:	bf38      	it	cc
 800d63e:	2304      	movcc	r3, #4
 800d640:	50ca      	str	r2, [r1, r3]
 800d642:	b10a      	cbz	r2, 800d648 <__lshift+0xa4>
 800d644:	f108 0602 	add.w	r6, r8, #2
 800d648:	3e01      	subs	r6, #1
 800d64a:	4638      	mov	r0, r7
 800d64c:	612e      	str	r6, [r5, #16]
 800d64e:	4621      	mov	r1, r4
 800d650:	f7ff fdda 	bl	800d208 <_Bfree>
 800d654:	4628      	mov	r0, r5
 800d656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d65a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d65e:	3301      	adds	r3, #1
 800d660:	e7c5      	b.n	800d5ee <__lshift+0x4a>
 800d662:	3904      	subs	r1, #4
 800d664:	f853 2b04 	ldr.w	r2, [r3], #4
 800d668:	f841 2f04 	str.w	r2, [r1, #4]!
 800d66c:	459c      	cmp	ip, r3
 800d66e:	d8f9      	bhi.n	800d664 <__lshift+0xc0>
 800d670:	e7ea      	b.n	800d648 <__lshift+0xa4>
 800d672:	bf00      	nop
 800d674:	0800fbb4 	.word	0x0800fbb4
 800d678:	0800fbc5 	.word	0x0800fbc5

0800d67c <__mcmp>:
 800d67c:	690a      	ldr	r2, [r1, #16]
 800d67e:	4603      	mov	r3, r0
 800d680:	6900      	ldr	r0, [r0, #16]
 800d682:	1a80      	subs	r0, r0, r2
 800d684:	b530      	push	{r4, r5, lr}
 800d686:	d10e      	bne.n	800d6a6 <__mcmp+0x2a>
 800d688:	3314      	adds	r3, #20
 800d68a:	3114      	adds	r1, #20
 800d68c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d690:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d69c:	4295      	cmp	r5, r2
 800d69e:	d003      	beq.n	800d6a8 <__mcmp+0x2c>
 800d6a0:	d205      	bcs.n	800d6ae <__mcmp+0x32>
 800d6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a6:	bd30      	pop	{r4, r5, pc}
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	d3f3      	bcc.n	800d694 <__mcmp+0x18>
 800d6ac:	e7fb      	b.n	800d6a6 <__mcmp+0x2a>
 800d6ae:	2001      	movs	r0, #1
 800d6b0:	e7f9      	b.n	800d6a6 <__mcmp+0x2a>
	...

0800d6b4 <__mdiff>:
 800d6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b8:	4689      	mov	r9, r1
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4648      	mov	r0, r9
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	f7ff ffdb 	bl	800d67c <__mcmp>
 800d6c6:	1e05      	subs	r5, r0, #0
 800d6c8:	d112      	bne.n	800d6f0 <__mdiff+0x3c>
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f7ff fd5b 	bl	800d188 <_Balloc>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	b928      	cbnz	r0, 800d6e2 <__mdiff+0x2e>
 800d6d6:	4b3f      	ldr	r3, [pc, #252]	@ (800d7d4 <__mdiff+0x120>)
 800d6d8:	f240 2137 	movw	r1, #567	@ 0x237
 800d6dc:	483e      	ldr	r0, [pc, #248]	@ (800d7d8 <__mdiff+0x124>)
 800d6de:	f000 fb11 	bl	800dd04 <__assert_func>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	b003      	add	sp, #12
 800d6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f0:	bfbc      	itt	lt
 800d6f2:	464b      	movlt	r3, r9
 800d6f4:	46a1      	movlt	r9, r4
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d6fc:	bfba      	itte	lt
 800d6fe:	461c      	movlt	r4, r3
 800d700:	2501      	movlt	r5, #1
 800d702:	2500      	movge	r5, #0
 800d704:	f7ff fd40 	bl	800d188 <_Balloc>
 800d708:	4602      	mov	r2, r0
 800d70a:	b918      	cbnz	r0, 800d714 <__mdiff+0x60>
 800d70c:	4b31      	ldr	r3, [pc, #196]	@ (800d7d4 <__mdiff+0x120>)
 800d70e:	f240 2145 	movw	r1, #581	@ 0x245
 800d712:	e7e3      	b.n	800d6dc <__mdiff+0x28>
 800d714:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d718:	6926      	ldr	r6, [r4, #16]
 800d71a:	60c5      	str	r5, [r0, #12]
 800d71c:	f109 0310 	add.w	r3, r9, #16
 800d720:	f109 0514 	add.w	r5, r9, #20
 800d724:	f104 0e14 	add.w	lr, r4, #20
 800d728:	f100 0b14 	add.w	fp, r0, #20
 800d72c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d730:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	46d9      	mov	r9, fp
 800d738:	f04f 0c00 	mov.w	ip, #0
 800d73c:	9b01      	ldr	r3, [sp, #4]
 800d73e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d742:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	fa1f f38a 	uxth.w	r3, sl
 800d74c:	4619      	mov	r1, r3
 800d74e:	b283      	uxth	r3, r0
 800d750:	1acb      	subs	r3, r1, r3
 800d752:	0c00      	lsrs	r0, r0, #16
 800d754:	4463      	add	r3, ip
 800d756:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d75a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d75e:	b29b      	uxth	r3, r3
 800d760:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d764:	4576      	cmp	r6, lr
 800d766:	f849 3b04 	str.w	r3, [r9], #4
 800d76a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d76e:	d8e5      	bhi.n	800d73c <__mdiff+0x88>
 800d770:	1b33      	subs	r3, r6, r4
 800d772:	3b15      	subs	r3, #21
 800d774:	f023 0303 	bic.w	r3, r3, #3
 800d778:	3415      	adds	r4, #21
 800d77a:	3304      	adds	r3, #4
 800d77c:	42a6      	cmp	r6, r4
 800d77e:	bf38      	it	cc
 800d780:	2304      	movcc	r3, #4
 800d782:	441d      	add	r5, r3
 800d784:	445b      	add	r3, fp
 800d786:	461e      	mov	r6, r3
 800d788:	462c      	mov	r4, r5
 800d78a:	4544      	cmp	r4, r8
 800d78c:	d30e      	bcc.n	800d7ac <__mdiff+0xf8>
 800d78e:	f108 0103 	add.w	r1, r8, #3
 800d792:	1b49      	subs	r1, r1, r5
 800d794:	f021 0103 	bic.w	r1, r1, #3
 800d798:	3d03      	subs	r5, #3
 800d79a:	45a8      	cmp	r8, r5
 800d79c:	bf38      	it	cc
 800d79e:	2100      	movcc	r1, #0
 800d7a0:	440b      	add	r3, r1
 800d7a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7a6:	b191      	cbz	r1, 800d7ce <__mdiff+0x11a>
 800d7a8:	6117      	str	r7, [r2, #16]
 800d7aa:	e79d      	b.n	800d6e8 <__mdiff+0x34>
 800d7ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800d7b0:	46e6      	mov	lr, ip
 800d7b2:	0c08      	lsrs	r0, r1, #16
 800d7b4:	fa1c fc81 	uxtah	ip, ip, r1
 800d7b8:	4471      	add	r1, lr
 800d7ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d7be:	b289      	uxth	r1, r1
 800d7c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d7c4:	f846 1b04 	str.w	r1, [r6], #4
 800d7c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7cc:	e7dd      	b.n	800d78a <__mdiff+0xd6>
 800d7ce:	3f01      	subs	r7, #1
 800d7d0:	e7e7      	b.n	800d7a2 <__mdiff+0xee>
 800d7d2:	bf00      	nop
 800d7d4:	0800fbb4 	.word	0x0800fbb4
 800d7d8:	0800fbc5 	.word	0x0800fbc5

0800d7dc <__d2b>:
 800d7dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7e0:	460f      	mov	r7, r1
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	ec59 8b10 	vmov	r8, r9, d0
 800d7e8:	4616      	mov	r6, r2
 800d7ea:	f7ff fccd 	bl	800d188 <_Balloc>
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	b930      	cbnz	r0, 800d800 <__d2b+0x24>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	4b23      	ldr	r3, [pc, #140]	@ (800d884 <__d2b+0xa8>)
 800d7f6:	4824      	ldr	r0, [pc, #144]	@ (800d888 <__d2b+0xac>)
 800d7f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d7fc:	f000 fa82 	bl	800dd04 <__assert_func>
 800d800:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d804:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d808:	b10d      	cbz	r5, 800d80e <__d2b+0x32>
 800d80a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d80e:	9301      	str	r3, [sp, #4]
 800d810:	f1b8 0300 	subs.w	r3, r8, #0
 800d814:	d023      	beq.n	800d85e <__d2b+0x82>
 800d816:	4668      	mov	r0, sp
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	f7ff fd7c 	bl	800d316 <__lo0bits>
 800d81e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d822:	b1d0      	cbz	r0, 800d85a <__d2b+0x7e>
 800d824:	f1c0 0320 	rsb	r3, r0, #32
 800d828:	fa02 f303 	lsl.w	r3, r2, r3
 800d82c:	430b      	orrs	r3, r1
 800d82e:	40c2      	lsrs	r2, r0
 800d830:	6163      	str	r3, [r4, #20]
 800d832:	9201      	str	r2, [sp, #4]
 800d834:	9b01      	ldr	r3, [sp, #4]
 800d836:	61a3      	str	r3, [r4, #24]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	bf0c      	ite	eq
 800d83c:	2201      	moveq	r2, #1
 800d83e:	2202      	movne	r2, #2
 800d840:	6122      	str	r2, [r4, #16]
 800d842:	b1a5      	cbz	r5, 800d86e <__d2b+0x92>
 800d844:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d848:	4405      	add	r5, r0
 800d84a:	603d      	str	r5, [r7, #0]
 800d84c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d850:	6030      	str	r0, [r6, #0]
 800d852:	4620      	mov	r0, r4
 800d854:	b003      	add	sp, #12
 800d856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d85a:	6161      	str	r1, [r4, #20]
 800d85c:	e7ea      	b.n	800d834 <__d2b+0x58>
 800d85e:	a801      	add	r0, sp, #4
 800d860:	f7ff fd59 	bl	800d316 <__lo0bits>
 800d864:	9b01      	ldr	r3, [sp, #4]
 800d866:	6163      	str	r3, [r4, #20]
 800d868:	3020      	adds	r0, #32
 800d86a:	2201      	movs	r2, #1
 800d86c:	e7e8      	b.n	800d840 <__d2b+0x64>
 800d86e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d872:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d876:	6038      	str	r0, [r7, #0]
 800d878:	6918      	ldr	r0, [r3, #16]
 800d87a:	f7ff fd2d 	bl	800d2d8 <__hi0bits>
 800d87e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d882:	e7e5      	b.n	800d850 <__d2b+0x74>
 800d884:	0800fbb4 	.word	0x0800fbb4
 800d888:	0800fbc5 	.word	0x0800fbc5

0800d88c <__ssputs_r>:
 800d88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d890:	688e      	ldr	r6, [r1, #8]
 800d892:	461f      	mov	r7, r3
 800d894:	42be      	cmp	r6, r7
 800d896:	680b      	ldr	r3, [r1, #0]
 800d898:	4682      	mov	sl, r0
 800d89a:	460c      	mov	r4, r1
 800d89c:	4690      	mov	r8, r2
 800d89e:	d82d      	bhi.n	800d8fc <__ssputs_r+0x70>
 800d8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d8a8:	d026      	beq.n	800d8f8 <__ssputs_r+0x6c>
 800d8aa:	6965      	ldr	r5, [r4, #20]
 800d8ac:	6909      	ldr	r1, [r1, #16]
 800d8ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8b2:	eba3 0901 	sub.w	r9, r3, r1
 800d8b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8ba:	1c7b      	adds	r3, r7, #1
 800d8bc:	444b      	add	r3, r9
 800d8be:	106d      	asrs	r5, r5, #1
 800d8c0:	429d      	cmp	r5, r3
 800d8c2:	bf38      	it	cc
 800d8c4:	461d      	movcc	r5, r3
 800d8c6:	0553      	lsls	r3, r2, #21
 800d8c8:	d527      	bpl.n	800d91a <__ssputs_r+0x8e>
 800d8ca:	4629      	mov	r1, r5
 800d8cc:	f7ff fbd0 	bl	800d070 <_malloc_r>
 800d8d0:	4606      	mov	r6, r0
 800d8d2:	b360      	cbz	r0, 800d92e <__ssputs_r+0xa2>
 800d8d4:	6921      	ldr	r1, [r4, #16]
 800d8d6:	464a      	mov	r2, r9
 800d8d8:	f000 fa06 	bl	800dce8 <memcpy>
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8e6:	81a3      	strh	r3, [r4, #12]
 800d8e8:	6126      	str	r6, [r4, #16]
 800d8ea:	6165      	str	r5, [r4, #20]
 800d8ec:	444e      	add	r6, r9
 800d8ee:	eba5 0509 	sub.w	r5, r5, r9
 800d8f2:	6026      	str	r6, [r4, #0]
 800d8f4:	60a5      	str	r5, [r4, #8]
 800d8f6:	463e      	mov	r6, r7
 800d8f8:	42be      	cmp	r6, r7
 800d8fa:	d900      	bls.n	800d8fe <__ssputs_r+0x72>
 800d8fc:	463e      	mov	r6, r7
 800d8fe:	6820      	ldr	r0, [r4, #0]
 800d900:	4632      	mov	r2, r6
 800d902:	4641      	mov	r1, r8
 800d904:	f000 f9c6 	bl	800dc94 <memmove>
 800d908:	68a3      	ldr	r3, [r4, #8]
 800d90a:	1b9b      	subs	r3, r3, r6
 800d90c:	60a3      	str	r3, [r4, #8]
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	4433      	add	r3, r6
 800d912:	6023      	str	r3, [r4, #0]
 800d914:	2000      	movs	r0, #0
 800d916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91a:	462a      	mov	r2, r5
 800d91c:	f000 fa36 	bl	800dd8c <_realloc_r>
 800d920:	4606      	mov	r6, r0
 800d922:	2800      	cmp	r0, #0
 800d924:	d1e0      	bne.n	800d8e8 <__ssputs_r+0x5c>
 800d926:	6921      	ldr	r1, [r4, #16]
 800d928:	4650      	mov	r0, sl
 800d92a:	f7ff fb2d 	bl	800cf88 <_free_r>
 800d92e:	230c      	movs	r3, #12
 800d930:	f8ca 3000 	str.w	r3, [sl]
 800d934:	89a3      	ldrh	r3, [r4, #12]
 800d936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d93a:	81a3      	strh	r3, [r4, #12]
 800d93c:	f04f 30ff 	mov.w	r0, #4294967295
 800d940:	e7e9      	b.n	800d916 <__ssputs_r+0x8a>
	...

0800d944 <_svfiprintf_r>:
 800d944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d948:	4698      	mov	r8, r3
 800d94a:	898b      	ldrh	r3, [r1, #12]
 800d94c:	061b      	lsls	r3, r3, #24
 800d94e:	b09d      	sub	sp, #116	@ 0x74
 800d950:	4607      	mov	r7, r0
 800d952:	460d      	mov	r5, r1
 800d954:	4614      	mov	r4, r2
 800d956:	d510      	bpl.n	800d97a <_svfiprintf_r+0x36>
 800d958:	690b      	ldr	r3, [r1, #16]
 800d95a:	b973      	cbnz	r3, 800d97a <_svfiprintf_r+0x36>
 800d95c:	2140      	movs	r1, #64	@ 0x40
 800d95e:	f7ff fb87 	bl	800d070 <_malloc_r>
 800d962:	6028      	str	r0, [r5, #0]
 800d964:	6128      	str	r0, [r5, #16]
 800d966:	b930      	cbnz	r0, 800d976 <_svfiprintf_r+0x32>
 800d968:	230c      	movs	r3, #12
 800d96a:	603b      	str	r3, [r7, #0]
 800d96c:	f04f 30ff 	mov.w	r0, #4294967295
 800d970:	b01d      	add	sp, #116	@ 0x74
 800d972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d976:	2340      	movs	r3, #64	@ 0x40
 800d978:	616b      	str	r3, [r5, #20]
 800d97a:	2300      	movs	r3, #0
 800d97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d97e:	2320      	movs	r3, #32
 800d980:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d984:	f8cd 800c 	str.w	r8, [sp, #12]
 800d988:	2330      	movs	r3, #48	@ 0x30
 800d98a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db28 <_svfiprintf_r+0x1e4>
 800d98e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d992:	f04f 0901 	mov.w	r9, #1
 800d996:	4623      	mov	r3, r4
 800d998:	469a      	mov	sl, r3
 800d99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d99e:	b10a      	cbz	r2, 800d9a4 <_svfiprintf_r+0x60>
 800d9a0:	2a25      	cmp	r2, #37	@ 0x25
 800d9a2:	d1f9      	bne.n	800d998 <_svfiprintf_r+0x54>
 800d9a4:	ebba 0b04 	subs.w	fp, sl, r4
 800d9a8:	d00b      	beq.n	800d9c2 <_svfiprintf_r+0x7e>
 800d9aa:	465b      	mov	r3, fp
 800d9ac:	4622      	mov	r2, r4
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	f7ff ff6b 	bl	800d88c <__ssputs_r>
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f000 80a7 	beq.w	800db0a <_svfiprintf_r+0x1c6>
 800d9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9be:	445a      	add	r2, fp
 800d9c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	f000 809f 	beq.w	800db0a <_svfiprintf_r+0x1c6>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9d6:	f10a 0a01 	add.w	sl, sl, #1
 800d9da:	9304      	str	r3, [sp, #16]
 800d9dc:	9307      	str	r3, [sp, #28]
 800d9de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9e4:	4654      	mov	r4, sl
 800d9e6:	2205      	movs	r2, #5
 800d9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ec:	484e      	ldr	r0, [pc, #312]	@ (800db28 <_svfiprintf_r+0x1e4>)
 800d9ee:	f7f2 fbef 	bl	80001d0 <memchr>
 800d9f2:	9a04      	ldr	r2, [sp, #16]
 800d9f4:	b9d8      	cbnz	r0, 800da2e <_svfiprintf_r+0xea>
 800d9f6:	06d0      	lsls	r0, r2, #27
 800d9f8:	bf44      	itt	mi
 800d9fa:	2320      	movmi	r3, #32
 800d9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da00:	0711      	lsls	r1, r2, #28
 800da02:	bf44      	itt	mi
 800da04:	232b      	movmi	r3, #43	@ 0x2b
 800da06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da0a:	f89a 3000 	ldrb.w	r3, [sl]
 800da0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da10:	d015      	beq.n	800da3e <_svfiprintf_r+0xfa>
 800da12:	9a07      	ldr	r2, [sp, #28]
 800da14:	4654      	mov	r4, sl
 800da16:	2000      	movs	r0, #0
 800da18:	f04f 0c0a 	mov.w	ip, #10
 800da1c:	4621      	mov	r1, r4
 800da1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da22:	3b30      	subs	r3, #48	@ 0x30
 800da24:	2b09      	cmp	r3, #9
 800da26:	d94b      	bls.n	800dac0 <_svfiprintf_r+0x17c>
 800da28:	b1b0      	cbz	r0, 800da58 <_svfiprintf_r+0x114>
 800da2a:	9207      	str	r2, [sp, #28]
 800da2c:	e014      	b.n	800da58 <_svfiprintf_r+0x114>
 800da2e:	eba0 0308 	sub.w	r3, r0, r8
 800da32:	fa09 f303 	lsl.w	r3, r9, r3
 800da36:	4313      	orrs	r3, r2
 800da38:	9304      	str	r3, [sp, #16]
 800da3a:	46a2      	mov	sl, r4
 800da3c:	e7d2      	b.n	800d9e4 <_svfiprintf_r+0xa0>
 800da3e:	9b03      	ldr	r3, [sp, #12]
 800da40:	1d19      	adds	r1, r3, #4
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	9103      	str	r1, [sp, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	bfbb      	ittet	lt
 800da4a:	425b      	neglt	r3, r3
 800da4c:	f042 0202 	orrlt.w	r2, r2, #2
 800da50:	9307      	strge	r3, [sp, #28]
 800da52:	9307      	strlt	r3, [sp, #28]
 800da54:	bfb8      	it	lt
 800da56:	9204      	strlt	r2, [sp, #16]
 800da58:	7823      	ldrb	r3, [r4, #0]
 800da5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800da5c:	d10a      	bne.n	800da74 <_svfiprintf_r+0x130>
 800da5e:	7863      	ldrb	r3, [r4, #1]
 800da60:	2b2a      	cmp	r3, #42	@ 0x2a
 800da62:	d132      	bne.n	800daca <_svfiprintf_r+0x186>
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	1d1a      	adds	r2, r3, #4
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	9203      	str	r2, [sp, #12]
 800da6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da70:	3402      	adds	r4, #2
 800da72:	9305      	str	r3, [sp, #20]
 800da74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db38 <_svfiprintf_r+0x1f4>
 800da78:	7821      	ldrb	r1, [r4, #0]
 800da7a:	2203      	movs	r2, #3
 800da7c:	4650      	mov	r0, sl
 800da7e:	f7f2 fba7 	bl	80001d0 <memchr>
 800da82:	b138      	cbz	r0, 800da94 <_svfiprintf_r+0x150>
 800da84:	9b04      	ldr	r3, [sp, #16]
 800da86:	eba0 000a 	sub.w	r0, r0, sl
 800da8a:	2240      	movs	r2, #64	@ 0x40
 800da8c:	4082      	lsls	r2, r0
 800da8e:	4313      	orrs	r3, r2
 800da90:	3401      	adds	r4, #1
 800da92:	9304      	str	r3, [sp, #16]
 800da94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da98:	4824      	ldr	r0, [pc, #144]	@ (800db2c <_svfiprintf_r+0x1e8>)
 800da9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da9e:	2206      	movs	r2, #6
 800daa0:	f7f2 fb96 	bl	80001d0 <memchr>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d036      	beq.n	800db16 <_svfiprintf_r+0x1d2>
 800daa8:	4b21      	ldr	r3, [pc, #132]	@ (800db30 <_svfiprintf_r+0x1ec>)
 800daaa:	bb1b      	cbnz	r3, 800daf4 <_svfiprintf_r+0x1b0>
 800daac:	9b03      	ldr	r3, [sp, #12]
 800daae:	3307      	adds	r3, #7
 800dab0:	f023 0307 	bic.w	r3, r3, #7
 800dab4:	3308      	adds	r3, #8
 800dab6:	9303      	str	r3, [sp, #12]
 800dab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daba:	4433      	add	r3, r6
 800dabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dabe:	e76a      	b.n	800d996 <_svfiprintf_r+0x52>
 800dac0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dac4:	460c      	mov	r4, r1
 800dac6:	2001      	movs	r0, #1
 800dac8:	e7a8      	b.n	800da1c <_svfiprintf_r+0xd8>
 800daca:	2300      	movs	r3, #0
 800dacc:	3401      	adds	r4, #1
 800dace:	9305      	str	r3, [sp, #20]
 800dad0:	4619      	mov	r1, r3
 800dad2:	f04f 0c0a 	mov.w	ip, #10
 800dad6:	4620      	mov	r0, r4
 800dad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dadc:	3a30      	subs	r2, #48	@ 0x30
 800dade:	2a09      	cmp	r2, #9
 800dae0:	d903      	bls.n	800daea <_svfiprintf_r+0x1a6>
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d0c6      	beq.n	800da74 <_svfiprintf_r+0x130>
 800dae6:	9105      	str	r1, [sp, #20]
 800dae8:	e7c4      	b.n	800da74 <_svfiprintf_r+0x130>
 800daea:	fb0c 2101 	mla	r1, ip, r1, r2
 800daee:	4604      	mov	r4, r0
 800daf0:	2301      	movs	r3, #1
 800daf2:	e7f0      	b.n	800dad6 <_svfiprintf_r+0x192>
 800daf4:	ab03      	add	r3, sp, #12
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	462a      	mov	r2, r5
 800dafa:	4b0e      	ldr	r3, [pc, #56]	@ (800db34 <_svfiprintf_r+0x1f0>)
 800dafc:	a904      	add	r1, sp, #16
 800dafe:	4638      	mov	r0, r7
 800db00:	f7fd fe98 	bl	800b834 <_printf_float>
 800db04:	1c42      	adds	r2, r0, #1
 800db06:	4606      	mov	r6, r0
 800db08:	d1d6      	bne.n	800dab8 <_svfiprintf_r+0x174>
 800db0a:	89ab      	ldrh	r3, [r5, #12]
 800db0c:	065b      	lsls	r3, r3, #25
 800db0e:	f53f af2d 	bmi.w	800d96c <_svfiprintf_r+0x28>
 800db12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db14:	e72c      	b.n	800d970 <_svfiprintf_r+0x2c>
 800db16:	ab03      	add	r3, sp, #12
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	462a      	mov	r2, r5
 800db1c:	4b05      	ldr	r3, [pc, #20]	@ (800db34 <_svfiprintf_r+0x1f0>)
 800db1e:	a904      	add	r1, sp, #16
 800db20:	4638      	mov	r0, r7
 800db22:	f7fe f91f 	bl	800bd64 <_printf_i>
 800db26:	e7ed      	b.n	800db04 <_svfiprintf_r+0x1c0>
 800db28:	0800fd20 	.word	0x0800fd20
 800db2c:	0800fd2a 	.word	0x0800fd2a
 800db30:	0800b835 	.word	0x0800b835
 800db34:	0800d88d 	.word	0x0800d88d
 800db38:	0800fd26 	.word	0x0800fd26

0800db3c <__sflush_r>:
 800db3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db44:	0716      	lsls	r6, r2, #28
 800db46:	4605      	mov	r5, r0
 800db48:	460c      	mov	r4, r1
 800db4a:	d454      	bmi.n	800dbf6 <__sflush_r+0xba>
 800db4c:	684b      	ldr	r3, [r1, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	dc02      	bgt.n	800db58 <__sflush_r+0x1c>
 800db52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800db54:	2b00      	cmp	r3, #0
 800db56:	dd48      	ble.n	800dbea <__sflush_r+0xae>
 800db58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db5a:	2e00      	cmp	r6, #0
 800db5c:	d045      	beq.n	800dbea <__sflush_r+0xae>
 800db5e:	2300      	movs	r3, #0
 800db60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db64:	682f      	ldr	r7, [r5, #0]
 800db66:	6a21      	ldr	r1, [r4, #32]
 800db68:	602b      	str	r3, [r5, #0]
 800db6a:	d030      	beq.n	800dbce <__sflush_r+0x92>
 800db6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	0759      	lsls	r1, r3, #29
 800db72:	d505      	bpl.n	800db80 <__sflush_r+0x44>
 800db74:	6863      	ldr	r3, [r4, #4]
 800db76:	1ad2      	subs	r2, r2, r3
 800db78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db7a:	b10b      	cbz	r3, 800db80 <__sflush_r+0x44>
 800db7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db7e:	1ad2      	subs	r2, r2, r3
 800db80:	2300      	movs	r3, #0
 800db82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db84:	6a21      	ldr	r1, [r4, #32]
 800db86:	4628      	mov	r0, r5
 800db88:	47b0      	blx	r6
 800db8a:	1c43      	adds	r3, r0, #1
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	d106      	bne.n	800db9e <__sflush_r+0x62>
 800db90:	6829      	ldr	r1, [r5, #0]
 800db92:	291d      	cmp	r1, #29
 800db94:	d82b      	bhi.n	800dbee <__sflush_r+0xb2>
 800db96:	4a2a      	ldr	r2, [pc, #168]	@ (800dc40 <__sflush_r+0x104>)
 800db98:	410a      	asrs	r2, r1
 800db9a:	07d6      	lsls	r6, r2, #31
 800db9c:	d427      	bmi.n	800dbee <__sflush_r+0xb2>
 800db9e:	2200      	movs	r2, #0
 800dba0:	6062      	str	r2, [r4, #4]
 800dba2:	04d9      	lsls	r1, r3, #19
 800dba4:	6922      	ldr	r2, [r4, #16]
 800dba6:	6022      	str	r2, [r4, #0]
 800dba8:	d504      	bpl.n	800dbb4 <__sflush_r+0x78>
 800dbaa:	1c42      	adds	r2, r0, #1
 800dbac:	d101      	bne.n	800dbb2 <__sflush_r+0x76>
 800dbae:	682b      	ldr	r3, [r5, #0]
 800dbb0:	b903      	cbnz	r3, 800dbb4 <__sflush_r+0x78>
 800dbb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800dbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbb6:	602f      	str	r7, [r5, #0]
 800dbb8:	b1b9      	cbz	r1, 800dbea <__sflush_r+0xae>
 800dbba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbbe:	4299      	cmp	r1, r3
 800dbc0:	d002      	beq.n	800dbc8 <__sflush_r+0x8c>
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f7ff f9e0 	bl	800cf88 <_free_r>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbcc:	e00d      	b.n	800dbea <__sflush_r+0xae>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	47b0      	blx	r6
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	1c50      	adds	r0, r2, #1
 800dbd8:	d1c9      	bne.n	800db6e <__sflush_r+0x32>
 800dbda:	682b      	ldr	r3, [r5, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d0c6      	beq.n	800db6e <__sflush_r+0x32>
 800dbe0:	2b1d      	cmp	r3, #29
 800dbe2:	d001      	beq.n	800dbe8 <__sflush_r+0xac>
 800dbe4:	2b16      	cmp	r3, #22
 800dbe6:	d11e      	bne.n	800dc26 <__sflush_r+0xea>
 800dbe8:	602f      	str	r7, [r5, #0]
 800dbea:	2000      	movs	r0, #0
 800dbec:	e022      	b.n	800dc34 <__sflush_r+0xf8>
 800dbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbf2:	b21b      	sxth	r3, r3
 800dbf4:	e01b      	b.n	800dc2e <__sflush_r+0xf2>
 800dbf6:	690f      	ldr	r7, [r1, #16]
 800dbf8:	2f00      	cmp	r7, #0
 800dbfa:	d0f6      	beq.n	800dbea <__sflush_r+0xae>
 800dbfc:	0793      	lsls	r3, r2, #30
 800dbfe:	680e      	ldr	r6, [r1, #0]
 800dc00:	bf08      	it	eq
 800dc02:	694b      	ldreq	r3, [r1, #20]
 800dc04:	600f      	str	r7, [r1, #0]
 800dc06:	bf18      	it	ne
 800dc08:	2300      	movne	r3, #0
 800dc0a:	eba6 0807 	sub.w	r8, r6, r7
 800dc0e:	608b      	str	r3, [r1, #8]
 800dc10:	f1b8 0f00 	cmp.w	r8, #0
 800dc14:	dde9      	ble.n	800dbea <__sflush_r+0xae>
 800dc16:	6a21      	ldr	r1, [r4, #32]
 800dc18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dc1a:	4643      	mov	r3, r8
 800dc1c:	463a      	mov	r2, r7
 800dc1e:	4628      	mov	r0, r5
 800dc20:	47b0      	blx	r6
 800dc22:	2800      	cmp	r0, #0
 800dc24:	dc08      	bgt.n	800dc38 <__sflush_r+0xfc>
 800dc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc2e:	81a3      	strh	r3, [r4, #12]
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295
 800dc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc38:	4407      	add	r7, r0
 800dc3a:	eba8 0800 	sub.w	r8, r8, r0
 800dc3e:	e7e7      	b.n	800dc10 <__sflush_r+0xd4>
 800dc40:	dfbffffe 	.word	0xdfbffffe

0800dc44 <_fflush_r>:
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	690b      	ldr	r3, [r1, #16]
 800dc48:	4605      	mov	r5, r0
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	b913      	cbnz	r3, 800dc54 <_fflush_r+0x10>
 800dc4e:	2500      	movs	r5, #0
 800dc50:	4628      	mov	r0, r5
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	b118      	cbz	r0, 800dc5e <_fflush_r+0x1a>
 800dc56:	6a03      	ldr	r3, [r0, #32]
 800dc58:	b90b      	cbnz	r3, 800dc5e <_fflush_r+0x1a>
 800dc5a:	f7fe fa2f 	bl	800c0bc <__sinit>
 800dc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d0f3      	beq.n	800dc4e <_fflush_r+0xa>
 800dc66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc68:	07d0      	lsls	r0, r2, #31
 800dc6a:	d404      	bmi.n	800dc76 <_fflush_r+0x32>
 800dc6c:	0599      	lsls	r1, r3, #22
 800dc6e:	d402      	bmi.n	800dc76 <_fflush_r+0x32>
 800dc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc72:	f7fe fb3a 	bl	800c2ea <__retarget_lock_acquire_recursive>
 800dc76:	4628      	mov	r0, r5
 800dc78:	4621      	mov	r1, r4
 800dc7a:	f7ff ff5f 	bl	800db3c <__sflush_r>
 800dc7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc80:	07da      	lsls	r2, r3, #31
 800dc82:	4605      	mov	r5, r0
 800dc84:	d4e4      	bmi.n	800dc50 <_fflush_r+0xc>
 800dc86:	89a3      	ldrh	r3, [r4, #12]
 800dc88:	059b      	lsls	r3, r3, #22
 800dc8a:	d4e1      	bmi.n	800dc50 <_fflush_r+0xc>
 800dc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc8e:	f7fe fb2d 	bl	800c2ec <__retarget_lock_release_recursive>
 800dc92:	e7dd      	b.n	800dc50 <_fflush_r+0xc>

0800dc94 <memmove>:
 800dc94:	4288      	cmp	r0, r1
 800dc96:	b510      	push	{r4, lr}
 800dc98:	eb01 0402 	add.w	r4, r1, r2
 800dc9c:	d902      	bls.n	800dca4 <memmove+0x10>
 800dc9e:	4284      	cmp	r4, r0
 800dca0:	4623      	mov	r3, r4
 800dca2:	d807      	bhi.n	800dcb4 <memmove+0x20>
 800dca4:	1e43      	subs	r3, r0, #1
 800dca6:	42a1      	cmp	r1, r4
 800dca8:	d008      	beq.n	800dcbc <memmove+0x28>
 800dcaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcb2:	e7f8      	b.n	800dca6 <memmove+0x12>
 800dcb4:	4402      	add	r2, r0
 800dcb6:	4601      	mov	r1, r0
 800dcb8:	428a      	cmp	r2, r1
 800dcba:	d100      	bne.n	800dcbe <memmove+0x2a>
 800dcbc:	bd10      	pop	{r4, pc}
 800dcbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcc6:	e7f7      	b.n	800dcb8 <memmove+0x24>

0800dcc8 <_sbrk_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d06      	ldr	r5, [pc, #24]	@ (800dce4 <_sbrk_r+0x1c>)
 800dccc:	2300      	movs	r3, #0
 800dcce:	4604      	mov	r4, r0
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	602b      	str	r3, [r5, #0]
 800dcd4:	f7f5 fed6 	bl	8003a84 <_sbrk>
 800dcd8:	1c43      	adds	r3, r0, #1
 800dcda:	d102      	bne.n	800dce2 <_sbrk_r+0x1a>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	b103      	cbz	r3, 800dce2 <_sbrk_r+0x1a>
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	20002238 	.word	0x20002238

0800dce8 <memcpy>:
 800dce8:	440a      	add	r2, r1
 800dcea:	4291      	cmp	r1, r2
 800dcec:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcf0:	d100      	bne.n	800dcf4 <memcpy+0xc>
 800dcf2:	4770      	bx	lr
 800dcf4:	b510      	push	{r4, lr}
 800dcf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcfe:	4291      	cmp	r1, r2
 800dd00:	d1f9      	bne.n	800dcf6 <memcpy+0xe>
 800dd02:	bd10      	pop	{r4, pc}

0800dd04 <__assert_func>:
 800dd04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd06:	4614      	mov	r4, r2
 800dd08:	461a      	mov	r2, r3
 800dd0a:	4b09      	ldr	r3, [pc, #36]	@ (800dd30 <__assert_func+0x2c>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4605      	mov	r5, r0
 800dd10:	68d8      	ldr	r0, [r3, #12]
 800dd12:	b954      	cbnz	r4, 800dd2a <__assert_func+0x26>
 800dd14:	4b07      	ldr	r3, [pc, #28]	@ (800dd34 <__assert_func+0x30>)
 800dd16:	461c      	mov	r4, r3
 800dd18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd1c:	9100      	str	r1, [sp, #0]
 800dd1e:	462b      	mov	r3, r5
 800dd20:	4905      	ldr	r1, [pc, #20]	@ (800dd38 <__assert_func+0x34>)
 800dd22:	f000 f86f 	bl	800de04 <fiprintf>
 800dd26:	f000 f87f 	bl	800de28 <abort>
 800dd2a:	4b04      	ldr	r3, [pc, #16]	@ (800dd3c <__assert_func+0x38>)
 800dd2c:	e7f4      	b.n	800dd18 <__assert_func+0x14>
 800dd2e:	bf00      	nop
 800dd30:	20000108 	.word	0x20000108
 800dd34:	0800fd76 	.word	0x0800fd76
 800dd38:	0800fd48 	.word	0x0800fd48
 800dd3c:	0800fd3b 	.word	0x0800fd3b

0800dd40 <_calloc_r>:
 800dd40:	b570      	push	{r4, r5, r6, lr}
 800dd42:	fba1 5402 	umull	r5, r4, r1, r2
 800dd46:	b93c      	cbnz	r4, 800dd58 <_calloc_r+0x18>
 800dd48:	4629      	mov	r1, r5
 800dd4a:	f7ff f991 	bl	800d070 <_malloc_r>
 800dd4e:	4606      	mov	r6, r0
 800dd50:	b928      	cbnz	r0, 800dd5e <_calloc_r+0x1e>
 800dd52:	2600      	movs	r6, #0
 800dd54:	4630      	mov	r0, r6
 800dd56:	bd70      	pop	{r4, r5, r6, pc}
 800dd58:	220c      	movs	r2, #12
 800dd5a:	6002      	str	r2, [r0, #0]
 800dd5c:	e7f9      	b.n	800dd52 <_calloc_r+0x12>
 800dd5e:	462a      	mov	r2, r5
 800dd60:	4621      	mov	r1, r4
 800dd62:	f7fe fa44 	bl	800c1ee <memset>
 800dd66:	e7f5      	b.n	800dd54 <_calloc_r+0x14>

0800dd68 <__ascii_mbtowc>:
 800dd68:	b082      	sub	sp, #8
 800dd6a:	b901      	cbnz	r1, 800dd6e <__ascii_mbtowc+0x6>
 800dd6c:	a901      	add	r1, sp, #4
 800dd6e:	b142      	cbz	r2, 800dd82 <__ascii_mbtowc+0x1a>
 800dd70:	b14b      	cbz	r3, 800dd86 <__ascii_mbtowc+0x1e>
 800dd72:	7813      	ldrb	r3, [r2, #0]
 800dd74:	600b      	str	r3, [r1, #0]
 800dd76:	7812      	ldrb	r2, [r2, #0]
 800dd78:	1e10      	subs	r0, r2, #0
 800dd7a:	bf18      	it	ne
 800dd7c:	2001      	movne	r0, #1
 800dd7e:	b002      	add	sp, #8
 800dd80:	4770      	bx	lr
 800dd82:	4610      	mov	r0, r2
 800dd84:	e7fb      	b.n	800dd7e <__ascii_mbtowc+0x16>
 800dd86:	f06f 0001 	mvn.w	r0, #1
 800dd8a:	e7f8      	b.n	800dd7e <__ascii_mbtowc+0x16>

0800dd8c <_realloc_r>:
 800dd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd90:	4680      	mov	r8, r0
 800dd92:	4615      	mov	r5, r2
 800dd94:	460c      	mov	r4, r1
 800dd96:	b921      	cbnz	r1, 800dda2 <_realloc_r+0x16>
 800dd98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	f7ff b967 	b.w	800d070 <_malloc_r>
 800dda2:	b92a      	cbnz	r2, 800ddb0 <_realloc_r+0x24>
 800dda4:	f7ff f8f0 	bl	800cf88 <_free_r>
 800dda8:	2400      	movs	r4, #0
 800ddaa:	4620      	mov	r0, r4
 800ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb0:	f000 f841 	bl	800de36 <_malloc_usable_size_r>
 800ddb4:	4285      	cmp	r5, r0
 800ddb6:	4606      	mov	r6, r0
 800ddb8:	d802      	bhi.n	800ddc0 <_realloc_r+0x34>
 800ddba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ddbe:	d8f4      	bhi.n	800ddaa <_realloc_r+0x1e>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	f7ff f954 	bl	800d070 <_malloc_r>
 800ddc8:	4607      	mov	r7, r0
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d0ec      	beq.n	800dda8 <_realloc_r+0x1c>
 800ddce:	42b5      	cmp	r5, r6
 800ddd0:	462a      	mov	r2, r5
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	bf28      	it	cs
 800ddd6:	4632      	movcs	r2, r6
 800ddd8:	f7ff ff86 	bl	800dce8 <memcpy>
 800dddc:	4621      	mov	r1, r4
 800ddde:	4640      	mov	r0, r8
 800dde0:	f7ff f8d2 	bl	800cf88 <_free_r>
 800dde4:	463c      	mov	r4, r7
 800dde6:	e7e0      	b.n	800ddaa <_realloc_r+0x1e>

0800dde8 <__ascii_wctomb>:
 800dde8:	4603      	mov	r3, r0
 800ddea:	4608      	mov	r0, r1
 800ddec:	b141      	cbz	r1, 800de00 <__ascii_wctomb+0x18>
 800ddee:	2aff      	cmp	r2, #255	@ 0xff
 800ddf0:	d904      	bls.n	800ddfc <__ascii_wctomb+0x14>
 800ddf2:	228a      	movs	r2, #138	@ 0x8a
 800ddf4:	601a      	str	r2, [r3, #0]
 800ddf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfa:	4770      	bx	lr
 800ddfc:	700a      	strb	r2, [r1, #0]
 800ddfe:	2001      	movs	r0, #1
 800de00:	4770      	bx	lr
	...

0800de04 <fiprintf>:
 800de04:	b40e      	push	{r1, r2, r3}
 800de06:	b503      	push	{r0, r1, lr}
 800de08:	4601      	mov	r1, r0
 800de0a:	ab03      	add	r3, sp, #12
 800de0c:	4805      	ldr	r0, [pc, #20]	@ (800de24 <fiprintf+0x20>)
 800de0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de12:	6800      	ldr	r0, [r0, #0]
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	f000 f83f 	bl	800de98 <_vfiprintf_r>
 800de1a:	b002      	add	sp, #8
 800de1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de20:	b003      	add	sp, #12
 800de22:	4770      	bx	lr
 800de24:	20000108 	.word	0x20000108

0800de28 <abort>:
 800de28:	b508      	push	{r3, lr}
 800de2a:	2006      	movs	r0, #6
 800de2c:	f000 fa08 	bl	800e240 <raise>
 800de30:	2001      	movs	r0, #1
 800de32:	f7f5 fdaf 	bl	8003994 <_exit>

0800de36 <_malloc_usable_size_r>:
 800de36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de3a:	1f18      	subs	r0, r3, #4
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	bfbc      	itt	lt
 800de40:	580b      	ldrlt	r3, [r1, r0]
 800de42:	18c0      	addlt	r0, r0, r3
 800de44:	4770      	bx	lr

0800de46 <__sfputc_r>:
 800de46:	6893      	ldr	r3, [r2, #8]
 800de48:	3b01      	subs	r3, #1
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	b410      	push	{r4}
 800de4e:	6093      	str	r3, [r2, #8]
 800de50:	da08      	bge.n	800de64 <__sfputc_r+0x1e>
 800de52:	6994      	ldr	r4, [r2, #24]
 800de54:	42a3      	cmp	r3, r4
 800de56:	db01      	blt.n	800de5c <__sfputc_r+0x16>
 800de58:	290a      	cmp	r1, #10
 800de5a:	d103      	bne.n	800de64 <__sfputc_r+0x1e>
 800de5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de60:	f000 b932 	b.w	800e0c8 <__swbuf_r>
 800de64:	6813      	ldr	r3, [r2, #0]
 800de66:	1c58      	adds	r0, r3, #1
 800de68:	6010      	str	r0, [r2, #0]
 800de6a:	7019      	strb	r1, [r3, #0]
 800de6c:	4608      	mov	r0, r1
 800de6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <__sfputs_r>:
 800de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de76:	4606      	mov	r6, r0
 800de78:	460f      	mov	r7, r1
 800de7a:	4614      	mov	r4, r2
 800de7c:	18d5      	adds	r5, r2, r3
 800de7e:	42ac      	cmp	r4, r5
 800de80:	d101      	bne.n	800de86 <__sfputs_r+0x12>
 800de82:	2000      	movs	r0, #0
 800de84:	e007      	b.n	800de96 <__sfputs_r+0x22>
 800de86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de8a:	463a      	mov	r2, r7
 800de8c:	4630      	mov	r0, r6
 800de8e:	f7ff ffda 	bl	800de46 <__sfputc_r>
 800de92:	1c43      	adds	r3, r0, #1
 800de94:	d1f3      	bne.n	800de7e <__sfputs_r+0xa>
 800de96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de98 <_vfiprintf_r>:
 800de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9c:	460d      	mov	r5, r1
 800de9e:	b09d      	sub	sp, #116	@ 0x74
 800dea0:	4614      	mov	r4, r2
 800dea2:	4698      	mov	r8, r3
 800dea4:	4606      	mov	r6, r0
 800dea6:	b118      	cbz	r0, 800deb0 <_vfiprintf_r+0x18>
 800dea8:	6a03      	ldr	r3, [r0, #32]
 800deaa:	b90b      	cbnz	r3, 800deb0 <_vfiprintf_r+0x18>
 800deac:	f7fe f906 	bl	800c0bc <__sinit>
 800deb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800deb2:	07d9      	lsls	r1, r3, #31
 800deb4:	d405      	bmi.n	800dec2 <_vfiprintf_r+0x2a>
 800deb6:	89ab      	ldrh	r3, [r5, #12]
 800deb8:	059a      	lsls	r2, r3, #22
 800deba:	d402      	bmi.n	800dec2 <_vfiprintf_r+0x2a>
 800debc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800debe:	f7fe fa14 	bl	800c2ea <__retarget_lock_acquire_recursive>
 800dec2:	89ab      	ldrh	r3, [r5, #12]
 800dec4:	071b      	lsls	r3, r3, #28
 800dec6:	d501      	bpl.n	800decc <_vfiprintf_r+0x34>
 800dec8:	692b      	ldr	r3, [r5, #16]
 800deca:	b99b      	cbnz	r3, 800def4 <_vfiprintf_r+0x5c>
 800decc:	4629      	mov	r1, r5
 800dece:	4630      	mov	r0, r6
 800ded0:	f000 f938 	bl	800e144 <__swsetup_r>
 800ded4:	b170      	cbz	r0, 800def4 <_vfiprintf_r+0x5c>
 800ded6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ded8:	07dc      	lsls	r4, r3, #31
 800deda:	d504      	bpl.n	800dee6 <_vfiprintf_r+0x4e>
 800dedc:	f04f 30ff 	mov.w	r0, #4294967295
 800dee0:	b01d      	add	sp, #116	@ 0x74
 800dee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee6:	89ab      	ldrh	r3, [r5, #12]
 800dee8:	0598      	lsls	r0, r3, #22
 800deea:	d4f7      	bmi.n	800dedc <_vfiprintf_r+0x44>
 800deec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deee:	f7fe f9fd 	bl	800c2ec <__retarget_lock_release_recursive>
 800def2:	e7f3      	b.n	800dedc <_vfiprintf_r+0x44>
 800def4:	2300      	movs	r3, #0
 800def6:	9309      	str	r3, [sp, #36]	@ 0x24
 800def8:	2320      	movs	r3, #32
 800defa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800defe:	f8cd 800c 	str.w	r8, [sp, #12]
 800df02:	2330      	movs	r3, #48	@ 0x30
 800df04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e0b4 <_vfiprintf_r+0x21c>
 800df08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df0c:	f04f 0901 	mov.w	r9, #1
 800df10:	4623      	mov	r3, r4
 800df12:	469a      	mov	sl, r3
 800df14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df18:	b10a      	cbz	r2, 800df1e <_vfiprintf_r+0x86>
 800df1a:	2a25      	cmp	r2, #37	@ 0x25
 800df1c:	d1f9      	bne.n	800df12 <_vfiprintf_r+0x7a>
 800df1e:	ebba 0b04 	subs.w	fp, sl, r4
 800df22:	d00b      	beq.n	800df3c <_vfiprintf_r+0xa4>
 800df24:	465b      	mov	r3, fp
 800df26:	4622      	mov	r2, r4
 800df28:	4629      	mov	r1, r5
 800df2a:	4630      	mov	r0, r6
 800df2c:	f7ff ffa2 	bl	800de74 <__sfputs_r>
 800df30:	3001      	adds	r0, #1
 800df32:	f000 80a7 	beq.w	800e084 <_vfiprintf_r+0x1ec>
 800df36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df38:	445a      	add	r2, fp
 800df3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800df3c:	f89a 3000 	ldrb.w	r3, [sl]
 800df40:	2b00      	cmp	r3, #0
 800df42:	f000 809f 	beq.w	800e084 <_vfiprintf_r+0x1ec>
 800df46:	2300      	movs	r3, #0
 800df48:	f04f 32ff 	mov.w	r2, #4294967295
 800df4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df50:	f10a 0a01 	add.w	sl, sl, #1
 800df54:	9304      	str	r3, [sp, #16]
 800df56:	9307      	str	r3, [sp, #28]
 800df58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800df5e:	4654      	mov	r4, sl
 800df60:	2205      	movs	r2, #5
 800df62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df66:	4853      	ldr	r0, [pc, #332]	@ (800e0b4 <_vfiprintf_r+0x21c>)
 800df68:	f7f2 f932 	bl	80001d0 <memchr>
 800df6c:	9a04      	ldr	r2, [sp, #16]
 800df6e:	b9d8      	cbnz	r0, 800dfa8 <_vfiprintf_r+0x110>
 800df70:	06d1      	lsls	r1, r2, #27
 800df72:	bf44      	itt	mi
 800df74:	2320      	movmi	r3, #32
 800df76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df7a:	0713      	lsls	r3, r2, #28
 800df7c:	bf44      	itt	mi
 800df7e:	232b      	movmi	r3, #43	@ 0x2b
 800df80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df84:	f89a 3000 	ldrb.w	r3, [sl]
 800df88:	2b2a      	cmp	r3, #42	@ 0x2a
 800df8a:	d015      	beq.n	800dfb8 <_vfiprintf_r+0x120>
 800df8c:	9a07      	ldr	r2, [sp, #28]
 800df8e:	4654      	mov	r4, sl
 800df90:	2000      	movs	r0, #0
 800df92:	f04f 0c0a 	mov.w	ip, #10
 800df96:	4621      	mov	r1, r4
 800df98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df9c:	3b30      	subs	r3, #48	@ 0x30
 800df9e:	2b09      	cmp	r3, #9
 800dfa0:	d94b      	bls.n	800e03a <_vfiprintf_r+0x1a2>
 800dfa2:	b1b0      	cbz	r0, 800dfd2 <_vfiprintf_r+0x13a>
 800dfa4:	9207      	str	r2, [sp, #28]
 800dfa6:	e014      	b.n	800dfd2 <_vfiprintf_r+0x13a>
 800dfa8:	eba0 0308 	sub.w	r3, r0, r8
 800dfac:	fa09 f303 	lsl.w	r3, r9, r3
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	9304      	str	r3, [sp, #16]
 800dfb4:	46a2      	mov	sl, r4
 800dfb6:	e7d2      	b.n	800df5e <_vfiprintf_r+0xc6>
 800dfb8:	9b03      	ldr	r3, [sp, #12]
 800dfba:	1d19      	adds	r1, r3, #4
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	9103      	str	r1, [sp, #12]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	bfbb      	ittet	lt
 800dfc4:	425b      	neglt	r3, r3
 800dfc6:	f042 0202 	orrlt.w	r2, r2, #2
 800dfca:	9307      	strge	r3, [sp, #28]
 800dfcc:	9307      	strlt	r3, [sp, #28]
 800dfce:	bfb8      	it	lt
 800dfd0:	9204      	strlt	r2, [sp, #16]
 800dfd2:	7823      	ldrb	r3, [r4, #0]
 800dfd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfd6:	d10a      	bne.n	800dfee <_vfiprintf_r+0x156>
 800dfd8:	7863      	ldrb	r3, [r4, #1]
 800dfda:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfdc:	d132      	bne.n	800e044 <_vfiprintf_r+0x1ac>
 800dfde:	9b03      	ldr	r3, [sp, #12]
 800dfe0:	1d1a      	adds	r2, r3, #4
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	9203      	str	r2, [sp, #12]
 800dfe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfea:	3402      	adds	r4, #2
 800dfec:	9305      	str	r3, [sp, #20]
 800dfee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e0c4 <_vfiprintf_r+0x22c>
 800dff2:	7821      	ldrb	r1, [r4, #0]
 800dff4:	2203      	movs	r2, #3
 800dff6:	4650      	mov	r0, sl
 800dff8:	f7f2 f8ea 	bl	80001d0 <memchr>
 800dffc:	b138      	cbz	r0, 800e00e <_vfiprintf_r+0x176>
 800dffe:	9b04      	ldr	r3, [sp, #16]
 800e000:	eba0 000a 	sub.w	r0, r0, sl
 800e004:	2240      	movs	r2, #64	@ 0x40
 800e006:	4082      	lsls	r2, r0
 800e008:	4313      	orrs	r3, r2
 800e00a:	3401      	adds	r4, #1
 800e00c:	9304      	str	r3, [sp, #16]
 800e00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e012:	4829      	ldr	r0, [pc, #164]	@ (800e0b8 <_vfiprintf_r+0x220>)
 800e014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e018:	2206      	movs	r2, #6
 800e01a:	f7f2 f8d9 	bl	80001d0 <memchr>
 800e01e:	2800      	cmp	r0, #0
 800e020:	d03f      	beq.n	800e0a2 <_vfiprintf_r+0x20a>
 800e022:	4b26      	ldr	r3, [pc, #152]	@ (800e0bc <_vfiprintf_r+0x224>)
 800e024:	bb1b      	cbnz	r3, 800e06e <_vfiprintf_r+0x1d6>
 800e026:	9b03      	ldr	r3, [sp, #12]
 800e028:	3307      	adds	r3, #7
 800e02a:	f023 0307 	bic.w	r3, r3, #7
 800e02e:	3308      	adds	r3, #8
 800e030:	9303      	str	r3, [sp, #12]
 800e032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e034:	443b      	add	r3, r7
 800e036:	9309      	str	r3, [sp, #36]	@ 0x24
 800e038:	e76a      	b.n	800df10 <_vfiprintf_r+0x78>
 800e03a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e03e:	460c      	mov	r4, r1
 800e040:	2001      	movs	r0, #1
 800e042:	e7a8      	b.n	800df96 <_vfiprintf_r+0xfe>
 800e044:	2300      	movs	r3, #0
 800e046:	3401      	adds	r4, #1
 800e048:	9305      	str	r3, [sp, #20]
 800e04a:	4619      	mov	r1, r3
 800e04c:	f04f 0c0a 	mov.w	ip, #10
 800e050:	4620      	mov	r0, r4
 800e052:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e056:	3a30      	subs	r2, #48	@ 0x30
 800e058:	2a09      	cmp	r2, #9
 800e05a:	d903      	bls.n	800e064 <_vfiprintf_r+0x1cc>
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d0c6      	beq.n	800dfee <_vfiprintf_r+0x156>
 800e060:	9105      	str	r1, [sp, #20]
 800e062:	e7c4      	b.n	800dfee <_vfiprintf_r+0x156>
 800e064:	fb0c 2101 	mla	r1, ip, r1, r2
 800e068:	4604      	mov	r4, r0
 800e06a:	2301      	movs	r3, #1
 800e06c:	e7f0      	b.n	800e050 <_vfiprintf_r+0x1b8>
 800e06e:	ab03      	add	r3, sp, #12
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	462a      	mov	r2, r5
 800e074:	4b12      	ldr	r3, [pc, #72]	@ (800e0c0 <_vfiprintf_r+0x228>)
 800e076:	a904      	add	r1, sp, #16
 800e078:	4630      	mov	r0, r6
 800e07a:	f7fd fbdb 	bl	800b834 <_printf_float>
 800e07e:	4607      	mov	r7, r0
 800e080:	1c78      	adds	r0, r7, #1
 800e082:	d1d6      	bne.n	800e032 <_vfiprintf_r+0x19a>
 800e084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e086:	07d9      	lsls	r1, r3, #31
 800e088:	d405      	bmi.n	800e096 <_vfiprintf_r+0x1fe>
 800e08a:	89ab      	ldrh	r3, [r5, #12]
 800e08c:	059a      	lsls	r2, r3, #22
 800e08e:	d402      	bmi.n	800e096 <_vfiprintf_r+0x1fe>
 800e090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e092:	f7fe f92b 	bl	800c2ec <__retarget_lock_release_recursive>
 800e096:	89ab      	ldrh	r3, [r5, #12]
 800e098:	065b      	lsls	r3, r3, #25
 800e09a:	f53f af1f 	bmi.w	800dedc <_vfiprintf_r+0x44>
 800e09e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0a0:	e71e      	b.n	800dee0 <_vfiprintf_r+0x48>
 800e0a2:	ab03      	add	r3, sp, #12
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	462a      	mov	r2, r5
 800e0a8:	4b05      	ldr	r3, [pc, #20]	@ (800e0c0 <_vfiprintf_r+0x228>)
 800e0aa:	a904      	add	r1, sp, #16
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f7fd fe59 	bl	800bd64 <_printf_i>
 800e0b2:	e7e4      	b.n	800e07e <_vfiprintf_r+0x1e6>
 800e0b4:	0800fd20 	.word	0x0800fd20
 800e0b8:	0800fd2a 	.word	0x0800fd2a
 800e0bc:	0800b835 	.word	0x0800b835
 800e0c0:	0800de75 	.word	0x0800de75
 800e0c4:	0800fd26 	.word	0x0800fd26

0800e0c8 <__swbuf_r>:
 800e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ca:	460e      	mov	r6, r1
 800e0cc:	4614      	mov	r4, r2
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	b118      	cbz	r0, 800e0da <__swbuf_r+0x12>
 800e0d2:	6a03      	ldr	r3, [r0, #32]
 800e0d4:	b90b      	cbnz	r3, 800e0da <__swbuf_r+0x12>
 800e0d6:	f7fd fff1 	bl	800c0bc <__sinit>
 800e0da:	69a3      	ldr	r3, [r4, #24]
 800e0dc:	60a3      	str	r3, [r4, #8]
 800e0de:	89a3      	ldrh	r3, [r4, #12]
 800e0e0:	071a      	lsls	r2, r3, #28
 800e0e2:	d501      	bpl.n	800e0e8 <__swbuf_r+0x20>
 800e0e4:	6923      	ldr	r3, [r4, #16]
 800e0e6:	b943      	cbnz	r3, 800e0fa <__swbuf_r+0x32>
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f000 f82a 	bl	800e144 <__swsetup_r>
 800e0f0:	b118      	cbz	r0, 800e0fa <__swbuf_r+0x32>
 800e0f2:	f04f 37ff 	mov.w	r7, #4294967295
 800e0f6:	4638      	mov	r0, r7
 800e0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	6922      	ldr	r2, [r4, #16]
 800e0fe:	1a98      	subs	r0, r3, r2
 800e100:	6963      	ldr	r3, [r4, #20]
 800e102:	b2f6      	uxtb	r6, r6
 800e104:	4283      	cmp	r3, r0
 800e106:	4637      	mov	r7, r6
 800e108:	dc05      	bgt.n	800e116 <__swbuf_r+0x4e>
 800e10a:	4621      	mov	r1, r4
 800e10c:	4628      	mov	r0, r5
 800e10e:	f7ff fd99 	bl	800dc44 <_fflush_r>
 800e112:	2800      	cmp	r0, #0
 800e114:	d1ed      	bne.n	800e0f2 <__swbuf_r+0x2a>
 800e116:	68a3      	ldr	r3, [r4, #8]
 800e118:	3b01      	subs	r3, #1
 800e11a:	60a3      	str	r3, [r4, #8]
 800e11c:	6823      	ldr	r3, [r4, #0]
 800e11e:	1c5a      	adds	r2, r3, #1
 800e120:	6022      	str	r2, [r4, #0]
 800e122:	701e      	strb	r6, [r3, #0]
 800e124:	6962      	ldr	r2, [r4, #20]
 800e126:	1c43      	adds	r3, r0, #1
 800e128:	429a      	cmp	r2, r3
 800e12a:	d004      	beq.n	800e136 <__swbuf_r+0x6e>
 800e12c:	89a3      	ldrh	r3, [r4, #12]
 800e12e:	07db      	lsls	r3, r3, #31
 800e130:	d5e1      	bpl.n	800e0f6 <__swbuf_r+0x2e>
 800e132:	2e0a      	cmp	r6, #10
 800e134:	d1df      	bne.n	800e0f6 <__swbuf_r+0x2e>
 800e136:	4621      	mov	r1, r4
 800e138:	4628      	mov	r0, r5
 800e13a:	f7ff fd83 	bl	800dc44 <_fflush_r>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d0d9      	beq.n	800e0f6 <__swbuf_r+0x2e>
 800e142:	e7d6      	b.n	800e0f2 <__swbuf_r+0x2a>

0800e144 <__swsetup_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4b29      	ldr	r3, [pc, #164]	@ (800e1ec <__swsetup_r+0xa8>)
 800e148:	4605      	mov	r5, r0
 800e14a:	6818      	ldr	r0, [r3, #0]
 800e14c:	460c      	mov	r4, r1
 800e14e:	b118      	cbz	r0, 800e158 <__swsetup_r+0x14>
 800e150:	6a03      	ldr	r3, [r0, #32]
 800e152:	b90b      	cbnz	r3, 800e158 <__swsetup_r+0x14>
 800e154:	f7fd ffb2 	bl	800c0bc <__sinit>
 800e158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e15c:	0719      	lsls	r1, r3, #28
 800e15e:	d422      	bmi.n	800e1a6 <__swsetup_r+0x62>
 800e160:	06da      	lsls	r2, r3, #27
 800e162:	d407      	bmi.n	800e174 <__swsetup_r+0x30>
 800e164:	2209      	movs	r2, #9
 800e166:	602a      	str	r2, [r5, #0]
 800e168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e16c:	81a3      	strh	r3, [r4, #12]
 800e16e:	f04f 30ff 	mov.w	r0, #4294967295
 800e172:	e033      	b.n	800e1dc <__swsetup_r+0x98>
 800e174:	0758      	lsls	r0, r3, #29
 800e176:	d512      	bpl.n	800e19e <__swsetup_r+0x5a>
 800e178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e17a:	b141      	cbz	r1, 800e18e <__swsetup_r+0x4a>
 800e17c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e180:	4299      	cmp	r1, r3
 800e182:	d002      	beq.n	800e18a <__swsetup_r+0x46>
 800e184:	4628      	mov	r0, r5
 800e186:	f7fe feff 	bl	800cf88 <_free_r>
 800e18a:	2300      	movs	r3, #0
 800e18c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e194:	81a3      	strh	r3, [r4, #12]
 800e196:	2300      	movs	r3, #0
 800e198:	6063      	str	r3, [r4, #4]
 800e19a:	6923      	ldr	r3, [r4, #16]
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	89a3      	ldrh	r3, [r4, #12]
 800e1a0:	f043 0308 	orr.w	r3, r3, #8
 800e1a4:	81a3      	strh	r3, [r4, #12]
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	b94b      	cbnz	r3, 800e1be <__swsetup_r+0x7a>
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e1b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1b4:	d003      	beq.n	800e1be <__swsetup_r+0x7a>
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	f000 f883 	bl	800e2c4 <__smakebuf_r>
 800e1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c2:	f013 0201 	ands.w	r2, r3, #1
 800e1c6:	d00a      	beq.n	800e1de <__swsetup_r+0x9a>
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	60a2      	str	r2, [r4, #8]
 800e1cc:	6962      	ldr	r2, [r4, #20]
 800e1ce:	4252      	negs	r2, r2
 800e1d0:	61a2      	str	r2, [r4, #24]
 800e1d2:	6922      	ldr	r2, [r4, #16]
 800e1d4:	b942      	cbnz	r2, 800e1e8 <__swsetup_r+0xa4>
 800e1d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1da:	d1c5      	bne.n	800e168 <__swsetup_r+0x24>
 800e1dc:	bd38      	pop	{r3, r4, r5, pc}
 800e1de:	0799      	lsls	r1, r3, #30
 800e1e0:	bf58      	it	pl
 800e1e2:	6962      	ldrpl	r2, [r4, #20]
 800e1e4:	60a2      	str	r2, [r4, #8]
 800e1e6:	e7f4      	b.n	800e1d2 <__swsetup_r+0x8e>
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	e7f7      	b.n	800e1dc <__swsetup_r+0x98>
 800e1ec:	20000108 	.word	0x20000108

0800e1f0 <_raise_r>:
 800e1f0:	291f      	cmp	r1, #31
 800e1f2:	b538      	push	{r3, r4, r5, lr}
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	460c      	mov	r4, r1
 800e1f8:	d904      	bls.n	800e204 <_raise_r+0x14>
 800e1fa:	2316      	movs	r3, #22
 800e1fc:	6003      	str	r3, [r0, #0]
 800e1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e202:	bd38      	pop	{r3, r4, r5, pc}
 800e204:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e206:	b112      	cbz	r2, 800e20e <_raise_r+0x1e>
 800e208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e20c:	b94b      	cbnz	r3, 800e222 <_raise_r+0x32>
 800e20e:	4628      	mov	r0, r5
 800e210:	f000 f830 	bl	800e274 <_getpid_r>
 800e214:	4622      	mov	r2, r4
 800e216:	4601      	mov	r1, r0
 800e218:	4628      	mov	r0, r5
 800e21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e21e:	f000 b817 	b.w	800e250 <_kill_r>
 800e222:	2b01      	cmp	r3, #1
 800e224:	d00a      	beq.n	800e23c <_raise_r+0x4c>
 800e226:	1c59      	adds	r1, r3, #1
 800e228:	d103      	bne.n	800e232 <_raise_r+0x42>
 800e22a:	2316      	movs	r3, #22
 800e22c:	6003      	str	r3, [r0, #0]
 800e22e:	2001      	movs	r0, #1
 800e230:	e7e7      	b.n	800e202 <_raise_r+0x12>
 800e232:	2100      	movs	r1, #0
 800e234:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e238:	4620      	mov	r0, r4
 800e23a:	4798      	blx	r3
 800e23c:	2000      	movs	r0, #0
 800e23e:	e7e0      	b.n	800e202 <_raise_r+0x12>

0800e240 <raise>:
 800e240:	4b02      	ldr	r3, [pc, #8]	@ (800e24c <raise+0xc>)
 800e242:	4601      	mov	r1, r0
 800e244:	6818      	ldr	r0, [r3, #0]
 800e246:	f7ff bfd3 	b.w	800e1f0 <_raise_r>
 800e24a:	bf00      	nop
 800e24c:	20000108 	.word	0x20000108

0800e250 <_kill_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4d07      	ldr	r5, [pc, #28]	@ (800e270 <_kill_r+0x20>)
 800e254:	2300      	movs	r3, #0
 800e256:	4604      	mov	r4, r0
 800e258:	4608      	mov	r0, r1
 800e25a:	4611      	mov	r1, r2
 800e25c:	602b      	str	r3, [r5, #0]
 800e25e:	f7f5 fb89 	bl	8003974 <_kill>
 800e262:	1c43      	adds	r3, r0, #1
 800e264:	d102      	bne.n	800e26c <_kill_r+0x1c>
 800e266:	682b      	ldr	r3, [r5, #0]
 800e268:	b103      	cbz	r3, 800e26c <_kill_r+0x1c>
 800e26a:	6023      	str	r3, [r4, #0]
 800e26c:	bd38      	pop	{r3, r4, r5, pc}
 800e26e:	bf00      	nop
 800e270:	20002238 	.word	0x20002238

0800e274 <_getpid_r>:
 800e274:	f7f5 bb76 	b.w	8003964 <_getpid>

0800e278 <__swhatbuf_r>:
 800e278:	b570      	push	{r4, r5, r6, lr}
 800e27a:	460c      	mov	r4, r1
 800e27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e280:	2900      	cmp	r1, #0
 800e282:	b096      	sub	sp, #88	@ 0x58
 800e284:	4615      	mov	r5, r2
 800e286:	461e      	mov	r6, r3
 800e288:	da0d      	bge.n	800e2a6 <__swhatbuf_r+0x2e>
 800e28a:	89a3      	ldrh	r3, [r4, #12]
 800e28c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e290:	f04f 0100 	mov.w	r1, #0
 800e294:	bf14      	ite	ne
 800e296:	2340      	movne	r3, #64	@ 0x40
 800e298:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e29c:	2000      	movs	r0, #0
 800e29e:	6031      	str	r1, [r6, #0]
 800e2a0:	602b      	str	r3, [r5, #0]
 800e2a2:	b016      	add	sp, #88	@ 0x58
 800e2a4:	bd70      	pop	{r4, r5, r6, pc}
 800e2a6:	466a      	mov	r2, sp
 800e2a8:	f000 f848 	bl	800e33c <_fstat_r>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	dbec      	blt.n	800e28a <__swhatbuf_r+0x12>
 800e2b0:	9901      	ldr	r1, [sp, #4]
 800e2b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e2b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e2ba:	4259      	negs	r1, r3
 800e2bc:	4159      	adcs	r1, r3
 800e2be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2c2:	e7eb      	b.n	800e29c <__swhatbuf_r+0x24>

0800e2c4 <__smakebuf_r>:
 800e2c4:	898b      	ldrh	r3, [r1, #12]
 800e2c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2c8:	079d      	lsls	r5, r3, #30
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	d507      	bpl.n	800e2e0 <__smakebuf_r+0x1c>
 800e2d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	6123      	str	r3, [r4, #16]
 800e2d8:	2301      	movs	r3, #1
 800e2da:	6163      	str	r3, [r4, #20]
 800e2dc:	b003      	add	sp, #12
 800e2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2e0:	ab01      	add	r3, sp, #4
 800e2e2:	466a      	mov	r2, sp
 800e2e4:	f7ff ffc8 	bl	800e278 <__swhatbuf_r>
 800e2e8:	9f00      	ldr	r7, [sp, #0]
 800e2ea:	4605      	mov	r5, r0
 800e2ec:	4639      	mov	r1, r7
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	f7fe febe 	bl	800d070 <_malloc_r>
 800e2f4:	b948      	cbnz	r0, 800e30a <__smakebuf_r+0x46>
 800e2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2fa:	059a      	lsls	r2, r3, #22
 800e2fc:	d4ee      	bmi.n	800e2dc <__smakebuf_r+0x18>
 800e2fe:	f023 0303 	bic.w	r3, r3, #3
 800e302:	f043 0302 	orr.w	r3, r3, #2
 800e306:	81a3      	strh	r3, [r4, #12]
 800e308:	e7e2      	b.n	800e2d0 <__smakebuf_r+0xc>
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	6020      	str	r0, [r4, #0]
 800e30e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e312:	81a3      	strh	r3, [r4, #12]
 800e314:	9b01      	ldr	r3, [sp, #4]
 800e316:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e31a:	b15b      	cbz	r3, 800e334 <__smakebuf_r+0x70>
 800e31c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e320:	4630      	mov	r0, r6
 800e322:	f000 f81d 	bl	800e360 <_isatty_r>
 800e326:	b128      	cbz	r0, 800e334 <__smakebuf_r+0x70>
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	f023 0303 	bic.w	r3, r3, #3
 800e32e:	f043 0301 	orr.w	r3, r3, #1
 800e332:	81a3      	strh	r3, [r4, #12]
 800e334:	89a3      	ldrh	r3, [r4, #12]
 800e336:	431d      	orrs	r5, r3
 800e338:	81a5      	strh	r5, [r4, #12]
 800e33a:	e7cf      	b.n	800e2dc <__smakebuf_r+0x18>

0800e33c <_fstat_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4d07      	ldr	r5, [pc, #28]	@ (800e35c <_fstat_r+0x20>)
 800e340:	2300      	movs	r3, #0
 800e342:	4604      	mov	r4, r0
 800e344:	4608      	mov	r0, r1
 800e346:	4611      	mov	r1, r2
 800e348:	602b      	str	r3, [r5, #0]
 800e34a:	f7f5 fb73 	bl	8003a34 <_fstat>
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	d102      	bne.n	800e358 <_fstat_r+0x1c>
 800e352:	682b      	ldr	r3, [r5, #0]
 800e354:	b103      	cbz	r3, 800e358 <_fstat_r+0x1c>
 800e356:	6023      	str	r3, [r4, #0]
 800e358:	bd38      	pop	{r3, r4, r5, pc}
 800e35a:	bf00      	nop
 800e35c:	20002238 	.word	0x20002238

0800e360 <_isatty_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	4d06      	ldr	r5, [pc, #24]	@ (800e37c <_isatty_r+0x1c>)
 800e364:	2300      	movs	r3, #0
 800e366:	4604      	mov	r4, r0
 800e368:	4608      	mov	r0, r1
 800e36a:	602b      	str	r3, [r5, #0]
 800e36c:	f7f5 fb72 	bl	8003a54 <_isatty>
 800e370:	1c43      	adds	r3, r0, #1
 800e372:	d102      	bne.n	800e37a <_isatty_r+0x1a>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	b103      	cbz	r3, 800e37a <_isatty_r+0x1a>
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	bd38      	pop	{r3, r4, r5, pc}
 800e37c:	20002238 	.word	0x20002238

0800e380 <asinf>:
 800e380:	b508      	push	{r3, lr}
 800e382:	ed2d 8b02 	vpush	{d8}
 800e386:	eeb0 8a40 	vmov.f32	s16, s0
 800e38a:	f000 f9c5 	bl	800e718 <__ieee754_asinf>
 800e38e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e396:	eef0 8a40 	vmov.f32	s17, s0
 800e39a:	d615      	bvs.n	800e3c8 <asinf+0x48>
 800e39c:	eeb0 0a48 	vmov.f32	s0, s16
 800e3a0:	f000 f8b8 	bl	800e514 <fabsf>
 800e3a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e3a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b0:	dd0a      	ble.n	800e3c8 <asinf+0x48>
 800e3b2:	f7fd ff6f 	bl	800c294 <__errno>
 800e3b6:	ecbd 8b02 	vpop	{d8}
 800e3ba:	2321      	movs	r3, #33	@ 0x21
 800e3bc:	6003      	str	r3, [r0, #0]
 800e3be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e3c2:	4804      	ldr	r0, [pc, #16]	@ (800e3d4 <asinf+0x54>)
 800e3c4:	f000 b8fe 	b.w	800e5c4 <nanf>
 800e3c8:	eeb0 0a68 	vmov.f32	s0, s17
 800e3cc:	ecbd 8b02 	vpop	{d8}
 800e3d0:	bd08      	pop	{r3, pc}
 800e3d2:	bf00      	nop
 800e3d4:	0800fd76 	.word	0x0800fd76

0800e3d8 <atan2f>:
 800e3d8:	f000 ba84 	b.w	800e8e4 <__ieee754_atan2f>

0800e3dc <powf>:
 800e3dc:	b508      	push	{r3, lr}
 800e3de:	ed2d 8b04 	vpush	{d8-d9}
 800e3e2:	eeb0 8a60 	vmov.f32	s16, s1
 800e3e6:	eeb0 9a40 	vmov.f32	s18, s0
 800e3ea:	f000 fb1b 	bl	800ea24 <__ieee754_powf>
 800e3ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f6:	eef0 8a40 	vmov.f32	s17, s0
 800e3fa:	d63e      	bvs.n	800e47a <powf+0x9e>
 800e3fc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e404:	d112      	bne.n	800e42c <powf+0x50>
 800e406:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40e:	d039      	beq.n	800e484 <powf+0xa8>
 800e410:	eeb0 0a48 	vmov.f32	s0, s16
 800e414:	f000 f8cc 	bl	800e5b0 <finitef>
 800e418:	b378      	cbz	r0, 800e47a <powf+0x9e>
 800e41a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e422:	d52a      	bpl.n	800e47a <powf+0x9e>
 800e424:	f7fd ff36 	bl	800c294 <__errno>
 800e428:	2322      	movs	r3, #34	@ 0x22
 800e42a:	e014      	b.n	800e456 <powf+0x7a>
 800e42c:	f000 f8c0 	bl	800e5b0 <finitef>
 800e430:	b998      	cbnz	r0, 800e45a <powf+0x7e>
 800e432:	eeb0 0a49 	vmov.f32	s0, s18
 800e436:	f000 f8bb 	bl	800e5b0 <finitef>
 800e43a:	b170      	cbz	r0, 800e45a <powf+0x7e>
 800e43c:	eeb0 0a48 	vmov.f32	s0, s16
 800e440:	f000 f8b6 	bl	800e5b0 <finitef>
 800e444:	b148      	cbz	r0, 800e45a <powf+0x7e>
 800e446:	eef4 8a68 	vcmp.f32	s17, s17
 800e44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44e:	d7e9      	bvc.n	800e424 <powf+0x48>
 800e450:	f7fd ff20 	bl	800c294 <__errno>
 800e454:	2321      	movs	r3, #33	@ 0x21
 800e456:	6003      	str	r3, [r0, #0]
 800e458:	e00f      	b.n	800e47a <powf+0x9e>
 800e45a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	d10a      	bne.n	800e47a <powf+0x9e>
 800e464:	eeb0 0a49 	vmov.f32	s0, s18
 800e468:	f000 f8a2 	bl	800e5b0 <finitef>
 800e46c:	b128      	cbz	r0, 800e47a <powf+0x9e>
 800e46e:	eeb0 0a48 	vmov.f32	s0, s16
 800e472:	f000 f89d 	bl	800e5b0 <finitef>
 800e476:	2800      	cmp	r0, #0
 800e478:	d1d4      	bne.n	800e424 <powf+0x48>
 800e47a:	eeb0 0a68 	vmov.f32	s0, s17
 800e47e:	ecbd 8b04 	vpop	{d8-d9}
 800e482:	bd08      	pop	{r3, pc}
 800e484:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e488:	e7f7      	b.n	800e47a <powf+0x9e>
	...

0800e48c <cosf>:
 800e48c:	ee10 3a10 	vmov	r3, s0
 800e490:	b507      	push	{r0, r1, r2, lr}
 800e492:	4a1e      	ldr	r2, [pc, #120]	@ (800e50c <cosf+0x80>)
 800e494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e498:	4293      	cmp	r3, r2
 800e49a:	d806      	bhi.n	800e4aa <cosf+0x1e>
 800e49c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800e510 <cosf+0x84>
 800e4a0:	b003      	add	sp, #12
 800e4a2:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4a6:	f000 b897 	b.w	800e5d8 <__kernel_cosf>
 800e4aa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e4ae:	d304      	bcc.n	800e4ba <cosf+0x2e>
 800e4b0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e4b4:	b003      	add	sp, #12
 800e4b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4ba:	4668      	mov	r0, sp
 800e4bc:	f000 fd82 	bl	800efc4 <__ieee754_rem_pio2f>
 800e4c0:	f000 0003 	and.w	r0, r0, #3
 800e4c4:	2801      	cmp	r0, #1
 800e4c6:	d009      	beq.n	800e4dc <cosf+0x50>
 800e4c8:	2802      	cmp	r0, #2
 800e4ca:	d010      	beq.n	800e4ee <cosf+0x62>
 800e4cc:	b9b0      	cbnz	r0, 800e4fc <cosf+0x70>
 800e4ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4d2:	ed9d 0a00 	vldr	s0, [sp]
 800e4d6:	f000 f87f 	bl	800e5d8 <__kernel_cosf>
 800e4da:	e7eb      	b.n	800e4b4 <cosf+0x28>
 800e4dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4e0:	ed9d 0a00 	vldr	s0, [sp]
 800e4e4:	f000 f8d0 	bl	800e688 <__kernel_sinf>
 800e4e8:	eeb1 0a40 	vneg.f32	s0, s0
 800e4ec:	e7e2      	b.n	800e4b4 <cosf+0x28>
 800e4ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4f2:	ed9d 0a00 	vldr	s0, [sp]
 800e4f6:	f000 f86f 	bl	800e5d8 <__kernel_cosf>
 800e4fa:	e7f5      	b.n	800e4e8 <cosf+0x5c>
 800e4fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800e500:	ed9d 0a00 	vldr	s0, [sp]
 800e504:	2001      	movs	r0, #1
 800e506:	f000 f8bf 	bl	800e688 <__kernel_sinf>
 800e50a:	e7d3      	b.n	800e4b4 <cosf+0x28>
 800e50c:	3f490fd8 	.word	0x3f490fd8
 800e510:	00000000 	.word	0x00000000

0800e514 <fabsf>:
 800e514:	ee10 3a10 	vmov	r3, s0
 800e518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e51c:	ee00 3a10 	vmov	s0, r3
 800e520:	4770      	bx	lr
	...

0800e524 <sinf>:
 800e524:	ee10 3a10 	vmov	r3, s0
 800e528:	b507      	push	{r0, r1, r2, lr}
 800e52a:	4a1f      	ldr	r2, [pc, #124]	@ (800e5a8 <sinf+0x84>)
 800e52c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e530:	4293      	cmp	r3, r2
 800e532:	d807      	bhi.n	800e544 <sinf+0x20>
 800e534:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e5ac <sinf+0x88>
 800e538:	2000      	movs	r0, #0
 800e53a:	b003      	add	sp, #12
 800e53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e540:	f000 b8a2 	b.w	800e688 <__kernel_sinf>
 800e544:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e548:	d304      	bcc.n	800e554 <sinf+0x30>
 800e54a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e54e:	b003      	add	sp, #12
 800e550:	f85d fb04 	ldr.w	pc, [sp], #4
 800e554:	4668      	mov	r0, sp
 800e556:	f000 fd35 	bl	800efc4 <__ieee754_rem_pio2f>
 800e55a:	f000 0003 	and.w	r0, r0, #3
 800e55e:	2801      	cmp	r0, #1
 800e560:	d00a      	beq.n	800e578 <sinf+0x54>
 800e562:	2802      	cmp	r0, #2
 800e564:	d00f      	beq.n	800e586 <sinf+0x62>
 800e566:	b9c0      	cbnz	r0, 800e59a <sinf+0x76>
 800e568:	eddd 0a01 	vldr	s1, [sp, #4]
 800e56c:	ed9d 0a00 	vldr	s0, [sp]
 800e570:	2001      	movs	r0, #1
 800e572:	f000 f889 	bl	800e688 <__kernel_sinf>
 800e576:	e7ea      	b.n	800e54e <sinf+0x2a>
 800e578:	eddd 0a01 	vldr	s1, [sp, #4]
 800e57c:	ed9d 0a00 	vldr	s0, [sp]
 800e580:	f000 f82a 	bl	800e5d8 <__kernel_cosf>
 800e584:	e7e3      	b.n	800e54e <sinf+0x2a>
 800e586:	eddd 0a01 	vldr	s1, [sp, #4]
 800e58a:	ed9d 0a00 	vldr	s0, [sp]
 800e58e:	2001      	movs	r0, #1
 800e590:	f000 f87a 	bl	800e688 <__kernel_sinf>
 800e594:	eeb1 0a40 	vneg.f32	s0, s0
 800e598:	e7d9      	b.n	800e54e <sinf+0x2a>
 800e59a:	eddd 0a01 	vldr	s1, [sp, #4]
 800e59e:	ed9d 0a00 	vldr	s0, [sp]
 800e5a2:	f000 f819 	bl	800e5d8 <__kernel_cosf>
 800e5a6:	e7f5      	b.n	800e594 <sinf+0x70>
 800e5a8:	3f490fd8 	.word	0x3f490fd8
 800e5ac:	00000000 	.word	0x00000000

0800e5b0 <finitef>:
 800e5b0:	ee10 3a10 	vmov	r3, s0
 800e5b4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e5b8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e5bc:	bfac      	ite	ge
 800e5be:	2000      	movge	r0, #0
 800e5c0:	2001      	movlt	r0, #1
 800e5c2:	4770      	bx	lr

0800e5c4 <nanf>:
 800e5c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e5cc <nanf+0x8>
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	7fc00000 	.word	0x7fc00000

0800e5d0 <__ieee754_sqrtf>:
 800e5d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e5d4:	4770      	bx	lr
	...

0800e5d8 <__kernel_cosf>:
 800e5d8:	ee10 3a10 	vmov	r3, s0
 800e5dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e5e0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e5e4:	eef0 6a40 	vmov.f32	s13, s0
 800e5e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e5ec:	d204      	bcs.n	800e5f8 <__kernel_cosf+0x20>
 800e5ee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800e5f2:	ee17 2a90 	vmov	r2, s15
 800e5f6:	b342      	cbz	r2, 800e64a <__kernel_cosf+0x72>
 800e5f8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e5fc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800e668 <__kernel_cosf+0x90>
 800e600:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800e66c <__kernel_cosf+0x94>
 800e604:	4a1a      	ldr	r2, [pc, #104]	@ (800e670 <__kernel_cosf+0x98>)
 800e606:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e60a:	4293      	cmp	r3, r2
 800e60c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e674 <__kernel_cosf+0x9c>
 800e610:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e614:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800e678 <__kernel_cosf+0xa0>
 800e618:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e61c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800e67c <__kernel_cosf+0xa4>
 800e620:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e624:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800e680 <__kernel_cosf+0xa8>
 800e628:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e62c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800e630:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e634:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e638:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e63c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e640:	d804      	bhi.n	800e64c <__kernel_cosf+0x74>
 800e642:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e646:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e64a:	4770      	bx	lr
 800e64c:	4a0d      	ldr	r2, [pc, #52]	@ (800e684 <__kernel_cosf+0xac>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	bf9a      	itte	ls
 800e652:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800e656:	ee07 3a10 	vmovls	s14, r3
 800e65a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800e65e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e666:	e7ec      	b.n	800e642 <__kernel_cosf+0x6a>
 800e668:	ad47d74e 	.word	0xad47d74e
 800e66c:	310f74f6 	.word	0x310f74f6
 800e670:	3e999999 	.word	0x3e999999
 800e674:	b493f27c 	.word	0xb493f27c
 800e678:	37d00d01 	.word	0x37d00d01
 800e67c:	bab60b61 	.word	0xbab60b61
 800e680:	3d2aaaab 	.word	0x3d2aaaab
 800e684:	3f480000 	.word	0x3f480000

0800e688 <__kernel_sinf>:
 800e688:	ee10 3a10 	vmov	r3, s0
 800e68c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e690:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e694:	d204      	bcs.n	800e6a0 <__kernel_sinf+0x18>
 800e696:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e69a:	ee17 3a90 	vmov	r3, s15
 800e69e:	b35b      	cbz	r3, 800e6f8 <__kernel_sinf+0x70>
 800e6a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e6a4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e6fc <__kernel_sinf+0x74>
 800e6a8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e700 <__kernel_sinf+0x78>
 800e6ac:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e6b0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800e704 <__kernel_sinf+0x7c>
 800e6b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e6b8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800e708 <__kernel_sinf+0x80>
 800e6bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e6c0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800e70c <__kernel_sinf+0x84>
 800e6c4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e6c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e6cc:	b930      	cbnz	r0, 800e6dc <__kernel_sinf+0x54>
 800e6ce:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800e710 <__kernel_sinf+0x88>
 800e6d2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e6d6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e6da:	4770      	bx	lr
 800e6dc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e6e0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e6e4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e6e8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e6ec:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800e714 <__kernel_sinf+0x8c>
 800e6f0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e6f4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	2f2ec9d3 	.word	0x2f2ec9d3
 800e700:	b2d72f34 	.word	0xb2d72f34
 800e704:	3638ef1b 	.word	0x3638ef1b
 800e708:	b9500d01 	.word	0xb9500d01
 800e70c:	3c088889 	.word	0x3c088889
 800e710:	be2aaaab 	.word	0xbe2aaaab
 800e714:	3e2aaaab 	.word	0x3e2aaaab

0800e718 <__ieee754_asinf>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	ee10 5a10 	vmov	r5, s0
 800e71e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e722:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800e726:	ed2d 8b04 	vpush	{d8-d9}
 800e72a:	d10c      	bne.n	800e746 <__ieee754_asinf+0x2e>
 800e72c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800e8a4 <__ieee754_asinf+0x18c>
 800e730:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800e8a8 <__ieee754_asinf+0x190>
 800e734:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e738:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e73c:	eeb0 0a67 	vmov.f32	s0, s15
 800e740:	ecbd 8b04 	vpop	{d8-d9}
 800e744:	bd38      	pop	{r3, r4, r5, pc}
 800e746:	d904      	bls.n	800e752 <__ieee754_asinf+0x3a>
 800e748:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e74c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e750:	e7f6      	b.n	800e740 <__ieee754_asinf+0x28>
 800e752:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e756:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e75a:	d20b      	bcs.n	800e774 <__ieee754_asinf+0x5c>
 800e75c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800e760:	d252      	bcs.n	800e808 <__ieee754_asinf+0xf0>
 800e762:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800e8ac <__ieee754_asinf+0x194>
 800e766:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e76a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e772:	dce5      	bgt.n	800e740 <__ieee754_asinf+0x28>
 800e774:	f7ff fece 	bl	800e514 <fabsf>
 800e778:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800e77c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e780:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e784:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800e8b0 <__ieee754_asinf+0x198>
 800e788:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800e8b4 <__ieee754_asinf+0x19c>
 800e78c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800e8b8 <__ieee754_asinf+0x1a0>
 800e790:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e794:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800e8bc <__ieee754_asinf+0x1a4>
 800e798:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e79c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800e8c0 <__ieee754_asinf+0x1a8>
 800e7a0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e7a4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800e8c4 <__ieee754_asinf+0x1ac>
 800e7a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e7ac:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800e8c8 <__ieee754_asinf+0x1b0>
 800e7b0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e7b4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800e8cc <__ieee754_asinf+0x1b4>
 800e7b8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e7bc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800e8d0 <__ieee754_asinf+0x1b8>
 800e7c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e7c4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800e8d4 <__ieee754_asinf+0x1bc>
 800e7c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e7cc:	eeb0 0a48 	vmov.f32	s0, s16
 800e7d0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e7d4:	f7ff fefc 	bl	800e5d0 <__ieee754_sqrtf>
 800e7d8:	4b3f      	ldr	r3, [pc, #252]	@ (800e8d8 <__ieee754_asinf+0x1c0>)
 800e7da:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e7de:	429c      	cmp	r4, r3
 800e7e0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e7e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e7e8:	d93d      	bls.n	800e866 <__ieee754_asinf+0x14e>
 800e7ea:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e7ee:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800e8dc <__ieee754_asinf+0x1c4>
 800e7f2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e7f6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800e8a8 <__ieee754_asinf+0x190>
 800e7fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e7fe:	2d00      	cmp	r5, #0
 800e800:	bfd8      	it	le
 800e802:	eeb1 0a40 	vnegle.f32	s0, s0
 800e806:	e79b      	b.n	800e740 <__ieee754_asinf+0x28>
 800e808:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e80c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800e8b4 <__ieee754_asinf+0x19c>
 800e810:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800e8b0 <__ieee754_asinf+0x198>
 800e814:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800e8c8 <__ieee754_asinf+0x1b0>
 800e818:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e81c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e8bc <__ieee754_asinf+0x1a4>
 800e820:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e824:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e8c0 <__ieee754_asinf+0x1a8>
 800e828:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e82c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800e8c4 <__ieee754_asinf+0x1ac>
 800e830:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e834:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800e8b8 <__ieee754_asinf+0x1a0>
 800e838:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e83c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800e8cc <__ieee754_asinf+0x1b4>
 800e840:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e844:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800e8d0 <__ieee754_asinf+0x1b8>
 800e848:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e84c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800e8d4 <__ieee754_asinf+0x1bc>
 800e850:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e854:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e858:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e85c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e860:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e864:	e76c      	b.n	800e740 <__ieee754_asinf+0x28>
 800e866:	ee10 3a10 	vmov	r3, s0
 800e86a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e86e:	f023 030f 	bic.w	r3, r3, #15
 800e872:	ee07 3a10 	vmov	s14, r3
 800e876:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e87a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e87e:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e882:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e8a4 <__ieee754_asinf+0x18c>
 800e886:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e88a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800e8e0 <__ieee754_asinf+0x1c8>
 800e88e:	eee5 7a66 	vfms.f32	s15, s10, s13
 800e892:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e896:	eeb0 6a40 	vmov.f32	s12, s0
 800e89a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e89e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e8a2:	e7aa      	b.n	800e7fa <__ieee754_asinf+0xe2>
 800e8a4:	b33bbd2e 	.word	0xb33bbd2e
 800e8a8:	3fc90fdb 	.word	0x3fc90fdb
 800e8ac:	7149f2ca 	.word	0x7149f2ca
 800e8b0:	3a4f7f04 	.word	0x3a4f7f04
 800e8b4:	3811ef08 	.word	0x3811ef08
 800e8b8:	3e2aaaab 	.word	0x3e2aaaab
 800e8bc:	bd241146 	.word	0xbd241146
 800e8c0:	3e4e0aa8 	.word	0x3e4e0aa8
 800e8c4:	bea6b090 	.word	0xbea6b090
 800e8c8:	3d9dc62e 	.word	0x3d9dc62e
 800e8cc:	bf303361 	.word	0xbf303361
 800e8d0:	4001572d 	.word	0x4001572d
 800e8d4:	c019d139 	.word	0xc019d139
 800e8d8:	3f799999 	.word	0x3f799999
 800e8dc:	333bbd2e 	.word	0x333bbd2e
 800e8e0:	3f490fdb 	.word	0x3f490fdb

0800e8e4 <__ieee754_atan2f>:
 800e8e4:	ee10 2a90 	vmov	r2, s1
 800e8e8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e8ec:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	eef0 7a40 	vmov.f32	s15, s0
 800e8f6:	d806      	bhi.n	800e906 <__ieee754_atan2f+0x22>
 800e8f8:	ee10 0a10 	vmov	r0, s0
 800e8fc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e900:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e904:	d904      	bls.n	800e910 <__ieee754_atan2f+0x2c>
 800e906:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e90a:	eeb0 0a67 	vmov.f32	s0, s15
 800e90e:	bd10      	pop	{r4, pc}
 800e910:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e914:	d103      	bne.n	800e91e <__ieee754_atan2f+0x3a>
 800e916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e91a:	f000 bc83 	b.w	800f224 <atanf>
 800e91e:	1794      	asrs	r4, r2, #30
 800e920:	f004 0402 	and.w	r4, r4, #2
 800e924:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e928:	b943      	cbnz	r3, 800e93c <__ieee754_atan2f+0x58>
 800e92a:	2c02      	cmp	r4, #2
 800e92c:	d05e      	beq.n	800e9ec <__ieee754_atan2f+0x108>
 800e92e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ea00 <__ieee754_atan2f+0x11c>
 800e932:	2c03      	cmp	r4, #3
 800e934:	bf08      	it	eq
 800e936:	eef0 7a47 	vmoveq.f32	s15, s14
 800e93a:	e7e6      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e93c:	b941      	cbnz	r1, 800e950 <__ieee754_atan2f+0x6c>
 800e93e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ea04 <__ieee754_atan2f+0x120>
 800e942:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ea08 <__ieee754_atan2f+0x124>
 800e946:	2800      	cmp	r0, #0
 800e948:	bfb8      	it	lt
 800e94a:	eef0 7a47 	vmovlt.f32	s15, s14
 800e94e:	e7dc      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e950:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e954:	d110      	bne.n	800e978 <__ieee754_atan2f+0x94>
 800e956:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e95a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e95e:	d107      	bne.n	800e970 <__ieee754_atan2f+0x8c>
 800e960:	2c02      	cmp	r4, #2
 800e962:	d846      	bhi.n	800e9f2 <__ieee754_atan2f+0x10e>
 800e964:	4b29      	ldr	r3, [pc, #164]	@ (800ea0c <__ieee754_atan2f+0x128>)
 800e966:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e96a:	edd3 7a00 	vldr	s15, [r3]
 800e96e:	e7cc      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e970:	2c02      	cmp	r4, #2
 800e972:	d841      	bhi.n	800e9f8 <__ieee754_atan2f+0x114>
 800e974:	4b26      	ldr	r3, [pc, #152]	@ (800ea10 <__ieee754_atan2f+0x12c>)
 800e976:	e7f6      	b.n	800e966 <__ieee754_atan2f+0x82>
 800e978:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e97c:	d0df      	beq.n	800e93e <__ieee754_atan2f+0x5a>
 800e97e:	1a5b      	subs	r3, r3, r1
 800e980:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e984:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e988:	da1a      	bge.n	800e9c0 <__ieee754_atan2f+0xdc>
 800e98a:	2a00      	cmp	r2, #0
 800e98c:	da01      	bge.n	800e992 <__ieee754_atan2f+0xae>
 800e98e:	313c      	adds	r1, #60	@ 0x3c
 800e990:	db19      	blt.n	800e9c6 <__ieee754_atan2f+0xe2>
 800e992:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e996:	f7ff fdbd 	bl	800e514 <fabsf>
 800e99a:	f000 fc43 	bl	800f224 <atanf>
 800e99e:	eef0 7a40 	vmov.f32	s15, s0
 800e9a2:	2c01      	cmp	r4, #1
 800e9a4:	d012      	beq.n	800e9cc <__ieee754_atan2f+0xe8>
 800e9a6:	2c02      	cmp	r4, #2
 800e9a8:	d017      	beq.n	800e9da <__ieee754_atan2f+0xf6>
 800e9aa:	2c00      	cmp	r4, #0
 800e9ac:	d0ad      	beq.n	800e90a <__ieee754_atan2f+0x26>
 800e9ae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ea14 <__ieee754_atan2f+0x130>
 800e9b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9b6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ea18 <__ieee754_atan2f+0x134>
 800e9ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9be:	e7a4      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e9c0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ea04 <__ieee754_atan2f+0x120>
 800e9c4:	e7ed      	b.n	800e9a2 <__ieee754_atan2f+0xbe>
 800e9c6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ea1c <__ieee754_atan2f+0x138>
 800e9ca:	e7ea      	b.n	800e9a2 <__ieee754_atan2f+0xbe>
 800e9cc:	ee17 3a90 	vmov	r3, s15
 800e9d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e9d4:	ee07 3a90 	vmov	s15, r3
 800e9d8:	e797      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e9da:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ea14 <__ieee754_atan2f+0x130>
 800e9de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ea18 <__ieee754_atan2f+0x134>
 800e9e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9ea:	e78e      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e9ec:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ea18 <__ieee754_atan2f+0x134>
 800e9f0:	e78b      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e9f2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ea20 <__ieee754_atan2f+0x13c>
 800e9f6:	e788      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e9f8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ea1c <__ieee754_atan2f+0x138>
 800e9fc:	e785      	b.n	800e90a <__ieee754_atan2f+0x26>
 800e9fe:	bf00      	nop
 800ea00:	c0490fdb 	.word	0xc0490fdb
 800ea04:	3fc90fdb 	.word	0x3fc90fdb
 800ea08:	bfc90fdb 	.word	0xbfc90fdb
 800ea0c:	0800fe84 	.word	0x0800fe84
 800ea10:	0800fe78 	.word	0x0800fe78
 800ea14:	33bbbd2e 	.word	0x33bbbd2e
 800ea18:	40490fdb 	.word	0x40490fdb
 800ea1c:	00000000 	.word	0x00000000
 800ea20:	3f490fdb 	.word	0x3f490fdb

0800ea24 <__ieee754_powf>:
 800ea24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea28:	ee10 4a90 	vmov	r4, s1
 800ea2c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800ea30:	ed2d 8b02 	vpush	{d8}
 800ea34:	ee10 6a10 	vmov	r6, s0
 800ea38:	eeb0 8a40 	vmov.f32	s16, s0
 800ea3c:	eef0 8a60 	vmov.f32	s17, s1
 800ea40:	d10c      	bne.n	800ea5c <__ieee754_powf+0x38>
 800ea42:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800ea46:	0076      	lsls	r6, r6, #1
 800ea48:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ea4c:	f240 829c 	bls.w	800ef88 <__ieee754_powf+0x564>
 800ea50:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ea54:	ecbd 8b02 	vpop	{d8}
 800ea58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea5c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ea60:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ea64:	d802      	bhi.n	800ea6c <__ieee754_powf+0x48>
 800ea66:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ea6a:	d908      	bls.n	800ea7e <__ieee754_powf+0x5a>
 800ea6c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ea70:	d1ee      	bne.n	800ea50 <__ieee754_powf+0x2c>
 800ea72:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ea76:	0064      	lsls	r4, r4, #1
 800ea78:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ea7c:	e7e6      	b.n	800ea4c <__ieee754_powf+0x28>
 800ea7e:	2e00      	cmp	r6, #0
 800ea80:	da1e      	bge.n	800eac0 <__ieee754_powf+0x9c>
 800ea82:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ea86:	d22b      	bcs.n	800eae0 <__ieee754_powf+0xbc>
 800ea88:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ea8c:	d332      	bcc.n	800eaf4 <__ieee754_powf+0xd0>
 800ea8e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ea92:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ea96:	fa49 f503 	asr.w	r5, r9, r3
 800ea9a:	fa05 f303 	lsl.w	r3, r5, r3
 800ea9e:	454b      	cmp	r3, r9
 800eaa0:	d126      	bne.n	800eaf0 <__ieee754_powf+0xcc>
 800eaa2:	f005 0501 	and.w	r5, r5, #1
 800eaa6:	f1c5 0502 	rsb	r5, r5, #2
 800eaaa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800eaae:	d122      	bne.n	800eaf6 <__ieee754_powf+0xd2>
 800eab0:	2c00      	cmp	r4, #0
 800eab2:	f280 826f 	bge.w	800ef94 <__ieee754_powf+0x570>
 800eab6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800eaba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800eabe:	e7c9      	b.n	800ea54 <__ieee754_powf+0x30>
 800eac0:	2500      	movs	r5, #0
 800eac2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800eac6:	d1f0      	bne.n	800eaaa <__ieee754_powf+0x86>
 800eac8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800eacc:	f000 825c 	beq.w	800ef88 <__ieee754_powf+0x564>
 800ead0:	d908      	bls.n	800eae4 <__ieee754_powf+0xc0>
 800ead2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800ee34 <__ieee754_powf+0x410>
 800ead6:	2c00      	cmp	r4, #0
 800ead8:	bfa8      	it	ge
 800eada:	eeb0 0a68 	vmovge.f32	s0, s17
 800eade:	e7b9      	b.n	800ea54 <__ieee754_powf+0x30>
 800eae0:	2502      	movs	r5, #2
 800eae2:	e7ee      	b.n	800eac2 <__ieee754_powf+0x9e>
 800eae4:	2c00      	cmp	r4, #0
 800eae6:	f280 8252 	bge.w	800ef8e <__ieee754_powf+0x56a>
 800eaea:	eeb1 0a68 	vneg.f32	s0, s17
 800eaee:	e7b1      	b.n	800ea54 <__ieee754_powf+0x30>
 800eaf0:	2500      	movs	r5, #0
 800eaf2:	e7da      	b.n	800eaaa <__ieee754_powf+0x86>
 800eaf4:	2500      	movs	r5, #0
 800eaf6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800eafa:	d102      	bne.n	800eb02 <__ieee754_powf+0xde>
 800eafc:	ee28 0a08 	vmul.f32	s0, s16, s16
 800eb00:	e7a8      	b.n	800ea54 <__ieee754_powf+0x30>
 800eb02:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800eb06:	d109      	bne.n	800eb1c <__ieee754_powf+0xf8>
 800eb08:	2e00      	cmp	r6, #0
 800eb0a:	db07      	blt.n	800eb1c <__ieee754_powf+0xf8>
 800eb0c:	eeb0 0a48 	vmov.f32	s0, s16
 800eb10:	ecbd 8b02 	vpop	{d8}
 800eb14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb18:	f7ff bd5a 	b.w	800e5d0 <__ieee754_sqrtf>
 800eb1c:	eeb0 0a48 	vmov.f32	s0, s16
 800eb20:	f7ff fcf8 	bl	800e514 <fabsf>
 800eb24:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800eb28:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800eb2c:	4647      	mov	r7, r8
 800eb2e:	d002      	beq.n	800eb36 <__ieee754_powf+0x112>
 800eb30:	f1b8 0f00 	cmp.w	r8, #0
 800eb34:	d117      	bne.n	800eb66 <__ieee754_powf+0x142>
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	bfbc      	itt	lt
 800eb3a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800eb3e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800eb42:	2e00      	cmp	r6, #0
 800eb44:	da86      	bge.n	800ea54 <__ieee754_powf+0x30>
 800eb46:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800eb4a:	ea58 0805 	orrs.w	r8, r8, r5
 800eb4e:	d104      	bne.n	800eb5a <__ieee754_powf+0x136>
 800eb50:	ee70 7a40 	vsub.f32	s15, s0, s0
 800eb54:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800eb58:	e77c      	b.n	800ea54 <__ieee754_powf+0x30>
 800eb5a:	2d01      	cmp	r5, #1
 800eb5c:	f47f af7a 	bne.w	800ea54 <__ieee754_powf+0x30>
 800eb60:	eeb1 0a40 	vneg.f32	s0, s0
 800eb64:	e776      	b.n	800ea54 <__ieee754_powf+0x30>
 800eb66:	0ff0      	lsrs	r0, r6, #31
 800eb68:	3801      	subs	r0, #1
 800eb6a:	ea55 0300 	orrs.w	r3, r5, r0
 800eb6e:	d104      	bne.n	800eb7a <__ieee754_powf+0x156>
 800eb70:	ee38 8a48 	vsub.f32	s16, s16, s16
 800eb74:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800eb78:	e76c      	b.n	800ea54 <__ieee754_powf+0x30>
 800eb7a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800eb7e:	d973      	bls.n	800ec68 <__ieee754_powf+0x244>
 800eb80:	4bad      	ldr	r3, [pc, #692]	@ (800ee38 <__ieee754_powf+0x414>)
 800eb82:	4598      	cmp	r8, r3
 800eb84:	d808      	bhi.n	800eb98 <__ieee754_powf+0x174>
 800eb86:	2c00      	cmp	r4, #0
 800eb88:	da0b      	bge.n	800eba2 <__ieee754_powf+0x17e>
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	ecbd 8b02 	vpop	{d8}
 800eb90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb94:	f000 bca0 	b.w	800f4d8 <__math_oflowf>
 800eb98:	4ba8      	ldr	r3, [pc, #672]	@ (800ee3c <__ieee754_powf+0x418>)
 800eb9a:	4598      	cmp	r8, r3
 800eb9c:	d908      	bls.n	800ebb0 <__ieee754_powf+0x18c>
 800eb9e:	2c00      	cmp	r4, #0
 800eba0:	dcf3      	bgt.n	800eb8a <__ieee754_powf+0x166>
 800eba2:	2000      	movs	r0, #0
 800eba4:	ecbd 8b02 	vpop	{d8}
 800eba8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebac:	f000 bc8e 	b.w	800f4cc <__math_uflowf>
 800ebb0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ebb4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ebb8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800ee40 <__ieee754_powf+0x41c>
 800ebbc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ebc0:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ebc4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ebc8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ebcc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ebd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebd4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800ee44 <__ieee754_powf+0x420>
 800ebd8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ebdc:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800ee48 <__ieee754_powf+0x424>
 800ebe0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ebe4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800ee4c <__ieee754_powf+0x428>
 800ebe8:	eef0 6a67 	vmov.f32	s13, s15
 800ebec:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ebf0:	ee16 3a90 	vmov	r3, s13
 800ebf4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ebf8:	f023 030f 	bic.w	r3, r3, #15
 800ebfc:	ee06 3a90 	vmov	s13, r3
 800ec00:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ec04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ec08:	3d01      	subs	r5, #1
 800ec0a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800ec0e:	4305      	orrs	r5, r0
 800ec10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ec14:	f024 040f 	bic.w	r4, r4, #15
 800ec18:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800ec1c:	bf18      	it	ne
 800ec1e:	eeb0 8a47 	vmovne.f32	s16, s14
 800ec22:	ee07 4a10 	vmov	s14, r4
 800ec26:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ec2a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ec2e:	ee07 3a90 	vmov	s15, r3
 800ec32:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ec36:	ee07 4a10 	vmov	s14, r4
 800ec3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec3e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ec42:	ee17 1a10 	vmov	r1, s14
 800ec46:	2900      	cmp	r1, #0
 800ec48:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ec4c:	f340 80dd 	ble.w	800ee0a <__ieee754_powf+0x3e6>
 800ec50:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ec54:	f240 80ca 	bls.w	800edec <__ieee754_powf+0x3c8>
 800ec58:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ec5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec60:	bf4c      	ite	mi
 800ec62:	2001      	movmi	r0, #1
 800ec64:	2000      	movpl	r0, #0
 800ec66:	e791      	b.n	800eb8c <__ieee754_powf+0x168>
 800ec68:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ec6c:	bf01      	itttt	eq
 800ec6e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800ee50 <__ieee754_powf+0x42c>
 800ec72:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ec76:	f06f 0317 	mvneq.w	r3, #23
 800ec7a:	ee17 7a90 	vmoveq	r7, s15
 800ec7e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800ec82:	bf18      	it	ne
 800ec84:	2300      	movne	r3, #0
 800ec86:	3a7f      	subs	r2, #127	@ 0x7f
 800ec88:	441a      	add	r2, r3
 800ec8a:	4b72      	ldr	r3, [pc, #456]	@ (800ee54 <__ieee754_powf+0x430>)
 800ec8c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800ec90:	429f      	cmp	r7, r3
 800ec92:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800ec96:	dd06      	ble.n	800eca6 <__ieee754_powf+0x282>
 800ec98:	4b6f      	ldr	r3, [pc, #444]	@ (800ee58 <__ieee754_powf+0x434>)
 800ec9a:	429f      	cmp	r7, r3
 800ec9c:	f340 80a4 	ble.w	800ede8 <__ieee754_powf+0x3c4>
 800eca0:	3201      	adds	r2, #1
 800eca2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800eca6:	2600      	movs	r6, #0
 800eca8:	4b6c      	ldr	r3, [pc, #432]	@ (800ee5c <__ieee754_powf+0x438>)
 800ecaa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ecae:	ee07 1a10 	vmov	s14, r1
 800ecb2:	edd3 5a00 	vldr	s11, [r3]
 800ecb6:	4b6a      	ldr	r3, [pc, #424]	@ (800ee60 <__ieee754_powf+0x43c>)
 800ecb8:	ee75 7a87 	vadd.f32	s15, s11, s14
 800ecbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecc0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800ecc4:	1049      	asrs	r1, r1, #1
 800ecc6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800ecca:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800ecce:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800ecd2:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ecd6:	ee07 1a90 	vmov	s15, r1
 800ecda:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ecde:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ece2:	ee15 7a10 	vmov	r7, s10
 800ece6:	401f      	ands	r7, r3
 800ece8:	ee06 7a90 	vmov	s13, r7
 800ecec:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800ecf0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ecf4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ecf8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ecfc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ee64 <__ieee754_powf+0x440>
 800ed00:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800ee68 <__ieee754_powf+0x444>
 800ed04:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ed08:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ee6c <__ieee754_powf+0x448>
 800ed0c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ed10:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800ee40 <__ieee754_powf+0x41c>
 800ed14:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ed18:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ee70 <__ieee754_powf+0x44c>
 800ed1c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ed20:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ee74 <__ieee754_powf+0x450>
 800ed24:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ed28:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ed2c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ed30:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ed34:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ed38:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800ed3c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800ed40:	eef0 5a67 	vmov.f32	s11, s15
 800ed44:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800ed48:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ed4c:	ee15 1a90 	vmov	r1, s11
 800ed50:	4019      	ands	r1, r3
 800ed52:	ee05 1a90 	vmov	s11, r1
 800ed56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ed5a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ed5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed62:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ed66:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ed6a:	eeb0 6a67 	vmov.f32	s12, s15
 800ed6e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ed72:	ee16 1a10 	vmov	r1, s12
 800ed76:	4019      	ands	r1, r3
 800ed78:	ee06 1a10 	vmov	s12, r1
 800ed7c:	eeb0 7a46 	vmov.f32	s14, s12
 800ed80:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800ed84:	493c      	ldr	r1, [pc, #240]	@ (800ee78 <__ieee754_powf+0x454>)
 800ed86:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800ed8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed8e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ee7c <__ieee754_powf+0x458>
 800ed92:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ee80 <__ieee754_powf+0x45c>
 800ed96:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed9a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ee84 <__ieee754_powf+0x460>
 800ed9e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eda2:	ed91 7a00 	vldr	s14, [r1]
 800eda6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edaa:	ee07 2a10 	vmov	s14, r2
 800edae:	eef0 6a67 	vmov.f32	s13, s15
 800edb2:	4a35      	ldr	r2, [pc, #212]	@ (800ee88 <__ieee754_powf+0x464>)
 800edb4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800edb8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800edbc:	ed92 5a00 	vldr	s10, [r2]
 800edc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800edc4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800edc8:	ee76 6a87 	vadd.f32	s13, s13, s14
 800edcc:	ee16 2a90 	vmov	r2, s13
 800edd0:	4013      	ands	r3, r2
 800edd2:	ee06 3a90 	vmov	s13, r3
 800edd6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800edda:	ee37 7a45 	vsub.f32	s14, s14, s10
 800edde:	eea6 7a65 	vfms.f32	s14, s12, s11
 800ede2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ede6:	e70f      	b.n	800ec08 <__ieee754_powf+0x1e4>
 800ede8:	2601      	movs	r6, #1
 800edea:	e75d      	b.n	800eca8 <__ieee754_powf+0x284>
 800edec:	d152      	bne.n	800ee94 <__ieee754_powf+0x470>
 800edee:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ee8c <__ieee754_powf+0x468>
 800edf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800edf6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800edfa:	eef4 6ac7 	vcmpe.f32	s13, s14
 800edfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee02:	f73f af29 	bgt.w	800ec58 <__ieee754_powf+0x234>
 800ee06:	2386      	movs	r3, #134	@ 0x86
 800ee08:	e048      	b.n	800ee9c <__ieee754_powf+0x478>
 800ee0a:	4a21      	ldr	r2, [pc, #132]	@ (800ee90 <__ieee754_powf+0x46c>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d907      	bls.n	800ee20 <__ieee754_powf+0x3fc>
 800ee10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ee14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee18:	bf4c      	ite	mi
 800ee1a:	2001      	movmi	r0, #1
 800ee1c:	2000      	movpl	r0, #0
 800ee1e:	e6c1      	b.n	800eba4 <__ieee754_powf+0x180>
 800ee20:	d138      	bne.n	800ee94 <__ieee754_powf+0x470>
 800ee22:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee26:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ee2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2e:	dbea      	blt.n	800ee06 <__ieee754_powf+0x3e2>
 800ee30:	e7ee      	b.n	800ee10 <__ieee754_powf+0x3ec>
 800ee32:	bf00      	nop
 800ee34:	00000000 	.word	0x00000000
 800ee38:	3f7ffff3 	.word	0x3f7ffff3
 800ee3c:	3f800007 	.word	0x3f800007
 800ee40:	3eaaaaab 	.word	0x3eaaaaab
 800ee44:	3fb8aa3b 	.word	0x3fb8aa3b
 800ee48:	36eca570 	.word	0x36eca570
 800ee4c:	3fb8aa00 	.word	0x3fb8aa00
 800ee50:	4b800000 	.word	0x4b800000
 800ee54:	001cc471 	.word	0x001cc471
 800ee58:	005db3d6 	.word	0x005db3d6
 800ee5c:	0800fea0 	.word	0x0800fea0
 800ee60:	fffff000 	.word	0xfffff000
 800ee64:	3e6c3255 	.word	0x3e6c3255
 800ee68:	3e53f142 	.word	0x3e53f142
 800ee6c:	3e8ba305 	.word	0x3e8ba305
 800ee70:	3edb6db7 	.word	0x3edb6db7
 800ee74:	3f19999a 	.word	0x3f19999a
 800ee78:	0800fe90 	.word	0x0800fe90
 800ee7c:	3f76384f 	.word	0x3f76384f
 800ee80:	3f763800 	.word	0x3f763800
 800ee84:	369dc3a0 	.word	0x369dc3a0
 800ee88:	0800fe98 	.word	0x0800fe98
 800ee8c:	3338aa3c 	.word	0x3338aa3c
 800ee90:	43160000 	.word	0x43160000
 800ee94:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800ee98:	d971      	bls.n	800ef7e <__ieee754_powf+0x55a>
 800ee9a:	15db      	asrs	r3, r3, #23
 800ee9c:	3b7e      	subs	r3, #126	@ 0x7e
 800ee9e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800eea2:	4118      	asrs	r0, r3
 800eea4:	4408      	add	r0, r1
 800eea6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800eeaa:	4a3c      	ldr	r2, [pc, #240]	@ (800ef9c <__ieee754_powf+0x578>)
 800eeac:	3b7f      	subs	r3, #127	@ 0x7f
 800eeae:	411a      	asrs	r2, r3
 800eeb0:	4002      	ands	r2, r0
 800eeb2:	ee07 2a10 	vmov	s14, r2
 800eeb6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800eeba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800eebe:	f1c3 0317 	rsb	r3, r3, #23
 800eec2:	4118      	asrs	r0, r3
 800eec4:	2900      	cmp	r1, #0
 800eec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eeca:	bfb8      	it	lt
 800eecc:	4240      	neglt	r0, r0
 800eece:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800eed2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800efa0 <__ieee754_powf+0x57c>
 800eed6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800efa4 <__ieee754_powf+0x580>
 800eeda:	ee17 3a10 	vmov	r3, s14
 800eede:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800eee2:	f023 030f 	bic.w	r3, r3, #15
 800eee6:	ee07 3a10 	vmov	s14, r3
 800eeea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800eef2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800eef6:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800efa8 <__ieee754_powf+0x584>
 800eefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eefe:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ef02:	eef0 6a67 	vmov.f32	s13, s15
 800ef06:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ef0a:	eef0 5a66 	vmov.f32	s11, s13
 800ef0e:	eee7 5a46 	vfms.f32	s11, s14, s12
 800ef12:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ef16:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ef1a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800efac <__ieee754_powf+0x588>
 800ef1e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800efb0 <__ieee754_powf+0x58c>
 800ef22:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ef26:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800efb4 <__ieee754_powf+0x590>
 800ef2a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ef2e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800efb8 <__ieee754_powf+0x594>
 800ef32:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ef36:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800efbc <__ieee754_powf+0x598>
 800ef3a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ef3e:	eeb0 6a66 	vmov.f32	s12, s13
 800ef42:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800ef46:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ef4a:	ee66 5a86 	vmul.f32	s11, s13, s12
 800ef4e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ef52:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ef56:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ef5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ef62:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef66:	ee10 3a10 	vmov	r3, s0
 800ef6a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ef6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ef72:	da06      	bge.n	800ef82 <__ieee754_powf+0x55e>
 800ef74:	f000 fa2a 	bl	800f3cc <scalbnf>
 800ef78:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ef7c:	e56a      	b.n	800ea54 <__ieee754_powf+0x30>
 800ef7e:	2000      	movs	r0, #0
 800ef80:	e7a5      	b.n	800eece <__ieee754_powf+0x4aa>
 800ef82:	ee00 3a10 	vmov	s0, r3
 800ef86:	e7f7      	b.n	800ef78 <__ieee754_powf+0x554>
 800ef88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ef8c:	e562      	b.n	800ea54 <__ieee754_powf+0x30>
 800ef8e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800efc0 <__ieee754_powf+0x59c>
 800ef92:	e55f      	b.n	800ea54 <__ieee754_powf+0x30>
 800ef94:	eeb0 0a48 	vmov.f32	s0, s16
 800ef98:	e55c      	b.n	800ea54 <__ieee754_powf+0x30>
 800ef9a:	bf00      	nop
 800ef9c:	ff800000 	.word	0xff800000
 800efa0:	3f317218 	.word	0x3f317218
 800efa4:	3f317200 	.word	0x3f317200
 800efa8:	35bfbe8c 	.word	0x35bfbe8c
 800efac:	b5ddea0e 	.word	0xb5ddea0e
 800efb0:	3331bb4c 	.word	0x3331bb4c
 800efb4:	388ab355 	.word	0x388ab355
 800efb8:	bb360b61 	.word	0xbb360b61
 800efbc:	3e2aaaab 	.word	0x3e2aaaab
 800efc0:	00000000 	.word	0x00000000

0800efc4 <__ieee754_rem_pio2f>:
 800efc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efc6:	ee10 6a10 	vmov	r6, s0
 800efca:	4b88      	ldr	r3, [pc, #544]	@ (800f1ec <__ieee754_rem_pio2f+0x228>)
 800efcc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800efd0:	429d      	cmp	r5, r3
 800efd2:	b087      	sub	sp, #28
 800efd4:	4604      	mov	r4, r0
 800efd6:	d805      	bhi.n	800efe4 <__ieee754_rem_pio2f+0x20>
 800efd8:	2300      	movs	r3, #0
 800efda:	ed80 0a00 	vstr	s0, [r0]
 800efde:	6043      	str	r3, [r0, #4]
 800efe0:	2000      	movs	r0, #0
 800efe2:	e022      	b.n	800f02a <__ieee754_rem_pio2f+0x66>
 800efe4:	4b82      	ldr	r3, [pc, #520]	@ (800f1f0 <__ieee754_rem_pio2f+0x22c>)
 800efe6:	429d      	cmp	r5, r3
 800efe8:	d83a      	bhi.n	800f060 <__ieee754_rem_pio2f+0x9c>
 800efea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800efee:	2e00      	cmp	r6, #0
 800eff0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f1f4 <__ieee754_rem_pio2f+0x230>
 800eff4:	4a80      	ldr	r2, [pc, #512]	@ (800f1f8 <__ieee754_rem_pio2f+0x234>)
 800eff6:	f023 030f 	bic.w	r3, r3, #15
 800effa:	dd18      	ble.n	800f02e <__ieee754_rem_pio2f+0x6a>
 800effc:	4293      	cmp	r3, r2
 800effe:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f002:	bf09      	itett	eq
 800f004:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f1fc <__ieee754_rem_pio2f+0x238>
 800f008:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f200 <__ieee754_rem_pio2f+0x23c>
 800f00c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f204 <__ieee754_rem_pio2f+0x240>
 800f010:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f014:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f01c:	ed80 7a00 	vstr	s14, [r0]
 800f020:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f024:	edc0 7a01 	vstr	s15, [r0, #4]
 800f028:	2001      	movs	r0, #1
 800f02a:	b007      	add	sp, #28
 800f02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f02e:	4293      	cmp	r3, r2
 800f030:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f034:	bf09      	itett	eq
 800f036:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f1fc <__ieee754_rem_pio2f+0x238>
 800f03a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f200 <__ieee754_rem_pio2f+0x23c>
 800f03e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f204 <__ieee754_rem_pio2f+0x240>
 800f042:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f046:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f04a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f04e:	ed80 7a00 	vstr	s14, [r0]
 800f052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f056:	edc0 7a01 	vstr	s15, [r0, #4]
 800f05a:	f04f 30ff 	mov.w	r0, #4294967295
 800f05e:	e7e4      	b.n	800f02a <__ieee754_rem_pio2f+0x66>
 800f060:	4b69      	ldr	r3, [pc, #420]	@ (800f208 <__ieee754_rem_pio2f+0x244>)
 800f062:	429d      	cmp	r5, r3
 800f064:	d873      	bhi.n	800f14e <__ieee754_rem_pio2f+0x18a>
 800f066:	f7ff fa55 	bl	800e514 <fabsf>
 800f06a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f20c <__ieee754_rem_pio2f+0x248>
 800f06e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f072:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f07a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f07e:	ee17 0a90 	vmov	r0, s15
 800f082:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f1f4 <__ieee754_rem_pio2f+0x230>
 800f086:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f08a:	281f      	cmp	r0, #31
 800f08c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f200 <__ieee754_rem_pio2f+0x23c>
 800f090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f094:	eeb1 6a47 	vneg.f32	s12, s14
 800f098:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f09c:	ee16 1a90 	vmov	r1, s13
 800f0a0:	dc09      	bgt.n	800f0b6 <__ieee754_rem_pio2f+0xf2>
 800f0a2:	4a5b      	ldr	r2, [pc, #364]	@ (800f210 <__ieee754_rem_pio2f+0x24c>)
 800f0a4:	1e47      	subs	r7, r0, #1
 800f0a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f0aa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f0ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d107      	bne.n	800f0c6 <__ieee754_rem_pio2f+0x102>
 800f0b6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f0ba:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f0be:	2a08      	cmp	r2, #8
 800f0c0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f0c4:	dc14      	bgt.n	800f0f0 <__ieee754_rem_pio2f+0x12c>
 800f0c6:	6021      	str	r1, [r4, #0]
 800f0c8:	ed94 7a00 	vldr	s14, [r4]
 800f0cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f0d0:	2e00      	cmp	r6, #0
 800f0d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f0d6:	ed84 0a01 	vstr	s0, [r4, #4]
 800f0da:	daa6      	bge.n	800f02a <__ieee754_rem_pio2f+0x66>
 800f0dc:	eeb1 7a47 	vneg.f32	s14, s14
 800f0e0:	eeb1 0a40 	vneg.f32	s0, s0
 800f0e4:	ed84 7a00 	vstr	s14, [r4]
 800f0e8:	ed84 0a01 	vstr	s0, [r4, #4]
 800f0ec:	4240      	negs	r0, r0
 800f0ee:	e79c      	b.n	800f02a <__ieee754_rem_pio2f+0x66>
 800f0f0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f1fc <__ieee754_rem_pio2f+0x238>
 800f0f4:	eef0 6a40 	vmov.f32	s13, s0
 800f0f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f0fc:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f100:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f104:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f204 <__ieee754_rem_pio2f+0x240>
 800f108:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f10c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f110:	ee15 2a90 	vmov	r2, s11
 800f114:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f118:	1a5b      	subs	r3, r3, r1
 800f11a:	2b19      	cmp	r3, #25
 800f11c:	dc04      	bgt.n	800f128 <__ieee754_rem_pio2f+0x164>
 800f11e:	edc4 5a00 	vstr	s11, [r4]
 800f122:	eeb0 0a66 	vmov.f32	s0, s13
 800f126:	e7cf      	b.n	800f0c8 <__ieee754_rem_pio2f+0x104>
 800f128:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f214 <__ieee754_rem_pio2f+0x250>
 800f12c:	eeb0 0a66 	vmov.f32	s0, s13
 800f130:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f134:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f138:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f218 <__ieee754_rem_pio2f+0x254>
 800f13c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f140:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f144:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f148:	ed84 7a00 	vstr	s14, [r4]
 800f14c:	e7bc      	b.n	800f0c8 <__ieee754_rem_pio2f+0x104>
 800f14e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f152:	d306      	bcc.n	800f162 <__ieee754_rem_pio2f+0x19e>
 800f154:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f158:	edc0 7a01 	vstr	s15, [r0, #4]
 800f15c:	edc0 7a00 	vstr	s15, [r0]
 800f160:	e73e      	b.n	800efe0 <__ieee754_rem_pio2f+0x1c>
 800f162:	15ea      	asrs	r2, r5, #23
 800f164:	3a86      	subs	r2, #134	@ 0x86
 800f166:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f16a:	ee07 3a90 	vmov	s15, r3
 800f16e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f172:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f21c <__ieee754_rem_pio2f+0x258>
 800f176:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f17a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f17e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f182:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f186:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f18a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f18e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f192:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f196:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f19a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a2:	edcd 7a05 	vstr	s15, [sp, #20]
 800f1a6:	d11e      	bne.n	800f1e6 <__ieee754_rem_pio2f+0x222>
 800f1a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b0:	bf0c      	ite	eq
 800f1b2:	2301      	moveq	r3, #1
 800f1b4:	2302      	movne	r3, #2
 800f1b6:	491a      	ldr	r1, [pc, #104]	@ (800f220 <__ieee754_rem_pio2f+0x25c>)
 800f1b8:	9101      	str	r1, [sp, #4]
 800f1ba:	2102      	movs	r1, #2
 800f1bc:	9100      	str	r1, [sp, #0]
 800f1be:	a803      	add	r0, sp, #12
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	f000 f98f 	bl	800f4e4 <__kernel_rem_pio2f>
 800f1c6:	2e00      	cmp	r6, #0
 800f1c8:	f6bf af2f 	bge.w	800f02a <__ieee754_rem_pio2f+0x66>
 800f1cc:	edd4 7a00 	vldr	s15, [r4]
 800f1d0:	eef1 7a67 	vneg.f32	s15, s15
 800f1d4:	edc4 7a00 	vstr	s15, [r4]
 800f1d8:	edd4 7a01 	vldr	s15, [r4, #4]
 800f1dc:	eef1 7a67 	vneg.f32	s15, s15
 800f1e0:	edc4 7a01 	vstr	s15, [r4, #4]
 800f1e4:	e782      	b.n	800f0ec <__ieee754_rem_pio2f+0x128>
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	e7e5      	b.n	800f1b6 <__ieee754_rem_pio2f+0x1f2>
 800f1ea:	bf00      	nop
 800f1ec:	3f490fd8 	.word	0x3f490fd8
 800f1f0:	4016cbe3 	.word	0x4016cbe3
 800f1f4:	3fc90f80 	.word	0x3fc90f80
 800f1f8:	3fc90fd0 	.word	0x3fc90fd0
 800f1fc:	37354400 	.word	0x37354400
 800f200:	37354443 	.word	0x37354443
 800f204:	2e85a308 	.word	0x2e85a308
 800f208:	43490f80 	.word	0x43490f80
 800f20c:	3f22f984 	.word	0x3f22f984
 800f210:	0800fea8 	.word	0x0800fea8
 800f214:	2e85a300 	.word	0x2e85a300
 800f218:	248d3132 	.word	0x248d3132
 800f21c:	43800000 	.word	0x43800000
 800f220:	0800ff28 	.word	0x0800ff28

0800f224 <atanf>:
 800f224:	b538      	push	{r3, r4, r5, lr}
 800f226:	ee10 5a10 	vmov	r5, s0
 800f22a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f22e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800f232:	eef0 7a40 	vmov.f32	s15, s0
 800f236:	d310      	bcc.n	800f25a <atanf+0x36>
 800f238:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800f23c:	d904      	bls.n	800f248 <atanf+0x24>
 800f23e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f242:	eeb0 0a67 	vmov.f32	s0, s15
 800f246:	bd38      	pop	{r3, r4, r5, pc}
 800f248:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800f380 <atanf+0x15c>
 800f24c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f384 <atanf+0x160>
 800f250:	2d00      	cmp	r5, #0
 800f252:	bfc8      	it	gt
 800f254:	eef0 7a47 	vmovgt.f32	s15, s14
 800f258:	e7f3      	b.n	800f242 <atanf+0x1e>
 800f25a:	4b4b      	ldr	r3, [pc, #300]	@ (800f388 <atanf+0x164>)
 800f25c:	429c      	cmp	r4, r3
 800f25e:	d810      	bhi.n	800f282 <atanf+0x5e>
 800f260:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800f264:	d20a      	bcs.n	800f27c <atanf+0x58>
 800f266:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f38c <atanf+0x168>
 800f26a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f26e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f272:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f27a:	dce2      	bgt.n	800f242 <atanf+0x1e>
 800f27c:	f04f 33ff 	mov.w	r3, #4294967295
 800f280:	e013      	b.n	800f2aa <atanf+0x86>
 800f282:	f7ff f947 	bl	800e514 <fabsf>
 800f286:	4b42      	ldr	r3, [pc, #264]	@ (800f390 <atanf+0x16c>)
 800f288:	429c      	cmp	r4, r3
 800f28a:	d84f      	bhi.n	800f32c <atanf+0x108>
 800f28c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800f290:	429c      	cmp	r4, r3
 800f292:	d841      	bhi.n	800f318 <atanf+0xf4>
 800f294:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f298:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f29c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f2a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f2b0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f394 <atanf+0x170>
 800f2b4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800f398 <atanf+0x174>
 800f2b8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800f39c <atanf+0x178>
 800f2bc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f2c0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f2c4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800f3a0 <atanf+0x17c>
 800f2c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f2cc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800f3a4 <atanf+0x180>
 800f2d0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f2d4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f3a8 <atanf+0x184>
 800f2d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f2dc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f3ac <atanf+0x188>
 800f2e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f2e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800f3b0 <atanf+0x18c>
 800f2e8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f2ec:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f3b4 <atanf+0x190>
 800f2f0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f2f4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800f3b8 <atanf+0x194>
 800f2f8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f2fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f3bc <atanf+0x198>
 800f300:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f304:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f308:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f30c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f310:	d121      	bne.n	800f356 <atanf+0x132>
 800f312:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f316:	e794      	b.n	800f242 <atanf+0x1e>
 800f318:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f31c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f320:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f324:	2301      	movs	r3, #1
 800f326:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f32a:	e7be      	b.n	800f2aa <atanf+0x86>
 800f32c:	4b24      	ldr	r3, [pc, #144]	@ (800f3c0 <atanf+0x19c>)
 800f32e:	429c      	cmp	r4, r3
 800f330:	d80b      	bhi.n	800f34a <atanf+0x126>
 800f332:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800f336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f33a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f33e:	2302      	movs	r3, #2
 800f340:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f348:	e7af      	b.n	800f2aa <atanf+0x86>
 800f34a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f34e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f352:	2303      	movs	r3, #3
 800f354:	e7a9      	b.n	800f2aa <atanf+0x86>
 800f356:	4a1b      	ldr	r2, [pc, #108]	@ (800f3c4 <atanf+0x1a0>)
 800f358:	491b      	ldr	r1, [pc, #108]	@ (800f3c8 <atanf+0x1a4>)
 800f35a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f35e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f362:	edd3 6a00 	vldr	s13, [r3]
 800f366:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f36a:	2d00      	cmp	r5, #0
 800f36c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f370:	edd2 7a00 	vldr	s15, [r2]
 800f374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f378:	bfb8      	it	lt
 800f37a:	eef1 7a67 	vneglt.f32	s15, s15
 800f37e:	e760      	b.n	800f242 <atanf+0x1e>
 800f380:	bfc90fdb 	.word	0xbfc90fdb
 800f384:	3fc90fdb 	.word	0x3fc90fdb
 800f388:	3edfffff 	.word	0x3edfffff
 800f38c:	7149f2ca 	.word	0x7149f2ca
 800f390:	3f97ffff 	.word	0x3f97ffff
 800f394:	3c8569d7 	.word	0x3c8569d7
 800f398:	3d4bda59 	.word	0x3d4bda59
 800f39c:	bd6ef16b 	.word	0xbd6ef16b
 800f3a0:	3d886b35 	.word	0x3d886b35
 800f3a4:	3dba2e6e 	.word	0x3dba2e6e
 800f3a8:	3e124925 	.word	0x3e124925
 800f3ac:	3eaaaaab 	.word	0x3eaaaaab
 800f3b0:	bd15a221 	.word	0xbd15a221
 800f3b4:	bd9d8795 	.word	0xbd9d8795
 800f3b8:	bde38e38 	.word	0xbde38e38
 800f3bc:	be4ccccd 	.word	0xbe4ccccd
 800f3c0:	401bffff 	.word	0x401bffff
 800f3c4:	08010250 	.word	0x08010250
 800f3c8:	08010240 	.word	0x08010240

0800f3cc <scalbnf>:
 800f3cc:	ee10 3a10 	vmov	r3, s0
 800f3d0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f3d4:	d02b      	beq.n	800f42e <scalbnf+0x62>
 800f3d6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f3da:	d302      	bcc.n	800f3e2 <scalbnf+0x16>
 800f3dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f3e0:	4770      	bx	lr
 800f3e2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f3e6:	d123      	bne.n	800f430 <scalbnf+0x64>
 800f3e8:	4b24      	ldr	r3, [pc, #144]	@ (800f47c <scalbnf+0xb0>)
 800f3ea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f480 <scalbnf+0xb4>
 800f3ee:	4298      	cmp	r0, r3
 800f3f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f3f4:	db17      	blt.n	800f426 <scalbnf+0x5a>
 800f3f6:	ee10 3a10 	vmov	r3, s0
 800f3fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f3fe:	3a19      	subs	r2, #25
 800f400:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f404:	4288      	cmp	r0, r1
 800f406:	dd15      	ble.n	800f434 <scalbnf+0x68>
 800f408:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f484 <scalbnf+0xb8>
 800f40c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f488 <scalbnf+0xbc>
 800f410:	ee10 3a10 	vmov	r3, s0
 800f414:	eeb0 7a67 	vmov.f32	s14, s15
 800f418:	2b00      	cmp	r3, #0
 800f41a:	bfb8      	it	lt
 800f41c:	eef0 7a66 	vmovlt.f32	s15, s13
 800f420:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f424:	4770      	bx	lr
 800f426:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f48c <scalbnf+0xc0>
 800f42a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f42e:	4770      	bx	lr
 800f430:	0dd2      	lsrs	r2, r2, #23
 800f432:	e7e5      	b.n	800f400 <scalbnf+0x34>
 800f434:	4410      	add	r0, r2
 800f436:	28fe      	cmp	r0, #254	@ 0xfe
 800f438:	dce6      	bgt.n	800f408 <scalbnf+0x3c>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	dd06      	ble.n	800f44c <scalbnf+0x80>
 800f43e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f442:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f446:	ee00 3a10 	vmov	s0, r3
 800f44a:	4770      	bx	lr
 800f44c:	f110 0f16 	cmn.w	r0, #22
 800f450:	da09      	bge.n	800f466 <scalbnf+0x9a>
 800f452:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f48c <scalbnf+0xc0>
 800f456:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f490 <scalbnf+0xc4>
 800f45a:	ee10 3a10 	vmov	r3, s0
 800f45e:	eeb0 7a67 	vmov.f32	s14, s15
 800f462:	2b00      	cmp	r3, #0
 800f464:	e7d9      	b.n	800f41a <scalbnf+0x4e>
 800f466:	3019      	adds	r0, #25
 800f468:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f46c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f470:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f494 <scalbnf+0xc8>
 800f474:	ee07 3a90 	vmov	s15, r3
 800f478:	e7d7      	b.n	800f42a <scalbnf+0x5e>
 800f47a:	bf00      	nop
 800f47c:	ffff3cb0 	.word	0xffff3cb0
 800f480:	4c000000 	.word	0x4c000000
 800f484:	7149f2ca 	.word	0x7149f2ca
 800f488:	f149f2ca 	.word	0xf149f2ca
 800f48c:	0da24260 	.word	0x0da24260
 800f490:	8da24260 	.word	0x8da24260
 800f494:	33000000 	.word	0x33000000

0800f498 <with_errnof>:
 800f498:	b510      	push	{r4, lr}
 800f49a:	ed2d 8b02 	vpush	{d8}
 800f49e:	eeb0 8a40 	vmov.f32	s16, s0
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	f7fc fef6 	bl	800c294 <__errno>
 800f4a8:	eeb0 0a48 	vmov.f32	s0, s16
 800f4ac:	ecbd 8b02 	vpop	{d8}
 800f4b0:	6004      	str	r4, [r0, #0]
 800f4b2:	bd10      	pop	{r4, pc}

0800f4b4 <xflowf>:
 800f4b4:	b130      	cbz	r0, 800f4c4 <xflowf+0x10>
 800f4b6:	eef1 7a40 	vneg.f32	s15, s0
 800f4ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f4be:	2022      	movs	r0, #34	@ 0x22
 800f4c0:	f7ff bfea 	b.w	800f498 <with_errnof>
 800f4c4:	eef0 7a40 	vmov.f32	s15, s0
 800f4c8:	e7f7      	b.n	800f4ba <xflowf+0x6>
	...

0800f4cc <__math_uflowf>:
 800f4cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f4d4 <__math_uflowf+0x8>
 800f4d0:	f7ff bff0 	b.w	800f4b4 <xflowf>
 800f4d4:	10000000 	.word	0x10000000

0800f4d8 <__math_oflowf>:
 800f4d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f4e0 <__math_oflowf+0x8>
 800f4dc:	f7ff bfea 	b.w	800f4b4 <xflowf>
 800f4e0:	70000000 	.word	0x70000000

0800f4e4 <__kernel_rem_pio2f>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	ed2d 8b04 	vpush	{d8-d9}
 800f4ec:	b0d9      	sub	sp, #356	@ 0x164
 800f4ee:	4690      	mov	r8, r2
 800f4f0:	9001      	str	r0, [sp, #4]
 800f4f2:	4ab9      	ldr	r2, [pc, #740]	@ (800f7d8 <__kernel_rem_pio2f+0x2f4>)
 800f4f4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f4f6:	f118 0f04 	cmn.w	r8, #4
 800f4fa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f4fe:	460f      	mov	r7, r1
 800f500:	f103 3bff 	add.w	fp, r3, #4294967295
 800f504:	db27      	blt.n	800f556 <__kernel_rem_pio2f+0x72>
 800f506:	f1b8 0203 	subs.w	r2, r8, #3
 800f50a:	bf48      	it	mi
 800f50c:	f108 0204 	addmi.w	r2, r8, #4
 800f510:	10d2      	asrs	r2, r2, #3
 800f512:	1c55      	adds	r5, r2, #1
 800f514:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f516:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800f7e8 <__kernel_rem_pio2f+0x304>
 800f51a:	00e8      	lsls	r0, r5, #3
 800f51c:	eba2 060b 	sub.w	r6, r2, fp
 800f520:	9002      	str	r0, [sp, #8]
 800f522:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800f526:	eb0a 0c0b 	add.w	ip, sl, fp
 800f52a:	ac1c      	add	r4, sp, #112	@ 0x70
 800f52c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800f530:	2000      	movs	r0, #0
 800f532:	4560      	cmp	r0, ip
 800f534:	dd11      	ble.n	800f55a <__kernel_rem_pio2f+0x76>
 800f536:	a91c      	add	r1, sp, #112	@ 0x70
 800f538:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f53c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800f540:	f04f 0c00 	mov.w	ip, #0
 800f544:	45d4      	cmp	ip, sl
 800f546:	dc27      	bgt.n	800f598 <__kernel_rem_pio2f+0xb4>
 800f548:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f54c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800f7e8 <__kernel_rem_pio2f+0x304>
 800f550:	4606      	mov	r6, r0
 800f552:	2400      	movs	r4, #0
 800f554:	e016      	b.n	800f584 <__kernel_rem_pio2f+0xa0>
 800f556:	2200      	movs	r2, #0
 800f558:	e7db      	b.n	800f512 <__kernel_rem_pio2f+0x2e>
 800f55a:	42c6      	cmn	r6, r0
 800f55c:	bf5d      	ittte	pl
 800f55e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800f562:	ee07 1a90 	vmovpl	s15, r1
 800f566:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f56a:	eef0 7a47 	vmovmi.f32	s15, s14
 800f56e:	ece4 7a01 	vstmia	r4!, {s15}
 800f572:	3001      	adds	r0, #1
 800f574:	e7dd      	b.n	800f532 <__kernel_rem_pio2f+0x4e>
 800f576:	ecfe 6a01 	vldmia	lr!, {s13}
 800f57a:	ed96 7a00 	vldr	s14, [r6]
 800f57e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f582:	3401      	adds	r4, #1
 800f584:	455c      	cmp	r4, fp
 800f586:	f1a6 0604 	sub.w	r6, r6, #4
 800f58a:	ddf4      	ble.n	800f576 <__kernel_rem_pio2f+0x92>
 800f58c:	ece9 7a01 	vstmia	r9!, {s15}
 800f590:	f10c 0c01 	add.w	ip, ip, #1
 800f594:	3004      	adds	r0, #4
 800f596:	e7d5      	b.n	800f544 <__kernel_rem_pio2f+0x60>
 800f598:	a908      	add	r1, sp, #32
 800f59a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f59e:	9104      	str	r1, [sp, #16]
 800f5a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f5a2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800f7e4 <__kernel_rem_pio2f+0x300>
 800f5a6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800f7e0 <__kernel_rem_pio2f+0x2fc>
 800f5aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f5ae:	9203      	str	r2, [sp, #12]
 800f5b0:	4654      	mov	r4, sl
 800f5b2:	00a2      	lsls	r2, r4, #2
 800f5b4:	9205      	str	r2, [sp, #20]
 800f5b6:	aa58      	add	r2, sp, #352	@ 0x160
 800f5b8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f5bc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800f5c0:	a944      	add	r1, sp, #272	@ 0x110
 800f5c2:	aa08      	add	r2, sp, #32
 800f5c4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f5c8:	4694      	mov	ip, r2
 800f5ca:	4626      	mov	r6, r4
 800f5cc:	2e00      	cmp	r6, #0
 800f5ce:	f1a0 0004 	sub.w	r0, r0, #4
 800f5d2:	dc4c      	bgt.n	800f66e <__kernel_rem_pio2f+0x18a>
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f5da:	f7ff fef7 	bl	800f3cc <scalbnf>
 800f5de:	eeb0 8a40 	vmov.f32	s16, s0
 800f5e2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800f5e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f5ea:	f000 f9ed 	bl	800f9c8 <floorf>
 800f5ee:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800f5f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f5f6:	2d00      	cmp	r5, #0
 800f5f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f600:	ee17 9a90 	vmov	r9, s15
 800f604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f608:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f60c:	dd41      	ble.n	800f692 <__kernel_rem_pio2f+0x1ae>
 800f60e:	f104 3cff 	add.w	ip, r4, #4294967295
 800f612:	a908      	add	r1, sp, #32
 800f614:	f1c5 0e08 	rsb	lr, r5, #8
 800f618:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800f61c:	fa46 f00e 	asr.w	r0, r6, lr
 800f620:	4481      	add	r9, r0
 800f622:	fa00 f00e 	lsl.w	r0, r0, lr
 800f626:	1a36      	subs	r6, r6, r0
 800f628:	f1c5 0007 	rsb	r0, r5, #7
 800f62c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800f630:	4106      	asrs	r6, r0
 800f632:	2e00      	cmp	r6, #0
 800f634:	dd3c      	ble.n	800f6b0 <__kernel_rem_pio2f+0x1cc>
 800f636:	f04f 0e00 	mov.w	lr, #0
 800f63a:	f109 0901 	add.w	r9, r9, #1
 800f63e:	4670      	mov	r0, lr
 800f640:	4574      	cmp	r4, lr
 800f642:	dc68      	bgt.n	800f716 <__kernel_rem_pio2f+0x232>
 800f644:	2d00      	cmp	r5, #0
 800f646:	dd03      	ble.n	800f650 <__kernel_rem_pio2f+0x16c>
 800f648:	2d01      	cmp	r5, #1
 800f64a:	d074      	beq.n	800f736 <__kernel_rem_pio2f+0x252>
 800f64c:	2d02      	cmp	r5, #2
 800f64e:	d07d      	beq.n	800f74c <__kernel_rem_pio2f+0x268>
 800f650:	2e02      	cmp	r6, #2
 800f652:	d12d      	bne.n	800f6b0 <__kernel_rem_pio2f+0x1cc>
 800f654:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f658:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f65c:	b340      	cbz	r0, 800f6b0 <__kernel_rem_pio2f+0x1cc>
 800f65e:	4628      	mov	r0, r5
 800f660:	9306      	str	r3, [sp, #24]
 800f662:	f7ff feb3 	bl	800f3cc <scalbnf>
 800f666:	9b06      	ldr	r3, [sp, #24]
 800f668:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f66c:	e020      	b.n	800f6b0 <__kernel_rem_pio2f+0x1cc>
 800f66e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f672:	3e01      	subs	r6, #1
 800f674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f67c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f680:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f684:	ecac 0a01 	vstmia	ip!, {s0}
 800f688:	ed90 0a00 	vldr	s0, [r0]
 800f68c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f690:	e79c      	b.n	800f5cc <__kernel_rem_pio2f+0xe8>
 800f692:	d105      	bne.n	800f6a0 <__kernel_rem_pio2f+0x1bc>
 800f694:	1e60      	subs	r0, r4, #1
 800f696:	a908      	add	r1, sp, #32
 800f698:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800f69c:	11f6      	asrs	r6, r6, #7
 800f69e:	e7c8      	b.n	800f632 <__kernel_rem_pio2f+0x14e>
 800f6a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f6a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ac:	da31      	bge.n	800f712 <__kernel_rem_pio2f+0x22e>
 800f6ae:	2600      	movs	r6, #0
 800f6b0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b8:	f040 8098 	bne.w	800f7ec <__kernel_rem_pio2f+0x308>
 800f6bc:	1e60      	subs	r0, r4, #1
 800f6be:	2200      	movs	r2, #0
 800f6c0:	4550      	cmp	r0, sl
 800f6c2:	da4b      	bge.n	800f75c <__kernel_rem_pio2f+0x278>
 800f6c4:	2a00      	cmp	r2, #0
 800f6c6:	d065      	beq.n	800f794 <__kernel_rem_pio2f+0x2b0>
 800f6c8:	3c01      	subs	r4, #1
 800f6ca:	ab08      	add	r3, sp, #32
 800f6cc:	3d08      	subs	r5, #8
 800f6ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d0f8      	beq.n	800f6c8 <__kernel_rem_pio2f+0x1e4>
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f6dc:	f7ff fe76 	bl	800f3cc <scalbnf>
 800f6e0:	1c63      	adds	r3, r4, #1
 800f6e2:	aa44      	add	r2, sp, #272	@ 0x110
 800f6e4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800f7e4 <__kernel_rem_pio2f+0x300>
 800f6e8:	0099      	lsls	r1, r3, #2
 800f6ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f6ee:	4623      	mov	r3, r4
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f280 80a9 	bge.w	800f848 <__kernel_rem_pio2f+0x364>
 800f6f6:	4623      	mov	r3, r4
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	f2c0 80c7 	blt.w	800f88c <__kernel_rem_pio2f+0x3a8>
 800f6fe:	aa44      	add	r2, sp, #272	@ 0x110
 800f700:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f704:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800f7dc <__kernel_rem_pio2f+0x2f8>
 800f708:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800f7e8 <__kernel_rem_pio2f+0x304>
 800f70c:	2000      	movs	r0, #0
 800f70e:	1ae2      	subs	r2, r4, r3
 800f710:	e0b1      	b.n	800f876 <__kernel_rem_pio2f+0x392>
 800f712:	2602      	movs	r6, #2
 800f714:	e78f      	b.n	800f636 <__kernel_rem_pio2f+0x152>
 800f716:	f852 1b04 	ldr.w	r1, [r2], #4
 800f71a:	b948      	cbnz	r0, 800f730 <__kernel_rem_pio2f+0x24c>
 800f71c:	b121      	cbz	r1, 800f728 <__kernel_rem_pio2f+0x244>
 800f71e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800f722:	f842 1c04 	str.w	r1, [r2, #-4]
 800f726:	2101      	movs	r1, #1
 800f728:	f10e 0e01 	add.w	lr, lr, #1
 800f72c:	4608      	mov	r0, r1
 800f72e:	e787      	b.n	800f640 <__kernel_rem_pio2f+0x15c>
 800f730:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800f734:	e7f5      	b.n	800f722 <__kernel_rem_pio2f+0x23e>
 800f736:	f104 3cff 	add.w	ip, r4, #4294967295
 800f73a:	aa08      	add	r2, sp, #32
 800f73c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f740:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f744:	a908      	add	r1, sp, #32
 800f746:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800f74a:	e781      	b.n	800f650 <__kernel_rem_pio2f+0x16c>
 800f74c:	f104 3cff 	add.w	ip, r4, #4294967295
 800f750:	aa08      	add	r2, sp, #32
 800f752:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f756:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f75a:	e7f3      	b.n	800f744 <__kernel_rem_pio2f+0x260>
 800f75c:	a908      	add	r1, sp, #32
 800f75e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f762:	3801      	subs	r0, #1
 800f764:	430a      	orrs	r2, r1
 800f766:	e7ab      	b.n	800f6c0 <__kernel_rem_pio2f+0x1dc>
 800f768:	3201      	adds	r2, #1
 800f76a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800f76e:	2e00      	cmp	r6, #0
 800f770:	d0fa      	beq.n	800f768 <__kernel_rem_pio2f+0x284>
 800f772:	9905      	ldr	r1, [sp, #20]
 800f774:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800f778:	eb0d 0001 	add.w	r0, sp, r1
 800f77c:	18e6      	adds	r6, r4, r3
 800f77e:	a91c      	add	r1, sp, #112	@ 0x70
 800f780:	f104 0c01 	add.w	ip, r4, #1
 800f784:	384c      	subs	r0, #76	@ 0x4c
 800f786:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800f78a:	4422      	add	r2, r4
 800f78c:	4562      	cmp	r2, ip
 800f78e:	da04      	bge.n	800f79a <__kernel_rem_pio2f+0x2b6>
 800f790:	4614      	mov	r4, r2
 800f792:	e70e      	b.n	800f5b2 <__kernel_rem_pio2f+0xce>
 800f794:	9804      	ldr	r0, [sp, #16]
 800f796:	2201      	movs	r2, #1
 800f798:	e7e7      	b.n	800f76a <__kernel_rem_pio2f+0x286>
 800f79a:	9903      	ldr	r1, [sp, #12]
 800f79c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f7a0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800f7a4:	9105      	str	r1, [sp, #20]
 800f7a6:	ee07 1a90 	vmov	s15, r1
 800f7aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7ae:	2400      	movs	r4, #0
 800f7b0:	ece6 7a01 	vstmia	r6!, {s15}
 800f7b4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800f7e8 <__kernel_rem_pio2f+0x304>
 800f7b8:	46b1      	mov	r9, r6
 800f7ba:	455c      	cmp	r4, fp
 800f7bc:	dd04      	ble.n	800f7c8 <__kernel_rem_pio2f+0x2e4>
 800f7be:	ece0 7a01 	vstmia	r0!, {s15}
 800f7c2:	f10c 0c01 	add.w	ip, ip, #1
 800f7c6:	e7e1      	b.n	800f78c <__kernel_rem_pio2f+0x2a8>
 800f7c8:	ecfe 6a01 	vldmia	lr!, {s13}
 800f7cc:	ed39 7a01 	vldmdb	r9!, {s14}
 800f7d0:	3401      	adds	r4, #1
 800f7d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f7d6:	e7f0      	b.n	800f7ba <__kernel_rem_pio2f+0x2d6>
 800f7d8:	0801028c 	.word	0x0801028c
 800f7dc:	08010260 	.word	0x08010260
 800f7e0:	43800000 	.word	0x43800000
 800f7e4:	3b800000 	.word	0x3b800000
 800f7e8:	00000000 	.word	0x00000000
 800f7ec:	9b02      	ldr	r3, [sp, #8]
 800f7ee:	eeb0 0a48 	vmov.f32	s0, s16
 800f7f2:	eba3 0008 	sub.w	r0, r3, r8
 800f7f6:	f7ff fde9 	bl	800f3cc <scalbnf>
 800f7fa:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800f7e0 <__kernel_rem_pio2f+0x2fc>
 800f7fe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f806:	db19      	blt.n	800f83c <__kernel_rem_pio2f+0x358>
 800f808:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800f7e4 <__kernel_rem_pio2f+0x300>
 800f80c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f810:	aa08      	add	r2, sp, #32
 800f812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f816:	3508      	adds	r5, #8
 800f818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f81c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f824:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f828:	ee10 3a10 	vmov	r3, s0
 800f82c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f830:	ee17 3a90 	vmov	r3, s15
 800f834:	3401      	adds	r4, #1
 800f836:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f83a:	e74c      	b.n	800f6d6 <__kernel_rem_pio2f+0x1f2>
 800f83c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f840:	aa08      	add	r2, sp, #32
 800f842:	ee10 3a10 	vmov	r3, s0
 800f846:	e7f6      	b.n	800f836 <__kernel_rem_pio2f+0x352>
 800f848:	a808      	add	r0, sp, #32
 800f84a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f84e:	9001      	str	r0, [sp, #4]
 800f850:	ee07 0a90 	vmov	s15, r0
 800f854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f858:	3b01      	subs	r3, #1
 800f85a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f85e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f862:	ed62 7a01 	vstmdb	r2!, {s15}
 800f866:	e743      	b.n	800f6f0 <__kernel_rem_pio2f+0x20c>
 800f868:	ecfc 6a01 	vldmia	ip!, {s13}
 800f86c:	ecb5 7a01 	vldmia	r5!, {s14}
 800f870:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f874:	3001      	adds	r0, #1
 800f876:	4550      	cmp	r0, sl
 800f878:	dc01      	bgt.n	800f87e <__kernel_rem_pio2f+0x39a>
 800f87a:	4282      	cmp	r2, r0
 800f87c:	daf4      	bge.n	800f868 <__kernel_rem_pio2f+0x384>
 800f87e:	a858      	add	r0, sp, #352	@ 0x160
 800f880:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f884:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800f888:	3b01      	subs	r3, #1
 800f88a:	e735      	b.n	800f6f8 <__kernel_rem_pio2f+0x214>
 800f88c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f88e:	2b02      	cmp	r3, #2
 800f890:	dc09      	bgt.n	800f8a6 <__kernel_rem_pio2f+0x3c2>
 800f892:	2b00      	cmp	r3, #0
 800f894:	dc2b      	bgt.n	800f8ee <__kernel_rem_pio2f+0x40a>
 800f896:	d044      	beq.n	800f922 <__kernel_rem_pio2f+0x43e>
 800f898:	f009 0007 	and.w	r0, r9, #7
 800f89c:	b059      	add	sp, #356	@ 0x164
 800f89e:	ecbd 8b04 	vpop	{d8-d9}
 800f8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f8a8:	2b03      	cmp	r3, #3
 800f8aa:	d1f5      	bne.n	800f898 <__kernel_rem_pio2f+0x3b4>
 800f8ac:	aa30      	add	r2, sp, #192	@ 0xc0
 800f8ae:	1f0b      	subs	r3, r1, #4
 800f8b0:	4413      	add	r3, r2
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	f1a2 0204 	sub.w	r2, r2, #4
 800f8bc:	dc52      	bgt.n	800f964 <__kernel_rem_pio2f+0x480>
 800f8be:	4622      	mov	r2, r4
 800f8c0:	2a01      	cmp	r2, #1
 800f8c2:	f1a3 0304 	sub.w	r3, r3, #4
 800f8c6:	dc5d      	bgt.n	800f984 <__kernel_rem_pio2f+0x4a0>
 800f8c8:	ab30      	add	r3, sp, #192	@ 0xc0
 800f8ca:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800f7e8 <__kernel_rem_pio2f+0x304>
 800f8ce:	440b      	add	r3, r1
 800f8d0:	2c01      	cmp	r4, #1
 800f8d2:	dc67      	bgt.n	800f9a4 <__kernel_rem_pio2f+0x4c0>
 800f8d4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800f8d8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800f8dc:	2e00      	cmp	r6, #0
 800f8de:	d167      	bne.n	800f9b0 <__kernel_rem_pio2f+0x4cc>
 800f8e0:	edc7 6a00 	vstr	s13, [r7]
 800f8e4:	ed87 7a01 	vstr	s14, [r7, #4]
 800f8e8:	edc7 7a02 	vstr	s15, [r7, #8]
 800f8ec:	e7d4      	b.n	800f898 <__kernel_rem_pio2f+0x3b4>
 800f8ee:	ab30      	add	r3, sp, #192	@ 0xc0
 800f8f0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800f7e8 <__kernel_rem_pio2f+0x304>
 800f8f4:	440b      	add	r3, r1
 800f8f6:	4622      	mov	r2, r4
 800f8f8:	2a00      	cmp	r2, #0
 800f8fa:	da24      	bge.n	800f946 <__kernel_rem_pio2f+0x462>
 800f8fc:	b34e      	cbz	r6, 800f952 <__kernel_rem_pio2f+0x46e>
 800f8fe:	eef1 7a47 	vneg.f32	s15, s14
 800f902:	edc7 7a00 	vstr	s15, [r7]
 800f906:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800f90a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f90e:	aa31      	add	r2, sp, #196	@ 0xc4
 800f910:	2301      	movs	r3, #1
 800f912:	429c      	cmp	r4, r3
 800f914:	da20      	bge.n	800f958 <__kernel_rem_pio2f+0x474>
 800f916:	b10e      	cbz	r6, 800f91c <__kernel_rem_pio2f+0x438>
 800f918:	eef1 7a67 	vneg.f32	s15, s15
 800f91c:	edc7 7a01 	vstr	s15, [r7, #4]
 800f920:	e7ba      	b.n	800f898 <__kernel_rem_pio2f+0x3b4>
 800f922:	ab30      	add	r3, sp, #192	@ 0xc0
 800f924:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800f7e8 <__kernel_rem_pio2f+0x304>
 800f928:	440b      	add	r3, r1
 800f92a:	2c00      	cmp	r4, #0
 800f92c:	da05      	bge.n	800f93a <__kernel_rem_pio2f+0x456>
 800f92e:	b10e      	cbz	r6, 800f934 <__kernel_rem_pio2f+0x450>
 800f930:	eef1 7a67 	vneg.f32	s15, s15
 800f934:	edc7 7a00 	vstr	s15, [r7]
 800f938:	e7ae      	b.n	800f898 <__kernel_rem_pio2f+0x3b4>
 800f93a:	ed33 7a01 	vldmdb	r3!, {s14}
 800f93e:	3c01      	subs	r4, #1
 800f940:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f944:	e7f1      	b.n	800f92a <__kernel_rem_pio2f+0x446>
 800f946:	ed73 7a01 	vldmdb	r3!, {s15}
 800f94a:	3a01      	subs	r2, #1
 800f94c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f950:	e7d2      	b.n	800f8f8 <__kernel_rem_pio2f+0x414>
 800f952:	eef0 7a47 	vmov.f32	s15, s14
 800f956:	e7d4      	b.n	800f902 <__kernel_rem_pio2f+0x41e>
 800f958:	ecb2 7a01 	vldmia	r2!, {s14}
 800f95c:	3301      	adds	r3, #1
 800f95e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f962:	e7d6      	b.n	800f912 <__kernel_rem_pio2f+0x42e>
 800f964:	edd2 7a00 	vldr	s15, [r2]
 800f968:	edd2 6a01 	vldr	s13, [r2, #4]
 800f96c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f970:	3801      	subs	r0, #1
 800f972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f976:	ed82 7a00 	vstr	s14, [r2]
 800f97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f97e:	edc2 7a01 	vstr	s15, [r2, #4]
 800f982:	e798      	b.n	800f8b6 <__kernel_rem_pio2f+0x3d2>
 800f984:	edd3 7a00 	vldr	s15, [r3]
 800f988:	edd3 6a01 	vldr	s13, [r3, #4]
 800f98c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f990:	3a01      	subs	r2, #1
 800f992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f996:	ed83 7a00 	vstr	s14, [r3]
 800f99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f99e:	edc3 7a01 	vstr	s15, [r3, #4]
 800f9a2:	e78d      	b.n	800f8c0 <__kernel_rem_pio2f+0x3dc>
 800f9a4:	ed33 7a01 	vldmdb	r3!, {s14}
 800f9a8:	3c01      	subs	r4, #1
 800f9aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9ae:	e78f      	b.n	800f8d0 <__kernel_rem_pio2f+0x3ec>
 800f9b0:	eef1 6a66 	vneg.f32	s13, s13
 800f9b4:	eeb1 7a47 	vneg.f32	s14, s14
 800f9b8:	edc7 6a00 	vstr	s13, [r7]
 800f9bc:	ed87 7a01 	vstr	s14, [r7, #4]
 800f9c0:	eef1 7a67 	vneg.f32	s15, s15
 800f9c4:	e790      	b.n	800f8e8 <__kernel_rem_pio2f+0x404>
 800f9c6:	bf00      	nop

0800f9c8 <floorf>:
 800f9c8:	ee10 3a10 	vmov	r3, s0
 800f9cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f9d0:	3a7f      	subs	r2, #127	@ 0x7f
 800f9d2:	2a16      	cmp	r2, #22
 800f9d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f9d8:	dc2b      	bgt.n	800fa32 <floorf+0x6a>
 800f9da:	2a00      	cmp	r2, #0
 800f9dc:	da12      	bge.n	800fa04 <floorf+0x3c>
 800f9de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fa44 <floorf+0x7c>
 800f9e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f9e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ee:	dd06      	ble.n	800f9fe <floorf+0x36>
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	da24      	bge.n	800fa3e <floorf+0x76>
 800f9f4:	2900      	cmp	r1, #0
 800f9f6:	4b14      	ldr	r3, [pc, #80]	@ (800fa48 <floorf+0x80>)
 800f9f8:	bf08      	it	eq
 800f9fa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f9fe:	ee00 3a10 	vmov	s0, r3
 800fa02:	4770      	bx	lr
 800fa04:	4911      	ldr	r1, [pc, #68]	@ (800fa4c <floorf+0x84>)
 800fa06:	4111      	asrs	r1, r2
 800fa08:	420b      	tst	r3, r1
 800fa0a:	d0fa      	beq.n	800fa02 <floorf+0x3a>
 800fa0c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800fa44 <floorf+0x7c>
 800fa10:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fa14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1c:	ddef      	ble.n	800f9fe <floorf+0x36>
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfbe      	ittt	lt
 800fa22:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800fa26:	fa40 f202 	asrlt.w	r2, r0, r2
 800fa2a:	189b      	addlt	r3, r3, r2
 800fa2c:	ea23 0301 	bic.w	r3, r3, r1
 800fa30:	e7e5      	b.n	800f9fe <floorf+0x36>
 800fa32:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fa36:	d3e4      	bcc.n	800fa02 <floorf+0x3a>
 800fa38:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fa3c:	4770      	bx	lr
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e7dd      	b.n	800f9fe <floorf+0x36>
 800fa42:	bf00      	nop
 800fa44:	7149f2ca 	.word	0x7149f2ca
 800fa48:	bf800000 	.word	0xbf800000
 800fa4c:	007fffff 	.word	0x007fffff

0800fa50 <_init>:
 800fa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa52:	bf00      	nop
 800fa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa56:	bc08      	pop	{r3}
 800fa58:	469e      	mov	lr, r3
 800fa5a:	4770      	bx	lr

0800fa5c <_fini>:
 800fa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa5e:	bf00      	nop
 800fa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa62:	bc08      	pop	{r3}
 800fa64:	469e      	mov	lr, r3
 800fa66:	4770      	bx	lr
